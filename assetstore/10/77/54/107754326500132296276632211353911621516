Generacio´n de nu´ meros pseudo-aleatorios con auto´matas celulares unidimensionales de radio 2
Random number generation with one-dimensional r = 2, k = 2 cellular automata
Nelson Enrique Castillo Izquierdo emQbit Ltda, Colombia. nelson@emqbit.com

Resumen
El objetivo de este trabajo es encontrar reglas para la generacio´n de nu´meros pseudo-aleatorios con auto´matas celulares unidimensionales de radio 2. En primera instancia, las reglas son obtenidas automa´ticamente con un algoritmo gene´tico. Se hace un ana´lisis estad´ıstico preliminar del comportamiento de la funcio´n objetivo, y un ana´lisis cualitativo de las reglas que con mayor probabilidad sera´n u´tiles para hacer posible posterior exploracio´n exhaustiva del espacio de todos las posibles reglas (232). Se describe el uso de un cluster de estaciones de trabajo usado para ejecutar un algoritmo gene´tico paralelo.
Abstract
An evolutionary method to ﬁnd r = 2, d = 1, k = 2 cellular automata rules suitable for pseudo-random number generation is shown. A qualitative analysis and preliminary statistical analysis is performed to allow an exhaustive exploration of the relevant subset of all the rules in the considered cellular automata space (232 rules) . A parallel genetic algorithm that ran in a cluster of workstations as part of this work is also described.
1. Introduccio´n
1.1. Nu´meros Pseudo-Aleatorios
Los me´todos pra´cticos para obtener nu´meros aleatorios suelen esta´n basados en algoritmos determin´ısticos, y por esta razo´n, e´stos nu´meros son llamados pseudoaleatorios para distinguirlos de los nu´meros aleatorios considerados verdaderos, que aparecen en algunos feno´menos f´ısicos naturales. Los nu´meros “elegidos al azar” son u´tiles en diferentes clases de aplicaciones, por ejemplo: simulacio´n, muestreo, ana´lisis nume´rico, programacio´n de com-

putadores, toma de decisiones, este´tica, recreacio´n y criptograf´ıa.
En la pra´ctica, no es conveniente hablar de un nu´mero aleatorio, por ejemplo: ¿es 2 un nu´mero aleatorio?. Por esta razo´n en lugar de hablar de un nu´mero aleatorio, se habla de una secuencia de nu´meros aleatorios independientes con una distribucio´n determinada, y esto vagamente signiﬁca que cada nu´mero fue obtenido totalmente al azar y que no tiene que ver nada con los otros miembros de la secuencia, y que cada nu´mero tiene una probabilidad determinada de estar en cualquier parte dentro de un rango de valores dado.
Hay diferentes maneras de formular deﬁniciones abstractas de aleatoriedad. El lector interesado puede consultar el libro The Art of Computer Programming, de Donald E. Knuth[4].
Para determinar que tan buenos son los nu´meros pseudoaleatorios generados en este proyecto, se usan pruebas estad´ısticas de aleatoriedad utilizando programas disponibles sin costo en Internet que han sido usados en proyectos similares: –generacio´n de secuencias pseudo-aleatorias con auto´matas celulares–, realizados con anterioridad [7] [8] [2] [5]. El programa ma´s importante en este caso es diehard (la versio´n en C es diehardc). Estos programas ya no son mantenidos y para futuros desarrollos es conveniente explorar el uso del programa Dieharder (http://www.phy.duke.edu/ rgb/General/dieharder.php), que es mantenido por Robert G. Brown, quien es conocido por sus aportes a la comunidad de los clusters Beowulf.
1.2. Aut´omatas celulares
Un auto´mata celular (AC) consiste en una ret´ıcula regular de celdas, cada una de las cuales puede estar en uno entre un nu´mero ﬁnito k de estados. Los auto´matas considerados en este trabajo permiten dos posibles estados para cada celda (k = 2). Los estados se denotan 0 y 1. Estos auto´matas tambie´n son llamados “binarios”. Los estados de un auto´mata celular son actualizados s´ıncronamente en pa-

sos discretos de tiempo, de acuerdo a una regla de interaccio´n local ide´ntica para todas las celdas. Los auto´matas celulares exhiben tres caracter´ısticas notables: paralelismo masivo, interaccio´n local de las celdas y estar formados por componentes ba´sicos simples (celdas). El problema es disen˜ar el sistema paralelo de interaccio´n loca –la regla– que exhiba un comportamiento espec´ıﬁco o resuelva un problema en particular [6].
El primero en proponer formalmente el uso de auto´matas celulares para la generacio´n de nu´meros aleatorios fue Stephen Wolfram[10], en el an˜o 1985. En este trabajo, para conseguir reglas apropiadas para la generacio´n de nu´meros pseudo-aleatorios con los auto´matas celulares unidimensionales de r = 2, k = 2, inicialmente se uso´ un algoritmo gene´tico. Para esto se uso´ la librer´ıa GALib. El co´digo fuente relevante se encuentra disponible en Internet, con licencia GPL, y se puede descargar del repositorio de subversion http://svn.arhuaco.org/svn/src/carnd/trunk/.
1.3. Algoritmos Gen´eticos
Un algoritmo gene´tico (AG) es un procedimiento iterativo que se compone de una poblacio´n constante de individuos, cada uno de los cuales se encuentra representado por una cadena ﬁnita de s´ımbolos, conocida como el genoma, codiﬁcando una posible solucio´n en el espacio de un problema. A e´ste espacio se le denomina espacio de bu´squeda, y consiste en todas las posibles soluciones al problema con el que se esta´ trabajando. Para diferenciar una solucio´n –codiﬁcada en un individuo– de otra, se usa una funcio´n objetivo o funcio´n de aptitud que se encarga de informar al algoritmo que´ tanto un individuo se ajusta al criterio de bu´squeda, para que esta informacio´n sea utilizada en la optimizacio´ n.
El algoritmo gene´tico esta´ndar procede de la siguiente forma: una poblacio´n inicial de individuos es generada aleatoria o heur´ısticamente. En cada paso evolutivo, conocido como generacio´n, los individuos en la poblacio´n actual son decodiﬁcados y evaluados de acuerdo a algu´n criterio predeﬁnido de calidad, que se conoce como ﬁtness o funcio´n de aptitud. Para formar una nueva poblacio´n (la siguiente generacio´n), los individuos son seleccionados de acuerdo a su ﬁtness. Muchos procedimientos de seleccio´n se usan actualmente, uno de los ma´s simples es la seleccio´n proporcional al ﬁtness, introducida originalmente por Holland, en donde los individuos son seleccionados con una probabilidad proporcional a su ﬁtness relativo. Esto asegura que el nu´mero esperado de veces que un individuo es seleccionado es aproximadamente proporcional a su desempen˜o con respecto a la poblacio´n. De esta forma los individuos con un valor alto en el ﬁtness –los buenos– tienen mejores posibilidades para reproducirse, mientras que lo de ﬁtness bajo tienden a desaparecer. La sola seleccio´n no puede in-

troducir individuos nuevos en la poblacio´n, es decir, no puede encontrar nuevos puntos en el espacio de bu´squeda. Los nuevos individuos son generados por operadores inspirados en la gene´tica, de los cuales los ma´s conocidos son cruzamiento (crossover) y mutacio´n.
En general, un algoritmo gene´tico se aplica a espacios que son muy grandes para que se realicen bu´squedas exhaustivas en ellos. El alfabeto de s´ımbolos es usualmente binario, aunque otras representaciones han sido tambie´n usadas.
En una etapa inicial, y como parte de un proyecto ﬁnal de carrera, se hizo una exploracio´n del espacio de los auto´matas celulares tridimensionales [1] (Disponible en Internet). Se obtuvieron resultados satisfactorios en tres dimensiones, pero la opinio´n del autor es que el resultado ma´s importante fue la obtencio´n de una funcio´n objetivo general, que pudo ser aplicada con e´xito en un auto´mata celular unidimensional de radio dos –en el an˜o 2005–. Es importante notar que la intencio´n del autor inicialmente –en el an˜o 2001– fue trabajar con auto´matas unidimensionales, pero en las pruebas iniciales exploratorias no se consiguieron resultados prometedores. En el momento, se atribuyo´ el fracaso de las pruebas iniciales con auto´matas celulares unidimensionales a la naturaleza unidimensional del auto´mata, pero en este trabajo se aporta evidencia que indica que lo que faltaba era contar con una funcio´n objetivo apropiada.
2. La funcio´n objetivo
Se uso´ la entrop´ıa como funcio´n de aptitud del algoritmo gene´tico. Tambie´n se usa la entrop´ıa como un valor a tener en cuenta en la exploracio´n exhaustiva.
Un valor alto de entrop´ıa no es una condicio´n suﬁciente –pero si necesaria– para asegurar que un auto´mata celular es bueno para la generacio´n de nu´meros aleatorios. La funcio´n, por si sola, constituye un criterio apropiado para conducir el proceso evolutivo. Para determinar si uno de los auto´matas celulares obtenidos es apropiado para la generacio´n de nu´meros aleatorios, hay que aplicar diferentes pruebas de aleatoriedad.
2.1. Entrop´ıa
Se hace una descripcio´n de la funcio´n de entrop´ıa, de acuerdo al uso que se le dio en los trabajos de Tomassini et. al. [7] [8].
Se tiene una secuencia de bits. Sea k el nu´mero de valores posibles para cada posicio´n de la secuencia (En este caso, 2 posibles estados para cada celda del auto´mata celular) y h la longitud de una sub-secuencia. La entrop´ıa, Eh, medida en bits, para el conjunto de las kh probabilidades de las kh posibles sub-secuencias de longitud h esta´ dada por:

kh
Eh = phj log2 phj
j=1

en donde h1, h2, . . . son todas las posibles sub-

secuencias de longitud h, (Por convencio´n se asume

log20 = 0 al computar la entrop´ıa). Eh alcanza su ma´xi-

mo valor cuando las probabilidades de todas las kh posi-

bles

sub-secuencias

de

longitud

h

son

iguales

a

1 kh

.

Eh

al-

canzar´ıa su ma´ximo valor (h) si cada posible sub-secuencia

apareciera

N kh

veces

en

la

secuencia,

en

otras

palabras,

si

las

sub-secuencias de longitud kh estuvieran uniformemente

distribuidas en la secuencia de longitud N . Se recomien-

da consultar el co´digo fuente para leer una implementacio´n

del co´mputo de la entrop´ıa, especiﬁcada en lenguaje C.

Para medir la entrop´ıa se uso´ h = 4, siendo este es el

ma´ximo valor de ﬁtness que una regla puede alcanzar (En

los trabajos de Sipper y Tomassini se han usado valores de

4 y 7 para h).

2.2. La funci´on objetivo m´as apropiada

Hasta el momento, las observaciones indican que que la funcio´n objetivo ma´s apropiada para usar con un algoritmo gene´tico en el problema en consideracio´n, es medir la entrop´ıa m´ınima en M auto´matas celulares de diferentes taman˜os (N ). En este trabajo, y en particular para el algoritmo gene´tico, se ha usado M = 3, incluyendo un nu´mero par, un impar y un primo. En las pruebas se escogieron los nu´meros 255, 256 y 257. La escogencia de estos nu´meros se dio luego de experimentos simples, y sin estad´ısticas concluyentes. Parte de este trabajo es explorar ma´s esta funcio´n objetivo para evaluar la posibilidad de usar auto´matas celulares de menor taman˜o sin sacriﬁcar la capacidad de la funcio´n objetivo para diferenciar los auto´matas celulares que interesan de los que no. Los que interesan son los que tiene alta entrop´ıa, condicio´n necesaria para lograr buenos resultados en las pruebas estad´ısticas de aleatoriedad.
La idea de la funcio´n objetivo es buscar los auto´matas celulares que pueden generar un comportamiento aleatorio a partir de un patro´n simple (una grilla inicializada en ceros con una casilla con valor 1). A esta propiedad se le denomina en Ingle´s autoplectic behavior [9]. Sheng-Uei Guan et. al [5] usan una aproximacio´n similar para incluir estos auto´matas en sus pruebas, pero no se limitan a esta prueba, como si se hace en este trabajo. Note que usar una sola celda inicializada (en 1) es exagerado, y se puede deﬁnir un criterio menos estricto para buscar el comportamiento autople´ctico.
Para iterar el auto´mata, se usa una vecindad de 5 celdas, que incluye la celda a iterar, y las dos vecinas de cada lado. Como “regla de transicio´n” se usa el vector con el que se

representa el genoma, siendo este el bit de salida de cada uno de los posibles estados de la tabla de transicio´n. As´ı, si el vecindario considerado es 00001, se usara´ el segundo elemento del vector como el valor de la celda en el siguiente estado de tiempo.
Una vez inicializado el auto´mata con un solo 1, se itera 32 veces con la regla a evaluar. Luego se itera el auto´mata celular 1024 veces y se mide la entrop´ıa en cada una de las N celdas del auto´mata.
Se toma la entrop´ıa m´ınima de todas las celdas, como la entrop´ıa del auto´mata. Esta funcio´n objetivo fue u´til en las pruebas preliminares con auto´matas celulares tridimensionales[1], y se uso´ luego con buenos resultados en una dimensio´n.
Para dar la respuesta ﬁnal, que es la entrop´ıa de la regla a considerar, se toma la entrop´ıa m´ınima de los M auto´matas considerados.
3. Cluster de estaciones de trabajo
La funcio´n objetivo requiere co´mputo intensivo, y un algoritmo gene´tico puede ser paralelizado eﬁcientemente en un cluster.
En la etapa preliminar en la que se considero´ un auto´mata celular tridimensional, en el an˜o 2001, se uso´ un Cluster de Estaciones de Trabajo con procesadores Intel Pentium II (400MHz) para el co´mputo de la funcio´n objetivo del algoritmo gene´tico. De las 21 estaciones de trabajo usadas, una se uso´ como servidor con el sistema operativo GNU/Linux (Distribucio´n Debian 2.2r3). Las 20 estaciones restantes se usaron como nodos corriendo Linux con kernel 2.4.4 y un sistema de archivos basado en el sistema de archivos ba´sico de Debian. Los nodos no ten´ıan el sistema operativo Linux instalado en sus discos duros, sino que cargaban la kernel de un diskette. Al arrancar la kernel, esta montaba el sistema de archivos residente en el servidor a trave´s de una red Ethernet, usando NFS. Esto permitio´ utilizar los 21 equipos de la red local sin modiﬁcar la conﬁguracio´n de los discos duros de todos los equipos (solo se modiﬁco´ el del servidor).
En cuanto a la aplicacio´n, se utilizo´ una versio´n modiﬁcada del ejemplo “pvmind” que se distribuye con GALib, el cual permite distribuir el computo del ﬁtness del algoritmo gene´tico usando el software PVM (La Parallel Virtual Machine es un software que permite que un grupo de computadoras agrupadas en una red y con el sistema operativo UNIX o Windows NT sean usadas como un u´nico computador paralelo). Para obtener un beneﬁcio real de esta implementacio´n, es necesario que el tiempo empleado en computar el ﬁtness sea menor que el tiempo requerido para transmitir un individuo por la red, el cual es el caso del ﬁtness usado en este trabajo. En el an˜o en el que se hicieron las pruebas ya se prefer´ıa usar MPI y no PVM, pero ya que el esqueleto del AG que se necesitaba estaba implementado

en muy pocas l´ıneas de co´digo, se decidio´ usar PVM. El empleo del cluster permitio´ hacer 100 corridas del al-
goritmo gene´tico en 13.3 horas. El uso de una sola de las estaciones hubiese requerido aproximadamente 187 horas de computo (7.8 d´ıas), debido a que cada corrida requiere aproximadamente 1.878 horas si se hace en una estacio´n con las mismas caracter´ısticas. Es importante notar que el usar 21 ma´quinas no indica que el computo se realiza 21 veces ma´s ra´pido (de hecho, se realizo´ 14 veces ma´s ra´pido), debido a los costos adicionales en los que se incurre al hacer el co´mputo distribuido (transferencia en red y sincronizacio´n por ejemplo).
En las siguientes corridas del algoritmo gene´tico, con auto´matas celulares unidimensionales, en el an˜o 2005, se hicieron corridas independientes en PCs con procesadores Pentium IV (3.0HGz). El co´mputo de la funcio´n objetivo para el caso unidimensional es mucho menos exigente computacionalmente, y puede ser implementado de manera o´ptima en un PC con registros de 32 bits.
Sin duda, co´mputo puede ser distribuido de nuevo con un cluster o en una grilla, y la idea es hacerlo, pero antes de eso, se propone una exploracio´n exhaustiva del espacio de todos los auto´matas celulares de radio dos, que hoy es posible en un tiempo razonable (especulando, pocos meses) si se dispone de un cluster o´ una grilla. Las estad´ısticas calculadas en este proyecto buscan optimizar el co´mputo de la funcio´n objetivo para hacer ma´s eﬁciente este ca´lculo y proveer una cota superior para el tiempo que se necesitar´ıa en un cluster en particular.
4. Pruebas estad´ısticas de aleatoriedad
En la pra´ctica se usan pruebas estad´ısticas para determinar si un generador de nu´meros pseudo-aleatorios es apropiado o no, y para compararlo con otros generadores.
Si una secuencia generada pasa un numero de pruebas estad´ısticas cuantitativas de aleatoriedad entonces se puede aﬁrmar que la secuencia es aleatoria, por lo menos para propo´sitos pra´cticos.
En este trabajo se utilizo´ el software Diehard, que fue usado en todos los trabajos anteriores referenciados. Este programa, escrito por George Marsaglia, provee un conjunto de tests para evaluar los generadores de nu´meros pseudoaleatorios y es reconocido como uno de los ma´s exhaustivos ([4], p75). La documentacio´n –incluyendo la descripcio´n de las pruebas–se distribuye con el software Diehard. Este software fue escogido entre los disponibles con el objetivo de poder realizar comparaciones con los trabajos previos en el a´rea.
Las pruebas aplicadas con el programa Diehard retornan un p-value. De acuerdo al autor, un generador falla una prueba si el p-value esta´ muy cerca de cero o muy cerca de uno, por seis o ma´s decimales (se uso´ el intervalo de

aceptacio´n [0,001, 0,999]). Estos valores son obtenidos al hacer p = F (X), en donde F es la distribucio´n asumida (con frecuencia, distribucio´n normal) para la variable aleatoria X de la muestra. Debido a que F es una aproximacio´n asinto´tica de la distribucio´n, no se debe interpretar que un p-value menor que 0,025 o mayor que 0,975 indica que se ha fallado la prueba con un nivel de conﬁanza de 0,05, como se podr´ıa hacer en estad´ıstica. Los p-values son un intento de normalizar los resultados obtenidos por las diferentes pruebas y deber´ıan estar distribuidos uniformemente si los nu´meros proceden de una fuente aleatoria.
Para resumir los resultados, se utiliza un programa que analiza la salida del programa Diehard y entrega un valor nume´rico, entre 0 y 23, dependiendo del nu´mero de pruebas que se consideren aprobadas usando el criterio antes expuesto (Ver parse diehardc.pl).
5. Reglas obtenidas con un algoritmo gene´tico
Para mantener la discusio´n relevante al alcance de este documento, no se describen los resultados de la exploracio´n preliminar con auto´matas celulares tridimensionales que permitio´ conseguir la funcio´n objetivo apropiada. El lector interesado puede consultar el documento, que presenta resultados detallados de esta experiencia[1].
Se uso´ un algoritmo gene´tico esta´ndar, con una poblacio´n de 100 individuos. El genoma es binario, de 32 bits. Los individuos son inicializados con probabilidad uniforme.
Se obtuvieron mejores resultados con 2 etapas, una de ellas busca la exploracio´n inicial del espacio de bu´squeda, y se usa una probabilidad de cruce del 100 %, una probabilidad de mutacio´n alta del 50 %, durante 200 iteraciones. La segunta etapa, de 600 iteraciones, se hace con una probabilidad de cruce del 0 %, y una de mutacio´n del 0,1 %. Se implementa un cache´ de la funcio´n objetivo con un hash, con el ﬁn de evitar los ca´lculos repetidos que pueden resultar cuando la diversidad de los individuos del algoritmo gene´tico disminuye (cuando convergen, sobre todo en la segunda etapa).
Para calcular la funcio´n objetivo de cada individuo, se usa la que ya ha sido descrita en este documento, que es la entrop´ıa m´ınima de tres auto´matas, de taman˜os 255, 256 y 257.
Al terminar el algoritmo gene´tico, se obtiene una regla para ser evaluada. Con ella, se crea un auto´mata celular de 512 celdas. Las celdas del auto´mata son inicializadas con el generador de nu´meros del sistema, rand(3).
En cada iteracio´n se contatenan todos los bits del auto´mata y se escriben a un archivo. Se itera hasta que se logre tener un archivo de por lo menos 1024 ∗ 1024 ∗ 10

bytes. Este es el archivo que se usa como entrada al programa diehard.
Con 200 corridas del algoritmo gene´tico, se obtuvieron las siguentes reglas que pasaron las 19 pruebas ba´sicas y las pruebas adicionales del del test diehard. Las reglas se representan convirtiendo el genoma, que es un vector de 32 bits, a su representacio´n entera. Las reglas son: 1164622485, 1771656805, 1767287397, 2510924438, 2589284954, 1512416730, 1448711850, 2509875798, 2774111590, 2526455145, 1217967975, 2527484330, 2790893910, 2773854809, 1718195561, 2859111829, 1452632469, 1515612521, 2779339174, 2510662230, 1788438873, 2523240854, 1653841260, 2527499610, 1768265369, 1318433130, 2577033578, 2577033573, 2572839510, 2778028634, 1771395498, 1722459733, 2523555174, 2510973529, 1687722855, 1432005285 y 2526434661.
Se muestra la forma en la que se puede probar el desempen˜o de una de las reglas con el co´digo del proyecto, en este caso, la regla 1722459733.
$ ./rng1 1722459733 $ ./diehardc out.rnd out.txt \
1111111111111111
OVERLAPPING SUMS : 0.953179 : P RUNS UP 1 : 0.601011 : P RUNS DOWN 1 : 0.018514 : P RUNS UP 2 : 0.294392 : P RUNS DOWN 2 : 0.156919 : P 3DSPHERES : 0.456263 : P PARKING LOT : 0.625643 : P BIRTHDAY SPACINGS TEST : 0.209988 : P BINARY RANK 6x8 MATRICES : 0.677364 : P BINARY RANK 31x31 MATRICES : 0.760132 : P BINARY RANK 32x32 MATRICES : 0.819011 : P COUNT-THE-1’s IN SUCCESSIVE BYTES 1 : 0.791849 : P COUNT-THE-1’s IN SUCCESSIVE BYTES 2 : 0.387364 : P CRAPS No. OF WINS : 0.837590 : P CRAPS THROWS/GAME : 0.689475 : P MINIMUM DISTANCE : 0.713164 : P OVERLAPPING PERMUTATION 1 : 0.007082 : P OVERLAPPING PERMUTATION 2 : 0.618620 : P SQUEEZE : 0.646737 : P
Passed : 19/19 BITSTREAM : 20/20 OPSO : 23/23 OQSO : 28/28 DNA : 31/31
Score=23.000 KS=0.621875
Las u´ltimas l´ıneas totalizan el resultado, mostrando que se pasaron con e´xito todas las pruebas, y que la prueba Kolmogorov-

Smirnov que se hizo con los p-values generados se acerca a una distribucio´n aleatoria (cercano a 0.5).
Note que la escogencia de el nu´mero 512 como taman˜o para el auto´mata celular podr´ıa ser muy grande para una implementacio´n en hardware, y colateralmente, –con toda intencio´n– mejora el resultado de las pruebas presentadas. Por ejemplo, la misma regla del ejemplo obtuvo un score de 15 y un Kolmogorov-Smirnov igual a 1 al usar N = 50.
Para medir con ma´s objetividad los resultados obtenidos, es conveniente conocer ma´s el espacio de bu´squeda, que es tratable con los recursos computacionales actuales.
6. Hacia la exploracio´n exhaustiva del espacio de bu´ squeda
Debido a los mu´ltiples para´metros a tener en cuenta, y a su impacto en las estad´ısticas que ma´s importan –cua´ntos tests aprueba un generador– se propone no usar un algoritmo gene´tico para explorar este mismo espacio de bu´squeda, sino realizar una exploracio´n exhaustiva y cuidadosa para tener ma´s conocimiento del comportamiento de la funcio´n objetivo. Estos resultados pueden ser de gran utilidad para usar un algoritmo gene´tico en auto´matas celulares ma´s grandes, de radio 3, que tiene 2128 posibles reglas. En las pruebas preliminares [1] se obtuvieron buenos resultados aplicando un AG con un genoma de 128 bits (2128 estados), en el caso del AC tridimensional, por lo que este espacio de bu´squeda es todav´ıa apropiado para un AG.
La exploracio´n del espacio de los auto´matas celulares de radio 2 (232, inicialmente) permitira´ comprender que tan abundantes son los buenos generadores en el espacio de bu´squeda del algoritmo gene´tico. As´ı, se podra´ poner en contexto los resultados obtenidos, que parecen buenos con las pruebas, que indudablemente, esta´n particularmente “optimizadas” para que los resultados se vean bien, lo que se hizo evidente al reducir el taman˜o del auto´mata celular.
Antes de pensar en modiﬁcar todas las pruebas y aplicar una estrategia de prueba y error para obtener una funcio´n objetivo que de mejores resultados con auto´matas celulares pequen˜os (consideremos pequen˜os los de menos de 64 celdas), es conveniente tratar de responder primero algunas preguntas importantes.
¿Cua´les son los mejores para´metros para una funcio´n objetivo?
¿cua´l es el ma´ximo valor que esta funcio´n puede obtener?
¿Es posible acelerar el co´mputo de la funcio´n objetivo tomando en cuenta otros datos para medir en el AC?
¿Que´ tan fuerte es la correlacio´n de esta funcio´n objetivo y las pruebas de diehard para las reglas que tienen mejor desempen˜ o?
¿Cua´l es el menor taman˜o que se puede usar en un AC para seguir obteniedo buenos resultados en las pruebas de pseudoaleatoriedad?
¿Co´mo se pueden combinar las reglas obtenidas para formar mejores generadores?
No es fa´cil responder todas estas preguntas, y como primer paso para comenzar a responder preguntas, encontrar nuevas, y

descartar las que no conviene considerar, se propone un primer paso exploratorio, que es hacer un muestreo estad´ıstico del espacio de bu´squeda considerado.
Se presentan algunas heur´ısticas que se consideran para disminuir el espacio de bu´squeda a considerar para las pruebas preliminares, y algunas que sera´n implementadas en una exploracio´n posterior.
6.1. Evitar las reglas que cambian el fondo
En primer lugar, para estas estad´ısticas se considerara´n so´lo las reglas que conservan el fondo. Es decir, el vecindario 00000 indica que despue´s de una iteracio´n, el estado de la celda central sera´ 0. Esto disminuye a la mitad (231) el espacio a considerar. Esta consideracio´n es u´til para hacer posible la siguiente heur´ıstica.
6.2. Sintonizar las reglas ca´oticas y evitar simetr´ıas
Langton [3] propuso un para´metro λ, que permite “sintonizar” reglas cao´ticas de forma probabil´ıstica. De acuerdo al rango del para´metro, es posible obtener auto´matas que corresponden a una de las 4 clasiﬁcaciones propuestas por Wolfram [11]. De las clases propuestas, la que nos interesa es la III, que es la que produce comportamientos cao´ticos.
El para´metro λ fa´cil de calcular. Se toma el nu´mero de combinaciones en la tabla de transicio´n que llevan al estado 1, y se divide este nu´mero entre el nu´mero de vecindarios posibles. Los auto´matas celulares de clase III se encuentran cercanos al valor λ = 0,5. As´ı que si se quieren buscar reglas aleatorias, conviene empezar por 0,5 e ir disminuyendo el valor de lambda.
En la pra´ctica, esto se logra cambiando el nu´mero de unos que se permiten en la regla. As´ı, si la tabla de transicio´n tiene 32 estados, podemos comenzar a considerar todas las reglas con 16 unos inicialmente. Luego, todas las reglas con 15 unos. Luego, todas las reglas con 14 unos, hasta que ya se note que no se consiguen suﬁcientes auto´matas celulares apropiados.
Note que consideramos so´lo el rango 0 <= λ <= 1/2, porque todo AC con λ > 0,5 corresponde a otro AC con λ < 0,5, si se cambia la convencio´n para celdas “vivas” de 1 a 0. De esta forma se evita considerar conﬁguraciones sime´tricas. En el caso que tratamos ahora, falta decidir si se hara´n pruebas con 16 unos en la regla o no.
Lo bueno es que ya con estas dos heur´ısticas, podemos saber cuantos ACs debemos evaluar, para diferentes valores de lambda, para un taman˜o de AC (N ) en particular, dependiendo del nu´mero de unos presentes en la regla del AC. Se consideran las combinaciones (no permutaciones), teniendo en cuenta que hay 31 posibles casillas para ubicar los nu´meros considerados.
En este ejemplo, se hace ver que el total de ACs a evaluar cuando hay 15 de 31 unos es 265182525, un poco ma´s de 265 millones de reglas. De acuerdo a los co´mputos preliminares, para los que se hizo una estad´ıstica con 10 millones de reglas para estas conﬁguraciones, esta cantidad de reglas es tratable, por lo que es viable hacer una exploracio´n exhaustiva del espacio de bu´squeda que nos interesa. Si variamos el nu´mero de unos en la regla de 8 a 16, debemos evaluar 1072799175, un poco ma´s de mil millones de reglas,

Unos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16

# reglas 1 31
465 4495 31465 169911 736281 2629575 7888725 20160075 44352165 84672315 141120525 206253075 265182525 300540195

Cuadro 1. Cantidad de reglas a evaluar de acuerdo al nu´ mero de unos en la regla

un espacio menor menor al taman˜o total del espacio considerado (232).
6.3. Estad´ısticas preliminares
Para comparar el algoritmo gene´tico con la exploracio´n exhaustiva de reglas, se hizo un muestreo del espacio de bu´squeda. Para esto, se tomo´ un entero sin signo de 32 bits, que cumpl´ıa la funcio´n de contador, inicializado en uno. Una regla para los auto´matas tratados en este trabajo requiere 32 bits. El contador se incrementaba y en cada momento se contaba el nu´mero de bits en uno que se requer´ıan para representar el entero correspondiente. La idea es poder listar en un orden fa´cil de reproducir las reglas que tienen B bits en 1. As´ı, so´lo se consideraban los nu´meros que cumplen este u´ltimo criterio.
Esta aproximacio´n no usa almacenamiento externo, y es fa´cil de implementar. (Ver http://svn.arhuaco.org/svn/src/carnd/trunk/src/check-many.c).
Se evaluo´ la entrop´ıa de las primeras 10 millones de reglas generadas de esta forma, con diferentes taman˜os de ret´ıcula, siendo relevantes en este ana´lisis 255, 256 y 257, por ser los mismos valores empleados en la funcio´n objetivo.
Esto se hizo con valores de 13, 14 y 15 para B, debido a que esto hace que el para´metro λ sea cercano a 0.5, y de acuerdo a la teor´ıa existente la probabilidad de sintonizar reglas cao´ticas es mayor cuando λ se acerca a 0,5. Se evaluaron 30 millones de reglas, cada una de ellas con una 3 diferentes taman˜os de ret´ıcula, para un total de 90 millones de evaluaciones.
De la misma forma que se hace con la funcio´n objetivo, se tomo´ la m´ınima entrop´ıa de las tres medidas. Los 10 millones de valores se ordenaron ascendentemente, y se tomaron los mejores 2000. Estas reglas se sometieron a las pruebas estad´ısticas de aleatoriedad antes descritas, y el resultado -inesperado- fue que

no se encontraron reglas que pasaran la mayor´ıa de las pruebas. De hecho, las 10 mejores reglas de las 10 millones tuvieron un pobre desempen˜o en las pruebas estad´ısticas. A continuacio´n se muestran las 10 reglas con valor ma´s alto de entrop´ıa. La primera columna corresponde a la regla, la segunda al valor de entrop´ıa medido de la misma forma que se hace en la funcio´n objetivo del AG, y la tercera al nu´mero de pruebas estad´ısticas aprobadas por la regla.
151649768 3.99008 0 131134734 3.98875 0 125096222 3.9823 0 151645688 3.97471 0 104031674 3.9744 4 39306166 3.95035 0 14523004 3.94862 0 14141334 3.94722 0 39307158 3.94707 0 46647190 3.94703 1
Un problema de la metodolog´ıa usada para este ana´lisis es que la mayor´ıa de unos en las reglas consideradas esta´n en los bits menos signiﬁcativos, y esta restriccio´n no existe para el algoritmo gene´tico. Por esto, es necesario realizar otra prueba en la que se consideren todas las reglas disponibles para los mismos valores de B, y no so´lo las primeras 10 millones. En cuanto al tiempo de ejecucio´n, con B = 15, una grilla de 257 celdas, la evaluacio´n de 10 millones de reglas tomo´ 17,15 Horas. Esta medida se tomo´ en un Intel Pentium 4 con una velocidad de reloj de 3.20GHz (3192,322 MHz) y memoria cache´ de 1MB. Evaluar todas las reglas que se obtienen con B = 15 tomar´ıa aproximadamente 445.9 Horas en un PC similar, tiempo que se debe multiplicar por 3 para considerar los diferentes taman˜os de la grilla, igual que en la funcio´n objetivo. Afortunadamente, este proceso es fa´cilmente paralelizable.
7. Ciclos y Secuencias
Los resultados actuales del trabajo pueden ser usados para construir generadores de secuencias pseudo-aleatorias en hardware. Una caracter´ıstica importante de los generadores de nu´meros pseudo-aleatorios es el per´ıodo de los mismos. Es posible disen˜ar auto´matas celulares con per´ıodo muy grande, pero estos no son buenos para la generacio´n de secuencias pseudo-aleatorias. [7] Si se consideran todos los estados de un AC y las transiciones entre estados, se puede tratar el problema de hallar el ma´ximo periodo en un AC como un problema de grafos y ciclos en grafos. Conseguir un generador apropiado para tareas simples se reduce a encontrar el ciclo ma´s grande en un auto´mata, y tomar el valor de uno de los nodos en el ciclo como semilla para la generacio´n. Es posible hacer una implementacio´n eﬁciente del algoritmo, ya que los ciclos en auto´matas celulares deterministas cumplen dos propiedades particulares: cada nodo tiene un so´lo sucesor, y existe una funcio´n eﬁciente que permite hallar el sucesor para un estado dado. No es necesario tener cada estado (el valor de un nodo en el grafo) en RAM porque los estados son ennumerables, van de 0 a 2N - 1 (N es el taman˜o de la grilla). Por esto fue posible escribir un programa que necesita so´lo 2 bits por estado para encontrar todos

los ciclos en un AC (Ver http://svn.arhuaco.org/svn/src/cagraph/ ). Un bit se utiliza para marcar un estado ha sido visitado, y el otro para indicar si el estado hace parte del ciclo que se esta´ buscando. El ciclo ma´s grande encontrado en las pruebas preliminares es de 1.323.700 estados, corresponde al AC con regla 1516874342, y una grilla de 31 celdas. Con esta informacio´n sabemos que se puede generar una secuencia de 1.323.700 nu´meros de 31 bits. El grafo tiene 2.147.483.648 estados, y se requieren 512MB de RAM para realizar este co´mputo. Se muestra un ejemplo de la ejecucio´n del programa:
$ ./cafindcycles 1516874342 31 rule 1516874342 N=31 Memory = 536870912B 512MB 1 1323700 15593 124 31 124 1147 12214 6975 31 294192 (salida omitida)
En las pruebas iniciales no se espera al que programa termine, ya que se ha observado emp´ıricamente que la probabilidad de encontrar el ciclo ma´s grande disminuye a medida que se encuentran ciclos (no se ha examinado el fundamento teo´rico de esta observacio´n, que muy probablemente ya esta´ documentada). Para la generacio´n de secuencias usando este me´todo existen dos mejoras posibles. La primera, es usar un contador de iteraciones para hacer un cambio de regla cuando se complete un ciclo, para as´ı generar una secuencia ma´s grande. La segunda es no considerar so´lo el ciclo, sino el camino ma´s largo que conduzca al ciclo. El algoritmo para la segunda mejora no ha sido explorado todav´ıa en este trabajo. Este problema de encontrar el ciclo ma´s grande no parece fa´cilmente paralelizable, ya que si se usa ma´s de un procesador habr´ıa que utilizar exclusio´n mutua para actualizar los datos que se necesitan para el co´mputo, lo que ir´ıa en detrimento del desempen˜o. Esta paralelizacio´n no se ha considerado hasta el momento y no se ha probado en este trabajo. Por otro lado, el algoritmo no es nada apropiado para beneﬁciarse del uso del cache´ del procesador, ya que requiere uso de gran cantidad de RAM que es accedida de forma pseudo-aleatoria (¡a propo´sito!), y no se aprovecha el cache´ como s´ı lo hacen los problemas que acceden a la memoria con patrones menos cao´ticos.
8. Conclusio´n
En este trabajo se presenta una funcio´n objetivo nueva que permite encontrar auto´matas celulares unidimensionales binarios de r = 2 apropiados para la generacio´n de nu´meros pseudoaleatorios de calidad. Con el ana´lisis estad´ıstico hecho al espacio de bu´squeda del algoritmo gene´tico, se logro´ confrontar los

mejores resultados disponibles en el espacio de bu´squeda para contextualizar el desempen˜o del algoritmo gene´tico, y adema´s, se obtiene el conocimiento necesario para comenzar a explorar auto´matas celulares con reglas ma´s grandes. El siguiente paso lo´gico es explorar el espacio de los auto´matas celulares de r = 3.
9. Trabajo Futuro
Como parte del trabajo futuro se ha considerado evaluar la literatura existente para intentar construir un generador de nu´meros aleatorios, combinando las mejores reglas obtenidas, obteniendo una cota inferior para el taman˜o del per´ıodo del generador. Es importante tener esta garant´ıa para aplicaciones pra´cticas.
Actualmente en emQbit hemos desarrollado una board que tiene un procesador y un FPGA (ECB AT91 V2). Ah´ı se pueden programar auto´matas celulares como los que se describen en este art´ıculo, explotando el paralelismo impl´ıcito que proveen los FPGAs. Se hara´ una implementacio´n de prueba para evaluar las posibilidades y la aceleracio´n que se puede obtener con una implementacio´n razonablemente eﬁciente.
10. Agradecimientos
Para comenzar, este trabajo no habr´ıa sido posible sin la cont´ınua ayuda de la comunidad del grupo comp.theory.cellautomata de USENET. Las discusiones con Idanis D´ıaz fueron muy importantes para el desarrollo de la etapa inicial de este trabajo. Rosario Madera, profesora de la Universidad del Magdalena, fue muy amigable al prestar asesor´ıa estad´ıstica y lo´gica en la etapa inicial de este proyecto. El profesor Samuel Prieto brindo´ apoyo log´ıstico. Se usaron recursos de la Universidad del Magdalena, especialmente computadores personales, para armar un cluster para co´mputo intensivo durante las noches. Christian Trefftz –quien preﬁere que no lo llame doctor ni profesor–, fue especialmente inﬂuyente al ser una gu´ıa permanente en los primeros an˜os al ofrecerme tiempo de co´mputo en ma´quinas a las que ten´ıa acceso y al orientarme en las etapas iniciales, con el trabajo con clusters. Jaime Abella y Johnny Gomez prestaron apoyo log´ıstico en la etapa de pruebas del cluster. Andre´s Caldero´n brindo´ asesor´ıa te´cnica para el desarrollo del proyecto. Por u´ltimo, un agradecimiento a los autores de los programas (Octave, PVM, GALib, GCC, Perl, Autoconf, Python, GNUPLOT, etc) y sistema operativo (GNU/Linux) utilizados en este trabajo, por publicar sus co´digos fuentes, en la mayor´ıa de los casos con licencias permisivas.
11. Informacio´n del Autor
Nelson Castillo es ingeniero de sistemas, egresado de la Universidad del Magdalena. Es socio fundador de la empresa emQbit, en la que actualmente trabaja tiempo completo. Sus intereses incluyen la programacio´n en paralelo, protocolos de red, optimizacio´n, aprendizaje de ma´quina, Linux embebido y lenguajes funcionales.

Referencias
[1] Castillo-Izquierdo, Nelson. Generacio´n de Nu´meros Pseudoaleatorios con Auto´matas Celulares Tridimensionales. 54p. Trabajo de grado. 2001. Disponible en la direccio´n http://svn.arhuaco.org/svn/bin/trabajo grado.tar.gz.
[2] Guan, Sheng-Uei; Zhang, Shu. Incremental Evolution of Cellular Automata for Random Number Generation. International Journal of Modern Physics C, Volume 14, Issue 07, pp. 881896 (2003).
[3] Gutowitz H., Langton C. Methods for Designing ’Interesting’ Cellular automata, CNLS News Letter ,1988.
[4] Knuth, Donald E. The Art of Computer Programming volume 2: Seminumerical Algorithms. Addison-Wesley, Reading, MA, 3rd edition, 1998. 762 p.
[5] Sheng-Uei Guan; Tan S, K. Pseudorandom number generation with self-programmable cellular automata. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, Volume: 23, Issue: 7. pp. 1095-1101. July 2004.
[6] Sipper M. Evolution of Parallel Cellular Machines: The Cellular Programming Approach. Springer-Verlag, Heidelberg, 1997. 199 p.
[7] Tomassini M., Sipper M., Zolla M., Perrenoud M, Generating high-quality random numbers in parallel by cellular automata, Future Generation Computer Systems 16, pp. 291205, 1999.
[8] Tomassini M., Sipper M., Perrenoud M., On the generation of high-quality random numbers by two-dimensional cellular automata, IEEE Transactions on Computers, vol. 49, no. 10, pp. 1146-1151, 2000.
[9] Wolfram S. Origins of Randomness in Physical Systems. Physical Review Letters 55 pp. 449-452. 1985.
[10] Wolfram S. Random Sequence Generation by Cellular Automata. Advances in Applied Mathematics, 7 pp. 123-169. 1986.
[11] Wolfram S. Universality and Complexity in Cellular Automata. Physica D, 10. pp. 1-35. 1984. s

