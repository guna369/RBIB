Genome Rearrangements and Sorting by Reversals 
Vineet Bafna Pave1 A. Pevzner 
Computer Science Department 
The Pennsylvania State University 
University Park, PA 16802 
email: bafna,pevzner@cse.psu.edu 
A B C  D Abstract 
1 2  3 
Sequence comparison in molecular biology is in the 
beginning of a major paradigm shift - a shift from 
gene comparison based on local mutations to chro- 
mosome comparison based on global rearrangements. 
In the simplest f o r m  the problem of gene rearrange- 
ments corresponds to sorting by reversals, i.e. sort- 
ing of an array using reversals of arbitrary fragments. 
Kececioglu and Sankoff gave the first approximation 
algorithm for sorting by  reversals with guaranteed er- 
ror bound 2 and identified open problems related t o  
chromosome rearrangements. One of these problems 
is Gollan’s conjecture on the reversal diameter of the 
symmetric group. We prove this conjecture and fur- 
Figure 1: Evolution of Lobelia fervens 
~. 
ther study the problem of expected reversal distance 
between two random permutations. We demonstrate 
that the expected reversal distance is very close to the 
reversal diameter thereby indicating that reversal dis- 
tance provides a good separation between related and 
non-related sequewes. The gene rearrangement prob- 
lem forces us t o  consider reversals of signed permu- 
tations, as the gcnes in DNA are oriented. Our ap- 
proximation algorithm for signed permutation provides 
a ’performance guarantee’ of $. Finally, we devise an 
approximation algorithm for sor2in.g b y  reversals with 
a performance ratio of f .  
1 Introduction 
Genus Lobelia comprises over 350 species that range 
from small, slender herbs to woody, giant-rosette 
plants. Fig. 1 presents the order of genes in Tobacco 
and Lobelia fervens chloroplast genomes with a hy- 
pothetical sequence of rearrangement events (Knox et 
al.,[KDP93]) during evolution of Lobelia fervens from 
a tobacco-like ancestral genome. 
It is not so easy to verify that the evolutionary 
events presented in Fig. 1 represent the shortest series 
of reversal transforming the Tobacco permutation into 
the Lobelia fervens permutation. In fact, Theorem 2 of 
the paper indicates that  the shortest sequence of rear- 
rangement events contains just 4 reversals 71245368 + 
ever, for the case of signed permutations (see below) 
the evolutionary events presented in Fig. 1 do present 
the shortest series of reversals). 
With the advent of large-scale DNA mapping and 
sequencing, the number of biological problems similar 
to one presented in Fig. 1 is rapidly growing in dif- 
ferent areas including evolution of chloroplast [RJ92] 
and mitochondrial genomes [S92] , virology [K93] and 
Drosophila genetics [WPFJ89]. On the other hand, 
there are almost no computer science results allowing 
a biologist to analyse gene rearrangements. Recently, 
Kececioglu and Sankoff found an algorithm for rever- 
sal distance with guaranteed error bound 2 and raised 
a spectrum of open problem motivated by gene rear- 
rangements [KS93]. The present paper solves some of 
them. 
71235468 + 71234568 + 76543218 + 12345678 (how- 
148 
0272-5428/93 $03.00 0 1993 IEEE 
In the problem we consider, the order of genes in 
two organisms is represented by permutations a = 
(ala2 . . . an) and U = ( ~ 1 ~ 2  . . .U,,). A reversal p of 
an interval [i, j ]  is the permutation 
p = ( 1 , 2 , .  . ., i - I ,  j, j - 1,. . . , i  + I , i ,  j + 1 , .  . . ,n )  
Clearly a . p htw the effect of reversing genes 
ai, ai+l,.  . .a,. Given permutations a and U ,  the re- 
versal distance problem is to find a series of reversals 
p 1 , p ~  , . . . , p  t such that a . p 1  . p z . . . p t  = U and t is 
minimum. We call t the reversal distance between K 
and U .  Note that reversal distance between a and U 
equals the reversal distance between the identity per- 
mutation u-la and 2. Sorting a by reversals is the 
problem of finding reversal distance d ( a ) ,  between K 
and 2. 
Reversals generate t,he sym.metric group Sn . Given 
an arbitrary permiitmation K from S, we seek a short- 
est products of generators p1 . p2 . . . pt that equals K. 
Even and Goldreich [EG81] show that given a set of 
generatlors of a permutation group G and a permuta- 
tion a,  determining the shortest product of generators 
that equals a is NP-hard. Jerrum [J85] proves that 
the problem is PSPACEcomplete, and remains so, 
when rest,rict,ed to two generators. In our probleiii, 
the generator set is fixed. However, Kececioglu and 
Sankoff [KS93] conjecture that. sorting by reversals is 
NP-complete. 
A related problem is that of sortin.g by prefix 
reversah (also known as pancake flipping problem). 
[GP79, GT78, HS93, CB93] find bounds on t,he prefix 
reilersal diam.eter of the symmetric group. Aigner and 
West, [AW87] consider the diameter of sorting when 
the operatlion is reinsert,ion of the first element,, and 
Amato et. al. [ABSR.89], consider a variat,ion inspired 
by reversing trains. Kececioglu and Sankoff [KS93] 
have found an approximation algorithm for sorting hy 
reversals witch performance guarantee 2. They also 
devise efficient bounds, allowing them to solve the re- 
versal distance problem optimally or almost optimally 
for n. ranging from 30 to 50. This range covers the 
biologicadly importcant case of mitochondrial genomes. 
Define d(n) = iiiaxTES, d ( a )  to be the reversal di- 
um.eter of the synimetric group of order n. For the 
problem of sorting by reversals, Gollan conjectured 
t,liat, d ( n , )  = n - 1 and that only one permutation 
-yn, and its inverse, y c l  require n - 1 reversals to be 
sort,ed(see [KS93] for details). The Gollan permuta- 
tion, in cycle notatmion, is defined as follows: 
( 1 , 3 , 5 , 7  , . . . ,  n -  1 , n  , . . . ,  8 ,G,4 ,2 ) ,  
( 1 , 3 , 5 , 7  , . . . ,  n ,n -  1 , . . . ,  8 , 6 , 4 , 2 ) ,  
neven 
n.odd Yn = 
For n 5 11, Gollan verified this conjecture using ex- 
tensive computations. Kececioglu and Sankoff [KS93] 
developed lower bounds for reversal distance allowing 
them to verify Gollan’s conjecture for n 5 200 for 
n mod 3 = 1. In the present paper we introduce the 
notion of breakpoint graph of a permutation and estab- 
lish the links between reversal distance and maximum 
cycle decomposition of this graph. This construction 
allows us to prove Gollan’s conjecture. Further, we 
study the problem of reversal distance between two 
random permutations. We demonstrate that rever- 
sal distance between two random permutations is very 
close to the reversal diameter, thereby indicating that 
reversal distance provides a good separation between 
related and non-related sequences in molecular evolu- 
tion studies. 
Afterwards, we study reversals of signed per- 
mutations. The Lobelia fervens permutation 
(Fig. 1) corresponds to the signed permutation 
(-7, + I ,  $2, $4, +5, +3, -6, +8). In the biologically 
more relevant signed case, every reversal of fragment 
[ i ,  j] changes t,he signs of the elements within that frag- 
ment. For a signed permutation a,  reversal distance 
is the minimum number of reversals required to trans- 
form a into (+I ,  +2, . . . , +n). We devise an approxi- 
mation algorithm for sorting signed permutations by 
reversals with guaranteed error bound %. Finally, we 
use signed permutations t<o get a performance guaran- 
t,ee of a for (unsigned) sorting by reversals, thereby 
improving on the factor of 2 due to Kececioglu and 
SankoflIiS93]. 
2 Breakpoint Graph and Reversal Dis- 
tance 
Let 1: - j if li - jl = 1.  Extend a permutation 
a = ~ 1 ~ 2 . .  .an by adding a 0  = 0 and an+l = n + 1. 
We call a pair of consecutive elements ai and ai+l, 
0 5 i 5 n, of a an adjacemy if a, - ?~;+l ,  and a 
breakpoiirt if ai + a,+l. Define an edge-coloured graph 
G(a)  with n + 2 vertices 0 , 1 , .  . ., n, n + 1 .  We join 
vertices i and j by a black edge if (i, j) is a breakpoint 
of a. We join vertices i and j by a gray edge if i - j 
and i , j  are not consecutive in a. The graph G(y6) 
corresponding to the Gollan permutation 7 6  = 315264 
(in one line notation) is shown in Fig. 2. 
A sequence of vertices, 2122.. .z, = z1 is called 
a cycle i n  a graph G ( V , E )  if ( ~ i , x i + l ) ~ E  for 1 5 
i 5 m - 1. A cycle in an edge-coloured graph G is 
called alternating if the colours of every two consecu- 
tive edges of this cycle are distinct. In the following, 
149 
assume that p reverses a fragment of a starting from 
2 and ending in j .  
Case A b  = 2 : 
Every p with A b  = 2 reverses a permutation 
3 1 5  2 1 4 9 6  I 1  8 12 10 
Figure 2 :  breakpoint graphs for G(y6) and G(yl2) 
we consider cycle decomposi2ion.s of G(a) int,o t,he max- 
imum number C ( K )  of edge-disjoint alternating cycles. 
A maximum cycle decomposition of G(y6) into 2 cy- 
cles is shown in Fig. 2. (Black edges are shown by 
thick lines, while gray edges are shown by thin ones). 
A vertex v is called balanced if the number of black 
edges incident to ti equals the number of gray edges 
incident to U. A bolanced graph is a graph in which ev- 
ery vertex is balanced. Note that G(a) is a balanced 
graph for every a;therefore, it  contains an alternat- 
ing Eulerian cycle in every connected component, and 
.(a) 2 1 for every a. For characterization of alternat- 
ing Eulerian cycles in edge-colored graphs, see Kotzig 
[K68], and Pevzner [P93]. 
Cycle decompositions play an important role in es- 
timating the reversal dist,ance. When we apply a re- 
versal t o  a permutation, there might be a change in 
the number of breakpoints, as well is in the number of 
cycles in a maximum decomposition. In theorem 1 ,  we 
show t8hat t,here is a strong correlation between these 
two changes. This idea allows us to bound the rever- 
sal distance in terms of the size of the maximum cycle 
decomposition. 
Denote the nuniber of black edges in G(a) (break- 
points in a) as b = b ( x ) .  Given an arbitrary rever- 
sal p denote G’ = G(*p), b’ = b ( x p ) l  the number of 
breakpoints in ap and c’ = c(ap), the number of cy- 
cles in a maximum cycle decomposition of G‘. Denote 
Ab = A b ( a , p )  = b - b’ (decrease of breakpoints) and 
A c  = A c ( s , p )  = c’ - c (increase of the number of 
cydes in a maximum decomposition). 
Theorem 1 For cvery permutation a and reiiersal pI 
A b ( x , p ) + A c ( a , p )  5 1. 
Proof (sketch): Every reversal removes/adds atmost 
2 breakpoint,s. We will consider all 5 potential values 
of Ab in a case-by-case fashion. In the following we 
j ’ i  j ’ i  
G U 
Figure 3:  A b  = 2 
a = . . . , j ’ ,  i , .  . ., j ,  i’, . . . with j‘ - j and i’ - i .  
Breakpoints j ’ ,  i and j ,  i’ correspond to an alter- 
nating 4-cycle in a shown in Fig. 3 Reversal p 
simply removes this cycle from G. Therefore, ev- 
ery cycle decomposition of G’ into c’ cycles in- 
duces a cycle decomposition of G into c’ + 1 cycle 
by adding the 4-cycle shown in Fig. 3 .  Therefore 
c 2 c’ + 1 implying A c  5 -1 and A b  + A c  5 1. 
Case A b  = 1 : 
Every p with A b  = 1 either (i) creates one 
new adjacency, i.e. K has a generic form a = 
. . . , k , i , .  . ., j , i ’ ,  . . . with i - i‘ or (ii) creates 
2 new adjacencies and simultaneously destroys 
an adjacency, i.e. a has a generic form a = 
. . . ,  i - 1 , i  , . . . ,  j = i - 2 , i + l ,  . . . .  
C 0 
Figure 4: A b  = l ( i )  
In the subcase (i) the graphs G and G’ are shown 
in Fig. 4. Note that every alternating cycle in G’ 
containing the edge (k, j )  induces an alternating 
cycle in G containing the edges (k, i), (i, i’) and 
(i‘, j ’ ) .  Therefore, every cycle decomposition of 
G’ into c’ cycles induces a cycle decomposition of 
G into c’ cycles. 
In the subcase (ii) the graphs G and G’ are shown 
in Fig. 5. Note that every alternating cycle in G’ 
containing the edge (i - 1,  i )  induces an alternat- 
ing cycle in G containing the edges ( i  - 1,  i - 2),  
( i  - 2,  i + 1 )  and ( i  + 1,  i ) .  Therefore, every cycle 
150 
... i-l i i 2  it1 ... - ... r w c 1  ... U 
_---. , .  
, \  
_---. , .
i2. .. 'Ui it1 U HI 
Figure 5 :  Ab = l(ii) 
decomposition of G' into c' cycles induces a cycle 
decomposition of G into c' cycles. 
Therefore for both subcases (i) and (ii) c 2 c' 
implying Ac 5 0 and Ab + Ac 5 1. 
The other cases can be proved in a similar fashion. 0 
Theorem 1 immediately gives us a new lower bound 
for the reversal distance. 
Theorem 2 For rvery permutation T, d ( ~ )  2 b ( T )  - 
4.1- 
Proof : Let p t ,  . . . , p1 be a shortest series of reversals 
transforming T = At into the identity permutation so. 
Denote r i - 1  = q p i  for i = 1,. . . , t ,  and apply theo- 
rem 1 for ~i and p i .  
Proof : For n 5 2, the claim is trivial. For n > 2, 
partition the vertex set of G(7n) into 6 = { O , l ,  3}, 
and V,. From lemma 1 and the fact that  there is 
no cycle contained in 6 (see figure 2), we see that 
every alternating cycle must contain at least 2 edges 
from the cut (6, V,). As the cut (6, K) contains 4 
edges ((1,2),(1,5),(3,2),(3,4)), the maximum num- 
ber of edge disjoint alternating cycles in a cycle de- 
composition of G(7,) is at most 3 = 2. 
From theorem 2, 47,) 2 b(yn)-c(yn) 2 n+l-2 = 
n-1. On the other hand, 47,) 5 n-1 ([WEHM82]). 
0 
Before we prove that 7, and 7;' are the only per- 
mutations in S, with a reversal distance of n - 1 
(strong Gollan conjecture), we need to  extend the con- 
cept of sorting permutations by reversals as follows: 
For any permutation of { 1 . . . n } ,  T = 171~2 . .  . T,,, let 
i = i l i 2 . .  . in, with %i = xi + 1, be a permutation of 
{2,3, . . . , n + 1). Define d(i) as the minimum number 
of reversals required to transform ii to 234 . . . n + 1. 
Clearly, d(i) = d ( ~ ) .  
Finally, note that d(7;') = d(7n). 
Theorem 4 (strong Gollan conjecture) For every n ,  
7, and 7;' are the only permutations that require n- 1 
reversals t o  be sorted. 
Proof : Define P,  z { T I T  E S, and d ( ~ )  = n - 1). 
We have seen that P,  2 {yn,yi1}. In what follows, 
we inductively prove that Pn C {yn,yil}. 
2 d(ai-1) + Ab(Ti,Pi) + A c ( T i , p i )  
= d ( T i - 1 )  + (b (* i )  - b(Ti-1)) 
+(C(Ti-l)  - . (xi))  
Recalling that d(?ro) = b(T0) = C ( T O )  = 0 ,  we get 
d(Ti) - ( b ( T i )  - C ( . i ) )  2 d ( r i - 1 )  - ( b ( r i - 1 )  - 
c(Ti-1)) .  . . 2  TO) - (b(T0) - C ( T O ) )  = 0. 
Substituting i = t ,  we prove the theorem. 0 
3 Reversal Diameter of the Symmetric 
Group 
Now we have a characterization of the reversal d i s  
tance of a permutation in terms of the maximum cycle 
decomposition of the breakpoint graph. Next we show 
that the graph corresponding to the Gollan permuta- 
tion, yfl , has atmost two disjoint alternating cycles. 
Lemma 1 Every alternating cycle in G(y,) contains 
the vertez 1 or 3. 
Proof: Omitted. 
Theorem 3 (Gollan conjecture) Vn, d(yn) = 
d(y;')  = n - 1. 
For n 5 2, the claim is trivial. Assume that the 
claim is true upto n - 1. Consider T E P,.  Let pr  
be the reversal that brings n to the right end, that is, 
~ . p ,  = d n ,  where I' is a permutation of (1.. . n -  1). 
I t  follows that,  d ( ~ )  5 1 + d ( ~ ' ) .  Then, d ( d )  2 
d ( r )  - 1 = n - 2. By induction, T' is either yn-l  or 
y i ? l .  Define, A = ( ~ l 7 r . p ~  = yn-ln}, and 0 = { T I T -  
p r  = y,-f n} ,  where yn denotes the concatenation of a 
permutation y with element n. Obviously, P, c AUB. 
Likewise, define p: as the reversal that  brings 1 to 
the left end, that is, xp: = I d ,  where T' is a permu- 
tation of {2,3,. . ., n + 1). As before, d ( d )  2 n - 2, 
which implies that ?r is cU,-l or Tc!l. Define C = 
( ~ 1 x - p :  = l+n- l } ,  a n d D  = ( ~ 1 r . p :  = l?;:,}. Then, 
P,  c C U D, and therefore, P,  C_ { A  U B} n {C U D}. 
We state the following, without proof 
It follows that P,  { y , , y ; ' } .  0 
151 
4 Expected Reversal Distance 
n 70 80 90 
Theoretical 47.08 54.58 62.08 
ExDerimental 
For any permutation r E Sn,  consider the set of 
cycles that form a maximum decomposition, and par- 
tition them according to size. Denote the number of 
alternating cycles of length i in the maximum decom- 
position by c i ( r ) .  Then, c(*) = C f z + ” c i ( r ) .  
For k 5 2(n + l), let us consider cycles in the de- 
composition whose size is atleast k. The number of 
such cycles is ~ ( r )  - ~ ~ ~ ~ c i ( r ) .  Now, the break- 
point graph of r has exactly 2b(r) edges. From this, 
and the fact that  the cycles are edge disjoint, we have 
V k  5 2(n + l), 
100 
69.58 
Lemma 2 provides an upper bound on the expected 
number of cycles of an arbitrary fixed length, in a ran- 
dom permutation of order n. Somewhat surprisingly, 
this bound is independent of n. 
Proof : A cycle of length 2i is a set of i breakpoints 
(unordered pairs of vertices) of the form 
{ ( 4 , ~ 1 ) ,  (Z{,ZZ),  (4,~3),.. . ,( x ; - i , x i ) } ,  
with ~j - x i .  
Consider the set, q , z 2 , .  . . , x i .  First, we claim that 
in every maximum cycle decomposition, z ~ , z z , .  .  , z i  
are all distinct. To see this, consider the case 
z k  = 21, for some 1 5 k < 1 5 i. Then, 
alternating cycle, which can be detached to give a 
larger decomposition. 
We have & ways of selecting the ordered set, 
X I ,  1 2 , .  . . , x i .  Once this is fixed, we have a choice of 
atmost 2 elements for each of the x i ,  giving a bound of 
so a tighter bound is &. 
Choose an arbitrary (2i)-cycle. The number of per- 
mutations in which this cycle can occur is no more 
than the number of ways of permuting the remaining 
n - 2i elements plus the i pairs that form the cycle. 
( Z ~ , x k + l ) , ( z ~ + l , l : k + 2 ) , . .  . , ( x ; - 1 , X l  = x k )  form an 
2i ( n - i ) ! .  Note that, we count each (2i)-cycle 2i times, 
(matching) 
Experiment a1 
linear program 
Table 1: Comparison of theoretical and experimental 
lower bounds on expected diameter 
Additionally, each pair can be flipped to give a dif- 
ferent order, which gives atmost 2’(n - i)! permuta- 
tions. Therefore, the overall number of (2i)-cycles in 
all permutations is atmost $& . 2’(n - i)!, and 
Use lemma 2 and E(b)  = n + 1 - E(a) = n - 1 to get 
a bound on the expected diameter: 
E(CZi(*)) 5 g 0 
Theorem 5 E ( d )  2 (1 - &) n 
Proof : Lemma 2 and inequality (3) imply for all 
k I 2(n + l), 
2n 
k 2 n- - -2 ‘  
Choose k = log e. Then 2k I 2, and 
E ( d )  2 (1 - *) n. This implies that  E(d)  2 
1 - - n for n 2 216. For n 5 216 the claim is 
0 verified by a case by case analysis. 
Although the bound provided by Theorem 5 is good 
asymptotically, it is weak for small values of n. How- 
ever, the bound given by inequality (2) is tight if we 
select a k that gives the minimum value. The derived 
bounds (Table 1) are comparable to the experimental 
bounds based on maximum matching and linear pro- 
gramming [KS93]. This indicates that ,  in the case of 
signed reversals (see below) where the cycle decompo- 
sition is unique, theorem 2 provides a computationally 
feasible way to prune the branch and bound tree used 
to solve the problem exactly. 
( lo in)  
152 
5 Short Cycles and Approximating 
Reversal Distance 
Starting from this section we discuss approximation 
algorithms for sorting by reversals. Define a strip of 7r 
as an interval [i,j] such that ( i-1,i)  and ( j , j + l )  are 
breakpoints, and no breakpoint lies between them. A 
strip is increasing if ri < 7rj , otherwise it is decreasing. 
A strip of 1 element is either increasing or decreasing, 
except for 7r0 and 7r,+l, which are always increasing. 
A reversal can remove atmost 2 breakpoints; there- 
fore d(r) 1 v. Define an i-reversal, i € (0, 1,2}, as 
one that removes 1: breakpoints. For an upper bound 
on the number of reversals, [KS93] give a greedy pro- 
cedure (Fig. 6) and prove the following lemma. 
Procedure KS( r) 
while A contains a breakpoint do 
p = Greedy(*) 
x = * . p  
endwhile 
Procedure Greedy( A )  
begin 
Return a reversal that removes the most breakpoints 
of r, resolving t.ies in favor of reversals 
that leave a decreasing strip. 
end 
Figure 6: The greedy algorithm 
Lemma 3 If 7r is a permutation with a decreasing 
strap then, ( i )  7r allows a 1- or 2-reversal. (ii)Zf ev- 
ery reversal that removes a breakpoint of 7r leaves a 
pennutation with no decreasing strips, then r has a 
2-reversal. 
Partition a sequence of reversals in KS into rounds, so 
that each round (except, perhaps, the first one) be- 
gins with a 0-reversal and has no other 0-reversals. 
Lemma 3 implies t8hat each round ends in a 2-reversal, 
thereby proving that every 0-reversal can be amortized 
against a 2-reversal and, on the average, we need at- 
most one reversal to remove a breakpoint. Compari- 
son of the upper hound of b(7r) reversals against the 
lower bound v provides a performance guarantee of 
2. Can we do better? 
Theorem 2 gives a stronger lower bound, d ( s )  2 
b(n) - c ( r ) .  Note that breakpoints correspond to black 
edges in a breakpoint graph and every cycle has atleast 
2 black edges. Therefore, the lower bound of is a 
simple corollary of theorem 2. 
Let c4(7r) be the number of 4-cycles in a maximum 
cycle decomposition of G(7r). For the lower bound we 
have 
In the following sections we devise algorithms that sort 
7r in atmost b ( ~ )  - 4 7 r )  steps, for some 6 > 0. Then, 
the performance ratio of our algorithms is 
= { ; - e  
otherwise (4) 
5.1 Approximation Algorithm for Signed 
Permutations 
It is interesting to  note that while the problem 
of sorting signed permutations is easier to handle, 
it is more relevant from a biological point of view. 
This is because genes are directed fragments of DNA 
sequences (Fig 1). Below, we devise an algorithm 
that sorts signed permutations in b ( r )  - &(T) steps, 
thereby achieving a ratio of $. Later, we will use 
signed permutations to improve the ratio for (un- 
signed) sorting by reversals. 
We note that the concept of breakpoint graph as 
well as strips extends naturally to signed permuta- 
tions. Define a transformation from a signed permuta- 
tion r of order n to an unsigned permutation r' E S2, 
as follows: replace +i by 2i - 1,2i  and -i  by 2i, 2i-  1. 
We observe that the identity signed permutation maps 
to the identity (unsigned) permutation, and the effect 
of a reversal on r can be mimicked by a reversal on 
r'. Therefore, any lower bound on r' is a lower bound 
on r. In particular, theorem 2 holds. 
For the upper bound, we shall perform reversals 
only across breakpoints so that any reversal on the 
unsigned permutation can be mimicked by the signed 
permutation. It follows that for our purpose, the 
two permutations are equivalent and in the follow- 
ing discussion, whenever we refer t o  the breakpoint 
graph/strips of a signed permutation, it is implied that 
we refer to the breakpoint graph/strips of the t r a n s  
formed unsigned permutation. 
Given a cycle decomposition of G(r )  and a rever- 
sal p = [i,j], we call p a reversal on a cycle if the 
breakpoints (ri-1, ri) and (rj, 7rj+l)  belong to the 
same cycle. A cycle is oriented if there exists a 1 
or 2-reversal on it. Two cycles are crossing if some 
153 
of the breakpoints corresponding to their black edges 
are in.terleaved in the permutation. For example, for 
7 6 ,  p : 315264 + 315624 is a reversal on the cycle 
C = 134652 (Fig. 2), as the breakpoint,s (5,2) and 
(6,4) belong to C. C is oriented as p is a 1-reversal. 
Cycles C and C' in Fig. 2 are crossing as the break- 
points ( (3 , l )  and (6,4) in C, (1,5) and (4,7) in e') 
are interleaved in t,he permutation 315264. 
Observe that in the breakpoint graph of a signed 
permutation, every vertex has degree atmost 2. There- 
fore the cycle decomposition is unique, thus making 
the case of signed permutations easier. In order to 
sort a signed permutation T in less than b ( x )  steps, 
we need 2-reversals that  do not have t o  be amortized 
against 0-reversals. In the breakpoint graph of signed 
permutations, 2-reversals correspond to elimination of 
4-cycles, while 1-reversals correspond to shortening of 
longer cycles. However, the breakpoints might not be 
orient,ed correctly so that. 1- and 2-reversals are in- 
feasible. Note that. a reversal on a cycle can orient an 
unoriented crossing cycle. The following lemma shows 
that we can use reversals on a cycle to orient, 4-cycles. 
Lemma 4 (proof omitted) An,y 4-cycle that i s  not ori- 
ented h.as a crossing cycle C. Also, there exists a re- 
versal 011. C which will orient th.e 4-cycle. 
Lemma 4 motivates t8he algorithm SignedSort for sort- 
ing signed permutiitions (Fig. 7). 
Procedure StgriedSort ( A )  
1. while A contains a hreakpoint do 
3. 
3. 
4. 
5. 
6. 
7. else 
8. 
9. else 
10. 
11. * = * . p  
12. endwhile 
if A has no decreasing strips 
if any 4-cycle C reniaiiis in G ( r )  
Find a cycle C' which crosses C. 
Do a 0-reversal on C' so that the 
4-cycle C is oriented. 
Do a 2-reversal on the 4-cycle C. 
Do a 0-reversal on an arbitrary cycle. 
p = Grecdy(r) (see Fig. 6 )  
Figure 7: AIgorit,hni for signed permiitations 
Lemma 5 (proo(if om.itted) After step (6) in Signed- 
Sort, some decreas1n.g strips remain. 
Lemma 6 If there is a 4-cycle in. G ( x )  at ih.e begin- 
ning of any round of SignedSort(except, perh.aps, the 
first one), th.en thcre are atleast two 2-reversals in. that 
round. 
Proof : If there is a 4-cycle in G ( x )  at the begin- 
ning of any round, that  round begins with a 0-reversal 
followed by a 2-reversal. Also, from lemma 5 some 
decreasing strips remain after this 2-reversal. On the 
other hand, if the graph has decreasing strips we call 
Greedy. Then, lemma 3 applies and every round of 
0 SignedSort also ends in a 2-reversal. 
Theorem 6 The algorithm SignedSort sorts a signed 
permutation x in atmost b ( x )  - !pq(x)  reversals and 
provides an approximation. ratio of $. 
Proof : As each reversal is along a cycle, the number 
of cycles, and 4-cycles in particular, decreases only 
in 2-reversals. From lemma 6 we know that atmost 
half of the 2-reversals need to  be amortized against 0- 
reversals. Therefore we can sort a signed permutation 
x in atmost b ( x )  - + C ~ ( T )  reversals. The bound on 
0 performance follows from equation (4). 
5.2 Approximation Algorithm for Sorting 
by Reversals 
In general, finding a maximum cycle decomposition 
is not straightforward. In this section, we concentrate 
only on finding a cycle decomposition (not necessarily 
maximum) with a large number of 4-cycles, as such a 
decomposition will provide an improved performance 
ratio for sorting by reversals (eq. 4). 
Consider the set of 4-cycles in a breakpoint graph 
G ( x ) .  Any two 4-cycles can share atmost two edges. 
Two 4-cycles are 2-overlappin.g if they share two edges. 
Lemiiia 7 If two 4-cycles of G ( T )  are 2-overlapprng, 
then one of them as oraenied ( i .e .  a 2-reversal as pos- 
sible 011 ai). 
Proof : Omitted. 
Define the 4-cycle graph. H ( x )  of a permutation T ,  
as one in which each node corresponds to  a 4-cycle of 
G( K), and two nodes are connected if the correspond- 
ing 4-cycles share an edge in G ( x ) .  An independent 
set in H ( x )  corresponds to a set of edge disjoint 4- 
cycles. Furthermore, this graph has bounded degree, 
and we can find a reasonable approximation to  the 
maximum independent set problem in bounded degree 
graphs.We call a graph strongly d-bounded if degree of 
every vert,ex in the graph is bounded by d ,  and the 
degree of at,least one vert.ex in every connected com- 
ponent, is less than d .  
Lemma 8 If G ( T )  has no 2-overlapping cycles, then 
the 4-cycle graph H ( x )  is strongly 4-bounded. 
154 
Proof (Hint): A 4-cycle containing the maximal el- 
ement of A among all 4-cycles in a given connected 
component of H ( A )  overlaps with atmost 3 cycles. 0 
Lemma 9 In a strongly d-bounded graph G(V, E ) ,  an 
independent set o f s i ze  atleast can be computed in 
O ( E )  t ime.  
Proof: Omitted. 
Lemma 10 In a strongly d-bounded graph G(V ,E) ,  
a & approximation to  a mazamum independent set 
can be computed an O ( E )  tame. 
Proof : Let the size of the maximum independent set 
be c . n,  for some c ,  where IVl = n. Consequently, the 
minimum vertex cover for G has a size = (1 - c ) - n .  We 
can find a vertex cover V' of size atmost min{2(1 - 
c) . n , n } .  Then, I1 = V\V' is an independent set 
for G, of size atleast max((2c - 1) . n,O} .  Another 
independent set I2  is given by Lemma 9 and is of size 
2. Obviously, we select the larger of the two sets. 
There are two cases in analyzing the performance of 
our approximation. 
If max((2c - l ) n ,  0 )  = 0 ,  then c 5 In this case we 
Otherwise, we seled the larger of the two sets, I1 and 
12. The performance is max{ &, y}, with c > f .  
In the worst case, 5 = y, which implies that 
0 
Lemmas 7, 8 and 10 motivate the algorithm Rever- 
snlSort (Fig. 8 ) .  
Algorithm ReversnJSort(ir) 
select 12, and performance is 5 2 2. . 
c = v, and performance is (d+ l )  
1. Starting with the permutation r, perform 2-reversals 
on G ( x )  until no %overlapping cycles remain 
(lemma 7). Denote the resulting permutation by U. 
2. Use the Independent Set approximation in H ( u )  to 
find a set of 4-cycles of size atleast $(U), in the 
breakpoint graph G(u)  (lemmas 8, 10). Find an ar- 
bitrary cycle decomposition of the remaining edges. 
3. Transform G(u)  by splitting vertices of degree 4, so 
that the cycles are vertex disjoint. In terms of strips, 
replace single elements by strips, oriented appropri- 
ately, resulting in a signed permutation U'. 
4. Call SignedSort(u') to sort U'. Sorting of U' mimics 
sorting of U. 
Figure 8: Algorithm for sorting by reversals 
Theorem 7 The algorithm ReversalSort achieves an 
approximation ratio of $. 
Proof : Every reversal on the signed permutation u' 
in step 4 of ReversalSort can be simulated on the un- 
signed permutation U .  Therefore, an upper bound on 
the number of reversals in SignedSort(u') is an upper 
bound on the number of reversals in step 4 of Rever- 
salsort .  If the number of 4-cycles found in the cy- 
cle decomposition in step 2 is ci(u), then Theorem 6 
implies d ( u )  b(u) - fc i (u)  for the number of re- 
versals in step 4 of ReversalSort. On the other hand 
b ( s )  - b(u) = 22, where z is the number of reversals in 
step 1. Therefore, ReversalSort requires no more than 
b ( a )  +z - fc i (u)  = b(n) - 2 - $clp(u) reversals to sort 
Let i ( 6 )  be the size of the maximumindependent set 
in a 4-cycle graph H ( 6 ) .  Lemmas 8 and 10 guarantee 
that ci(u) 1 fi(u). On the other hand, i ( ~ )  - i(u) 5 
42, as every reversal in step 1 'destroys' a t  most four 
of the i(r)  vertices of the maximum independent set 
in H ( T )  (there are atmost 4 non-overlapping cycles 
sharing edges with a 4-cycle). Therefore, 
A. 
1 
5 
d ( T )  5 b ( . ) - z -  - i(a) 
1 
b(T)  - 2 - - ( i ( ~ )  - 42) 
5 5 
The bound on performance follows from (4). 0 
5.3 Improved Approximation for Sorting 
by Reversals 
In this section we modify ReversalSort to improve 
the performance ratio. Recall that  in step (1) of 
ReversalSort( A ) ,  we perform 2-reversals to transform 
T into a permutation U ,  which has the property that 
H ( u )  is strongly 4-bounded. This allows us to  find a 
set of 4-cycles of size atleast $ c ~ ( u ) .  In this section, 
we transform T using 2-reversals into a permutation U ,  
so that H ( u )  is bipartite. Consequently, we can find a 
maximum set of non-overlapping 4-cycles in U ,  which 
leads to improved performance. 
The problem of transforming T into v is equiva- 
lent to sorting Y - ~ T ,  and, for convenience, we shall 
switch between the two notations. Denote G(A, v) E 
G(V-'T),  b(?r,v) b ( v - ' T ) ,  i ( ~ , v )  E i ( f ' ~ ) .  Ob- 
serve that G ( T ,  v) and G(v, .) coincide, but have re- 
versed colors, i.e., black (gray) edges in G(A,v)  are 
gray (black) in G(v,  T ) .  It follows that b ( r ,  v) = b(v ,  A)  
and i(r, v) = i(v, T ) .  
Fig. 9 describes the procedure 7kansform. Let 
p l p 2  . . . p I  be the sequence of reversals in 7kan.s- 
f o r m  that transforms A to ?i ( ~ p 1 p 2 . .  pI = e), and 
155 
Procedure Transform( A )  
begin 
x = 7 r  
f i = s  
while fi-' . ii or ii-' . fi has a %reversal, p 
/* a is the identity permutation*/ 
if p is a 2-reversd on V-' . ii 
i i = f . p  
else fi = V .  p 
endwhile 
re turn fi-' . ii 
end 
Figure 9: Algorithm for preprocessing permutation T 
using 2-reversals 
p1 p 2  . . . py , the sequence of reversals that transforms z 
to ii ( z O 1 p 2 . .  . py = 0). The permutation a = ii-' . p 
has the following properties: 
Lemma 11 
(i) H ( a )  is bipartite, 
(ii) a can be sorted in b(a)  - fi(a) reversals, 
(iii) b(T) - b(0)  = 2 ( ~  + y), 
(iv) i ( T )  - i(.) 5 4(" + y). 
Proof : (i) Consider a 4-cycle in G(a) ,  formed by 
the vertices T , , A ~ + I , A ~ , ~ ~ + I ,  with i + 1 < j .  As no 
4-cycle in G(a) is oriented, we have the relation T, N 
r j + 1  and ~j - A,+'. Now, observe that these vertices 
form a 4-cycle in G(a- ' )  also, with the color on the 
edges reversed. If ~j - A,+' = Aj+1 - T,, then the 
4-cycle in G(a- ' )  is oriented. Therefore, T ,  - ",+I = 
- ( T j + l  - A; ) .  
I"I 
Figure 10: (+) and (-) cycles in G ( r )  
To interpret this graphically, direct black edges of 
G(a)  from Tk to Tk+1 and gray edges from k to k + 1. 
Note that the directions do not change in G(a- ' ) .  If 
a cycle is not oriented in G(a) ,  then each gray edge 
must, connect the t.ail of a black edge with the head of 
another. Likewise, if it is not oriented in G(a- ' ) ,  then 
each black edge connects the tail of a gray edge with 
the head of another. Only two such 4-cycles (denoted 
(+) and (-)) are possible (Fig. loa). Further, observe 
that all cycles that share an edge with a cycle of type 
(+), must be of type (-), and vice-versa (Fig. lob). 
This implies that H ( a )  is bipartite. 
(ii) As H ( a )  is a bipartite graph (lemma 11) with 
bounded degree, we can find a maximum independent 
set in H ( a )  in O ( n $ )  time. This implies that we can 
find a cycle decomposition of G(a)  in which the num- 
ber of 4-cycles is i(u).  Rest of the proof follows from 
theorem 6. 
(iii,iv) In each iteration of the while loop in Trans- 
form, (%, ii) is transformed into (T', v' ) ,  in one of two 
ways. Either A' = %, v' = ii . p,  or A' = % .  p,  v' = ii. 
In the first case, p is a 2-reversal on %-'ii which 
implies that 2 = b(%-'ii) - b((d) - ' v ' )  = b(ii,%) - 
b(v', A') = b(%, fi)-b(a', v' ) .  A similar argument holds 
for second case, implying that b ( r ,  v) - b(T', v' )  = 2. 
i(%, ii) - i ( d ,  v' )  5 4 follows from the fact that every 
2-reversal can destroy atmost four non overlapping 4- 
cycles in the breakpoint graph. 
The proof follows from the fact that each reversal 
in Transform belongs either to the sequence p1p2 . . . po 
or the sequence 01 p2 . . . py , implying a total of 2 + y 
reversals. U 
ImprovedSort (Fig. 11) exploits the structure of the 
permut,ation U that Transforn(lr) returns, to sort T 
more efficiently. Theorem 8 analyzes the performance 
of this improved algorit,hm. 
Algorithm ImprovedSort(x) 
1.  Call Transform(*) to find a sequence of reversals 
p l p z . .  . pI and ele2 . . . ey such that l r p l p z . .  . p3 = ii 
and g e l  e z  . . . ey = fi. Denote U = ii-'??. 
2. Find a maximum set of non-overlapping 4-cycles in 
G ( u )  (see proof of lemma I l ( i i ) ) .  Find an arbitrary 
cycle decomposition of the remaining edges. 
3. Split vertices of degree 4 in G ( u )  according to the cy- 
cle decomposition found in step (2), so that the cycles 
are vertex disjoint. In terms of strips, replace single 
elements by strips, oriented appropriately, resulting 
in a signed permutation U'. 
4. Call S:gnedSort(u') to find a sequence of reversals 
that sort U ' .  Note that this sequence is mimicked 
by a sequence of reversals 9 1  9 2  . . . pz that sorts U .  
5. Apply the sequence of reversals 
p i p z . .  . P r 9 1 9 2 . .  . p Z e y . .  ~ 2 ~ 1  to sort A. 
Figure 11: Improved algorithm for sorting by reversals 
Theorem 8 Im.provedSord sorts T in b(T) - : C ~ ( T )  
156 
steps, and th.erefore, achieves an approxim.ation ratio 
of a. 
Proof : From step (5) of ImprovedSort, d(7r) 5 z + 
y + z .  Lemma 11 provides an upper bound: 
Z + ~ + Z  5 z + y + b ( a ) - $ i ( a )  
= b(7r)-(z+y) - $i(o) 
5 b(.lr) --(Z+Y) 
5 b(7r) - l i(7r) 
- < b ( x )  - p4(7r )  
-f "(0, i(7r - 4(x + y)} 
4 
0 
5.4 Running Time 
We show that a.ll our algorithms have a t,ime com- 
plexity of O(n2) .  Consider lines 4 - 6 of SignedSort. 
If we maintain both 7r and T-', it takes O(n)  time 
to find a 4-cycle, as well as a crossing cycle. Kece- 
cioglu and Sankolf give an O(n)  implementation of 
Greedy. Finally, no more than n - 1 reversals are re- 
quired to sort a permutatmion T, which gives an upper 
bound of O ( n 2 )  for SigmdSort .  The bounds for Re- 
versalSort and Im.lirovedSort are the same as the pre- 
processing steps require a.tmost 0(n4 time (see proof 
of lemma ll( i i)) .  
Acknowledgements: We would like to thank John 
Kececioglu and David Sankoff for sending 11s the 
manuscript of their paper and for useful discussions. 
We are also grateful to Piotr Berman for useful com- 
ments on approxiinating maximum Independent Sets 
of bounded degree graphs. 
References 
[AW87] Aigner M, West D.B. (1987) Sorting by inser- 
tion of leading element. Jotcrnal of Combinatorial 
Theory (Series A ) ,  45, 306-309. 
[ABSR89] Amato, N., Blnm, M., Irani, S. and Ruhinfeld, 
[CB93] 
[EG81] 
[GP79] 
R. (1989) Reversing trains: A turn of t,he century 
sorting problem. Journal of Algorithms, 10, 413- 
428. 
Cohen, D., Blum, M., Improved Boundsfor Sort- 
ing Pancakes Under a Conjecture, (submitted to 
Discrete Math.). 
Even, S. and Goldreich, 0.,(1981), The 
minimum-length generator sequence problem is 
NP-hard, Journal of Algorithms, 2, 311-313. 
Gates W.H., Papadiniitxiou C.H., (1979), 
Bounds for sort,ing by prefix reversals. Discrete 
Mathematics, 27, 47-57. 
[GT78] 
[HS93] 
Gyori, E., Turan, E., (1978), Stack of Pancakes, 
Studia-Sci.-Math. -Hungar., 13, pp. 133-137. 
Heydari, M., Sudborough, I.H., On Sorting by 
Prefix Reversals and the diameter of Pancake 
Networks (manuscript). 
Jerrum, M. R.,(1985), The complexity of finding 
minimum-length generator sequences. Theoreti- 
cal Computer Science 36, 265-289. 
Kececioglu J., Sankoff D. (1993), Exact and a p  
proximation algorithms for the reversal distance 
between two permutations. Algorithmica (to a p  
pear). 
[KDP93] Knox E. B., Downie S.R., Palmer J.D. (1993), 
[J85] 
[KS93] 
[I<93] 
[If681 
[P93] 
[RS92] 
~ 9 2 1  
Chloroplast genome rearrangements and evolu- 
tion of giant lobelias from herbaceous ancestors, 
Mol. Biol. Evol., 10, 414-430. 
Koonin, E. V., Dolja, V. V., (1993), Evo- 
lution and Taxonomy of Positive-strand RNA 
viruses: Implications of comparative analysis 
of amino acid sequences, Crit. Rev. Biochem. 
Molec. Biol.(to appear) 
Kotzig A., Moues without forbidden transitions 
in a graph, Matemat,icky casopis, 18(1968), pp. 
Pevzner P., DNA physical mapping and alternat- 
ing Ecclerian cycles in colored graphs, Algorith- 
mica, (to appear). 
Raubenson L.A., Jansen R.K. (1992), Chloro- 
plast DNA evidence on the ancient evolutionary 
split in vrrscular land plants. Science, 255, 1697- 
1699. 
Sankoff D., Leduc G., Antoine N., Paquin B., 
Lang B.F. and Cedergren, R.(1992), Gene order 
comparisons for phylogenetic inference: Evolu- 
tion of the mitochondrial genome, Proc. Natl. 
Acad. Sci. USA, 89, 6575-6579. 
76-80. 
[WPFS89] Whiting, J., Pliley,M., Farmer, J., Jeffery, D., 
(1989). In situ Hybridization Analysis of Chrw 
mosomal Homologies in Drosophila melanogaster 
and Drosophila virilis, Genetics, 122, 99-109. 
[WEHM83] Watterson, G.A., Ewens, W.J., Hall, T.E. and 
Morgan, A. (1982), The Chromosome Inversion 
Problem, Journal of Theoretical Biology, 99, 1-7. 
157 
