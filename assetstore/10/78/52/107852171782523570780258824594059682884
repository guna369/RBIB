Typed -calculi with explicit substitutions may not terminate

Paul-Andre Mellies ?
Ecole Normale Superieure, 45 rue d'Ulm, 75005 Paris, France INRIA Rocquencourt, Domaine de Voluceau, 78153 Le Chesnay Cedex, France
FWI, De Boelelaan 1081a, 1081 HV Amsterdam, Nederland
mellies@cs.vu.nl

Abstract. We present a simply typed -term whose computation in the
-calculus does not always terminate.

1 The -calculus, introduction

Any e ective implementation of the -calculus requires some control on the substitution to bene t from graph sharing 1] and avoid immediate size explosion. The original -calculus cannot describe these controls an easy way. The calculus was introduced in 2] as a bridge between the classical -calculus and its concrete implementations. Substitutions become explicit, they can be delayed and stored. The calculus provides a pleasant setting to study substitutions and check implementations.
The syntax of the -calculus contains two classes of objects: terms and substitutions. Terms are written in the De Brujn notation 3].

Terms

a ::= 1jabj aja s]

Substitutions s ::= idj"ja sjs t

The rule Beta is equivalent to the usual -rule of the -calculus. The other

rules, called -rules, expose how substitutions are pushed inside the terms and

performed.

Beta ( a)b ! a b id]

App (ab) s] ! a s]b s]
Abs ( a) s] ! (a 1:(s ")])
Clos a s] t] ! a s t] Map (a s) t ! a t] (s t) Ass (s1 s2) s3 ! s1 (s2 s3)

V arId 1 id] ! 1 V arCons 1 a:s] ! a
IdL id s ! s ShiftId " id ! " ShiftCons " (a s) ! s
? This work was partly supported by the Esprit BRA CONFER.

When carried out inside the -calculus, any reduction of a typed -term M reaches its normal form. Some -reductions can mimic the -reductions and terminate too. Others can be more subtle and compute M in a non-standard way. However, does any -computation of a typed term normalise it? The question was much debated and investigated with hopes for a positive answer. The major clue was the strong normalisation of the -rules which was proved e ective in 4] and then 5] 6] on any -term. It makes a non terminating -computation continually create and reduce new Beta-redexes, which seems to contradict the typed structure of the term.
However, we present here a closed and simply typed -term whose computation in the -calculus does not always terminate. The -reductions are thus not strictly bound to the -reductions, which is a surprise.
2 Basic intuitions
Let M be the simply typed -term v:( x:( y:y)(( z:z)x))(( w:w)v). Like any typed term its -computation may normalise it. Next section, we show that it may also not terminate.
Building such a non terminating strategy on M requires precision. The rules enjoy strong normalisation on any -term. The Beta-rule mimics the -rule whose computation on any well typed -term strongly terminates. This shows that non termination must come from thin interactions between the Beta and -rules. Let ( a)b be a -term and s a substitution on top of it. We study next two natural strategies to reduce the root Beta-redex and begin the propagation of s.
One standard strategy begins to reduce the Beta-redex
(( a)b) s] ! (a b id]) s] Beta and then propagate the two substitutions s and (b id) inside a using -rules. If carried on, the -computation terminates on a -term c.
Another natural strategy begins with the two -rules App and Lambda
in order to propagate s through the Beta-redex. We call s and s0 the two copies of s by App.
(( a)b) s] ! (( a) s]) b s0] App
! ( (a 1 s "])) b s0] Lambda
It then computes the root Beta-redex:
! a 1 s "] b s0] id] Beta The two substitutions (1 (s ")) and (b s0] id) are then propagated inside a
using -rules. If carried on the process terminates again on the same -term c.

The property of strong normalisation seems natural in both computations. However, remark that the second strategy duplicates the substitution s with the rule App. The duplications by App are safe to strong termination when carried out within the scope of the -rules. Intuitively, the duplicated substitutions then are kept disjoint during -reductions and cannot interact. We show next how introducing Beta-redexes may combine two disjoint substitutions and provide a potential non terminating strategy to the calculus.
The combining strategy begins with the two -rules App and Lambda
which propagate s through the Beta-redex:

(( a)b) s] ! (( a) s])b s0] App
! ( a 1 s "])b s0] Lambda We call s1 = s. The situation is clear. The two substitutions 1 (s1 ") and
s0 stand over the two disjoint terms: a and b. The Beta-redex mixes them:

! a 1 s1 "] b s0] id] Beta The substitution 1 (s1 ") still acts on a whereas (b s0] id) and hence s0
may be propagated through a and also s1 ". The propagation begins with some -rules:

! !

a a

(1 1b

s1 s0]

") id]

(b s0] id)] (s1 ") (b s0]

Clos id)] Map

! a b s0] (s1 ") (b s0] id)] V arCons

! a b s0] s1

(|"

(b s0] id))] {z }

Ass

(?)

s2

The rule Map duplicates (b s0] id) and divides its propagation in two distinct works. The rst one is essential. It is devoted to substitute b s0] in a via the
substitution of 1. The second one is super uous. It intends to substitute b s0]
inside s1 " although no variable in s is bound to b: s2 is therefore vacuous. Applying ShiftCons at that point would clarify the situation to a b s0] (s1 id)] which roughly corresponds to a term obtained from (( a)b) s] with the rst strategy:

(( a)b) s] ! (a b id]) s] Beta ! a (b id) s] Clos ! a b s0] (id s1)] Map ! a b s0] s1] IdL Suppose that s1 is (( a)b) id. The substitution s1 in (?) may then capture the useless s2 with -rules, and duplicate it:

s1 s2 = (( a)b) id) s2

! (( a)b) s2] (id s2)

M ap

!!!!!2(aaa((1(1(1abas1)ss222s]2s2]")i"](d)bb]"ss])(2(2)bs]]()2bsi2dss]2"]2]))isd2)(s]b2 ss22]

id)]

App + IdL Lambda Beta Clos s2 Map

! a b s2] (s2 ") (b s2] id)] s2 V arCons

! a b s2] s2

("
|

(b {sz2]

id))] }

s2

Ass

s3

Let t be any substitution. Call rec(t) = " (b t] id).

saIbf2neytrhTreseedhucuesb(ucsssbet2uids)tbtuaisttttsouiioattaunisotsusinuob1bntsse2trwtim=temu.toraMibeyoctnoba(rsiecen1ogc)nfoertbnmoaeemiphrnauainlsvtl1egyed,sss3tls1io2k=earcoea(sncudt(abasu)s3ipbtn)il.stiiucdtathbitoeoenhrsautcvoboeonsstttilathiikuneetniinaosgnd2tusp2slri3ceascm3t(ota=r)y.:

This sounds the sequence de reduced for any

like ned k to

tbahyessub1beasgtniindtunstinnio+gn1ow=f harincehci(ncsonnn)titaaenindistestruaptprioeonsce.(tLt)h.eatTtuh(seskcsualbtl)st(msitnua)ytni>obn0e

sstekkr+m1 isnkas+tk1i+n2mg. acTyohmbepepurctooacmteiospnsutmoefda(y(totah)eabr)esfuso]br.estibteutiitoenracteodntfaoirnienvgerska+n1d prroevci(dsek+a1)no=n

3 The counter-example

3.1 The proof

Let us introduce the sequence (si)i>0 of substitutions:
De nition

{ {

rs1ec=(t()

1)1
="

id
(1 t]

id)

{ { {

sCDnxx+((1yy))===re"1c(1s(n1x)]y]y]x)x

The further copies.

lemma

describes

how

s1

duplicates

a

substitution

t

and

nests

its

two

Lemma 1 Duplication Step. s1 t !+ Dt(t rec(t))
Proof:

(( 1)1 id) t

! (( 1)1) t] id t

M ap

!2
!(

(

1) 11

t]1
t

t] t
"])1

t]

t

App + IdL Abs

! (1 1 t "] 1 t] id] t

Beta

! 1 (1 t ") (1 t] id)] t

Clos

! 1 1 1 t] id] (t ") (1 t] id)] t Map

!2 1 1 t] t (" (1 t] id))] t V arCons + Ass

2 = 1 1 t] t rec(t)] t

The further lemma explains how sn captures any substitution t step by step.

Lemma 2 Capture Step. rec(s) t !+ Ct(s t)

Proof: ("

(1 s]

id))

t

!" !"

((1(1ss]]t]

id) (id

t) t))

Ass M ap

2 !2 " (1 s t] t) Clos + IdL

We use our two lemmas on sn sn+1:

sn sn+1 = rec(rec(:::rec(s1))) sn+1 written with (n ; 1) rec.

It may be reduced with a capture step:

+
!

Csn+1

(rec(rec(:::rec(s1)))

sn+1)

with (n ; 2) rec.

...with (n ; 2) capture steps more:

C C C+
!

(sn+1 sn+1 (::: (ssn+1 1

sn+1)))

with (n ; 1) Csn+1(:).

...and the duplication step:

C C C D( (::: ( (s+
!

sn+1

sn+1

sn+1 sn+1 n+1

rec(sn+1)))))

C C C D= (sn+1 sn+1 (::: (sn+1 (ssn+1 n+1 sn+2))))

We obtain a computation

osfub(ssntitutsino+n1)wmithay(skne+ep1

onsni+n2c)reimnseindtei.ngItkporonve(ssnt+hkat

the sn+k+1)

and never terminate.

We give below an explicit report of the process. Let us write Cn any function C applied n times:
Proposition

Ca. Cb. Dc. C Dd. De.

s s (s s )k+1 n+1 !+ sn+1 k n+1 s s (s s )n n+1 ! nsn;+11 1 n+1 s s (s s )1 n+1 !+ sn+1 n+1 n+2 s s ( (sn n+1 !+ nsn;+11 sn+1 n+1 s s (s s )1 1 !+ s1 1 2

sn+2))

Corollary The -computation of (s1 s1) may not terminate.

3.2 The term
Let M be the closed and simply typed -term:

v:( x:( y:y)(( z:z)x))(( w:w)v) It is translated in the De Brujn notation as:

( ( ( 1)(( 1)1)) (( 1)1) )

We show next that the -computation of M may not terminate. Yet, many -reductions compute M to its normal form. For instance:

( ( ( 1)(( 1)1)) (( 1)1) )

!2 ( ( ( 1)(1 1 id])) (1 1 id]) ) Beta + Beta

!2 ( ( (( 1)1)) 1 )

V arCons + V arCons

! ( ( (1 1 id])) 1 )

Beta

! ( ( 1) 1 )

V arcons

! ( 1 1 id] )

Beta

! 1 V arcons

Proposition (( ( 1)(( 1)1))(( 1)1)) ! (1 s1 s1]).

Proof(:( ( 1)(( 1)1))(( 1)1))

! (( (1 ( 1)1 id]))(( 1)1)) Beta

!
2!

(1 (1

s1] s1

( 1)1
s1])

id]

Beta Clos

Theorem The -computation of M may not terminate.

One should remark that the two rules V arId and IdL are used for clarity's sake. Six rules only are required for the example: Beta, App, Abs, Clos, Map and Ass.
One can also check that similarly a non terminating -computation may occur on v:( x:( y:A)(( z:B)C))(( w:D)E) with -terms A,B,C,D,E.

4 Conclusion
We give an example of a simply typed term whose computation in the -calculus does not always terminate. To our knowledge, the example cannot be avoided in any system with explicit substitution and composition.
The -calculus was designed to describe the actual implementations, not to strongly normalise any typed term. The discovery that some gap exists between the two things is an important result of the theory. It shows that a natural implementation may have unexpected behaviours, which justi es the interest for explicit substitutions.
New techniques should be investigated to avoid the cycling interactions between the Beta-rule and the -rules. Calculi without composition strongly normalise on typed terms, see 7], but more power on substitutions is often required, at least for con uence, see 8]. We believe that designing a calculus with composition of substitutions, con uence on open terms and strong termination on typed terms is the right theoretical and technical goal.
References
1. C.P. Wadsworth. Semantics and Pragmatics of the Lambda Calculus. PhD thesis, Oxford Universtity, 1971.
2. M. Abadi L. Cardelli P.-L. Curien J-J. Levy. Explicit substitutions. Journal of Functionnal Programming, 1(4):375{416, 1991.
3. N. De Bruijn. Lambda-calculus notation with nameless dummies, a tool for automatic formula manipulation. Indag. Mat., 34:381{392, 1972.
4. T. Hardin A. Laville. Proof of termination of the rewriting system subst on ccl. Theoretical Computer Science, 46:305{312, 1986.
5. P.-L. Curien T. Hardin A. R os. Strong normalization of substitutions. Lecture Notes in Computer Science, 629:209{217, 1992.
6. H. Zantema. Termination of term rewriting by interpretation. Lecture Notes in Computer Science, 656, 1993.
7. P. Lescanne J. Rouyer-Degli. The calculus of explicit substitutions . Submitted to the Journal of Functionnal Programming, 1993.
8. T. Hardin, J.-J. Levy, A Con uent Calculus of Substitutions, France-Japan Arti cial Intelligence and Computer Science Symposium, Izu, 1989.
This article was processed using the LATEX macro package with LLNCS style

