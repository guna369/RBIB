RESEARCH CONTRIBUTIONS 
Programming 
Techniques and 
Data Structures 
Ellis Horowitz 
Editor 
Digital Signatures with RSA 
and Other Public.Key 
Cryptosystems 
DOROTHY E. DENNING 
ABSTRACT: Public-key signature systems can be 
vulnerable to attack if the protocols for signing messages 
allow a cryptanalyst to obtain signatures on arbitrary 
messages of the cryptanalyst's choice. This vulnerability is 
shown to arise from the homomorphic structure of public- 
key systems. A method of foiling the attack is described. 
1. INTRODUCTION 
George Davida [1] uncovered a potentially serious 
weakness in the basic protocol for signing messages 
using the RSA public-key cryptosystem [9]. Assuming 
that a cryptanalyst can get a user to sign arbitrary mes- 
sages that may be meaningless, the cryptanalyst can 
decrypt ciphertext encrypted under the victim's public 
key or forge the victim's signature on a meaningful 
message. This is done by getting the victim to sign new 
messages derived from the intercepted ciphertext or 
chosen message. Although Davida refers to the attack 
as a "chosen signature" attack, it is actually a "chosen 
message" attack since the cryptanalyst chooses mes- 
sages to be signed rather than signatures to be validated. 
The attack also works with other public-key systems. 
The attack does not break the RSA system in the 
traditional sense whereby a cryptanalyst can obtain se- 
cret keys. Indeed, the attack is carried out without 
knowledge of the victim's private key. In this sense, the 
attack is much weaker than a "chosen plaintext" attack 
Research supported in part by NSF Grant MCS80-15484. 
© 1984 ACM 0001-0782/84/0400-0388 75¢ 
on a conventional cryptosystem which, if successful, 
breaks the system. 
We first describe the attack with the RSA cryptosys- 
tem and show how it generalizes to other public-key 
systems. We then describe a signature-hashing tech- 
nique, developed by Davies and Price [2], that appears 
to foil the attack for any public-key system. 
2. THE BASIC RSA PROTOCOL 
Let n be the modulus for the victim's RSA cryptosystem 
where n = pq for large secret primes p and q (say 100 
digits each, making n 200 digits); and let e and d be the 
public and private exponents respectively, where e and 
d are multiplicative inverses mod 4~(n) = (p - 1}(q - 1). 
The public exponent e is used to encipher and validate 
signatures; the private exponent d to decipher and sign 
messages. To send the user a secret message M, the 
sender enciphers M by computing C = M e mod n; the 
user deciphers the ciphertext C by computing Ca mod 
n = M. Similarly, the user signs a message M by com- 
puting S = M d mod n; the receiver validates the signa- 
ture S by computing Se rood n = M. The security of the 
system rests on the assumption that a cryptanalyst can- 
not determine the factors p and q of n. (See [4] for a 
tutorial on the number theory behind the RSA system.} 
3. THE POTENTIAL WEAKNESS 
Suppose that a cryptanalyst has intercepted ciphertext 
C sent to the victim where C = M e mod n. Davida [1] 
has shown how the cryptanalyst may be able to deter- 
mine M without knowing the deciphering exponent d. 
388 Communications f the ACM April 1984 Volume 27 Number 4 
Research Contributions 
We first describe his method and then describe a sim- 
pler method found by Judy Moore. 
ALGORITHM 1. 
Davida's method for obtaining Ca mod n = M. 
1. Factor C into t > 1 components, obtaining 
C = GC2, -. .  G (the components Ci need not be 
prime or prime powers--any decomposition f C 
will do). This implies that M also factors into t 
corresponding components M~ . . . . .  Mt where 
C = GC2 ""  Ct 
= (MiM2 . . .  M,) e mod n 
= (Mi)e(M2) e . . .  (Mr) e mod n, 
and Mi = C/a mod n (i = 1 . . . . .  t). 
2. Get the victim to sign a message X and messages XG 
mod n . . . . .  XG mod n. X can be a new message or a 
message previously signed by the victim. The mes- 
sages XC1 . . . . .  XCt might be lines in some file the 
cryptanalyst requests the victim to sign line by line 
to acknowledge r ceipt. The signatures obtained are 
thus: 
S = X a mod n 
Si = (XCi} a rood n (i = 1 . . . . .  t). 
3. Compute the multiplicative inverse S -a mod n of the 
signature S, getting 
S -1 = X -a mod n. 
4. Multiply this by each of the Si to obtain the Mi: 
S-1Si mod n = X-a(XCi) a rood n = C~ mod n = Mi. 
5. Compute the product M1M2 • • • Mt  rood n = M. 
The attack can also be made using X = 1. Then the 
cryptanalyst needs only the t signatures Si = C/a mod n 
= Mi. This attack, however, may be easier to detect 
since the factors of C and M are exposed. 
Obviously the attack would not be feasible if a com- 
plete factorization of C were required in Step 1, since 
we are assuming that factoring large {e.g., 200 digit) 
numbers is infeasible (if not, then RSA could be bro- 
ken). Even so, factoring is costly, so we are more inter- 
ested in Moore's method which does not require any 
decomposition. 
The multiplicative inverse of S computed in Step 3 
can be computed efficiently in O(log n) time using an 
extended version of Euclid's algorithm {e.g., see [4]). In 
the unlikely event hat S is not relatively prime to n, S 
does not have a unique inverse mod n. But in this case, 
the cryptanalyst can easily factor n because S will be a 
multiple of p or q, whence gcd(S, n) = p or q. 
In Step 2, the cryptanalyst can pick an arbitrary mes- 
sage S and compute X = S e mod n rather than asking 
the victim to sign X, since this implies that S = X a mod 
n. This reduces the amount of cooperation required 
from the victim and is used in Step 1 of Algorithm 2, 
the simpler approach found by Moore. Because the vic- 
tim does not know X or S, it is unnecessary to decom- 
pose C to conceal the attack, that is, t = 1 can be used. 
Thus, Moore's attack requires only one signature from 
the victim: 
ALGORITHM 2. 
Moore's method for obtaining Ca mod n = M. 
1. Pick an arbitrary S and compute X = S e mod n; this 
implies 
S ~- X d mod n. 
2. Get the victim to sign the message XC mod n, obtain- 
ing the signature 
$1 = (XC) d rood n. 
3. Compute S-1 mod n = X -d mod n. 
4. Multiply S -I by $1 to obtain M: 
S-1Si mod n = x-d(xc )  d mod n = C d mod n = M. 
Under the assumption that the RSA system in crypto- 
graphically strong (computationally infeasible to break}, 
Moore's method is optimal in the sense of requiring the 
minimal number of signatures from the victim. If it 
were not, then we could decrypt ciphertext without 
any cooperation from the victim, thereby breaking RSA. 
Because both algorithms compute Cd mod n, they 
may also be used to forge the victim's ignature on a 
message C chosen by the cryptanalyst. If the cryptosys- 
tern is used for signatures only and not for message 
secrecy, or if separate keys (values of e, d, and n) are 
used for secrecy and for signatures, the attack can still 
be used to forge signatures, though it cannot be used to 
decrypt ciphertext. 
4. GENERALIZING THE RESULTS TO OTHER 
PUBLIC-KEY SYSTEMS 
Consider an arbitrary public-key cryptosystem with 
private deciphering (signature) transformation D and 
public enciphering (signature validation) transformation 
E = D -1. Moore's method extends to the system if the 
message space forms a group with binary operator o
and identity element 1; the signature space forms a 
group with a binary operator, also denoted by o, and 
identity 1; and the deciphering transformation D is a 
homomorphism from the message group to the signa- 
ture group, that is, the following properties hold for all 
messages X, Y, and Z: 
1. X o (Y o Z) = (X o Y) o Z (Associativity--for Step 
4) 
2. X o 1 = 1 o X = X (Identity--for Step 4) 
3. X o X -I = X -1 o X = 1 (Inverses--for Steps 
3 and 4) 
4. D(X  o Y) = D(X) o D(Y)  (Homomorphism--for 
Step 4) 
Algorithm 3 computes D(C) to decrypt C or forge the 
victim's ignature on C: 
April 1984 Volume 27 Number 4 Communications of the ACM 389 
Research Contributions 
ALGORITHM 3. 
Generalization of Moore's method to obtain D(C). 
1. Pick S and compute X = E(S); this implies S = D(X). 
2. Get the victim to sign the messae X o C. The signa- 
ture is 51 = D(X o C). 
3. Compute S -~. 
4. Compute 
$2 = S -1 o $1 
= S- '  o D(X o C) = S- '  o (D(X) o D(C)) 
= 5 -1 o (S o D(C)) = (5 -1 o S) o D(C) 
= 1 o D(C) = D(C). 
The RSA system fits this general pattern, where both 
the message and signature groups are defined by the 
integers relatively prime to n together with multiplica- 
tion. The deciphering transformation is a homomorph- 
ism because 
(XY} e mod n = [(X d mod n)(Y e mod n) mod n. 
(Similarly, the enciphering transformation is a homo- 
morphism.) 
It is not surprising that a cryptosystem for which the 
deciphering transformation is a homomorphism is vul- 
nerable to certain types of attack. Rivest et al. [10] 
showed that such cryptosystems can have inherent 
weaknesses. 
In a signature-only system, messages can be signed 
but not encrypted for secrecy, since computing D(E(X)) 
will not usually restore X. For such systems, the attack 
is therefore useful only for forging signatures. Note that 
in this case, the transformation D need not be a homo- 
morphism as long as E is a homomorphism. This is 
because the signature $2 computed in Step 4 of Algo- 
rithm 3 will be accepted as a valid signature, though it 
can differ from that which the victim would compute, 
that is, 
E(S2) = E(S -~ o $1) = E(S -~) o E(Si) 
= E(S)-'  o E(S1) = X- '  o (X o C) = C. 
Shamir's ignature-only knapsack scheme [11] (see 
also [4]) fits this pattern, as shown by DeMillo and 
Merritt [3]. Here, the signature validation transforma- 
tion E is given by E(S) = 5A mod n, where n is a k-bit 
prime, A and S are vectors of length 2k whose elements 
are k-bit integers, and SA denotes the scalar product. 
The signature group is defined by the integer vectors of 
length 2k with vector addition and the 0 vector as iden- 
tity. The messages C and X are integers mod n, and the 
message group is defined by the integers mod n with 
addition and identity 0. Although D is not a homo- 
morphism, E is a homomorphism from the signature 
group to the message group, since for all signatures S~ 
and $2: 
(Sa + S2)A mod n = (S~A mod n + S2A mod n) mod n. 
Algorithm 4 shows how a signature can be forged in 
Shamir's ystem. 
ALGORITHM 4. 
DeMillo's and Merritt's Method for Forging a Signature 
$2 on C with Shamir's Signature System. 
1. Pick X and get the victim to return the signature S
such that SA mod n = X. 
2. Get the victim to return a signature $1 on X + C such 
that SiA mod n = X + C. 
3. Compute S -1 = -S. 
4. Compute the signature 52 = -S  + $1. $2 is a valid 
signature of C because 
E(S2) = E(-S + $1) = (-S + Si)A mod n 
= ( -SA  rood n + S1A mod n) rood n 
=[ -X+(X+C)]modn=C.  
DeMillo and Merritt also consider similar attacks on 
variants of the RSA system. These systems all have an 
underlying homomorphic structure (though not explic- 
itly identified as such in their paper), which explains 
their vulnerabil ity to this general method of attack. 
5. AN IMPROVED S IGNATURE SCHEME 
For the attacks to succeed, the cryptanalyst must be 
able to get the victim to sign essentially arbitary mes- 
sages that are supplied by the cryptanalyst and are not 
likely to be meaningful. To protect against such attacks, 
users can sign only meaningful messages, but this 
places the burden of security entirely on the user. 
A better strategy is to strengthen the signature sys- 
tem to make the attacks impossible. We now describe a
method of doing this that transforms all messages with 
a one-way public function h before they are signed. A 
message M is thus signed by computing S = D(h(M)). 
The function h should satisfy four properties: 
1. h should destroy all homomorphic structure in the 
underlying public-key cryptosystem; that is, h(X o Y) 
h(X) o h(Y) must hold. Moreover, for almost all X 
and Y, D(h(X o Y)) ~ D(h(X)) o D(h(Y))) should hold. 
Then the cryptanalyst cannot factor out the X or Y in 
a signature D(h(X o Y)). 
2. h should be computed over entire messages (rather 
than on a block-by-block basis ). This will make it 
difficult for a cryptanalyst to obtain signatures by 
inserting blocks into a file that otherwise looks 
legitimate. 
3. h should be one-way so that messages are not dis- 
closed by their signatures. This is needed when both 
secrecy and authenticity are desired. 
4. h should have the property that for any given mes- 
sage X and value h(X), it is computationally infeasi- 
ble to find another message Y such that h(Y) = h(X). 
This is needed to prevent forgeries ince the value 
h(X) can be obtained from a signature S = D(h(X)) by 
applying the public function E to S. 
390 Communications of the ACM April 1984 Volume 27 Number 4
Research Contributions 
Applying the transformation h to a message before 
signing has an additional benefit. Because the transfor- 
mations E( ) and D(h()) are not inverses, a cryptanalyst 
cannot hope to decrypt an intercepted ciphertext mes- 
sage C by getting a signature on C. 
The practice of transforming messages before Signing 
was suggested by Davies and Price [2] who designed a
protocol for signing secret messages using a one-way 
public hashing function h that conceals messages and 
prevents forgeries. Their function h blocks a message 
M into 56-bit blocks M1 . . . . .  Mr and computes a digest 
(64 bits) 
H = h(M, I) = EM r 0 . . .  0 EM~ 0 EMr 0 . . .  0 EM~(I), 
where EMi is the DES-enciphering algorithm keyed to 
block Mi, I is a random 64-bit initialization seed for the 
DES, and "o" here denotes function composition. Be- 
cause the function h can be computed both forwards 
and backwards (by using the deciphering transforma- 
tions DMi) for an arbitrary message M, the message must 
be repeated in the keys to prevent a "meet in the mid- 
dle" forgery (compute forwards from I using 2 a2 varia- 
tions of the first half of the desired message and back- 
wards from H using 2 a2 variations of the second half of 
the message; sort the results to find a match, which is 
likely to occur since there are 264 ways of pairing the 
values in the two sets). 
Wolfgang Bitzer has suggested an improved hashing 
function that foils the meet-in-the-middle attack with a 
single pass over the message. His hashing function is 
given by 
where 
H = h(M, I) = Zr+l, 
Zi+i = Ezi~Mi(Zi) (i = 1 . . . . .  r) 
Z~ = I, 
Z/' consists of 56 bits selected from Zi, and "~" denotes 
"exclusive or." The meet-in-the-middle attack is pre- 
vented because it is not possible to compute backwards 
through the function, i.e., compute Zi from Zi÷l. 
Both DES-based hashing functions would destroy the 
multiplicative structure of the RSA system and the ad- 
ditive structure of knapsack systems. They almost cer- 
tainly would destroy the homomorphic structure of any 
underlying cryptosystem. 
Using the hashing function, the message M is signed 
as S = D(HH I), where " [[ " denotes concatenation, and 
the 128-bit block (HllI) is replicated as many times as 
necessary to fill the input block for the signature trans- 
formation D. A signature S on an alleged message M is 
validated by first computing E(S) = D-1(S) = (HllI); next 
computing h(M, I) using the public function h and the 
alleged message M; and finally comparing h(M, I) with H. 
The message M can be transmitted either as cleartext 
(if secrecy is not needed), as ciphertext encrypted using 
the receiver's public key, or as ciphertext encrypted 
using a secret key shared by the sender and receiver (if 
a conventional cryptosystem is used for message se- 
crecy, with the public-key system reserved for signa- 
tures and key exchange). 
The hashing function has two important advantages 
besides protecting against signature attacks: 
1. It separates the signature transformation from the 
secrecy transformation, allowing secrecy to be im- 
plemented with a one-key system or to be skipped 
[2]. Yet the separation is achieved without much 
message xpansion, since each signature is a single 
block. 
2. It conceals messages so that signatures can be pub- 
licly disclosed without revealing their correspond- 
ing messages. This is important for recovering 
from compromises or direct disclosure of private 
keys. Let DA be the signature key of user A. In 
order that a signature S of A can remain valid after 
DA is compromised or deliberately disclosed, S
should be bound to A's current public key EA, 
time-stamped, and signed by the public key server 
(notary public) [8] giving a "signature certificate" 
[5] G = Dp(T, A, EA, S), where Dp is the signature 
key of the public key server, and T is the time 
stamp. And in order that S can remain valid even 
if Dp is compromised, G should be kept in a public 
log. For this reason, it is important hat S conceal 
the message signed and have minimal storage 
requirements. This is achieved with the hashed 
signature method. (For further discussion of this, 
see [5].) 
3. It can provide a more efficient method of signing 
messages, ince the public key transformation is 
applied to just one block of data. The RSA trans- 
formation, for example, is several orders of magni- 
tude slower per bit than the DES, so using the DES 
to hash a long message down to a single block is 
considerably faster than applying RSA to the en- 
tire message. 
6. CONCLUSIONS 
Davida's discovery demonstrates the fundamental im- 
portance of encryption protocols. It is not enough to 
have an encryption algorithm that is computationally 
hard to break; the procedures for using the algorithm 
must also withstand attack. We have identified several 
properties that should be satisfied by any signature sys- 
tem; in particular, it should destroy any homomorphic 
structure in the underlying public-key algorithm. The 
signature scheme described here appears to satisfy 
these properties. Further research along the lines initi- 
ated by Dolev and Yao [7] and DeMillo et al. [3] may 
lead to techniques for proving the security of signature 
schemes. 
The attacks on public-key signature systems are in- 
stances of a general method of attack, which we call 
the "many-time pad" [6]. Many-time pad attacks pad 
the input to a query to conceal a request for sensitive 
data, and then remove the effect of the padding from 
the output by exploiting an underlying homomorphic 
structure in the problem domain. "Tracker" attacks 
April 1984 Volume 27 Number 4 Communications of the ACM 391 
Research ContriButions 
(e.g., see [4]) on statistical databases are also instances 
of the many-time pad. 
Acknowledgments This note evolved from discussions 
with George Davida, who first brought he signature 
attack on RSA to my attention; Judy Moore, who told 
me of her simpler attack; and Michael Merritt, who 
independently with Richard DeMillo identified a math- 
ematical structure in the attacks imilar to the one 
described here. Many others have provided helpful 
suggestions, including Bob Blakley, Peter Denning, 
Ron Graham, Ron Rivest, and the students in my cryp- 
tography class. Donald Davies brought Bitzer's hashing 
function to my attention. Finally, the referees provided 
man.y constructive comments. 
REFERENCES 
1. Davida, C.I. Chosen signature cryptanalysis of the RSA (MIT) public 
key cryptos3fstem. Tech. Rept. TR-CS-82-2, Dept. of Electrical Engi- 
neering and Computer Science, Univ. of Wisconsin, Milwaukee, WI., 
Oct. 1982, 
2. Davies, D,W. and Price, W.L. The application of digital signatures 
based on public key cryptosystems. Tech. Rept. NPL Report DNACS 
39/80, National Physical Lab., Teddington, Middlesex, England, 
Dec. 1980. 
3. DeMillo, R., Lynch, N.A. and Merritt, M,J. Cryptographic protocols. 
P roc. SIGACT Conf.. 1982. 
4. Denning, D.E. Cryptography and Data Security. Addison-Wesley, 
Reading, MA., 1982. 
5. Denning, D.E. Protecting public keys and signature keys. 1EEE Com- 
puter 16, 2 (Feb. 1983), 27-35. 
6. Denning, D.E. The many-time pad: Theme and variations. Proc. 1983 
Symp. Security and Privacy, IEEE Computer Society, Apr. 1983. 
7. Dolev, D. and Yao, A.C. On the security of public key protocols. 
Proc. 22d Ann. Syrup. Foundations of Comput Sci, IEEE Computer 
Society, 1981. 
8. Merkle, R.C. Protocols for public key cryptosystems. Proc. 1980 
Syrup. Security and Privacy, IEEE Computer Society, April, 1980, pp. 
122-133. 
9. Rivest, R.L., Shamir, A. and Adleman, L. A method for obtaining 
digital signatures and public-key cryptosystems; Commun. ACM 21, 2 
(Feb. 1978), 120-126. 
10. Rivest, R.L.. Adleman, L. and Dertouzos, M.L. On data banks and 
privacy homomorphisms. In Foundations of Secure Computation, R.A. 
DeMillo et al.. Eds., Academic Press, New York, 1978, 169-179. 
11. Shamir, A. A fast signature scheme. Tech. Rept. MIT/LCS/TM-107, 
MIT Lab. for Computer Science, Cambridge, Mass., July 1978. 
CR Categories and Subject Descriptors: E.3 [Data]: Data Encryp- 
tion--public-key cryptosystems 
General Term: Security 
Additional Key Words and Phrases: cryptanalysis, cryptographic pro- 
tocol, hashing, homomorphism 
Received 11/82; revised 7/83; accepted 11/83 
Author's present address: Dorothy E. Denning, SRI International, Com -
puter Science Lab, 333 Ravenswood Ave., Menlo Park, CA 94025 
Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commer- 
cial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of 
the Association for Computing Machinery. To copy otherwise, or to 
republish, requires afee and/or specific permission. 
SUBSCRIBE TO ACM PUBLICATIONS 
Whether you are a computing novice or a master of your 
craft, ACM has a publication that can meet your individual 
needs. Do you want broad-gauge, high quality, highly read- 
able articles on key issues and major developments and 
trends in computer science? Read Communications of the 
ACM. Do you want to read comprehensive surveys, tutorials, 
and overview articles on topics of current and emerging 
importance? Computing Reviews is right for you. Are you 
interested in a publication that offers a range of 
scientific research designed to keep you abre ~n* 
of the latest issues and developments? Reae 
Journal of the ACM. What specific topics are 
worth explonng further? The various ACM 
transactions cover research and applications 
in-depth--ACM Transactions on Mathematical Software, 
ACM Transactions on Database Systems, ACM Transac- 
tions on Programming Languages and Systems, ACM 
Transactions on Graphics, ACM Transactions on Office 
Information Systems, and ACM Transactions on Computer 
Systems. Do you need additional references oq computing? 
Computing Reviews contains original reviews and. abstracts 
of current books and journals. The ACM Guide to Comput- 
ing Literature is an important bibliographic guide to 
~^..~ .... ~ng literature. Collected Algorithms from ACM is 
a collection Qf AC M a!gorithms available in 
printed version, on microfiche, or machine- 
readable tape. 
For more information about ACM publications, 
trite for you; free copy of the ACM Publications 
atalog to: The Publications Department, The 
;sociation for Computing Machinery, 1 ! West 
=~nd Street, New York, NY 10036. 
392 Communications of the ACM April 1984 Volume 27 Number 4 
