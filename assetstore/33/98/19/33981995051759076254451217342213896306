Confluence of Conditional Rewrite Systems*
Nachum Dershowitz I, Mitsuhiro Okada 2, and G. Sivakumar 1
1Department of Computer Science University of Illinois at Urbana-Champaign
Urbana, Illinois 61801, U.S.A.
2Departrnent of Computer Science Concordia University
Montreal, Quebec H3G 1M8, Canada
ABSTRACT Conditional rewriting has been studied both from the point of view of algebraic data type
specifications and as a computational paradigm combining logic and functional programming. An important issue, in either case, is determining whether a rewrite system has the Church-Rosser, or confluence, property. In this paper, we settle negatively the question whether "joinabihty of critical pairs" is, in general, sufficient for confluence of terminating conditional systems. We review known sufficient conditions for confluence, and also prove two new positive results for systems having critical pairs and arbitrarily big terms in conditions.
1. Introduction Conditional term rewriting systems arise naturally in the algebraic specification of data types; they
have been studied largely from this perspective [Zhang-Rtmy-85, Bergstra-Klop-86, Kaplan-87]. When a system is noetherian and confluent, it defines a normal-form algebra which is initial. With various restrictions on the form and content of conditional rules, e.g. only one occurrence of any variable on the left-hand side, some useful conditions for confluence have been obtained, In this paper, we extend those results.
Recently, conditional rewriting systems have been shown to provide a natural computational paradigm combining logic and functional programming [Fribourg-85, Goguen-Meseguer-86, DershowitzPlaisted-87]. A program is a set of conditional rules and a computation attempts to find a substitution that makes two terms provably equal in the underlying theory. The operational mechanisms are rewriting and narrowing: rewriting provides for the functional part and narrowing for the logic-programming ability to construct solutions. For the completeness of interpreters based on those mechanisms, some form of confluence is needed. In this context, it is especially useful to weaken any restrictions on the form of rules as much as possible, and still have syntactic tests for confluence. Unfortunately, as we show here, there is a limit to the extent to which such restrictions can be lifted.
* Thisresearchwas supportedin partby theNationalScienceFoundationunderGrantDCR 85-13417.

32
The next section presents the basic notions. In Section 3 we give an interesting counter-example to show that critical pair joinability is, in general, insufficient for confluence. Sections 4 and 5 contain our positive results on confluence. We conclude with suggestions of extensions and applications.

2. Conditional Rewriting A positive conditional equation is a (first-order) formula of the form
pl =ql A'" Apn =qn D l =r,
where l, r, p 1, q 1..... Pn, are qn are (first-order) terms built from some set F of function symbols and set X of variables. The formula is (implicitly) universally quantified. The subformulae p 1 = q 1..... Pn = qn (n > 0) are called conditions; an equation is unconditional if n = 0. We will abbreviate conditions by writing, instead, ~ = ~ : l = r.
A conditional rewrite rule is an oriented conditional equation, written
~$~:t ~ r,
or just p $ q : l ~ r, where the symbol .1. signifies equality and has an operational meaning described below. A conditional rewrite system is a set of such rules. For example, the following is a system for computing the relation < on natural numbers:

x<y $ tt:

0<0 s(x)<_O s(x)<s(y) x <_s(y)

~ tt ~ ff ---) x<y ~ tt

Conditional systems are used to compute by replacing an instance of a left-hand side 1by the corresponding instance of the right-hand side r, provided the corresponding instance of the condition p ,l, q holds.
For a given system, we define the rewrite ( ~ ) and join ($) relations on terms, as follows: Let p $ q : l ~ r be a rule, s be a term, 7r be a position of a subterm in s, and cr be a substitution (a mapping from variables to terms, extended to a morphism from terms to terms). Then we say that the term s [/c]n, that is, the term s with an instance I~ of the left-hand side l at position n, rewrites to the term s[r~]n (s with r a in place of l~) if p ~ and q o each rewrite in zero or more steps to the identical term; in that case, we say that ~ is a feasible substitution for the rule. We write s --) t, if s rewrites to t in one step; s --~ t, if s rewrites to t in zero or more steps, i.e. if t is derivable from s; s ,1, t, if s ~ w and t
w for some term w; and s ~ t, if s --~ t, but no rewrite applies to t, i.e. the normal form t is derivable from s. For the above example, we have 0<s(0)--~ tt using the last rule, since the condition 0 -<0 $ tt is achieved by the first rule. See [Dershowitz-Okada-Sivakumar-87] for an analysis of the impact of different operational semantics for conditions.
Two important restrictions on conditional rules are the following:
Definition 1. A conditional rewrite system is left-linear if a variable occurs at most once in a left-hand side l of each rule ff $ ~ : l ---)r.

33
Definition .2. A conditional rewrite system is normal if every component of the right
part ~ of the condition of each rule ~ $ ~ : l --->r is a ground (variable-free) normal form.
Note that for normal systems the condition/5 $ ~ is equivalent to/5 ---} ~.
Any conditional system can be transformed into a normal, but not left-linear, one, by introducing new operators, eq and true, writing conditions/5 $ ~ as eq(~,'~) $ true, and adding the non-left-linear unconditional rule eq (x,x) --~ true. A system that is both left-linear and normal is called Type IIIn in [Bergstra-Klop-86].
A rewrite relation --> is said to be noetherian if there is no infinite chain of terms tt ,tz, " " " ,tk, " " " such that ti ~ ti+l for all i>l. A rewrite relation is confluent if whenever two terms, s and t, are derivable from a term u, then a term v is derivable from both s and t. In symbols:
* --{ _c ~ * *~---,where ~ is the inverse of the derivability relation ---{. It is locally confluent, if s --~ v and t ~ v for some v whenever u --> s and u --->t (in one step).
2.1. Disjoint peaks If a term u[s,t] contains subterms, s and t, neither of which is a subterm of the other, and each
rewrites to another term, say s --->s ' and t ~ t', then the resultant terms, u[s',t] and u[s, tq, rewrite in one step to the same term, u[s',t']. The situation u[s',t] 4-- u[s,t] --->u[s, tq is called a disjoint peak.
See Fig. 2.1.
2.2. Critical peaks
Throughout this paper, variables in different rules (or in different instances of the same rule) are considered to be distinct, renaming, as necessary.
Definition 3. If the left-hand side g of a rule p ' $ q ' : g --> d unifies, via most general
substitution ~, with a non-variable subterm s at position n in a left-hand side 1of a rule p $ q : 1 --->r, then the conditional equation
(p~,p'c) = (qcs, q'o) : lcY[dc]n = r(y
is called a critical pair of the two rules, where Ics[d~]~ is obtained by replacing s in l by d and applying c.
The situation
lo[dcr]n ~-- Icy --, rcs
is called a critical overlap, and, for any context u and substitution x less general than 6,
u[l'c[dx]n] 4-- u[Ix] --~ u[rx]
is called a critical peak. See Fig. 2.2.
Definition 4. A critical pair c = d : s = t is feasible, and the corresponding overlap is feasible, if there is a substitution ~ for which c o ,1,do. A trivial critical pair is one for which s is identical to t. A system is non-overlapping if it has no feasible, non-trivial critical pairs.

34
z~ A.-..
Figure 2.1. Disjoint peak.
Figure 2.2. Joinable (ShaUow-joinable) critical overlap.
" . *g
Figure 2.3. Variable overlap.

35

Definition 5. A critical pair c = d : s = t is joinable if s~ $ t~ for any substitution such that c6,1. dr.

Infeasible critical pairs are vacuously joinable and trivial ones are trivially joinable.

The depth of a rewrite is the depth of recursive evaluations of conditions needed to determine that

the matching substitution is feasible. Formally, the depth of an unconditional rewrite is 0; the depth of a

rewrite using a conditional rule p ,1.q : 1 ~ r and substitution ~ is depthfpaSqcs) + 1; the depth of a n-

step derivation s --~ t is the maximum of the depths of each of the n steps; the depth of a "valley" s ,1.t,

joining at a term v, is the maximum of the depths of s ~ v and t ~ v; and the depth of a zero-step

derivation or valley is 0. We write s ~ t if s --->t and the depth of the rewrite step is no more than k.

k

Similarly s --~ t will mean that the maximum depth in that derivation is at most k. For example,

k

0 < 0 --->tt, 0 < s ( 0 ) --->tt, a n d 0 <sn(O) --->tt, for all m>n.

01

m

Definition 6. A critical pair c = d : s = t, obtained from a critical overlap s ~ u ~ t
is shaIIow-joinable, if, for each substitution ~ such that co $dff, there exists a term v
such that s ~ ~ v and t ~ ~ v, where m is the depth of u --->s and n is the depth of
n rtl
u --->t. A conditional rewrite system is shallow-joinable if each of its critical pairs is.

In other words, every critical pair of a shallow-joinable system joins with the corresponding depths less or equal to those of the critical overlap. (See Fig. 2.2.) In particular, critical pairs between unconditional rules must be unconditionallyjoinable.

2.3. Variable peaks
Let x be a feasible substitution for a rule p" $ q" : g ~ d and let ~ be a feasible substitution for a rule p $ q : t --> r under which some variable x in I is mapped to a term c[gx], containing an instance of g. Then, the term l a can be rewritten in two different ways, to r a and la[gx], as depicted in Fig. 2.3. This is what we will call a variable peak.
If I is non-linear in x, then each of the remaining occurrences of c[gx] in lg may be rewritten until a term l~" is obtained, where a" is same as ~ except that x is mapped to c[dx]. Similarly, if r is non-linear i n x then we need additional rewrites to get r a --~ re'. When dealing with unconditional rewriting systems, variable peaks are always joinable, since l a ' --->r~'. But for conditional systems, ~" must be feasible, i.e. po" $ qff' must hold. This is not always the case, even if critical pairs are joinable, as the counter-examples of the next section demonstrate.

3. Counter.examples
In this section, we present non-confluentsystems that are counter-examples to attempts at extending theorems for unconditional systems to the analogous conditional case.
Unconditional systems are locally confluent, if all their critical pairs are joinable. On the other hand, Example A [Bergstra-Klop-86] below shows that non-normal, non-noetherian conditional systems need not be locally confluent, even if they are left-linear and non-overlapping. In that example, the term b has many normal forms, including a and f (a), despite the lack of critical pairs.
As will be shown in Section 5, noetherian conditional systems with no critical pairs are locally confluent, and, as is well known, for noetherian systems, local confluence implies confluence. Unfortunately:

36

I b ---> f(b) I
x S f (x) : f (x) ---> a
Example A. Left-linear and non-overlapping, but not normal.

h(f (x)) S k(g(b)) "

c c a h (x) h ff (a)) f (x)

~ k(f (a)) ---> k(g(b)) ~b --> k (x ) --> c ~ g (x)

Example B. Left-linear and normal, but not shallow-joinable.

bSb: b Sb : b Sb :
x Sa • h(f(x)) Sk(g(b)):

a h(x) h(f(a)) p(b) q(b) p(x) f(x)

-~ b ~ k(x) ---> p ( a ) -.-) k ( f (a)) .-~ k(g(a)) --) q(x) --> g(x)

Example C. Left-linear and shallow-joinable,but not normal.

bSb: b$b : b,[,b :
eq(x,a) S true : h(f (x)) $ k(g(b)):

eq (x,x) a
h(x) h(f(a))
p(b) q(b) p(x) f (x)

~ true ~b ~ k(x) --> p ( a ) ---) k ( f (a)) -.~ k(g(a)) --~ q(x) -~ g(x)

Example D. Normal and shaUow-joinable, but not left-linear.

37
Proposition. There exists a noetherian, non-locally-confluent, conditional rewrite system all of whose critical pairs are joinable.
This is demonstrated by Example B, in which, though all four critical pairs are joinable, the term f (a) has two normal forms, f (b) and g (b). Note that the unconditional critical pair obtained by rewriting c in two ways is joinable only using the conditional rule, i.e. it is not shallow-joinable; see Fig. 3.1. With slight modifications, one obtains counter-examples C and D, showing that no combination of two of the following three factors sutfices for confluence: left-linear, normal, and shallow-joinable. From these examples, it is clear that we need relatively strong restrictions on rewrite systems to guarantee confluence. In the next section, we show that combining all three factors does, in fact, yield confluence for noetherian systems.

4. Confluence of normal systems
In this section, we consider conditions that ensure that a normal, left-linear system is confluent. Such systems arise naturally in pattern-directed functional languages, when the different cases are constructor-based and mutually exclusive.
Bergstra and Klop have shown the following for conditional systems that are not necessarily noetherian:

Theorem 1 [Bergstra-Klop-86]. A left-linear, normal conditional rewrite system is confluent, if it is non-overlapping.

(Though we have weakened their definition of non-overlapping to allow infeasible overlaps, the result still holds.) This is analagous to the standard result that left-linear unconditional systems with no critical pairs are confluent (see, e.g. [Huet-80]), and can be extended somewhat by severely limiting the way in which critical pairs join.
We give a similar result for overlapping systems in which critical pairs are shallow-joinable. For this, we must require that the system be noetherian.

Theorem 2. A noetherian, left-linear, normal conditional rewrite system is confluent, if all its critical pairs are shallow joinable.

From the counter-examples of the previous section, one can see that this is optimal. This theorem is a corollary of the following:

Lemma 1. Let R be a noetherian conditional rewrite system that is left-linear, normal

and shallow-joinable. Then, if u --~ s and u ---{ t, there exists a term v such that s --~ v

and t ---~ v.

mn

n

m

Proof. The proof is by induction on the pair (m+n, u) with respect to the (lexicographic combination of the) natural ordering of natural numbers and the noetherian relation ---r on terms.

Let u---~s'---{ s and u--* t'--~ t. That is, u is first rewritten at position ~ to s' using rule

mm

nn

p $ N : l --~ r with depth no greater than m, and at position rg to t" using q ,1,M : g --~ d with maximum

depth n (M and N are normal forms). We show that s' and t' are joinable with appropriate depths at

some term w. As in the Diamond Lemma for unconditional systems, two inductions (at the peaks, s ' and

t') show that s and t are also joinable with suitable depths.

38

f

hOe(a))

- h(f(b))

2-----.-------__

h (g (a))

, k(f(a))

. kq(b))

h (g k (g (a))

Figure 3,1, Critical pairs of Example B.

Figure 4.1. Normal, left-linear, variable overlap case (Lemma 1).

/h,/.~ AA

~A

L by induction (s ~, gx)
V .............................................

by induction (s --~ s')
- .............................................

Figure 5,1, Proper subterm case (I_emma2).

-

38

If the peak at u is disjoint, then s ' and t' join at a term w (which is u after both rewrites). That is,
t' ~ w (by rewriting at g') and s" ~ w (by rewriting at g).
nm

If the peak is critical, then, by the shatlow-joinable assumption, there is a term w such that t' --~ w
n
ands'---) w.
m

This leaves only the variable peak case. Without loss of generality, let ~ be above ~'. Thus, some

variable x in I matches a subterm c[gx] which rewrites to c[dx]. Let o" be the same as the substitution t~

used in rewriting u ~ s', except that x is mapped to c[dx]. As seen in Fig. 4.1, because R is left-linear,

the subterm of t ' at ~ is actually lt~'. Furthermore, s" --~ u [ r d ] ~ = w, by rewriting all (zero or more)

n
occurrences o f g ~ in s ' to dt~. It remains to show that lo" ---rro" is feasible. Since the system is normal,

m
we have pt~• ---trN, as x. s re.quir.ed, .by Induction from the shallower peak po" ~ p ~ --~ N.

[]

m-1 n m-1

5. Confluence ofjoinable systems
In this section, we make no restrictions on the joinability of the critical pairs. We also do not insist on normal conditions or left-linearity. Under certain circumstances, we are able to prove that such systems are confluent as long as all their critical pairs are joinable. This is close in spirit to the result for unconditional systems.
Definition 7. A system is decreasing if there exists a well-founded ordering >, containin~ the proper subterm ordering ~,, such that s>t whenever s ~ t and, for each rule p $ q : I --~ r and substitution ~, lcr > pt~ and l c > qty.
This is stronger than the noetherian requirement. Examples B-D are not decreasing, since the left-hand side f (x) is a proper subterm of the term h (f (x)) in the condition.
Theorem 3 ['Dershowitz-Okada-Sivakumar-87]. A decreasing conditional rewrite system is confluent, if all itsfeasible critical pairs are joinable.
This generalizes results in [Kaplan-87] and [Jouannaud-Waldmann-86], but the proof is essentially the same.
In our last result, we allow arbitrary terms in the condition, but insist that overlaps between lefthand sides do not occur at proper subterms of the overlapped left-hand side. In particular, nondeterministic pattern-directed languages, with no nested defined function symbols in the patterns, meet this requirement.
Definition 8. A critical pair is an overlay if it is obtained from two two left-hand sides that unify at their roots.
In our original example, the critical pair s (x) < y = tt : x < y = tt between the rules s (x) < s (y) ~ x < y andx -<y $ n :x <s(y) ~ n i s an overlay.
Theorem 4. A noetherian conditional rewrite system is confluent, if all its critical pairs are joinable overlays.
This may be useful for designing completion procedures, because of the absence of restrictions on conditions. It is worth noting that, in particular, any conditional system that is noetherian and nonoverlapping is confluent, as is the case for unconditional systems.

40

AA A,A

1 jo~t. ov.r~y

u. / / : . , < . . . . . . . . . . . ~

.....................

A A A:A

'~i ,
>.1:,,,,
A:A

I by induction (u -~ u') •
V ................

tI by induction (s -~ ro)
~,
:~ ..........................

,
~,
~ .........

Figure 5.2. Overlay case (Lemma 2).

:a..• •

it,,,
i

f
i pCdJ,qo'(by induction) t

by induction (u ~ u3

i I I

Figure 5.3. Variable overlap above (Lemma 2).

41

This theorem is a consequence of the following:
Lemma 2. Let u[t]rl, where H is a set ofpositions, denote the term u with each subterm at a position in H replaced by t. Let R be a noetherian conditional rewrite system in which all critical pairs are joinable overlays, f l u --~ v and s --~ t for any terms u, v, s, andt, then u[t]rl $ v.

Proof. We show that if u[s]ri--~ v and s--~ t, then u[t]rl S v, by induction on the triple
n
(s, n, u [s]), where the first component is compared using the union of the noetherian rewrite relation and the proper subterm relation ~,, the second as a natural number, and the third by the rewrite rela-
tion.

If u = v or s = t, then we are done. Suppose s --> s" ~ t. If we can show that u[s']rl $ v, then by induction it will follow that u[t]n $ v, since s" is less (vis-a-vis -~ ) than s.

If the first rewrite s -~ s" occurs at a proper subterm gx of s, then by induction on the first component, we have u[s']n $ v. See Fig. 5.1.

Otherwise, we may suppose that s is g a and s" is d~, for some rule p" $ q" : g -~ d. Let u[s] -~ u" --~ v, with the first step via rule p $ q : l ~ r at position ~. If this is a disjoint peak (i.e. if
nn
is neither above nor below any position in H), then u[s']rl rewrites (at position ~) to u'[s']rl. Since u ' is
smaUer than u, we have that u ' [ s ' ] n $ v. Thus, u[s']Fi --> u'[s']n $ v.

If u ' ~-- u[s]rl --~ u [s']n is a critical peak, then it must be an overlay and s = g% = la. Critical pairs are joinable, so let s'=dx---~ w and ra--~ w, for some w. Then we have that u" = u [rt~]n - J u[r~]rl. By induction on the last component, we have that u [ r a ] n $ v; by induction on the first, we get u[w]rl $ v. Thus, u[s']n --~ u[w]ri $ v. This case is depicted in Fig. 5.2.

The remaining case is that of a variable overlap, either above or in some s. Let ~ be above s; that is, some variable x in I matches a term c [s]n, containing any number of occurrences of s. Let a" be the same as the substitution ~ used to rewrite u ~ u', except that x is mapped instead to c[s']n,. Now, u[s']n ~ u[lo']rl,,, by rewriting any additional occurrences of x in I that were not included in II. To show that lo" --~ r a ' , we need to show that po" $ q~'. Let eq be a binary operator not appearing in any rule, and consider the derivation eq(pa, q~) ~ eq(w,w), known to exist for some w by virtue of the fact
n-1
that pcr $ q~. We also have p ~ -->p ~ and q ~ --~ qo" by application of s --~ t at occurrences of s in the substitution parts. By induction on the second component, we have eq(po',qoO $ eq(w,w), from which it follows (there being no rules for eq) that p~" $ qcr'. Thus, u[s']rl --~ u[rt~]rr, $ v. This is illustrated
in Fig. 5.3.

Similarly, i f ~ is inside some s, we have u[sqn -4 u[dx'] $ v, as shown in Fig. 5.4. Here x' is like

the substitution x used to rewrite s ~ s', but maps the variable in g to c[rtJ] instead of to c[lt~]. The

condition p'x" $ q'x', needed to show that u" -J u[gx']n ~ u[dz']n, can be shown by induction on the

first component, since It~ is a proper subterm of s.

[]

42

l
' by induction(s -4 dx') '
Figure 5,4, Variable overlap below (Lemma 2).

6. Conclusion
We have explored two different restrictions on criticalpairs of conditional rewrite systems, namely shallow joinability and overlays only, and proved confluence results for systems meeting those restrictions. Our proofs show that, for conditional systems, the notions of confluence, local-confluence, and joinable critical pairs can not be neatly disentangled. In particular, the noetherian condition was needed to show that a system is locally confluent if all critical pairs are shallow joinable. We have also presented counter-examples which show that all our restrictions are necessary.
We have only given examples of systems not containing variables in the condition that do not also appear on the left-hand side. But in the programming context, at least, one would certainly like to allow rules such as:

( x < y , y < z ) $ ( tt , tt ) : x < z --> tt,
where y is a "new" variable, or like:

fib(x) $ <y , z> : fib(s(x))

--> < y + z , y > ,

where the right-hand side also has an occurrence of the new variables, y and z.
Even with new variables, the proofs of Theorems 2 and 4 should go through without difficulty. But, operationally, rewriting is more difficult now, since new variables in the conditions must be solved for. Thus, to rewrite an instance l a of a left-hand side, an interpreter must first find a satisfying substitution x for the new variables in the condition p $ q such that p o x joins qo'x, and then replace lff by rcrx. One way to enumerate solutions (for decreasing and confluent systems) is via narrowing. Unfortunately, it is undecidable, in general, whether such a substitution exists.
Note, also, that with new variables on the right, a rule may non-trivially overlay itself. For example, a rewrites to f (b) andf (c) with the system

43

p(x)$tt :

a -4 f (x)

p (b ) -4 tt

p (c) -4 tt

In general, a rule with new fight-hand side variables can rewrite (in one step) to an infinite number of different terms (i.e. even finite systems may not be "locally finite").
To handle systems not meeting any of the known critical pair criteria, superposition (i.e. narrowing) of left-hand sides on conditions must also be considered. For example, given Example B, it might be nice to generate the following confluent unconditional system:

c -4 k(g(b)) a -4 b
h (x) -4 k (x) f (b) -~ g(b)

With this system, all unconditional equational consequences of Example B have "rewrite" proofs. This is an active area of research, the results of which may be particularly i~seful from the programming point of view.

44
REFERENCES
[Bergstra-Klop-86] Bergstra, J. A., and Klop, J.W. "Conditional rewrite rules: Confluency and termination", JCSS 32, pp. 323-362, 1986.
[Dershowitz-Okada-Sivakumar-87] Dershowitz, N., Okada, M., and Sivakumar, G. "Canonical conditional rewrite systems", submitted.
[Dershowitz-P1aisted-87] Dershowitz, N., and Plaisted, D. A. "Equational programming". In Machine Intelligence 11: The logic and acquisition of knowledge (J. E. Hayes, D. Michie, and J. Richards, eds.), Clarendon Press, London, 1987.
[Fribourg-85] Fribourg, L. "SLOG: A logic programming language interpreter based on clausal superposition and rewriting". Proceedings of the 1985 Symposium on Logic Programming, Boston, MA (July 1985), pp. 172-184.
[Goguen-Meseguer-86] Goguen, L A., and Meseguer, J. "EQLOG: Equality, types and generic modules for logic programming". In Logic Programming: Functions, relations and equations (D. DeGroot and G. Lindstrom, eds.), Prentice-Hall, Englewood Cliffs, NJ, pp. 295-363, 1986.
[Huet-80] Huet, G. "Confluent reductions: Abstract properties and applications to term rewriting systems", J. ACM 27, pp. 797-821.
[Jouannaud-Waldmann-86] Jouannaud, J.-P., and Waidmann, B. "Reductive conditional term rewriting systems". Proceedings of the Third IFIP Working Conference on Formal Description of Programming Concepts, Ebberup, Denmark.
[Kaplan-87] Kaplan, S. "Simplifying conditional term rewriting systems: Unification, termination and confluence", Journal of Symbolic Computation, to appear.
[Zhang-R6my-85] Zhang, H., and R6my, J. L. "Contextual rewriting". Proceedings First International Conference on Rewriting Techniques and Applicatiop~, Dijon, France (May 1985), pp. 46-62 (available as Vol. 202, Lecture Notes in Computer Science, Springer, Berlin [September 1985]).

