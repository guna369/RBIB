A (1.408+ε)-Approximation Algorithm for Sorting Unsigned Genomes by Reciprocal Translocations

Haitao Jiang1, Lusheng Wang2, Binhai Zhu3, and Daming Zhu1
1 School of Computer Science and Technology, Shandong University, Jinan, China. Email: htjiang@mail.sdu.edu.cn,dmzhu@sdu.edu.cn.
2 Department of Computer Science, City University of Hong Kong, Kowloon, Hongkong. Email: cswangl@cityu.edu.hk.
3 Department of Computer Science, Montana State University, Bozeman, MT 59717-3880, USA. Email: bhz@cs.montana.edu.

Abstract. Sorting genomes by translocations is a classic combinatorial problem in genome rearrangements. The translocation distance for signed genomes can be computed exactly in polynomial time, but for unsigned genomes the problem becomes NP-Hard and the current best approximation ratio is 1.5+ε. In this paper, we investigate the problem of sorting unsigned genomes by translocations. Firstly, we propose a tighter lower bound of the optimal solution by analyzing some special sub-permutations; then, by exploiting the two well-known algorithms for approximating the maximum independent set on graphs with a bounded degree and for set packing with sets of bounded size, we devise a new polynomial-time approximation algorithm, improving the approximation ratio to 1.408+ε, where ε = O(1/ log n).

1 Introduction

Genome rearrangement is an important area in computational biology, and some combi-

natorial problems in this area have attracted more and more attention during the last two

decades. Genome rearrangement mainly deals with sorting genomes by a series of re-

arrangement operations. Sankoff et al. proposed three basic rearrangement operations:

reversal, transposition and translocation [1]. Subsequently, sorting single-chromosome

genome by reversals or transpositions and sorting multi-chromosome genome by translo-

cations have become three famous problems and researchers devoted a lot of effort on

these problems, both on determining their computational complexity and on designing

efﬁcient algorithms.

Generally speaking, a translocation is an operation swapping the tails of two chro-

mosomes. For sorting signed genomes by translocations, the problem was ﬁrst studied

by Kececioglu and Ravi [2]. Hannenhalli devised a polynomial time exact algorithm

which runs was further

in O(n3) improved

[to3]O. W(na32n√g leotganl.)imbypOrozveerdy-tFhleatrounannidngShtiammeirto[5O].

(n2) [4], Wang et

which al. and

Bergeron et al. showed that the translocation distance can be computed by a formula in

linear time [6, 7].

Zhu and Wang proved that the problem for sorting unsigned genomes by translo-

cations is NP-hard and APX-hard [8]. In [2], Kececioglu and Ravi also gave a ratio-

2 approximation algorithm for computing the translocation distance beween unsigned

2 Jiang, et al.

genomes. Cui et al. presented a 1.75-approximation algorithm [9], and further improved

the approximation ratio to 1.5 + ε [10].

The problem of sorting unsigned genome by translocations has a close relationship

with the maximum cycle decomposition of the breakpoint graph, which is also NP-

hard [11]. Finding a good cycle decomposition of the breakpoint graph is critical to

approximating the translocation distance [9, 10] and some other genome rearrangement

distances, such as sorting by reversals [12], sorting by double cut and join [13]. About

ten years ago, Caprara and Rizzi proposed a better cycle decomposition method and

improved the approximation ratio for sorting unsigned genomes by reversals [14]. Ba-

sically, this method exploits the approximation algorithm for computing a maximum

independent set on bounded degree graphs [15] and computing a maximum set pack-

ing with each set containing bounded number of elements [16]. Recently, Chen et al.

used this method to improve the approximation ratio of the sorting multi-chromosome

genomes

by

double

cut

and

join

problem

to

13 9

+

ε

[17].

Our contribution In this paper, we devised a new approximation algorithm for sort-

ing unsigned genomes by translocations with an approximation ratio of 1.408 + ε. We

present a new lower bound for the optimal solution by identifying a special local struc-

ture in the breakpoint graph, then devise a cycle decomposition algorithm by combining

the approximation algorithm for computing a maximum independent set on bounded

degree graphs and for computing a maximum set packing with bounded set size, and

enumerate the cycle decomposition of sub-permutations with no more than O(log n)

genes.

The paper is organized as follows. In the preliminaries section, we review some

notions about the sorting unsigned genomes by translocations problem. In section 3, we

review the relation between sorting signed genomes with sorting unsigned genomes. In

section 4, we introduce the new lower bound and then our new algorithm. In section 5,

we analyze the approximation ratio. We conclude the paper in section 6.

2 Preliminaries

In this section, we present the precise deﬁnition of a translocation operation and review

some useful notions.

Gene, Chromosome and Genome

We use a signed integer to represent a

directed gene and use an unsigned integer to represent a gene with unknown direction.

A chromosome, denoted by a permutation, is a sequence of genes and a genome is a

set of chromosomes. A gene which lies at the end of some linear chromosome is called

an ending gene. Throughout this paper, without loss of generality, we assume that the

target genome Y is perfect, i.e., each chromosome in Y is a segment of consecutive

positive integers, for example, i, i + 1, i + 2, . . . , j − 1, j, and, the concatenation of

these chromosomes forms the identity permutation (i.e., no duplication of any gene is

allowed). In the context of sorting genomes, the comparative order of the genes in the

same chromosome matters, but the order of chromosomes and the direction of a whole

chromosome does not matter, which implies that each chromosome can be viewed in both directions. In the case of signed genomes, a chromosome ai, ai+1, · · · , aj is

Approximation Algorithm for Sorting by Translocations

3

equivalent to −aj, · · · , −ai+1, −ai ; and in the case of unsigned genomes, a chromosome bi, bi+1, · · · , bj is equivalent to bj, · · · , bi+1, bi .

Signed and Unsigned Translocations

For two signed chromosomes S =

[x1, x2, · · · , xn] and T = [y1, y2, · · · , ym] in a genome, a translocation swaps the seg-

ments in the chromosomes and generates two new chromosomes. If we cut the adja-

cency (xi, xi+1) (1 < i < n) in S and (yj, yj+1) (1 < j < m) in T . There are two

cases of two new resulting chromosomes (See Figure 1),

Prefix-prefix translocation
X1 X2

X1 Y1

Y2

X2

Y1 Y2
Prefix-suffix translocation

X1 −Y2

−Y1 X2

Fig. 1. Examples of translocation.

– preﬁx-preﬁx translocation: S = [x1, · · · , xi, yj+1, · · · , ym], and T = [y1, · · · , yj, xi+1, · · · , xn].
– preﬁx-sufﬁx translocation: S = [x1, · · · , xi, −yj, · · · , −y1], and T = [−ym, · · · , −yj+1, xi+1, · · · , xn].
Note that each signed chromosome can be viewed in both directions, such as T = [y1, y2, · · · , ym] or T = [−ym, −ym−1, · · · , −y1].
If S = [x1, x2, · · · , xn] and T = [y1, y2, · · · , ym] are two unsigned genomes, then the resulting new chromosomes in each case are shown as follows,
– preﬁx-preﬁx translocation: S = [x1, · · · , xi, yj+1, · · · , ym], and T = [y1, · · · , yj, xi+1, · · · , xn].
– preﬁx-sufﬁx translocation: S = [x1, · · · , xi, yj, · · · , y1], and T = [ym, · · · , yj+1, xi+1, · · · , xn].
Again, an unsigned chromosome T can also be treated as T = [y1, y2, · · · , ym] or T = [ym, ym−1, · · · , y1]. It can be seen that to transform a genome X into Y with unsigned translocations alone, the set of genes, the number of chromosomes and the set of ending genes in the chromosomes in X and Y must all be the same. This can be checked easily, so we just assume that the input genomes satisfy these conditions. Now, we formally put forward the problem we investigate in this paper.
Problem Description: Sorting Unsigned Genomes by Translocations. Input: Two multi-chromosome genomes X and Y , where Y is perfect. Question: Is there a sequence of unsigned translocations ρ1, ρ2, . . ., ρt to transform X into Y , and t is minimized? The minimum t is called the unsigned translocation distance between X and Y .

4 Jiang, et al.
Recall that if the input genomes are signed and the operation is signed translocations, then the problem becomes sorting signed genomes by translocations.
3 Sorting Signed Genomes
First, let us review the computation method for signed genomes that was originally devised by Hannenhalli [3]. The breakpoint graph plays a critical role in computing the signed translocation distance.
3.1 The breakpoint graph of signed genomes
Given signed genomes A and B, the breakpoint graph Gs(A, B) can be obtained as follows: For every chromosome S = [x1, x2, . . . , xni ] of A, replace each xi with an ordered pair (l(xi), r(xi)) of vertices. If xi is positive, then (l(xi), r(xi)) = (xti, xhi ); and if xi is negative, then (l(xi), r(xi)) = (xhi , xti). If the genes xi and xi+1 are adjacent in A, then we connect r(xi) and l(xi+1) by a black edge in Gs(A, B). If the genes xi and xi+1 are adjacent in B, then we connect r(xi) and l(xi+1) by a gray edge in Gs(A, B). Every vertex (except the ones at the two ends of a chromosome) in Gs(A, B) is incident to one black and one gray edge. Therefore, Gs(A, B) can be uniquely decomposed into cycles, on which the black edges and gray edges appears alternatively. A cycle containing exactly i black (gray) edges is called an i-cycle.
3.2 The signed translocation distance formula
Let S = [x1, x2, . . . , xni ] be a chromosome in A. A sub-permutation, denoted by SP , is a segment [xi, xi+1, . . . , xi+l] of at least three genes in S such that there is another segment [yj, yj+1, . . . , yj+l] of the same length in some chromosome T of B satisfying that
– {|xi|, |xi+1|, . . . , |xi+l|} = {|yj|, |yj+1|, . . . , |yi+l|}; – |xi| = |yj |, |xi+l| = |yj+l|; – [xi, xi+1, . . . , xi+l] = [yj , yj+1, . . . , yj+l].
Here, xi and xi+l are the two ending genes of the SP , (r(xi), l(xi+1)) and (r(xi+l−1), l(xi+l)) are the two boundary black edges of the SP . A minSP is a SP not containing any other SP . If all minSP s in Gs(A, B) are in a SP , say, I, and the total number of minSP s is even, then I is an even isolation.
Let b (resp. c,s) be the number of black edges (resp. cycles, minSP s) in Gs(A, B). Let f be a remaining index, which is deﬁned as follows: 1) f =1 if s is odd, 2) f =2 if there is an even isolation, and 3) f =0 otherwise. Hannenhalli showed the following formula to compute the translocation distance ds(A, B) between A and B [3].
Lemma 1. ds(A, B) = b − c + s + f .
As we only focus on designing an approximation algorithm for unsigned genomes (by converting them to some signed ones), we ignore f throughout the paper. But we certainly need to focus on approximating s.

Approximation Algorithm for Sorting by Translocations

5

3.3 The breakpoint graph of unsigned genomes
The breakpoint graph for two unsigned genomes is a bit different from that of signed genomes. In the breakpoint graph G(X, Y ) of two unsigned genomes X and Y , each vertex corresponds to a gene in X; two genes are connected by a black edge if they appear consecutively in some chromosome of X and two genes are connected by a gray edge if they appear consecutively in some chromosome of Y . So the breakpoint graph G(X, Y ) can be decomposed into a set of edge-disjoint cycles, denoted by D, and on each cycle, the black edge and gray edge appears alternatively. Each ending gene of X and Y is incident to only one black edge and one gray edge; and each of the rest genes is incident to exactly two blacks edge and two gray edges. Thus, the ways to decompose G(X, Y ) into cycles might not be unique.
If we split each non-ending vertex xi in G(X, Y ) into two vertices l(xi),r(xi), make l(xi) incident to one black edge and one gray edge which is incident to xi in G(X, Y ), and make r(xi) incident to the other black edge and gray edge which is incident to xi in G(X, Y ), we obtain a the new graph D, which is called a cycle decomposition of G(X, Y ). In the next subsection, we will show that each cycle decomposition of G(X, Y ) is identical to the breakpoint graph Gs(X¯ , Y¯ ), where X¯ and Y¯ is obtained by assigning a proper sign to each gene in X and Y .
In unsigned genomes, a candidate SP (abbreviated as CSP ), is made of a substring of at least three genes in X such that another substring exists in Y with the same gene content, but with a different gene order. A candidate minSP (abbreviated as CminSP ) is a candidate SP not containing any other candidate SP .

3.4 Converting unsigned genomes into signed ones
Once we have a cycle decomposition D of G(X, Y ), we can obtain two signed genomes X¯ and Y¯ by assigning a sign to each gene in X and Y , so that Gs(X¯ , Y¯ ) = D. (We can view X¯ = A and Y¯ = B in Lemma 1.) As aforementioned, all genes in Y are positive. Therefore, all gray edges in Gs(X¯ , Y¯ ) have the form ((xi)h, (xi + 1)t).
Next, we show how to assign a proper sign to each gene in X (to obtain X¯ ). An ending gene is positive if it lies at the same (i.e., both left or both right) ends of some chromosome in X and some chromosome in Y ; otherwise, it is negative in X. For a non-ending gene xi, according to the two gray edges, ((xi)h, (xi + 1)t) and ((xi − 1)h, (xi)t) in the cycle decomposition, we assign xi positive if ((xi − 1)h, l(xi)) is a gray edge in the given cycle decomposition; if ((xi − 1)h, r(xi)) is a gray edge in the given cycle decomposition, then xi is assigned a negative sign. See Figure 2 for an example.
As the translocation distance between signed genomes can be computed in polynomial time, a natural and efﬁcient method to solve the problem of sorting unsigned genomes by translocations is to assign proper signs to the unsigned genome, or equivalently, to ﬁnd a proper cycle decomposition of the breakpoint graph. The following lemma shows that the inﬂuence by changing the sign of some gene is local.
Lemma 2. Let ∆s and ∆c be the difference of minSP s and cycles by changing the sign of some gene respectively. ∆s, ∆c ∈ {-1,0,1}

6 Jiang, et al.

1 -3 -2 4

1324

5 -7

-8 6

(a)

957869 (b)

Fig. 2. (a) The breakpoint graph Gs(X¯ , Y¯ ) for the signed case, where X¯ ={[1,-3,-2,4], [5,-7,8,6,9]} and Y¯ ={[1,2,3,4], [5,6,7,8,9]}. (b) The breakpoint graph G(X, Y ) for the unsigned
case, where X={[1,3,2,4], [5,7,8,6,9]} and Y ={[1,2,3,4], [5,6,7,8,9]}. (a) is a cycle decompo-
sition of (b).

4 Our Algorithm
To solve the problem of sorting unsigned genomes by translocations, we aim at ﬁnding a proper cycle decomposition of the breakpoint graph. But the maximum cycle decomposition of the breakpoint graph between two unsigned genomes is NP-hard, an intuitive method is to decompose as many cycles as possible. Cui [10] showed that all the possible 1-cycles could be kept in the cycle decomposition by the following lemma.
Lemma 3. There exists some optimal cycle decompositions containing all the existing 1-cycles.

4.1 A new lower bound
To design a better approximation algorithm, we need a lower bound better than this lemma. We achieve this by looking at some special CSP’s which could be included in some optimal solution.
Let I be a CSP and let Is = [xi, xi+1, . . . , xj] be a cycle decomposition of I in Gs(X¯ , Y¯ ), if there exists a cycle C in Is that contains the two black edges (possibly some other black edges), (r(xi), l(xi+1)) and (r(xj−1), l(xj)), then C is called the boundary cycle of Is. Based on the traversal order of the four vertices (r(xi), l(xi+1)), (r(xj−1) and l(xj)) in cycle C, there are two kinds of boundary cycles. If the boundary cycle C has the form [r(xi), l(xi+1), . . . , r(xj−1), l(xj), . . . , r(xi)], C is positive; if C has the form [r(xi), l(xi+1), . . . , l(xj), r(xj−1), . . . , r(xi)], C is negative. If there exists another cycle C containing the two black edges (r(xi−1), l(xi)) and (r(xj), l(xj+1)) such that if we change the signs of xi and xj, C and C become two other cycles C and C , then we say that C is a removable boundary cycle, C is a critical cycle for C, and Is is a removable candidate SP , abbreviated as RCSP . An example on candidate removable CSP is given in Figure 3. We comment that the two

Approximation Algorithm for Sorting by Translocations

7

xi xj (a-1) A SP contains an oriented boundary cycle and a critical cycle
xi xj (a-2) Two new cycles after change the sign of xi and xj
xi xj (b-1) A SP contains an unoriented boundary cycle and a critical cycle
xi xj (b-2) Two new cycles after change the sign of xi and xj
Fig. 3. Candidate removable SP and boundary cycle: (a-1) A RCSP containing a positive boundary cycle. (b-1) A RCSP containing a negative boundary cycle.

8 Jiang, et al.
boundary black edges might be in two different cycles, but we will mostly focus on the boundary cycles in this paper.
A CSP that contains no less than O(log n) genes is called a long CSP , otherwise it is short. A CSP is bad if it is short and there is no other short CSP containing it. Note that by scanning each chromosome from left to right, we could ﬁnd out the (disjoint) bad CSP s one by one.
Let Is be a CSP , we say that a cycle decomposition Ds of the breakpoint graph of Is is feasible if it maximize c-s, where c is the number of cycles in Ds, s is the number of minSP s in Ds. A feasible cycle decomposition Ds is efﬁcient, if Is is a minSP .
The overall idea of our algorithm is as follows. We ﬁrst identify all bad CSPs. For each bad CSP (with length O(log n)), we enumerate all its possible cycle decompositions in polynomial time. Then, depending on the properties of these cycle decompositions (shown in Lemma 5, Lemma 6 and Lemma 7), we pick certain cycle decompositions. After that, we select disjoint 2-cycles and 3-cycles which have not been picked yet (using approximate subroutines for the maximum independent set and maximum set packing). Finally, we process the remaining bad CSPs optimally while at least keeping the number of cycles computed by the independent set and set packing (shown in Lemma 1). Due to space constraint, we omit the proofs of the following lemmas.
Lemma 4. There exists some optimal cycle decomposition in which the two ending genes of a CSP are either both positive or both negative.
Lemma 5. Let I = [xi, xi+1, . . . , xj] be a CSP , if there is no efﬁcient cycle decomposition of the breakpoint graph of I, then any feasible cycle decomposition could appear as a component in some optimal cycle decomposition.
Lemma 6. Let I = [xi, xi+1, . . . , xj] be a CSP , if there is no efﬁcient cycle decomposition of the breakpoint graph of I containing a boundary cycle, then any efﬁcient cycle decomposition could appear as a component in some optimal cycle decomposition.
Lemma 7. Let I = [xi, xi+1, . . . , xj] be a CSP , the boundary cycles in any efﬁcient cycle decomposition are of the same type, then for any efﬁcient cycle decomposition with a boundary cycle, all the cycles except the boundary cycle could appear in some optimal cycle decomposition.
Based on Lemma 7, we immediately have the following corollary.
Corollary 1. Let I=[xi, xi+1, . . ., xj] be a CSP , whose breakpoint graph has efﬁcient cycle decompositions and the boundary cycles in these efﬁcient cycle decompositions are of two types. Then there exists at least one type of boundary cycle such that for any efﬁcient cycle decomposition with a boundary cycle of this type, all the cycles except the boundary cycle could appear in some optimal cycle decomposition.
The difﬁculty here to handle the case in Corollary 1 is that if the boundary cycles in these efﬁcient cycle decompositions are of two types, we do not know which type we should use. We will carefully deal with this case when designing the algorithm. The rough idea is to decide the signs of some 2- and 3-cycle which contains xi or xj, using approximate solution for Maximum Independent Set (for graphs of degree at most 4) or Maximum Set Packing (for sets of size at most 3). Then we can decide the type of the boundary cycle, as the cycle decomposition is known from the outside of this cycle.

Approximation Algorithm for Sorting by Translocations

9

4.2 The algorithm
Now, we are ready to describe our approximation algorithm. Here we give an approximate cycle decomposition and then use the exact algorithm for the signed case to obtain the solution. The basic idea of our cycle decomposition algorithm is as follows: (I) We identify all the bad CSPs, and ﬁx the signs of each gene in each bad CSP by a feasible cycle decomposition. Since the size of a bad CSP is at most O(log n), we can obtain all the feasible cycle decompositions in polynomial time. Note that these bad CSPs are disjoint. (II) We try to obtain a large number of 2-cycles for the genes outside of the bad CSPs (possibly including the ending genes of bad CSPs) using an approximate algorithm for Maximum Independent Set (for graphs with degree at most 4). (III) We try to obtain a large number of 2-cycles and 3-cycles for the genes outside of the bad CSPs (possibly including the ending genes of bad CSPs) using an approximate algorithm for the Maximum Set Packing (for sets of size at most 3). (IV) We choose the cycle decomposition with a bigger number of cycles obtained at step (II) and (III). (V) Arbitrarily ﬁx the sign for the rest of genes to get a signed version of the problem and use the exact algorithm for the signed version to get a solution. Let us look at the details. Identifying all bad CSPs: From Lemma 3, we know that each chromosome is split into segments by the 1-cycles. So we deal with each segment respectively. Firstly, it is easy to see that by scanning each segment from left to right, we can identify all CSPs. Some CSPs may (completely) overlap, i.e., some CSP is entirely contained in another CSP. A CSP containing no more than O(log n) elements (i.e., is short) and not contained in any other short CSP is a bad CSP. Secondly, by scanning a CSP with no more than O(log n) elements from the left to right, we identify the longest CSP with no more than O(log n) elements (if any) which is a bad CSP, and then identify other bad CSPs from the right end of the newly found bad CSP. This can be done as follows: Start from the leftmost gene t1 of a segment T , identify tq such that q = O(log n). Then set i ← 1, j ← q and check whether T [i..j] is a CSP by sorting all the elements in T [i..j], and if there is no gap between two neighbors in the sorted list, then T [i..j] is a CSP. If the test is negative, then decrease j by one and repeat the process. When T [i..j] is found to be a bad CSP, then set i ← j + 1, j ← i + q − 1 and repeat the process. If no T [i..j] is found to be a bad CSP, then set i ← 2, j ← q + 1 and repeat. So, the above procedure to consecutively identify the bad CSPs can be completed in n × log n × O(log n log log n) = O(n log2 n log log n) time. Fix the sign of genes in a bad CSP I: For each bad CSP, we can enumerate all possible cycle decompositions in O(2log n) time. We have to consider the following cases:
Case 1: No efﬁcient cycle decomposition of I can be found. We arbitrarily select any feasible cycle decomposition (by Lemma 5).
Case 2: No efﬁcient cycle decomposition exists and no efﬁcient cycle decomposition containing a boundary cycle of I can be found. We can arbitrarily select any efﬁcient cycle decomposition (by Lemma 6).
Case 3: The boundary cycles in all efﬁcient cycle decompositions of I are of the same type. We arbitrarily select any efﬁcient cycle decomposition with a boundary cycle and keep all the cycles except the boundary cycle (by Lemma 7).
Case 4: There are two types of boundary cycles in efﬁcient cycle decompositions. According to Corollary 1, we can use one type of efﬁcient cycle decomposition. How-

10 Jiang, et al.

ever, at present we do not know which type to choose. Thus, we will decide which type of boundary cycle we have to use after steps (II), (III) and (IV).
Finding a large number of 2-cycles: In order to get a large number of 2-cycles, we construct a 2-cycle graph G as follows: For each possible 2-cycle satisﬁes: (a) it is not a boundary cycle from a bad CSP , and (b) it is not contained entirely in any bad CSP , we create a vertex (corresponding to such a 2-cycle) in G . There is an edge between two vertices if and only if their corresponding 2-cycles share edges. It should be emphasized that for a bad CSP I (including Case 4), we do not consider any 2-cycle entirely contained in I when constructing G .

Lemma 8.

There exists an approximation algorithm with ratio

5 7

− ε for any ε > 0 for

the maximum independent set problem on a graph with maximum degree 4.

Proof. Refer to reference [15].

It is known that the constructed graph G has degree at most 6, but can be converted

to a graph of degree at most 4 while searching for the independent set [14]. Thus, we

can

use

the

ratio

5 7

−

ε

approximate

algorithm

here.

Finding a large number of 2-cycles and 3-cycles: Another strategy is to get a large

number of 2-cycles and 3-cycles together. Based on the two input genomes, we con-

struct an instance of the maximum set packing problem. Here each set contains the

edges from a possible 2-cycle or a possible 3-cycle which again satisﬁes (a) and (b).

Lemma 9.

There is a ratio

3 7

−ε

approximate

algorithm

for

any

ε

>

0

for

the

maximum

set packing problem with set size at most 3.

Proof. Refer to reference [16].

Algorithm Cycle-Decomposition(G(X, Y )) Input: G(X, Y ) Output: G(X¯ , Y¯ ), which is a cycle decomposition of G(X, Y ). 1 Keep all the 1-cycles and assign each gene involved in them a proper sign. 2 Identify all the bad CSP s in G(X, Y ). 3 For each bad CSP : I, 3.1 Enumerate all possible cycle decompositions of the breakpoint graph of I. 3.2 For a bad CSP I of Cases 1-3, ﬁx the signs of genes (except possibly the ending
genes) in I using Lemmas 5-7. 4 Construct the 2-cycle graph G and compute an approximate independent set I1 of G
as the selected 2-cycles. 5 Construct all the sets for 2- and 3-cycles and compute an approximate set packing S1. 6 Choose the greater one of I1 and S1. Assign signs to each gene in the selected
2-cycles or 2,3-cycles. 7 For each bad CSP of Case 4, choose the type of the boundary cycle according to S
(if possible). 8 For each of the remaining bad CSP , arbitrarily choose an efﬁcient cycle
decomposition for it. 9 Arbitrarily assign signs to the rest of genes so that every gene has a sign.

Approximation Algorithm for Sorting by Translocations

11

5 7

We can use the ratio − ε solution S1 for G

3 7

−

and

ε approximate algorithm

the

ratio

3 7

−

ε

solution

here. After we obtain S2 for the constructed

the ratio instance

of the maximum set packing problem, we choose the solution S which is one of S1

and S2 with bigger number of cycles. We refer S∗ as the approximate partial cycle

decomposition. Now the sign of some of the ending genes for bad CSPs of Case 4 might

be determined by S and we can determine the type of boundary cycles accordingly and

select all the cycles in the CSPs based on Corollary 2. Finally, for the genes that have

not been assigned signs, we can arbitrarily ﬁx the sign and thus obtain an instance of

the signed translocation problem. The complete algorithm is given separately.

5 Proof of the Approximation Ratio
To analyze the performance of our algorithm, we need to compare our algorithm to some optimal cycle decomposition. So we assume that the optimal cycle decomposition S∗ fulﬁls Lemma 4, 5, 6, 7, and Corollary 1, i.e., in the optimal cycle decomposition, we have
1. The ending genes of any CSP are either both negative or both positive; 2. If the ending genes of a CSP are both positive, then the cycle decomposition for
this CSP is either efﬁcient or feasible; 3. If the ending genes of a CSP are both negative, then by changing them to positive,
the CSP becomes a minSP .
Lemma 10. Let c2 and c3 be the number of 2-cycles and 3-cycles in S2 obtained by our algorithm, c∗2 and c∗3 be the number of 2-cycles and 3-cycles in the optimal cycle decomposition, c∗a be the number of boundary 2-cycles and 3-cycles in the optimal cycle decomposition, then we have c2 + c3 ≥ (3/7 − ε)(c∗2 + c∗3 − c∗a).
Proof. Let c¯2 and c¯3 be the number of 2-cycles and 3-cycles entirely contained in the bad CSP s, from Lemma 7 and Corollary 1, we know that, for any bad CSP , all cycles except the boundary cycle in our cycle decomposition also appears in the optimal cycle decomposition. Let c˜2 and c˜3 be the number of 2-cycles and 3-cycles not entirely contained in any bad CSP , which are ﬁgured out at Step 5. So c2=c¯2+c˜2 and c3=c¯3+c˜3. Let c˜∗2 and c˜∗3 be the number of 2-cycles and 3-cycles not entirely contained in any bad CSP in the optimal cycle decomposition. So c∗2=c¯∗2+c˜∗2 and c∗3=c¯∗3+c˜∗3. Since we do not consider any boundary cycle at Step 5, from Lemma 9, we have c˜2 + c˜3 ≥ (3/7 − ε)(c˜∗2 + c˜∗3 − c∗a). By adding c¯2 and c¯3 to both side, we have c2 + c3 ≥ (3/7 − ε)(c∗2 + c∗3 − c∗a).
Corollary 2. Let c2 be the number of 2-cycles returned by our algorithm, c∗2 be the number of 2-cycles in the optimal cycle decomposition, c∗b be the number of boundary 2-cycles in the optimal cycle decomposition, then we have c2 ≥ (5/7 − ε)(c∗2 − c∗b ).
Lemma 11. If the algorithm Cycle-Decomposition(•) converts a long CSP into a SP , then either it also appears in some optimal cycle decomposition or it contains at least one cycle of length at least 4 or O(log n) number of 2,3-cycles.

12 Jiang, et al.
Proof. Since the CSP is long, i.e., it contains at least O(log n) genes, then either it contains a cycle of length at least 4 or it contains O(log n) number of 2,3-cycles.
Lemma 12. If the algorithm Cycle-Decomposition(•) converts a bad CSP into a SP , either this SP also appears in some optimal cycle decomposition or the boundary cycle is not a selected cycle.
Proof. If the CSP does not appear in any optimal cycle decomposition, it is either the third case shown in Lemma 7 or the case shown Corollary 1, from Step 4 and 5, in either case, the boundary cycle is not a selected cycle.
Lemma 13. Let s be the number of minSP s by the algorithm Cycle-Decomposition(•), s∗ be the number of minSP s in some optimal cycle decomposition, ci be the number of i-cycles computed by the algorithm Cycle-Decomposition(•), ca be the number of boundary 2,3-cycles returned by Step 8. We have s ≤ s∗ + i≥4 ci + (c2 + c3)/O(log n) + ca.
Proof. We use an amortized analysis. For each minSP by the algorithm Cycle-Decomposition(•), there are three cases.
1. It is also a minSP of some optimal cycle decomposition, then we are done. 2. It is long, from Lemma 11, there are O(log n) selected 2,3-cycles or at least one
i-cycle (i ≥ 4) in it. 3. It is bad, from Lemma 12, the boundary cycle is not a selected cycle but a cycle
counted in ca,
Corollary 3. Let s be the number of minSP s by the algorithm Cycle-Decomposition(•), s∗ be the number of minSP s in some optimal cycle decomposition, ci be the number of i-cycles by the algorithm Cycle-Decomposition(•), cb be the number of boundary 2-cycles returned by Step 8. We have s ≤ s∗ + i≥3 ci + (c2)/O(log n) + cb.
Theorem 1. The algorithm Cycle-Decomposition(•) approximates the translocation distance within a ratio α = 1.408 + ε.
Proof. Omitted due to space constraint.
6 Concluding Remarks
Sorting unsigned genomes by translocations is a famous NP-hard problem in genome arrangements. It is a great challenge to obtain smaller approximation ratio. In this paper, we improve the approximation ratio from 1.5 + ε to 1.408 + ε, based on a new lower bound and some cycle decomposition methods. What is more, the description of our algorithm and the analysis is much simpler than what is in [10]. Devising algorithms with smaller approximation ratio is a valuable future work.

Approximation Algorithm for Sorting by Translocations

13

Acknowledgments
This research is supported by NSF of China under grant 60928006, 61070019 and 61202014, by Doctoral Fund of Chinese Ministry of Education under grant 20090131110009, and by China Postdoctoral Science Foundation funded project under grant 2011M501133 and 2012T50614. LW is supported by a grant from the Research Grants Council of the Hong Kong SAR, China (CityU 123013).

References

1. D. Sankoff, G. Leduc, N. Antoine, B. Paquin, B. F. Lang and R. Cedergren: Gene order

comparisons for phylogenetic inference: Evolution of the mitochondrial genome. Proc. Nat.

Acad. Sci. USA, 89: 6575–6579, 1992.

2. J. Kececioglu and R. Ravi: Of Mice and Men: Algorithms for Evolutionary Distances be-

tween Genomes with Translocation. Proceedings of the 6th Annual ACM-SIAM Symposium

on Discrete Algorithms (SODA’95), pp. 604–613, 1995.

3. S. Hannenhalli: Polynomial-time Algorithm for Computing Translocation Distance Between

Genomes. Discrete Applied Mathematics, 71(1-3): 137–151, 1996. 4. L. Wang, D. Zhu, X. Liu and S. Ma: An O(n2) algorithm for signed translocation. J. Comput.

Syst. Sci., 70(3): 284–299, 2005.

3√

5. M. Ozery-Flato and R. Shamir: An O(n 2 logn) algorithm for sorting by reciprocal translo-

cations. J. Discrete Algorithms, 9(4): 344–357, 2011.

6. G. Li, X. Qin, X. Wang and B. Zhu: A linear-time algorithm for computing translocation dis-

tance between signed genomes. Proceedings of the 15th Annual Symposium on Combinatorial

Pattern Matching (CPM’04), pp. 323–332, 2004.

7. A. Bergeron, J. Mixtacki and J. Stoye: On Sorting by Translocations. Journal of Computa-

tional Biology, 13(2): 567–578, 2006.

8. D. Zhu and L. Wang: On the complexity of unsigned translocation distance. Theor. Comput.

Sci., 352(1-3): 322–328, 2006.

9. Y. Cui, L. Wang and D. Zhu: A 1.75-approximation algorithm for unsigned translocation

distance. J. Comput. Syst. Sci., 73(7): 1045–1059, 2007.

10. Y. Cui, L. Wang, D. Zhu and X. Liu: A (1.5 + )-Approximation Algorithm for Unsigned

Translocation Distance. IEEE/ACM Trans. Comput. Biology Bioinform., 5(1): 56–66, 2008.

11. A. Caprara: Sorting Permutations by Reversals and Eulerian Cycle Decompositions. SIAM

J. Discrete Math., 12: 91–110, 1999.

12. P. Berman, S. Hannenhalli and M. Karpinski: 1.375-Approximation Algorithm for Sorting

by Reversals. Proceedings of the 10th Annual European Symposium on Algorithms (ESA’02),

pp. 200–210, 2002.

13. H. Jiang, B. Zhu and D. Zhu: Algorithms for sorting unsigned linear genomes by the DCJ

operations. Bioinformatics, 27(3): 311-316, 2011.

14. A. Caprara and R. Rizzi: Improved Approximation for Breakpoint Graph Decomposition

and Sorting by Reversals. J. Comb. Optim., 6(2):157-182, 2002.

15. P. Berman and M. Fu¨rer: Approximating maximum independent set in bounded degree

graphs. Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms

(SODA’94), pp. 365-371, 1994.

16. M. M. Halldo´rsson: Approximating discrete collections via local improvements. Proceed-

ings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA’95), pp. 160-

169, 1995.

17. X. Chen, R. Sun and J. Yu: Approximating the double-cut-and-join distance between un-

signed genomes. BMC Bioinformatics, 12(Suppl 9):S17, 2011.

