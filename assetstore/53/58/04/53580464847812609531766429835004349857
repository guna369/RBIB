A completeness result for a realisability semantics for an
intersection type system
Fairouz Kamareddine, Karim Nour
To cite this version:
Fairouz Kamareddine, Karim Nour. A completeness result for a realisability semantics for
an intersection type system. Annals of Pure and Applied Logic, Elsevier Masson, 2007, 146,
pp.180-198. <hal-00380177>
HAL Id: hal-00380177
https://hal.archives-ouvertes.fr/hal-00380177
Submitted on 4 May 2009
HAL is a multi-disciplinary open access
archive for the deposit and dissemination of sci-
entific research documents, whether they are pub-
lished or not. The documents may come from
teaching and research institutions in France or
abroad, or from public or private research centers.
L’archive ouverte pluridisciplinaire HAL, est
destine´e au de´poˆt et a` la diffusion de documents
scientifiques de niveau recherche, publie´s ou non,
e´manant des e´tablissements d’enseignement et de
recherche franc¸ais ou e´trangers, des laboratoires
publics ou prive´s.
A completeness result for a realisability semantics
for an intersection type system
Fairouz Kamareddine∗ and Karim Nour†
May 4, 2009
Abstract
In this paper we consider a type system with a universal type ω where
any term (whether open or closed, β-normalising or not) has type ω. We
provide this type system with a realisability semantics where an atomic type is
interpreted as the set of λ-terms saturated by a certain relation. The variation
of the saturation relation gives a number of interpretations to each type. We
show the soundness and completeness of our semantics and that for different
notions of saturation (based on weak head reduction and normal β-reduction)
we obtain the same interpretation for types. Since the presence of ω prevents
typability and realisability from coinciding and creates extra difficulties in
characterizing the interpretation of a type, we define a class U+ of the so-called
positive types (where ω can only occur at specific positions). We show that if
a term inhabits a positive type, then this term is β-normalisable and reduces
to a closed term. In other words, positive types can be used to represent
abstract data types. The completeness theorem for U+ becomes interesting
indeed since it establishes a perfect equivalence between typable terms and
terms that inhabit a type. In other words, typability and realisability coincide
on U+. We give a number of examples to explain the intuition behind the
definition of U+ and to show that this class cannot be extended while keeping
its desired properties.
1 Introduction
The ground work for intersection types and related notions was developed in the
seventies [5, 6, 18] and have since proved to be a valuable tool in the theoretical
studies and applications of the lambda calculus. Intersection types incorporate
type polymorphism in a finitary way (where the usage of types is listed rather than
quantified over). Since the late seventies, numerous intersection type systems have
been developed or used for a multitude of purposes (the list is huge; for a very brief
list we simply refer the reader to the recent articles [1, 4] and the references there,
for a longer list we refer the reader to the bibliography of intersection types and
related systems available (while that URL address is active) at http://www.macs.
hw.ac.uk/∼jbw/itrs/bibliography.html). In this paper, we are interested in the
interpretation of an intersection type. We study this interpretation in the context
of the so-called realisability semantics.
The idea of realisability semantics is to associate to each type a set of terms which
realise this type. Under this semantics, an atomic type is interpreted as the set of
∗School of Mathematical and Computer Sciences, Heriot-Watt Univ., Riccarton, Edinburgh
EH14 4AS, Scotland, fairouz@macs.hw.ac.uk
†Universite´ de Savoie, Campus Scientifique, 73378 Le Bourget du Lac, France, nour@univ-
savoie.fr
1
λ-terms saturated by a certain relation. Then, arrow and intersection types receive
their intuitive interpretation of functional space and set intersection. For example,
a term which realises the type N → N is a function from N to N. Realisability
semantics has been a powerful method for establishing the strong normalisation of
type systems a` la Tait and Girard. The realisability of a type system enables one
to also show the soundness of the system in the sense that the interpretation of a
type contains all the terms that have this type. Soundness has been an important
method for characterising the algorithmic behaviour of typed terms through their
types as has been illuminative in the work of Krivine.
It is also interesting to find the class of types for which the converse of soundness
holds. I.e., to find the types A for which the realisability interpretation contains
exactly (in a certain sense) the terms typable by A. This property is called com-
pleteness and has not yet been studied for every type system.
In addition to the questions of soundness and completeness for a realisability
semantics, one is interested in the additional three questions:
1. Can different interpretations of a type given by different saturation relations
be compared?
2. For a particular saturation relation, what are the types uniquely realised by
the λ-terms which are typable by these types?
3. Is there a class of types for which typability and realisability coincide?
In this paper we establish the soundness and completeness as well as give answers to
questions 1, 2 and 3 for a strict non linear intersection type system with a universal
type. We show that for different notions of saturation (based on weak head reduction
and normal β-reduction) we obtain the same interpretation for types answering
question 1 partially. Questions 2 and 3 are affected by the presence of ω which
prevents typability and realisability from coinciding and creates extra difficulties in
characterizing the interpretation of a type. We define a class U+ of the so-called
positive types (where ω can only occur at specific positions). We show that if a
term inhabits a positive type, then this term is β-normalisable and reduces to a
closed term. In other words, positive types can be used to represent abstract data
types. This result answers question 2 and depends on the full power of soundness.
The completeness theorem for U+ becomes interesting indeed since it establishes a
perfect equivalence between typable terms and terms that inhabit a type. In other
words, typability and realisability coincide on U+ answering question 3. We give
a number of examples to explain the intuition behind the definition of U+ and to
show that this class cannot be extended while keeping its desired properties.
Hindley [12, 13, 14] was the first to study the completeness of a simple type sys-
tem and he showed that all the types of that system have the completeness property.
Then, he generalised his completeness proof for an intersection type system [11].
Using his completeness theorem for the realisability semantics based on the sets
of λ-terms saturated by βη-equivalence, Hindley has shown that simple types have
property 2 above. However, his completeness theorem for intersection types does
not allow him to establish property 2 for the intersection type system. Moreover,
Hindley’s completeness theorems were established with the sets of λ-terms saturated
by βη-equivalence, and hence they don’t permit a comparison between the differ-
ent possible interpretations. In our method, saturation is not by βη-equivalence.
Rather, it is by the weaker requirement of weak head normal forms. Hence, all of
Hindley’s saturated models are also saturated in our framework and moreover, there
are saturated models based on weak head normal form which cannot be models in
Hindley’s framework.
[16] has established completeness for a class of types in Girard’s system F (also
independently discovered by Reynolds as the second order typed λ-calculus) known
2
as the strictly positive types. [9, 10] generalised the result of [16] for the larger class
which includes all the positive types and also for second order functional arithmetic.
[7] established recently by a different method using Kripke models, the completeness
for the simply typed λ-calculus. Finally [17] introduced a realizability semantics for
the simply typed λµ-calculus and proved a completeness result.
The paper is structured as follows: In section 2, we introduce the intersection
type system that will be studied in this paper. In section 3 we study both the
subject reduction and subject expansion properties for β. In section 4 we establish
the soundness and completeness of the realisability semantics based on two notions
of saturated sets (one using weak head reduction and the other using β-reduction).
In section 5 we show that the meaning of a type does not depend on the chosen
notion of saturation (based on either weak head reduction or β-reduction). We also
define a subset of types which we show to satisfy the (weak) normalisation property
and for which typability and realisability coincide.
2 The typing system
A number of intersection type systems have been given in the literature (for a very
brief list see [1, 4] and the references there; for a longer list (and while that URL ad-
dress is active) see http://www.macs.hw.ac.uk/∼jbw/itrs/bibliography.html).
In this paper we introduce an interesection type system due to J.B. Wells and in-
spired by his work with Se´bastien Carlier on expansion [4]. We follow [4] and write
the type judgements Γ ⊢ M : U as M : 〈Γ ⊢ U〉. There are many reasons why this
latter notation is to be prefered over the former (see [4]). In particular, this typing
notation allowed J.B. Wells in [20] to give a very simple yet general definition of
principal typings.
Before presenting the type system, we give a number of its characteristics:
• The type system is relevant: this means that the type environments contain
all and only the necessary assumptions as is shown in lemma 7.1.
• The type system is strict and non-linear. Following the terminology of [19]
(who advocated the use of of linear systems of intersection types only with
strict intersection types), types are strict if ω and ⊓ do not occur immediately
to the right of arrows. Our type system is non-linear since ⊓ is idempotant.
We guarantee strictness by using two sets of types T and U such that T ⊂ U
and T is only formed by either basic types or using the arrow constructor
(without permitting ω and ⊓ to occur immediately to the right of arrows).
This means that one does not need to state laws relating A → (B1 ⊓ B2) to
(A→ B1) ⊓ (A→ B2), yet one can still establish a number of type inclusion
properties as is shown in lemma 5.
Definition 1 1. Let V be a denumerably infinite set of variables. The set of
terms M, of the λ-calculus is defined as usual by the following grammar:
M ::= V | (λV .M) | (MM)
We let x, y, z, etc. range over V and M,N,P,Q,M1,M2, . . . range over M.
We assume the the usual definition of subterms and the usual convention for
parenthesis and omit these when no confusion arises. In particular, we write
M N1...Nn instead of (...(M N1) N2...Nn−1) Nn.
We take terms modulo α-conversion and use the Barendregt convention (BC)
where the names of bound variables differ from the free ones. When two terms
M and N are equal (modulo α), we write M = N . We write FV (M) for the
set of the free variables of term M .
3
2. We define as usual the substitution M [x := N ] of the term N for all free oc-
currences of x in the term M and similarly, M [(xi := Ni)
n
1 ], the simultaneous
substitution of Ni for all free occurrences of xi in M for 1 ≤ i ≤ n.
3. We assume the usual definition of compatibility.
• The weak head reduction ⊲f on M is defined by: M ⊲f N if M =
(λx.P )Q Q1...Qn and N = P [x := Q] Q1...Qn where n ≥ 0.
• The reduction relation ⊲β onM is defined as the least compatible relation
closed under the rule: (λx.M)N ⊲β M [x := N ].
• For r ∈ {f, β}, ⊲∗r denotes the reflexive transitive closure of ⊲r.
• ≃β denotes the equivalence relation induced by ⊲∗β.
The next theorem is standard and is needed for the rest of the paper.
Theorem 2 1. Let r ∈ {f, β}. If M ⊲∗r N , then FV (N) ⊆ FV (M).
2. If M ⊲∗f N , then, for all P ∈ M, MP ⊲
∗
f NP .
3. IfM⊲∗βM1 andM⊲
∗
βM2, then there is M
′ such that M1⊲
∗
βM
′ andM2⊲
∗
βM
′.
4. M1 ≃β M2 iff there is a term M such that M1 ⊲∗β M and M2 ⊲
∗
β M .
5. Let n ≥ 1 and assume xi 6∈ FV (M) for every 1 ≤ i ≤ n. If Mx1...xn ⊲∗β
xj N1...Nm for some 1 ≤ j ≤ n and m ≥ 0, then for some k ≥ j and s ≤ m,
M ⊲∗β λx1....λxk.xj M1...Ms where s + n = k + m, Mi ≃β Ni for every
1 ≤ i ≤ s and Ns+i ≃β xk+i for every 1 ≤ i ≤ n− k.
6. If M x is weakly β-normalising and x 6∈ FV (M), then M is also weakly β-
normalising.
Proof See [3] for more detail. Here, we sketch the proofs. 1 (resp. 2) is by
induction on M ⊲∗r N (resp. M ⊲
∗
f N). 3 is the Church-Rosser. 4 if) is by definition
of ≃β whereas only if) is by induction on M1 ≃β M2 using 3.
5. is as follows: Since Mx1...xn⊲
∗
β xjN1...Nm, then by page 23 of [15], Mx1...xn
is solvable and hence, M is also solvable and its head reduction terminates.
Therefore, M ⊲∗β λx1...λxk.zM1...Ms for s, k ≥ 0. Since xj N1...Nm ≃β
(λxk.zM1...Ms)x1...xn then k ≤ n, xj N1...Nm ≃β zM1...Msxk+1...xn. Hence,
z = xj , s ≤ m, j ≤ k (since xj 6∈ FV (M)), m = s+(n−(k+1))+1 = s+n−k,
Mi ≃β Ni for every 1 ≤ i ≤ s and Ns+i ≃β xk+i for every 1 ≤ i ≤ n− k.
6. is by cases:
– If M x ⊲∗β M
′ x where M ′ x is in β-normal form and M ⊲∗β M
′ then M ′
is in β-normal form and M is β-normalising.
– If M x⊲∗β (λy.N)x⊲β N [y := x]⊲
∗
β P where P is in β-normal form and
M ⊲∗β λy.N then by 1, x 6∈ FV (N) and so, M ⊲
∗
β λy.N = λx.N [y :=
x]⊲∗β λx.P . Since λx.P is in β-normal form, M is β-normalising.

4
Definition 3 1. Let A be a denumerably infinite set of atomic types. The types
are defined by the following grammars:
T ::= A | U → T
U ::= ω | U ⊓U | T
We let a, b, c, a1, a2, . . . range over A, T, T1, T2, T ′, . . . range over T and U , V ,
W , U1, V1, U
′, . . . range over U.
We quotient types by taking ⊓ to be commutative (i.e. U1 ⊓ U2 = U2 ⊓ U1),
associative (i.e. U1⊓(U2⊓U3) = (U1⊓U2)⊓U3), idempotent (i.e. U ⊓U = U)
and to have ω as neutral (i.e. ω ⊓ U = U).
We denote Un ⊓ Un+1 . . . ⊓ Um by ⊓mi=nUi (when n ≤ m).
2. A type environment is a set {xi : Ui / 1 ≤ i ≤ n, n ≥ 0, and ∀1 ≤ i ≤
n, xi ∈ V , Ui ∈ U and ∀1 ≤ i, j ≤ n, if i 6= j then xi 6= xj}. We denote
such environment (call it Γ) by x1 : U1, . . . , xn : Un or simply by (xi : Ui)n
and define dom(Γ) = {xi / 1 ≤ i ≤ n}. We use Γ,∆,Γ1, . . . to range over
environments and write () for the empty environment.
If M is a term and FV (M) = {x1, ..., xn}, we denote env
M
ω = (xi : ω)n.
If Γ = (xi : Ui)n, x 6∈ dom(Γ) and U ∈ U, we denote Γ, x : U the type
environment x1 : U1, . . . , xn : Un, x : U .
Let Γ1 = (xi : Ui)n, (yj : Vj)m and Γ2 = (xi : U
′
i)n, (zk : Wk)l. We denote
Γ1 ⊓ Γ2 the type environment (xi : Ui ⊓U ′i)n, (yj : Vj)m, (zk : Wk)l. Note that
dom(Γ1 ⊓ Γ2) = dom(Γ1) ∪ dom(Γ2) and that ⊓ is commutative, associative
and idempotent on environments.
3. The typing rules are the following:
x : 〈x : T ⊢ T 〉
ax
M : 〈envMω ⊢ ω〉
ω
M : 〈Γ, x : U ⊢ T 〉
λx.M : 〈Γ ⊢ U → T 〉
→i
M : 〈Γ ⊢ T 〉 x 6∈ dom(Γ)
λx.M : 〈Γ ⊢ ω → T 〉
→′i
M1 : 〈Γ1 ⊢ U → T 〉 M2 : 〈Γ2 ⊢ U〉
M1 M2 : 〈Γ1 ⊓ Γ2 ⊢ T 〉
→e
M : 〈Γ ⊢ U1〉 M : 〈Γ ⊢ U2〉
M : 〈Γ ⊢ U1 ⊓ U2〉
⊓i
M : 〈Γ ⊢ U〉 〈Γ ⊢ U〉 ⊑ 〈Γ′ ⊢ U ′〉
M : 〈Γ′ ⊢ U ′〉
⊑
In the last clause, the binary relation ⊑ is defined by the following rules:
Φ ⊑ Φ
ref
5
Φ1 ⊑ Φ2 Φ2 ⊑ Φ3
Φ1 ⊑ Φ3
tr
U1 ⊓ U2 ⊑ U1
⊓e
U1 ⊑ V1 U2 ⊑ V2
U1 ⊓ U2 ⊑ V1 ⊓ V2
⊓
U2 ⊑ U1 T1 ⊑ T2
U1 → T1 ⊑ U2 → T2
→
U1 ⊑ U2 x 6∈ dom(Γ)
Γ, x : U1 ⊑ Γ, x : U2
⊑c
U1 ⊑ U2 Γ2 ⊑ Γ1
〈Γ1 ⊢ U1〉 ⊑ 〈Γ2 ⊢ U2〉
⊑〈〉
Throughout, we use Φ,Φ′,Φ1, . . . to denote U ∈ U, or environments Γ or
typings 〈Γ ⊢ U〉. Note that when Φ ⊑ Φ′, then Φ and Φ′ belong to the same
set (either U or environments or typings).
The next lemma gives the shape of a type in U.
Lemma 4 1. If U ∈ U, then U = ω or U = ⊓ni=1Ti where n ≥ 1 and ∀ 1 ≤ i ≤
n, Ti ∈ T.
2. U ⊑ ω.
3. If ω ⊑ U , then U = ω.
Proof
1. By induction on U ∈ U.
2. By rule ⊓e, U = ω ⊓ U ⊑ ω.
3. By induction on the derivation ω ⊑ U .

The next lemma studies the relation ⊑ on U.
Lemma 5 Let V 6= ω.
1. If U ⊑ V , then U = ⊓kj=1Tj, V = ⊓
p
i=1T
′
i where p, k ≥ 1, ∀1 ≤ j ≤ k,
1 ≤ i ≤ p, Tj, T ′i ∈ T, and ∀ 1 ≤ i ≤ p, ∃1 ≤ j ≤ k such that Tj ⊑ T
′
i .
2. If U ⊑ V ′ ⊓ a, then U = U ′ ⊓ a and U ′ ⊑ V ′.
3. Let p, k ≥ 1. If ⊓kj=1(Uj → Tj) ⊑ ⊓
p
i=1(U
′
i → T
′
i ), then ∀1 ≤ i ≤ p, ∃1 ≤ j ≤ k
such that U ′i ⊑ Uj and Tj ⊑ T
′
i .
4. If U → T ⊑ V , then V = ⊓pi=1(Ui → Ti) where p ≥ 1 and ∀1 ≤ i ≤ p, Ui ⊑ U
and T ⊑ Ti.
5. If ⊓kj=1(Uj → Tj) ⊑ V where k ≥ 1, then V = ⊓
p
i=1(U
′
i → T
′
i ) where p ≥ 1
and ∀1 ≤ i ≤ p, ∃1 ≤ j ≤ k U ′i ⊑ Uj and Tj ⊑ T
′
i .
Proof
6
1. By induction on the derivation U ⊑ V using lemma 4.1.
2. By induction on U ⊑ V ′ ⊓ a.
3. By induction on ⊓kj=1(Uj → Tj) ⊑ ⊓
p
i=1(U
′
i → T
′
i ). We only do the tr case.
If
⊓kj=1(Uj → Tj) ⊑ V V ⊑ ⊓
p
i=1(U
′
i → T
′
i )
⊓kj=1(Uj → Tj) ⊑ ⊓
p
i=1(U
′
i → T
′
i )
, then, by 1, V = ⊓ql=1T
′′
l where
q ≥ 1 and ∀1 ≤ l ≤ q, ∃1 ≤ j ≤ k, such that Uj → Tj ⊑ T ′′l . If T
′′
l = a,
then, by 2, Uj → Tj = U
′ ⊓ a. Absurd. Hence, ∀1 ≤ l ≤ q, T ′′l = Vl → T
′′′
l
and V = ⊓ql=1(Vl → T
′′′
l ). Let 1 ≤ i ≤ p. By IH, ∃1 ≤ l ≤ q, U
′
i ⊑ Vl and
T ′′′l ⊑ T
′
i . Also, by IH, ∃1 ≤ j ≤ k, Vl ⊑ Uj and Tj ⊑ T
′′′
l . Hence, ∀1 ≤ i ≤ p,
∃1 ≤ j ≤ k, such that U ′i ⊑ Uj and Tj ⊑ T
′
i .
4. By 1, V = ⊓pi=1T
′
i where p ≥ 1 and ∀1 ≤ i ≤ p, U → T ⊑ T
′
i . If T
′
i = a,
then, by 2, U → T = U ′ ⊓ a. Absurd. Hence, T ′i = Ui → Ti. Hence, by 3,
∀1 ≤ i ≤ p, Ui ⊑ U and T ⊑ Ti.
5. Since V 6= ω, then, by lemma 4.1, V = ⊓pi=1T
′
i where p ≥ 1 and ∀1 ≤ i ≤ p,
T ′i ∈ T. Let 1 ≤ i ≤ p. By 1, ∃1 ≤ ji ≤ k such that Uji → Tji ⊑ T
′
i . By 4,
and since T ′i ∈ T, T
′
i = U
′
i → T
′′
i where U
′
i ⊑ Uji and Tji ⊑ T
′′
i . Hence,
V = ⊓pi=1(U
′
i → T
′′
i ) where p ≥ 1 and ∀1 ≤ i ≤ p, ∃1 ≤ ji ≤ k U
′
i ⊑ Uji and
Tji ⊑ T
′′
i .

The next lemma studies the relation ⊑ on environments and typings.
Lemma 6 1. If Γ ⊑ Γ′, then dom(Γ) = dom(Γ′).
2. If Γ ⊑ Γ′, U ⊑ U ′ and x 6∈ dom(Γ), then Γ, x : U ⊑ Γ′, x : U ′.
3. Γ ⊑ Γ′ iff Γ = (xi : Ui)n, Γ′ = (xi : U ′i)n and for every 1 ≤ i ≤ n, Ui ⊑ U
′
i .
4. If dom(Γ) = FV (M), then Γ ⊑ envMω
5. If envMω ⊑ Γ, then Γ = env
M
ω .
6. 〈Γ ⊢ U〉 ⊑ 〈Γ′ ⊢ U ′〉 iff Γ′ ⊑ Γ and U ⊑ U ′.
7. If Γ ⊑ Γ′ and ∆ ⊑ ∆′, then Γ ⊓∆ ⊑ Γ′ ⊓∆′.
Proof
1. By induction on the derivation Γ ⊑ Γ′.
2. First show, by induction on the derivation Γ ⊑ Γ′ (using 1), that if Γ ⊑ Γ′,
V ∈ U and y 6∈ dom(Γ) then Γ, y : V ⊑ Γ′, y : V . Then use tr.
3. Only if) By 1, Γ = (xi : Ui)n and Γ
′ = (xi : Ui)n. The proof is by induction
on the derivation (xi : Ui)n ⊑ (xi : U ′i)n. If) By induction on n using 2.
4. Let FV (M) = {x1, . . . , xn} and Γ = (xi : Ui)n. By definition, envMω =
(xi, ω)n. Hence, by lemma 4.2 and 3, Γ ⊑ envMω .
5. Let FV (M) = {x1, . . . , xn}. By definition, envMω = (xi, ω)n. By 3, Γ = (xi :
Ui)n and ∀1 ≤ i ≤ n, ω ⊑ Ui. Hence by lemma 4.3, ∀1 ≤ i ≤ n, ω = Ui.
6. Only if) By induction on the derivation 〈Γ ⊢ U〉 ⊑ 〈Γ′ ⊢ U ′〉. If) By ⊑〈〉.
7. This is a corollary of 3.

7
The next lemma shows that we do not allow weakening in our type system.
Lemma 7 1. If M : 〈Γ ⊢ U〉, then dom(Γ) = FV (M).
2. For every Γ and M such that dom(Γ) = FV (M), we have M : 〈Γ ⊢ ω〉.
Proof
1. By induction on the derivation M : 〈Γ ⊢ U〉.
2. By ω, M : 〈envMω ⊢ ω〉. By lemma 6.4, Γ ⊑ env
M
ω . Hence, by ⊑ and ⊑〈〉,
M : 〈Γ ⊢ ω〉.

Finally, it may come as a surprise that the rule ax uses types in T instead of
U and that in the rule ⊓ we take the same environment. The lemma below shows
that this is not restrictive.
Lemma 8 1. The rule
M : 〈Γ1 ⊢ U1〉 M : 〈Γ2 ⊢ U2〉
M : 〈Γ1 ⊓ Γ2 ⊢ U1 ⊓ U2〉
⊓′i is derivable.
2. The rule
x : 〈(x : U) ⊢ U〉
ax′ is derivable.
Proof
1. Let M : 〈Γ1 ⊢ U1〉 and M : 〈Γ2 ⊢ U2〉. By lemma 7, dom(Γ1) = dom(Γ2) =
FV (M). Let Γ1 = (xi : Vi)n and Γ2 = (xi : V
′
i )n. Hence, Γ1 ⊓ Γ2 =
(xi : Vi ⊓ V ′i )n. By Vi ⊓ V
′
i ⊑ Vi and Vi ⊓ V
′
i ⊑ V
′
i for all 1 ≤ i ≤ n.
Hence, by lemma 6.3, Γ1 ⊓ Γ2 ⊑ Γ1 and Γ1 ⊓ Γ2 ⊑ Γ2, and, by rules ⊑
and ⊑〈〉, M : 〈Γ1 ⊓ Γ2, U1〉 and M : 〈Γ1 ⊓ Γ2, U2〉. Finally, by rule ⊓i,
M : 〈Γ1 ⊓ Γ2, U1 ⊓ U2〉.
2. By lemma 4.1:
– Either U = ω, then, by rule ω, we have x : 〈(x : ω) ⊢ ω〉.
– Or U = ⊓ki=1Ti where ∀1 ≤ i ≤ k, Ti ∈ T, then, by rule ax, x : 〈(x :
Ti) ⊢ Ti〉 and, by k − 1 applications of rule ⊓′i, x : 〈(x : U) ⊢ U〉.

3 Subject reduction and expansion properties
In this section we establish the subject reduction and subject expansion properties
for β.
3.1 Subject reduction for β
We start with a form of the generation lemma.
Lemma 9 (Generation) 1. If x : 〈Γ ⊢ U〉, then Γ = (x : V ) and V ⊑ U .
2. If M x : 〈Γ, x : U ⊢ V 〉 and x 6∈ FV (M), then V = ω or V = ⊓ki=1Ti where
k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ ⊢ U → Ti〉.
3. If λx.M : 〈Γ ⊢ U〉 and x ∈ FV (M), then U = ω or U = ⊓ki=1(Vi → Ti) where
k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ, x : Vi ⊢ Ti〉.
4. If λx.M : 〈Γ ⊢ U〉 and x 6∈ FV (M), then U = ω or U = ⊓ki=1(Vi → Ti) where
k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ ⊢ Ti〉.
8
Proof 1. By induction on the derivation x : 〈Γ ⊢ U〉. We have four cases:
• If
x : 〈(x : T ) ⊢ T 〉
, nothing to prove.
• If
x : 〈(x : ω) ⊢ ω〉
, nothing to prove.
• Let
x : 〈Γ ⊢ U1〉 x : 〈Γ ⊢ U2〉
x : 〈Γ ⊢ U1 ⊓ U2〉
. By IH, Γ = (x : V ), V ⊑ U1 and V ⊑ U2,
then, by rule ⊓, V ⊑ U1 ⊓ U2.
• Let
x : 〈Γ′ ⊢ U ′〉 〈Γ′ ⊢ U ′〉 ⊑ 〈Γ ⊢ U〉
x : 〈Γ ⊢ U〉
. By lemma 6.6, Γ ⊑ Γ′ and U ′ ⊑ U
and, by IH, Γ′ = (x : V ′) and V ′ ⊑ U ′. Then, by lemma 6.3, Γ = (x : V ),
V ⊑ V ′ and, by rule tr, V ⊑ U .
2. By induction on the derivation M x : 〈Γ, x : U ⊢ V 〉. We have four cases:
• If
M x : 〈envM xω ⊢ ω〉
, nothing to prove.
• Let
M : 〈Γ ⊢ U → T 〉 x : 〈(x : V ) ⊢ U〉
M x : 〈Γ, x : V ⊢ T 〉
(where, by 1. V ⊑ U).
Since U → T ⊑ V → T , we have M : 〈Γ ⊢ V → T 〉.
• Let
M x : 〈Γ, x : U ⊢ U1〉 M x : 〈Γ, x : U ⊢ U2〉
M x : 〈Γ, x : U ⊢ U1 ⊓ U2〉
. By IH, we have four cases:
– If U1 = U2 = ω, then U1 ⊓ U2 = ω.
– If U1 = ω, U2 = ⊓ki=1Ti, k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ ⊢ U → Ti〉, then
U1 ⊓ U2 = U2 (ω is a neutral element).
– If U2 = ω, U1 = ⊓ki=1Ti, k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ ⊢ U → Ti〉, then
U1 ⊓ U2 = U1 (ω is a neutral element).
– If U1 = ⊓ki=1Ti and U2 = ⊓
l
i=1Tk+i (hence U1 ⊓ U2 = ⊓
k+l
i=1Ti) , where
k, l ≥ 1 and ∀1 ≤ i ≤ k + l, M : 〈Γ ⊢ U → Ti〉.
• Let
M x : 〈Γ′, x : U ′ ⊢ V ′〉 〈Γ′, x : U ′ ⊢ V ′〉 ⊑ 〈Γ, x : U ⊢ V 〉
M x : 〈Γ, x : U ⊢ V 〉
(by lemma 6).
By lemma 6, Γ ⊑ Γ′, U ⊑ U ′ and V ′ ⊑ V . By IH, we have two cases:
– If V ′ = ω, then, by lemma 4.3, V = ω.
– If V ′ = ⊓ki=1T
′
i , where k ≥ 1 and ∀1 ≤ i ≤ k, M : 〈Γ ⊢ U → T
′
i 〉. By
lemma 5.1, V = ω (nothing to prove) or V = ⊓pi=1Ti where p ≥ 1 and
∀1 ≤ i ≤ p, ∃1 ≤ ji ≤ k such that T ′ji ⊑ Ti. Since, by lemma 6.6,
〈Γ′ ⊢ U ′ → T ′ji〉 ⊑ 〈Γ ⊢ U → Ti〉 for any 1 ≤ i ≤ p, then ∀1 ≤ i ≤ p,
M : 〈Γ ⊢ U → Ti〉.
3. By induction on the derivation λx.M : 〈Γ ⊢ U〉. We have four cases:
• If
λx.M : 〈envλx.Mω ⊢ ω〉
, nothing to prove.
• If
M : 〈Γ, x : U ⊢ T 〉
λx.M : 〈Γ ⊢ U → T 〉
, nothing to prove.
• Let
λx.M : 〈Γ ⊢ U1〉 λx.M : 〈Γ ⊢ U2〉
λx.M : 〈Γ ⊢ U1 ⊓ U2〉
. By IH, we have four cases:
– If U1 = U2 = ω, then U1 ⊓ U2 = ω.
9
– If U1 = ω, U2 = ⊓ki=1(Vi → Ti) where k ≥ 1 and ∀1 ≤ i ≤ k,
M : 〈Γ2, x : Vi ⊢ Ti〉, then U1 ⊓ U2 = U2 (ω is a neutral element).
– If U2 = ω, U1 = ⊓ki=1(Vi → Ti) where k ≥ 1 and ∀1 ≤ i ≤ k,
M : 〈Γ1, x : Vi ⊢ Ti〉, then U1 ⊓ U2 = U1 (ω is a neutral element).
– If U1 = ⊓ki=1(Vi → Ti), U2 = ⊓
k+l
i=k+1(Vi → Ti) (hence U1 ⊓ U2 =
⊓k+li=1(Vi → Ti)) where k, l ≥ 1, ∀1 ≤ i ≤ k + l, M : 〈Γ, x : Vi ⊢ Ti〉,
we are done.
• Let
λx.M : 〈Γ ⊢ U〉 〈Γ ⊢ U〉 ⊑ 〈Γ′ ⊢ U ′〉
λx.M : 〈Γ′ ⊢ U ′〉
. By lemma 6.6, Γ′ ⊑ Γ and U ⊑ U ′.
By IH, we have two cases:
– If U = ω, then, by lemma 4.3, U ′ = ω.
– Assume U = ⊓ki=1(Vi → Ti), where k ≥ 1 and M : 〈Γ, x : Vi ⊢ Ti〉 for all
1 ≤ i ≤ k. By lemma 4.1:
∗ Either U ′ = ω, and hence nothing to prove.
∗ Or, by lemma 5.5, U ′ = ⊓pi=1(V
′
i → T
′
i ), where p ≥ 1 and ∀1 ≤ i ≤ p,
∃1 ≤ ji ≤ k such that V ′i ⊑ Vji and Tji ⊑ T
′
i . Let 1 ≤ i ≤ p.
Since, by lemma 6.6, 〈Γ, x : Vji ⊢ Tji〉 ⊑ 〈Γ
′, x : V ′i ⊢ T
′
i 〉, then
M : 〈Γ′, x : V ′i ⊢ T
′
i 〉.
4. Same proof as that of 3. 
Now, we establish the substitution lemma.
Lemma 10 (Substitution) If M : 〈Γ, x : U ⊢ V 〉 and N : 〈∆ ⊢ U〉,
then M [x := N ] : 〈Γ ⊓∆ ⊢ V 〉.
Proof By induction on the derivation M : 〈Γ, x : U ⊢ V 〉.
• If
x : 〈(x : T ) ⊢ T 〉
and N : 〈∆ ⊢ T 〉, then N = x[x := N ] : 〈∆ ⊢ T 〉.
• If
M : 〈(xi : ω)n, x : ω ⊢ ω〉
where FV (M) = {x1, . . . , xn, x} and if N : 〈∆ ⊢
ω〉, then since FV (M [x := N ]) = {x1, . . . , xn} ∪ FV (N), we have by ω,
M [x := N ] : 〈(xi : ω)n ⊓ envNω ⊢ ω〉. By lemmas 6.4 and 7, ∆ ⊑ env
N
ω and
by lemma 6.7, (xi : ω)n ⊓∆ ⊑ (xi : ω)n ⊓ envNω . Hence, by ⊑〈〉, M [x := N ] :
〈(xi : ω)n ⊓∆ ⊢ ω〉.
• Let
M : 〈Γ, x : U, y : U ′ ⊢ T 〉
λy.M : 〈Γ, x : U ⊢ U ′ → T 〉
. By IH, M [x := N ] : 〈Γ ⊓∆, y : U ′ ⊢ T 〉. By
rule →i, (λy.M)[x := N ] = λy.M [x := N ] : 〈Γ ⊓∆ ⊢ U ′ → T 〉.
• Let
M : 〈Γ, x : U ⊢ T 〉 y 6∈ dom(Γ) ∪ {x}
λy.M : 〈Γ, x : U ⊢ ω → T 〉
. By IH, M [x := N ] : 〈Γ ⊓∆ ⊢ T 〉.
By rule →′i, (λy.M)[x := N ] = λy.M [x := N ] : 〈Γ ⊓∆ ⊢ ω → T 〉.
• Let
M1 : 〈Γ1, x : U1 ⊢ V → T 〉 M2 : 〈Γ2, x : U2 ⊢ V 〉
M1 M2 : 〈Γ1 ⊓ Γ2, x : U1 ⊓ U2 ⊢ T 〉
where x ∈ FV (M1) ∩
FV (M2) and N : 〈∆ ⊢ U1 ⊓ U2〉. By rules ⊓e and ⊑, N : 〈∆ ⊢ U1〉 and
N : 〈∆ ⊢ U2〉. Now use IH and rule →e.
The cases x ∈ FV (M1) \ FV (M2) or x ∈ FV (M2) \ FV (M1) are easy.
• If
M : 〈Γ, x : U ⊢ U1〉 M : 〈Γ, x : U ⊢ U2〉
M : 〈Γ, x : U ⊢ U1 ⊓ U2〉
use IH and ⊓i.
10
• Let
M : 〈Γ′, x : U ′ ⊢ V ′〉 〈Γ′, x : U ′ ⊢ V ′〉 ⊑ 〈Γ, x : U ⊢ V 〉
M : 〈Γ, x : U ⊢ V 〉
(by lemma 6).
By lemma 6, dom(Γ) = dom(Γ′), Γ ⊑ Γ′, U ⊑ U ′ and V ′ ⊑ V . Hence by
⊑, N : 〈∆ ⊢ U ′〉 and, by IH, M [x := N ] : 〈Γ′ ⊓ ∆ ⊢ V ′〉. It is easy to
show Γ ⊓ ∆ ⊆ Γ′ ⊓ ∆. Hence, 〈Γ′ ⊓ ∆ ⊢ V ′〉 ⊑ 〈Γ ⊓ ∆ ⊢ V 〉 and by ⊑,
M [x := N ] : 〈Γ ⊓∆ ⊢ V 〉.

Since our system does not allow weakening, we need the next definition (and
the related lemma below it) since when a term is reduced, it may lose some of its
free variables and hence will need to be typed in a smaller environment.
Definition 11 If Γ is a type environment and U ⊆ dom(Γ), then we write Γ ↾U
for the restriction of Γ on the variables of U . If U = FV (M) for a term M , we
write Γ ↾M instead of Γ ↾FV (M).
Lemma 12 1. If FV (N) ⊆ FV (M), then envMω ↾N= env
N
ω .
2. If FV (M) ⊆ dom(Γ1) and FV (N) ⊆ dom(Γ2), then
(Γ1 ⊓ Γ2) ↾MN⊑ (Γ1 ↾M ) ⊓ Γ2.
Proof 1. Easy. 2. First, note that dom((Γ1⊓Γ2) ↾MN ) = FV (MN) = FV (M)∪
FV (N) = dom(Γ1 ↾M ) ∪ dom(Γ2) = dom((Γ1 ↾M ) ⊓ Γ2). Now, we show by cases
that if x : U1 ∈ (Γ1 ⊓ Γ2) ↾MN and x : U2 ∈ (Γ1 ↾M ) ⊓ Γ2 then U1 ⊑ U2:
• If x ∈ FV (M)∩FV (N) then x : U ′1 ∈ Γ1, x : U
′′
1 ∈ Γ2 and U1 = U
′
1⊓U
′′
1 = U2.
• If x ∈ FV (M) \ FV (N) then x 6∈ dom(Γ2), x : U1 ∈ Γ1 and U1 = U2.
• If x ∈ FV (N) \ FV (M) then
– If x ∈ dom(Γ1) then x : U ′1 ∈ Γ1, x : U2 ∈ Γ2 and U1 = U
′
1 ⊓ U2 ⊑ U2.
– If x 6∈ dom(Γ1) then x : U2 ∈ Γ2 and U1 = U2.

Now we give the basic block in the subject reduction for β.
Theorem 13 If M : 〈Γ ⊢ U〉 and M ⊲β N , then N : 〈Γ ↾N⊢ U〉.
Proof By induction on the derivationM : 〈Γ ⊢ U〉. Rule ω follows by theorem 2.1
and lemma 12.1. Rules →i, →′i, ⊓i and ⊑ are by IH. We do →e
Let
M1 : 〈Γ1 ⊢ U → T 〉 Q : 〈Γ2 ⊢ U〉
M1 Q : 〈Γ1 ⊓ Γ2 ⊢ T 〉
.
• IfM =M1Q⊲βPQ = N whereM1⊲βP then by IH, P : 〈Γ1 ↾P⊢ U → T 〉. By
→e, P Q : 〈(Γ1 ↾P ) ⊓ Γ2 ⊢ T 〉. By lemma 12.2, (Γ1 ⊓ Γ2) ↾PQ⊑ (Γ1 ↾P ) ⊓ Γ2.
Finally, by ⊑〈〉, P Q : 〈(Γ1 ⊓ Γ2) ↾PQ⊢ T 〉.
• The case M =M1Q⊲β M1P = N where Q⊲β P is similar to the above.
• Assume M1 = λx.P and M1 M2 = (λx.P )M2 ⊲β P [x := M2] = N . Since
λx.P : 〈Γ1 ⊢ U → T 〉, we have two cases:
– If x ∈ FV (P ), then, by lemma 9.3, P : 〈Γ1, x : U ⊢ T 〉. By lemma 10,
P [x := M2] : 〈Γ1 ⊓ Γ2 ⊢ T 〉. Moreover, FV (M1M2) = FV (N) =
dom(Γ1 ⊓ Γ2). Hence (Γ1 ⊓ Γ2) ↾N= Γ1 ⊓ Γ2 and N : 〈(Γ1 ⊓ Γ2) ↾N⊢ T 〉.
– If x 6∈ FV (P ), then, by lemma 9.4, P : 〈Γ1 ⊢ T 〉. Moreover, by
lemma 7.1, FV (P ) = FV (M1) = dom(Γ1). Hence, (Γ1⊓Γ2) ↾P= Γ1 ↾P=
Γ1 and P [x := M2] = P : 〈(Γ1 ⊓ Γ2) ↾P⊢ T 〉.

11
Corollary 14 (Subject reduction for β)
If M : 〈Γ ⊢ U〉 and M ⊲∗β N , then N : 〈Γ ↾N⊢ U〉.
Proof By induction on the length of the derivation M ⊲∗βN using theorem 13.
Remark 15 Note that using lemma 9.(2 and 3), we can also prove the subject
reduction property for η-reduction.
3.2 Subject expansion for β
Subject reduction for β was shown using generation, substitution and environment
restriction. Subject expansion for β needs something like the converse of the sub-
stitution lemma and environment enlargement.
The next lemma can be seen as the converse of the substitution lemma.
Lemma 16 If M [x := N ] : 〈Γ ⊢ U〉, x ∈ FV (M) and x 6∈ FV (N), then ∃ V type
and ∃ Γ1,Γ2 type environments such that:
• M : 〈Γ1, x : V ⊢ U〉
• N : 〈Γ2 ⊢ V 〉
• Γ ⊑ Γ1 ⊓ Γ2
Proof By induction on the derivation M [x := N ] : 〈Γ ⊢ U〉.
If M = x, then x : 〈x : U ⊢ U〉, N : 〈Γ ⊢ U〉 and Γ = Γ ⊓ (). Then we can
assume that M 6= x.
• The last typing rule can not be ax.
• Let
M [x := N ] : 〈Γ, y :W ⊢ T 〉
λy.M [x := N ] : 〈Γ ⊢W → T 〉
where y 6∈ FV (N).
By IH, ∃ V type and ∃ Γ1,Γ2 type environments such thatM : 〈Γ1, x : V ⊢ T 〉,
N : 〈Γ2 ⊢ V 〉 and Γ, y : W ⊑ Γ1 ⊓ Γ2. Since y ∈ FV (M) and y 6∈ FV (N), by
lemma 6.3, Γ1 = ∆1, y :W
′ andW ⊑W ′. HenceM : 〈∆1, y :W ′, x : V ⊢ T 〉.
By rule→i, λy.M : 〈∆1, x : V ⊢W
′ → T 〉 and sinceW ′ → T ⊑W → T , then
by rule ⊑, λy.M : 〈∆1, x : V ⊢W → T 〉. Finally by lemma 6.3, Γ ⊑ ∆1 ⊓ Γ2.
• Let
M [x := N ] : 〈Γ ⊢ T 〉 y 6∈ dom(Γ)
λy.M [x := N ] : 〈Γ ⊢ ω → T 〉
.
By IH, ∃ V type and ∃ Γ1,Γ2 type environments such thatM : 〈Γ1, x : V ⊢ T 〉,
N : 〈Γ2 ⊢ V 〉 and Γ ⊑ Γ1 ⊓ Γ2. Since y 6= x, λy.M : 〈Γ1, x : V ⊢ ω → T 〉.
• Let
M1[x := N ] : 〈Γ1 ⊢W → T 〉 M2[x := N ] : 〈Γ2 ⊢W 〉
M1[x := N ]M2[x := N ] : 〈Γ1 ⊓ Γ2 ⊢ T 〉
where M = M1M2 and x ∈ FV (M1) ∩ FV (M2).
By IH, ∃ V1, V2 types and ∃ ∆1,∆2;∇1,∇2 type environments such that M1 :
〈∆1, x : V1 ⊢ W → T 〉, M2 : 〈∇1, x : V2 ⊢ W 〉, N : 〈∆2 ⊢ V1〉, N : 〈∇2 ⊢ V2〉,
Γ1 ⊑ ∆1 ⊓ ∆2 and Γ2 ⊑ ∇1 ⊓ ∇2. Then, by rules ⊓′ and →e, M1M2 :
〈∆1⊓∇1, x : V1⊓V2 ⊢ T 〉 and N : 〈∆2⊓∇2 ⊢ V1⊓V2〉. Finally, by lemma 6.7,
Γ1 ⊓ Γ2 ⊑ (∆1 ⊓∆2) ⊓ (∇1 ⊓∇2).
The cases x ∈ FV (M1) \ FV (M2) or x ∈ FV (M2) \ FV (M1) are easy.
• Let
M [x := N ] : 〈Γ ⊢ U1〉 M [x := N ] : 〈Γ ⊢ U2〉
M [x := N ] : 〈Γ ⊢ U1 ⊓ U2〉
.
By IH, ∃ V1, V2 types and ∃ Γ1,Γ2; ∆1,∆2 type environments such that M :
〈Γ1, x : V1 ⊢ U1〉, M : 〈∆1, x : V2 ⊢ U2〉, N : 〈Γ2 ⊢ V1〉, N : 〈∆2 ⊢ V2〉, Γ ⊑
Γ1⊓Γ2 and Γ ⊑ ∆1⊓∆2. Then, by rule ⊓′, M : 〈Γ1⊓∆1, x : V1⊓V2 ⊢ U1⊓U2〉
and N : 〈Γ2⊓∆2 ⊢ V1⊓V2〉. Finally, by lemma 6.7, Γ ⊑ (Γ1⊓Γ2)⊓(∆1⊓∆2).
12
• Let
M [x := N ] : 〈Γ′ ⊢ U ′〉 〈Γ′ ⊢ U ′〉 ⊑ 〈Γ ⊢ U〉
M : 〈Γ ⊢ U〉
.
By lemma 6.3, Γ ⊑ Γ′ and U ′ ⊑ U . By IH, ∃ V type and ∃ Γ′1,Γ
′
2 type
environments such that M : 〈Γ1, x : V ⊢ U ′〉, N : 〈Γ2 ⊢ V 〉 and Γ′ ⊑ Γ1 ⊓ Γ2.
Then by rules ⊑〈〉, ⊑ and tr, M : 〈Γ1, x : V ⊢ U〉 and Γ ⊑ Γ1 ⊓ Γ2.

Since more free variables might appear in the β-expansion of a term, the next
definition gives a possible enlargement of an environment.
Definition 17 Let m ≥ n, Γ = (xi : Ui)n and U = {x1, ..., xm}. We write Γ↑
U
for x1 : U1, ..., xn : Un, xn+1 : ω, ..., xm : ω. If dom(Γ) ⊆ FV (M), we write Γ↑M
instead of Γ↑FV (M).
The next lemma is basic for the proof of subject expansion for β.
Lemma 18 If M [x := N ] : 〈Γ ⊢ U〉, x 6∈ FV (N) and U = FV ((λx.M)N), then
(λx.M)N : 〈Γ↑U ⊢ U〉.
Proof We have three cases:
• If U = ω: By lemma 7.2, we have (λx.M)N : 〈Γ↑U ⊢ ω〉.
• If U ∈ T: We have two cases:
– If x ∈ FV (M), then, by lemma 16, ∃ V type and ∃ Γ1,Γ2 type environ-
ments such that M : 〈Γ1, x : V ⊢ U〉, N : 〈Γ2 ⊢ V 〉 and Γ ⊑ Γ1 ⊓ Γ2.
Hence, by rules →i and →e, λx.M : 〈Γ1 ⊢ V → U〉 and (λx.M)N :
〈Γ1 ⊓ Γ2 ⊢ U〉. Since FV ((λx.M)N) = FV (M [x := N ]), then Γ↑U = Γ,
and, by rule ⊑, (λx.M)N : 〈Γ↑U ⊢ U〉.
– If x 6∈ FV (M), then M : 〈Γ ⊢ U〉 and, by rule →′i, λy.M : 〈Γ ⊢ ω → U〉.
By rule ω, N : 〈envNω ⊢ ω〉, then, by rule→e, (λx.M)N : 〈Γ⊓env
N
ω ⊢ U〉.
Since FV ((λx.M)N) = FV (M [x := N ])∪FV (N), then Γ↑U = Γ⊓envNω .
• If U = ⊓ki=1Ti where ∀ 1 ≤ i ≤ k, Ti ∈ T: By rule ⊑, we have ∀ 1 ≤ i ≤ k,
M [x := N ] : 〈Γ ⊢ Ti〉, then, by the previous case, ∀ 1 ≤ i ≤ k, (λx.M)N :
〈Γ↑U ⊢ Ti〉, then, by k − 1 applications of rule ⊓i, (λx.M)N : 〈Γ↑
U ⊢ U〉.

Next, we give the main block for the proof of subject expansion for β.
Theorem 19 If N : 〈Γ ⊢ U〉 and M ⊲β N , then M : 〈Γ↑
M ⊢ U〉.
Proof By induction on the derivation N : 〈Γ ⊢ U〉.
• If
x : 〈x : T ⊢ T 〉
and M ⊲β x, then M = (λy.M1)M2 where y 6∈ FV (M2) and
x = M1[y := M2]. By lemma 18, M : 〈(x : T )↑M ⊢ T 〉.
• If
N : 〈envNω ⊢ ω〉
andM⊲βN , then since by theorem 2.1, FV (N) ⊆ FV (M),
(envNω )↑
M = envMω . By ω, M : 〈env
M
ω ⊢ ω〉. Hence, M : 〈(env
N
ω )↑
M ⊢ ω〉.
• If
N : 〈Γ, x : U ⊢ T 〉
λx.N : 〈Γ ⊢ U → T 〉
and M ⊲β λx.N , then we have two cases:
– If M = λx.M ′ where M ′ ⊲β N , then by IH, M
′ : 〈(Γ, x : U)↑M
′
⊢ T 〉.
Since by theorem 2.1 and lemma 7.1, x ∈ FV (N) ⊆ FV (M ′), then
we have (Γ, x : U)↑FV (M
′) = Γ↑FV (M
′)\{x}, x : U and Γ↑FV (M
′)\{x} =
Γ↑λx.M
′
. Hence, M ′ : 〈Γ↑λx.M
′
, x : U ⊢ T 〉 and finally, by →i, λx.M ′ :
〈Γ↑λx.M
′
⊢ U → T 〉.
13
– If M = (λy.M1)M2 where y 6∈ FV (M2) and λx.N =M1[y := M2], then,
by lemma 18, since y 6∈ FV (M2) and M1[y := M2] : 〈Γ ⊢ U → T 〉, we
have (λy.M1)M2 : 〈Γ↑(λy.M1)M2 ⊢ U → T 〉.
• If
N : 〈Γ ⊢ T 〉 x 6∈ dom(Γ)
λx.N : 〈Γ ⊢ ω → T 〉
and M ⊲β N then similar to the above case.
• If
N1 : 〈Γ1 ⊢ U → T 〉 N2 : 〈Γ2 ⊢ U〉
N1 N2 : 〈Γ1 ⊓ Γ2 ⊢ T 〉
andM⊲βN1N2, we have three cases:
– M =M1N2 where M1 ⊲β N1. By IH, M1 : 〈Γ1↑M1 ⊢ U → T 〉. It is easy
to show that (Γ1 ⊓ Γ2)↑
M1N2 = Γ1↑
M1 ⊓ Γ2. Now use →e.
– M = N1M2 where M2 ⊲β N2. Similar to the above case.
– M = (λx.M1)M2 where x 6∈ FV (M2) and N1N2 = M1[x := M2]. By
lemma 18, (λx.M1)M2 : 〈(Γ1 ⊓ Γ2)↑(λx.M1)M2 ⊢ T 〉.
• If
N : 〈Γ ⊢ U1〉 N : 〈Γ ⊢ U2〉
N : 〈Γ ⊢ U1 ⊓ U2〉
and M ⊲β N then use IH.
• Let
N : 〈Γ ⊢ U〉 〈Γ ⊢ U〉 ⊑ 〈Γ′ ⊢ U ′〉
N : 〈Γ′ ⊢ U ′〉
andM⊲βN . By lemma 6.6, Γ
′ ⊑ Γ
and U ⊑ U ′. It is easy to show that Γ′↑M ⊑ Γ↑M and hence by lemma 6.6,
〈Γ↑M ⊢ U〉 ⊑ 〈Γ′↑M ⊢ U ′〉. By IH, M↑M : 〈Γ ⊢ U〉. Hence, by ⊑〈〉, we have
M : 〈Γ′↑M ⊢ U ′〉.

Corollary 20 (Subject expansion for β)
If N : 〈Γ ⊢ U〉 and M ⊲∗β N , then M : 〈Γ↑
M ⊢ U〉.
Proof By induction on the length of the derivation M ⊲∗β N using theorem 19
and the fact that if FV (P ) ⊆ FV (Q), then (Γ↑P )↑Q = Γ↑Q. 
4 The realisability semantics, its soundness and
completeness
In this section we give a realisability semantics for our type system and establish
both the soundness and completeness of this semantics.
We start with the definition of the function space and saturated sets.
Definition 21 Let X ,Y ⊆M.
1. We use P(X ) to denote the powerset of X , i.e. {Y / Y ⊆ X}.
2. We define X  Y = {M ∈M / M N ∈ Y for all N ∈ X}.
3. Let r ∈ {f, β}. We say that X is r-saturated if whenever M⊲∗rN and N ∈ X ,
then M ∈ X .
Lemma 22 Let r ∈ {f, β}.
1. If X is β-saturated, then X is f -saturated.
2. If X ,Y are r-saturated sets, then X ∩ Y is r-saturated.
3. If Y is r-saturated, then, for every set X ⊆M, X  Y is r-saturated.
Proof 1. Note that ⊲∗f ⊂ ⊲
∗
β. 2. is easy. 3. Let N ∈ X  Y, M ⊲
∗
r N and
P ∈ X . Then, by theorem 2.2, M P ⊲∗r N P and N P ∈ Y. Since Y is r-saturated,
then M P ∈ Y. Thus, M ∈ X  Y. 
14
We interpret basic types as saturated sets. The interpretation of complex types
is built up from smaller types in the obvious way.
Definition 23 Let r ∈ {f, β}.
1. An r-interpretation I : A 7→ P(M) is a function such that:
∀ a ∈ A, I(a) is r-saturated.
2. An r-interpretation I can be extended to U as follows:
I(ω) =M I(U1 ⊓ U2) = I(U1) ∩ I(U2) I(U → T ) = I(U) I(T )
Lemma 24 If I is a β-interpretation then I is an f -interpretation.
Proof Use lemma 22.1. 
The next lemma shows that the interpretation of any type (basic or complex) is
saturated, that the interpretation function respects the relation ⊑ and that we can
in some sense expand the terms in the interpretation.
Lemma 25 Let r ∈ {f, β} and let I be an r-interpretation.
1. For any U ∈ U, we have I(U) is r-saturated.
2. If U ⊑ V , then I(U) ⊆ I(V ).
3. Let n ≥ 0 and ∀1 ≤ i 6= j ≤ n, xi 6= xj. If ∀ Ni ∈ I(Ui) (1 ≤ i ≤ n),
M [(xi := Ni)
n
1 ] ∈ I(U), then
λx1....λxn.M ∈ I(U1 → (U2 → (...→ (Un → U)...))).
Proof 1. By induction on U using lemma 22.
2. By induction of the derivation U ⊑ V . 3. By induction on n ≥ 0 using 1. 
We now show the soundness of our sematics.
Theorem 26 (Soundness) Let r ∈ {f, β}. If M : 〈(xi : Ui)n ⊢ U〉, I is an
r-interpretation and ∀1 ≤ i ≤ n, Ni ∈ I(Ui), then M [(xi := Ni)n1 ] ∈ I(U).
Proof By induction on the derivation M : 〈(xi : Ui)n ⊢ U〉.
• Let
x : 〈(x : T ) ⊢ T 〉
. If N ∈ I(T ) then x[x := N ] = N ∈ I(T ).
• Let
M : 〈envMω ⊢ ω〉
where envMω = (xi : ω)n.
We have M [(xi := Ni)
n
1 ] ∈M = I(ω).
• Let
P : 〈(xi : Ui)n1 , x : U ⊢ T 〉
λx.P : 〈(xi : Ui)n ⊢ U → T 〉
.
If I(U) = ∅ then (λx.P )[(xi := Ni)n1 ] ∈ I(U) I(T ) =M.
If I(U) 6= ∅ then let N ∈ I(U). By IH, P [(xi := Ni)n1 , x := N ] ∈ I(T ). By
lemma 25.1, I(T ) is r-saturated.
Moreover, (λx.P )[(xi := Ni)
n
1 ] N ⊲
∗
r P [(xi := Ni)
n
1 , x := N ]. Hence,
(λx.P )[(xi := Ni)
n
1 ]N ∈ I(T ) and (λx.P )[(xi := Ni)
n
1 ] ∈ I(U) I(T ).
• Let
P : 〈(xi : Ui)n ⊢ T 〉 x 6= xi
λx.P : 〈(xi : Ui)n ⊢ ω → T 〉
and N ∈M. Note that x 6∈ FV (P ).
By IH, P [(xi := Ni)
n
1 ] ∈ I(T ). By lemma 25.1, I(T ) is r-saturated.
Moreover, (λx.P )[(xi := Ni)
n
1 ] N ⊲
∗
r P [(xi := Ni)
n
1 ]. Hence
(λx.P )[(xi := Ni)
n
1 ] N ∈ I(T ) and (λx.P )[(xi := Ni)
n
1 ] ∈ I(ω) I(T ).
15
• Let
M1 : 〈Γ1 ⊢ U → T 〉 M2 : 〈Γ2 ⊢ U〉
M1 M2 : 〈Γ1 ⊓ Γ2 ⊢ T 〉
where Γ1 = (xi : Ui)n, (yj : Vj)m,
Γ2 = (xi : U
′
i)n, (zk :Wk)l and Γ1⊓Γ2 = (xi : Ui⊓U
′
i)n, (yj : Vj)m, (zk :Wk)l.
Let ∀1 ≤ i ≤ n, Pi ∈ I(Ui ⊓ U ′i), ∀1 ≤ j ≤ m,Qj ∈ I(Vj) and ∀1 ≤ k ≤
l, Rk ∈ I(Wk). By IH, M1[(xi := Pi)n1 , (yj := Qj)
m
1 ] ∈ I(U) I(T ) and
M2[(xi := Pi)
n
1 , (zk := Rk)
l
1] ∈ I(U),
then (M1M2)[(xi := Pi)
n
1 , (yj := Qj)
m
1 , (zk := Rk)
l
1] =
M1[(xi := Pi)
n
1 , (yj := Qj)
m
1 ]M2[(xi := Pi)
n
1 , (zk := Rk)
l
1] ∈ I(T ).
• Let
M : 〈(xi : Ui)n ⊢ V1〉 M : 〈(xi : Ui)n ⊢ V2〉
M : 〈(xi : Ui)n ⊢ V1 ⊓ V2〉
. By IH, M [(xi := Ni)
n
1 ] ∈
I(V1) and M [(xi := Ni)n1 ] ∈ I(V2). Hence, M [(xi := Ni)
n
1 ] ∈ I(V1 ⊓ V2).
• Let
M : Φ Φ ⊑ Φ′
M : Φ′
where φ′ = 〈(xi : Ui)n ⊢ U〉.
By lemma 6.6 and 6.3, Φ = 〈(xi : U ′i)n ⊢ U
′〉, ∀ 1 ≤ i ≤ n, Ui ⊑ U ′i and
U ′ ⊑ U . By lemma 25.2, Ni ∈ I(U ′i), then, by IH, M [(xi := Ni)
n
1 ] ∈ I(U
′)
and, by lemma 25.2, M [(xi := Ni)
n
1 ] ∈ I(U).

Roughly speaking, completeness of the semantics amounts to saying that if M
is in the meaning of type U (i.e., M is in I(U) for any interpretation I) then M has
type U . In order to show completeness, we define a special interpretation function
I through the typing relation ⊢ in such a way that, if M ∈ I(U) then M can be
shown to have type U . This is done in the next definition and lemma.
Definition 27 1. For every U ∈ U, let an infinite subset VU of V such that:
• If U 6= V , then VU ∩ VV = ∅. •
⋃
U∈U VU = V.
2. We denote G = {(x : U) / U is a type and x ∈ VU}. Note that since G is
infinite, G is not a type environment.
3. Let M ∈ M and U ∈ U. We write M : 〈G ⊢ U〉 if there is a type environment
Γ ⊂ G such that M : 〈Γ ⊢ U〉.
4. Let I : A 7→ P(M) be the function defined by:
∀ a ∈ A, I(a) = {M ∈M / M : 〈G ⊢ a〉}.
Remark 28 Note that in Definition 27, we have associated to each U ∈ U, an
infinite set of variables VU in such a way that no variable is used in two different
types, and each variable of V is associated to a type. Obviously, as long as these
conditions are satisfied, we have the liberty of dividing the set V as we wish. We
will practice this liberty in the proof of theorem 32.
Lemma 29 1. If Γ,Γ′ ⊂ G and dom(Γ) = dom(Γ′), then Γ = Γ′.
2. If Γ,Γ′ ⊂ G, then Γ ⊓ Γ′ = Γ ∪ Γ′ ⊂ G.
3. I is a β-interpretation. I.e., ∀ a ∈ A, I(a) is β-saturated.
Hence, I is an f -interpretation.
Furthermore, we extend I to U as in Definition 23.2.
4. If U ∈ U, then I(U) 6= ∅ and I(U) = {M ∈M / M : 〈G ⊢ U〉}.
Proof
1. Let (x : U) ∈ Γ and (x : U ′) ∈ Γ′. Hence, x ∈ VU and x ∈ VU ′ and so, U = U ′
(otherwise, VU ∩VU ′ = ∅).
16
2. Let Γ = (xi : Ui)n, (yj : Vj)m and Γ
′ = (xi : U
′
i)n, (zk : Wk)l where yj 6= zk
for all 1 ≤ j ≤ m and 1 ≤ k ≤ l. Since (xi : Ui)n ⊂ G and (xi : U ′i)n ⊂ G, by
1, Ui = U
′
i for all 1 ≤ i ≤ n. Hence, Γ ⊓ Γ
′ = Γ ∪ Γ′ ⊂ G.
3. Let a ∈ A, M ∈ M, M ⊲∗β N and N ∈ I(a). Then N : 〈Γ ⊢ a〉 where
Γ ⊂ G. Let FV (M) \ dom(Γ) = {x1, ..., xn} and ∀ 1 ≤ i ≤ n, take Ui such
that xi ∈ VUi . Then ∆ = Γ, (xi : Ui)n ⊂ G and Γ↑
M = Γ, (xi : ω)n. By
corollary 20, M : 〈Γ↑M ⊢ a〉 and, by lemma 6.3, ∆ ⊑ Γ↑M . Hence, by rule
⊑, M : 〈∆ ⊢ a〉. Thus, M ∈ I(a). Hence I(a) is β-saturated and so, I is a
β-interpretation. Finally, by lemma 24, I is an f -interpretation.
4. The proof of I(U) 6= ∅ is as follows: let x ∈ VU 6= ∅. Then, x : U ∈ G and
since x : 〈(x : U) ⊢ U〉 then x ∈ I(U).
Now we do the second part by induction on U .
– U = a: By definition of I.
– U = ω: By definition, I(ω) =M. So, {M ∈M / M : 〈G ⊢ ω〉} ⊆ I(ω).
Conversely, let M ∈ I(ω) where FV (M) = {x1, ..., xn}. We have M :
〈(xi : ω)n ⊢ ω〉. ∀ 1 ≤ i ≤ n, take Ui such that xi ∈ VUi . Then
Γ = (xi : Ui)n ⊂ G. By lemma 7.2, M : 〈Γ ⊢ ω〉. Hence M : 〈G ⊢ ω〉.
Thus, I(ω) ⊆ {M ∈M / M : 〈G ⊢ ω〉}.
We deduce I(ω) = {M ∈ M / M : 〈G ⊢ ω〉}.
– U = U1 ⊓ U2: By IH, I(U1 ⊓ U2) = I(U1) ∩ I(U2) =
{M ∈ M / M : 〈G ⊢ U1〉} ∩ {M ∈M / M : 〈G ⊢ U2〉}.
∗ If M : 〈G ⊢ U1〉 and M : 〈G ⊢ U2〉, then M : 〈Γ1 ⊢ U1〉 and M :
〈Γ2 ⊢ U1〉 where Γ1,Γ2 ⊂ G. By lemma 7.1, dom(Γ1) = dom(Γ2) =
FV (M). By lemma 8.1, M : 〈Γ1 ⊓ Γ2 ⊢ U1 ⊓U2〉. Since Γ1,Γ2 ⊂ G,
then, by 1, Γ1 = Γ2 and Γ1⊓Γ2 = Γ1 ⊂ G. Thus M : 〈G ⊢ U1⊓U2〉.
∗ If M : 〈G ⊢ U1 ⊓ U2〉, then M : 〈Γ ⊢ U1 ⊓ U2〉 where Γ ⊂ G.
By ⊑, M : 〈Γ ⊢ U1〉 and M : 〈Γ ⊢ U2〉, then M : 〈G ⊢ U1〉 and
M : 〈G ⊢ U2〉.
We deduce I(U1 ⊓ U2) = {M ∈M / M : 〈G ⊢ U1 ⊓ U2〉}.
– U = V → T : Then I(V → T ) = I(V ) I(T ). By IH,
I(V ) = {M ∈M / M : 〈G ⊢ V 〉} and I(T ) = {M ∈M / M : 〈G ⊢ T 〉}.
∗ Let M ∈ I(V )  I(T ) and x ∈ VV such that x 6∈ FV (M). By
rule ax′ (see lemma 8.2), x : 〈(x : V ) ⊢ V 〉. Since (x : V ) ⊂ G,
then x : 〈G ⊢ V 〉. By IH, x ∈ I(V ). Hence Mx ∈ I(T ) and so
Mx : 〈Γ ⊢ T 〉 where Γ ⊂ G. Since x 6∈ FV (M), then Γ = ∆, x : V
and ∆ ⊂ G. By lemma 9.2, we deduce that M : 〈∆ ⊢ V → T 〉.
∗ Let M,N ∈ M such that M : 〈G ⊢ V → T 〉 and N : 〈G ⊢ V 〉. We
have M : 〈Γ1 ⊢ V → T 〉 and N : 〈Γ2 ⊢ V 〉 where Γ1,Γ2 ⊂ G. Thus
M N : 〈Γ1 ⊓ Γ2 ⊢ T 〉. Since, by lemma 29.2,Γ1 ⊓Γ2 ⊂ G. Therefore
MN : 〈G ⊢ T 〉.
We deduce I(V → T ) = {M ∈M / M : 〈G ⊢ V → T 〉}.

Now, the I of definition 27 will be used to show the completeness of the semantics.
Theorem 30 (Completeness) Let r ∈ {f, β}. Let U1, ..., Un, U ∈ U and M ∈
M such that FV (M) = {x1, ..., xn}. If ∀ r-interpretation I and ∀ Ni ∈ I(Ui)
(1 ≤ i ≤ n), M [(xi := Ni)n1 ] ∈ I(U), then M : 〈(xi : Ui)n ⊢ U〉.
17
Proof We distinguish three cases:
• If U = ω, then M : 〈(xi : ω)n ⊢ ω〉. Thus, by lemma 7.2, M : 〈(xi : Ui)n ⊢ ω〉.
• If U ∈ T, then, let V = U1 → (U2 → (... → (Un → U)...)). By hypoth-
esis and lemma 25.3, ∀ r-interpretation I, λx1....λxn.M ∈ I(V ). Hence,
λx1....λxn.M ∈ I(V ) where I is the interpretation of definition 27.4. By
lemma 29.4, λx1....λxn.M : 〈Γ ⊢ V 〉 where Γ ⊂ G and, since λx1....λxn.M
is closed, Γ = (). By rule ax′, ∀ 1 ≤ i ≤ n, xi : 〈xi : Ui ⊢ Ui〉, by n ap-
plications of →e we deduce (λx1....λxn.M)x1...xn : 〈(xi : Ui)n ⊢ U〉. Since
(λx1....λxn.M)x1...xn ⊲
∗
β M , then by corollary 14, M : 〈(xi : Ui)n ⊢ U〉.
• If U = ⊓mj=1Tj , then, by hypothesis, ∀ r-interpretation I, ∀ Ni ∈ I(Ui)
(1 ≤ i ≤ n), and ∀ 1 ≤ j ≤ m, M [(xi := Ni)n1 ] ∈ I(Tj). By the previous case,
∀ 1 ≤ j ≤ m, M : 〈(xi : Ui)n ⊢ Tj〉. By m − 1 applications of ⊓i we deduce
M : 〈(xi : Ui)n ⊢ U〉.

5 The meaning of types
Obviously the meaning of a type U should be based on the intersection of all the
interpretations of U . However, since we have been using two different kinds of
interpretations (β- and f -interpretations), we give two definitions for the meaning
of a type. We will show that these two definitions are equivalent.
Definition 31 Let r ∈ {f, β}. We define the meaning [U ]r of U ∈ U by:
[U ]r =
⋂
I r−interpretation
I(U)
The next theorem shows that the meaning [U ] of U is the set of terms typable by
U in a special environment and that [U ] is stable by β-reduction and β-expansion.
Theorem 32 Let r ∈ {f, β} and U ∈ U.
1. [U ]r = {M ∈M / M : 〈env
M
ω ⊢ U〉}.
2. [U ]r is stable by β-reduction. I.e., if M ∈ [U ]r and M ⊲∗β N , then N ∈ [U ]r.
3. [U ]r is stable by β-expansion. I.e., if M ∈ [U ]r, N ⊲∗β M , then N ∈ [U ]r.
4. [U ]r = {M ∈M / M ⊲∗β N and N : 〈env
N
ω ⊢ U〉}.
Proof
1. LetM ∈ M such thatM : 〈envMω ⊢ U〉. Let I be an r-interpretation and take
FV (M) = dom(envMω ) = {x1, x2, . . . , xn}. By theorem 26, since ∀1 ≤ i ≤ n,
xi ∈ I(ω) =M, then M =M [(x := xi)n1 ] ∈ I(U). Hence, M ∈ [U ]r.
Conversely, letM ∈ [U ]r. Take the interpretation I given in Definition 27 such
that (recall remark 28) FV (M) ⊂ Vω. Since M ∈ I(U) then M : 〈Γ ⊢ U〉
where Γ ⊆ G. But FV (M) ⊂ Vω and by lemma 7.1, FV (M) = dom(Γ).
Hence Γ = envMω .
We conclude that [U ]r = {M ∈ M / M : 〈envMω ⊢ U〉}.
2. Let M ∈ [U ]r such that M ⊲∗β N . By 1, M : 〈env
M
ω ⊢ U〉. By subject
reduction for β corollary 14, N : 〈(envMω ) ↾N⊢ U〉. Since by theorem 2.1,
FV (N) ⊆ FV (M) then (envMω ) ↾N= env
N
ω . Thus by 1, N ∈ [U ]r.
18
3. Let M ∈ [U ]r such that N ⊲∗β M . By 1, M : 〈env
M
ω ⊢ U〉. By subject
expansion for β corollary 20, N : 〈(envMω ) ↑
N⊢ U〉. Since by theorem 2.1,
FV (M) ⊆ FV (N) then (envMω ) ↑
N= envNω . Thus by 1, N ∈ [U ]r.
4. By 1, [U ]r ⊆ {M ∈ M / M ⊲∗β N and N : 〈env
N
ω ⊢ U〉}. Conversely, let
M ⊲∗β N and N : 〈env
N
ω ⊢ U〉. By 1, N ∈ [U ]r. Hence, by 3, M ∈ [U ]r.

Corollary 33 Let U ∈ U. We have that [U ]f = [U ]β.
Proof By theorem 32.1, [U ]f = [U ]β = {M ∈M / M : 〈envMω ⊢ U〉}. 
Hence, we write [U ] instead of either [U ]f or [U ]β.
Remark 34 The reader may ask here why we introduced the two notions of satu-
ration if the meaning of a type does not depend on whether this meaning was made
using β-interpretations or f -interpretations. The answer to this question is that up
to here, we could equally use β-interpretations or f -interpretations. However, to es-
tablish further results related to the meaning of types, especially for those types whose
meaning consists of terms that reduce to closed terms, then we need β-saturation.
For this reason, in the rest of paper, we only consider β-saturation.
Let us now reflect further on the meaning of types as given in definition 31. The
next lemma gives three examples.
Lemma 35 Let a ∈ A, U = ω → (a→ a), V = a→ (ω → a) and
W = (ω → a)→ a. We have:
1. [U ] = {M ∈ M/M ⊲∗β λx.λy.y}. Note that λx.λy.y : 〈() ⊢ U〉.
2. [V ] = {M ∈ M/M ⊲∗β λx.λy.x}. Note that λx.λy.x : 〈() ⊢ V 〉.
3. [W ] = {M ∈ M/M ⊲∗β λx.xP where P ∈M}.
Note that λx.xP : 〈envλx.xPω ⊢W 〉.
Proof
1. It is easy to show that λx.λy.y : 〈() ⊢ U〉. Note that envλx.λy.yω = ().
Hence, {M ∈ M/M ⊲∗β λx.λy.y} = {M ∈ M/M ⊲
∗
β λx.λy.y and λx.λy.y :
〈envλx.λy.yω ⊢ U〉} ⊆ [U ] by theorem 32.4.
Conversely, let M ∈ [U ] and y 6∈ FV (M). Take the β-interpretation I such
that I(a) = X = {M ∈ M/M ⊲∗β y}. Since M ∈ [U ] then M ∈ I(U) =
M  (I(a)  I(a)) = M  (X  X ). Let x 6= y such that x 6∈ FV (M).
Since x ∈ M and y ∈ X , then Mxy ∈ X , Mxy ⊲∗β y and by theorem 2.5,
M ⊲∗β λx.λy.y.
2. It is easy to show that λx.λy.x : 〈() ⊢ V 〉. Let I be a β-interpretation. By
theorem 26, λx.λy.x ∈ I(V ). By lemma 25.1, I(V ) is β-saturated. Hence,
{M ∈M/M ⊲∗β λx.λy.x} ⊆ I(V ). Thus, {M ∈M/M ⊲
∗
β λx.λy.x} ⊆ [V ].
Conversely, let M ∈ [V ] and x 6∈ FV (M). Take the β-interpretation I such
that I(a) = X = {M ∈ M/M ⊲∗β x}. Since M ∈ [V ] then M ∈ I(V ) =
I(a)  (M  I(a)) = X  (M  X ). Let y 6= x such that y 6∈ FV (M).
We have x ∈ X and y ∈ M, then Mxy ∈ X and Mxy ⊲∗β x. Thus, by
theorem 2.5, M ⊲∗β λx.λy.x.
3. Let P ∈ M. Using lemma 7.2, we can show that λx.xP : 〈envλx.xPω ⊢ W 〉
(irrespectively of whether x ∈ FV (P ) or not). Now, {M ∈ M/M⊲∗βλx.xP} =
{M ∈M/M⊲∗β λx.xP and λx.xP : 〈env
λx.xP
ω ⊢W 〉} ⊆ [W ] by theorem 32.4.
19
Conversely, let M ∈ [W ] and x 6∈ FV (M). Take the β-interpretation I such
that I(a) = X = {M ∈ M/M ⊲∗β xP where P ∈ M}. Then M ∈ I(W ) =
(M  X )  X . Since x ∈ M  X , then M x ∈ X and M x ⊲∗β xP where
P ∈ M. Thus, by theorem 2.5, M ⊲∗β λx.xQ where Q ∈ M.

The meanings of the types U and V (of lemma 35) contain only terms which are
reduced to closed terms. Due to the position of ω in W , the meaning of W does
not solely contain terms which are reduced to closed terms. In U and V , ω has a
negative occurence, but in W , ω has a positive one. We will generalize this result.
Definition 36 1. We define two subsets U+ and U− of U as follows:
• ∀ a ∈ A, a ∈ U+ and a ∈ U−.
• ω ∈ U−.
• If U ∈ U+, then U ⊓ V ∈ U+.
• If U, V ∈ U−, then U ⊓ V ∈ U−.
• If U ∈ U− and T ∈ U+, then U → T ∈ U+.
• If U ∈ U+ and T ∈ U−, then U → T ∈ U−.
2. Let S ⊆ V where S 6= ∅.
(a) We say that a term M is S-almost closed if M ⊲∗β N and FV (N) ⊆ S.
We denote MS the set of S-almost closed terms.
(b) We define the function IS : A 7→ P(M) by: ∀ a ∈ A, IS(a) =MS .
The next lemma shows that IS is a β-interpretation and relates IS(U) and MS
according to whether U ∈ U+ or U ∈ U−.
Lemma 37 Let S ⊆ V where S 6= ∅.
1. IS is a β-interpretation. I.e., ∀ a ∈ A, IS(a) is β-saturated.
Hence, we extend IS to U as in Definition 23.2.
2. If U ∈ U+, then IS(U) ⊆MS .
3. If U ∈ U−, then MS ⊆ IS(U).
Proof 1. Easy since IS(a) =MS which is β-saturated (use theorem 2.1).
We show 2 and 3 by simultaneous induction on U .
2. Let U ∈ U+ and M ∈ IS(U).
– If U = a, the result comes by definition of IS .
– If U = U1 ⊓ U2 and U1 ∈ U+, then M ∈ IS(U1) and, by IH, M ∈ MS .
– If U = V → T , V ∈ U− and T ∈ U+, then let x ∈ S. We have x ∈ MS ,
then, by IH, x ∈ IS(V ) and Mx ∈ IS(T ). By IH, Mx ∈ MS , then
Mx⊲∗β N and FV (N) ⊆ S. We examine the reduction Mx⊲
∗
β N .
∗ If M ⊲∗β P and N = Px, then FV (P ) ⊆ FV (N) ⊆ S.
∗ If M ⊲∗β λy.Q and Q[y := x]⊲
∗
β N , then
M ⊲∗β λy.Q = λx.Q[y := x]⊲
∗
β λx.N and FV (λx.N) ⊆ FV (N) ⊆ S.
Then M ⊲∗β M
′ and FV (M ′) ⊆ S. Thus M ∈ MS .
3. Let U ∈ U− and M ∈ MS .
20
– If U = a, the result comes by definition of IS .
– If U = ω, then M ∈ IS(U) =M.
– If U = U1 ⊓ U2 and U1, U2 ∈ U−, then, by IH, M ∈ IS(U1) and M ∈
IS(U2), then M ∈ IS(U1 ⊓ U2).
– If U = V → T , V ∈ U+ and T ∈ U−, then let P ∈ IS(V ). We have
M⊲∗βN and FV (N) ⊆ S. By IH, P ∈M
S , then P⊲∗βQ and FV (Q) ⊆ S.
We have MP ⊲∗β NQ and FV (NQ) = FV (N) ∪ FV (Q) ⊆ S, then
MP ∈MS , and, by IH, MP ∈ IS(T ). Thus M ∈ IS(V → T ).

The next corollary shows that if U ∈ U+ then [U ] contains only elements which
β-reduce to closed terms and [U ] is the set of all terms that β-reduce to closed
terms typable by U . Note that in the proof of 2 below, we need β-saturation and
that this is the reason why we adopted exclusively β-saturation since remark 34.
Corollary 38 Let U ∈ U+.
1. If M ∈ [U ], then M ⊲∗β N and N is closed.
2. [U ] = {M ∈ M / M ⊲∗β N and N : 〈() ⊢ U〉}.
Proof
1. Let S ⊆ V such that S 6= ∅ and S ∩ FV (M) = ∅. Since M ∈ [U ], then M ∈
IS(U), and, by lemma 37, M ⊲∗β N and FV (N) ⊆ S. But, by theorem 2.1,
F (N) ⊆ FV (M), then FV (N) = ∅.
2. Let M ∈ [U ]. By lemma 29.4, M : 〈Γ ⊢ U〉. By 1, M ⊲∗β N and N is closed.
Hence by subject reduction for β corollary 14, N : 〈Γ ↾N⊢ U〉. Since N is
closed N : 〈() ⊢ U〉.
Conversely, let M such that M ⊲∗β N and N : 〈() ⊢ U〉, and take a β-
interpretation I. By theorem 26, N ∈ I(U) and, since I(U) is β-saturated,
M ∈ I(U). Then M ∈
⋂
I β−interpretation I(U) and so, M ∈ [U ].

Remark 39 Note that neither strong nor weak normalisation holds in general for
typable terms. For example, (λx.xx)(λx.xx) : 〈() ⊢ ω〉. As another example, take
λy.y((λx.xx)(λx.xx)) : 〈() ⊢ (ω → a)→ a〉 by lemma 35.
We cannot even establish a strong normalisation result for positive types. For
example, (λy.λx.x)((λx.xx)(λx.xx)) : 〈() ⊢ a → a〉. In what follows however, we
will establish a weak normalisation result for positive types.
Definition 40 We define the function I : A 7→ P(M) by: ∀ a ∈ A, I(a) = N
where N is the set of β-normalising terms.
Lemma 41 1. I is a β-interpretation. I.e., ∀ a ∈ A, I(a) is β-saturated.
Hence, we extend I to U as in Definition 23.2.
2. If U ∈ U+, then I(U) ⊆ N .
3. Let N ′ = {xM1 . . .Mn ∈ M/x ∈ V and M1 . . .Mn ∈ N}. Note, N ′ ⊆ N .
If U ∈ U−, then N ′ ⊆ I(U).
Proof 1 is obvious. We show 2 and 3 by simultaneous induction on U .
2. Let U ∈ U+ and M ∈ I(U).
21
– If U = a, the result comes by definition of I.
– If U = U1 ⊓ U2 and U1 ∈ U+, then M ∈ I(U1) and, by IH, M ∈ N .
– If U = V → T , V ∈ U− and T ∈ U+, then let x ∈ V ⊆ N ′ such that
x 6∈ FV (M). By IH, x ∈ I(V ) and Mx ∈ I(T ). By IH, Mx ∈ N .
Hence, by theorem 2.6, M ∈ N .
3. Let U ∈ U− and M ∈ N ′.
– If U = a, the result comes by definition of I.
– If U = ω, then M ∈ I(U) =M.
– If U = U1⊓U2 and U1, U2 ∈ U−, then, by IH,M ∈ I(U1) andM ∈ I(U2),
then M ∈ I(U1 ⊓ U2).
– If U = V → T , V ∈ U+ and T ∈ U−, then let P ∈ I(V ). We have
M = xM1 . . .Mn where Mi ∈ N for 1 ≤ i ≤ n. By IH, P ∈ N . Hence,
MP ∈ N ′ and by IH, MP ∈ I(T ). Thus M ∈ I(V → T ).

The next corollary shows that if U ∈ U+ then [U ] contains only elements which
are normalisable.
Corollary 42 Let U ∈ U+.
1. If M ∈ [U ], then M is normalisable.
2. If M : 〈() ⊢ U〉 then M is normalisable.
3. [U ] = {M ∈ M / M ⊲∗β N , N is in normal form and N : 〈() ⊢ U〉}.
Proof
1. By lemma 41, M ∈ [U ] ⊆ I(U) ⊆ N .
2 By Theorem 26, M ∈ I(U). By lemma 41, M ∈ N .
3. Let M ∈ [U ]. By Corollary 38.2, M ⊲∗β P and P : 〈() ⊢ U〉. Since by 1, M is
normalisable then by Church-Rosser P is normalising. Let N be the normal
form of P . By Subject reduction corollary 14, N : 〈() ⊢ U〉.
The inverse inclusion is obvious by corollary 38.2.

Remark 43 It should be noted that positive types are not exlusively the types which
satisfy the properties proved about them (e.g., corollary 38). For example, let us take
the non-positive type U ′ = (ω → b)→ (a→ a) where a and b are different. We can
show that [U ′] only contains terms which reduce to the closed term λx.λy.y (and
that λx.λy.y : 〈() ⊢ U ′〉). Hence, U ′ is a type which is not positive, yet for which
corollary 38 holds. Note that, since a and b are different, then (ω → b) cannot be
used in type derivations.
6 Conclusion
In this article, we considered an elegant intersection type system for which we estab-
lished basic properties which include the subject reduction and expansion properties
for β. We gave this system a realisability semantics and we showed its soundness
and completeness using a method comparable to (yet more detailed than) Hindley’s
completeness semantics for an earlier intersection type system. The basic difference
22
between both proofs is that Hindley’s notion of saturation is based on equivalence
classes whereas ours is based on a weaker requirement of weak head normal forms.
Hence, all of Hindley’s saturated models are also saturated in our framework yet on
the other hand, there are saturated models based on weak head normal form which
cannot be models in Hindley’s framework. This means that our method provides
a larger set of possible models and this leaves the choice open for better models or
counter-models for particular applications. We have even proved that for different
notions of saturation (based on weak head reduction and normal β-reduction) we
obtain the same interpretation for types. Another difference between our approach
and that of Hindley is that he constructs his models modulo the convertibility
relation, whereas we establish that the interpretation of types is stable by both
β-reduction and β-expansion.
Furthermore, we reflected on the meaning of types, especially on the so-called
abstract data types where typability and realisability coincide. The presence of ω
in intersection type systems prevents typability and realisability from coinciding as
one sees for example in λx.xP (where P may contain free variable and may not be
normalisable) whose type is (ω → a) → a. We found a set of types U+ for which
we showed that typability and realisability coincide. We have also shown that this
set satisfies the weak normalisation property.
Acknowledgements
We are grateful for the comments received from M. Dezani, J.R. Hindley, V. Rahli,
J.B. Wells and the anonymous referee.
References
[1] F. Alessi, F. Barbanera and M. Dezani-Ciancaglini, Intersection types and
lambda models. Theoretical Computer Science 355, pp. 108-126, 2006.
[2] H.P. Barendregt, M. Coppo and M. Dezani-Ciancaglini, A filter lambba model
and the completeness of type assignement. Journal of Symbolic Logic, vol 48,
num 4, 1983.
[3] H.P. Barendregt, The Lambda Calculus, Its Syntax and Semantics. North-
Holland, 1985.
[4] S. Carlier and J.B. Wells, Expansion: The Crucial Mechanism for Type Infer-
ence with Intersection Types: A Survey and Explanation. Under consideration
for publication in the Journal of Functional Programming.
[5] M. Coppo and M. Dezani-Ciancaglini, A new type-assignment for the λ terms.
Archiv fu¨r mathematische logik 19, pp. 139-156, 1978.
[6] M. Coppo and M. Dezani-Ciancaglini, An extension of the basic functionality
for the λ-calculus. Notre Dame journal of formal logic 21(4), pp. 685-693. 1980.
[7] T. Coquand, Completeness theorems and lambda-calculus. TLCA05, LNCS
3461, pp. 1-9, 2005.
[8] R. David, Normalization without reducibility. Annals of Pure and Applied Logic
107, pp. 121-130, 2001.
[9] S. Farkh and K. Nour, Un re´sultat de comple´tude pour les types pour-tout-
positifs du syste`me F. Comptes rendus de l’Acade´mie des Sciences, Paris, 326,
S’erie I, pp. 275-279, 1998.
23
[10] S. Farkh and K. Nour, Re´sultats de comple´tude pour des classes de types du
syste`me AF2. Theoretical Informatics and Applications, vol 31, num 6, pp.
513-537, 1998.
[11] J.R. Hindley, The simple semantics for Coppo-Dezani-Salle´ types. In Interna-
tional symposium on programming (Turin, 1982). Lecture Notes and Computer
Science, vol 137, Springer, Berlin, pp. 212-226.
[12] J.R. Hindley, The completeness theorem for typing λ-terms. Theoretical com-
puter science, vol 22, pp. 1-17, 1983.
[13] J.R. Hindley, Curry’s types are complete with respect to F-semantics too. The-
oretical computer science, vol 22, pp. 127-133, 1983.
[14] J.R. Hindley, Basic Simple Type Theory. Cambridge University Press.
[15] J.L. Krivine, Lambda Calcul : types et mode`les, Masson, Paris, 1990.
[16] R. Labib-Sami, Typer avec (ou sans) types auxilie`res. Manuscript.
[17] K. Nour and K. Saber, A completeness result for the simply typed λµ-calculus.
Submitted.
[18] Patrick Salle´. Une extension de la the´orie des types en lambda-calcul. In G.
Ausiello and Corrado Bo¨hm, editors, Fifth International Conference on Au-
tomata, Languages and Programming, volume 62 of Lecture Notes in Computer
Science, pp. 398-410. Springer, July 1978.
[19] S. van Bakel. Principal type schemes for the strict type assignment system.
Journal of Logic Computation 3(6), pp. 643-670, December 1993.
[20] J. B. Wells. The essence of principal typings. In Proc. 29th Int’l Coll. Automata,
Languages, and Programming, volume 2380 of LNCS, pp. 913-925. Springer-
Verlag, 2002.
24
