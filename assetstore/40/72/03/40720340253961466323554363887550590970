Theoretical Computer Science 17 (1982) 279-301 
North·Holland Publishing Company 
ORDERINGS FOR TERM-REWRITING SYSTEMS· 
Nachum DERSHOWITZ 
D~partm.~n.t of Comput~r Sci~n.c~. Un.iv~rsity of IlIin.ois 01 Urban.a-Champaign, 
U,bana,lL 61801, U.S.A. 
Communicated by Z. Manna 
Received August 1979 
Revised September 1980 
279 
A ..... d . Methods of proving that a term-rewriting system terminates are presented. They are 
based on the intuitive notion of 'simplification orderings'. orderings in which any term that is 
syntactically simpler than another is smaller than the other. M a consequence of Kruskal's Tree 
Theorem, any nonterminating system must be self-embedding in the sense that it allows for the 
derivation of some term from a simpler one; thus termination is guaranteed jf every rule in the 
system as a reduction in some simplification ordering. 
Most 01 the orderings that have been used for proving tennination are indeed simplication 
orderings; using this notion often allows for much easier proofs. A particularly useful class of 
simplification orderings, the 'recursive path orderings', is defined . Examples of the use of 
simplification orderings in termination proofs are given. 
1. IDtrociDctiOD 
It is sometimes convenient to express programs in the form of term-rewriting 
systems. Such programs are easy to understand and have a simple, elegant syntax 
and semantics. For example, the following system of five rewrite rules transforms 
logical formulae [containing the operators v (disjunction), A (conjunction), and 
..., (negation») into equivalent formulae in disjunctive normal form: 
...,(a v fJ) -+ (...,a A ...,fJ) 
, (a A fJ) ... (-,a v ...,fJ ) (A) 
a A (fJ V y) ... (a AfJ) V (a A y) 
(fJ V y ) A a ... (fJ A a) v (y A a). 
The first rule indicates that double negations may be eliminated; the second and 
third rules apply DeMorgan's laws to push negations inward; the last two rules 
apply the distributivity of conjunction over disjunction. Such systems are becoming 
• Research supported in part under NSF grants MCS 77·22830 and MCS 79-04897. A previous 
version of this paper appeared in the Proceedings of the Twentieth IEEE Symposium on Foundations of 
Computer Science , October 1979. 
0304-3975/82/0000-0000/$2.75 © 1982 North-Holland 
280 N. Dershowitz 
increasingly popular in automated simplification and theorem-proving applications; 
some examples are Iturriaga [11], Moses [20J, Griesmer and Jenks [7], Hearn [8], 
Ballantyne and Bledsoe [1], Boyer and Moore [2], Carter et aL [3J, Weyhrauch [28], 
and Musser [2 I], 
The above program is executed for a given input term by repeatedly replacing 
sub terms of the form of the left-hand side of some rule with the corresponding 
right-hand side, until no further rewrites are possible. Thus, the second rule in the 
above system may be applied to the input term a A ,,(b v c) by replacing '(b v c) 
with (,b .f>, iC), thereby obtaining a II -,(--,b II IC). The computation iterates in this 
manner, at each stage choosing some applicable rule and applying it to some 
subterm. Continuing with our example: By applying the third rule, we get a /\ 
("b v ,'ci, Two applications of the first rule then yield a A (b v ci. Finally, an 
application of the fourth rule gives (a lib) v (a lie) which is in disjunctive normal 
form. At this point, no rule is applicable and the system is said to have ·terminated' 
with the final result (a A b) v (a A c i. 
To verify the correctness of such a program, one must show 
(1) that it always terminates, i.e. given any input term, execution will always 
reach a stage for which there is no way to continue applying rules, and 
(2) that it is ·partially correct', in the sense that if it does terminate, then the 
final result is what was desired. 
In this paper, we deal only with the termination aspect of correctness. 
The difficult).! in proving the termination of a system such as the one for disjunctive 
normal form above stems from the fact that while some rules may decrease the 
size of a term, other rules may increase its size and duplicate occurrences of 
subterms. Furthermore, applying a rule to a subterm not only affects the structure 
of that subterm, but also changes the structure of its superterms. Any proof of 
termination must take into consideration the many different possible rewrite sequen-
ces generated by the nondeterministic choice of rules and subexpressions. Various 
methods for proving termination of term-rewriting systems have been suggested 
in recent years, including Iturriaga [11], Knuth and Bendix [13], Manna and Ness 
[19], Lankford [15], Lipton and Snyder [18], Plaisted [23], Plaisted [24J, Dershowitz 
and Manna [6J, and Lankford [16]. In this paper we present new methods of proving 
termination. One can show (Huet and Lankford [1 O]i that termination is in general 
an undecidable property of such systems. 
The partial correctness of term-rewriting systems, on the other hand, is often 
easy to verify. One usually shows that each rule is 'value-preserving', i.e. if I ~ r is 
a rule in the system, then 1=, in the intended interpretation. (In the above example, 
each rule preserves logical equivalence.) Furthermore, one must verify that all 
possible final results have the desired properties, for example by showing that were 
a final result not of the desired form, then some rule could still be applied to it. 
(By the definition of disjunctive normal form, no compound formula may be 
negated, nor maya disjunction be conjoined with another formula.) Hence, proving 
partial correctness is in many cases formally quite simple. 
Orderings fo r term -reH,-"riring s}'Stems 2St 
Another prope rty of term-revl'Titing systems that is often desirable is <confluence', 
i. e. that there be a unique final result for all rewrite sequences beginning with the 
same term. The above system, for example, is not confluent : applying OeMorgan's 
laws to ,(a, ib ve)) yields (-1a v (-,b, - e )), while first distributing leads to 
(((,a A ,a) v (- a, -'c)) v (( -,b A -,a) v (- b A -,c ))). Confluent term-rewriting sys-
tems are used as decision procedures for equational theories ; see, among others, 
Knuth and Bendix (13), Slagle [25], Lankford [15), Huet [9], Lankford and Ballan-
tync [ 17], and Stickel and Peterson (26). Termination is frequently a prerequisite 
for demonstrating confluence. 
To illustrate the difficulty of determining if and why a system terminates we 
present four variations on system (A): 
The first variation is 
- iQ' -+a 
a 'i{3v1' ) -+ (a ,(3)v(a '1') 
({3 v 1' ) A a -+ ({3 A. a) v (1' A a). 
(B ) 
He re the second and third rules have been modified to introduce additional double 
negations (that can be e liminated by the first rule). 
The next variatio n is the same as System (B) with the two rules for distribution 
removed: 
-,--'a -+ Q 
(C ) 
~(a ,., (3 ) -+ (-,-,- 0' V --,~-,{3 ). 
This system pushes negations into disjunctions or conjunctions and eliminates 
double negations . 
The third variation is 
-,(a v (3) -+ i(-,-,-,,, A -,-,- (3 ) A (-,-,-a A , - -,(3 )) 
-,(" A (3) -+ (-,-,-,,, v -''-;'(3 ) v (-,-,-u v ,-"(3)) (0 ) 
(a v a)...,. 0', 
Here the second and third rules have bee n further complicated to duplicate con-
juncts and disjuncts. To compensate, two rules for the·ir elimination have been 
added. 
282 N. Dershowitz 
The last variation is the same as System (D), except that the extra negations 
have been removed from the second and third rules: 
,(" v ~) ... (('" A ,~) A ('" A ,~)) 
,(a A ~) ... «--,a v ,~) v ('" v ,~)) (E) 
(a A a) .... a 
The reader is invited to determine which of these five systems do terminate and 
which do not. 
In the next section we characterize nontermination and show how 'simplification 
orderings' may be used to prove termination. (This extends the result reported in 
Dershowitz [5].) We explain why most of the orderings previously used for proving 
termination have in fact been simplification orderings. In Section 3 similar methods 
are described for using quasi-orderings to prove termination or the weaker concept 
'quasi-termination' . Then, in Section 4, we apply these methods to several orderings; 
in particular. we define a class of 'recursive path orderings' and show that they are 
simplification orderings. Finally, in Section 5, the use of these orderings in several 
termination proofs is illustrated. 
2. Termination and nonterminstion 
Given a set of operators F, we consider the set T(F) of all terms constructed 
from operators in F. In general, we shall assume that all operators have variable 
arity; thus, if 1 is an operator in F and I" ... , I. (n'" 0) are terms in nF), then 
1(1" ... , I.) is also a term in T(F). The results of this paper apply to any subset T 
of T(F) with the property that 1(1" . .. , I.) is a term in T, only if 1 is an operator 
in F and 110 .. .• In are also terms in T. For example, T may restrict an operator f 
to a fixed arity, in which case IU" . .. , I.) E T only if 1 is of arity n. 
A tenn-rewriting system P over such a set of terms T is a finite set of rewrite 
rules, each of the form I;(a) .... r;(a), where I;(a) and r;(a) are 'open terms', i.e. terms 
constructed from operators in F and from variables a (ranging over T). Such a 
rule may be applied to a term lET if I contains a subterm I;(a) with the terms 
a E T substituted for the variables a. The rule is applied by replacing the subterm 
I;(a) in I with the term r;(a). (The variables appearing in r; must therefore be a 
subset of those in I;.) The choice of which rule to apply is made nondeterministically 
from amongst the applicable rules; similarly, the choice of which subterm to apply 
a rule to is nondeterministic. We write I=>t' (and say '1 derives I") to indicate that 
the term I' E T may be obtained from the term lET by a single application of some 
rule in P. 
Orderings for term-rewriting systems 283 
For example , the one-rule system 
(F) 
reparenthesizes a conjunction by associating to the righl . Applying thaI rule 10 Ihe 
lerm I = « a A b )A c) A (d A e), we get 
I~(a A (b A c)) A (d A e)~a A «b A c) A (d A e» ~a A (b A ( C A (d A e ))) , 
or alternatively, 
I~(a A b) A (c A (d A e»~a A (b A ( C A (d A e))) . 
In either case , no further applications of the rule are possible. We say that a 
term-rewriting system P terminates for a set of terms T, if there exist no infinite 
sequences of terms t iE T such that t 1='>t2=}t3='>"'; conversely, a system is non-
terminating if there exists any such infinite derivation. 
The hom eomorphic embedding ('syntactically simpler') relation .,,;} on terms in 
T (F) is defined as follows (viewing terms as ordered trees): 
if and only if 
(a) f = g and Si "' 1,,, for all i, 1 ", i ", m, where 1 ", it < j, < . , ,< im'" n, or 
(b ) S <I Ii for some j, 1 <; i <; n, 
Thus, S <I I if s may be obtained from I by deletion of operators. For example, 
, -,(a A (a v b» <I (C A -,-,-, ((,a v -,a ) A (,a v -,b» ). 
We shall say that a derivation 11~/2~'" is self-embedding if Ii <It, for some 
j < k. With this notion. we can characterize nontermination in the following manner: 
Nontermination Theorem. If a term-rewriting system P does not terminate, then 
there exists an infinite self-embedding derivation. 
Proof, If P does not terminate, then by definition there exists at least one infinite 
derivation I) ='> t2='> ' .. . There can be only a finite number of operators appearing 
in the derivation (Ihose in II and in P ) and, by Ihe Tree Theorem (Kruskal [14], see 
next section). in any infinite sequence of terms t), 12, ••• with a finite number of 
operations, t; ~ tk for some i < k. 
Note thaI homeomorphic self-embedding does not, however, imply nontermina-
tion . For example, the term-rewriting system consisting of the single rule f(f(a) .... 
f(g (f( a »)) is bOlh self-embedding and terminating. But we can use homeomorphic 
embedding to give a sufficient condition for termination. First, we will need the 
following concepts: 
A parlially-ordered set (5, >-) consists of a set 5 and a transitive and irreflexive 
binary relation >- defined on elements of 5. (Asymmetry of a partial ordering 
follows from transilivity and irreflexivity.) A partially ordered set is said to be 
284 ,\1. Dn.fl1owirz 
!Otally ordered if for any two distinct elements .Ii and s' of S, either .Ii > s' or s' > s. 
For example, both the set Z of integers and the set 1" of natural numbers are totally 
ordered by the 'greater-than' relation >. The set [!J>(Z) of all subsets of the intege rs 
is partially ordered by the subset relation c . 
A partial ordering >- on a set S is said to be well-founded if it admits no infinite 
descending sequences S t >- S2 >- 53 > ... of elements of S. Thus. > is a well-founded 
ordering of N , since no sequence can desce nd beyond O. but> is not a well-founded 
ordering of Z , since -1 > - 2> - 3 > · .. is an infinite descending sequence. 
The following definition and theorem (see [19], and also [15]) are often used to 
prove the termination of term -rewriting systems: 
Definition 1. A relation R over a set of te rms T is monotonic if 
tRt' implies It. .. t . . . IRfC .. t' ... ) (replacement) 
for any terms f(. .. t . . . ), f l . . . t' .. . ) E T. 
Theorem I IManna and :>less [19] ), A term-rewriting system P = {Ii -+ rY. lover a 
set of terms T terminates, if there exists a monocollic well-founded ordering > over 
T such thaI 
li > ri, i = 1 ... . , p, (reduction ) 
for any substitution of terms in T for the oariables of 1;. 
The reduction condition asserts that applying any rule reduces the subterm to 
which the rule is applied in the we ll-founded ordering. The replacement condition 
allows for this ' local' measure by guaranteeing that reducing subterms also reduces 
the top-level term. Thus, 1=>1' implies I > t'. Since by the nature of a well-founded 
ordering there can be no infinite descending sequences, there can also be no infinite 
derivations. 
OUf method for proving termination is based on the following 
Definition 2. A transitive and irreflexive rel ation > (a partial ordering) is a 
simplification ordering for a set of terms T if it possesses the following three 
properties: 
(1) 1 > 1' impliesf!. · ·'- · .»f( . .. t ' .. . ), 
(2) fl ... t ... »1, 
(3) fC .. t . .. ) > f(. ..... ) 
for any terms f(. .. t . .. ), fC .. t ' .. :), f(. .. 
(replacement) 
(subterm) 
(de letion) 
.. . )e T. 
By iterating the subterm property, any term is also greater than any of the (not 
necessarily immediate) sub terms contained within it. The deletion condition asserts 
that deleting subterms of a (variable arity) operator reduces the term in the ordering; 
if the operators f have fixed arity, the deletion condition is superfluous. Together 
these conditions imply that 'syntactically simpler' terms are smaller in the ordering: 
Ordering( for (crm-rewririnK sy.stems 285 
Embedding Lemma. Let sand t be terms in T. If s :Q t. then s ~ I in any sirnpli/icaliofl 
ordering >- over T. 
In o ther words, the rela tion ~ is contained in the relation ~ . As usuaJ, s :.s t 
means t >- S or t = s. 
Proof. The proof is by inductio n on the size (number of occurrences of operators) 
of t. Assume that 5 1 ~ t' implies 5' ::::; t ' for any t' smaller than t and for any s'. By the 
definition of "', if s = f( s " ... , sm ) '" g (tl • ... , to) = t (m or n may be zero), then 
e ithe r 
(a) f = g and 5 j ~ t/o for all i, 1 ~ i ::S; m. in which case 5 i :S: I ;, by the induction 
hypothesis and the refore s :"S f !t,,, ... , ti_l:"S t by the replacement and deletion 
properties ; or else 
(b) s ~ t j for some j , 1 '% j ~ n , in which case s ~ Ii < g( . . . ti . .. ) = [by the induction 
hypothesis and the subterm property. 
The foHowing theore m gives a sufficient criterion for proving that a term -rewri ting 
system terminates for all inputs. 
First Termination Theorem. A term-rewriting system P={/i-iori}f_1 over a set of 
terms T terminates if there exists a simplification ordering > over T such [hal 
li >r;. i = l • .. . ,p. (reduc tion) 
for all)' substitlllioll of terms in T for the variables of Ii. 
Proof. If P does not te rminate, the n by the ~ontermination Theorem there exists 
a derivatio n ri =>" -=>t, (j < k) such that ti~tk and by the Embedding Le mma 
t i ~ It.:. in the given simplification ordering >- . On the other hand, if Ii> rio then it 
follows by the replacement property that t j >- . .. > lk and by transitivity that t i ;:- tit;. 
This contradicts the asymmetry of the partial ordering > . 
Most of the well-founded orderings that have been used to prove the termination 
of term-rewriting systems are in fact simplification orderings. The following prop-
osition explains why. 
Proposition. Any total monotonic ordering > on a set T(F) of terms o,,;er a fin ite set F 
of fixed-aritl' operators is well-founded , if and only if it possesses the subterm property. 
Proof. If >- is mo notonic and has the subterm property. then it is a simplification 
o rdering (the deletion property is vacuously true for fixed- arity operators). As is 
implici t in the preceding proof, a simplification ordering is well-founded when the 
set of operators is fi nite. 
286 N, Dershol/olitz 
On the other hand, were the subterm property not to hold, i.e. 1>-fl . . . I .. . ) for 
some term fl . .. I .. . ) E T(F), then (by monotonicity) there would exist an infinite 
descending sequence 1>- fl . .. I ... ) >- fl . .. fl . .. I ... ) ... ) >- •. . of terms in T(F) . 
At the end of the next section a sufficient condition for the well-foundedness of 
a simplification ordering is given. 
3. Qaasi-orderings 
In this section we investigate methods for proving termination that use quasi-
orderings. A quasi-ardered set (S, ?:o) consists of a set S and a transitive and reflexive 
binary relation 2:: defined on elements of S. For example, the set Z of integers is 
quasi-ordered under the relation 'greater or congruent modulo 10'. Given a quasi-
ordering 2:: on a set S, define the equivalence relation = as both 2:: and :s , and 
the partial ordering >- as 2:: but not :s . 
We say that a term-rewriting system Pis quasi-Ierminating for a set of terms T, 
if all (infinite) derivations contain only a finite number of different terms. 
Equivalent1y. any infinite derivation must contain some term twice. Thus, termina-
tion of a quasi-terminating system for a given input term is decidable (construct all 
derivations initiated by that term until they terminate or repeat). The following 
theorem may be used to prove termination for all inputs. 
Theorem 2_ A quasi-Ierminating lerm-rewriting syslem P = {I, ... r,H_. over a sel of 
terms T terminates J/ there exists a monotonic quasi-ordering ~ such that 
I j> T;. i=l .. . . . p (reduction ) 
for any substilulion of terms in T for Ihe variables of I,. 
Proof_ In any infinite derivation of a quasi-terminating system there must 
be a segment 1,"*1, •• "*" ·,,*t, = t, (i< j). Now, it must be that for some (not 
necessarily proper) subterm s, of I" there is a self-derivation 
s, "*s, • • ,,* . . ·,,*s. "*s ... ,,* . .. ,,*s/ = s, in which a rule is applied to a top-level 
term s •. By the monotonicity property, if 1 2:: 1' then f ( ... t. .. )2:: f ( •. . 1' ... ), and 
thus 1=>1' impJies t ?:. t' . But then Sj'?:. Si + . ?:' ·· ·:;::S./t> Sk+l '?:. · · '~ Sj=Si' and by 
transitivity Sit > $/0:+ 1 ~ 5,,,, which is a contradiction. 
To prove that a system is quasi-terminating, one can use the following 
Qooasi-tenniaatioa "I1Ieor"",. Lellhe quasi-ordering 2:: be a monolonic extension of 
a simplification ordering >- on a sel of terms T. A term-rewriting syslem P = {I, ... r,lf •• 
Orderings for term-rewriting systems 287 
over T is quasi-terminating if 
Ii ?:. ri, i = 1, ... , p, 
for an y substitution of terms in T for the variables of Ii. 
Prool. By the Nontermination Theorem and the Embedding Lemma, if P does 
not terminate, then in any infinite derivation t l ::::} 12::::}' •• , ti:s tk for some j < k. 
On the other hand, if Ii?:. ri, then it follows by monotonicity and transitivity that 
tj;:: tk., and consequently ti ~ tk. It must be then that tj = tk ~ the system therefore 
quasi-terminates. 
Analogous to the definition of a simplification ordering, we have 
Definition 3. A transitive and reflexive relation?:. (a quasi-ordering) is a quasi-
simplification ordering for a set of terms T if it possesses the following three 
properties: 
(1) t":t'impliesf( ... t. .. )":f( ... t' .. . ), 
(2) f( ... t . .. ) ": t, 
(3) f( ... t.. ·)":f(·.· ... ) 
for any terms f(. .. t . .. ), fl . .. t' ... ), fl . .. 
(replacement) 
(subterm) 
(deletion) 
.. . )E T. 
The Embedding Lemma also holds for quasi-simplification orderings, i.e. s "" t 
implies s:::; t. 
We generalize the termination theorem of the previous section with a 
Second Termination Theorem. A term-rewriting system P = {Ii -+ r;}f= lover a set of 
terms T terminates if there exists a quasi-simplification ordering ;:: such that 
Ij > ri, i = 1, ... , p, (reduction) 
for any substitution of terms in T for the variables of Ii. 
Proof. If no rules are applied to the top-level terms t; of an infinite derivation 
tl ~t2~' •• , then some proper subterm of tl must also initiate an infinite derivation. 
Thus, for any infinite derivation tl ~t2~' • " some (not necessarily proper) subterm 
SI of tl must initiate an infinite derivation SI~S2:::::::>' - '::::}S;:::::::>5i+l:::::::>- _. in which 
a rule is applied to a top-level term Si_ Under the assumptions of the theorem, 
t1 ~ S1 (subterm property), 51?:. 52?':" .. ~ Si (replacement property), and Si >- Si+l 
(reduction). By transitivity, then, tl > Si-J. 
Accordingly, were P not to terminate, then an infinite descending sequence of 
terms U J would exist, beginning with Ul = tl and U2 = Si+l, and then continuing with 
the descending sequence extracted from the remaining infinite derivation 
Si+I~Si+2~' -'. Since this sequence U1>U2>-' ->ui>' - ->Uk>-" is con-
288 :'V. DershQwi/z 
structed from a finite number of operators, ui:S Uk for some j < k (Tree Theore m 
and Embedding Lemma). But U i > Ui< an d ti l ::S Uk is a contradiction. 
\Ve conclude this section with a sufficient condition for the restriction >- of a 
quasi-simplification ordering <: to be well-founded. 
Definition 4 (Kruskal [14]). A set S is we/l-quasi-ordered under a quasi-ordering 
:$ if every infinite seq ue nce s" 52 •... of e lements of S contains a pair of elements 
51 and Sk, j < k , such that 5,:S Sk_ 
Note that any finite set is well-quasi-ordered under any quasi-ordering (including 
eq uality). It foll ows from the definitions that a set is well-founded under the partial 
ordering >- whe n it is well-quasi-ordered under :S ; the converse is true for total 
orde rings, i.e. if a set is weB-founded under a total ordering > . the n it is well-quasi-
orde red under :$ . 
\Vell-foundedness Theorem. Let ~ be a quasi-simplification ordering for a set of 
terms T(F). If there exists any well-quasi-ordering ::::: of the set of operators F such that 
/'l::g implies /(t" ... , to l<=git" . ..• to) (operator replacement) 
for all terms f(t , . .. . '[0). g(t " .. . • [>0 ) E T(F ), [hen T (F ) is lVell-quasi-ordered under 
:::; and well-founded under the partial ordering>. 
Corollary. If <: is a quasi-simplification ordering/or a set of terms T (F) overa finite set 
of operators F. then T(F) is well-founded under the partial ordering>. 
To prove th is theorem. we first need the full version of Kruskal's Tree Theorem. 
A quasi-ordering :::; of a set of operators F can be extended to a homeomorphic 
embedding relation "'~ on the terms nFl, as follows: 
if and only if 
(a) f <g and s' ~ .~ (J. ' for all i. 1 ~ i ~ In , where l::.:;; h <h < ' .. < jm .:-s n , or 
(b ) s~_"", If fo r some j. l .:-s j.:-sh. 
For example , 
2 2 
/ "- / "'-
2 2 '"I. 3 1 
, i / "-
o o 0 3 
I 
o 
Orderin!!,!, for term-rewriting systems 289 
where ~ is the 'less than or equal' ordering of numbers, Note that ~, as defined 
in the previous section, is the homeomorphic extension of equality. 
Tree Theorem (Kruskal [14]). A set F of operators is well-quasi-ordered under a 
quasi-ordering :::S, if and only if the set of terms T(F) is 'I,vell-quasi-ordered under 
the embedding relation ~c<:. 
As a special case: if F is finite, then T(F) is well-quasi-ordered under ~, since 
F is well-quasi-ordered under =. A simple proof of the general theorem may be 
found in Nash-Williams [22]. 
Proof of Well-foundedness Theorem. If F is well-quasi-ordered under :::::, then 
T(F) is well-quasi-ordered under <Q~ (Tree Theorem). It is easy to see (along the 
lines of the Embedding Lemma) that s <Q~ t implies s ::S t. Thus, T(F) is well-quasi-
ordered under:::: and is therefore well-founded under >-. 
4. Applications 
In this section, we give a recursive definition of an ordering on terms and show 
that it is a simplification ordering and also that (under suitable conditions) it is 
well-founded. 
Given a partial ordering ;::- on a set S, it may be extended to a partial ordering 
» on finite multisets of elements of S, wherein a multiset is reduced by removing 
one or more elements and replacing them with any finite number of elements, each 
of which is smaller than one of the elements removed. For example, if > is the 
'greater than' ordering on the natural numbers, then {3, 3, 4, O}»{3. 2. 2. 1. 1, 1. 
4} in the multiset ordering, since an occurrence of 3 has been replaced by five 
smaller numbers and in addition an occurrence of 0 has been removed (i.e. replaced 
by zero elements). Such a multiset ordering» is well-founded, if and only if S is 
well-founded under >- (see [6]). We use this multiset ordering in the following 
Definition S. Let ;::- be a partial ordering on a set of operators F. The recursive 
path ordering ;::-* on the set T(F) of terms over F is defined recursively as follows: 
if and only if 
or 
f>-g and {s}»*{t" ... , tnl. 
290 N. DershoMlitz 
or 
f~g and{s,. ... , Sm}",'{I}, 
where »* is the extension of >* to multisets and £':* means > * or =. 
Two terms shall be considered equal if they are the same except for permutations 
among subterms. This definition is similar to a characterization of the ' path of 
subterms' ordering given in [24). 
To determine, then. if a term s is greater in this ordering than a term t, the 
outermost operator.; of the two terms are compared fir.;t. If the operator.; are equal, 
then those (immediate) subterms of 1 that are not also subterms of S must each be 
smaller (recursively in the term ordering) than some subterm of s. If the outermost 
operator of S is greater than that of I, then S must be greater than each subterm 
of I; while if the outermost operator of s is neither equal to nor greater than that of I, 
then some sub term of s must be greater than or equal to I. For example, representing 
terms as trees, we have 
i 
2 
/ ............ 
s = 3 \ > ' 
3 
I 
\ 
2 / ............ 2 
=1 
I /"-
o 0 3 
/"- /"-3 0 3 3 
I 
o 
I I I 
o 0 0 
in the recur.;ive path ordering over T(N) with the operator.; ordered by >: By the 
definition of > *. to compare two terms with the same outermost operator, in our 
case 3, we must compare (the multisets of) their subterms, viz. 
/ 2 ............ 
3 \ and 
\ 
2/ ............ 2 
I / "-
003 
I 
o 
/"- /"-3 0 3 3 
I I I 
o 0 0 
Since 2> \, for the former to be greater than the latter we must have 
/ 2 ............ 
3 \ 
I / "-
0 0 3 
I 
o 
2 
/"-
>*3 0 I ' 
o 
2 
/"-3 3. 
I I 
o 0 
Orderings fo r rerm-r~ wrjting s },stems 
Since 2 = 2 , we must now compare 
in the multiset ordering » "'. Finally, since 
1 
/ "-o 3 
I 
o 
is greater than both 
o and 
3 
I 
" o 
we indeed have s > * t. 
We have 
Theorem 3. The recursive path ordering > * is a simplificalion ordering. 
291 
Proof. We must show that the relation > * is irreftexive and transitive and that it 
satisfies the replacement, subterm~ and deletion conditions of simplification 
orderings. 
Irrejfexi vicy : We wish to prove that [ ~* t for any term c. The proof is by induction 
on the size (number of operators) of I. If I is of the form f(l .. ... , 10 ) , then by the 
inductive hypothesis, the relation >* is irreftexive for its subterms Ij. It follows 
from the definition o f the multiset o rdering that {I ..... , lo j '1'- * {I" . .. , I.j. Thus, 
by the definition of the recursive path ordering, f (l" ... , I.) >* f (I .. ... , t.). 
Subterm: We show instead that if s :::: * 1 for two terms 5 and t, then 
(a) s >* t} for any immediate subterm t j of t and 
(b) f (. .. 5 . . . )". * I for any superterm fl . .. s ... ) of 5. 
Since 5 ~ . 5 , it follows from (b) that f ( . .. 5 ... ) > * 5 , as desired. 
Let g and h be the outermost .operators of 5 and I, respectively. We prove (a ) 
and (b) simultaneously by induction on the (combined) size of 5 and I. 
For (a), 5 > * Ii! consider three cases: 
(1) g ~ h. By the de finition of "'*, if s ~. I then 5, ~* I j for some subterm 5i of s, 
and by the inductive hypothesis (b) it follows that s >" I j • 
(2) g'" h. In this case, it follows directly from the definition of > * that s"." I j • 
(3) g l:. h. From the definition of >'\ we have Sj ~* t for some subterm s, of s. 
By the inductive hypothesis (a) , Si >-* I j, and by hypothesis (b), we get s >* Ij. 
292 :V Dnsho .... it:. 
For (bJ, {(. .. s . .. J"" I, we again conside r three cases: 
1 1) f ~ It. We already know (a ) that s :>* I i for any subterm I, of I. Thus, by the 
definition of th e multiset ordering, { . .. s . .. } » *{ ... ti' .. } and by the definiti on of 
>- B./(. .. 5 .. . »*r. 
(2) I:> h. Since S >' tf, it foll ows from the inductive hypothesis (b) that 
{(. .. s ... J >- * I i ' and therefore {f(. .. s . .. )) »*{ ... t j .. . } in the multiset ordering. 
Thus, by the definition of >-*, {(. .. s ... ) >-* t . 
(3) I ~ It. We are given that s :0: * t. It follows from the de fin ition of the multiset 
ordering that { ... s ... } :!e: '{t } and fro m the definition of >* that I i. .. s ... ) > * t. 
Transith.:iry: \Ve must show that s >-* rand t >"" U together imply s >* u. 
:\"ote that by the subterm condition, s > * t i and t >B Uk for any immediate sub-
terms ti of t and u:.: of u. Let /, g, a nd It be the outermost operators of s, t, and u~ 
respectivel y. The proof is by induction on the size of s, t, and H and considers five 
cases: 
(1) {:> h. By the definition of s >- * u, we must show that s :> * U k for all subte rms 
Uk of U. But we are given that 5 >-* I >* U k and the result fo llows by the in ductio n 
hypothesis, since UI; is smaller than u. 
(2) I?':. g. h. v.,;'e are given that 5i ~* I > * u for som e subterm Si of S. By the 
induction hypothesis. Si >- * ll. since S i is smaller than s. and hy the definition of >* , 
5 >- * u. 
(3) { ~h ~ g. We must show that { .. . Si .. • } »* { ... II , ... } and are given that 
51 ~* I >* U k for some 5 i and for all fl k. T he result follows by the induction hypothesis. 
(4 ) oR:t II. We are give n that s >* '{ for any subterm t j of t, while by the definiti on 
of ! ~o--* u, we have r" ~* u for some t,. Thus, s >* t; 2:::* u, and S > * u follows from 
the induction hypothesis, since Ii is smaller than t. 
15! {= Ii ~ h. \Ve must show that { ... Si .. . } »8 { ... U k .. . } and are given that 
{ •.. Si . .. } »* {. .. I, ... J » * { ... U k . .. }. By the induction hypothesis, Si >- * t,:>* U k 
implies Sj >* Hie for all s;. I i. and Uk . and since the extensio n of a transitive re la tion 
to multisets is also transitive, it foll ows that { ... S i . .• },..* { ... u, ... }. 
These five case~ cover all possible relations between t, g, and h (if It:: g, then 
cases 1, 2, and 3 cover {:> h, f ~ h, and f ~ h, respectively ; if ( :: g, then cases 1, 
4, and 5 cover Ii :: " '" I, g '" ", and Ii = h = f, respectively). Thus, our proof of 
transitivity is complete. 
Replacemenl: By the definition of a multiset ordering, { ... s ... } »*{ ... s' ... } 
if s >-* s. The refore , by the de finition of the recursive path orde ring, 
(L .. s ... ) > * {L .. s' . .. J. 
Deletion: By the de finition of a multiset ordering, { .. . .< ..• },..* { . ..... }. Thus, 
by the definition of the recursive path ordering, { I ... s ... J >* {( . ..... J. 
Since the recursive path ordering is a simplification orderin g. it may be used in 
conjunction \",ith the First Term ination Theorem to prove the termination of 
term-rewri ting systems. The following theorem gives a necessary and sufficie nt 
condition fo r the orderin g to be well-founded . 
Ordering~ for (erm · rt' l\'rilin,~ SrSlem:J' 293 
Theorem 4 . The recursive path ordering >- * 011 Ihe sel of lerms T(F ) is well-founded. 
if and only if the partial ordering >- on Ihe sel of operators F is well-founded. 
Proof. The 'only-if direction follows tri vially from the fact that for f. g E F, f >- g 
implies f >* g. 
The proof of the 'if ' d irection is an application of the Well -foundedness Theorem : 
If >- is well-founded , then (using Zorn's Lemma) it can be extended to some total 
well-founded ordering >- _ o n F. Since F is then well-quasi-ordered under::::: + and 
the recursive path ordering >-! satisfies the operator replacement condition, i.e. 
f ?:. - g implies f(flo ... , In) ?:. ~ gil" ... , In ) (by the subterm property). it follows (by 
the Well-foundedn ess Theorem) that >-~ is well-founded. But >~ contains >* 
(t >- * t' implies 1 >-~ t l by a straightfo rward induction); therefore. > * must be 
well-founded as well. 
It turns out that when >- is a total ordering, the recurs ive path ordering >~ is 
in effect the same as the 'path of subterms' ordering defined in Plaisted [24] in a more 
complex manner. When >- is partial, the recursive path ordering is contained in (an 
obvious extension of) the 'path of subterms' ordering. Our proof of well-foundedness 
extends to the latter as well; Plaisted's proof is considerably longer a nd requires that 
> be total. 
The 'multise!' and 'nested multise!' o rde rings in [6] and the 's imple path ' ordering 
in [231 are special cases of this recursive path ordering in which the multisct 
constructor is grea ter than other operators. Their well-foundedness fo llows as a 
corollary of this theorem. 
One wa:y of extending the recursive path ordering is to allow some function of 
a term fftl •...• tnJ to serve the role of th e operator f. For example, we can consider 
the kth operand tl( to be the operator, and compare two te rms by first recursive ly 
comparing their kth ope ran ds. This yie lds a simplification ordering for the sa me 
reasons that the o rigina l definition does. Furthermore, this new ordering satisfies 
the operator replaceme nt condition, i.e . II.; ~~ ,~ implies {(flo ...• t", . .. , t • .) ~* 
f(l,.·· · . t~, .... In). 
To prove that this extended ordering is well-founded, we appeal to the Well-
foundedness Theorem. Define the depth d(t) of a term I to be the maximum nesting 
of kt h operands. It is easy to show that s >* I, for two terms s and I, if d (s) > d ll ). 
Thus, it suffices to show for all i that terms of depth i are well-quasi-ordered and 
consequently well-founded. This follows immediately from the Well-founded ness 
Theorem by induction on the deptH i. 
Fu rther extensio ns of the recursive path ordering may be found in Kamin and 
Levy [12]. 
O ther examples of simplification orderings are the ('linear) ordering in [13] and 
the 'polynomial' o rdering in [16]. Whereas these methods require that terms be 
mapped onto the \vell-founded nonnegative integers, using simplification orderings 
allows the methods to be exte nded to domains that are not themselves well-founded. 
294 N. Der3howit% 
For example, in Dershowitz [5] we suggest associating a polynomial F(x" ... , x.) 
over the reals with each n-ary operator f. This mapping extends to a morphism <p 
on terms by letting <p(f(t" ...• I.»=F(<p(I. ), ... , <p (I. )). For any choice of 
polynomials F, one must have that x, ;;. x ; implies F(x" .. .. x" .... x.) ;;. 
F(Xh ... • .x ~ •... • xor) and F(x., . ..• Xi • ... • X,, ) ~Xi for all positions i and for aU 
real-valued x's, and that <P(1,»<p(,,) for all rules 1, -+" and for all real value 
assignments <pta ) to the variables a in I,. (Allowing the x's to take on any real 
value is usually too strong a requirement; instead one may show that terms always 
map into some subset R' of the Teals, i.e. XJ •. . . • XII e R' implies F(Xl •. . .• xn) E R'. 
Then one need only show that the conditions hold for all x's in K.) 
These conditions are all decidable (albeit in superexponential time) for poly-
nomials over the reals (Tarski [27]; see Cohen [4] for a much briefer decision 
procedure). Thus. the polynomial ordering can be effectively 'lifted' to open terms. 
It is similarly decidable if there exist polynomials F (and predicate R') of a given 
maximum degree that satisfy the conditions and thereby prove termination. (The 
procedure, however, cannot point to the appropriate polynomials.) For polynomials 
over the natural numbers, these conditions are not decidable (see [16]). 
S. E .... mp!es 
We return, in this section, to the six examples (A-F) of term-rewriting systems 
that have been presented in the previous sections. We prove that four of them 
terminate. as do two additional examples (G-H) . 
(A) Our first example was the following system for computing the disjunctive 
normal form of a logical formula: 
,(a v (3) -+ (oa A ,(J) 
, (a A(3)-+(oa v ofJ) 
a A({3 v y ) -+(a A(3) v (a AY) 
({3 V Y)A a -+({3 Aa) v (y Jl a ). 
We wish to prove that this system terminates for all inputs. It can be shown that 
no polynomial ordering reduces for all five rules. We can. however, use a recursive 
path ordering on terms with operators " A , and v ordered by ,'" A ,.. V • Since 
this is a simplification ordering on terms, by the First Termination Theorem. we 
need only show that 
, (a v (3) "'* (,a A ,(3), 
, (a JI {J )"'* (oa v,(3), 
Orderings for term-rewriting s}'stems 
a A(f3 vy»*(a A(3)v(a AY), 
(f3 V y) A a >* (f3 A a) v (y A a), 
for any terms a, f3, and y. 
295 
The first inequality follows from the subterm condition of simplification orderings. 
By the definition of the recursive path ordering, to show that ,(a v (3) >* (,a A ,(3) 
when ,> A, we must show that ,(a v (3»*,a and ,(a A(3»*'f3. Now, since 
the outermost operators of ,(a v (3), ,a, and ,f3 are the same, we must show that 
a v f3 >* a and a v {3 >* f3. But this is true by the subterm condition. Thus the 
second inequality holds. By an analogous argument, the third inequality also holds. 
For the fourth inequality, we must show a A (f3 V y) >* (a A (3) V (a A y). Since 
A >- v , we must show a A (f3 V y) >-* a A f3 and a A (f3 V y) >-* a A y. By the definition 
of the recursive path ordering for the case when two terms have the same outermost 
operator, we must show that {a, f3 v y} »*{a, f3} and {a, f3 v y} »*{a, y}. These two 
inequalities between multisets hold, since the element f3 v y is greater than both f3 
and y with which it is replaced. Thus the fourth inequality holds. Similarly the fifth 
inequality may be shown to hold. Therefore, by the First Termination Theorem, 
this system terminates for all inputs. 
(B) The variant 
,(a v (3)-> (",a A ",(3) 
,(a A(3)-> (",a v ",(3) 
aA(f3vy)->(aAf3)v(aAY) 
({3 vy) Aa ->({3 Aa)v(y Aa) 
of System (A) does not in fact terminate for all inputs, though whenever it does 
terminate, the resulting expression is in disjunctive normal form. 
To see that it does not terminate, consider the following derivation: 
,,(a A(a vb»~,,«a Aa)v(a Ab» 
~,(",(a A a) A ",(a A b»)~' .. ~,(,(a A a) A ,(a A b)) 
~ .. '~,(b"a v ",a) A (",a v ",b» 
~ .. ·~,«,a v,a) A (,a v,b)) 
~,«,a A (,a v ,b) v (,a A (,a v ,b))) 
~(,-n(,a A (,a v,b») A ",ba A(,a v,b)))~···. 
Thus, beginning with a term of the form ,,(a A (a v (3)), a term containing a 
subterm of the same form is derived. and the process may continue ad infinitum. 
296 ."l. Dl'fshowir:: 
(C) Our third example was 
\Ve cannot order the operators so as to enable the use of a recursive path ordering 
to prove the termination of this system. Instead, we use the Second Termination 
Theorem and define the following quasi-simplification ordering: t::::: t' for two terms 
t and t', if and only if 
[ll~[I'J and 
{[" ]: '" appears in 1}:2 {[a]: ,a appears in t'}, 
where [0: ] denotes the number of occurrences of operators other than - in a. and 
~ means either » in the multiset extension of the ordering > on numbers, or 
else =. 
It is easy to see that this quasi-ordering satisfies the replacement and subterm 
properties of quasi-simplification orderings on fixed-arity terms. It remains to show 
that each rule reduces the subterm it is applied to under the ordering >-. For all 
three rules the number of operators other than: is the same on both sides. To 
see that 
note that there are two less elements in the multiset of numbers of operators for 
the right-hand side than for the left-hand side. To see that 
,(a "/3»(--,---,,, ,,-,--,/3) and -(a "/3»(--"'0' "--'--/3), 
note that the number of operators other than - in a v {3 and a .. \ {3 is greater than 
that of ----,a, 'a, a, -,-,{3, i{3, and {3. Thus the multisets corresponding to the 
left-hand sides are strictly greater than those for the right-hand sides. 
(D'I The system 
10: va)--+a, 
however, does not terminate. The following derivation demonstrates this: 
~ --,11 --:a v --,b) v (--,a v --,h ) 
Orderinf!,5 for rerm-rewriting systems 
A I ~-,-,( -'a V -,b ) A -,-,~( -,a V -,b))) =;, ... 
=;, -,....,~( -,a V ....,b) =;, ... =;, -,-,-,~( -'~a A -,~b ) =;, .... 
IE) The proof of the termination of the system 
-,(" V {3) -> 1(,,, t. '{3) A 1-,,, A -,{3)) 
~(" t. {3)-> 1(--'" V -,{3) v (-,,, V '{3)) 
(a vO:)--:Joa. 
297 
is similar to that of System (A). Vole use the recursive path ordering with the 
operators partially ordered by - >-" and -, >- v . 
We have 
-'iO: >*0:, (a /10:»"'0' and (a va»*a, 
by the subterm condition; we have 
since -, is greater than both /I and v, and the subterms a v {3 and 0: /<, {3 are greater 
than either a or {3 by the subterm condition. 
Using the recursive path ordering to prove the termination of systems in this 
manner, generalizes the conditions for termination in [11]. The cases where 
Iturriaga's method works are those for which the operators are partially ordered 
so that the outermost ('virtuan operators of the left-hand side of the rules are 
greater than any other ('complementary') operators on the left-hand side, which 
in turn are greater than any other operators. 
(F) To prove the termination of the one-rule system 
(a I, (3) /\ Y --:Jo ex I, ({3,\ y), 
we again use the Second Termination Theorem. We define the quasi-ordering t:::: t', 
if and only if 
:t! > t', 
or else (t and t' are conjunctions and) 
where !a! denotes the total number of occurrences of operators in 0: and t; and t; 
are the left conjuncts of t and t', respectively. 
To see that this is a quasi-simplification ordering, note that [:c: [t implies t i :;-: :('!. 
Replacing a right conjunct t2 with a smaller or equivalent one (under :C:) can only 
298 N . DeTShowilz 
decrease the total size of a conjunction 1 = It A 12 and cannot change the size of t1 ; 
replacing I, with a smaller or equivalent left conjunct cannot increase the size of 
lor I,. The subterm condition I, A 1,<: 1" I, obviously holds since II, A 1,1>11,1, 11,1. 
It remains to show that 
But 1(<< A fJ) A 1'1 = 1« A (fJ A 1')1, while 1« A fJ I > 1« I. and the proof is complete. 
This example illustrates how the conditions for termination required by the 
methods of Knuth and Bendix [13] and Lankford [16] may be relaxed: Given a 
quasi-ordering <:F on (fixed arity) operators and a quasi-simplification ordering <:T 
on terms, such that 
1( . .. I . .. ) =TI implies I unary and 
I <:F g for all operators g. 
we define the quasi-simplification ordering 
S = I (s " . .. . sm) <: g(l" ... , I. ) = I. 
if and only if 
(s, f. Slo ... , sm)~ (t, g, It. ... , I,.) , 
(0) 
where the two tuples are compared lexicographically. first according to the terms 
s <:T I. then according to the operators I <:Fg. and finally according to the subterms 
5i <:T Ii (or, alternatively, Si <: Ii recursively). The condition (0) ensure that <: possesses 
the subterm property. To prove termination, one must find appropriate quasi-
orderings ;::F and ~T for which Ii> rj for all rules Ij ~ rj in the given system. In the 
above example : S <:TI if and only if lsi ;;. It!. and <:F is equality. (This method applies 
also to example (C) with S >TI if and only if [S];;'[I] , -, > Fg for all other g, and 
subterms compared recursively. 
The method of Knuth and Bendix assigns a positive integer weight to each zeroary 
operator and a nonnegative integer weight to each other operator, with ?:T compar· 
ing terms according to the sum of the weights of their respective operators, <:F a 
total ordering of operators, and subterms compared recursively. Thus, (0) requires 
that a unary operator have zero weight only if it is the largest operator under > F' 
Lankford replaces the linear sum of weights function with monotonic polynomials 
having nonnegative integer coefficients. Since both these methods use total 
monotonic orderings. the subterm condition is both necessary and sufficient for the 
orderings to be well-founded; the integer requirements are not themselves 
necessary. Thus, instead of using a specific linear or polynomial ordering to orient 
rules generated by the Knuth-Bendix 'completion' algorithm [13], one could use a 
decision procedure for real polynomials to determine, at each step of the algorithm 
and for both possible orientations, whether there exists any ordering of a specific 
degree that reduces for all the rules obtained. 
Orderings for term-rewriting systems 299 
This example also illustrates the use of quasi-termination: The quasi-ordering 
:::::, where t::::: t' if and only if jt:;3 it'l, is a monotonic extension of the simplification 
ordering t :> t'. Since (a 1\ {3) 1\ )' = (l' 1\ ({3 1\ y), the system quasi-terminates. To com-
plete the proof of termination, the monotonic quasi-ordering :::::', where t:::::' t' if 
and only if It I ~ It'l and Itll '" It; i, may be used. 
The method of Lipton and Snyder [18] is somewhat similar in its use of quasi-
termination. \Vhereas they require that:> be a well-founded w-ordering, we require 
it to be monotonic; without monotonicity they must insist that I, = 'j and not l;::::: ',. 
For t:::::' t' they use !tl ~ it'. 
(G) To illustrate the use of an operand as an operator in a recursive path ordering, 
consider the one-rule system 
ifiif(ex, (3, y), 8, E) .... if(ex, if({3, 8, E), if(y, 8, E)). 
The conditional expression "if(a, (3, y)" stands for "if a then {3 else y" and this 
system 'normalizes' conditional expressions by repeatedly removing nested if's from 
the condition a. 
To see that this system terminates we consider the condition to be the operator. 
The condition if(a, (3, y) of the left-hand side is greater (by the subterm property) 
than the condition a of the right-hand side. Thus, we need to show that the left-hand 
side is greater than both right-hand-side operands if! (3, 8, E) and if( y, 8, d. Again, 
ifla, (3, 'Y) is greater than both operators (3 and y, and now the left-hand side is 
clearly greater than the remaining operands 1) and P. 
This method would work for system IF) as well. 
(H) Finally, consider the system 
--;( a ,. (3 ) .... 1 ~ex v -,(3) 
a A 1{3 v y) .... la' (3) v la A y) 
l{3vy)Aa .... ({3Aa)v(yAa) 
(a 1\ {3) 1\ Y ~ a 1\ ({3 1\ y) 
ex v ({3 v y) .... (a v (3) v y 
(0: vO')~o' 
(a 1\ 0:)'" 0:, 
combining the rules for disjunctive normal form of system (A) with associativity 
of conjunction and disjunction as in system (F). Unfortunately, the orderings used 
for each of those two systems can increase for the other system. 
300 .IV. Dershowit:: 
~evertheless. we can combine the recursive path idea used for (A) with the 
lexicographic idea of (F) by using operands as operators in a recursive path ordering. 
We let,» , » v as for (AI, but use the first operand as the operator when comparing 
two con junctions and the second operand as operator when comparing dis junctions. 
(This is similar to the use of lexicographic recursive path orderings in Kamin and 
Levy [12].) 
Acknowledgment 
I gratefully aC,knowledge the valuable discussions with David Plaisted, Tom 
Brown, and Gerard Huet, that helped lead to the results reported here. 
References 
[IJ .4...\1. Ballantyne and W.W. Bledsoe, Automatic proofs of theorems in analysis using nonstandard 
techniques. J. ACM 24 (3) 0977:1 353-374. 
[2J R.S. Boyer and J S. Moore. A lemma driven automatic theorem prover for recursive function 
theory, Pmc. 51h International Joint Conference on Artificiallnrelligence IMIT, Cambridge, MA, 
1977) 511~519. 
[31 \\!.c. Carter, H.A. Ellozy, W.H. Joyner, Jr. and G.B. Leeman, Jr., Techniques for microprogram 
validation, ~lemo RC636L IBM T.J. Watson Research Center, Yorktown Heights,;-';Y 1)9771. 
[4J P.J. Cohen, Decision procedures for real and p-adic fields, Comm. Pure App!. Math. 22 I)) (1969) 
13I~I51. 
[5:] ;..;. Dershowitz, A note on simplification orderings, Information Processing Lerr. 9 !'S) (1979) 
212~215. 
[6 ~ ;-.;. Dershowitz and Z. Manna, Proving termination with multiset orderings, Comm. ACAf 22 1.8) 
119791465~476. 
[7J J.H. Griesmer and R.D. Jenks, SCRATCHPAD/I-An interactive facility for symbolic mathe-
matics, Proc. 2nd Symposium on Symbolic and Algebraic Alanipulation, Los Angeles. CA fAC\1, 
~ew York. 1971"142--48. 
[8J A.C. Hearn. REDUCE 2-A system and language for algebraic manipulation. Proc. 2nd Symposium 
on Symbolic and Algebraic JJanipu/ation, Los Angeles, CA IACM, New York, 1971) 128~133. 
[9J G. Huet, Confluent reductions: Abstract properties and applications to term rewriting systems. 
1. ACW 27 14) (1980) 797~821. 
[101 G. Huet and D.S. Lankford, On the uniform halting problem for term rewriting systems, Report 
283, I:\RIA, Le Chesnay, France 1'1978). 
[IIJ R. Iturriaga, Contributions to mechanical mathematics, Ph.D. thesis, Carnegie~\1ellon C"niversity, 
Pittsburgh, PA 11967;t. 
[121 S. Kamin and 1.-1. Levy, Two gener.alizations of the recursive path orderings, L"npublished note, 
Department of Computer Science, University of Illinois, Urbana, IL 1.1980). 
[131 D.E. Knuth and P.B. Bendix, Simple word problems in universal algebras, in: 1. Leech. Ed" 
Computational Proh/em.~ in Absrracr Algebra (Pergamon Press, Oxford, 1969) 263~297. 
[I4J 1.B. Kruskal, Well-quasi-ordcring, the tree theorem, and Vazsonyi's conjecture, Trans. Amer. 
Marh. Soc. 95 11960) 2IO~22S. 
[I5J D.S. Lankford, Canonical algebraic simplification in computational logic, Memo ATP-25, Auto-
matic Theorem Proving Project. Cniversity of Texas, Austin, TX (19;5). 
[I6J D.S. Lankford, On proving term rewriting systems are :"ioetherian. Memo MTP-3. :\1athematics 
Department, Louisiana Technical University, Ruston, LA 119791. 
Orderings for (frm·re~·rjrin g sysrems 301 
t 17] D .S. Lankford and A .M. Ballantyne. Decision procedures for simple equa tio nal theories with 
pe rmutative axioms: Complete sets of pcrmutat ive reductions. R eport ATP-37. Departments of 
Mathematics and Computer Sciences. L'niversit y of Texas. A uSlin. TX (] 977, . 
[18] R.J. Lipton and L. Snyder. On the halting of tre e replacement systems. Prac. Conference Or! 
Theoretical Computer Science, L'niversity of Wate rl oo. Waterloo. Onta rio (1977) 43--46. 
[19] Z. Manna and S. t'ess. O n the termination of Markov algorithms. Proc. 3rd Hawaii Inrernalion al 
Conference on System Sciences. Honolulu. HI (1970) 789- 792. 
[20] J . Moses , Algebraic si mplification. a guide for the perplexed, Comm. A CM 14 \8 ) 0971) 527-537. 
[21 ] D.R. Musser . A data type ve rification system based o n rewrite rules. Memo. Informat ion Sciences 
Institute . University of Southern California . Marina del Ray, CA (1978). 
(22) C.SLJ.A. ~ash-Williams, On well-Quasi-orderin g fi nite trees. Proc. Ca mbridge Pllilo.~. Soc. 59 
(1963 ) 833- 835. 
[23] D. Plaisted, Well -founded orderings for proving termination of systems of rewrite rules. Report 
R-78-932, Department of Computer Science, University of Illinois, Vrbana, IL 11978). 
[24 J O. Plaisted, A recursively defined ordering for proving termination of term rewriting systems, 
Report R-78-94J. Department of Computer Science, Cniversity of minois, l:rbana, IL (1978). 
[25] J .R. Slagle. Automa ted theorem -proving fo r theories with simpli fie rs. commutativit y and associativ-
ity. 1. ACM 21 {4 j (1974; 622-642. 
[26) M.E. Stickel and G.E. Pe terson, Complete sets of reductio ns fo r some equatio nal theories, 1. A CM 
28 (2 ) (198 1) 233-264. 
(27) A. Tarski, A Decision Method for Elementary Algebra and Geometry (University of Cal ifornia 
Press, Berkeley, CA. 1951). 
[28] R.W. Weyhrauch, A users manual for FOL. :Memo AL\1-235.1, Artificia l Inte llige nce Laboratory. 
Stanford Unive rSity. Stanford , CA (1977). 
