Discrete Mathematics 309 (2009) 962–968
Note
On the subgroup distance problem

www.elsevier.com/locate/disc

Christoph Buchheima,∗, Peter J. Cameronb, Taoyang Wuc
a Department of Computer Science, University of Cologne, Germany b School of Mathematical Sciences, Queen Mary, University of London, UK c Department of Computer Science & School of Mathematical Sciences, Queen Mary, University of London, UK
Received 2 October 2006; received in revised form 11 October 2007; accepted 21 January 2008 Available online 10 March 2008

Abstract
We investigate the computational complexity of ﬁnding an element of a permutation group H ⊆ Sn with minimal distance to a given π ∈ Sn, for different metrics on Sn. We assume that H is given by a set of generators. In particular, the size of H might be exponential in the input size, so that in general the problem cannot be solved in polynomial time by exhaustive enumeration. For the case of the Cayley Distance, this problem has been shown to be NP-hard, even if H is abelian of exponent two [R.G.E. Pinch, The distance of a permutation from a subgroup of Sn, in: G. Brightwell, I. Leader, A. Scott, A. Thomason (Eds.), Combinatorics and Probability, Cambridge University Press, 2007, pp. 473–479]. We present a much simpler proof for this result, which also works for the Hamming Distance, the l p distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance. Moreover, we give an NP-hardness proof for the l∞ distance using a different reduction idea. Finally, we discuss the complexity of the corresponding ﬁxed-parameter and maximization problems. c 2008 Elsevier B.V. All rights reserved.
Keywords: Permutation groups; Subgroup distance
1. Introduction
For any given metric d on Sn, the distance of a permutation π ∈ Sn from a subgroup H of Sn is deﬁned in a natural way as
d(π, H ) = min d(π, τ ).
τ∈H
If H is not given explicitly, but by a set of generators, one can still decide in polynomial time whether d(π, H ) = 0, i.e., whether π ∈ H [11,6]. However, it is not possible in general to compute the distance d(π, H ) in polynomial time, unless P = NP. This was shown by Pinch for the Cayley distance [10]. More precisely, he showed that the following problem is NP-complete in this case:
Problem 1 (Subgroup Distance Problem). Given a permutation π ∈ Sn, a set of generators of a subgroup H of Sn, and an integer K , decide whether d(π, H ) ≤ K .
∗ Corresponding author. E-mail addresses: buchheim@informatik.uni-koeln.de (C. Buchheim), P.J.Cameron@qmul.ac.uk (P.J. Cameron),
Taoyang.Wu@dcs.qmul.ac.uk (T. Wu).
0012-365X/$ - see front matter c 2008 Elsevier B.V. All rights reserved. doi:10.1016/j.disc.2008.01.036

C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968

963

In this paper, we present an alternative proof for this result. Furthermore, we show NP-completeness for several other well-known metrics on Sn, namely the Hamming Distance, the l p distance, the l∞ distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance. We list the corresponding deﬁnitions in the following, but recommend [4] for further information.

• the Hamming Distance between two permutations π and τ is the number of different entries, i.e., |{i | π(i) = τ (i)}|

• the Cayley Distance is deﬁned as the minimum number of transpositions taking π to τ

• for p ≥ 1, the l p distance is deﬁned by p in=1(π(i ) − τ (i ))p

• the l∞ distance is deﬁned as max1≤i≤n |π(i ) − τ (i )|

• the Lee Distance is

n i =1

min(|π

(i

)

−

τ

(i

)|,

n

−

|π

(i

)

−

τ

(i

)|)

• Kendall’s tau is deﬁned as |{(i, j) ∈ {1, . . . , n}2 | π(i) < π( j), τ (i) > τ ( j)}|

• Ulam’s Distance is deﬁned as n minus the length of a longest increasing subsequence in (τ π −1(1), . . . , τ π −1(n))

The subgroup distance problem is related to the weight problem, where one asks for an element τ ∈ H with a given distance k to the identity. This problem has been investigated by Cameron and Wu, who showed NP-completeness for all metrics listed above [3]. If the weight problem is restricted to the Hamming distance and to the case k = n, the resulting problem is to decide whether the group H contains a ﬁxed-point free permutation, which has been shown to be NP-complete by Buchheim and Ju¨nger [2]. The proof given there is a simple adaption of a proof by Lubiw [8], showing that it is NP-complete to decide whether a given graph has a ﬁxed-point free automorphism.

2. NP-completeness for the Hamming distance

In this section, we prove that the subgroup distance problem is NP-complete for the Hamming distance.

Theorem 2. The subgroup distance problem for the Hamming distance is NP-complete, even if the permutation group H is abelian of exponent two.

Proof. For the reduction, we use the decision version of the maximum satisﬁability problem with clauses of length
two (MAX-2-SAT), which is well-known to be NP-complete [7]. So consider an instance of MAX-2-SAT, consisting
of an integer K , of p variables u1, . . . , u p and of q clauses c1, . . . , cq of length two. It is to decide whether there is a truth assignment {u1, . . . , u p} → {0, 1} satisfying at least K clauses.
In order to transform this instance to an instance of the subgroup distance problem, ﬁrst deﬁne K = 6q − 4K .
Moreover, construct a domain X and a permutation π as follows: for every variable ui , introduce a set Xi with 6q + 2 points. These points are swapped pairwisely by π . For each clause j, add a set Y j = {a j,1, . . . , a j,6} such that π exchanges a j,1 with a j,2, a j,3 with a j,4, and a j,5 with a j,6. The total size of the domain X , deﬁned as the union of all sets Xi and Y j , is p(6q + 2) + 6q and thus polynomial.
Next we deﬁne generators for the group H . For each variable ui , we deﬁne two generators πi (t) and πi ( f ). Both exchange all points in Xi in the same way as π . If ui appears without negation in the ﬁrst position of a clause c j , then πi (t) exchanges a j,1 with a j,2 and a j,3 with a j,4; if it appears without negation in the second position, then it exchanges a j,1 with a j,2 and a j,5 with a j,6. For a negated appearance, the same is done by πi ( f ) instead of πi (t). All other points are ﬁxed by πi (t) and πi ( f ).
Let H = πi (t), πi ( f ) | i = 1, . . . , p . It remains to show d(π, H ) ≤ K if and only if K clauses from c1, . . . , cq can be simultaneously satisﬁed. First, let t: {u1, . . . , u p} → {0, 1} be a truth assignment satisfying at least K clauses. Consider

τ = πi (t) πi ( f ) ∈ H.

t (ui )=1

t (ui )=0

By construction, τ agrees with π on each Xi . Moreover, it is readily veriﬁed that on the clause gadget Y j the distance between τ and π is 2 if c j is satisﬁed by t and 6 otherwise. In summary, we have

d(π, τ ) = 6q − 4 · |{ j | c j is satisﬁed by t}| ≤ 6q − 4K = K .

Now assume that d(π, H ) ≤ K . Choose τ ∈ H with d(π, τ ) ≤ K . In the composition of τ , exactly one of the generators πi (t) or πi ( f ) must appear, for each variable ui . Indeed, as both πi (t) and πi ( f ) are involutions and H is

964 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968

abelian, we can assume that at most one copy of each appears. If for some variable ui both πi (t) and πi ( f ) or neither one appeared, the distance between τ and π on Xi would be 6q + 2 > K .
We can thus deﬁne t: {u1, . . . , u p} → {0, 1} by setting t (ui ) = 1 if and only if πi (t) appears in the composition of τ . Moreover, this implies that the Hamming distance between τ and π on all sets Xi is zero. Arguing as above, one
can show that t must satisfy at least K clauses.

3. NP-completeness for the l∞ distance

In this section, we will prove that the subgroup distance problem is NP-complete also for the l∞ distance. For the weight problem, we know that the l∞ distance behaves differently from all other metrics considered in this paper, see [3]. The same is true for the subgroup distance problem, as we need a new method to prove its NP-completeness. The difference between l∞ and other metrics will become even clearer in Sections 5 and 6.

Theorem 3. The subgroup distance problem for the l∞ distance is NP-complete, even if the permutation group H is abelian of exponent two.

Proof. We construct a polynomial-time reduction from the NAE-3-SAT problem. This problem is NP-complete [9];
it is similar to the well-known 3-SAT problem but requires a truth assignment such that in no clause all three literals
are equal in truth value. More precisely, an instance of the NAE-3-SAT problem is given by p variables u1, . . . , u p and q clauses c1, . . . , cq of length three. The question is whether there is an assignment {u1, . . . , u p} → {0, 1} such
that no clause has all literals true, or all literals false.
In order to transform this instance into an instance of the subgroup distance problem, ﬁrstly deﬁne K = 2. Construct
a domain X and a permutation π as follows: for every variable ui , introduce a set Xi containing 6 points. We may assume that the points in Xi are labelled from 1 to 6. Then π is acting on Xi as (1, 4)(2, 5)(3, 6). For each clause c j , we use a gadget Y j of size 4. To simplify the notation, assume Y j contains nodes 1, 2, 3, 4. Then π is acting on Y j as (1, 4)(2)(3). Now the domain X is the disjoint union of all Xi and Y j with suitable adjustments of the labelling.
Next we deﬁne generators for the group H . For each variable ui , we deﬁne two generators πi (t) and πi ( f ). Both exchange all points in Xi in the same way as π . If ui appears without negation in the ﬁrst position of a clause c j , then the action on Y j is πi (t) = (1, 2)(3, 4), where we assume again that the points in Y j are labelled 1 to 4. If it appears without negation in the second position then πi (t) = (1, 3)(2, 4); if it appears without negation in the third position then we have πi (t) = (1, 4)(2, 3). For a negated appearance, the same is done by πi ( f ) instead of πi (t). All other points are ﬁxed by πi (t) and πi ( f ).
Let H = πi (t), πi ( f ) | i = 1, . . . , p . It remains to show that l∞(π, H ) ≤ K if and only if there exists an assignment such that no clause from c1, . . . , cq has all literals true, or all literals false. First, let t: {u1, . . . , u p} → {0, 1} be a truth assignment satisfying the requirement of NAE-3-SAT. Consider

τ = πi (t) πi ( f ) ∈ H.

t (ui )=1

t (ui )=0

By construction, τ agrees with π on each Xi . Moreover, one can verify that on the clause gadget Y j , the l∞ distance between τ and π is 3 if all literals in c j have the same truth value with respect to t. Indeed, in this case the induced action of τ on Y j is trivial. In all other cases, the distance between τ and π is either 1 or 2. In summary, we have l∞(π, τ ) ≤ 2 if and only if in all clauses either one or two literals are satisﬁed.
Now assume that l∞(π, H ) ≤ K = 2. Choose τ ∈ H with l∞(π, τ ) ≤ 2. In the composition of τ , exactly one of
the generators πi (t) or πi ( f ) must appear, for each variable ui . Indeed, as both πi (t) and πi ( f ) are involutions and H is abelian, we can assume that at most one copy of each appears. If for some variable ui both πi (t) and πi ( f ) or neither one appeared, the distance between τ and π on Xi would be 3 > K .
We can thus deﬁne t: {u1, . . . , u p} → {0, 1} by setting t (ui ) = 1 if and only if πi (t) appears in the composition of τ . Moreover, this implies that the l∞ distance between τ and π on all sets Xi is zero. Arguing as above, one can show
that t must satisfy the condition that in all clauses either one or two literals are satisﬁed.

4. NP-completeness for other distances

We next show that the subgroup distance problem is NP-complete for all other considered metrics, following the ideas in the proof of Theorem 2. Indeed, we can use exactly the same construction of variable and clause gadgets and the same deﬁnition of π . We just have to label the points a j,1 to a j,6 consecutively in each clause gadget Y j .

C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968

965

The crucial point in the proof of Theorem 2 is the following: let x1 (x2) denote the action on Y j induced by a satisﬁed literal in the ﬁrst (second) position of a clause. Then d(x1, π ) = d(x2, π ) = d(x1x2, π ) = 2 while d(π, e) = 6. Roughly speaking, if for any metric d we have d(x1, π ) = d(x2, π ) = d(x1x2, π ) = a while d(π, e) = b for some 0 < a < b, then we can carry over the proof of Theorem 2 with no other change than redeﬁning K = bq − (b − a)K and making sure that the distance between π and e on each variable gadget is at least
bq.
It is readily veriﬁed that the parameters a and b can be chosen as follows for the remaining distances deﬁned in the
introduction:

Distance

ab

Cayley lp

1√p 2 3√p 6

Lee 2 6

Kendall’s tau 1 3

Ulam

13

In summary, we derive

Theorem 4. The subgroup distance problem is NP-complete for the Cayley Distance, the l p distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance, even if the permutation group H is abelian of exponent two.
For the case of the Cayley Distance, this result has been proved recently by Pinch [10]. However, the proof given here is much simpler.
Alternatively, the results of Theorems 2 and 4 could be proven by using the nearest codeword problem:
Problem 5. Given a binary linear code C of length n with basis E and a vector v ∈ {0, 1}n, ﬁnd some c ∈ C with minimal Hamming distance to v.
This problem is NP-hard [1]. A reduction to the subgroup distance problem is obtained as follows: for any vector c ∈ {0, 1}n, deﬁne a permutation πc ∈ S2n, exchanging 2i − 1 with 2i if and only if ci = 1, for all i ∈ {1, . . . , n}. By construction, the Hamming distance between πc and πv is exactly double the Hamming distance between c and v, for all c ∈ {0, 1}n.
Now consider G = πc | c ∈ E . As G = {πc | c ∈ C}, we derive that ﬁnding some c ∈ C minimizing the distance to v is equivalent to ﬁnding some π ∈ G minimizing the distance to πv.
Moreover, it is easily veriﬁed that for all pairs of permutations of the form πc with c ∈ {0, 1}n the Cayley distance, the Lee distance, Kendall’s tau and Ulam’s distance are proportional to the Hamming distance, while l p is always the pth root of the Hamming distance. This shows that the reduction works for all considered metrics, except for l∞.

5. Fixed parameter K

It is worthwhile to have a look at the variant of the subgroup distance problem where the parameter K is considered a constant rather than part of the input. Interestingly, the problem then becomes polynomial for most metrics discussed above. Indeed, as a membership test can be performed in polynomial time [11,6], it sufﬁces to show that the set
X = {τ ∈ Sn | d(τ, e) ≤ K }
can be enumerated in polynomial time. For most metrics considered above, this can easily be seen to hold: for the Hamming distance, at most K positions may differ between e and any τ ∈ X . This implies
|X | ≤ n nK ∈ O(n2K ). K
This bound also holds for the Lee distance, as it is always greater or equal to the Hamming distance. Next observe that the Cayley distance is always at least half the Hamming distance, while the l p distance is at least the pth root of the Hamming distance. Thus |X | is bounded polynomially for these distances as well. The same result follows for Kendall’s tau, which is greater or equal to the Cayley distance by deﬁnition. Finally, for Ulam’s distance the set X contains all permutations τ such that there is an increasing subsequence in (τ −1(1), τ −1(2), . . . , τ −1(n)) of length at

966 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968

least n − K . All these permutations can be constructed by choosing n − K positions, then n − K numbers to be placed increasingly on these positions, and an arbitrary permutation of the remaining K numbers. Thus we derive

n |X| ≤

n K ! ∈ O(K !n2K ).

KK

To sum up, we have the following theorem:

Theorem 6. The subgroup distance problem is in P for the Hamming Distance, the Cayley Distance, the l p distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance when K is ﬁxed.
Note that for all metrics considered in Theorem 6 the parameter K appears in the exponent of the size of X . One may ask for a stronger result, namely whether the subgroup distance problem is even ﬁxed-parameter tractable, i.e., whether it can be solved by an algorithm with running time O( f (K )(m + n)c), for a constant c and an arbitrary function f : N → N. Here m denotes the number of given generators of H .
The answer is negative. The reduction from the nearest codeword problem discussed above is clearly a parameterized reduction. The latter problem was shown to be W[1]-hard by Downey et al. [5], hence the same result follows for the subgroup distance problem, for all metrics considered in Theorem 6. In other words, the subgroup distance problem is likely to be ﬁxed-parameter intractable in these cases.
For the l∞ distance, the set X actually has exponential size, even for K = 1: assume that n is even and consider pairs {1, 2}, {3, 4}, . . . , {n − 1, n}. Then each pair can be swapped independently without increasing the distance to e beyond one, so that X contains at least 2n/2 points. This is in contrast to all other metrics, where these swaps would add up (in different ways). In fact, the proof of Theorem 3 shows that for the l∞ distance the subgroup distance problem remains NP-complete even if K is ﬁxed to 2. Using an appropriate relabelling, the same proof shows NP-completeness for every ﬁxed K ≥ 2. If we drop the restriction that H is of exponent two, we can even show NP-completeness for K = 1.
Theorem 7. The subgroup distance problem for the l∞ distance is NP-complete for each ﬁxed K ≥ 1, even if the permutation group H is abelian.
Proof. It remains to prove the theorem for the case K = 1. As in the proof of Theorem 3, we use a reduction from NAE-3-SAT. The variable gadgets now contain 4 points each such that π exchanges (1, 3) and (2, 4). The clause gadgets are deﬁned as follows: for every clause c j , the set Y j consists of three points a j,1, a j,2, a j,3, numbered consecutively. The permutation π exchanges a j,1 and a j,3.
If ui appears without negation in any of the three positions of a clause c j , then πi (t) permutes (a j,1, a j,2, a j,3) cyclically. For a negated appearance, the same is done by πi ( f ) instead of πi (t).
As above, let τ be the permutation corresponding to a truth assignment t. Then the action of τ on Y j is trivial if and only if either none or all of the literals in c j are satisﬁed, and it is cyclic otherwise. It is easy to check that the l∞ distance between τ and π on Y j is 2 in the ﬁrst case and 1 otherwise.

6. Maximum subgroup distance

So far we have examined the problem of ﬁnding a member of H with minimal distance to the given permutation π. Alternatively, one may ask for an element with a maximal distance from π. The corresponding decision problem is
Problem 8 (Maximum Subgroup Distance Problem). Given π ∈ Sn, a set of generators of a subgroup H of Sn, and an integer K , decide whether there is a τ ∈ H with d(π, τ ) ≥ K .
This problem is not symmetric to the (minimum) subgroup distance problem in general. The complexity status of the maximization version cannot be derived from the complexity status of the minimization version. In particular, we will show that the maximum subgroup problem for the l∞ distance can be solved in polynomial time, while we saw above that the minimum subgroup distance problem is NP-complete for the same metric.
Theorem 9. Given π, τ1, . . . , τm ∈ Sn, we can ﬁnd some τ ∈ H = τ1, . . . , τm maximizing l∞(π, τ ) in polynomial time.

C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968

967

Proof. We have to ﬁnd a permutation τ ∈ H such that
max |π(i) − τ (i)|
1≤i ≤n
is maximized. Since this value is a priori bounded by n, we can iteratively check for k = n, . . . , 1 whether H contains an element τ such that |π(i) − τ (i)| = k for some point i. The latter holds if and only if there exists a pair of points (i, j) with |π(i) − j| = k and i and j belong to the same orbit of H . The last property can be checked in polynomial time, and the ﬁrst found τ mapping i to j can be returned.

We now argue that the maximum subgroup distance problem is NP-complete for all other metrics considered above.
The idea of the proof for the minimization variant can be carried over with few changes. The variable and clause gadgets are the same as before. However, the permutation π is now chosen as the identity e, instead of exchanging
points pairwisely on the variable and clause gadgets. This makes sure that for every variable exactly one of the two generators πi ( f ) or πi (t) is chosen.
Basically, it remains to prove that with these deﬁnitions on the clause gadgets we have d(x1, π ) = d(x2, π ) = d(x1x2, π ) = a > 0; note that d(π, e) = 0 on each clause gadget by deﬁnition of a metric. The corresponding numbers are:

Distance Hamming Cayley lp Lee Kendall’s tau Ulam

a 4 2√p 4 4 2 2

Theorem 10. The maximum subgroup distance problem is NP-complete for the Hamming Distance, the Cayley Distance, the l p distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance, even if the permutation group H is abelian of exponent two.
In contrast to the minimal subgroup distance problem, which is NP-complete for the l∞ distance when K is ﬁxed, the ﬁxed-parameter version of the maximum subgroup distance problem is in P for all metrics considered in this paper. Firstly, it is easy to see from the above discussion that this holds for l∞, so consider the remaining metrics. Following the arguments of Section 5, we know that the following set is of polynomial size for all metrics except l∞:
X = {τ ∈ Sn | d(τ, π ) ≤ K − 1}.
Now to check whether there is an element τ ∈ H with d(τ, π ) ≥ K , we can equivalently check whether H ⊆ X , i.e., whether |H | = |H ∩ X |. As X can be enumerated in polynomial time and a membership test for H can be performed in polynomial time, the size of H ∩ X can be computed in polynomial time for any π ∈ Sn and any H . On the other hand, the size of H can be computed in polynomial time as well. That is, we have the following theorem:
Theorem 11. The maximum subgroup distance problem is in P for the Hamming Distance, the Cayley Distance, the l p distance, the l∞ distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance when K is ﬁxed.
In fact, the above theorem not only gives us the answer for the decision problem, but also provides us an algorithm to ﬁnd a permutation with distance at least K , if one exists. The key observation is that we can associate an order on the group H via its Cayley graph with respect to the generators. Therefore we can enumerate the elements in H and compute their distance to π . We stop at the ﬁrst one whose distance to π is at least K . This algorithm will terminate in polynomial time because the set H ∩ X is of polynomial size.
Acknowledgement
The ﬁrst author was partially supported by the Marie Curie Research Training Network ADONET 504438 funded by the European Commission.

968 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968
References
[1] E.R. Berlekamp, R.J. McEliece, H.C.A. van Tilborg, On the inherent intractability of certain coding problems, IEEE Transactions on Information Theory 24 (1978) 384–386.
[2] C. Buchheim, M. Ju¨nger, Linear optimization over permutation groups, Discrete Optimization 2 (4) (2005) 308–319. [3] P.J. Cameron, T. Wu, The complexity of the weight problem for permutation groups, Electronic Notes in Discrete Mathematics 28 (2007)
109–116. [4] P. Diaconis, Group Representations in Probability and Statistics, Institute of Mathematical Statistics, 1988. [5] R. Downey, M.R. Fellows, A. Vardy, G. Whittle, The parameterized complexity of some fundamental problems in coding theory, SIAM
Journal on Computing 29 (2) (1999) 545–570. [6] M.L. Furst, J. Hopcroft, E.M. Luks, Polynomial time algorithms for permutation groups, in: Proc. 21st IEEE Foundations of Computer
Science, 1980, pp. 36–41. [7] M.R. Garey, D.S. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W. H. Freeman, 1979. [8] A. Lubiw, Some NP-complete problems similar to graph isomorphism, SIAM Journal on Computing 10 (1) (1981) 11–21. [9] C.H. Papadimitriou, Computational Complexity, Addison-Wesley Publishing Company, 1994. [10] R.G.E. Pinch, The distance of a permutation from a subgroup of Sn , in: G. Brightwell, I. Leader, A. Scott, A., Thomason (Eds.), Combinatorics
and Probability, Cambridge University Press, 2007, pp. 473–479. [11] C.C. Sims, Computation with permutation groups, in: S.R. Petrick, editor, Proceedings of the 2nd Symposium on Symbolic and Algebraic
Manipulation, 1971, pp. 23–28.

