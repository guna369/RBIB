MATHEMATICS
N. G. DE BRUIJN
lambda calculus with namefree formulas involving symbols
that represent reference transforming mappings
Dedicated to A. Heyting at the occasion of his 80th birthday on May 9, 1978
Communicated at the meeting of March 18, 1978
Department of Mathematics, E indhoven University of T echnology, The Netherlands
1. INTRODUCTION ON NAME-CARRYING LAMBDA CALCULUS
In ordinary lambda calculus we use names both for free and for bound
variables. Let us present an example that explains what kind of expressions
we are after : apart from names for variables we have names for constants.
We may have introduced an expression in two variables x and y, and
have abbreviated it to f(x, y) (now f is the "constant" we mentioned) .
Now Azf(x, y) is a lambda expression. Its interpretation is : the function
that attaches to every x the value f(x , y) . The letter y is a free variable
and x a bound variable in the expression ).a;f(x, y) .
We can, of course, also write more complex lambda expressions like
(1.1) g(Azf(x, y), At/(t, Auf(u, y)), Awf(w, Aug(w, 8, u))).
In this example the free variables are y and 8 .
Usual lambda calculus has a notation (in the form of concatenation)
for "application" that intends to express "the value of the function y
at the point x" . We do not need a special notation for this, because we
can devote a special constant A to this purpose, and write that value as
A(y, x) . Now so-called beta-reduction is a kind of elimination of such
an A, like the passage from A(Az(f(X, y)), g(t)) to f(g(t), y). The latter two
formulas are not considered to be equal (in spite of their common inter-
pretation). On the other hand, the difference between Azf(x, y) and
348
J..uf(u, y) is much less essential. The desire to identify them lies at the
root of narnefree lambda calculus.
The kind of name-carrying lambda calculus described above is exactly
the same as in [1]. We close this section with the tree interpretation of
the expression (1.1) :
y
W 1l
X Y w
I i.
z; I
g
2. INTRODUCTION ON NAMEFREE LAMBDA CALCULUS
In [1] we explained a notation for lambda expressions where all occur-
rences of free and bound variables are replaced by positive integers that
indicate their reference depth. The system is easily demonstrated at the
example (1.1) in the tree form
1 5
3
with 8,z,y, ... as list
of free variables.
The dots below the tree are unesscntial, but suggestive to the term
"reference depth", if they are interpreted as being tied to 8, Z, y, ... (the
upper one refers to 8, the middle one to z, the lower one to y; the fact
that Z is never referred to in the formula does not bother us).
The idea is that an integer k at an end-point refers to the k-th lambda
we meet when travelling from that end-point to the root of the tree ;
if there are only j lambdas on that path, with j < k, then the k at the
endpoint refers to the (k - j)-th entry of the list of free variables.
349
As a preparation to what follows, we express the above correspondence
like this. We start at an endpoint and want to know what variable the
number refers to. Now we descend the tree, taking the number along,
subtracting 1 each time we pass some A. If this subtraction leads to the
value 0, we do not go any further; we have located the right lambda.
Of course we act as if the free variables 8, Z, y, are tied to underground
lambdas.
The tree at the beginning of this section did not show any names
attached to the lambdas. We can assign arbitrarily names (different from
the constants and the free variables) for these bound variables. There
is a safe, "conservative", system where it is required that all these names
are different. The "liberal" system, on the other hand, only requires that
lambdas get different names if they are hierarchically related : if one
lambda lies on the path down from another lambda to the root, then the
two have to get different names.
3. 'l'REES WITH SYMBOLS THAT REPRESENT MAPPINGS
We shall now describe a new kind of namefree trees where at some
places in the tree we have a symbol denoting some mapping of 11 into n
(11= {I, 2, 3, .. .}). We shall use these more complicated trees for the same
purpose as the trees in section 1. What matters is , to describe to which
lambda a natural number at an end-point refers. What we intend to do
will be clear from an example. The letters w, 0, r, 'lfl denote mappings
of 11 into 11.
w 5
(3.1) I
g
If we want to know what an integer refers to we descend the tree;
again we subtract 1 if we pass a A, but if we pass one of the letters repre-
senting a mapping we do something different: we apply that mapping
to our number. So the 3 in the upper left corner refers to the left-hand
A if w(3) = 1. If w(3) > 1 it refers to O(w(3) - 1)-th free variable. As an
exeercise the reader may verify that if w(3) = 5, 0(4) = 1, .(1) = 1, 'lfl(1) = 2,
then this tree corresponds to the same references from end-points to
lambdas or free variables as the following one :
350
:! :! :~
I I
(3.2)
J. ;,
{}
We shall say that (3.2) is the reduced form of (L). In tho notation of
this paper (3.1) is represented by
(3.3) g(O;'/(ro3, 5), tpA/(2, 7:1))
and (3.2) by
(3.4) g(Af(2, 2), ;'/(3, i)).
The motivation for studying the tree coding of the type (3.3) is that
operations like substitution are easier described in terms of these than in
terms of the mapping free codes like (3.4). This may hold both for language
theory and for automatic formula manipulation. Getting rid of the map-
pings can be postponed until we need it; it is relatively easy.
4. METALINGUISTIC NOTATION
In [I] our way to describe linguistic operations was based on the system
used in BNl" (Backus' normal form). In simple cases this is quite feasable,
but in more complex situations it can no longer be maintained. In the
present note we prefer the system used in the theory of context-free
languages, where linguistic entities like words are treated as mathematical
objects, referred to by names or more complicated expressions, and never
appear themselves in the language that discusses them.
We have a set A (the elements are interpreted as letters and signs like
comma's, parentheses, etc.). 8(A) is the set of all finite sequences of
elements of A (these sequences are called words). 81(A) is the subset
consisting of all words of length 1.
We use the following notation for the concatenation of words : if p
and q denote words then [p Iq ] denotes the word we get by putting the
second word directly after the first one. Similarly for three or more words :
[plqlr].
The letters elt directly after an opening bracklet or a vertical bar have
the meaning illustrated by the example:
[ elt P I q I eit P I elt R ] = {[ p I q I 8 I r] IPEP, 8 E P, r E R},
where q E 8(A), PC 8(A), R C 8(A).
351
The following "comb" notation was introduced in [2] :
~ instead of [p Iq IT],
instead of [elt P Iq Ielt P Ielt R ].
This is quite easy for handwriting and reading, but harder to print.
5. THE SETS ZO AND Z
In order to give a preliminary idea we state that Z will consist of all
strings of the type (3.3) (with a restriction on the constants) and Zo will
be the subset consisting of the strings of type (3.4). (The elements of Zo
were called NF-expressions in [1]).
As before, 11={1, 2, 3, ... }, and T will denote the set of all mappings
of 11 into 11. And as before , A is a set, S(A) is the set of words, and
Sl(A) the set of one-letter words. Furthermore ~ is some injection of 11
into Sl(A), q; some injection of T into Sl(A), and we assume that
Sl(A)=G u ~(11) U q;(T) U R
where the four parts on the right are disjoint, and R has exactly 4 elements.
The elements Tl, T2 , T3, T4 of R are one-letter words with the following
interpretation : Tl is the word consisting of a lambda only, Tz of an opening
parenthesis only, T3 of a comm a only, T4 of a closing parenthesis only.
Since we never show the elements of A themselves the usual symbols
for lambda, etc. are free for us to use , and as long as they are separated
in the [II] notation, confusion does not arise. We can write e.g.
[ Tl I T2 I T3 I T4 ] = [ AI ( I , I ) ].
If Y is a subset of S(A) then a(Y) denotes the set of all strings of elements
of Y separated by comma's :
a( Y) = Y U [ cIt Y I , Iolt Y] U [elt Y I , I elt Y I , Ielt Y] U ...
The set Z is a subset of S(A), defined as the minimal solution of the
equation
(5.1) ~ Z = G u [ elt G I ( I elt a(Z) I ) ] u ~(11) U [ t. I cIt Z ] u( u [ elt q;(T) Ielt Z ].
As an example of an element of Z we present, with g, lEG and
W, (J, or, 'ljJ E T,
[gl(Iq;«(J)IAI/I(Iq;(w) I~(3)1 , 1~(5)1)1 , 1q;('ljJ)IAlf I(I~(2)1 , 1q;(l-) I~(l)l)l)] .
Translation into (3.3) is just a matter of omitting the ['s, the ]'s, the I's,
the q;'s and the ~'s . In examples, one would prefer that abbreviated form
(3.3), of course .
The subset Zo of Z can be defined as the minimal solution of
(5.2) Zo= G u [ elt G I ( I elt a(Zo) 1) ] u ~(11) u [A. I elt Zo ].
352
6. SUBSTITUTION
Let Q be a mapping of 11 into Z, and let z be an element of O'(Z). We
want to define subst (Q, z). Its interpretation, first for the case that z E Z,
is as follows. Attach to z the free variable list Xl, X2, ••• , and to each one
of Q(l), Q(2) , ... the variable list Yi, Y2, ... . Now we substitute into the
name-carrying form of z, for each Xt, the name-carrying form of Q(i).
What we get is an expression with free variables YI, Y2 , ... , and the namefree
form of this will be subst (Q, z). If Z is a string, Z E O'(Z) then the substi-
tution is effected in every entry of the string separately.
From now on we concentrate on what happens in O'(Z) and Z, and we
do not study the interpretations. (They will stay on the back of our mind,
of course).
We define subst (Q, z) for all z E O'(Z) by recursion on (5.1). To that
end it suffices to define (note the uniqueness of parsing the elements
of O'(Z)) :
(i) if Z= [ZI I , I Z2] with ZI E O'(Z), Z2 E Z then
subst (Q, z) = [subst (Q, ZI) I , Isubst (Q, Z2)],
(ii) if z E 0 then subst (Q, z) = z,
(iii) if Z= [c I ( I ZI I )] with CEO, ZI E O'(Z) then
subst (Q, z) = [c I ( I subst (Q, ZI) I )],
(iv) if for some nEl1 z=~(n) then subst(Q,z) =Q(n),
(v) if z= [J. IZI] with ZI E Z then sub st (Q, z)= [J. I subst (Q*, ZI)],
where Q* is the mapping defined by
Q*(l)=~(l),Q*(k) = [cp(y) IQ(k-l)] (k =2, 3, ... )
with y defined by y(k)=k +l (k=I ,2,3, ... ),
(vi) if Z= [cp(6) I ZI] with 6 E I', ZI EZ then subst (Q, z) = subst (QO, ZI)
where QO is defined by (QO)(k)=Q(O(k)) for all kEn.
7. THE REDUCED FORM
At the end of section 3 it was explained how an element Z of Z leads
to one of Zo, called its reduced form. We shall denote it by rf(z), to be
formally defined here for all Z E O'(Z) :
(i) if Z= [ZI I , I Z2] with ZI E O'(Z), Z2 E Z then rf(z) = [rf(zl) I , I rf(z2)],
(ii) if ZEO then rj(z) =Z,
(iii) if Z= [c I ( I ZI I )] with CE O, ZI E O'(Z) then rj(z) = [c I ( I rj(zl) I )],
(iv) if z=~(n) for some nEll then rj(z) =z,
(v) if Z= [J. I ZI] with ZI EZ then rj(z) = [J. I rj(zl)],
(vi) if Z= [cp(O) I c] with 0 E I', CEO then rj(z) =C,
(vii) if z=[cp(O) I c I ( I X I )] with 0 E r, CEO, X E O'(Z) , then
rj(z) = [c I ( I rj(po(x)) I )],
where po(x) is defined recursively by
po([x I , IV]) = [po(x) I , I cp(O) IV], po(y) = [cp(O) Iy] (x E O'(Z) , Y E Z),
353
(viii) if z = [<p(8) I .;(n)] with 8 E r , n E 11 then r/(z) = ~(8(n)),
(ix) if z= [<p(8) I;' I ZI] with 8 E r, ZI E Z then r/(z) = [). I w] with
w= r/([<p(8*) IZI]), where 8* is defined by 8*(1) = I, 8*(k) =8(k-l) + I
(k=2, 3, ... ),
(x) if Z= [<p(8) I rp(1]) I ZI] with 8 E r ,1] E r , ZI E Z then rl(z) = rl([rp(81J) Iz])
(where, of course, 81J is defined by (81J)(k)=O(1J(k)) for all kE11)'
8. THEOREMS ON REDUCED FORMS
THEOREM 8.1. For all z E a(Z) we have rl(r/(z))=rl(z).
THEOREM 8.2. For all z E a(Zo) we have rl(z) =z.
THEOREM 8.3. If 8 E r, z E Z then r/([rp(8) I z ] ) =rl([rp(8) I r/(z)]).
THEOREM 8.4. If 00 is the identity (Oo(n)=n for all n), and z E Z, then
rl([rp(Oo) I z]) = rl(z).
These theorems are easily proved by induction with respect to the length
of z, At a certain point in the proof of Theorem 8.3 it plays a role that
the operation of section 7 (ix) satisfies (01])* = 0*1J*.
9. THEOREMS ON SUBSTITUTION
THEOREM 9.1. If Q maps 11 into Z, and if 0 E T, z E Z then
rl(subst (Q, rl([rp(O) I z]))) =r/(subst (Q8, rl(z))).
THEOREM 9.2. If Q maps 11 into Z, and if z E a(Z) then
rl(subst (Q, z))= rl(subst (Q1 , r/(z))) ,
where Q1 is defined by Q1(n) = rl(Q(n)) for all n.
THEOREM 9.3. If <p maps 11 into 11 and if Q(n) =rp(O(n)) for all n,
then we have for all z E Z
r/(subst (Q, z)) = rl([rp(O) I z]) .
THEOREM 9.4. If Q maps 11 into Z, if z E Z, 0 E r, and if Q1 is defined
by Q1(n) = [rp(O) IQ(n)] (n =l, 2, ... ) then
rl(subst (.f.h, z)) = rl ([<p(O) I subst (Q, z)]).
THEOREM 9.5. If Q , E, A are mappings of 11 into Z, sueh that
A(n) = subst (Q, E(n)) (n = 1,2, ... )
then we have for all z E a(Z)
rl(subst(Q, subst(E, z))) = r/(subst (.;1, z)).
These theorems provide a solid background to the conviction that
354
r/(subst (Q, z)) corresponds to what we usually mean by substitution. They
are easily proved by recursion on the length of z. We omit the details .
10. SUBSTITUTION IN ZO
Right now there is not enough experience to compare the value of the
present system of substitution to other systems, in particular to the
system of [1].
In order to facilitate the comparison, we present the definition of sub-
stitution of [1] in our present metalanguage. It operates on Zo and a(Zo).
Ifz E a(Zo) and if Q is a mapping of 11 into Zo, the result of the substitution
will be denoted by 8(Q, z). The definition is by recursion :
(i) if Z= [Zl I , I Z2] with Zl E a(Zo) and Z2 E Zo then
8(Q, z) = [8(Q, Zl) I , I 8(Q, Z2)] ,
(ii) if Z E 0 then 8(Q, z)=Z,
(iii) if Z= [c I ( I Zl I )] with CEO, Zl E a(Zo) then
8(Q, z)= [c I ( 18 (Q, Zl) I )],
(iv) if for some nEl1 z =~(n) then S(Q, z)=Q(n) ,
(v) if Z = [A I Zl] with Zl E Zo then
8(Q, z) = [A I 8(Q1, Zl )]
where Q1 is defined by its valu es Ql(I) =~(l) and
Ql(k) = 8(A, Q(k -1)) (k = 2, 3, ... );
here A is tho mapping dofined by A(k)=~(k+ 1) for all k.
The fact that under (v) it is required to know the effect of 8 on ex-
pressions that are not subexpressions of z, makes recursion proofs a bit
complex.
The following two theorems can be proved st raight forwardly by in-
duction with respect t o the length of z.
THEOREM 10.1. If Z E Zo, 0 E r, then
r/([fJl(O) Iz])=8(e, z)
where e(k) = ~(O(k)) (k = 1, 2, .. .).
THEOREM 10.2. If Z E a(Zo), Q: 11~ Zo then
8(Q, z) = r/(subst (Q, z)).
11. ALGORITHM FOR CHECKING EQUALITY OF REDUCED FORMS
Let x, Y E a(Z). Quite often it is possible to answer the question whether
r/(x) = r/(y) without evaluating r/(x) and r/(y).
For every z E a(Z) there is a unique integer k » 1 such that z has the
355
form [Zl I , I ... I , I Zk] with Zl E Z, ..., Zk E Z. Let us call k the string length
of z. It is clear that Z has the same string length as r!(z). So if x and y
have different string length then certainly r!(x) =ftr!(y) .
Supposing x and y have the same string length k, we check whether
r!(XI) = r!(YI) , . . ., r!(xk) =r!(Yk). This means that we yet have to describe
how we check r!(x) = r!(y) if both x and yare in Z .
If X= [97(0) IXl], y = [97(0) IYI] with 0 E r we just replace the question
by the one whether r!(xI) = r!(YI).
If x still has the form X= [97(0) I xI] but if Y does not have the form
[97(0) IYI], we apply one of the reduction steps (vi)-(x) of section 7, and
if the result is u, we ask whether r!(u) =r!(y). We do a similar thing if
this applies with x and y interchanged.
Finally, if neither x nor y have such a form, we say that r!(x)=ftr!(y)
unless we are in one of the following four cases:
(i) x E 0 and y=x,
(ii) x=[c I (I xII n, y =[c I (I YII )] with Xl, X2 E a(Z), CEO and r!(xI) =
=r!(x2).
(iii) x=y=~(n) for some nEll,
(iv) x = [A. I Xl], y = p. IYI] with Xl E Z, X2 E Z, r!(XI) = r!(x2).
12. REMARK ON STRINGS
Some of the notational effort of the previous sect ions went into the
distinction between Z and a(Z), connected with the fact that we deal
with n-ary expressions like C(UI, ... , un). One of the di sadvantages is, that
recursion over the definition of Z is not so straight-forward as it migh t
be. It is, of course, possible to eliminate this unpleasantness, removing all
cases with n > 2. This can be done by creating a special constant 8 , and
replacing, e.g., C(UI, U2) by C(S(UI, U2)), c(UI, U2, U3) by C(S(UI, 8(U2, U3))),
etc. The cases C and C(UI) are unaltered.
13. Il\rPLEMENTATION
The substitution algorithm (section 6) and the algorithm of section II
have been implemented by Mr. R. Wieringa with the use of the pro-
gramming language PASCAL.
REFERENCES
1. Bruijn, N. G. de - Lambda calculus n otation with nameless dummies, a to ol
for automatic formula manipulati on , with application t o t ho Church-Rosser
theorem. Ned erl. Akad. W etcnsch, Proc, Ser. A 75, (=Indag. Math. 34)
381-392 (1972).
2. Bruijn, N. G. de - Nota ti on for conc a tena t ion . Technological University Eind-
ho ven, Department of Mathematics. :\'Iemorandum 1977-09. August 1977.
356
