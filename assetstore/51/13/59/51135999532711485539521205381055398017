Syntactical Strong Normalization of
Intersection Types with Term Rewriting Rules
Andreas Abel
Department of Computer Science
Ludwig-Maximilians-University Munich
4th International Workshop on Higher-Order Rewriting
Paris, France
June 25, 2007
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 1 / 20
Normalization Proofs in Weak Meta-Theories
Weak systems can be shown consistent in (almost as) weak
meta-theories.
Normalization implies usually consistency.
Tait’s semantical normalization proof for the simply-typed
λ-calculus (STL) is beyond Peano Arithmetic.
Combinatorial/arithmetical/syntactical normalization proofs for the
STL have long been known, e.g., J.J.Levy (1974), Girard, Lafont,
Taylor (1989).
But were better understood for sequent calculus (cut elimination).
No such proof is known for System F; for Go¨del’s T, ε0-induction is
necessary.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 2 / 20
Recent Syntactical Normalization Proofs
Intersection types: Bucciarelli et al. (LICS’99), Matthes (ITRS’00),
Valentini (AML 2001), David (APAL 2001).
Classical natural deduction: David, Nour.
Positive recursive types: David, Nour (TLCA’07).
This work: singleton types with term rewriting.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 3 / 20
My Interest on Normalization in Weak Metatheories
Research: normalization proofs in Twelf.
Twelf: higher-order abstract syntax.
Comfortable variable handling, but no recursive functions.
Only Π2 statements (∀x∃yA).
Termination orders: lexicographic extension of structural order,
i.e., < ωω.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 4 / 20
Content
A normalizer for simply-typed λ
A normalization proof for intersection types
Extension to term rewriting
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 5 / 20
Simply-Typed Lambda-Calculus
A Normalizer for Simply-Typed Lambda-Calculus
A structurally recursive normalizer:
nf(x) = x
nf(λx :A.t) = λx :A.nf(t)
nf(r s) = nf(r)@nf(s)
x ~w@w = x ~w w
(λx :A.v)@w = [wA/x ]v
“Hereditary” subst. of one normal form into another terminates.
[(λy :A.λz :B.w)A→B→C/x ]x u v triggers two new substitutions
[uA/y ]λz :B.w
[vB/z]w ′
but A and B are smaller than A→ B → C.
[wA/x ]v structurally recursive in (A, v).
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 6 / 20
Simply-Typed Lambda-Calculus
Hereditary Substitutions
Normalizing substitution of normal forms: [sA/x ]t
[sA/x ]x = sA
[sA/x ]y = y if x 6= y
[sA/x ](λy :B.r) = λy :B. [sA/x ]r where y fresh for s, x
[sA/x ](t u) = ([uˆB/y ]r ′)C if tˆ = (λy :B′.r ′)B→C
tˆ uˆ otherwise
where tˆ = [sA/x ]t
uˆ = [sA/x ]u
Invariant: |B → C| ≤ |A| in line 4.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 7 / 20
Simply-Typed Lambda-Calculus
Inductive Characterization of Strongly Normalizing
Terms
Following Joachimski and Matthes (2003)
Γ ` t ⇑ A means t is strongly normalizing of type A.
Γ ` t ↓x A means t is sn and neutral of type A.
Rules:
(x :A) ∈ Γ
Γ ` x ↓x A
Γ ` r ↓x A→ B Γ ` s ⇑ A
Γ ` r s ↓x B sne app
Γ ` r ↓x A
Γ ` r ⇑ A sn ne
Γ, x :A ` t ⇑ B
Γ ` λx .t ⇑ A→ B sn lam
Γ ` s ⇑ A Γ ` [s/x ]r ~s ⇑ C
Γ ` (λx .r) s~s ⇑ C sn exp
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 8 / 20
Simply-Typed Lambda-Calculus
Closure of S.N. Terms under Application
Lemma: Let D :: Γ ` s ⇑ A.
1 If E :: Γ ` r ⇑ A→ C then Γ ` r s ⇑ C.
2 If E :: Γ, x :A ` t ⇑ C, then Γ ` [s/x ]t ⇑ C.
3 If E :: Γ, x :A ` t ↓x C, then Γ ` [s/x ]t ⇑ C
and C is a subexpression of A.
4 If E :: Γ, x :A ` t ↓y C with x 6= y , then Γ ` [s/x ]t ↓y C.
Proof: Simultaneously by main induction on type A (for part 3) and
side induction on the derivation E .
Similar to Girard, Lafont and Taylor (1989): Lexicographic
induction on highest degree (=type) of a redex and the number of
redexes of highest degree.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 9 / 20
Intersection Types
Intersection Types
STL + additional typing rules:
Γ ` t : A Γ ` t : B
Γ ` t : A ∩ B
Γ ` t : A ∩ B
Γ ` t : A
Γ ` t : A ∩ B
Γ ` t : B
Exactly the s.n. terms are typable.
Additional rules for inductive characterization of s.n.:
Γ ` n ↓x A ∩ B
Γ ` n ↓x A
Γ ` n ↓x A ∩ B
Γ ` n ↓x B
Γ ` t ⇑ A Γ ` t ⇑ B
Γ ` t ⇑ A ∩ B
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 10 / 20
Intersection Types and Term Rewriting
Strong Normalization Using Domain Theory
Berger (CiE’05) proves s.n. of bar recursion using domain theory.
Main lemma: t is s.n. if [ t ] 6= ⊥.
Coquand, Spiwack (LICS’06) simplify his argument.
They use a λ filter model: [ t ] is the set of types t can be assigned
in a simple intersection type system.
Construction of model requires strong metatheory.
This work: proof of main lemma in weak metatheory.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 11 / 20
Intersection Types and Term Rewriting
Type Assignment for Term Rewriting
Example:
add y 0 −→ y
add y ($x) −→ $(add y x)
add : 0→ 0→ 0
∩ 0→ $0→ $0
∩ $0→ 0→ $0
∩ $0→ $0→ $$0
∩ . . .
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 12 / 20
Intersection Types and Term Rewriting
Types Approximating Function Behavior
Ground types
a,b, c ::= E exception
| 0 | $a zero and successor singletons
Types
A,B,C ::= a ground type
| ⋂i∈I(Ai → Bi) finite funct. descr., all Ai different
Intersection and subtyping definable.
Measure: |a| = 0 and |⋂i∈I(Ai → Bi)| = max{|Ai |+ 1, |Bi | | i ∈ I}.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 13 / 20
Intersection Types and Term Rewriting
Typing
Γ ` 0 : 0
Γ ` r : a
Γ ` $r : $a
Γ ` r : 0 Γ ` z : C
Γ ` f (r) : C f (0) −→ z
Γ ` r : $a Γ, x :a ` s : C
Γ ` f (r) : C f ($x) −→ s
Γ ` r : A
Γ ` f (r) : E A 6= 0, $a
Γ ` r : A Γ ` r : B
Γ ` r : A ∩ B
Γ ` r : A A ⊆ B
Γ ` r : B
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 14 / 20
Intersection Types and Term Rewriting
What about our Termination Argument!?
Neutral terms in STL: The types of the si in x s1 . . . sn are smaller
than the type of x .
With TR: The type of f (x) might be bigger than the type of x .
Problematic for substituting into f (x) s1 . . . sn.
Solution: Distinguish atomic terms x ~s from neutral terms
E [f (x ~s)].
Evaluation contexts:
E [] ::= [] | E [] s | f (E []).
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 15 / 20
Intersection Types and Term Rewriting
S.N. Atomic and Neutral Terms
SN: Atomic terms.
Γ ` x ↓ Γ(x)
Γ ` r ↓ ⋂i∈I(Ai → Bi) Γ ` s ⇑ Aj for all j ∈ J
Γ ` r s ↓ ⋂j∈J Bj
SN: Neutral terms.
Γ ` r ↓ A A ⊆ B
Γ ` r ⇓ B
Γ ` r ⇓ 0 Γ ` z ~s ⇑ C
Γ ` f (r)~s ⇓ C f (0) −→ z
Γ ` r ⇓ $a Γ, x :a ` s~s ⇑ C
Γ ` f (r)~s ⇓ C f ($x) −→ s
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 16 / 20
Intersection Types and Term Rewriting
S.N. Terms
Neutral terms.
Γ ` r ⇓ A A ⊆ B
Γ ` r ⇑ B
Introductions.
Γ, x :Ai ` t ⇑ Bi for all i ∈ I
Γ ` λxt ⇑ ⋂i∈I(Ai → Bi) Γ ` 0 ⇑ 0 Γ ` r ⇑ aΓ ` $r ⇑ $a
Blocked terms.
Γ ` r ⇑ A
Γ ` f (r) ⇑ E A 6= 0, $a
Γ ` r ⇑ E Γ ` s ⇑ A
Γ ` r s ⇑ E
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 17 / 20
Intersection Types and Term Rewriting
S.N. Terms (continued)
Weak head expansions.
Γ ` s ⇑ A Γ ` E [[s/x ]t ] ⇑ C
Γ ` E [(λxt) s] ⇑ C
Γ ` E [z] ⇑ C
Γ ` E [f (0)] ⇑ C f (0) −→ z
Γ ` r ⇑ A Γ ` E [[r/x ]s] ⇑ C
Γ ` E [f ($r)] ⇑ C f ($x) −→ s
Cannot treat higher-order datatypes like tree ordinals (yet!?)
But sufficient for bar recursion example.
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 18 / 20
Intersection Types and Term Rewriting
Conclusion
Technique extends also to predicative polymorphism.
Current work: primitive recursion (needs ordinals up to ωω).
Leads into “Munich” proof theory (ordinal analysis).
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 19 / 20
Intersection Types and Term Rewriting
References
David, Nour: Arithmetical normalization proofs of λ, λµ, positive
recursive types (TLCA 2007).
Matthes, Joachimski, AML 2003: Syntactic normalization.
Watkins et al, TYPES 2003: Hereditary substitutions.
Abel, Weak Normalization for λ in Twelf (LFM 2004).
Schu¨rmann, Sarnat: Logical Relation Proofs in Twelf (HOR 2007
invited talk).
Andreas Abel (LMU Munich) Syntactical Normalization HOR’07 20 / 20
