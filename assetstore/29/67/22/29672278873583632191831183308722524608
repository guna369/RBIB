WUJli$ 
Wuhan University Journal of Natural Sciences 
Vol. 11 No. 3 2006 498-502 
Article ID: 1007-1202(2006)03-0498-05 
An Improved Genetic Algorithm for 
Problem of Genome Rearrangement 
[] MO Zhongxi, ZENG Tao 
,School of Mathematics and Statistics, Wuhan University, 
Wuhan 430072, Hubei, China 
Abstract: In view of the fact that the problem of sorting 
unsigned permutation by reversal is NP-hard, while the prob- 
lem of sorting signed permutation by reversal can be solved 
easily, in this paper, we first transform an unsigned permuta- 
tion of length n, :r= (~q , '* ' ,  ~r,, ), into a set S(Tr) containing 
2" signed permutations, o that the reversal distance of 7r is 
equal to the reversal distance of the optimal signed permuta- 
tion in S(a). Then analyze the structural features of SOr) by 
creating a directed graph and induce a new computing model 
of this question. Finally, an improved genetic algorithm for 
solving the new model is proposed. Experimental results 
show that the proposed model and algorithm is very efficient 
in practice. 
Key words= genome rearrangement; sorting by reversals; 
genetic algorithm; directed graph 
CLC number= 0 242; Q332 
Received date= 2005 09-10 
Foundation item= Supported by the National Natural ~ience Foun 
dation of China (30170214) 
Biography : M() Zhongxi( 1953 ), male, Associate professor, research 
direction: bioinformatics. E-mail: zhxmo@ whu. edu. cn 
0 Introduction 
O ne possible model to study genome volution is to repre- sent genomes as permutations of genes and compute 
their distances based on the minimum number of certain opera- 
tions (rearrangement) needed to transform one permutation 
into another. One operation that has been extensively re- 
searched is reversal. Analysis of genome volving by reversals 
leads to a combinatorial optimization pr blem of sorting by re- 
versals. There are two versions of this problem: the unsigned 
ease, in which the orientation ofgenes is disregarded through- 
out the reversal, and the signed one, where the directions of 
genes do matter. 
The problem of sorting signed permutation can be solved 
in O(n e) time Et'e~, However, both sorting and finding the re- 
versal distance of unsigned permutation have been proven to be 
NP-hard E3'42. So, error bounded heuristic solutions have been 
proposedC,~ 71. Currently, the most acceptable algorithm is the 
3/2-approximation algorithm by Christie E<. Recently, Ref. 
E9] proposed a genetic algorithm to solve this NP-hard prob- 
lem. In this paper, we propose a new computing model of this 
question and an improved genetic algorithm for solving the 
new model. 
1 Basic Definitions and Problem Formula- 
tion 
We consider the case where each genome is composed of 
the same n genes {g~ ,ge ,... ,gn } and each gene appears exact- 
ly once. Thus, each genome G= (gl ,ge ,"" ,g,,) can be repre- 
sented as a permutation ~r= (~q ,~r2 ,"" ,~r,,) of E1 ,n2. 
498 ~ vo~l No 
Let zc = (~r~ ,re2 ,"" ,~r,,) be a permutation, zc is called 
a signed permutation if every element re, of ~r has' -I- ' or 
' - ' s ign ,  denoting orientation of gene, otherwise ~r is 
called an unsigned permutation. Furthermore, let ] = 
(+ l ,q -2 , . . . ,q -n )  and I=(1 ,2 , ' " ,n )  denote identical 
signed permutation and identical unsigned permutation of 
[- 1, n~, respectively. 
Definition 1 A reversal p=pEi,j~(l<~i<~j<~n) on 
~r=(~rl ,~re,"" ,~r,, ) reverses the order and sign ( if ~r is 
signed ) of a segment of zr which s':arts at i and ends at j ,  
yielding: 
~rp=(zq,zrz,'",~r~ ,~r2,zr~ l , ' " ,mt l ,~r , , z r ,  t~, 
"",m, ), if zr is unsigned; 
~/O:  (] ' / '1' ~2 '  ' " '  ~i I ' - -~) ' - -~2  1 ' " " ' - - / [ ' i t  1 ' - 
~r~ ,~rj+~ ,'",zr,,), if~r is signed. 
Given two unsigned (or signed) permutations a and 
/9 of r l , ,~ ,  the problem of finding a series of reversals 
p~ ,Ca , ' "  ,p, such that aplp2 ""p, =/9 and t being minimum 
is called the problem of sorting unsigned ( or signed ) 
permutation by reversals. Here t is called the reversal 
distance of a for/9, denoted ~ (/9). Usually,/9 is assumed 
to be I or I ,  and for given permutation ~r, let d~(I) 
d(~r) and d~( i )=d(~r). 
For every element ~r~ of unsigned permutation ~r, we 
can give it a sign. For example, the unsigned permutation 
,r= (2,1), could produce such a signed permutation set: 
S(~r) ={( -2 , -  1 ) , ( -2 ,  + 1), 
( - t -2 , -  1 ) , (+  2, +1)}  
Obviously, for given an unsigned permutation ~r = 
(~r~ ,~re ,"" ,~r,,),the resulting set S(,r) has 2" signed per- 
mutations with length n. 
Definition 2 Let ~r ~ ~- S(~r). ~r * is called the signed 
permutation with minimum reversal distance in S(~r)( or 
called optimal permutation) iff:a/(~r * )----min{(2(~r') , z /~ 
S( r) }. 
There are following conclusions on the relationship 
between unsigned and singed permutations: 
Proposition 1 ~? Let zc is an unsigned permutation 
of ~l,n~. For each ~r' ~ S(~r), a reversal sequence of ~r 
can be deduced from reversal sequence of ~r'. 
Proposition 2 ~9~ Let ~r be an unsigned permutation 
of [1, n~, there exists signed permutation ~r * ~ S(zr), 
such that d(zr)=d(~r ~). 
Thus, the problem of computing the reversal dis- 
tance of an unsigned permutation of length n,~, can be 
transformed to the problem of computing reversal dis- 
tance of an optimal signed permutation i  S(~r). Howev- 
er, the size of S(zr) is 2" and it is not feasible to go 
through all S(Tr). Hence, we need to seek algorithms 
which can find out the optimal signed permutations in 
S(~r) in reasonable time. 
2 The Structural Features of Set S(Tr) 
Definition 3 A reversal p=p[i,j] is called a trivial 
reversal if i=j,  otherwise called nontrivial reversal. 
Definition 4 I.et a~ S(Tr) and p= (p1 ,ca , ' "  ,p, ) be 
a reversal sequence of a, i. e. ap= ]. If: 3 i~ { 1 ,2 , - " , t  } 
such that pi is a trivial reversal, then p is called a trivial 
reversal sequence of a, otherwise p is called a nontrivial 
reversal sequence. 
Definition 5 l.et a~S(~r). We say that a is a trivial 
signed permutation if a has at least one trivial reversal se- 
quence, otherwise a is a nontrivial signed permutation. 
It is clear that ,for any aC- S(lr) ,if p= (pl ,pc , ' " ,  
p, ) is a trivial reversal sequence on a, and if p, is a trivial 
reversal, then pi could exchanges with reversal p, tl in p. 
That is, 
p• = (p l  ' ' " ' lO i  1 ,/0i+1 'pi'Di+2 ''"'pt) 
is still a trivial reversal sequence on a. 
I.et S(~r) denote the set consisting of all nontrivial 
signed permutations in S(~r). Then from the Proposition 
1 and the Proposition 2, we easily obtain the following 
conclusions: 
Proposition 3 Let ~r is an unsigned permutation, for 
I 
every 7r ~ S(~r), if p= (p~ ,ca , ' "  ,p,,, ) is a reversal se- 
quence of ~r', i. e. 7r'p = i ,  then p is also a reversal se- 
quence of ~r, i. e. , ~rp = I. 
Proposition 4 [,et ~r is an unsigned permutation, 
there exist zr~S(zr) and satisfy d(~r)=dGr). 
PropositionS For any 7r~ ES(Jr), i fd(~r* )=  
d(~r), then ~r X ~-S(~r). 
Below we analyze the relations among permutations 
in S(~r), and then present two types of operations for 
transforming S(~r) to S(~r). 
For given set S(~r), we create a directed graph G= 
(V,E) as follows: (i) Let each a in S(~r) correspond to 
an unique vertex v in G,denoted a~v.  i.e. let V=S(~r) ;
(ii) For vertex v~ V (v~a),  define a weight w(v)= 
d(a) ; (iii) V v, u ~ r (a~v,/gC~u), define a directed 
edge (v, u) ~ E from vertex v to vertex u if and only if 
existing a trivia1 reversal p on a such that ap=/9 and d(/9) 
499 
=d(a) - l ,  i. e. w(u)=m(v) - l .  It is clear that this di- 
rected graph G contains no directed cycle. 
For every a~ S(~r) , Let DFS(a) denote a depth 
first search algorithm (operation) as follows: 
DFS(a) { Take a~vE V(G) ; Starting at vertex v, 
traverse graph G using depth-first search, and find the 
vertex with maximum depth, denoted u, which can be 
reachable from vertex v; return//(here/~u). } 
For any a~S(~r), we have DFS(a) ~S(rr). Hence 
DFS(a) can be viewed as an operation of transforming 
S(zr) to S(rr). Note that DFS(a) is indeed a many to 
many transformation. Due to taking the depth search and 
thinking of structural feature of graph G, if/21 = DFS(a) 
and ~ =DFS(a), then it follows d(//1 ) =[l(//2 ). Our ob- 
ject is to compute d(~r), so we could think that fll and 
is equivalent. Furthermore, DFS (a) could be seen as a 
condensed transformation of many to one. In other 
words, the result of the transformation is exclusive. 
Thus, the problem of seeking optimal permutations in set 
S(~r) can be changed to the one of seeking optimal per- 
mutations in DFS(SOr))CS(~r). Below we will make a 
rough estimate for the distribution of optimal permuta- 
tions in S(zr) and DFS(SOr)). 
First, we introduce some concepts. For any a,/2~ 
S(Tr), we define a new distance between a and ,8 to be 
D(a,fl) = ~ sign(a/,//i) ,where sign(z,y)=0 if :ry> 
i 1 
0, otherwise sign(ar, y )= l  if 3=y<0. Let D(a, I )=  
D(a). It is easy to see that Va,//~SOr), if d~ (//)=k, 
then D(fl, a)=k. For VaE S(~r),define the k-neighbor- 
hood of a as Dk(a)={rESOr) ,D( r ,a )~k},  and notice 
k 
that I/2k (a) I = ~ G 9 Let ,r ~ be an optimal permuta- 
i=0  
tion in SOD, and let Opt(~r ~ ) -- {rE S(~r) t DFS(r) = 
~r ~ }. We call Opt(zF ) the optimal solution field of zF , 
and call element r in Opt(zF ) pseudo optimal permuta- 
tion when d(r):/:d(rF ). 
Suppose ,F is the unique optimal permutation i  
S(zr), then its distribution in S(~r) is 1/2". Let a~ SOr) 
and DFS(a)=zF ,then it is clear that d(a)<~n,d,r (a)<~ 
n-a/(zF ), and D(a,TF )<~n-d(~F ). Therefore, in the 
best case, we have Opt(zF )=a2k (zF) ,  that is, for V r 
~k(~r  ~ ) ,k=n-2/(~r ~),having DFS(r)=zF Hence 
n~(Tr  ~ ) 
the maximum distribution of ,r* in S(zr) is ~ C~,,/2 " . 
In the worst ease, for V r~ (~r")C()ptOr* ), we 
have DFS(r)=~r ~ . Hence the minimum distribution of 
zF in SOD is (l§ 
We want to point out that under the condition of en- 
suring that all the optimal permutations in SOD will be 
not lost, we can define many transform operations from 
S(,r) to .~Or). Different transform operation only affects 
the distribution of optimal permutations in S(~r). Indeed, 
above defined operation DFS(a) can make the distribution 
of optimal permutations ,F in DFS (SOr))CS(~r) reach 
maximum. However, the time cost of DFS(a) is too ex- 
pensive. In the later testing experiment, we will use an- 
other transform operation, called right-order transforma- 
tion, denoted DFS_ROT(a). 
DFS_ROT(a) {a = (al ,a2 , " "  ,a,, ) ~ S(a') ; 
e=d(a); 
/ /do trivial reversal p=p[i,i] on a 
for(i= l ;i< =n;i+ + ) 
{a '=  (al ,a2 , ' " ,  - -a i  , ' "  ,an ) ; 
e' =a(a'); 
if(e'<e {a=a ' ;e=e '} 
} 
return(a) }
From the definition of DFS_ROT and the arbitrarily 
exchangeable property of the trivial reversals, we have 
the following conclusion. 
Proposition 6 
@ For V a~ SOr), we have DFS_ROT(a) E S(zr) ; 
@ 3,r ~ ~ DFS_ROT(S(zr) )CS(~r)  such that 
3(rr" ) =dOr). 
Now we estimate distributions of optimal permuta- 
tion in S(~r) using two sets of numerical simulation tests: 
(i) Enumerating test on short sequences 
For a given integer n, there are n! unsigned permuta- 
tions and each of them is calculated. For every given un- 
signed permutation ~r, each signed permutations in SOr) is 
also calculated. For a specific unsigned permutation ~r = 
(~rl ,~r2 , '" ,~rn) with reversal distance d, if a permutation a 
S(zr) and d(a)=d, then a is a optimal permutation in S 
(~r);otherwise if a/(a) ~d,  but a' = DFS_ROT(a) and 
d(a') =d,then a is a pseudo optimal permutation i SOt). 
Note that taking any pseudo optimal permutation as start, 
we can search out an optimal permutation and computing 
cost is the same. Use Md and Na to denote the number of
all optimal permutations a dthe number of all the pseudo 
optimal permutations in SOr) respectively. Let r = (Md + 
Nd)/2" and call r the ratio of the optimal solutions of
S(~r). Taking n=7,8,9, the results obtained by enumera- 
500 
tion test method above see Table 1. 
Table 1 The result of the enumerating test with short sequences 
Region of ralio NUP(7) NUP(8) NUP(9) 
[0.0,  0.2) 0 1103 10815 
[0.2,  0.4) 553 9074 110894 
[0.4,  0.6) 1998 13460 125046 
[0.6,  0.8) 1560 11765 88319 
[0.8,  1.0] 929 4918 27806 
Here NUP (n) denotes the number of unsigned permutations with 
length n 
Table 1 tells us that for most unsigned permuta- 
tions, optimal solution ratio of them is large. For exam- 
ple, with n=8, having 40 320 unsigned permutations in 
all , there are only 1 103 permutations which their opti- 
mal solution ratio is smaller than 0.2,and there are 4918 
permutations which their optimal solution ratio is larger 
than 0.8. This fact means that the possibility of finding 
optimal permutation from SOt) is great. 
(ii) Sampling test on long sequence 
In order to compare with computing results in later 
section, we take the following unsigned permutation of- 
length 36,which is given in Ref. [6]. 
12 31 34 28 26 17 294 9 36 18 35 19 1 16 14 32 
33 22 15 11 27 5 20 13 30 23 10 6 3 24 218 25 2 7. 
This unsigned permutation can produce 236 signed permu- 
tations and we take about 104 permutations among them 
as samples. We take in turn 100i(i = 1,2, '" ,  100) signed 
permutations randomly, and then calculate their approxi- 
mate ratios of optimal solutions according the method 
used in short sequences above. Obviously r sample size 
is large enough so that the ratios of the approximate opti- 
mal solutions tend to the stability, see Fig. 1. 
4.0 
3.5 
3.0 
.o 2.5 
2.0 
"4 
1.5 .~ 
1.0 
0.5 
0 
, , 2~8 . . . . . . .  10 19 37 46 55 64 73 82 91 100 
Sample size / 102 
Fig. 1 The result of sampling test 
Note that he approximate optimal solution ratio of 
this instance is about 2.5%, which is larger than 
lO 
~-]C{.a6//236 =0.005 665=0. 566 5o//00, hence it is possi 
i=0  
ble that there are more optimal solutions for the instance. 
These simulation tests above show that using the 
transform operation DFS_ROT advantages to search out 
the optimal permutation from set SOr). 
3 An Improved Genetic Algorithm and 
Experimental Results 
Considering the fact that transformation operation 
DFS_ROT defined in above section has very strong ability 
of local optimizing, we propose an improved genetic algo- 
rithm through combining the standard genetic algorithm 
with the operation DFS_ROT as the following. 
Step 1 Generate N signed permutations randomly 
as initial population pop(0) CS(n). Set k: = 0 ; 
Step 2 For each individual a in pop(k),do the op- 
eration DFS_ ROT(a) and take DFS_R()T(pop(k)) as a 
new pop(k); 
Step 3 If the termination condition has met, then 
stop; otherwise do next step; 
Step 4 Do cross operation to get the population 
crosspop(k), then do mutation operation to get popula- 
tion mutpop(k) ; 
Step 5 Set pop(kq-1)=mutpop(k) ,k  = =kq- l , re-  
turn step 2. 
In the improved genetic algorithm, cross and muta- 
tion operation is the same as the one used in Ref. [9], 
and for given individual .rff pop(k), we take f (x)=dCr)  
as its fitness. 
In order to identify the validity of our algorithm, we 
do more data experiments u ing the algorithm and com- 
pare with the results of 3/2-approximation algorithm and 
genetic algorithm. In our experiments, wetake the size of 
population, N = 100, the cross ratio to be 0.5 and the 
mutation ratio to be 0.4. The termination condition of al- 
gorithm is that the fitness of the best individual in popu- 
lation has not changed in consecutive 100 generations. 
For given integer n (take n = 10,20,30,40,50,60, 
70,80,90,100, respectively), we produce 1000 unsigned 
permutations with length n, and for each such permuta 
tion, we compute its reversal distance using 3/2-approxi- 
mation algorithm, genetic algorithm and the improved 
genetic algorithm, respectively. For each algorithm, we 
get an average distance: d(~r) = {all (~r) -l-d2 (~r) -[-"'" 4_ 
dlooo (rr) }/1000. The results are showed in Table 2. 
Next we use the improved algorithm to calculate the 
long permutation offered in above sampling test on long se- 
501 
quence. We get the reversal distance of this permutation 
being 26, which is less than 27 got by branch and bound 
algorithm in Ref. [62 and the same as a result provided in 
Ref. ~10~, but the reversal sequence got here is different 
with Ref. ~10~. In particular, we have got several optimal 
signed permutations. The result is listed in Table 3. 
Table 2 Performance comparison of three algorithms 
3/2-Approximation Genetic Algorithm Improved Genetic Algorithm 
n 
generations d generations d generations 
10 3.850 3.643 1.898 3.643 1.00 
20 8.912 8.007 5.638 8.007 1.00 
30 14.362 12.775 9.313 12.770 1.00 
40 19.695 - -  17.345 12.674 17.324 1.00 
50 25.241 22.021 15.798 21.968 1.00 
60 30.824 27.160 18.635 27.060 1.03 
70 36.522 31.660 21.900 31.430 1.07 
80 42.179 37.010 24.220 36.770 1.34 
90 47.719 42.020 26.420 41.550 1.48 
100 53.282 46.290 28.190 45.690 1.42 
Here generations is the average iteration times needed for an algorithm to find the optimal first 
Table 3 Several optimal signed permutations 
rr( 12 31 --34 28 --26 --17 --29 --4 9 --36 --18 35 19 --1 16 --14 32 33 --22 15 --11 --27 5 --20 --13 --30 --23 
--10 --6 --3 --24 --21 --8 25 2 --7 
zr2* --12 31 34 --28 26 17 29 4 9 --36 --18 35 19 1 16 14 32 33 --22 --15 11 27 5 --20 13 --30 --23 --10 --6 3 24 
--21 8 --25 2 --7 
~r; --12 - -3 l  34 --28 26 --17 --29 --4 9 --36 --18 35 19 1 16 14 32 33 22 --15 --11 27 5 --20 13 30 --23 --10 
--6 3 24 --21 8 25 2 --7 
Jr( --12 --31 34 --28 26 --17 --29 --4 9 36 --18 35 19 1 16 14 32 33 22 15 11 --27 5 20 13 30 --23 --10 --6 
--3 24 --21 --8 25 2 --7 
~r~* 12 31 34 28 --26 17 --29 --4 9 --36 --18 35 19 1 --16 14 32 33 --22 15 11 --27 5 --20 13 --30 --23 --10 
--6 3 --24 21 8 25 2 --7 
4 Conclusion 
Experimental results show thatour proposed meth- 
od outperforms the 3/2-approximation algorithm in ReL 
]-8~ , the branch and bound algorithm in Ref. [6~ and the 
genetic algorithm in Ref. [-9~. Indeed, in most cases this 
method could find optimal solution to the problem of sor- 
ting unsigned permutation by reversal in very short time, 
iteration times needed being very few. 
According most unsigned permutations have great 
optimal ratio, designing more effective algorithm to rec- 
ognize these permutations and give their reversal distance 
quickly will be researched in future work. 
References 
~1~ Kaplan H, Shamir R, Tarjan R E. A Faster and Simpler A1 
gorithm for Sorting Signed Permutations by Reversals~J]. 
SIAM Journal of Computing, 1999,29(3 ) : 880-892. 
[2~ Bader D A, Morot B M E, Yan M. A Linear-time Algorithm 
for Computing Inversion Distance between Signed Permuta- 
tions with an Experimental Study EJ]. Journal of  Computa 
tional Biology, 2001,8(5) :483 491. 
r3] Caprara A. Sorting by Reversals is DiffieultEC]//Proceed- 
ings of the First Annual International ConJerem'e on Com- 
putational Molecular Biology. New York: ACM Press, 
1997:75 83. 
E4] Caprara A. Sorting Permutations by Reversals and Eulerian 
Cycle Decompositions [J]. SIAM J of  Discrete Mathematics, 
1999,12(1) :91 110. 
E5] Bafna V, Pevzner P A. Genome Rearrangements and Sorting 
by Reversals EJ~. SIAM J on Computing, 1996,25(2) : 273- 
289. 
[6] Kececioglu J, Sankoff D. Exact and Approximation Algo- 
rithms for Sorting by Reversals with Application to Genome 
Rearrangement E J2. Algorithmica, 1995,13 : 180 210. 
E7] Pevzner P A. Computational Molecular Biology :An Algorith- 
mic Approach [M]. Cambridge: MIT Press, 2000:229 249. 
E8] Christie D A. A 3/2-Approximation Algorithm for Sorting 
by Reversals [C ] / /  Proc Ninth Annual ACM-SIAM Syrup 
on Discrete Algorithms (SODA 98). MA: ACM Press, 1998 : 
244-252. 
E9] Auyeung A, Abraham A. Estimating Genome Reversal Dis- 
tance by Genetic AlgorithmEC]// 2003 IEEE Congress on 
Evolutionary Computation (CEC2003). Australia: IEEE 
Press,2003:l157-1161. 
[10~ Salminen H. Genome Rearrangements [EB/OL~. [2005-01- 
211. ht tp : / /~x , ,  cs. utu. fi/bioinfprmsyovs/2OO1-2/ln- 
troduction_uusin, ppt. 
[] 
502 ~.,z~r~oxi ~ic A~m~ for 
