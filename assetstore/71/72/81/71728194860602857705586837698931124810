Easy Intruder Deduction Problems with Homomorphisms
St´ephanie Delaune
France T´el´ecom, Division R&D – LSV, CNRS & ENS de Cachan – France
Abstract
We present complexity results for the veriﬁcation of security protocols. Since the perfect cryptography assumption is unrealistic for cryptographic primitives with visible algebraic properties, we extend the classical Dolev-Yao model by permitting the intruder to exploit these properties. More precisely, we are interested in theories such as Exclusive or and Abelian groups in combination with the homomorphism axiom. We show that the intruder deduction problem is in PTIME in both cases, improving the EXPTIME complexity results presented in [10].
Key words: automatic theorem proving, formal methods, security protocols

1 Introduction

In security protocol analysis, the knowledge of an attacker is often described in terms of deduction: Given some messages T and a message s, can the intruder deduce s from T ? This problem, called the intruder deduction problem, corresponds to the security decision problem in presence of an eavesdropper and is a cornerstone for the veriﬁcation problem and for the search of attacks.
This deduction problem depends on the equational theory that governs the function symbols appearing in messages. In several works, the underlying cryptographic primitives are based on the Dolev-Yao model [8] which may be too strong in some situations. Recently, a number of results [7] have been obtained for including algebraic properties by the means of equational theories.
In this paper, we are interested in Associative and Commutative (AC) theories such as Exclusive or (ACUN) and Abelian groups (AG) in combination with
Email address: delaune@lsv.ens-cachan.fr (St´ephanie Delaune).

Preprint submitted to Elsevier Science

14 November 2005

the homomorphism axiom (h). Some protocols relying on these algebraic properties are described in [7]: Bull’s protocol, Wired Equivalent Privacy (WEP) protocol... For instance, in the WEP protocol, a checksum function having the homomorphism property over an (ACUN) symbol is used. Another wellknown example is the TMN protocol [15] on which an attack, due to Simmons, makes use of the homomorphic property of RSA encryption. Such a protocol, in which RSA encryption is only used with the public key of the server, can be modelled in our settings assuming that the decryption key of the server is a trusted key. The homomorphism property is also crucial in the ﬁeld of electronic voting protocols [3].
In [1], the authors state a general decidability result for the intruder deduction problem, by providing some hypotheses under which the deduction problem is decidable. However, they do not give any complexity result and it seems it is diﬃcult to check that a particular theory satisﬁes the hypotheses. In this paper, we show that the intruder deduction problem in the equational theory ACUNh (resp. AGh) is decidable in PTIME, improving the EXPTIME complexity results of [10]. The techniques used are rather similar. Nevertheless, the introduction of a rule scheme to treat ⊕ and h at the same time allows us to obtain simpler proofs and better complexity results.
2 Intruder Deduction Problem
2.1 Basic Deﬁnitions
We use classical notation and terminology on terms, uniﬁcation and rewrite systems. We write T (F, X ) for the set of terms built over the ﬁnite (ranked) alphabet F of function symbols and the set X of variables. T (F, ∅) is also written T (F). The set of positions of t is written O(t). The subterm of t at position p ∈ O(t) is written t|p. The term obtained by replacing t|p with u is denoted t[u]p. The set of variables occurring in t is noted vars(t).
A substitution σ is a mapping from a ﬁnite subset of X , called its domain and written dom(σ), to T (F, X ). Substitutions are extended to endomorphisms of T (F, X ) as usual. We use a postﬁx notation for their application. If E is a set of equations (unordered pair of terms), we note sig(E) for the set of function symbols occurring in E and by =E the least congruence on T (F, X ) such that uσ =E vσ for all pairs u = v ∈ E and substitutions σ. An E-context is a λ-term λx1, . . . , xn.t with t ∈ T (sig(E), {x1, . . . , xn}), also written t[x1, . . . , xn]. The application of t[x1, . . . , xn] to arguments u1, . . . , un is written t[u1, . . . , un].
A term rewriting system (TRS) is a ﬁnite set of rewrite rules l → r where
2

l ∈ T (F, X ) and r ∈ T (F, vars(l)). Given a TRS R and a set of equations E,
the relation →R/E (rewriting modulo E) is deﬁned as follows: s →R/E t if and only if s =E u[lσ]p and u[rσ]p =E t, for some context u, position p in u, rule l → r ∈ R, and substitution σ. The rewrite system R/E is strongly terminating
if there is no inﬁnite chains t1 →R/E t2 →R/E . . . and it is locally conﬂuent if for every 3 terms t, s1 and s2 such that t →R/E s1, t →R/E s2, there exists a term s such that s1 −→∗ R/E s, s2 −→∗ R/E s where −→∗ R/E is the reﬂexive and transitive closure of →R/E. A rewrite system R/E is said to be E-convergent if it is both strongly terminating and locally conﬂuent. A term t is in normal form (w.r.t. →R/E) if there is no term s such that t →R/E s. If t −→∗ R/E s and s is in normal form then we say that s is a normal form of t.

2.2 Dolev-Yao Model Extended with an Equational Theory

The most widely used deduction relation representing the deduction abilities of an intruder is often referred to as the Dolev-Yao model [8]. In addition, we give to the intruder the power to use equational reasoning modulo a set E of equational axioms. The resulting set of deduction rules for symmetric encryption is given in Figure 1. It is not diﬃcult to design a similar deduction system for asymmetric encryption and to extend our results to this inference system.

Axiom (A)

u∈T T ⊢E u

T ⊢E u1 . . . T ⊢E un

Compose (C)

with f ∈ F

T ⊢E f (u1, . . . , un)

Unpairing (UL) T ⊢E u, v T ⊢E u

Decryption (D) T ⊢E {u}v T ⊢E v T ⊢E u

Unpairing (UR) T ⊢E u, v T ⊢E v

T ⊢E u u =E v Equality (Eq)
T ⊢E v

Fig. 1. Dolev-Yao Model Extended with an Equational Theory
The intended meaning of a sequent T ⊢E u is that the intruder is able to deduce the term u ∈ T (F) from the ﬁnite set of terms T ⊆ T (F). As in the standard Dolev-Yao model, the intruder knows any term that he has previously observed (A), he can compose new terms (C) from known terms, he can also decompose pairs (UL, UR) and decrypt ciphertexts, providing that he can deduce the decryption key (D). Finally, we relax the perfect cryptography assumption through the rule (Eq) allowing the intruder to exploit the algebraic properties of cryptographic primitives.

Deﬁnition 1 (E-proof ) An E-proof P of T ⊢E u is a tree such that:

3

• every leaf of P is labeled with an expression of the form “v ∈ T ”, • for every node labeled with a sequent T ⊢E v having n sons labeled with
T ⊢E s1, . . ., T ⊢E sn, there is an instance of an inference rule with conclusion T ⊢E v and hypotheses T ⊢E s1, . . ., T ⊢E sn. We say that P ends with this instance if the node is the root of P , • the root is labeled with T ⊢E u.
Assume that the equational theory E is ﬁxed. The problem whether an intruder can gain certain information s from a set of knowledge T , i.e. whether there is an E-proof of T ⊢E s, is called the intruder deduction problem (ID).
INPUT: a ﬁnite set of terms T , a term s (the secret). OUTPUT: Does there exist an E-proof of T ⊢E s ?
In this paper, we focus on the theories ACh, ACUNh, AGh, i.e. the homomorphism axiom (h), h(x ⊕ y) = h(x) ⊕ h(y), in combination with:
(1) Associativity, Commutativity (AC): (x⊕y)⊕z = x⊕(y⊕z), x⊕y = y⊕x. (2) Exclusive or (ACUN): (AC), Unit (U): x⊕0 = x, Nilpotence (N): x⊕x = 0. (3) Abelian groups (AG): (AC), Unit (U): x⊕0 = x, Inverse (Inv): x⊕I(x) = 0.

3 PTIME Decision Procedures

The proof system given in Figure 1 is not appropriate for automated proof search: the rule (Eq) allows equational reasoning at any moment of a proof. To deﬁne a more eﬀective model, we represent the equational theory by an AC-convergent rewrite system. In the case of ACh, we have just to orient from left to right (h). For ACUNh, we orient from left to right the equations (U), (N) and (h) and we add h(0) → 0. For AGh, this can be achieved by orienting from left to right (U), (Inv) and (h) and by adding the rules in Figure 2.

I(x ⊕ y) → I(x) ⊕ I(y)

h(0) → 0 I(0) → 0

I(I(x)) → x h(I(x)) → I(h(x))

Fig. 2. Rewriting Rules

Now, we omit the rule (Eq) and consider a variant of the deduction model which works on normal forms. After each step, the term obtained is reduced to its normal form. This new deduction system on sequents T ⊢ u consists in:

(1) the deduction rules (A, UL, UR, D) (where ⊢E is replaced by ⊢), (2) a restricted form of the rule (C), denoted by (C−), where ⊢E is replaced
by ⊢ and the side condition is slightly more restrictive: f ∈ F sig(E),

4

(3) and lastly, a rule scheme, denoted (ME):
T ⊢ u1 . . . T ⊢ un with C an E-context T ⊢ C[u1, . . . , un]
Example 2 If we consider the ACUNh theory, the inference below is an instance of the rule (ME) with C = x1 ⊕ h(x1) ⊕ h2(x1) ⊕ h(x2).
T ⊢ a ⊕ h(a) T ⊢ b T ⊢ a ⊕ h3(a) ⊕ h(b)

Equivalence modulo AC is easy to decide, so we omit the equality rule for AC and just work with equivalence classes modulo AC. The notion of proof in this inference system is similar to the notion of E-proof previously deﬁned. The only diﬀerence is that nodes are labeled with sequents of the form “T ⊢ v”.
Since the equational theories studied in this paper do not interfere with the standard function symbols, i.e. sig(E) ∩ {{ } ; , } = ∅, we have:
Theorem 3 Let T be a set of terms and u a term (in normal form). We have: T ⊢ u is derivable ⇔ T ⊢E u is derivable

PROOF. Given a proof of T ⊢ u, we can easily ﬁnd an E-proof of T ⊢E u by

inserting (Eq) steps. Conversely, given an E-proof of T ⊢E u, we can transform

it by changing all ⊢E into ⊢, normalizing all terms to the right of ⊢ and

dropping all applications of (Eq). Note that an instance of (C) in the E-proof

has to be seen (in the proof of T ⊢ u) either as an instance of (ME) or of (C−),

depending on whether f ∈ sig(E) or not.

2

To show that (ID) is decidable in PTIME, we use the notion of locality introduced by McAllester [12]. As in [10], we need to establish:
(1) a locality result (Section 4) for the inference system ⊢: checking the existence of a proof of T ⊢ u amounts to checking the existence of a local proof involving only a polynomial number of terms,
(2) a one-step-deducibility result (Section 5) to ensure that we can test in PTIME whether a term is deducible in one-step from a set of terms by using an instance of one of the inference rules. The only critical rule is (ME).
The existence of a local proof of T ⊢ u can be checked in polynomial time by saturation of T with terms deducible in one-step. Thanks to locality, the number of iteration to obtain a saturated set is bounded by the number of terms that can be involved in a local proof. This yields a PTIME algorithm.

5

In the remainder, we study locality and provide algorithms for one-step deducibility of (ME) in our three cases. For ACh, (ID) is NP-complete as mentioned in [10] without proof. Anyway, a reduction from BIN PACKING entails that solving linear Diophantine equations over N is strongly NP-complete. Then, it is easy to see that (ID) is NP-complete as well. Hence, there is no hope of improving the complexity result of [10] in this case.
Theorem 4 (Main Result) (ID) is PTIME-complete for ACUNh and AGh.
The PTIME-hardness is due to the Dolev-Yao part of the model and can be proved by a reduction from HORNSAT.
4 Locality
A term t is headed with f if t is of the form f (u) for some term u. A term t is standard if it is not headed with any f ∈ sig(E).
Deﬁnition 5 P is a decomposition proof of T ⊢ u if P ends either with an instance of a decomposition rule (i.e. (A, UL, UR, D)), or with an instance of (ME) where u is a standard term. The size of a proof P , denoted by |P |, is the number of nodes in P . A proof P of T ⊢ u is minimal if there is no proof P ′ of T ⊢ u such that |P ′| < |P |.
Deﬁnition 6 Let t be a term, t = C[t1, . . . , tn] for some standard terms t1, . . . , tn and an E-context C. The set FactE(t) of factors of t is deﬁned by FactE(t) = {t1, . . . , tn}. The set StE(t) of subterms of t is the smallest set s.t.:
• t ∈ StE(t), • if f (t1, . . . , tn) ∈ StE(t) is standard then t1, . . . tn ∈ StE(t), • if s ∈ StE(t) is not standard then FactE(s) ⊆ StE(t).
For example, let t1 = h2(a) ⊕ b ⊕ c and t2 = h( a, b ) ⊕ c. We have StE(t1) = {t1, a, b, c} and StE(t2) = {t2, a, b , a, b, c}. These notations are extended as expected to sets of terms.
Lemma 7 Let T be a set of terms and u a term (in normal forms) such that 0 ∈ T . A minimal proof P of T ⊢ u only contains terms in StE(T ∪ {u}).
PROOF. This is similar to proofs in [6]. By induction on P , we prove that:
(1) P only contains terms in StE(T ∪ {u}), (2) if P is a decomposition proof, then P contains only terms in StE(T ).
6

We consider all possible cases for the last inference rule of P and we conclude

by applying the induction hypothesis (1) or (2). The most interesting case is

when the last inference is (ME). We have the following derivation:

... ...

P1 T ⊢ u1

. . . Pn T ⊢ un

T ⊢ C[u1, . . . , un]

(ME)

By (1), each Pi only contains terms in StE(T ∪ {ui}). Moreover, if ui is not a

standard term, Pi is necessarily a decomposition proof (by minimality of P ,

we could otherwise merge the last rule with (ME)) and we can apply (2). Now, we have to deal with the ui that are standard. Either ui ∈ StE(u), or ui is

canceled out by another term. In the second case, since P is minimal, ui must

be canceled out by some term uj with j = i that is not standard (otherwise

the same term would appear twice in the premises, which contradicts the

minimality of P ). Hence ui ∈ StE(T ). Therefore P only contains terms in StE(T ∪ {u}). Moreover, if we assume that u is a standard term, we have u ∈ StE(ui) for some ui that is not standard. Hence ui ∈ StE(T ) and P only

contains terms in StE(T ).

2

5 One-Step Deducibility
We now investigate the complexity of one-step deducibility for the rule (ME). Our method is inspired by the technique used in [13] to solve uniﬁcation problems in monoidal theories and has also been successfully used to solve one-step deducibility for a simple scheme rule (see [5,10] for instance). The algorithm described below reduces one-step deducibility into the solvability of a system of linear equations over N[X], Z/2Z[X] or Z[X] (depending on E).
Input: a ﬁnite set T = {t1, . . . tn} of terms and a term s (in normal forms).
Output: Let B = {b | b ∈ FactE(T ∪ {s})} and m = |B|. The output is a matrix A of size n × m, a vector b of size m, over N[X] (resp. Z/2Z[X], Z[X]) such that s is one-step deducible by (ME) with E = ACh (resp. ACUNh, AGh) if and only if there exists Y ∈ N[X]n (resp. Z/2Z[X]n, Z[X]n) such that A·Y = b.
Algorithm: Let TB = {t ∈ T (F ) | FactE(t) ⊆ B}. We write B = {b1, . . . , bm}. Let ψ : TB → N[X]m (resp. Z/2Z[X]m, Z[X]m) be deﬁned as follows:
• if x = bi then ψ(x) = (0, . . . , 0, 1, 0, . . . , 0) where 1 is at the ith position, • if x is headed with h, then x = hk(u) and ψ(x) = ψ(u) · Xk, • if x is headed with ⊕, then x = u1 ⊕ · · · ⊕ ul and ψ(x) = 1≤i≤l ψ(ui), • if x is headed with I (AGh case) , then x = I(u) and ψ(x) = −ψ(u).
7

The algorithm returns A = (ψ(t1), . . . , ψ(tn)) and b = ψ(s).
Lemma 8 The algorithm described above is such that A · Y = b has a solution over N[X] (resp. Z/2Z[X], Z[X]) if and only if there exists an E-context C such that C[t1, . . . , tn] =E s with E = ACh (resp. ACUNh, AGh), i.e. s is one-step deducible from t1, . . . , tn by (ME).

PROOF. The function ψ, described above, associates to every term t ∈ TB, an element ψ(t) of N[X]m (resp. Z/2Z[X]m, Z[X]m), and is such that: for

any two terms t, t′, we have ψ(t) = ψ(t′) if and only if t =E t′. In the same way, we deﬁne φ : C → N[X]n (resp. Z/2Z[X]n, Z[X]n) where C =

{C | C is an E-context with n variables}. Note that φ is surjective and that

we have: ψ(C[t1, . . . , tn]) = (ψ(t1), . . . , ψ(tn)) · φ(C). It follows that: ∃Y s.t. A · Y = b ⇔ ∃Y s.t. (ψ(t1), . . . , ψ(tn)) · Y = ψ(s) ⇔ ∃Y s.t. (ψ(t1), . . . , ψ(tn)) · φ(C) = ψ(s) ⇔ ∃C s.t. ψ(C[t1, . . . , tn]) = ψ(s)

⇔ ∃C s.t. C[t1, . . . , tn] =E s

2

Example 9 Let T = {a1 ⊕ h(a1) ⊕ h2(a1), a2 ⊕ h2(a1), h(a2) ⊕ h2(a1)} and s = a1 ⊕ h2(a1) with a1, a2 standard terms. We obtain:



1 + X + X2 X2 X2

A=



0 1X



1 + X2

b=



0

The equation A · Y = b has a solution over Z/2Z[X] : Y = (1 + X, X, 1) is
a solution. Hence, s is one-step deducible with (ME) by using the E-context x1 ⊕ h(x1) ⊕ h(x2) ⊕ x3 where xi is used to denote the ith term of T .

Diﬀerent ways of measuring the size of a term t are conceivable. As in [10], we can consider the case where the size of t is deﬁned as the number of positions in t. In [4], the size of t is deﬁned by |t|d + t where |t|d is the number of nodes needed to represent the factors of t (FactE(t)) as a tree with maximal sharing (DAG representation) and t is the number of bits needed to represent the coeﬃcients (i.e. polynomials) of the factors occurring in t. Anyway, the complexity results described below does not depend on it.

• over N[X]: it is easy to see that each component of a solution of A · Y = b has a degree smaller than the degree of b. The question of whether there exists Y such that A · Y = b can be reduced to solving a system of linear equations over N. We obtain an NP decision procedure. The problem of solving linear Diophantine equations being strongly NP-complete, there is no hope to obtain a better theoretical complexity result.
• over Z/2Z[X]: solvability of linear equations is known to be in PTIME [9]. • over Z[X]: a result (theorem 6.5 in [2]) shows that if a solution of A · Y =
b exists, then it has such a solution the degrees of whose components is

8

polynomially bounded by both the degrees and the size of the coeﬃcients that appear in A and b. The computable character of this bound reduces the problem to solving a large (but polynomial) system of linear equations over Z. We obtain a PTIME decision procedure for the solvability of linear equations in Z[X] through a PTIME decision procedure over Z [14].
6 Conclusion
In this paper, PTIME algorithms allowing us to solve (ID) in ACUNh, AGh are proposed. The high complexity in [10] is essentially due to the fact that the authors treat ⊕ and h separately. Hence, it may be necessary (in their inference system) to build large intermediate terms which partially cancel out when combining them by ⊕. To establish their locality lemma, they have to consider a large set of terms. In this paper, the locality part is easy to prove thanks to the rule scheme (ME). The most complicated part is to establish one-step deducibility, but well-know algebraic results allow us to conclude.
We think that the technique is general enough to deal with some other monoidal theories [13] provided that algebraic techniques exist to solve equations over the corresponding semiring. For instance, considering several commuting homomorphisms symbols would return to work on polynomials with several indeterminates (one per homomorphism symbol). The case where the encryption distributes over the AC symbol, studied in [11], seems to be more complicated and can not be handled straightforwardly with this method.
Acknowledgment: I thank an anonymous referee for pointing out the NPhardness proof of (ID) for (ACh). I am also particularly grateful to H. ComonLundh for his assistance, C. Picaronny for enriching discussions that contributed to this work and R. Treinen for his reading of a preliminary version of this paper. This work has been partly supported by the RNTL project PROUVE´ 03V360 and the ACI-SI Rossignol.
References
[1] M. Abadi and V. Cortier. Deciding knowledge in security protocols under (many more) equational theories. In Proc. 18th IEEE Computer Security Foundations Workshop (CSFW’05), pages 62–76, Aix-en-Provence (France), 2005. IEEE Comp. Soc. Press.
[2] M. Aschenbrenner. Ideal membership in polynomial rings over the integers. Journal of the American Mathematical Society, 17:407–441, 2004.
9

[3] J. Benaloh. Veriﬁable Secret Ballot Elections. PhD thesis, Yale University, 1987.
[4] Y. Chevalier, R. Ku¨sters, M. Rusinowitch, and M. Turuani. Deciding the security of protocols with Diﬃe-Hellman exponentiation and product in exponents. In Proc. 23rd Conf. Foundations of Software Technology and Theoretical Computer Science (FST&TCS’03), volume 2914 of LNCS, pages 124–135, Mumbai (India), 2003. Springer.
[5] Y. Chevalier, R. Ku¨sters, M. Rusinowitch, and M. Turuani. An NP decision procedure for protocol insecurity with XOR. In Proc. of 18th Annual IEEE Symp. Logic in Computer Science (LICS’03), pages 261–270, Ottawa (Canada), 2003. IEEE Comp. Soc. Press.
[6] H. Comon-Lundh and R. Treinen. Easy intruder deductions. In Veriﬁcation: Theory & Practice, Essays Dedicated to Zohar Manna on the Occasion of His 64th Birthday, volume 2772 of LNCS, pages 225–242. Springer, 2003.
[7] V. Cortier, S. Delaune, and P. Lafourcade. A survey of algebraic properties used in cryptographic protocols. Journal of Computer Security, 2005. To appear.
[8] D. Dolev and A. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.
[9] E. Kaltofen, M. S. Krishnamoorthy, and B. D. Saunders. Fast parallel computation of Hermite and Smith forms of polynomial matrices. SIAM Journal of Algebraic and Discrete Methods, 8(4):683–690, 1987.
[10] P. Lafourcade, D. Lugiez, and R. Treinen. Intruder deduction for AC-like equational theories with homomorphisms. In Proc. 16th Int. Conf. Rewriting Techniques and Applications (RTA’05), volume 3467 of LNCS, pages 308–322, Nara (Japan), 2005. Springer.
[11] P. Lafourcade, D. Lugiez, and R. Treinen. Intruder deduction for the equational theory of exclusive-or with distributive encryption. Research Report LSV-05-19, Laboratoire Sp´eciﬁcation et V´eriﬁcation, ENS Cachan, France, 2005.
[12] D. A. McAllester. Automatic recognition of tractability in inference relations. Journal of the ACM, 40(2):284–303, 1993.
[13] W. Nutt. Uniﬁcation in monoidal theories. In Proc. 10th Int. Conf. Automated Deduction, (CADE’90), volume 449 of LNCS, pages 618–632, Kaiserslautern (Germany), 1990. Springer.
[14] A. Schrijver. Theory of Linear and Integer Programming. Wiley, 1986.
[15] M. Tatebayashi, N. Matsuzaki, and D. B. Newman. Key distribution protocol for digital mobile communication systems. In Proc. 9th Annual International Cryptology Conference (CRYPTO’89), volume 435 of LNCS, pages 324–333, Santa Barbara (California, USA), 1989. Springer.
10

