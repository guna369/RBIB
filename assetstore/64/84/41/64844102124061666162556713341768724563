Journal of Computer and System Sciences 70 (2005) 284–299
www.elsevier.com/locate/jcss
An O(n2) algorithm for signed translocation
Lusheng Wanga, Daming Zhub, Xiaowen Liub, Shaohan Mab
aDepartment of Computer Science, City University of Hong Kong, Kowloon, Hong Kong
bSchool of Computer Science and Technology, Shandong University, Jinan 250100, P. R. China
Received 15 August 2004; received in revised form 11 November 2004
Available online 29 January 2005
Abstract
Genome rearrangement is an important area in computational biology. There are three basic operations, reversal,
translocation and transposition.Herewe study the translocation operations.Multi-chromosomal genomes frequently
evolve by translocation events that exchange genetic material between two chromosomes. We focus on the signed
case, where the direction of each gene is known. The signed translocation problem asks to find the minimum
number of translocation operations as well as the sequence of translocation operations to transform one genome
into the other. A linear-time algorithm that computes the minimum number of translocation operations was given in
a linear-time algorithm for computing translocation distance between signed genomes [16]. However, that algorithm
cannot give the optimum sequence of translocation operations. The best known algorithm that can give the optimum
sequence of translocation operations for signed translocation problem runs in O(n2 log n) time. In this paper, we
design an O(n2) algorithm.
© 2005 Elsevier Inc. All rights reserved.
Keywords:Algorithm; Signed translocation; Genome rearrangement
1. Introduction
Genome rearrangement is a new and rapidly developing area in computational biology [18,19]. It con-
tains rich results in terms of both computation and biology. More than 60 years ago, Dobzhansky and
Sturtevant published amilestone paper with an evolutionary tree presenting a rearrangement scenario with
17 reversal operations for the species Drosophila pseudoobscura andMiranda [5]. Genome rearrangement
E-mail addresses: cswangl@cityu.edu.hk (L.Wang), dmzhu@sdu.edu.cn (D. Zhu), liu_xiaowen@mail.sdu.edu.cn (X. Liu),
msh@sdu.edu.cn (S. Ma)
0022-0000/$ - see front matter © 2005 Elsevier Inc. All rights reserved.
doi:10.1016/j.jcss.2004.12.005
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 285
is a commonmodeofmolecular evolution in plants,mammals, virus andbacteria [3,17–19,8–10,15,12,13].
Although the rearrangement process is very complicated, there are three basic operations, reversal,
translocation and transposition. In this paper, we study the translocation operations. Multi-chromosomal
genomes frequently evolve by translocation events that exchange genetic material between two chromo-
somes.A genome is a set of chromosomes and a chromosomeX = x1, x2, . . . , xp is a sequence of genes,
where xi is a signed integer representing a gene.
Let X = x1, . . . , xb−1, xb, . . . , xp and Y = y1, . . . , yc−1, yc, . . . , yq be two chromosomes in a
signed genome. A translocation swaps the segments in the chromosomes and results in two new chro-
mosomes. For a prefix–prefix translocation, the new chromosomes are X′ = x1, . . . , xb−1, yc, . . . , yq
and Y ′ = y1, . . . , yc−1, xb, . . . , xp. For a prefix–suffix translocation, the new chromosomes are X′ =
x1, . . . , xb−1,−yc−1, . . . ,−y1 and Y ′ = −xp, . . . ,−xb, yc, . . . , yq .
Note that the choices of prefix–prefix and prefix–suffix translocations implies that one can change the
direction of a chromosome without increasing the translocation distance. A chromosome X is identical
to chromosomeY if either X = Y or X = −Y . Genome A is identical to genome B if and only if the sets
of chromosomes for A and B are the same.
The translocation distance between genomes A and B, denoted as d(A,B), is the minimum number
of translocations required to transform A into B. Given two genomes, the signed translocation problem
is to find the minimum number of translocations as well as the sequence of translocation operations to
transform one signed genome into the other.
Let A and B be two genomes. The genes at the ends of a chromosome are called head/tail genes. A can
be transformed into B by translocations if and only if:
1. the two genomes contain the same set of genes;
2. the two genomes contain the same number (must be at least 2) of chromosomes;
3. the two genomes have the same set of head/tail genes;
4. for any gene g that is a head/tail gene in A, (a) if g’s sign in A is different from that in B, then g must
be a head in one genome and a tail in the other; (b) if g has the same sign in both A and B, then gmust
be either a head in both genomes or a tail in both genomes.
(The above conditions were first clearly stated in [6].)
The signed translocation problem was first studied in [15]. Hannenhalli gave the first polynomial time
algorithm to solve the problem [11]. The running time is O(n3), where n is the total number of genes
in the genome. An O(n2 log n) algorithm was given in [21]. A linear-time algorithm that computes the
minimum number of translocation operations was given in [16]. However, that algorithm cannot give
the optimal sequence of translocation operations. In this paper, we present an O(n2) algorithm that can
compute the optimum sequence of translocation operations and thus improves upon the best known
algorithm.
It seems that it is common to have linear-time algorithms to compute the distance values for var-
ious kinds of rearrangement operations. However, it takes more time to give an optimal sequence of
operations. For example, for the signed reversal distance, a linear-time algorithm that computes the
reversal distance value was given in [1]. However, the best known algorithms to give an optimal se-
quence of reversal operations still take O(n2) time [2,7,14,4]. Tesler [20] studied the minimum number
of reversals, translocations, fissions and fusions. The value can be computed in linear-time. However,
it takes O(n2) time to give the sequence of the four operations in [20]. The translocation distance
286 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
is different from the distance studied in [20]. Our algorithm makes use of some new and non-trivial
structures.
2. Preliminaries
In this section, we give some basic definitions and describe some previous results that are necessary
to present our new algorithm.
2.1. The breakpoint graph
For a genome A, we will construct a graph GA. For each chromosome X = x1, x2, . . . , xp in genome
A, we have 2p vertices in GA, two vertices xhi , x
t
i for each gene xi in X. The 2p vertices are arranged in
a linear order from left to right as
l(x1)r(x1)l(x2)r(x2) . . . l(xp)r(xp), (1)
where if xi is a positive integer, then l(xi) = xti and r(xi) = xhi ; and if xi is a negative integer, then
l(xi) = xhi and r(xi) = xti . For each i ∈ {1, 2, . . . , p − 1}, there is a black edge (r(xi), l(xi+1)) in GA.
Vertices u and v are neighbours in GA if there is a black edge connecting u and v in GA.
Given two genomes A and B, we can construct the breakpoint graph GAB from GA by adding a grey
edge to every pair of vertices u and v, where u and v are neighbours in GB . The graph GAB contains
two kinds of edges, black edge and grey edge. Each vertex in GAB (except the first and the last in a
chromosome) is incident to two edges, one black and one grey. Thus, each vertex is in a unique cycle
in GAB. From the construction, each black edge in the cycle is followed by a grey edge and vice visa.
A cycle is long if it contains at least two black edges. Otherwise, the cycle is short. If A = B, then all
cycles in GAB are short. d(A,B) is closely related to the number of cycles in GAB.
LetX = x1, x2, . . . , xp be a chromosome in A. A subpermutation is an interval xi, xi+1, . . . , xi+l in X
containing at least three genes such that there is another interval of the same length yk, yk+1, . . . , yk+l in a
chromosomeY of B satisfying {|xi |, |xi+1|, . . . , |xi+l|} = {|yk|, |yk+1|, . . . , |yk+l|}, yk = xi , yk+l = xi+l
and xi+1, . . . , xi+l−1 	= yk+1, . . . , yk+l−1. xi and xi+l are called the ending genes of the subpermutation.
Let I = xi, xi+1, . . . , xj be an interval for chromosome X in A and let V (I) = {xti , xhi , xti+1,
xhi+1, . . . , x
t
j , x
h
j } be the set of vertices in GAB. The leftmost vertex and the rightmost vertex in V (I) are
referred to as LEFT(I ) = l(xi) andRIGHT(I ) = r(xj ). Define IN(I ) = V (I)−{LEFT(I ),RIGHT(I )}.
An edge (u, v) is inside the interval I if both u and v are in IN(I ). A subpermutation I can be viewed as
a subgraph GAB(I ) of GAB containing the vertex set IN(I ) such that
(i) there is no edge (u, v) such that u ∈ IN(I ) and v 	∈ IN(I ), and
(ii) the subgraph corresponding to I has at least one long cycle.
A minimal subpermutation (minSP for short) is a subpermutation such that any other interval in the
minimal subpermutation is not a subpermutation.
Let u and v be two vertices in (1). u is on the left of v in X. A segment [u, v] on chromosome X contains
all the vertices in (1) starting at u and ending at v. A segment [u, v] is inside a segment [x, y] if both u
and v are in [x, y].
The following lemma originated from [11] is used to prove other lemmas, e.g., Lemma 7.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 287
Lemma 1 (Hannenhalli [11]). Cutting a minSP into two segments L and R, there must exist a grey edge
(u, v) such that u ∈ V (L), v ∈ V (R) and (u, v) 	= (RIGHT(L),LEFT(R)).
sAB denotes the number of minimal subpermutations in GAB and cAB denotes the number of cycles in
GAB. The translocation distance is closely related to sAB and cAB. It was shown that
d(A,B) ≥ n−m− cAB,
where n is the number of genes in the genomes andm is the number of chromosomes in the genomes [11].
Given two minSPs in two different chromosomes in A, one can use one translocation to destroy the
two minSP and the resulting breakpoint graph has one more cycle. Thus, roughly speaking, sAB extra
translocations are required to destroy all minSP and keep the same number of cycles. However, if there
are odd number of minSPs, we need one more extra translocation. oAB is defined as
oAB =
{
1 : if the number of minSP is odd,
0 : otherwise. (2)
Another case that needs extra translocations is that in GAB if (1) there are even number of minSPs in
GAB, and (2) all the minSPs are contained in a single subpermutation (and thus all the minSPs are on a
single chromosome of A). Such a single subpermutation is called an even isolation. Note that there is at
most one even isolation. Define
iAB =
{
1 : if there is an even isolation,
0 : otherwise. (3)
The following theorem gives the value of the translocation distance and is the key to design polynomial
time algorithm solving the problem [11].
Theorem 2 (Hannenhalli [11]). Let n be the number of genes in the genomes and m the number of
chromosomes in the genomes. The translocation distance between two signed genomes A and B is
d(A,B) = n−m− cAB + sAB + oAB + 2 · iAB. (4)
2.2. The existing algorithms
Consider two black edges (u, v) and (f, g) in a long cycle in GAB, where (u, v) is in chromosome X
in A and (f, g) is in chromosome Y in A. Consider a translocation  acting on X and Y cutting the two
black edges (u, v) and (f, g).  is a proper translocation if the cycle containing (u, v) and (f, g) inGAB
becomes two cycles in the new breakpoint graph. Otherwise,  is improper. Sometimes, the two black
edges that a translocation cuts might be in different cycles in GAB. In that case, a translocation merges
the two cycles into one. A bad translocation merges two cycles into one (see Fig. 1).
Formula (4) gives the value of the translocation distance between two genomes. We want to find
translocations such that after applying such a translocation, the translocation distance is reduced by one.
Define function AB = [A,B] = cAB − sAB − oAB − 2 · iAB. A translocation  is valid if AB =
[A·,B] −[A,B] = 1, where A ·  is the new genome after  is applied.
288 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
Fig. 1. Proper and bad translocations.
Fig. 2. Algorithm 1: the old algorithm.
It is proved in [11] that (1) if there are proper translocations for GAB, there must be a valid proper
translocation forGAB; and (2) if there is no proper translocation, there must be a valid bad translocation.
The algorithm to find an optimal sequence of valid translocations is given in Fig. 2.
2.3. Ideas for the old algorithms
Suppose there are n genes in the genomes. d(A,B) is at mostO(n). The method in [11] can find a bad
valid translocation in O(n) time when no valid proper translocation is available. Thus, the running time
depends on the time to find a valid proper translocation.
A grey edge is proper if its two ends are in different chromosomes. For a proper grey edge (u, v), there
are two translocations (prefix–prefix and suffix–prefix) to cut the two black edges adjacent to the grey
edge. One of the two translocations breaks a long cycle into two and thus is a proper translocation and
the other is improper. From now on, we use a proper grey edge (u, v) to refer to its proper translocation,
denoted as (u, v). We use the two terms interchangeably.
Note that some proper translocation may not cut two black edges adjacent to a proper grey edge.
However, whenever there is a proper translocation , there must be a proper grey edge in the long cycle
that  breaks. In our algorithm, we always focus on the proper translocations indicated by proper grey
edges.
If a proper grey edge (translocation) does not produce a new minSP, then it is valid. Otherwise, it is
not valid. The following lemma shows that in this case, we can find a valid proper grey edge inside the
new minSP.
Lemma 3 (Zhu and Ma [21]). If a proper translocation forGAB produces a newminSP, say P, then there
must be a proper grey edge inside P that is valid for GAB.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 289
The proof of Theorem 10 in [11] directly shows that Lemma 3 is true. The lemma was first explicitly
stated in [21].
The algorithm in [11] simply checks each grey edge in the newly created minSP to see if the grey edge
leads to a valid proper translocation. For each grey edge, the checking process takesO(n) time. Thus, in
the worst case, it takes O(n2) time to find a valid proper translocation. Since d(A,B) is at most O(n),
the total time required is O(n3).
For the best known algorithm in [21], it takesO(n log n) time to find a valid proper translocation from
the newly created minSP. The idea is as follows:
1. Carefully choose a grey edge in the newly created minSP and test if such a grey edge leads to a valid
proper translocation.
2. If such a grey edge does not lead to a valid proper translocation, then the size of the segment containing
the valid proper grey edge (originally being a minSP) is reduced by half.
3. Go to Step 1 to work on the new segment whose size is reduced by half.
Step 1 takes O(n). In the worst case, it takes O(log n) iterations to find a valid proper translocation.
Thus, the total time to find a valid proper translocation isO(n log n). Since d(A,B) is at mostO(n), the
total time required is O(n2 log n).
Our new algorithm makes use of some new and non-trivial structures. It searches the valid proper grey
edge from the ends of the newly created minSP. It takes O(n) time in total to find a valid proper grey
edge.
3. Computing the translocation distance
LetGAB be the breakpoint graph for the two given genomes A and B. Let V (X) be the set of all vertices
for chromosome X in GAB and V (C) the set of all vertices of cycle C in GAB. Recall that each vertex in
GAB is incident to at most two edges, one black and one grey. Thus, we can find cycles inGAB one by one
and count the number of cycles inGAB. This takesO(n) time. An important task is to find the number of
minSPs.
A cycle C is completely on chromosome X if V (C) ⊆ V (X). Let C1 and C2 be two cycles that are
completely on the same chromosome X of A. If there exist vertices u1 ∈ V (C1) and u2 ∈ V (C2) such
that u1 is between the leftmost and rightmost vertices of C2 and u2 is between the leftmost and rightmost
vertices ofC1, thenC1 intersectsC2 on chromosome X. Nowwe design an algorithm that finds allminSPs
in O(n2) time.
Consider two kinds of long cycles: (a) cycles being completely on chromosome X and (b) cycles being
not completely on chromosome X, but having some vertex in V (X). (We call them bad cycles.) Two
cycles Ci and Cj being completely on X are related if there is a sequence of cycles C1, C2, . . . , Cm being
completely on X such that Ck intersects Ck+1 for k = 1, 2, . . . , m − 1, C1 = Ci and Cm = Cj . We
organize the set of all cycles being completely on chromosome X into groups such that each group is an
equivalence class of related cycles. Let g1, g2, . . . , gr be the set of groups for cycles being completely on
X. Let l(gi) and r(gi) be the leftmost vertex and the rightmost vertex in the cycles in gi , respectively. By
the construction of gi’s, for any two groups gi and gj , either they are disjoint or one contains the other.
Our strategy is to carefully select gi’s such that (1) gi does not contain any other groups, and (2) there is
no grey edge with one end in [l(gi), r(gi)] and the other end in the other chromosome. The algorithm is
given in Fig. 3.
290 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
Fig. 3. Algorithm 2: finding all minSPs in GAB.
Theorem 4. Algorithm 2 finds all minSPs in O(n2) time.
Proof. First, we show that any gi in Q after the execution of the algorithm is a minSP. Consider a gi that
is output by the algorithm. Let V (gi) be the set of all vertices in the long cycles in gi . Thus, if there is a
vertex u that is in [l(gi), r(gi)], but not in V (gi), then umust be in a short cycle being completely on the
same chromosome. (The gi is deleted if u is in a bad long cycle.) Thus, there is no grey edge with one end
in [l(gi), r(gi)] and one end not in [l(gi), r(gi)]. That is, [l(gi), r(gi)] is a subpermutation. (Actually, the
subpermutation contains two more vertices at the two ends of the segment.) From the algorithm (Steps
6–7), [l(gi), r(gi)] does not contain any other [l(gj ), r(gj )], where gj contains at least one long cycle.
Thus, [l(gi), r(gi)] is a minSP.
Second, we want to show that any minSP must be output by the algorithm. Since the two ends of a
minSP are in some long cycles in the same gi , [l(gi), r(gi)] for theminSPmust be inQ after initialization
in Step 1. Since theminSP [l(gi), r(gi)] does not contain any other [l(gj ), r(gj )] and any vertex u in B is
not in [l(gi), r(gi)], [l(gi), r(gi)] will not be deleted by the algorithm. Thus, any minSP must be output
by the algorithm.
Now, consider the time complexity. For the initialization of Q, to get groups g1, g2, . . . , gr , we need
to check every pair of edges containing some vertex in V (X). This can be done in O(n2) time for all
the chromosomes in A. Thus, it takes O(n2) time to initialize Q. It takes O(n) time to initialize B for all
chromosomes in A. The total time required for Steps 4–6 is at most O(x × y), where x is the number
of cycles in Q and y is the number of vertices in GAB. Thus, O(x × y) is upper bounded by O(n2).
Obviously, Steps 7 and 8 also need at most O(n2) time. Therefore, the total running time is O(n2). 
After all theminSPs are determined, it can be easily computed if there are odd number ofminSPs and if
there is an even isolation inO(n) time. Thus by now, translocation distance between two signed genomes
can be computed in O(n2) time. The remaining work is to find all the valid translocation operations to
transform A into B in time O(n2).
It is worth pointing out that Algorithm 2 is important for the O(n) algorithm that finds a valid proper
translocation described in Section 4, where we assume that all the old minSPs have been found by
Algorithm 2. Since Algorithm 2 (running in O(n2) time) is called once in the whole algorithm, solving
the signed translocation problem requires O(n2) time in total.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 291
4. Finding a valid proper translocation in O(n) time
In this section, we give an algorithm to find a valid proper translocation in O(n) time.
4.1. Finding the new minSP
Let min = {P1, P2, . . . , Pk} be the set of all minSPs for GAB. Let X1Y1 be a new chromosome
produced by a proper grey edge in GAB, where X1 is from chromosome X in genome A and Y1 is from
chromosome Y in A. The black edge (RIGHT(X1),LEFT(Y1)) connecting the two parts X1 and Y1 is
called the connecting edge in X1Y1. Obviously, a new minSP must contain the connecting edge.
We can find whether a new minSP is produced in X1Y1 in O(n) time. The idea of our algorithm is to
search the new chromosome X1Y1 starting from the two ends of the connecting edge to left and right,
respectively. Let l and r be the vertices in X1 and Y1 that we are going to check. L denotes the leftmost
vertex in X1 that a new minSP could reach and R denotes the rightmost vertex in Y1 that a new minSP
could reach. left(u)/right(u) denotes the vertex that is on the left/right of vertex u in the breakpoint graph
GAB. The algorithm is given in Fig. 4.
In Step 5, we have to test if an old minSP is in [L,R]. This can be done inO(n) time by looking at all
the old minSPs in min produced by Algorithm 2.
A new subpermutation I in X1Y1 containing the connecting edge is a nested subpermutation if I does
not contain any subpermutation P ′ ⊂ I such that P ′ ⊆ X1 or P ′ ⊆ Y1.
Theorem 5. Algorithm 3 correctly tests whetherX1Y1 contains a new minSP and if yes, outputs the new
minSP. Algorithm 3 runs in O(n) time.
Proof. If a proper translocation, produce a minSP on X1Y1. There must be a long cycle with one vertex
in X1 and one vertex in Y1. It follows that the vertices indicated by L, R, l, r initialized in Step 1 must be
in the minimum subpermutation.
If RIGHT(X1) and LEFT(Y1) form a short cycle, L, l will move left skipping all the short cycles until
meeting a vertex in a long cycle, and similarly, R, r will move right skipping all the short cycles until
meeting a vertex in a long cycle.
Fig. 4. Algorithm 3: testing whether a new minSP exists in O(n) time.
292 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
XM
YM
One of the new chromosomes containing a new SP XMYM
XL YR
XRXL
YL YR
Chromosome Y
Chromosome Xb
c
l(b) r(b)
l(c) r(c)
XM YM
Fig. 5. A proper grey edge (translocation) acting on X and Y generates a new minSP in the resulting chromosomes. XMYM is
the new minSP.
Fig. 6. Algorithm 4: finding a grey edge in XMYM such that at least one of the new chromosomes does not contain any minSP.
Our algorithm extends the segment from the two ends of the connecting edge. If a minSP contains one
end of a grey edge, then it also contains the other end. Moreover, if a minSP contains vertex u in X1 (in
Y1) then it contains all vertices inX1 that are on the right of u (all vertices in Y1 that are on the left of u).
If no grey edge with one end in X1Y1 and the other end in another chromosome is found during the
process, then the segment [L,R] has no grey edge with one end in [L,R] and one end not in [L,R].
Thus, [L,R] is a subpermutation. If there is no minSP in min that is in X1 ∩ [L,R] or Y1 ∩ [L,R], then
the subpermutation [L,R] is a new minSP from the construction.
It is easy to see that Steps 1–4 need O(n) time. In Step 5, we have to test if an old minSP is in the
interval [L,R]. This can be done in O(n) time by looking at all the old minSPs in min produced by
Algorithm 2. 
4.2. Partition of the new minSP
Let X and Y be two chromosomes of A. Let e be a proper grey edge and b and c the two black edges
adjacent to e in GAB. Suppose the proper translocation cutting b and c produces two new chromosomes
XLXMYMYR and YLXR such that P = XMYM is a new minSP, where XM is from X and YM is from
Y. See Fig. 5. We use l(b) and r(b) to represent the left and the right ends of edge b. Thus, we have
RIGHT(XM) = l(b) and LEFT(YM) = r(c).
From Lemma 3, to find a valid grey edge, we only have to consider the grey edges insideXMYM . This
grey edge cannot be (RIGHT(XM),LEFT(YM)), since, if such a grey edge (RIGHT(XM), LEFT(YM))
exists, then (RIGHT(XM),LEFT(YM)) = (l(b), r(c)) (see Fig. 6) is the original grey edge used to do
the translocation operation, and this translocation operation leads to the new minSP and is not valid.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 293
Lemma 6. Let  be a proper translocation acting on chromosomes X and Y that produces the two new
chromosomes XLXMYMYR and YLXR such that P = XMYM is a new minSP. Let (u, v) be a grey
edge inside XMYM . (u, v) acting on X and Y produces two new chromosomes X′ = X1XV YV Y1 and
Y ′ = X2XUYUY2 such that V (XV YV ) 	= ∅, V (XUYU) 	= ∅,XV andXU formXM , and YV and YU form
YM . If X′ or Y ′ contain a new minSP, say P ′, then P ′ must be inside XV YV or XUYU .
Proof. Consider an interval I in the new chromosome X′ containing XV YV . There are two cases.
Case 1: I contains the whole segment XV YV and there are vertices x ∈ V (X) and y ∈ V (Y ) with
{x, y} ⊂ I and {x, y} ∩ V (XV YV ) = ∅. In this case, x is on the left of XV and y is on the right of YV
in the new chromosome X′. Since V (XUYU) 	= ∅, the vertices in V (XUYU) are scooped from I. Thus, I
cannot be a minSP.
Case 2: I has overlapped withXV YV , but I has just one end that is not contained in V (XV YV ). Without
loss of generality, we assume that the left end of I is not in V (XV YV ), i.e., there is x ∈ V (X) with x ∈ I
and {x} ∩ V (XV YV ) = ∅. If I is a subpermutation, then I ∩ IN(XV YV ) is either a subpermutation or a
short cycle since there is no grey edge connecting a vertex in V (XV YV ) and a vertex in V (I)−V (XV YV ).
In both cases, we can conclude that I is not aminSP. Thus, ifX′ or Y ′ contains a newminSP, say P ′, then
P ′ must be inside XV YV . 
Lemma 3 does not tell us how to find such a valid grey edge. We can use findEdge(XMYM) to find a
proper grey edge that can produce at most one new minSP though it may not be valid. (A grey edge may
produce two new minSPs in some cases. This moves towards our goal by one step.)
Lemma 7. LetXMYM be the new minSP. The grey edge (uR, vR) is found in findEdge (XMYM). (uR, u)
and (vR, v) denote the two black edges adjacent to the grey edge (uR, vR) in GAB. XN = v1, v2, . . . vk ,
where vk = l(b) if XN is not empty, is the segment of vertices (not including vR) in XM checked in
findEdge(XMYM) before vertex vR is found inXM .At most one of the two new chromosomes produced by
translocation (uR, vR) contains a newminSP. In particular, ifXN is not empty, then the new chromosome
X′ containing the segment XN does not contain any new minSP.
Proof. First, consider the case whereXN is not empty.We have two subcases. Case 1, vR is the left end of
a black edge. See Fig. 7, where YM1 is the segment of vertices in YM that is kept in the new chromosome
X′. Case 2. vR is the right end of a black edge. See Fig. 8, where YM1 is the segment of vertices in YM
that is kept in the new chromosome X′.
Note that any new minSP in a new chromosome must contain the connecting edge. For Case 1, from
the construction of XN , there is no grey edge (other than possibly (l(b), r(c))) with one end in XN and
the other end in V (YM1). See Fig. 7.
If grey edge (l(b), r(c)) is inside YM1XN , then l(b) and r(c) are the rightmost and the leftmost ends
of YM1XN . Since l(b) and r(c) are neighbours in GB (by the definition of grey edge), the genes for l(b)
and r(c) cannot be the ending genes for the minSP. Therefore, YM1XN cannot be a minSP. According to
Lemma 1, there is no new minSP inside YM1XN .
If (l(b), r(c)) is not inside XNYM1, according to Lemma 1, there is no new minSP inside YM1XN .
From Lemma 6, we can conclude that there is no new minSP in the new chromosome X′.
ForCase 2, from the construction ofXN , (uR, vR) is the only grey edge (other than possibly (l(b), r(c)))
with one end in {vR} ∪ XN and the other end in V (YM1). Similar to Case 1, if (l(b), r(c)) is inside
YM1vRXN , we can show that YM1vRXN cannot be a minSP.
294 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
l(c) r(c)
Chromosome Y
uv
v
XNYM1
The new chromosome X’ containing segment XN
YM
XM
c
uRu
YM1
vR
Chromosome Xb
l(b) r(b)
XN
Fig. 7. Case 1: vR is the left end of a black edge. The direction of YM1 in the new resulting chromosome depends on whether
uR is the left or right end of a black edge in chromosome Y. YM1 does not contain uR .
r(c)
vR
uR
vRuRYM1
The new chromosome X′ containing segment XN
YM
XN
YM1
r(b)l(b)
XM
XN
b
l(c) Chromosome Y
Chromosome X
c
Fig. 8. Case 2: vR is the right end of a black edge. The direction of YM1 in the new resulting chromosome depends on whether
uR is the left or right end of a black edge in chromosome Y. YM1 contains uR .
Since vR = LEFT(vRXN) and uR = RIGHT(YM1) (see Fig. 8), according to Lemma 1, there is no
new minSP inside the segment YM1vRXN inX′ (see the new chromosome in Fig. 8). From Lemma 6, we
can conclude that there is no new minSP in the new chromosome X′.
Second, we consider Case 3: XN is empty, i.e., vR = l(b). See Fig. 9. Let XR be the right-hand side
segment by cutting black edge b in chromosome X. In this case, one of the new chromosomesX′ contains
XR as the right-hand side of the connecting point in the new chromosome. Let YM1 be a subsegment of
YM that is kept in the new chromosome X′. First, we show that YM1 is not empty and YM1 ⊂ YM . Note
that vR is not in the new chromosome X′. Moreover, uR and vR must be in the same new chromosome
in any case. Thus, uR is definitely not in the new chromosome X′. Therefore, YM1 ⊂ YM . From the
construction of vR , uR 	= r(c). If uR is the left end of a black edge, then the right end of that black edge
is in YM1 and thus YM1 is not empty. If uR is the right end of a black edge, then both r(c) and the left end
of that black edge must be in YM1. Thus, in any case, YM1 is not empty.
Since XMYM is a minSP and YM1 ⊂ YM , every vertex in YM1 is not adjacent to any vertex in XR via
a grey edge. From Lemma 1, there is no new minSP inside YM1XR in X′. Again, from Lemma 6, we can
conclude that there is no new minSP in X′. 
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 295
u r(b) XR
XR
uu R
vR=l(b)
c
XM
YM
The new chromosome X′ containing segment XN
YM1
Chromosome Y
r(c)
Chromosome Xb
r(b)
l(c)
Fig. 9. Case 3: XN is empty. One of the new chromosomes X′ contains the XR as the right-hand side of the connecting point in
the new chromosome.
Corollary 8. Lemma 7 still holds if the input XMYM of findEdge() is a nested subpermutation, but not
a minSP.
Proof. In findEdge(), we search the grey edge (vR, uR) starting from the two ends of the connecting
edge. Thus, all vertices we have checked in XN are in the new minSP contained in XMYM if XMYM is
not minimal. One can check that every step in the proof of Lemma 7 works when XMYM is a nested
subpermutation. 
Let X′ = X1XV YV Y1 be the new chromosome produced by translocation (uR, vR) that does not
contain any new minSP, where X1 ∩ XM = ∅, Y1 ∩ YM = ∅, XV ⊆ XM and YV ⊆ YM . Let Y ′ be the
other new chromosome produced by (uR, vR). According to Lemma 7, Y ′ may contain a new minSP,
say P. Lemma 3 says that a valid proper translocation can be found in P then. In the next subsection, we
design a method to repeatedly reduce the size of the new minSP and eventually find the valid proper grey
edge.
4.3. Finding the valid proper grey edge in the new minSP
Let (uR, vR) be selected in findEdge(XMYM). One of the two new chromosomes X′ = X1XV YV Y1
does not contain any new minSP. The other chromosome Y ′ = X2XUYUY2 (call it crucial chromosome)
may contain a newminSP. Note that the two segmentsXU andXV formXM , and YU and YV form YM (the
order may not be fixed). From Lemmas 6 and 7, the newminSP P in Y ′ must be inside the segmentXUYU .
Next, we try to reduce the range in XUYU that the new minSP could be. Since XU ⊆ XM , YU ⊆ YM and
XMYM are minSPs at the very beginning, for any grey edge with one end in XUYU , the other end must
be in V (XMYM) = V (XU) ∪ V (XV ) ∪ V (YU) ∪ V (YV ). Thus, it is enough to consider the vertices in
V (XU) ∪ V (XV ) ∪ V (YU) ∪ V (YV ).
A vertex is ignorable if it is in V (XUYU), but not in the new minSP in Y ′. We need the following
lemma to prune segment XUYU .
Lemma 9. If there is a grey edge (u1, v1) such that u1 ∈ V (XV YV ) and v1 ∈ V (XUYU), then v1 is
ignorable.
296 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
XU YU
L r Rl
Fig. 10. Illustration of the four pointers in Algorithm 5.
Fig. 11. Algorithm 5: reducing the range of the minSP in the crucial chromosome.
Proof. If a vertex v is in aminSP, then every vertex in the cycle containing v must be in theminSP. Since
u1 	∈ V (XUYU), v1 cannot be in the minSP. That is, v1 is ignorable. 
By the definition of minSP, the following lemma holds.
Lemma 10. If u ∈ V (XU) is ignorable, then any vertex v on the left of u inXU is ignorable. If u ∈ V (YU)
is ignorable, then any v on the right of u in YU is ignorable.
Lemma 11. Let (u, v) be a grey edge inside XUYU . If u is ignorable then v is ignorable.
Proof. Again, the lemma holds immediately from the fact that if a vertex v is in a minSP, then every
vertex in the cycle containing v must be in the minSP. 
We can reduce the range of XUYU based on Lemmas 9–11. Let l and r be the rightmost vertex in
XU and the leftmost vertex in YU such that there are grey edges (v1, l) and (v2, r) with v1 ∈ V (XV YV )
and v2 ∈ V (XV YV ). Let L and R be the vertices in XU and YU that we are going to check (based on
Lemma 11). Initially, we set L = right(LEFT(XU)) and R = left(RIGHT(YU)). Fig. 10 illustrates the
four pointers used in the algorithm. We can use the algorithm in Fig. 11 to prune the segment XUYU in
Y ′. We claim that there always exists a grey edge (u, v) with u ∈ V (XUYU) and v ∈ V (XV YV ). The
proof is left to interested readers.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 297
Fig. 12. Algorithm 6: finding a valid proper grey edge (translocation) in O(n) time.
Theorem 12. If algorithm prune(XU, YU ,XV , YV ) returns l and r as the two ends of the connecting
edge in X2XUYUY2, then (uR, vR) is valid. If l or r is not the end of the connecting edge, (uR, vR) is
not valid. In this case, (uR, vR) produces a new minSP contained in the interval [l, r].Moreover, [l, r]
itself is a nested subpermutation in this case.
Proof. Any new minSP in the crucial chromosome must contain the connecting edge. If l and r are the
two ends of the connecting edge, then by definition, there is no new minSP in the crucial chromosome.
Thus, no new minSP is produced by (uR, vR) and (uR, vR) is valid.
If l or r are not the end of the connecting edge, then [l, r] contains a long cycle. From the algorithm,
there is no grey edge with one end in [l, r] and the other end not in [l, r]. Therefore, [l, r] contains a
subpermutation. Since [l, r] is inside the nested subpermutation XMYM (in the first iteration, XMYM is
a minSP), no subpermutation P ⊆ [l, r] satisfies P ⊆ XM or P ⊆ YM . Therefore, [l, r] is a nested
subpermutation. By the definition of nested subpermutation, [l, r] contains a new minSP in X1XUYUY1
produced by (uR, vR). Thus, (uR, vR) is not valid. 
Now, we can use findEdge() and prune() alternately to find a valid grey edge. The algorithm is given
in Fig. 12.
Theorem 13. Algorithm 6 finds a valid proper grey edge (translocation) in O(n) time.
Proof. Step 1 takes O(n) time since the only thing we have to do is to go through every grey edge in
GAB. According to Theorem 5, Step 2 takes O(n) time.
Now, we want to show that the total time required for Steps 4–6 is also O(n). Let us focus on the new
minSP XMYM found in Step 2. In Step 4 of findEdge(XMYM), we start from the end RIGHT(XM) of
the connecting edge in XMYM and go to the left in XM . Let XN be the set of vertices we have ckecked
before vR is found in findEdge(XMYM). According to Lemma 7 and Corollary 8, the new chromosome
containing XN does not contain any new minSP. Denote the updated XMYM produced in Step 6 as
XˆM ˆYM . Thus, XˆM ˆYM does not contain any vertex in XN . In Step 5, prune() goes through the vertices in
V (XMYM)− V (XˆM ˆYM), but never touches the vertices in IN(XˆM ˆYM). Thus, we can conclude that any
vertex in XMYM produced in Step 2 is visited at most twice (via findEdge() and prune()) in the loop of
Steps 4–6. Therefore, the total time required for Steps 4–6 is O(n). 
298 L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299
5. Future work
It is interesting to include other operations such as fusions and fissions. All papers on translocation
distance are based on the basic formula in Theorem 2 that works for the case where conditions (1)–(4) in
Section 1 hold. To include fusions and fissions, we need to develop a new formula for the new distance.
The problem seems to be challenging.
Acknowledgments
We thank the referees for their helpful suggestions to improve the presentation of the paper.
Lusheng Wang and Xiaowen Liu are fully supported by a grant from the Research Grants Council of
the Hong Kong Special Administrative Region, China [Project No. CityU 1196/03E]. Daming Zhu is
supported by NSFC 60073042, and NSFC 60273032.
References
[1] D.A. Bader, B.M.E. Moret, M.Yan,A linear-time algorithm for computing inversion distance between signed permutation,
J. Comput. Biol. 8 (2001) 483–491.
[2] D.A. Bader, B.M.E.Moret, M.Yan,A linear-time algorithm for computing inversion distance between signed permutations
with an experimental study, Proceedings of the Seventh InternationalWorkshop onAlgorithms and Data Structures,August
2001, pp. 365–376.
[3] V. Bafna, P. Pevzner, Sorting by reversals: genome rearrangements in plant organelles and evolutionary history of x
chromosome, Mol. Biol. Evol. 12 (1995) 239–246.
[4] A. Bergeron, A very elementary presentation of the Hannenhalli–Pevzner theory, Proceedings of the 12th Annual
Symposium on Combinatorial Pattern Matching, July 2001, pp. 106–117.
[5] T. Dobzhansky, A.H. Sturtevant, Inversions in the chromosomes of drosophila pesudoobscura, Genetics 23 (1938) 28–64.
[6] W.S. Feng, L. Wang, D. Zhu„ CTRD: A fast applet for computing signed translocation distance between genomes,
Bioinformatics 20 (2004) 3256–3257.
[7] S. Hannenhalli, P. Pevzner, Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by
reversals), Proceedings of the 27th Annual ACM Symposium on Theory of Computing, 1995, pp. 178–189.
[8] S.Hannenhalli, C. Chappey, E.V.Koonin, P. Pevzner,Genome sequence comparison and scenarios for gene rearrangements:
a test case, Genomics 30 (1995) 299–311.
[9] S. Hannenhalli, P. Pevzner, Transformingmen intomice: Polynomial algorithm for genomic distance problem, Proceedings
of the 36th Annual IEEE Symposium on Foundations of Computer Science, 1995, pp. 581–592.
[10] S. Hannenhalli, P. Pevzner, Towards a computational theory of genome rearrangement, Lecture Notes in Computer Science,
vol. 1000, Springer, Berlin, 1995, pp. 184–202.
[11] S. Hannenhalli, Polynomial algorithm for computing translocation distance between genomes, Proceedings of the Sixth
Annual Symposium on Combinatorial Pattern Matching, July 1995, pp. 162–176.
[12] S. Hannenhalli, P. Pevzner, To cut . . . or not to cut (applications of comparative physical maps in molecular evolution),
Proceedings of the Seventh Annual ACM–SIAM Symposium on Discrete Algorithms, January 1996, pp. 304–313.
[13] S. Hannenhalli, P. Pevzner, Transforming cabbage into turnip: Polynomial algorithm for sorting signed permutations by
reversals, J. ACM 46 (1) (1999) 1–27.
[14] H. Kaplan, R. Shamir, R.E. Tarjan,A faster and simpler algorithm for sorting signed permutations by reversals, Proceedings
of the Eighth Annual ACM–SIAM Symposium on Discrete Algorithms, January 1997, pp. 344–351.
[15] J. Kececioglu, R. Ravi, Of mice and men: Algorithms for evolutionary distances between genomes with translocation,
Proceedings of the Sixth Annual ACM–SIAM Symposium on Discrete Algorithms, January 1995, pp. 604–613.
[16] G. Li, X. Qi, X. Wang, B, Zhu, A linear-time algorithm for computing translocation distance between signed genomes,
CPM’2004.
L. Wang et al. / Journal of Computer and System Sciences 70 (2005) 284–299 299
[17] D. Sankoff, G. Leduc, N.Antoine, B. Paquin, B.F. Lang, R. Cedergen, Gene order comparisons for phylogenetic inference:
Evolution of the mitochondrial genome, Proc. Natl. Acad. Sci. USA 89 (1992) 6575–6579.
[18] D. Sankoff, J.H. Nadeau, Comparative Genomics: Empirical and Analytical Approaches to Gene Order Dynamics, Map
Alignment and theEvolution ofGeneFamilies, Series inComputationalBiology, vol. 1,KluwerAcademicPress,Dordrecht,
Netherlands, 2000, pp. 225–241.
[19] D. Sankoff, N. El-Mabrouk, Genome rearrangement, in: T. Jiang,Y. Xu, Q. Zhang (Eds.), Current Topics in Computational
Molecular Biology, The MIT Press, Cambridge, MA, 1992, pp. 132–155.
[20] G. Tesler, Efficient algorithms for multichromosomal genome rearrangements, J. Comput. System Sci. 65 (2002) 587–
609.
[21] D.M. Zhu, S.H.Ma, Improved polynomial-time algorithm for computing translocation distance between genomes, Chinese
J. Comput. (in Chinese) 25 (2) (2002) 189–196.
