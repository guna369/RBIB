Computing Large-Scale 
Alignments on a Multi-Cluster
Chunxi Chen and Bertil Schmidt
Contents
• Motivation 
• Smith-Waterman Algorithm
• Multi-Cluster Platform
• Parallelization
• Performance Evaluation
• Conclusions
Motivation
• Genetic sequence databases are growing exponentially
• Growth rate will continue, since multiple concurrent 
genome projects have begun with more to come
Growth of GeneBank
0
5
10
15
20
25
30
1993 1994 1995 1996 1997 1998 1999 2000 2001 2002
Year
B
a
s
e
 
P
a
i
r
s
 
o
f
 
D
N
A
 
(
i
n
 
b
i
l
l
i
o
n
s
)
Motivation
• Discovered sequences are analyzed by 
comparison with sequence databases
• Complexity of sequence comparison is proportional 
to the product of query size times database size 
• ⇒ Analysis too slow on sequential computers
• There are two approaches:
– Heuristics, e.g. BLAST, but the more efficient the 
heuristics, the worse the quality of the results
– Parallel Processing, get high quality results in reasonable 
time
Motivation
• Number of completely sequenced genomes:
– 105 microbial, 10 Eukaryotic 
– ~ 10 nearly completed eukaryotic genomes
– > 300 genome projects planned or underway (http://www.nslij-
genetics.org/seq/)
• Closely related genomes
– Eukaryotic example: C. elegans and C. briggsae
– Prokaryotic example: E. coli K12 and O157:H7
• What’s Common and What’s Unique
– Identify unique & important proteins in pathogens as targets
– Identify Genes and Predict Function based on Synteny
– Susceptibility to disease (SNPs)
Sequence Alignment
• Several algorithms: BLAST, FastA, Smith-Waterman
BLAST
FastA
Smith-
Waterman
Slower
Faster
Search
Speed
Data
QualityLower Higher
Smith-Waterman Algorithm
• Optimal local alignment of two sequences 
• Performs an exhaustive search for the optimal local 
alignment 
– Complexity O(n×m) for sequence lengths n and m
• Based on the 'dynamic programming' (DP) algorithm
– Fill the DP matrix using a substitution (mutation) matrix 
– Find the maximal value (score) in the matrix
– Trace back from the score until a 0 value is reached 
Smith-Waterman Algorithm
• Aligning S1 and S2 of length l1 and l2 using Recurrences:
• Calculate three possible ways to extend the alignment
– by one AminoAcid (AA) in each sequence
– by one AA in the first sequence and align it with a gap in the second
– by one AA in the second sequence and align it with a gap in the first
21 ,11,
)2,1()1,1(
),(
),(
0
max),( ljli
SSSbtjiH
jiF
jiE
jiH
ji
≤≤≤≤
⎪⎪⎩
⎪⎪⎨
⎧
+−−
=
0),0(),0(
0)0,()0,(
==
==
jFjH
iEiH
⎩⎨
⎧
−−
−−=⎩⎨
⎧
−−
−−= β
α
β
α
),1(
),1(
max),(  ,
)1,(
)1,(
max),(
jiF
jiH
jiF
jiE
jiH
jiE
Smith-Waterman Algorithm
Align S1=ATCTCGTATGATG S2=GTCTATCAC
∅
G
T
C
T
A
T
C
A
C
∅ A T C T C G T A T G A T G
0 0 0 0 0 2 1 0 0 2 1 0
0
0
0
0
0
0
0
0
0
0
0 0 0 0 0 0 0 0 0 0 0 0 0
2
0 2 1 2 1 1 4 3 2 1 1 3 2
0
0
2
1
0
2
1
1
2
2
4
3
2
1
4
3
2
3
6
5
4
3
6
5
4
5
5
4
4
5
5
4
6
5
7
3
4
4
4
5
5
6
3
5
4
6
5
4
5
3
4
7
5
5
7
6
2
5
6
9
8
7
6
1
4
5
8
8
7
6
0
3
6
7
7
10
9
2
2
5
8
7
9
9
2
1
4
7
7
8
8
⎩⎨
⎧
−
==
else 1
)( if 2
),(
yx
yxSbt
α=1, β=1
A T C T C G T A T G A T G
G T C  − T A T C A C⎪
⎪
⎩
⎪⎪⎨
⎧
+−−
−−
−−=
)2,1()1,1(
1)1,(
1),1(
0
max),(
ji SSSbtjiH
jiH
jiH
jiH
Smith-Waterman Algorithm
• Aligning two sequences of length N and M
– Time Complexity: O(N×M)
– Memory Complexity: O(N×M)
• Example
– aligning m. pneumoniae (816,394 nucleotides) and m.
genitalium (580,074 nucleotides)
– around 500-G Cells in the Similarity Matrix
Computing Maximal Score in 
Linear Space
Idea: Store only one row in Similarity Matrix
• Compute maximal score in similarity matrix
• Computing the path (traceback) requires additional computation 
Similarity Matrix
Traceback in Linear Space
i*=N/2
start point
max point
Optimal midpoint
Similarity Matrix
N/4
3N/4
N/8
3N/8
5N/8
7N/8
Finding Near-Optimal Non-
Overlapping Alignments
• Aligning Determine k highest scores with different alignment start points.
• Use divide-conquer algorithm k times to determine the actual 
alignments.
C=0 C=1 C=2 C=3 C=4 C=5 C=6 C=7 C=8 C=9 C=10 C=11 C=12 C=13 
∅ A T C T C G T A T G A T G 
R=0 ∅ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
R=1 G 0 0 0 0 0 0 2 1 0 0 2 1 0 2 
R=2 T 0 0 2 1 2 1 1 4 3 2 1 1 3 2 
R=3 C 0 0 1 4 3 4 3 3 3 2 1 0 2 2 
R=4 T 0 0 2 3 6 5 4 5 4 5 4 3 2 1 
R=5 A 0 2 2 2 5 5 4 4 7 6 5 6 5 4 
R=6 T 0 1 4 3 4 4 4 6 5 9 8 7 8 7 
R=7 C 0 0 3 6 5 6 5 5 5 8 8 7 7 7 
R=8 A 0 2 2 5 5 5 5 4 7 7 7 10 9 8 
R=9 C 0 1 1 4 4 7 6 5 6 6 6 9 9 8 
 
Multi-Cluster Platform
• High performance at low cost
• Geographically distributed
• Different Bandwidths
1 0Head
node
30Mbps
bandwidth
1Gbps Myrinet BioInformatics
Research Center
in NTU
(BIRC)
Parallel and
Distributed
Processing
Lab in NTU
(PDP)
0 1 Head
node
1Gbps Myrinet
Multi-Cluster Programming 
Environment
MPICH-G2 process
MPICH process
sharing
memory
MPICH
MPICH
process
MPICH
process
node n node n-1
control node
of cluster1
Cluster1
node n-1 node n
MPICH-G2 process
MPICH process
sharing
memory
MPICH
process
MPICH
process
MPICH
control node
of cluster2
Cluster2internet
MPICH-GLOBUS2
MPICH-G2
Layer
MPICH
Layer
Parallelization on Multi-Cluster
• Wavefront Computation of DP matrix
Sequence X
Se
qu
en
ce
 Y
P0 P1 P2
Parallelization on Multi-Cluster
• Divide-and-Conquer traceback computation
• Define special columns (SC’s) as the last columns of the 
parts of the similarity matrix allocated to each processor, 
except the last processor
• Identify the intersection of an optimal path with the 
special columns
P0 P1 P2 P3
1 2 3SC1 SC2 SC3
Optimal Path
Performance Evaluation
• Using MPICH in PDP and BIRC to check the 
performance of every cluster
0 1 2 3 4 5 6 7 8
0
1
2
3
4
5
6
7
8
S
p
e
e
d
u
p
Number of processors
 Ideal Speedup
 PDP
 BIRC
Performance Evaluation
• Speedups on two the clusters in PDP for aligning two 
sequences of length 100,000
0 2 4 6 8 10
0
2
4
6
8
10
S
p
e
e
d
u
p
Number of Processors
 Ideal Speedup
 Two Clusters in PDP
Performance Evaluation
• Speedups on the PDP and BIRC clusters for aligning 
two sequences of length 100,000
0 2 4 6 8 10 12 14 16 18 20
0
2
4
6
8
10
12
14
16
18
20
S
p
e
e
d
u
p
Number of Processors
  Ideal Speedup
  PDP+BIRC
Performance Evaluation
• Quality of Alignment Results 
• Comparison to results of MUMmer
– Assumes two sequences are closely-related 
(highly similar)
– Can align two bacterial genomes under 1 
minute
– Uses Suffix Tree to find Maximal Unique 
Matches
– Maximal Unique Match (MUM) Definition:
• A subsequence that occurs in two 
exactly matching copies, once in each 
input sequence, and that can not be 
extended in either direction
– Key idea: significant long MUM is certainly 
to be part of the global alignment
Can you find the MUM?
Performance Evaluation
• Quality of Alignment Results
• Align mitochondrial genomes of Human and Drosophila
(not very related)
0 4000 8000 12000 16000
0
4000
8000
12000
16000
20000
D
r
o
s
o
p
h
i
l
a
 
m
i
t
o
c
h
o
n
d
r
i
a
l
Human mitochondrial
Our System
0 4000 8000 12000 16000
0
4000
8000
12000
16000
20000
D
r
o
s
o
p
h
i
l
a
 
m
i
t
o
c
h
o
n
d
r
i
a
l
Human mitochondrial
MUMmer
Conclusion and Future Work
• Presented how alignment of long DNA sequences 
based Dynamic Programming and Divide-and-
Conquer can be efficiently parallelized on a Multi-
Cluster Architecture
• Investigating which other applications can benefit 
from this type of computing power
• Investigating different bandwidths levels
