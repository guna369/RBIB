DOI: 10.1007/s00453-003-1034-5
Algorithmica (2003) 37: 233–241 Algorithmica
© 2003 Springer-Verlag New York Inc.
A Linear Time Lower Bound on McCreight and
General Updating Algorithms for Suffix Trees1
Mauricio Ayala-Rinco´n2 and Paulo D. Conejo3
Abstract. Suffix trees are the fundamental data structure of combinatorial pattern matching on words. Suffix
trees have been used in order to give optimal solutions to a great variety of problems on static words, but for
practical situations, such as in a text editor, where the incremental changes of the text make dynamic updating
of the corresponding suffix trees necessary, this data structure alone has not been used with success. We prove
that, for dynamic modifications of order O(1) of words of length n, any suffix tree updating algorithm, such
as the ones proposed by McCreight, requires O(n) worst-case running time, as for the full reconstruction
of the suffix tree. Consequently, we argue that this data structure alone is not appropriate for the solution of
combinatorial problems on words that change dynamically.
Key Words. Linear-time algorithm, Suffix tree, Suffix trie.
1. Introduction. Suffix tree data structures provide the most efficient and optimal
solutions to a great variety of combinatorial problems on (static) words [1]. The suffix
tree of a word exposes structural properties of its subwords like more frequent subwords,
occurrences of subwords, etc. In his seminal work Weiner introduced suffix trees giving
an O(n) time algorithm for building the corresponding suffix tree of an n character string
[13]. Subsequently, McCreight [11] and Ukkonen [12] presented linear time algorithms
for building suffix trees which are simpler and more elegant than the Weiner algorithm.
All these algorithms are based on incremental construction of the data structure including
in each step of the process new vertices and edges for one unconsidered either suffix (as
is the case for the Weiner and McCreight ones) or prefix (as for the Ukkonen one) of the
input word. Griegerich and Kurtz [8] reviewed these incremental linear time algorithms
by working out what is essential about efficient suffix tree construction and what is not.
More recently, Farach [6] developed a novel suffix tree construction method which breaks
with the incremental approaches. Essentially, this is based on the recursive construction
of compacted tries for the suffixes beginning at even and odd positions of the input word
and then merging the trees.
In more practical situations, for words which change dynamically as for example in
a text editor, where the incremental changes of the text make dynamic updating of the
corresponding suffix trees necessary, this data structure alone has not been used with
success. In his pioneering work [11] McCreight presented the first known suffix tree
updating algorithm which reuses the original suffix tree data structure of a word in order
1 The second author has been partially supported by Brazilian agencies CAPES and CNPq.
2 Departamento de Matema´tica, Universidade de Brası´lia, 70910 900 Brası´lia D.F., Brazil. ayala@mat.unb.br.
3 Departamento de Cieˆncias Exatas, Universidade do Oeste de Santa Catarina, 89809 000 Chapeco´, Brazil.
conejo@npd.unoesc.rct-sc.br.
Received January 25, 2000; revised February 18, 2003. Communicated by F. P. Preparata.
Online publication August 6, 2003.
234 M. Ayala-Rinco´n and P. D. Conejo
to build the suffix tree of the word resulting from a modification of the initial word. The
McCreight updating algorithm works in linear time in the length of the original word
when the modification is of constant size. Initially, one could think that this is due to
inefficiency of the McCreight updating algorithm but we show that this is a consequence
of the fact that any suffix tree updating algorithm runs in linear time in the worst case. In
this work we formalize this fact by proving that, for dynamic modifications of order O(1)
of words of length n, suffix tree updating algorithms require O(n) worst-case running
time, as for the full reconstruction of the suffix tree. Consequently, we argue that this data
structure alone is not appropriate for the solution of combinatorial problems on words
which change dynamically. An initial proceedings version of this result was presented
in [3].
2. Background. We suppose some familiarity with the suffix tree data structure as
well as with the Weiner, McCreight and Ukkonen suffix tree construction algorithms.
Let be a nonempty finite alphabet.∗ denotes the language of words over. Char-
acters and words (except Fibonacci words) are denoted by Roman and Greek lowercase
letters, respectively. λ denotes the empty word and for a word α ∈ ∗, |α| denotes its
length. Let $ be a fixed character that does not belong to . The suffix tree STα of
α ∈ ∗ is the compacted trie of all the suffixes of α$. STα stores the |α| + 1 nonempty
suffixes of α$ in its leaves occupying O(|α|) space [11]. Each arc or edge in STα is
labeled with a subword of α$ and sibling arcs differ by the first character of their labels.
In practice, these labels are given by the beginning and end marks corresponding to the
initial and final positions of the subword in α$, respectively. Labels on the leaves of STα
correspond to the beginning position of the |α| + 1 suffixes of α$.
By a modification of a word we mean the word obtained by replacing one of its
subwords with a different one. Let α, β, δ, γ ∈ ∗ with β = δ; replacing β with
δ in the word αβγ we modify the original word obtaining αδγ . This is denoted by
αβγ  αδγ . Observe that for any basic operation on words (i.e., insertion, elimination
and concatenation) we have an equivalent modification; for example, concatenation of
words corresponds to the modification in which αβγ  αδγ , where β = γ = λ.
By a suffix tree updating algorithm we mean an algorithm that receives as input a
suffix tree STαβγ and a modification αβγ  αδγ giving as output the suffix tree STαδγ .
In his pioneering work McCreight [11] presented the first suffix tree updating algo-
rithm that we know. Unfortunately, in very simple cases this algorithm runs in linear
time, as for the full reconstruction of the suffix tree from scratch. In particular, this is
the case for the O(1) modification an  anb (where α = an, β = γ = λ and δ = b),
since this updating algorithm eliminates vertices and edges in STαβγ obtaining a simple
tree consisting of three vertices only. This algorithm eliminates firstly all the paths cor-
responding to the β-splitters and inserts subsequently all the paths corresponding to the
δ-splitters, where β-splitters and δ-splitters are defined with respect to a modification
αβγ  αδγ as follows: if α∗ is the longest suffix of α which occurs in at least two
different places in αβγ , then the β-splitters and the δ-splitters are all the words of the
form εγ and ε′γ , respectively, where ε is a nonempty suffix of α∗β and ε′ is a nonempty
suffix of α∗δ. For the modification an  anb it is easy to verify that the β-splitters are
all the words of the form ak , for 1 ≤ k < n [4].
A Linear Time Lower Bound and General Updating Algorithms 235
Implicit vertices
Open edges
a
a
a
a... b...
a
a
a b...
b...
b...
ab...
Fig. 1. Partial suffix trees of an and anb.
The Ukkonen algorithm constructs incrementally the suffix tree of an input word by
adding in each step vertices and edges corresponding to one unconsidered prefix of the
word, from the shortest one to the largest one. The main advantage of this method is that
it is on-line, which means that the input word is processed symbol by symbol from left
to right. In each step of the execution of this incremental process the partial suffix tree
for the prefix corresponding to the scanned part of the input word is ready. The Ukkonen
algorithm takes advantage of the interesting notion of open transition: since the input
word is processed on-line, in each iteration of the construction all labels corresponding
to edges to the leaves of the current partial suffix tree are open. This means that end
marks of the subwords labeling these edges are infinite. The end marks of all subwords
labeling edges to the leaves of the suffix tree only can be correctly defined or closed
when the whole word is processed and its exact length is known.
Since The Ukkonen algorithm is on-line it can be straightforwardly extended for
updating the suffix tree STα after a concatenation α  αβ. In fact, what is necessary is
simply to maintain, together with the suffix tree structure STα , the structure of the partial
suffix tree of α (without the distinguished character $), following the on-line Ukkonen
algorithm character by character from β as in the (|α| + 1)th iteration. Unfortunately,
this method depends linearly on the length of α (as well as, of course, on the length
of β) inclusive for |β| ∈ O(1). A simple example of the bad behavior of this natural
extension of the Ukkonen construction algorithm results, as for the McCreight algorithm,
by selecting α = an and β = b as illustrated in Figure 1.
3. Linear Lower Bound for Suffix Tree Updating Algorithms. Since all our at-
tempts to develop suffix tree updating algorithms have run time complexity O(n) in the
worst case we have studied the structure of Fibonacci words and its corresponding suffix
trees in order to formalize the lack of dynamic properties of this important data structure.
We prove that explicit suffix tree updating algorithms are inefficient; i.e., that it
is impossible to reuse STα in order to build STα′ explicitly in sublinear time, where
α  α′ is a modification of constant size. By build STα′ explicitly we mean to build
STα′ including all its vertices, edges and labels without abbreviations.
In order to formalize our result we observe simple properties of Fibonacci words
and how their corresponding suffix trees change under a specific O(1) modification:
236 M. Ayala-Rinco´n and P. D. Conejo
concatenation of the word ab as a suffix. Fibonacci words are, unsurprisingly, selected
because they enclose the greater possible number of repetitions (O(n log2(n)) for words
of length n) giving rise to the most complex suffix tree structures (optimality of algorithms
for computing repetitions in a word in O(n log2(n)) running time is a consequence of
this fact [5], [2]).
The nth Fibonacci word, fn , is defined recursively by f0 = a; f1 = b; fn = fn−2 fn−1.
It is easy to verify that | fn| corresponds to the nth Fibonacci number.
LEMMA 3.1. For n ≥ 4,
(i) | fn| ≥ 85 | fn−1| and
(ii) | fn| ≤ 53 | fn−1|.
PROOF. By simple induction on n.
The number of vertices in ST fn and in ST fnab are denoted by Vn and V ′n , respectively.
V intn denotes the number of internal vertices in ST fn .
Our proof was motivated by observing the regularity of the number of vertices of suffix
trees for Fibonacci words and their modifications. Table 1 was generated by counting
the number of vertices of suffix trees that were built by a simple C++ implementation of
the McCreight algorithm [4].
The relation between the number of vertices inST fn and inST fnab should be analyzed.
Table 1. Number of vertices in ST fn and ST fn ab
n | fn | Vn V ′n 13 | fn | + Vn
4 5 9 12 11
5 8 13 17 16
6 13 21 27 25
7 21 34 43 41
8 34 55 69 67
9 55 89 111 108
10 89 144 179 174
11 144 233 289 281
12 233 377 467 455
13 377 610 755 736
14 610 987 1221 1190
15 987 1597 1975 1926
16 1597 2584 3195 3117
17 2584 4181 5169 5024
18 4181 6765 8363 8159
19 6765 10946 13531 13201
20 10946 17711 21893 21360
21 17711 28657 35423 34561
22 28657 46368 57315 55921
23 46368 75025 92737 90481
24 75025 121393 150051 146401
A Linear Time Lower Bound and General Updating Algorithms 237
We prove that in order to build ST fnab explicitly from ST fn , with an arbitrary suffix
tree updating algorithm, it is necessary to realize more than 13 | fn| insertions of new
vertices in ST fn , where n ≥ 7.
LEMMA 3.2. For n ≥ 7,
(i) V intn = V intn−2 + V intn−1 + 1 and
(ii) | fn| = Vn−1.
PROOF. The proof is by induction on n.
Observe that, for all n,
Vn − (| fn| + 1) = V intn .(1)
Induction basis: for n = 7,
(i) V int7 = V7 − (| f7| + 1) = 12, V int6 = V6 − (| f6| + 1) = 7 and
V int5 = V5 − (| f5| + 1) = 4.
Consequently,
V int7 = V int6 + V int5 + 1.
(ii) | f7| = 21 = V6.
Induction step: suppose that for some k > 7 and for all 7 ≤ n < k the following hold:
V intn = V intn−2 + V intn−1 + 1(2)
and
| fn| = Vn−1.(3)
Because of (1), for all n,
Vn = | fn| + V intn + 1.(4)
By replacing (4) in (3), for all n < k,
| fn| = | fn−1| + V intn−1 + 1.(5)
Additionally,
| fk | = | fk−2| + | fk−1|
(5)
= | fk−2| + | fk−2| + V intk−2 + 1
(5)
= | fk−2| + | fk−3| + V intk−3 + V intk−2 + 2
(2)
= | fk−1| + V intk−1 + 1
(1)
= | fk−1| + Vk−1 − (| fk−1| + 1)+ 1
= Vk−1.
238 M. Ayala-Rinco´n and P. D. Conejo
Consequently, for all k ≥ 7,
| fk | = Vk−1.(6)
By (6),
Vk = | fk+1| = | fk−1| + | fk |
(6)
= Vk−2 + Vk−1.
Therefore,
Vk = Vk−2 + Vk−1.(7)
By replacing (4) in (7),
| fk | + V intk + 1 = | fk−2| + V intk−2 + 1 + | fk−1| + V intk−1 + 1.
Consequently, for all k ≥ 7, V intk = V intk−2 + V intk−1 + 1.
LEMMA 3.3. For all n ≥ 7,
(i) | fn| = V ′n−1 − | fn−3| − 1;
(ii) V ′n = V ′n−2 + V ′n−1 − 1 and
(iii) V ′n = 2| fn| + 1.
PROOF. By induction on n.
Induction basis: for n = 7, | f7| = 21, V ′7 = 43, V ′6 = 27, V ′5 = 17 and | f4| = 5.
Then
| f7| = V ′6 − | f4| − 1,
V ′7 = V ′6 + V ′5 − 1
and
V ′7 = 2| f7| + 1.
Induction step: suppose that for some k > 7 and for all 7 ≤ n < k the following hold:
| fn| = V ′n−1 − | fn−3| − 1,(8)
V ′n = V ′n−2 + V ′n−1 − 1(9)
and
V ′n = 2| fn| + 1.(10)
Observe that
| fk | = | fk−2| + | fk−1|
(8)
= V ′k−3 − | fk−5| − 1 + V ′k−2 − | fk−4| − 1
= V ′k−3 + V ′k−2 − | fk−3| − 2
(9)
= V ′k−1 − | fk−3| − 1.
A Linear Time Lower Bound and General Updating Algorithms 239
Consequently, for all k ≥ 7,
| fk | = V ′k−1 − | fk−3| − 1.(11)
By using (11):
V ′k = | fk+1| + | fk−2| + 1
= | fk−1| + | fk | + | fk−2| + 1
(11)
= V ′k−2 − | fk−4| − 1 + V ′k−1 − | fk−3| − 1 + | fk−2| + 1
= V ′k−2 + V ′k−1 − 1.
Consequently, for all k ≥ 7,
V ′k = V ′k−2 + V ′k−1 − 1.(12)
Also,
V ′k (12)= V ′k−2 + V ′k−1 − 1
(10)
= 2| fk−2| + 1 + 2| fk−1| + 1 − 1
= 2| fk | + 1.
Consequently, for all k ≥ 7,
V ′k = 2| fk | + 1. ✷(13)
Previous lemmas imply the following result relating the number of vertices of suffix
trees of Fibonacci words and their suggested modification.
LEMMA 3.4. For all n ≥ 7,
V ′n ≥ Vn + 13 | fn|.
PROOF. For all k ≥ 7, items (ii) of Lemma 3.1, (ii) of Lemma 3.2 and (iii) of Lemma 3.3
imply that
| fk+1| = Vk ≤ 53 | fk |
≤ 2| fk | − 13 | fk | + 1
= V ′k − 13 | fk |.
Consequently, for all k ≥ 7,
V ′k ≥ Vk + 13 | fk |.
240 M. Ayala-Rinco´n and P. D. Conejo
Now we can prove the existence of a linear lower bound for the time complexity
of suffix tree updating algorithms and consequently show that linear time suffix tree
construction algorithms are optimal suffix tree updating algorithms.
Lemma 3.4 shows that in order to obtain ST fnab from ST fn , with any explicit suffix
tree updating algorithm, it is necessary to realize at least 13 | fn| operations of insertion of
new vertices in ST fn , that is, that the original structure of ST fn should be modified in at
least 13 | fn| positions. In general, we can conclude that it is impossible to build STχ ′ fromSTχ , where χ  χ ′ is a modification of order O(1), by applying any explicit suffix tree
updating algorithm in sublinear worst-case running time.
THEOREM 3.1. Any explicit suffix tree updating algorithm realizes (n) insertion op-
eration in the worst case for suffix trees of words of length n, which suffer modifications
of order O(1).
PROOF. Direct from Lemma 3.4.
We can conclude that any O(n) time suffix tree construction algorithm, such as the
Weiner, McCreight, Ukkonen or Farach algorithms, is an optimal suffix tree updating
algorithm.
COROLLARY 3.1. Let α  α′ be a modification of the word α of order O(1), where
|α| = n. The direct construction from STα′ using any O(n) suffix tree construction
algorithm is asymptotically optimal.
PROOF. This is obvious since the O(n) upper bound on the time for building STα′
directly by applying any O(n)worst-case running time suffix tree construction algorithm
matches the lower bound (n) of Theorem 3.1; in fact, O(n) ∩(n) = (n).
4. Conclusion. Based on the structure of Fibonacci words and its corresponding suffix
trees we have proved that there are no sublinear suffix tree updating algorithms for words
which suffer modifications of constant size. We think our formalization of this fact is
very important (although the lack of dynamic properties of suffix trees is intuitively clear
and our proofs are simple), since this makes development of general suffix tree updating
algorithms unnecessary; in fact, any O(n) time suffix tree construction algorithm is an
optimal updating algorithm.
In order to solve the problem of lack of dynamic properties of suffix trees to handle
practical situations in which words frequently suffer modifications, such as in incremental
text editing, we propose the combination of suffix trees with other data structures as
other authors recently do. For example, Ferragina and Grossi [7] create a data structure
called Dynamic Suffix Arrays, which combines the flexibility of suffix trees with the
lexicographic order of suffix arrays (created by Manber and Myers [10]). With this
structure they developed a O(|α| + oc(α, χ) + log2 |χ |) time algorithm to detect on-
line all occurrences of a pattern α in a text χ which suffer (one) modification, where
oc(α, χ) is the number of occurrences of the pattern α in the text. Observe that by
A Linear Time Lower Bound and General Updating Algorithms 241
building the suffix tree data structure in time O(|χ |) one could find all occurrences of
α in O(|α| + oc(α, χ)) time [13], [11]. Also, considering that our conclusion for suffix
trees is negative, a legitimate question is whether updating algorithms for other data
structures for representing the suffixes of a word may have more efficient behavior. An
interesting starting point for exploring and comparing alternatives is given by Kucherov
and Rusinowitch in [9], where using DAWGs (Directed Acyclic Word Graphs) they
proposed an efficient algorithm for a generalization of the dynamic dictionary matching
problem.
Acknowledgments. We thank Ricardo Baeza-Yates for his constructive remarks and
Nigel Pitt for his kind correction of previous versions of this work.
References
[1] A. Apostolico. The Myriad Virtues of Subword Trees. In A. Apostolico and Z. Galil, editors, Combi-
natorial Algorithms on Words, pages 85–96. Volume F12 of NATO ASI Series. Springer-Verlag, New
York, 1985.
[2] A. Apostolico and F. P. Preparata. Optimal Off-Line Detection of Repetitions in a String. Theoretical
Computer Science, 22:297–315, 1983.
[3] M. Ayala-Rinco´n and P. D. Conejo. A Linear Time Lower Bound on Updating Algorithms for Suffix
Trees. In String Processing and Information Retrieval: A South American Symposium, pages 1–6,
September 1998. Santa Cruz de La Sierra, Bolivia.
[4] P. D. Conejo. Limite Inferior para Algoritmos de Atualizac¸a˜o de ´Arvores de Sufixos. Master’s thesis,
Departamento de Matema´tica, Universidade de Brası´lia, 70910-900 Brası´lia, Brazil, November 1997.
In Portuguese.
[5] M. Crochemore. An Optimal Algorithm for Computing the Repetitions in a Word. Information Pro-
cessing Letters, 12(5):244–250, October 1981.
[6] M. Farach. Optimal Suffix Tree Construction with Large Alphabets. In Proceedings of the IEEE
Symposium on Foundations of Computer Science, pages 137–143, April 1997.
[7] P. Ferragina and R. Grossi. Fast Incremental Text Editing. In Proceedings of the Sixth Annual ACM–
SIAM Symposium on Discrete Algorithms, SODA 95, pages 531–540, 1995.
[8] R. Griegerich and S. Kurtz. From Ukkonen to McCreight and Weiner: A Unifying View of Linear-Time
Suffix Tree Construction. Algorithmica, 19:331–353, 1997.
[9] G. Kucherov and M. Rusinowitch. Matching a Set of Strings with Variable Length Don’t Cares.
Theoretical Computer Science, 178:129–154, 1997.
[10] U. Manber and G. Myers. Suffix Arrays: A New Method for On-line String Searches. SIAM Journal
on Computers, 22(5):935–948, 1993.
[11] E. M. McCreight. A Space-Economical Suffix Tree Construction Algorithm. Journal of the Association
for Computing Machinery, 23(2):262–272, April 1976.
[12] E. Ukkonen. On-Line Construction of Suffix-Trees. Algorithmica, 14:249–260, 1995.
[13] P. Weiner. Linear Pattern Matching Algorithms. In Proceedings of the IEEE 14th Annual Symposium
on Switching and Automata Theory, pages 1–11, 1973.
