TERMINATION OF REWRITING IS  UNDECIDABLE 
IN THE ONE-RULE CASE * 
Max Dauchet  
LIFL (UA 36g, CNRS), Unlversit~ de Lille-Flandres-Artois 
UFR d' IEEA, 59655 VILLENEUVE D'ASCQ Cedex FRANCE 
ABSTRACT: It is well known that it is undecldable whether a term rewriting system is 
terminating. We prove in this paper that the property remains undecidable if the 
system has only one rule. 
I.Introductlon. 
A rewrite system (also called term rewriting system) terminates iff no infinite 
derivations are possible. It is well known that termination (also called uniform 
termination) is, in general, an undecldable property (see, for example, Huet,G., 
Lankfork, D.S. (1978) [4]). Then a lot of works have been devoted to introduce 
methods for proving that particular systems of rewrite rules are terminating - or 
non-terminating - programs (see Dershowitz,N. (1985, 1987) [2]) for a survey of 
termination of rewriting). 
Classical proofs of undeoidability of termination simulate Turing machines 
with rewrite systems~ the number of rules of which depends on the number of machine 
transition. LIpton, R.. Snyder, L. (197T) [7] asserts that three  rules suffice for 
undecidability. Dershowitz, N. (1985, 1987) [2] gives a new coding of Turlng machines 
by two rules-rewrite Systems, which leaves open the termination problem of the 
one rule case only (Jouannaud, J.P. (1987) [6]). 
This paper is devoted to prove that termination is undecidable, even in the 
one rule case. 
In the next section, we present our construction and the precise result. In 
section III, we present a detailed proof. 
Let us recall that a rule is left-linear if no variable occurs more than 
once on the left-hand side of the rule; a rule is right-linear if no variable occurs 
% The preparation of this paper was supported in part by the "GRECO de 
Programmation" and the PRC "Math~matiques et Informatique". 
263 
more than once on the right-hand side of the rule. A rule is linear if it is both 
left- and right-linear. In this paper, we need a non-llnear rule to simulate a 
Turing machine. So, our construction leaves open the following problems: 
Does termination is decidable in the one-linear-rule case? 
Does termination is decidable in the one-rule semi-TAue system case? (asemi- 
Thue system can be viewed as a rewrite system over words, consisting of monadic 
(hence, linear) terms). R.V. Book (1985, 1987) [I] expects the word problem is 
decidable in the one-rule Thue systems case; by the same way, we suggest that one 
should attempt to show that the first question above (and hence, the second one) get 
positive answer. 
In this paper, we assume that the reader is familiar with the basic notions 
of rewrite systems (see, for example, Dershowitz,N. (1985, 1987) [23 and 
Huet,G.,Oppen,D.C. (1980) [5]). 
ll.Construction. 
A/Turing machine: notations. 
Let M be a Turing machine, with a single tape. States are denoted q, ql, q~, 
q' . . . .  q',.., and so on. Letters of the tape alphabet P are denoted by first letters 
of the greek alphabet ~, 6, ~, ~' . . . .  , ~, . . . ,  ~i,..., ~'~ .... Without lack of 
generality, we suppose that the non-blank portion of tape is always enclosed between 
special symbols #~ and #~. 
An instantaneous description (I.D.) D of M is denoted 
which means that X is in state q, the head scans the symbol 6, with non-blank left 
portion of tape #z=, . . .~  (from the left end to the symbol preceding the read head) 
and right portion ~i...~.#~ (from the symbol following the read head). If a non- 
blank portion is empty, we denote it $. 
(q,~,~,q',L) denotes the left-movin~ X-instruction signifying "if X is in 
state q reading the symbol =, then replace on the tape = with the symbol ~, move 
lef~ and go into state q' ". Ris~t-movin ~ instructions are defined by the same way. 
To increase the non-blank portion of the tape, there are special-left movin~ 
instructions of the form (q,#z,#z~,q',L), signifying "if M is  in state q reading the 
symbol #z, then insert the symbol ~, move left to position the head on #z again, and 
go into state q' " Special-right moving instructions are defined by the same way. 
Obviously, moving instructions such as (q,#z,~,q',L) are forbiden. Without 
lack of generality, we do not consldere "standing" instructions. 
B/Rewrite rules: notations. 
For any term, x, 
...y'j... denote variables. 
X ° , ~, y, X, Z, Z', Z", Xl , • . . ~ X~ ...X ~ , • . o X' ~, 
264 
defined: 
Let us define the ranked alphabet ~, on which the rewrite rule R~ is 
Each state symbol and tape symbol of M will be a constant of Z. 
V and i are binary operators. 
$ is a special constant which is used like NIL. 
The 5-ary operator D will get the left-context a . . . .  =i#I as first son, the 
current state as second son, the scanned type symbol as third son, the right-context 
as forth son, and, as fifth son, a term which denotes the next rule used in a M- 
computation and which "computes" by overlaping the corresponding next I.D. 
- The 6-ary operator T is the root of the last son of D. Its four first sons 
will be matched by ~-instructions. 
C/The rule R~ 
D V 
1t I I \  / \ 
X z° /Az  y T t,,= V 
/ \ 
z" z z" z °' * * =========~ tj,~ V 
/ \ / \ / \ 
Z' X'Z' yi 
For every M-instruction 
I,J,...K and 
tape symbols a,~ .... X, 
with terms tz,= 
V defined after 
/ \ 
If I is a right-moving instruction <q,k,~,q',R) then, for every tape symbol 
D 
/ I I l k  
X' Z°'z'y ' T 
t z .~  = / \ 
/ \ 
p x ~ 
If I is a left-moving instruction (q,X,p,q' ,L) then, for every tape symbol a 
D 
/ I I I \ 
x' z"'z'y' T 
//i\ 
t z , .=  = / \ 
1 \ 
265 
If I is a special right-moving instruction (q,#~,N#~,q',R) then, for only the tape 
tx.~ = 
symbol ~ = #,- 
D 
1 1 I l k  
x' z~'z'y ' T 
,,<,'/i 
q #~ jx#~ q' i * 
I \  / \ 
#,. t #~ $ 
/ \ 
x' 
If I is a special left-moving instruction (q,#~, #1N,q',L) then, for only the tape 
tx,~ = 
symbol ~ = #~ 
D 
t I I I \ 
x' z:~z~y ' T 
q #~ #~p .q * i 
I \ / \ 
#~ $ #~ 
/ \ 
y' 
F/ The result. 
Theor~D~ : 
M halts for all input tapes if and only if R~ terminates for all initial 
term. 
Proof: see section Ill for a detailed proof. Nevertheless, it is easy to get an 
intuitive idea of this proof, ~nich is sometimes tedious but always follows 
classical ways. The simulation lemma of section Ill checks the idea of the 
construction: if we unify the left-hand side of the rule with some subterm ti..~ of 
the rlght-hand side, we simulate a step of Turing machine using the instruction I° 
The two last lemmas are devoted to prove that there is no "perverse" infinite R~c- 
derivation, i.e. no infinite derivation which does note simulate infinite X- 
computation. KSnis's lemma is then our main tool. 
Corollany : 
It is undecidable if one-rule rewrite systems terminate. 
Proof: Since it is undecidable if a Turing machine halts uniformly, it is also 
undecidable if R~ systems terminate. 
266 
I I I .  Proof of the theorem. 
A/Preliminaries. 
Remark: According to most of the papers, we considere rewriting of closed 
terms, i.e. terms without variables. Nevertheless, terms might also contain 
variables, but for the purpose of this paper, these are treated as constants. So, in 
the following, we considere closed initial terms. 
Let an instantaneous description of M 
Let us denote a .... ~,#~ its left-context and ~. . .~#~ its rlght-context. 
will be identified to the term The left context 
/ \  
/ \ 
/ \ 
#~ $ 
which is also denoted ~ .... ~#~ or 
More generally, we said that a term is a left-llst if it is $ or if it is of the 
form ~(~,~(~,~( ...... t(X,~(#1,S))...))). A right-list is defined by the same way, 
where #I is replaced with #~. 
B/Let us name LEFT the left-hand side of RN and RIGHT its right-hand side. Let us 
abbreviate the form of EIGHT with V(tz.~, .... ,tK.~) or V 
t~ ....... tK.~ 
Our rule LEFT ~ EIGHT applies to a term t if a subterm s of t matches LEFT 
with some substitution S of (closed) terms for variables appearing in LEFT (i.e. s = 
LEFLS,  also denoted S(LEFT)). We write t ~ u to indicate that the term t rewrltes 
in this way to the term u, So, t= t',LHFT.S ~ u = t'.RIGHT. S. Such a substitution S 
is decomposed as follows (we use mnemonic names), Using notations of the definition 
of RM (section II C/), let us name OLC (i.e. Old Left Context), the term substituted 
by S to the variable x. We note S: x .... > OLC. By the same way, S can be decomposed 
in three sub-substitutions, that we denote OLD, NEW and AUX-part. 
OLD-part: x .... > OLC NEW-part: x'---> NLC (New Left Context) 
s°---> (IoN (Old STate) z°'--> NST (New STate) 
z .... > OSC (Old SCanned symbol) z'---> NSC (New SCanned symbol) 
y .... > ORC (i.e. Old Right Context) y .... > NRC (New Right Context) 
AUX-part: z ..... > RWR (ReWRited symbol (or string for special instructions)) 
267 
We denote OLD= <OLC, OST, OSC, ORC> etc.~. 
Remarln Only NEW occurs  in RIGHT. Hence, RIGHT,S=RIGHT,NE¥=RIGHT<NLC, NST, NSC, NRC> 
If we considere a substitution S', we note OLD',OLC', .... the corresponding 
components. 
A derivation is a sequence of rewrites; if t #..@u in zero or more steps, 
abbreviated t ~ u, then we say that u is derivable from t. 
Let us consider a derivation step where LEFT overlaps RIGHT, i.e. LEFT is 
unified with a non-variable subterm t of RIGHT. Then, considering occurences of D, 
LEFT is necessarily unified with some t~.~ of RIGHT. Such a derivation step will be 
sometimes denoted J ,~  or J~. 
By the same way, we will sometimes denote Jl- a computation step of a Turing 
machine ~ using the instruction J of 
The following lemma illustrates the main idea leading to the construction of 
Let J be the riKht instruction (q,A,#,q',R). 
The following N-compu~ation step exist~ 
if and only if the fol lowin~R~-derivation step exists for soma u: 
The correspondin~ results holds by the same way when J is a left instruction 
or a special instruction. 
Proof: The R~-derivation above exists iff, for some tape symbol ~, 
tj.~<a .... a~#1,q,k,~.. .~n#~> matchs LEFT with a substitution S such that 
part of  S is <~a~. . .a~#1,q ' ,~ ,~. . .~#~> 
Let us compute S: 
z" = 
x= a . . . . .  a~#~ , z °= q ,  z= X, y= ~, . , .~#~ , 
x'= Va .... a~#~, z"= q', z'= a= ~i, y'=~2...~#~. 
We obtain the wished NEW-part and remark that ~= ~.  
the term 
the NEW- 
We leave to the reader the proof of the other oases (left instructions, 
special right instructions and special left instructions). 
Corol i arv: 
If there is soma infinite N-computation, 
deri va ti on. 
then there is some infinite R~- 
268 
Proof: using the "only part" of our simulation lemma, it is easy to construct by 
induction such an infinite derivation. 
Now, our aim is to use the "if" part of the simulation lemma to prove the 
reciprocity of that corollary and hence to establish the result which is the goal of 
this paper. But we must prove that there is no "perverse" infinite R~-derlvation, 
i.e. no infinite derivation which does note simulate infinite M-computation. This is 
the reason why we introduce the followin S definition and lemmas. It is obvious that 
the two lemmas below lead to the conclusion. 
Definition: 
An infinite R~-derivation is a good infinite derivation if it is the 
inductive limit of good finit derivations (gfd) defined as follows 
- For every (closed) substitution ~, RIGHT.~ is a 0 step-gfd, called of type 
<s> or <s>-gfd. 
- A n+l step-sfd of type <I~, .... I~,I~÷~> is 
RIGHT.~o ~ un(RIGHT.~)=u~÷~ (LEFT.~n÷~) I~÷~ u~+1 (RIGHT.~.I) 
with RIGHT.co ~ u,,(RIGHT.~) is a <I1,....I~>-gfd and at the last step, the left- 
hand side LEFT of RM overlaps the risht-hand side RIGHT of the occurence of R~ in 
the n th step. 
Unformaly, theses gfd are closely related to the derived pair of 
Guttag,J.V. ,Kapur,D. ,Musser, D.R. (1983). We can draw as follows a good infinlte 
derivation <11, .... I~,I~÷1> 
• J " .  
4.. ? 
I ~. I ~  .V" ,V f  V" 
/ = LEFT.~÷~ ~ /R I~HTI  ~. . .~  / ' V 
At every "empty" end of branch is rooted some tz.z,.~ which we do not draw. 
From every good infinite R~-derivation~ we can deduce some infinite M- 
compu%a ti on. 
Proof: We use notations of the definition for the good infinite R~cderivation GID 
that we consider. 
First part: Let us suppose that ~o simulates an instantaneous description, 
i.e. that it substitutes to x' a term which is a left-list (see section Ill A/), to 
z °' a constant which is a state, to z' a constant which is a tape symbol and to y' a 
term which is a right-list. Then, we easily deduce from the simulation lemma that 
there is an infinite M-computation 
269 
Second part: If ~o does note simulate an instantaneous description, let us 
deduce from it a subst i tut ion ~'o which s imulates an instantaneous description. 
Construct ion of ~'o: 
Let us denote ~o = <t,u,v,w>. Intuitively, we "extract of t by the fol lowing way~ 
the term t' which is, start ing from the root, its bigger subterm of left-context 
type" : NODE = root of t; 
While (NODE=~ and first son of NODE is a tape symbol) do NODE=second 
son of NODE; 
substitute #i to }[ODE 
We deduce a r ight- l ist  w' of w by the same way. 
Now consider ~'o = <t',u,v,w'>o As t~,m1.~o is unif ied with LEFT at the first step 
of GID, u is necessari ly a state and v a tape-symbol. So ~'o s imulates an 
instantaneous description. 
Eventually, we must verify that all the derivation steps of ~ID remain possible when 
we $tart from tzr.~,.~'o instead of tz~.~7.~o. We use two facts to check this 
property: 
- At the first step, t matchs the variable x of LEFT. As x only occurs 
once in LEFT, we can substitute t' to t without break any subterms-equal l ty 
constraint. 
- At every step, unif icat ion only scans " left-context part t' " of t; 
indeed, otherwise uni f icat ion would scratch. So, no step is affected when we 
substitute t' to t. 
L e ~  We can pull a good infinite derivation out every infinite derivation. 
Proof: <Let us recall the sub-term order def ined on closed terms by t ~ u iff u=t.~ 
for some subst i tut ion ~). 
For every term t, let us denote V[t] the number of occences of V that we 
can reach, start ing from the root and meeting only occurences of V along the 
corresponding branch. 
Consider an infinite RM-derivat ion start ing from an initial term 8. Choose a 
mimimal subterm ~ of 8, such that an infinite sub der ivat ion starts from • (perhaps 
8=~), The root of • is an occurence of D, Subterms of • rooted to other occurences 
of D are only derived a f inite number of step; so we can cut off an initial f inite 
suoder lvat lon and consider that the infinite der ivat ion is outermost (i.e. only 
outermost ocourences of LEFT -hence of D- are derived). In such a derivation, if t~ 
denotes the n ~h derived term, Vital str ict ly increases. We deduce of Kgnig's lemma 
that we get an infinite branch only labeled with V. Eventually, we considers only 
the steps 8rowing this inf inite branch and we obtain a good infinite computation. 
270 
P~I~h'~E]WCKS 
[I] 
[21 
[3]  
[4] 
[5] 
[6] 
[7] 
R.V. Book, Thue Systems as Rewriting Systems, in: J.P. Jouannaud, ed., 
Proceedings of the First International Conference on Rewritin~ Techniques 
and Applications, Dijon~ France. Sprin~er Lec. Notes Comp. Sci.202 (1985) 
63-94,  Revised version: J. Symbolic Computation,3 (1987) 39-68. 
N. Dershowitz, Termination, in: J.P. louannaud, ed., Proceedln~ of the 
First International Conference on Rewritin~ Techniques and Applications, 
Dijon, France. Sprin~er Lec. Notes Comp. Sci.202 (1985) 180-224. Revised 
version: Termination of rewritln 6. J. Symbolic Computation, 3 (1987) 69-116. 
J.V. Guttas, D. Kapur and D.R. Musser, On proving uniform termination and 
restricted termination of rewriting systems. SIAM J. Comput.12 (1983) 187- 
214. 
G. Huet, D.S. Lankfork, On the uniform haltin~ problem for term rewritin~ 
systems. Rapport Laboria 283 (1978), INRIA, Le Chesnay, France. 
G. Huet and D.C. Oppen, Equations and rewrite rules:A survey, in: R.V. Book, 
ed., Formal Language Theory: Perspectives and Open Problems, 1980, pp. 349- 
405. ~ew York: Academic Press. 
J.P. Jouannaud, Editorial of J. Symbolic Computation, 3, I-2, 198g, 1-2. 
R. Lipton and L. Snyder, On the haltin 5 of tree replacement systems. 
Proceedings of the Conference on Theoretical Computer Science, University of 
Waterloo, Waterloo, Canada, (1977), 43-46. 
