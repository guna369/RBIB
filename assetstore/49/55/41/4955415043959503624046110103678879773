Unication Modulo Presburger Arithmetic and Other
Decidable Theories
Mauricio Ayala-Rincon

Ivan E. Tavares Araujo
y
Abstract
We present a general unication algorithm modulo Presburger Arithmetic for a re-
stricted class of modularly specied theories where function symbols of the target theory
have non arithmetic codomain sorts. Additionally, we comment on conditions guaran-
teeing decidability of matching and unication problems modulo more general theories
than the arithmetic ones, which appear when automated deduction is implemented by
combining conditional rewriting techniques and decision algorithms for built-in predi-
cates.
Keywords: Equational unication, automated reasoning, algebraic specication, con-
ditional rewriting systems
1 Introduction
Unication modulo general theories is very important in the context of automated reasoning
and algebraic specication. In particular, unication modulo arithmetic theories, such as
Presburger Arithmetic (PA) [Pre29], is relevant since many deductive systems are specied
so as to contain an arithmetic theory as parameter. The need for arithmetic unication
is illustrated, for example, in [ARG97] where it is shown how Knuth-Bendix completion of
conditional equational modular specications containing an arithmetic parameter and how
the cover-set method (applied in order to realize inductive proofs as it is made in [KS96])
can be improved by searching for solutions of the arithmetic constraints resulting when new
critical pairs are deduced and induction schemes are generated, respectively.
As was noted by Dershowitz and Jouannaud in [DJ90], PA is an example of a theory
with decidable unication problems. But, a semi-decision procedure like the one described in
[Sho79], surprisingly cited in [DJ90], cannot be used for directly solving unication problems
in PA. We should rather provide a method allowing us to understand unication problems
in arithmetic theories within more general contexts, such as the algebraic setting of monoidal
theories. Procedures for solving unication problems with constants in monoidal theories
based on algebraic techniques, as given in [Nut92, BN96], could be adapted for solving \uni-
cation problems" appearing as purely equational expressions in the class of PA formulas.
We show that general unication problems in PA with non-interpreted function symbols
whose sorts are dierent from the arithmetic one would correspond to homogeneous systems

Departamento de Matematica, Universidade de Braslia, 70910-900 Brasil, ayala@mat.unb.br . Partly
supported by FEMAT and CAPES Brazilian Foundations.
y
Departamento de Matematica, Universidade de Braslia, 70910-900 Brasil,
ivan@mat.unb.br,ivan.araujo@psy.ox.ac.uk . Supported by CAPES Brazilian Foundation. Author
currently at the Department of Experimental Psychology, University of Oxford, England
1
of linear equations, while problems that additionally admit non-interpreted constant sym-
bols belonging to the arithmetic sort would correspond to inhomogeneous systems over the
ring Z. This kind of presentation of general unication modulo arithmetic could lead to the
discussion of interesting points in algebraic modular specication concerning the character-
ization of general unication in arithmetic theories. An initial version of the algorithmic
method explained here was presented in [dAAR98].
Additionally, we present conditions guaranteeing decidability of matching and unication
problems modulo more general theories than the arithmetic ones. These conditions were
motivated when making eective simple rewrite properties, such as decidability of one-step
reduction or joinability of standard premises, in the context of conditional rewriting systems
with built-in predicates as premises over general decidable theories [AR93, AR00]. We
consider modularly specied theories with a parameter theory T
0
whose codomain sorts of
functions in the target theory do not belong to sorts of the parameter theory T
0
. For these
restricted theories we show that matching and general unication modulo T
0
is decidable
whenever the universal-existential formulas of T
0
are decidable as well.
2 Unication in Monoidal Theories
An equational theory is monoidal if it contains both a binary operation with identity which
is associative and commutative and an arbitrary number of unary operations which are ho-
momorphisms with respect to the binary operation and its identity. The class of monoidal
theories generalizes the class of commutative monoids. Nutt [Nut92] gives an algebraic
characterization of unication problems in such theories. Solving unication problems in
monoidal theories amounts to solve systems of linear equations over semirings. More pre-
cisely, for a given monoidal theory elementary unication problems can be viewed as homoge-
neous systems of linear equations and unication problems with constants as inhomogeneous
ones over the canonical semiring determined by the monoidal theory. From this character-
ization one can obtain algebraic descriptions of the unication types of monoidal theories
with and without constants.
It remains to solve the case of general unication. Since the solution of a unication
problem depends on the structure of a semiring, it is not clear that one could give a char-
acterization of the unication type of general problems by algebraic means. It is known
([BS94, BS99]) that a monoidal theory has general unication problems of type nitary if
and only if problems with constants are of the same type. We can state some formal analo-
gies between PA and the main features of monoidal theories that make possible adaptation
of Nutt's method to solve elementary unication problems and problems with constants
modulo PA (for brevity PA-unication) by solving homogeneous and inhomogeneous sys-
tems of linear equations in the (semi)ring Z, respectively. In fact, we could conceive addition
as the required associative commutative binary operation with identity and multiplication
by constants as unary operations which are homomorphisms for addition. Of course, the
inductive part of PA cannot be presented equationally. That should be done by means of
an inductive schema.
3 General PA-unication Algorithm
We present a general unication algorithm for a restricted class of modularly specied the-
ories in which the language of the arithmetic parameter theory is considered as a signature
over the arithmetic sort, say int , and the remaining function symbols of the target theory
range over extended sorts except constant symbols which can range over the arithmetic sort
too. Additionally, only PA-consistent axioms (about constants of arithmetic sort) are ad-
mitted. In this way one guarantees that the whole specication is a conservative extension
of the specication of the arithmetic parameter. This restriction seems very strong, but it
allows reasonable manipulation of many important examples because it occurs often when
implementing formal specications, where new sorts are constructed from the concrete ones
[AR00].
Let F be a set of funtion symbols over a many-sorted signature . Let S be the set of
sorts of  and let V be a countably innite many-sorted family of sets of variables.
We assume that the reader is familiar with the term algebra T (F ;V). Let t 2 T (F ;V).
We denote the sort of t by sort(t). A substitution is a mapping from variables to terms
of the corresponding sort which almost everywhere equal to the identity. We use the usual
explicit notation for substitutions: fx
1
=t
1
; : : : ; x
n
=t
n
g. Substitutions are represented by
Greek letters (; ; ) as usual. The application of a substitution  to a term t 2 T (F ;V),
denoted t, is dened by
t :=

x; if t = x 2 V
f(t
1
; : : : ; t
n
); if t = f(t
1
; : : : ; t
n
)
Denition 3.1 Let t 2 T (F ;V). The set of positions of the term t, denoted by O(t), is the
set of strings over the alphabet of positive integers, inductively dened as follows:
- if t = x 2 V, then O(t) = f"g, where " denotes the empty string;
- if t = f(t
1
; : : : ; t
n
), then O(t) = f"g [
n
i=1
fi   j  2 O(t
i
)g.
The position " is called the root position of the term t, and the function or variable
symbol at this position is called the root symbol of t. Positions are denoted by Greek letters
; . Positions ;  2 O(t) are compared by the prex order dened by    i there exists

0
such that 
0
= . Additionally, if 
0
6= " then one can write  < . The prex order over
positions is a partial order. Incomparable positions are called parallel or disjunct positions.
By tj

we denote the subterm at position  2 O(t) of t.
By s[  t] we denote the term resulting form s by replacing the subterm at position 
in s, sj

, with t. Of course, we suppose that sort(t) = sort(sj

).
Denition 3.2 A term algebra T (F ;V) with arithmetic reduct is one whose set of sorts, S,
contains an arithmetic sort S
0
= f intg and whose signature  contains arithmetic function
symbols for addition, + : int  int ! int, and successor, succ : int ! int, constant
symbol for zero, 0 :! int, and an ordering predicate symbol, say  : int  int.
Terms t 2 T (F ;V) such that sort(t) = int are called arithmetic terms. Terms with
sort(t) 6= int are called extended terms. Since our proposal is to treat the arithmetic reduct
of general term algebras by means of built-in decision algorithms, we adopt standard deci-
mal notation for integer numbers: 0; 1; 1; 2; 2; 3; 3; : : : . Observe that negative integers
cannot be constructed from zero and successor directly, but they can be deduced from arith-
metic consistent equations such as succ( succ(x)) = 0. Additionally, repeated addition of
an arithmetic term will be abbreviated with the multiplication of the corresponding integer
constant and the term; for instance, x+ x+ x is briey written as 3x.
In a term algebra with arithmetic reduct, arithmetic symbols and predicates are inter-
preted as in standard arithmetic models, such as the structure of integers with addition and
an ordering predicate hZ;+;i.
Our term algebras with arithmetic reduct are restricted in such a way that no other
function symbol than the arithmetic ones can range over the sort int . This means that for
all function symbols f 2 F , f 6= + and f 6= succ and f 6= 0, sort(f) 6= int .
We select the standard model of the Presburger arithmetic PA and denote the equality
modulo PA by =
PA
. For example, f(x + a; g(z)) =
PA
f(a + x; g(z)), because of the
commutativity of the addition in the structure of integers.
Denition 3.3 Let T (F ;V) be a term algebra with arithmetic reduct. A PA-unication
problem over T (F ;V) is a nite set of equations
fs
1
=
?
PA
t
1
; : : : ; s
n
=
?
PA
t
n
g
where each pair of terms s
i
and t
i
, for i = 1; : : : ; n, are terms in T (F ;V) of the same sort.
Denition 3.4 Let P = fs
1
=
?
PA
t
1
; : : : ; s
n
=
?
PA
t
n
g be a PA-unication problem over the
term algebra with arithmetic reduct T (F ;V). A substitution  is a unier of this problem
i s
i
 =
PA
t
i
 for all i = 1; : : : ; n.
Example 3.5 Consider the unication problem ff(x + x; g(u)) =
?
PA
f(z + z + z; v)g over
T (F ;V), where x; z are variables of sort int and u; v are variables of other sort than int in
V . A unier for this problem is the substitution  = fx=6; z=4; v=g(u)g.
Denition 3.6 Let T (F ;V) be a term algebra with arithmetic reduct and let ;  be substi-
tutions on V. The substitution  is more general modulo PA than the substitution  i there
exists a substitution  such that x =
PA
x for all x 2 V. In this case we write  
V
PA
.
Example 3.7 (Continuing example 3.5). Observe that the unier  = fx=y+ y + y; z=y+
y; v=g(u)g is more general than . In fact,  = fy=2g.
A complete set of uniers for a PA-unication problem over T (F ;V) consists of a set of
uniers  such that for all unier, , of the problem there exists  2  such that  
V
PA
.
Unlike the case of equational unication, when comparing uniers of a PA-unication
problem P the notion of (minimal) complete set of PA-uniers is unnecessary. What should
be used in the arithmetic case is the space of solutions.
Example 3.8 The space of solutions of the PA-unication problems:
ff(2x; 2z + x) =
?
PA
f(3z; z + y)g,
ff(g(2x); 2x) =
?
PA
f(g(3z); 3z + 2)g and
ff(g(2x); h(3x)) =
?
PA
f(g(3z); h(2z))g
is given by fx = 3u; y = 5u; z = 2u j u 2 Zg , ; and fx = 0; z = 0g, respectively. This can
be easily checked by resolving the corresponding linear systems.
Nutt's method for unication problems with constants can be adapted directly for the
(semi)ring Z. Then one can treat PA-unication problems with arithmetic constants and
variables.
Example 3.9 Consider the PA-unication problem:
ff(h(x+2c); 2z+x) =
?
PA
f(h(3z+ c); z+y+ c)g, where x; y; z and c are arithmetic varibles
and constant, respectively. The space of solutions of the corresponding inhomogeneous
linear system of equations: x + 2c = 3z + c and 2z + x = z + y + c in Z corresponds to
f(x = 3au + 3bc   c; y = 4au + 4bc   2c; z = au + bc) j a; b; u 2 Zg. This can be easily
computed by applying some algorithm for solving linear systems of equations in Z selecting
the homogeneous and inhomogeneous part of the linear system. Observe that, uniers can
be written in terms of the new variable u by selecting integer values for a and b; for instance,
if a = b = 1,  = fx=3u+ 2c; y=4u+ 2c; z=u+ cg.
Presenting the space of solutions of the corresponding integer linear system of a PA-
unication problem is the most appropriate way to exhibit explicitly a method to eectively
computing all its (most general) uniers.
Since an unier of a PA-unication problem P over T (F ;V) is (either an element or) a
sub-space of the space of solutions of the associated integer linear system, we can conceive
a unication algorithm for our restricted class of term algebras with arithmetic reduct as a
combination of standard syntactic unication for the non-integer variables and resolution of
integer linear systems of equations for the arithmetic ones.
The algorithm presented in table 1 basically realizes syntactic unication on the ex-
tended part of the PA-unication problem and unies the arithmetic part of the unication
problem by using Nutt's unication method for monoidal theories. In our case, by solving
homogeneous and inhomogeneous systems of linear equations in the (semi)ring Z. Soundness
and completeness of the algorithm constitute a constructive proof of the following
Lemma 3.10 The complete set of uniers of a PA-unication problem over a term algebra
with arithmetic reduct T (F ;V), restricted in such a way that only the arithmetic symbols
range over the arithmetic sort int, can be eectively computed.
The introduction of new variables of sort int eliminates the possibility of \occur-check"
problems between sub-terms of sort int in the application of the syntactic unication
algorithm. Direct application of syntactic unication for the input terms s; t does not work
since it avoids correct arithmetic interpretations (for example, syntactic unication of f(0+1)
and f(1 + 0) gives rise to the PA-inconsistent dierence set f0 = 1; 1 = 0g which does not
unify syntactically). Observe also that the set of bindings for arithmetic variables could
be written eectively in the form 
00
= fx
i
1
=y
j
1
; :::; x
i
k
=y
j
k
g because of the use of dierent
variables x
1
; : : : ; x
n
; y
1
; : : : ; y
m
and the in-existence of non-variable sub-terms of sort int
in s
0
and t
0
. Of course dierent arithmetic variables can replace identical arithmetic terms,
but this is checked when resolving the (in)homogeneous linear system corresponding to 
00
.
Our algorithm does not interpret extended function symbols as the direct application of
Shostak's method does. For example, Shostak's semi-decision algorithm solves the equation
f(x) = x by replacing f(x) with a new variable, say y, and by assigning x and y the same
integer value. In this way, the non-interpreted function symbol f is erroneously interpreted
as a function with a xed point. Techniques developed by Baader and Shulz in [BS96]
for combining decision procedures for equational theories could be more adequate in order
to adapt Shostak's semi-decision algorithm to eectively calculate uniers over arithmetic
theories rather than just decide solubility of unication problems.
Soundness of the algorithm for the restricted class of specications is obvious and its
completeness results from the completeness of (syntactic unication and) Nutt's algorithm
for unication with constants in monoidal theories. Polynomial run time complexity of the
algorithm depends on the syntactic unication algorithm applied and on the method used
to solve (in)homogeneous systems of linear equations in the ring Z.
Example 3.11 Consider the specication of \arrays" of arbitrary \objects" indexed by
\integer" parameters as in [AR00], where one denes two extended operations
h; ; i : array  int  object! array and  [] : array  int ! object
Table 1: General PA-unication Algorithm for Restricted Specications
INPUT: s; t well-formed (extended) terms in T (F ;V)
OUTPUT:  unier of s and t
BEGIN
LET  be the maximal set
f
1
; :::; 
n
2 O(s) j sort(sj

i
) = int and 8
0
< 
i
, sort(sj

0
) 6= intg
LET s
0
:= s[
1
 x
1
]:::[
n
 x
n
], where x
i
, i = 1; : : : ; n are
new variables and sort(x
i
) = int
LET  be the maximal set
f
1
; :::; 
m
2 O(t) j sort(tj

j
) = int and 8
0
< 
j
, sort(tj

0
) 6= intg
LET t
0
:= t[
1
 y
1
]:::[
m
 y
m
], where y
j
, j = 1; : : : ;m are
new variables and sort(y
j
) = int
Apply any algorithm of syntactic unication to s
0
and t
0
IF s
0
and t
0
do not unify THEN FAIL
ELSE LET  be mgu of s
0
and t
0
Decompose  = 
0
[ 
00
, where

0
consist of the bindings for non integer variables and

00
of the bindings for variables of sort int
LET 
00
= fx
i
1
=y
j
1
; :::; x
i
k
=y
j
k
g, where
i
1
; :::; i
k
is a subsequence of 1; :::; n and 1  j
1
; :::; j
k
 m
Apply Nutt's algorithm for unication with constants in order
to resolve the (in)homogeneous linear system:
fsj

i
1
= tj

j
1
; :::; sj

i
k
= tj

j
k
g
IF a space of solutions 	 is found for fsj

i
1
= tj

j
1
; :::; sj

i
k
= tj

j
k
g
THEN
PRINT \solutions are compositions of 
0
and  2 	"
ELSE FAIL
END
with the intended meaning of insertion of objects at a position of an array and selection of
the object at a position of an array, respectively.
Consider the problem of unication of
s  hX; 2z
1
+ z
2
+ c
1
;Xi[z
1
+ c
1
]
and
t  hhA; z
2
+ c
1
;Li; z
2
+ z
3
+ c
2
;Li[z
2
+ c
1
+ c
2
]
where X and X and z
1
; z
2
; z
3
are variables of sort array, object and int , respectively and
A and L and c
1
; c
2
are constants of sort array, object and int , respectively.
Following steps of the algorithm, initially one should nd a syntactic unier for
s
0
 hX; x
1
;Xi[x
2
] and t
0
 hhA; y
1
;Li; y
2
;Li[y
3
]
which gives  = fX=hA; y
1
;Li; x
1
=y
2
;X=L; x
2
=y
3
g. Decomposing  into the arithmetic and
the non-arithmetic bindings one has
 = (
0
= fX=hA; y
1
;Li;X=Lg) [ (
00
= fx
1
=y
2
; x
2
=y
3
g)
Subsequently, one should resolve the corresponding unication problem with constants:
f2z
1
+ z
2
+ c
1
= z
2
+ z
3
+ c
2
; z
1
+ c
1
= z
2
+ c
1
+ c
2
g
Following Nutt's method for unication problems with constants in monoidal theories, one
should nd solutions for the corresponding elementary unication problem:
f2z
1
+ z
2
= z
2
+ z
3
; z
1
= z
2
g
which corresponds to solutions of the homogeneous linear system:
 
2 1 0
1 0 0

 

0 1 1
0 1 0

=

2 0  1
1  1 0
 
0
@
u
1
u
2
u
3
1
A
=

0
0

and combine it with solutions for the inhomogeneous linear systems generated by the con-
stant part:

2 0  1
1  1 0

0
@
v
1
w
1
v
2
w
2
v
3
w
3
1
A
+
 
1 0
1 0

 

0 1
1 1
 
=

0 0
0 0

Space solution for the rst system corresponds to f(u
1
= a; u
2
= a; u
3
= 2a) j a 2 Zg and
for the second and third to f(v
1
= b; v
2
= b; v
3
= 2b + 1) j b 2 Zg and f(w
1
= c + 1; w
2
=
c; w
3
= 2c+ 1) j c 2 Zg, respectively. Consequently, the space of solutions corresponds to
	=
8
<
:
0
@
z
1
z
2
z
3
1
A
=
0
@
a b c+ 1
a b c
2a 2b+ 1 2c+ 1
1
A
0
@
z
c
1
c
2
1
A
a; b; c 2 Z
9
=
;
Selecting, for example, a = 5; b =  4 and c = 1 one obtains the unier  = fz
1
=5z   4c
1
+
2c
2
; z
2
=5z   4c
1
+ c
2
; z
3
=10z   7c
1
+ 3c
2
g that composed with 
0
generates the unier
 = fX=hA; 5z   4c
1
+ c
2
+ c
1
;Li;
X=L; z
1
=5z   4c
1
+ 2c
2
; z
2
=5z   4c
1
+ c
2
; z
3
=10z   7c
1
+ 3c
2
g
for the original unication problem.
At this point of our discussion we nd very important to remark that frequently Shostak's
procedure [Sho77, Sho79] has been erroneously cited as a complete method for deciding arith-
metic with extended function and predicate symbols. Shostak's procedure is an incomplete
semi-decision procedure. This is consequence of the use of Bledsoe's SUP-INF method for
computing real intervals for all the integer variables occurring in arithmetic formulae. Of
course, if a complete method, such as Cooper's one [Coo72], is used to compute intervals
of solutions, then the resulting procedure will be complete, but impractical because of its
ineÆciency. Shostak himself presents a lot of informal comments on his work about this
fact. See, for example, third paragraph before fourth section in [Sho77] (pp 534): \Fortu-
nately this incompleteness manifests itself only rarely in practice. ..."; rst paragraph of
the fth section in [Sho77] (pp 536): \... The success of the method derives at least in part
from the fact that the real problem is easier to solve than the integer problem. The price
to paid for this ease of solution is, of course, the resulting incompleteness"; last paragraph
of the third section in [Sho79] (pp 353): \It should be noted that the completeness of the
procedure depends on the completeness of the method used to test for integer feasibility. At
present, there are no known complete integer programming methods that are also eÆcient.
In prectice, however, this point is of little concern. ..."; etc. The rst author has carefully
examined, implemented and improved Shostak's procedure (using Bledsoe's method) show-
ing that very simple arithmetic formulae, that occur in practice often, cannot be decided by
Shostak's method [ARG97].
The natural question that arises is why to work with Presburger arithmetic if inequalities
are not treated? In fact, what is interesting about Presburger arithmetic is the presence of
the ordering predicate. Our PA-unication algorithm can be modied to treat constrained
PA-unication problems, where the constraints are pure arithmetic predicates. These kind
of unication problems occurs in practice. For example, when conditional rewriting methods
are applied for deduction in equational conditional specications with arithmetic premisses.
We will remark on this class of unication problems in the next section.
4 Unication Modulo More General Theories
We present a decision algorithm for matching modulo theories more general than the arith-
metic ones. By applying simple and obvious modications our algorithm can be transformed
into one for unication. Subsequently, one can conceive this algorithm for the case of the
Presburger arithmetic as one for constrained PA-unication. Our matching algorithm is
presented in the particular context of a class of conditional equational theories with built-in
predicates that were introduced and made eectively decidable by combining conditional
rewriting techniques and decision algorithms in [AR93]. We decided to maintain this pre-
sentation of the algorithm because in this way we motivate its application in the particular
setting of rewrite automated deduction and because it can be adapted to other automated
deduction mechanisms in a straightforward manner. Initially, denitions of the particu-
lar class of modularly specied theories and their implementation by conditional rewriting
techniques are given. Subsequently, the matching algorithm, as a mechanism for deciding
existence of redices, is given.
A basic theory T
0
over an S
0
-sorted signature, 
0
, is a many-sorted rst-order Henkin
theory with equality. Built-in predicates are quantier-free formulae of a basic theory. In a
Henkin theory, for all formulae of the form 9xP (x) there is a ground term t in T

0
(;) such
that T
0
j= 9xP (t) if P (x).
Let F be a set of funtion symbols over a many-sorted signature   
0
, where 
0
conforms the language of a basic theory. Let S  S
0
be the set of sorts of  and let V be
a countably innite many-sorted family of sets of variables over S. In order to incorporate
built-in predicates as conditions into the structure of universal Horn clauses, dened over
the signature , built-in objects are described in the built-in language given by the S
0
-sorted
signature 
0
.
As in the previous section, where extended terms cannot range over the (basic) arithmetic
sort, here we restrict our signatures such that function symbols over  n 
0
do not have
codomain sort in S
0
. A term t in the term algebra T (F ;V) with sort(t) 2 S
0
is called a
basic term and with sort(t) 2 S n S
0
an extended term.
Denition 4.1 Let T
0
be a basic theory over the language of an S
0
-sorted signature 
0
and
let F be a set of funtion symbols over an S-sorted signature   
0
. The corresponding
term algebra T (F ;V), if restricted as above(: function symbols over  n 
0
have codomain
sort in S n S
0
), is called a term algebra over T
0
.
Let ;
0
and T
0
denote signatures and basic theories satisfying the previous restriction.
A universal Horn clause of the form:
l = r if t
1
= s
1
^ : : : ^ s
k
= t
k
^ P
where, for i = 1; : : : ; k, t
i
; s
i
and l and r are S-sorted extended terms in T (F ;V) of the
same sort and P is a built-in predicate, is called a universal Horn clause with built-in
predicate P over the theory T
0
. P is called built-in condition, l = r the conclusion and
t
1
= s
1
^ : : : ^ t
k
= s
k
the standard condition of the clause. Attempting to made eective
decision in theories specied by a set H of this class of universal Horn clauses one can
transform all clauses into conditional rewrite rules of the corresponding form:
l! r if s
1
# t
1
^ : : : ^ s
k
# t
k
^ P
obtaining a conditional rewriting system, R
H
, with built-in predicates and standard condi-
tions as premises. We call this restricted kind of conditional rewriting systems conditional
rewriting systems over T (F ;V) and T
0
. Usual restriction on variables apply: only vari-
ables occurring in l can occur in the standard conditions and in the right-hand side of the
conclusion, r. One can admit extra variables in the built-in condition, P . In standard condi-
tional rewriting systems, applicability of rules is decided by recursively checking joinability
of standard conditions.
Let R
H
be a conditional rewriting system of the above class over a basic theory T
0
and u
be an extended term. In order to decide one-step reduction of u, one should decide whether
or not a position , a rule l! r if s
1
# t
1
^ : : : ^ s
k
# t
k
^ P 2 R and a substitution  exist
such that T
=
0
j= uj

= l, where T
=
0
denotes the basic theory extended with non-interpreted
symbols of the whole specication. Simultaneously, one can verify whether T
0
j= P in
the case of non-extra variable occurrences in P or T
0
-consistence of P (i.e., search for
its solutions) in the case of extra variable occurrences in P . In the matching algorithm
presented in table 2 we don't consider neither occurrence of extra variables in the built-
in condition nor recursive verication of joinability of standard conditions. The matching
algorithm answers the sole question of existence of potential redices for an extended term
u. This answer partially the diÆculty question of applicability of a conditional rewrite rule,
that is a more specic problem to be considered in the context of conditional rewriting
theory. Observe that this algorithm can be used for the case of the (basic) theory of the
Presburger arithmetic.
The algorithm in table 2 doesn't compute eectively a matching substitution. Observe
that the question T
0
j= 9
~
Y 8
~
X((P ^ Q ^ match(l
0
; uj

)))? is equivalent to the question:
exists there  such that T
=
0
j= P ^ l = uj

? Consequently, if one could answer eectively
the rst question, that means to present specic solutions for all variables
~
Y , these can be
propagated to the bindings of 
00
and 
0
obtaining a matching substitution .
A universal-existential formula is one of the form
8x
1
: : :8x
n
9y
1
: : : 9y
m
P
where P is quantier-free. To guarantee decidability of the problem of search of redices at
least universal-existential formulae of the basic theory should be decidable. In fact, relating
to the notation of the algorithm again, T
0
j= 9
~
Y 8
~
X((P ^Q^match(l
0
; uj

))) holds exactly
when its negation
8
~
Y 9
~
X:((P ^Q ^match(l
0
; uj

)))
is not T
0
-valid. The last formula is universal-existential. One can conclude that if the
class of universal-existential formulae of the basic theory T
0
is decidable then our algorithm
decide whether or not a left-side of a rule matches some subterm of an extended term u,
validating simultaneously its built-in condition. Additionally, if decision of the universal-
existential formulae of T
0
can be done eectively, that means giving specic solutions, then
the matching substitution can be presented explicitly.
Denition 4.2 Let T (F ;V) be a term algebra over a basic theory T
0
. A constrained T
0
-
matching problem in T (F ;V) is the problem of deciding whether for two (extended) terms
s; t 2 T (F ;V) and a basic predicate P over T
0
there exists a substitution  such that T
=
0
j=
P ^ s = t.
In the general setting of T
0
-matching a simple modication of the previous argumentation
conform a proof of the following
Lemma 4.3 Let T (F ;V) be a term algebra over a basic theory T
0
. If the class of universal-
existential formulae of T
0
is decidable then constrained T
0
-matching problems are decidable
too.
Proof . Let s; t 2 T (F ;V) and P be a basic predicate over T
0
. To decide if there exists
 such that T
=
0
j= P ^ s = t, apply a unique iteration of the main \FOR" loop of the
algorithm for the terms l := s and the root position of t ( := " and u := t). Following the
notation of the algorithm, if the syntactic matching succeds the problem reduces to decide
if T
0
j= 9
~
Y 8
~
X((P ^Q ^ match(l
0
; tj
"
))), that can be decided because of the assumption of
decidability of the class of universal-existential formulae of T
0
. ut
The algorithm can be straightforwardly modied by introducing new variables for the
maximal basic subterms of uj

, as it is done in the unication algorithm of the previous
section, and by considering existential quantication for both sets of variables
~
X and
~
Y in
order to obtain a unication algorithm modulo general basic theories T
0
. This gives rise to
a procedure that decides constrained T
0
-unication when universal-existential formulae of
T
0
are decidable too. This unication algorithm is essential when deciding simple rewrite
properties such as joinability as well as when implementing more sophisticated decision
techniques based on rewriting such as narrowing.
Denition 4.4 Let T (F ;V) be a term algebra over a basic theory T
0
. A constrained T
0
-
unication problem in T (F ;V) is the problem of deciding whether for two (extended) terms
s; t 2 T (F ;V) and a basic predicate P over T
0
there exists a substitution  such that T
=
0
j=
P ^ s = t.
Lemma 4.5 Let T (F ;V) be a term algebra over a basic theory T
0
. If the class of universal-
existential formulae of T
0
is decidable then constrained T
0
-unication problems are decidable
too.
Both lemmata apply for the Presburger arithmetic since the whole theory of PA is
decidable. The corresponding constrained PA-unication algorithm involves nally what
is interesting about Presburger arithmetic: the treatment of inequalities. Of course, for
this important theory one can always explicitly compute a substitution . In fact, Pres-
burger's and Cooper's (and Shostak's) decision algorithms for PA (see [Pre29] and [Coo72]
(and [Sho77]), respectively) search for explicit solutions of existentially quantied formulae
(essentially by the method of elimination of quantiers). For theories decided by model
theoretical methods, such as DNO (totally and densely orders), no explicit solutions are
exposed (see Rabin's chapter on decidable theories in [Bar77]).
In the context of the class of rewriting systems mentioned in this section eective compu-
tation of the matching substitution  can also be guaranteed giving syntactical restrictions
on the conditional rewrite rules. One can, for example, restrict left-hand sides of the condi-
tions of the rules in order to contain only basic subterms which are either basic ground terms
or basic variables. Under this restriction the search of redices is eectively computable and
only decidability of the universal part of the basic theory is required.
5 Conclusion
We showed that direct application of Shostak's semi-decision algorithm for PA enlarged
with non-interpreted function symbols is not appropriate to eectively solve PA-unication
problems. Nutt's unication algorithms for both unication with constants and elementary
unication in monoidal theories result appropriate for resolving (and characterize) PA-
unication problems with and without constants, respectively. In addition, we presented a
complete algorithm for solving general unication problems in theories specied modularly
over arithmetic parameters which have the syntactic restriction that they admit only ex-
tended symbols of a sort dierent from the arithmetic one and new constant symbols that
only can be of the arithmetic sort. Our algorithm reduces the problem of general uni-
cation to an initial application of syntactic unication and a subsequent resolution of an
(in)homogeneous system of linear equations in the ring Z. To make eective deduction in
our restricted class of modularly specied theories, decidability of universal-existential for-
mulas of T
0
is not enough. Of course, decidability of unication does not imply that one can
eectively compute complete sets of uniers. One needs eective decision algorithms which
compute or at least characterize all solutions [BS94]. For parameter theories, such as PA,
with decision algorithms based on the quantier elimination method, at least one solution
can be calculated. It remains open the question of how to solve general unication modulo
arithmetic theories without the syntactic restrictions we suppose here.
An interesting extension of our results to be developed is related with the theory of
PA enlarged with rational numbers. Decidability of that theory was proved in [HI94] and
improved decision algorithms have been showed adequate for the interpretation of program-
ming logical languages as BQL and SAMPL [ITH]. These languages cover the linear subset
of Igarashi's v acts, that allow for a nice mathematical representation of logical programs
without the main restrictions of languages like PROLOG: grammatical limitation to clausal
forms and use of non standard notions of negation. Since decision algorithms for that the-
ory are based on the impracticable Cooper's method [Coo72], the rst step to be done is to
realize a practical (semi)decision method, perhaps based on the Shostak's one, that makes
the interpreter of these languages useful in the practice.
References
[AR93] M. Ayala-Rincon. Expressiveness of Conditional Equational Systems with Built-
in Predicates. PhD thesis, Universitat Kaiserslautern, Kaiserslautern (Germany),
December 1993.
[AR00] M. Ayala-Rincon. Church-Rosser Property for Conditional Rewriting Systems
with Built-in Predicates as Premises. In D. M. Gabbay and M. de Rijke, edi-
tors, Frontiers of Combining Systems 2, Studies on Logic and Computation, 7,
chapter 2, pages 17{38. Research Studies Press/Wiley, 2000.
[ARG97] M. Ayala-Rincon and L. M. R. Gadelha. Some Applications of (Semi-)Decision
Algorithms for Presburger Arithmetic in Automated Deduction based on Rewrit-
ing Techniques. La Revista de La Sociedad Chilena de Ciencia de la Computacion,
2(1):14{23, 1997.
[Bar77] J. Barwise, editor. Handbook of Mathematical Logic, volume 90 of Studies in
Logic and the foundations of Mathematics. North-Holland, 1977.
[BN96] F. Baader and W. Nutt. Combination Problems for Commutative/Monoidal The-
ories or How Algebra Can Help in Equational Unication. Journal of Applicable
Algebra in Engineering, Communication and Computing, 7(4):309{337, 1996.
[BS94] F. Baader and J. H. Siekmann. Unication Theory. In D. M. Gabbay, C. J.
Hogger, and J. A. Robinson, editors, Handbook of Logic in Articial Intelligence
and Logic Programming, pages 41{125. Oxford University Press, 1994.
[BS96] F. Baader and K. U. Schulz. Unication in the Union of Disjoint Equational
Theories: Combining Decision Procedures. Journal of Symbolic Computation,
21:211{243, 1996.
[BS99] F. Baader and W. Snyder. Unication Theory. In A. Robinson and A. Voronkov,
editors, Handbook of Automated Reasoning. Elsevier Science Publishers, 1999.
[Coo72] D. C. Cooper. Theorem Proving in Arithmetic without Multiplication. Machine
Intelligence, 7:91{99, 1972.
[dAAR98] I. E. T. de Araujo and M. Ayala-Rincon. An Algorithm for General Unication
Modulo Presburger Arithmetic. In I Brazilian Workshop on Formal Methods,
Porto Alegre, Brazil, pages 146{151, October 1998.
[DJ90] N. Dershowitz and J.-P. Jouannaud. Rewrite Systems. In J. van Leeuwen, editor,
Handbook of Theoretical Computer Science, volume 2, chapter 6, pages 244{320.
Elsevier Science Publishers B. V. (North-Holland), 1990.
[HI94] C. Hosono and Y. Ikeda. A Formal Derivation of the Theory SA. Theoretical
Computer Science, 127:1{23, 1994.
[ITH] Y. Ikeda, K. Tomita, and C. Hosono. A Programming Language SAMPL and its
Interpreter. Unpublished document.
[KS96] D. Kapur and M. Subramaniam. New Uses of Linear Arithmetic in Automated
Theorem Proving by Induction. Journal of Automated Reasoning, 16(1/2), 1996.
[Nut92] W. Nutt. Unication in Monoidal Theories is Solving Linear Equations
over Semirings. Research Report RR-92-01, Deutsche Forschungszentrum
fur Kunstliche Intelligenz, DFKI GmbH, Stuhlsatzenhausweg 3, D-66123
Saarbrucken, Germany, 1992.
[Pre29] M. Presburger.

Uber die Vollstandigkeit eines gewissen Systems der Arithmetik
ganzer Zahlen, in welchem die Addition als einzige Operation hervortritt. In
1. Kongres matematykow krajow slowianskich, Warsaw, pages 92{101, 1929. In
German.
[Sho77] R. E. Shostak. On the SUP-INF Method for Proving Presburger Formulas. Jour-
nal of the Association for Computing Machinery, 24(4):529{543, October 1977.
[Sho79] R. E. Shostak. A Practical Decision Procedure for Arithmetic with Function
Symbols. Journal of the Association for Computing Machinery, 26(2):351{360,
April 1979.
Table 2: T
0
-matching Algorithm for General Theories
INPUT: R a conditional rewriting system over T (F ;V) and T
0
and
u 2 T (F ;V) an extended term
OUTPUT:  such that a left-side l of a rule in R matches uj

modulo T
0
COMMENTS: rename variables in rules of R using other variables
than the ones occurring in u
BEGIN
FOR all rules R  l! r if s
1
# t
1
^ : : : ^ s
k
# t
k
^ P in R and
 2 O(u) with sort(uj

) = sort(l) DO
BEGIN FOR
LET  be the maximal set
f
1
; :::; 
n
2 O(l) j sort(lj

i
) 2 S
0
and 8
0
< 
i
, sort(lj

0
) 2 S n S
0
g
LET l
0
:= l[
1
 x
1
]:::[
n
 x
n
], where x
i
, i = 1; : : : ; n are
new variables and sort(x
i
) = sort(lj

i
)
LET Q be the conjunction of equalities x
i
= lj

i
, i = 1; : : : ; n
Compute the match  from l
0
to uj

applying any syntactic matching algorithm
IF  is dened THEN
BEGIN IF
Decompose  = 
0
[ 
00
, where

0
consist of the bindings for variables of sort in S n S
0
and

00
of the bindings for variables of sort in S
0
LET 
00
= fx
1
=v
1
; : : : ; x
n
=v
n
g
LET match(l
0
; uj

) be the conjunction of equalities x
i
= v
i
, i = 1; : : : ; n
/* Observe that all v
j
s are maximal basic subterms of uj

*/
LET
~
Y be the union of all variables in lj

i
and variables x
i
, i = 1; : : : ; n
LET
~
X be the union of all variables in v
i
, i = 1; : : : ; n
Decide whether T
0
j= 9
~
Y 8
~
X((P ^Q ^ match(l
0
; uj

)))
IF T
0
j= 9
~
Y 8
~
X((P ^Q ^ match(l
0
; uj

))) THEN
PRINT \u could be reduced at position  applying rule R" and STOP
END IF
END FOR
PRINT \u doesn't reduce"
END
