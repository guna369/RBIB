Complexity of Cayley Distance and other General Metrics on Permutation Groups
1Thaynara Arielly de Lima and 1,2Mauricio Ayala-Rinco´n
Grupo de Teoria da Computac¸˜ao, Departamentos de 1Matema´tica e 2Ciˆencia da Computac¸˜ao Universidade de Bras´ılia, Bras´ılia D.F., Brazil {thay@mat,ayala@}unb.br
Abstract. Permutation groups arise as important structures in group theory because many algebraic properties about them are well-known, which makes modelling natural phenomena by permutations of practical interest. This paper reviews the complexity of some problems involving permutation groups. Usability of the involved algebraic notions is illustrated by problems such as genome rearragement by reversals for which it is well-known that for the case of unsigned and signed sorting by reversals the time complexity is, respectively, N P-hard and P. Reversal distance is a particular metric and in this work more general metrics on permutation groups are considered emphasizing on the Cayley distance. In particular, we point out an error in one of the polynomial reductions applied in Pinch’s approach atempting to proof that the subgroup distance problem for Cayley distance is N P-complete and following his approach we present a simpliﬁed and correct proof of this fact.
1 Introduction
Biological evolution is given by the modiﬁcations that occur in genes of living organisms. If these modiﬁcations are passed to future generations by genetic material, they are evolutive changes. In this context, investigations arise, among others, about the history of evolution of a specie or evolution from an organism to another. The genome rearrangement problem can be conceived as the obtention of adequate tools for comparing sequences of genes in molecular biology.
Genome rearrangements are mutations that only change the genes order, without modifying or destroying them. Several kinds of transformations can modify the genes order. Among them, one could mention reversals, transpositions and block interchange. Two or more kinds of transformations could occur simultaneously. The number of genome rearrangements necessary to obtain a genome from another one can be used as a distance measure between the two given genomes.
Given a set of admisible operations, the general genome rearrangement problem consists in ﬁnding the minimum number of operations to transform a genome into another one.
The problem is modeled as follows. The order of the genes of an organism is characterized as a numeric sequence, where each element of the sequence represents a particular gene. If one knows the orientation of the genes, it can be modelled according to this orientation: if the gene occurs from right to left it is represented by a negative element in the numeric sequence. A positive element is associated otherwise.
Initially, this works reviews the time complexities of the problems of sorting by unsigned and signed reversals following an approach that is based on the representation of permutations by permutation cycles.
The reversal distance is a very particular metric on the symmetric groups and other relevant metrics such as the Cayley and Hamming distances are of interest. Then, in this more general context is presented the main contribution of this work that is a correct proof of the fact that the Subgroup Distance Problem is N P-complete. The proof follows Pinch’s approach that is based on a sequence of polynomial reductions, from which the ﬁrst one, that is a reduction from 3SAT to the problem of ﬁnding maximal cycle decomposition routings in polarised switching circuits, is corrected and simpliﬁed.
2 Complexity of Sorting by Reversals
Let X be a nonempty ﬁnite set and SX := {α | bijection from X → X}. It is well-known that SX provided of the composition operation of functions is a group. This is the permutation group of the set X. If X = {1, . . . , n} the group is called symmetric group and denoted by Sn.

A permutation α ∈ Sn is an r-cycle if there exist diﬀerent elements a1, a2, . . . ar ∈ {1, 2, . . . , n} such that α(ai) = ai+1, 1 ≤ i ≤ r − 1, α(ar) = a1 and α(j) = j, ∀j ∈ {1, 2, . . . , n} \ {a1, . . . , ar}; this r-cycle is denoted by (a1 a2 . . . ar). The number r is called the cycle length.
Consider the genes order in an organism represented by the string π = π1 π2 . . . πn , πi ∈ {1, 2, . . . , n}, 1 ≤ i, j ≤ n where πi = πj, ∀i = j.
Let π = π1 π2 . . . πn be a string. By π(j) it is denoted πj. The permutation in Sn associated to the string π maps πj to j, for all 1 ≤ j ≤ n. For example, we associate the permutation (2 1 5 4 3) ∈ S6 to the string 2 3 4 5 1 6.
Now, let σ be a permutation in Sn. To this permutation it is associated a string of n symbols, denoted as σstr, such that σstr(i) := j, whenever σ(j) = i and the symbols of the string are all diﬀerent and belong to the set {1, 2, . . . , n}.
In this way, given a permutation π , we can associate a string πstr and vice-versa. Thus, it is possible to build an isomorphism between the set S of all strings of length n of diﬀerent symbols of the set {1, 2, . . . , n} and the symmetric group Sn.
A reversal is a permutation ρ ∈ Sn presented by permutation cycles of the form

(i

j)(i + 1

j

−

1)

.

.

.

(i

+

⌊j

− 2

i⌋

+

1

i

+

⌈

j

− 2

i

⌉

+

1),

for

1≤i<j

≤n

The genome rearrangement problem of sorting by reversals (SBR) can be formulated as follows: given two permutations π and σ in Sn, ﬁnd the minimum number of reversals that transform π into σ.
The problem above is equivalent to MIN-SBR, deﬁned as follows: given a permutation π, ﬁnd the minimum number of reversals ρ1, ρ2, . . . , ρt such that πρ1ρ2 . . . ρt = id, where id denotes the identity permutation. This number is called reversal distance, denoted as d(π).
An important tool used in the study of MIN-SBR is the breakpoint graph of a permutation π. Let i ∼ j whenever | i − j |= 1 and i ∼ j otherwise. Let π ∈ Sn be a permutation. Extend πstr by adding π0 = 0 and πn+1 = n + 1. A pair of consecutive elements πi and πi+1, 0 ≤ i ≤ n of πstr is called an adjacency if πi ∼ πi+1 and a breakpoint if πi ∼ πi+1.
Deﬁne a bi-colored graph G(π) with n + 2 vertices such that each vertice i has the label πstr(i) if 1 ≤ i ≤ n + 1. The edges set is divided in breakpoint edges (black edges) and desired edges (gray edges). We join vertices i and i + 1 by a black edge if, and only if, the i and i + 1 labels are a breakpoint. Furthermore, there is a gray edge between the vertices i and j if, and only if, i ∼ j, and the i and j labels are adjacency. This graph is called breakpoint graph of the permutation π (See Fig. 1 (i)).
Let us denote b(π) the number of breakpoints of a permutation π. In a breakpoint graph G(π) of a permutation π, a cycle is called alternating cycle if the colors of the edges alternate. c(π) denotes the maximum number of edge-disjoint alternating cycles. In a breakpoint graph of a permutation π, G(π), assign each black edge (i, i + 1), with labels πi and πi+1 respectively, an orientation from i to i + 1. An alternating cycle of G(π) is called directed with respect to π if it is possible to walk along the whole cycle traversing each black edge according of its orientation and undirected otherwise. In the Figure 1 (ii), the cycle with labels 3, 1, 2, 4 is directed with respect to π, while the cycle with labels 0, 1, 5, 6, 4, 3 is undirected with respect to π. A characterization of reversal distance by breakpoints and undirected alternating cycles can be gives [BP96,HP95b,HP95a]. Consider a permutation π, its breakpoint graph G(π) and a maximum decomposition of G(π) into c(π) alternating cycles. If every cycle in this decomposition is undirected with respect to π, then d(π) = b(π) − c(π) or d(π) = b(π) − c(π) + 1. This characterization point out the interest on the maximum alternating cycle decomposition problem (MAX-ACD ) that consists in ﬁnding a maximum number of alternating cycles in a decomposition of the breakpoint graph of a permutation π. The rearragement problem by reversal was proved N P-hard by Caprara [Cap97]. Caprara’s proof is based on three polynomial reductions:

1. 3SAT reduces polynomially to MAX-ECD ; where, 3SAT is the language of all satisfatiable conjuntive normal form formula in wich all clauses contain at most 3 literals and MAX-ECD problem consists in ﬁnding a maximum-cardinality cycle decomposition of an Eulerian graph ([Hol81]).
2. MAX-EDC reduces polynomially to MAX-ACD ; 3. MAX-ACD reduces polynomial to MIN-SBR.

2

Given a part of genoma, if we know the orientation of the genes, we can associate a signed sequence
to the genoma. This is a model of the genome rearragement problem for signed permutations. But, given a signed permutation π¯ of n elements, we can transform π¯ into π′ ∈ S2n such that π′ is
a unsigned permutation. This transformation is done by replacing the elements +i by 2i − 1, 2i and the elements −i by 2i, 2i − 1. For example, the signed identity permutation id+ = +1 + 2 . . . + n is mapped into id = 1 2 . . . 2n.
If we consider the transformation of a signed permutation π¯ into a unsigned permutation π′, we have the eﬀect that a reversal on π¯ can be mimicked by a revesal on π′. Furthemore, if we apply reversals that
eliminate a maximum number of breakpoints in a signed permutation, we can mimicked this reversals to
eliminate the maximum number of breakpoints in the associated unsigned permutation. Thus the problem
of sorting by reversals for signed permutations can be solved by analysis of unsigned permutations.
The transformation above allows us to consider the concepts of adjacency, breakpoints and breakpoint
graph for signed permutations. For example, given π¯str = +1 + 4 + 3 + 2, we can transform into πs′ tr = 1 2 7 8 5 6 3 4. The breakpoint graph of this permutation as presented in the Figure 1 (iii).

(7) 7

0 (0)

(6) 6 (5) 4

1 (1) 5 (2)

(4) 3 (i)

2 (3)

6 4 2

0 3 1

5 (ii)

9
4 3

0
1 2

6 5

7 8 (iii)

Fig. 1. (i) Breakpoint graph of permutation π = (2345), (ii) Directed and undirected cycles in a breakpoint graph of π = (31245), (iii) Breakpoint graph of a permutation π′ = (37)(48)

Each node of a breakpoint graph has degree 0 or 2. Thus, the cycle decomposition in a breakpoint graph of a signed permutation is unique. Then, the MAX-ACD problem for signed permutation is polynomial. The procedure presented by Caprara [Cap97] to obtain breakpoint graphs such that every alternanting cycle is undirected with respect a some permutation can be adapted for signed permutations. Just apply the transformation from signed permutations to unsigned permutations and apply the procedure. Hannenhali and Pevzner [HP95b] proved that d(π¯) = b(π¯) − c(π¯) if every cycle of G(π¯) is undirected with respect to π¯. Then, it is possible to compute the reversal distance of a signed permutation in polynomial time.
3 Distance of a permutation and Subgroup distance problem
Among the variety of distance problems on permutation groups, the subgroup distance problem is of great interest. The reversal distance is a particular metric on Sn, but other metrics can be used.
A metric on the symmetric group Sn is a function d : Sn × Sn → R+ that, for every π, σ and ϕ ∈ Sn, satisﬁes:
i) d(π, σ) ≥ 0; ii) d(π, σ) = 0 if, and only if, π = σ; iii) d(π, ϕ) ≤ d(π, σ) + d(σ, ϕ).
A right-invariant metric d on Sn is a metric satisfying d(π, σ) = d(πϕ, σϕ), for every π, σ, ϕ ∈ Sn. Some metrics on Sn are well-known, for instance the Hamming distance, lp distance, l∞ distance and Cayley distance [AJ08], among others. The Subgroup Distance Problem (SDP ) with respect to a metric d on Sn is deﬁned as: given a subgroup H ≤ Sn, a permutation π ∈ Sn and a number k ∈ N∗, determine whether d(π, H) := minσ∈H d(π, σ) ≤ k. Note that, MIN-SBR is an instance of SDP, just take H = id and d as the reversal distance. For the metrics mentioned above, SDP is N P-complete [AJ08]. In the remainder of this section we will follow Pinch’s approach used to state this fact for the Cayley distance. We will present a corret and detailed proof of this fact pointed out the problems in Pinch’s work [Pin07].
3

Given two permutations π and σ ∈ Sn, the Cayley distance is the minimum number of transpositions (cycles of lenght two) transforming π into σ.
Let S ⊂ Sn be a set of elements of the form γj = (x1j yj1) . . . (xrjj yjrj ), where all xij and yji are diﬀerent. We call S Involutions with Disjoint Support (IDS). For example, if we consider the symmetric group S6, S1 = {(1 2), (3 4), (5 6)} and S2 = {(1 3), (2 5), (4 6)} are IDS’s of S6. The width of an IDS is deﬁned as the maximum number of 2-cycles rj in the elements γj. The SDP with the subgroup H := γj generated by the elements γj of an IDS of width w is called the IDSw-Subgroup-Distance.
Additional deﬁnitions are necessary. A switching circuit is a directed graph G such that for all v ∈ V the cardinality of input and output edges coincide; for each v ∈ V , its valency, denoted as ∂(v), is the
number of in edges (which equals the number of out edges) and, where each in and out edge has a diﬀerent label in {1, . . . , ∂(v)}. The valency of G is the maximum among the valencies of its vertices. For any edge (u, v) ∈ E, its output label, as an in edge, and its input label, as an out edge are not related. A routing ρ for a switching circuit is a choise of a permutation ρ(v) ∈ S∂(v), for each vertex v ∈ V . For an example see Fig. 2. Note that, there is a correspondence between routings of a switching circuit G and
decompositions of the edge set into directed cycles of G.

2 1
12
12 12
21 12

12 21
2 1 21
12 1
2

2u1 12
12 v 12
2 z1 12

1w 2
21
2 1x 21
2 1y
1 2

Fig. 2. Figure to the left shows a decomposition in two directed cycles with routing ρ = id for all vertices; Figure to the right shows a decomposition in three cycles given by the routing ρ(u) = ρ(w) = ρ(z) = (1 2) and ρ(v) = ρ(x) = ρ(y) = id
A polarisation T for a switching circuit G(V, E) is an equivalence relation over the set of vertices V , such that vertices belonging to the same class have the same valency. The pair (G, T ) is called a polarised switching circuit. Note that vertices having the same valency are not necessarily in the same class. A routing ρ is said to respect the polarisation T if ρ(x) = ρ(y), whenever vertices x and y belong to the same class. Routings in the Fig. 2 respect polarisation with a unique equivalence class (Fig. to the left) and two equivalence classes (Fig. to the right).
Note that, for distincts labels and routings, the decomposition into cycles changes. We deﬁne the Polarised-Switching-Circuit-Routing (PSCR) as the problem stated as: given a polarised switching circuit (G, T ) and a positive integer k, determine the existence of a routing which respects T and has at least k cycles in the associated decomposition in cycles. The width of a polarisation T is deﬁned as the maximum number of vertices in a class of T . We call Widthw-Valencyn-Routing the PSCR with the width of T restricted to be at most w and ∂(v) of each vertex v restricted to be at most n. The proof that SDP is N P-complete is made in two steps following [Pin07] approach, but correcting and improving the ﬁrst step, for which the original proposed width was 6:
1. Prove that Width4-Valency2-Routing is N P-complete; 2. Show the existence of an equivalence between Widthw-Valency2-Routing and IDSw-Subgroup-Distance.
Applying both these results one obtains that IDS4-Subgroup-Distance is N P-complete from which one imediately concludes that SDP is N P-complete as well. In the following subsections proofs of these results are presented.
4

3.1 Width4-Valency2-Routing is N P-complete
The ﬁrst step in Pinch’s paper is in fact a temptative to prove that 3SAT polinomialy reduces to Width6Valency2-Routing, but one of the circuits presented is incorrect because it does not satify the necessary properties as presented in Appendix A. The current proof is in fact an improvement because in the ﬁrst step we reduce the width of the routing problem.
A polarised switching circuit (G, T ) is Boolean if every vertex has valency at most two. To each class C of the polarisation T a Boolean variable a(C) is associated, where a(C) = 0 if, and only if, the permutation ρ(v) = id ∈ S2 and a(C) = 1, if, and only if, ρ(v) = (1 2) ∈ S2, for all v ∈ C. There is a straightforward correspondence between routing and designation of boolean values to the vertices of (G, T ). For a negated variable a¯ we exchange the input labels 1 and 2 in all the associated vertices.
The reduction in the ﬁrst step of the proof is based on a representation of unary, binary and tertiary clauses in a formula, instance of 3SAT, by corresponding switching circuits that have an speciﬁc number of cycles exactly when the clauses hold. For Boolean variables a, b and c, we consider the switching circuits I(a), E(a, b), F (a, b) and A(a, b, c) corresponding to unary clauses, equality between variables, binary and tertiary clauses, respectively. See Figs. 3 and 4.

12 a
12

1 a

1

22

2 2
b
11

2 a
1

2 11

a

2 2

2 1

1 1

2

bb

2 1

21

Fig. 3. Switching circuits I(a), E(a, b) and F (a, b) for unary clauses, equality between variables and binary clauses

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

1 b

1

22

1 2
c
21

_ ( E(b,c) )

Fig. 4. Switching circuit A(a, b, c) for tertiary clauses

Proposition 1 (Properties of I, E, F and A).
1. the number of cycles for I(a) is 2 if a = 1 and 1 otherwise; 2. the number of cycles for E(a, b) is 2 if a = b and 1 otherwise; 3. the number of cycles for F (a, b) is 1 if a = b = 0 and 3 otherwise; 4. the number of cycles for A(a, b, c) is 2 if a = b = c = 0, 4 otherwise.
Proof: We will demonstrate the item 4, that uses item 2. All other items are proved similarly by case analysis.
Notice that, according to the item 2, the circuit E(b, c) has two cycles whenever b = c and only one otherwise, as depicted in Fig. 5. The right part of the circuit A(a, b, c) is exactly E(b, c¯) and consequently this sub circuit will have two cycles if b = c and one if b = c. In order to conclude the proof of item 4, we will proof the following:
5

– the left part of A(a, b, c) has one circuit if a = b = c = 0. Observe this circuit in Fig. 6. Thus, A(a, b, c) has two circuits in this case.
– the left part of A(a, b, c) has three circuits if a = b = c or a = b = c = 1. Observe this case in Fig. 7. Thus A(a, b, c) has four circuits in this case.
– the left part of A(a, b, c) has two circuits if b = c. Observe this case in Fig. 8. Thus A(a, b, c) will have four circuits.

1 a

1

22

2 2
b
11

a=b=0

1 a

1

22

2 2
b
11

1 a

1

22

2 2
b
11

a = 0, b = 1

a = 1, b = 0

Fig. 5. Cycles of circuit E(a, b) for a = b and a = b

1 a

1

22

2 2
b
11

a=b=1

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

Fig. 6. Cycle of left circuit of A(a, b, c) for a = b = c = 0

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

a = 0, b = c = 1

a = 1, b = c = 0

a=b=c=1

Fig. 7. Cycles of left circuit of A(a, b, c) for a = b = c and a = b = c = 1

Theorem 1. There is a polynomial reduction from 3-SAT to Width4-Valency2-Routing.
Proof : Let ϕ an instance of 3-SAT that is a Boolean formula over variables x1, . . . , xn, that is a conjunction of k clauses each of which is a disjunction of at most three variables or their negations.
Firstly, one tranforms ϕ into an equivalent formula ϕ′ in this way: for all xi, replace its jth occurence in ϕ by a new variable yij. For all xi include the conjuntion of clauses (yj1 ≡ yj2) ∧ . . . ∧ (yj(ri−1) ≡ yjri )
6

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

a = 0, b = 0, c = 1

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

a = 0, b = 1, c = 0

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

2 a
1

2 11

a

2 2

2 1

1 1

2

bc

2 1

21

a = 1, b = 0, c = 1

a = 1, b = 1, c = 0

Fig. 8. Cycles of left circuit of A(a, b, c) for b = c

where the variable xj occurs ri times in ϕ. For example, if ϕ = (x1 ∨ x¯2 ∨ x3) ∧ (x2 ∨ x¯3 ∨ x4) ∧ (x¯1 ∨ x3) then ϕ′ = (y11 ∨ y¯21 ∨ y31) ∧ (y22 ∨ y¯32 ∨ y41) ∧ (y¯12 ∨ y33) ∧ (y11 ≡ y12) ∧ (y21 ≡ y22) ∧ (y31 ≡ y32) ∧ (y32 ≡ y33).
Note that, in fact, ϕ′ is equivalent to ϕ. Thus, we have the same numbers of satisfying designations. Note also that each variable occurs at most three times in ϕ′, and exactly once in a disjunction. Therefore, the lenght of ϕ′ is linear in the lenght of ϕ.
Secondly, one will construct a polarised switching circuit Ψ for the formula ϕ′ as the forest consisting of the following circuits:
– for each tertiary clause of the form (x ∨ y ∨ z) take a circuit A(x, y, z); – for each binary clause of the form (x ∨ y) take a circuit F (x, y); – for each unary clause of the form (x) take a circuit I(x) and; – for each clause of the form (x ≡ y) take a circuit E(x, y).
The classes in the polarised swithching circuit Ψ are given as the sets of vertices labelled by the same variable of ϕ′. Then, this polarisation will have exactly n classes, where n is the number of variables in ϕ′. Observe that each class in this polarisation is involved in at most a circuit of the form A, F or I and, in addition, in at most two circuits E. Therefore each class in the polarised switching circuit Ψ has at most 4 vertices. Thus the size of Ψ is at most 4n, that is, the size of Ψ is linear in the lenght of the formula ϕ′.
Thirdly, denote as a, f, i and e the number of circuits of types A, F , I and E in Ψ , respectively. Consider the number M = 4a+3f +2i+2e. And ﬁnally, conclude observing that according to Proposition 1, there exists a routing for the polarised circuit Ψ which gives a decomposition into M cycles if, and only if, there exists an assignment of Boolean values for the variables in ϕ′ that satisﬁes ϕ′. Namely, notice that a satisfying assignment for ϕ′ corresponds to a routing in Ψ which decomposes into M cycles and vice-versa.
3.2 Widthw-Valency2-Routing problem polynomialy reduces to IDSw-Subgroup-Distance
This proof follows Pinch’s approach.
Theorem 2 ([Pin07]). There is a polynomial equivalence between the Widthw-Valency2-Routing and IDSw-Subgroup-Distance problems.
7

Proof: On the one side, consider an instance of Widthw-Valency2-Routing, that is, a polarised switching circuit (G(V, E), T ), where each equivalence class has width at most w. Let n be the number of edges in G and associate a diﬀerent number in{1, . . . , n} to each edge. Construct a permutation π in this way: for each vertex v ∈ V and each edge e into v deﬁne π(e) as the edge f out of v, such that the labels of e as an input edge of v and of f as an output edge of v are equal. Construct an instance of the IDS problem from G in this way: for each equivalence class in T , Ci = {vji | j = 1, . . . , rj }, let γj be a generator given as the product of transpositions (fji gji ), where fji and gji are the edges out the vertex vji . Notice that the number of transpositions in γj is at most w, since each equivalence class in T has at most w vertices. Observe that there is a correspondence between routings in the polarised circuit and a cycle decomposition of G(V, E) and the cycles in a permutation πη, where η ∈ H = {γj} .
On the other side, consider an instance of IDSw-Subgroup-Distance, that is an element π ∈ Sn and an IDS on a set of t generators {γj}, with γj = (x1j yj1) . . . (xrjj yjrj ), all xij, yji distinct and all their rj ≤ w. A polarised switching circuit (G(V, E), T ) is built from this graph as described below. V := {P1, . . . , Pn} ∪ {Q1,1, . . . , Qt,rt}. For vertices of the former type ∂(Pk) = 1 and of the latter type ∂(Qj,i) = 2. For each 1 ≤ j ≤ t and 1 ≤ i ≤ rj, edges from Pxij and from Pyji to Qj,i are built whose input labels are 1 and 2, respectively; edges from Qj,i to Pπ(xij) and to Pπ(yji) with respective output labels 1 and 2 are built. The polarisation T of G is given by the classes Cj := {Qj,i | 1 ≤ i ≤ rj }.
Also in this case there is a correspondence between routings ρ of the polarised switching circuit and permutations of the form πη, where η ∈ H := {γj}1≤j≤t . In this correspondence the number of cycles in the routing ρ is equal to the number of cycles in the premutation πη.
Based on the observation that a transposition can split a cycle permutation at most into two cycles, as explained below, one can conclude that π is within distance d of the group H if and only if there is a routing ρ with at least n − d cycles.
A cycle of lenght k > 1 in a permutation can be factored as minimum product of k − 1 transpositions. The proof is by induction in the lenght k of the cycle. If k = 2 then π = (π1π2) that is a transposition. Suppose that the result holds for cycles of lenght k > 1 and consider a cycle π = (π1 . . . πk πk+1). Note that (π1 . . . πk πk+1) = (π1 . . . πk)(π1 πk+1). By induction hypothesis, (π1 . . . πk) can be factored as a mininum product of k−1 transpositions, thus π can be factored as a minimum product of k transpositions.
Since a transposition σ = σ−1, the minimum number of transpositions necessary to transform a permutation π into id can be obtained factoring each cycle of π as transpositions. We can interpret graphically in this way. A permutation ρ ∈ Sn can be observed as a product of disjoint cycles [Rot02]. We construct a directed graph G(V, E), where V = {1, . . . , n} and E = {(i, j) | ρ(i) = j}. Let π = (π1 . . . πk), for k > 1, be one of the cycles in ρ. Thus, each connected component of G(V, E) represents a cycle in ρ. The connected component in G associated with π is illustrated in Fig. 9, where the action of the transposition (πj πj+1) is also given. Notice that the action of any transposition of the form (πl πm), where πl and πm belong to the cycle π, split the cycle into two cycles.

π1 πk

π2

π1 πk

π2

π j+1

π j−1

πl

πj

π l+1

π j+1

π j−1 πj

Fig. 9. Cycle in G of the permutation π = (π1 . . . πj . . . πk)

8

4 Conclusion
A proof is presented of the fact that the problem of computing the general distance of a given permutation from a subgroup H of the symmetry group Sn is N P-complete. This proof is based on two timepolynomial reductions: fristly, from 3SAT to Width4-Valency2-Routing and then, from the latter problem to IDS4-Subgroup-Distance. The proof follows the approach originally proposed by Pinch in [Pin07], but after detecting an error in the ﬁrst reduction, that was originally proposed for the problem Width6Valency2-Routing, in this paper it is presented a reduction from 3SAT to the simpler case of Width4Valency2-Routing problems.
The general subgroup distance problem is closely related with distances in other metrics as the one associated with the case of distance by reversion or other transformations of biological interest. We believe that the formal study of these properties from the algebraic point of view will provide a very strong insight in order to deal with open questions such as whether the reversion distance for unsigned permutations, that is known to be N P-hard, is N P-complete.
References
[AJ08] Vikraman Arvind and Pushkar S. Joglekar. Algorithmic problems for metrics on permutation groups. In Viliam Geﬀert, Juhani Karhuma¨ki, Alberto Bertoni, Bart Preneel, Pavol N´avrat, and M´aria Bielikova´, editors, SOFSEM, volume 4910 of Lecture Notes in Computer Science, pages 136–147. Springer, 2008.
[BP96] Vineet Bafna and Pavel A. Pevzner. Genome Rearrangements and Sorting by Reversals. SIAM Journal on Computing, 25(2):272–289, 1996.
[Cap97] Alberto Caprara. Sorting by reversals is diﬃcult. In RECOMB, pages 75–83, 1997. [DST01] Frank K. H. A. Dehne, J¨org-Ru¨diger Sack, and Roberto Tamassia, editors. Algorithms and Data Struc-
tures, 7th International Workshop, WADS 2001, Providence, RI, USA, August 8-10, 2001, Proceedings, volume 2125 of Lecture Notes in Computer Science. Springer, 2001. [Hol81] Ian Holyer. The np-completeness of some edge-partition problems. SIAM J. Comput., 10(4):713–717, 1981. [HP95a] S. Hannenhalli and P. A. Pevzner. Reversals do not cut long strips. In Dehne et al. [DST01]. [HP95b] Sridhar Hannenhalli and Pavel A. Pevzner. Transforming cabbage into turnip: polynomial algorithm for sorting signed permutations by reversals. In STOC, pages 178–189. ACM, 1995. [Pin07] Richard G. E. Pinch. Combinatorics, Probability and Computing, chapter The Distance of a Permutation from a Subgroup of Sn, pages 473–479. Cambridge University Press, 2007. [Rot02] Joseph J. Rotman. Advanced Modern Algebra. Prentice Hall, ﬁrst edition, 2002.
A Details about Pinch’s proof temptative
This appendix can be dropped in a ﬁnal version of this paper. Here is presented only for the beneﬁt of the reviewing process. In Pinch’s proof that 3SAT polinomialy reduces to Width6-Valency2-Routing, it is incorretly stated that the switching circuit F ′(a, b) in Fig. 10 has 2 cycles whenever a = b, 3 if a = b = 1 and 1 if a = b = 0. This switching circuit is given without edge labels and the following proposition stablishes that this is in fact impossible.
ab
ab
Fig. 10. Switching circuit F ′(a, b)
9

Proposition 2. There is no possible labelling for the edges of the switching circuit F ′(a, b) satisfying: the number of cycles in a routing for F ′(a, b) is 2 if a = b, 3 if a = b = 1 and 1 if a = b = 0.
Proof: In ﬁrst place notice that for the routing a = b = 1 if F ′(a, b) admits in fact a decompositions into three cycles, then, necessarily, one, and only one, of the red sub cycles illustrated in Fig. 11 should be in the decomposition. In second place, observe that for each case the other two cycles in the decomposition in three cycles is univocaly determined.

ab

ab

ab

ab

ab

ab

(i) (ii) (iii)
Fig. 11. Possible decompositions in three cycles of F ′(a, b) for the routing a = b = 1

In third place, for each of these three possibilities, by case analysis, one can prove that for the routings a = b and a = b = 0 the decomposition into 2 and 1 cycles, resp., is impossible.
Changing the routing from a = b = 1 to a = b = 0 in each of these cases gives the decomposition in cycles depicted in Fig. 12, from which the cases (i) and (ii), for which this routing gives three cycles, are proved impossible. The sole case that remains to be analysis is the third one.

ab

ab

ab

ab

ab

ab

(i) (ii) (iii)
Fig. 12. Cycle decompositions of F ′(a, b) for the routing a = b = 0

Finaly, one observes that the decomposition in cycles for the routings a = b for the third case gives in both cases a unique cycle.
This concludes the proof.

10

