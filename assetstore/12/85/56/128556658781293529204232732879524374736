Prime Decompositions of Regular Languages
Yo-Sub Han1, Kai Salomaa2, , and Derick Wood3,
1 System Technology Division, Korea Institute of Science and Technology, P.O. Box 131, Cheongryang, Seoul, Korea emmous@kist.re.kr
2 School of Computing, Queen’s University, Kingston, Ontario K7L 3N6, Canada ksalomaa@cs.queensu.ca
3 Department of Computer Science, The Hong Kong University of Science and Technology, Clear Water Bay, Kowloon, Hong Kong, SAR dwood@cs.ust.hk
Abstract. We investigate factorizations of regular languages in terms of prime languages. A language is said to be strongly prime decomposable if any way of factorizing the language yields a prime decomposition in a ﬁnite number of steps. We give a characterization of the strongly prime decomposable regular languages and using the characterization we show that every regular language over a unary alphabet has a prime decomposition. We show that there exist co-context-free languages that do not have prime decompositions.
1 Introduction
A language is said to be prime [12, 14] if it cannot be written as a catenation of two languages neither one of which is the singleton language consisting of the empty word. A prime decomposition of a language is a factorization where all the components are prime languages. The original work on prime decompositions concentrated mainly on ﬁnite languages [12]. Factorizations of preﬁx-free or inﬁxfree regular languages into prime components that in turn are required to be preﬁx-free or inﬁx-free, respectively, are considered in [3, 6]. Decompositions of factorial languages are investigated in [1].
Any ﬁnite language always has a prime decomposition, although it need not be unique [12, 14]. Work on factorizations of ﬁnite languages leads to nontrivial questions concerning commutativity. Recent work in this direction and more references can be found e.g. in [10].
Generally the decomposition of a language can be chosen in very diﬀerent ways and it turns out to be somewhat diﬃcult to ﬁnd languages without any prime decompositions. We give a construction of a nonregular language that provably does not have any prime decomposition.
The author was supported by the Natural Sciences and Engineering Research Council of Canada Grant OGP0147224. The author was supported under the Research Grants Council of Hong Kong Competitive Earmarked Research Grant HKUST6197/01E.
O.H. Ibarra and Z. Dang (Eds.): DLT 2006, LNCS 4036, pp. 145–155, 2006. c Springer-Verlag Berlin Heidelberg 2006

146 Y.-S. Han, K. Salomaa, and D. Wood
We consider also a stronger factorization property that requires that any reﬁnement of a decomposition of the language leads to a prime decomposition in a ﬁnite number of steps. We call such languages strongly prime decomposable. We give necessary and suﬃcient conditions for a regular language to be strongly prime decomposable. The characterization establishes that the property is decidable for regular languages.
Using the characterization of the strongly prime decomposable languages we show that every regular language over a unary alphabet has a prime decomposition. As a by-product of the proof we establish the existence of prime decompositions for context-free languages over arbitrary alphabets where, roughly speaking, the set of “short words” of the corresponding length set is not closed under any multiple of the cycle of the length set.
The main open question remaining is whether all regular languages have prime decompositions.

2 Language Decompositions

Let Σ be a ﬁnite alphabet. A language is any subset of Σ∗. The length of a word w ∈ Σ∗ is |w|. The catenation of languages L1 and L2 over Σ is L1 · L2 = {w ∈ Σ∗ | (∃ui ∈ Li, i = 1, 2) w = u1u2}. For all unexplained notions in language theory we refer the reader e.g. to [9, 16, 17].
We say that a language L has a non-trivial decomposition if we can write L = A · B where A, B = {ε}. In the following, unless otherwise mentioned, by a decomposition or a factorization of a language we always mean a non-trivial
decomposition. A nonempty language L = {ε} is said to be prime if L has no decompositions.
For a given regular language L it is decidable whether or not L has a decomposi-
tion [11, 12], i.e., whether or not L is prime. More generally, the regular language
decomposition problem is decidable for all operations deﬁned by letter-bounded
regular sets of trajectories [5].

Deﬁnition 2.1. [12] A prime decomposition of a language L is a factorization

L = L1 · . . . · Lm,

(1)

where each of the languages Li, i = 1, . . . , m, is prime.

A language, unlike an integer, can have also inﬁnite factorizations, that is, decompositions into an inﬁnite product of nontrivial factors. Here we restrict consideration to decompositions having ﬁnitely many components. Inﬁnite factorizations obviously would involve interesting and diﬀerent types of questions.
A ﬁnite language (distinct from ∅, {ε}) clearly always has a prime decomposition. On the other hand, a prime decomposition need not be unique even for ﬁnite languages [12]. Any preﬁx-free regular language has a unique decomposition in terms of prime languages if it is additionally required that the components are regular and preﬁx-free [3, 7]. Interestingly, the analogous property does not hold

Prime Decompositions of Regular Languages 147

for decompositions of inﬁx-free regular languages [6]. A factorial language is a language that is closed under the subword operation. In [1] it is shown that a factorial language has a unique canonical decomposition, where the components satisfy certain minimality conditions, into indecomposable factorial components.

Example 2.1. Let H ⊆ Σn, n ≥ 1, be a set of words of length n. We show that H∗ has the following prime decomposition

∞
H∗ = ({ε} ∪ H) · ( H2i−1 ∪ {ε})
i=1

(2)

Since the equality obviously holds, it is suﬃcient to verify that the two factors on the right side are prime.
In any decomposition {ε} ∪ H = AB both of the sets A and B must contain ε. Then the equality can hold only if one of A and B contains all words of H and the other set is {ε}, that is, {ε} ∪ H has only trivial decompositions.
In order to see that the second language on the right side of (2) is prime, assume that we can write

∞
H2i−1 ∪ {ε} = AB

(3)

i=1

for some A, B ⊆ Σ∗. Again ε has to be in both A and B. Thus A or B cannot

contain any nonempty words shorter than n and all words of H must be in A

or B. If both A and B contain words of H then AB would have some word of

length 2n. We assume that H ⊆ A, the other possibility being symmetric. Again

all words of H3 must be in A or B, and similarly as above we see that the only

possibility is that H3 ⊆ A since otherwise the catenation of A and B would have

some word of length 4n. By induction it follows that A =

∞ i=1

H 2i−1

∪

{ε}

and

B = {ε}.

It seems that earlier work [12] did not expect that the Kleene-star of languages as in Example 2.1 could have prime decompositions. In fact, we do not know any regular language L such that L provably has no prime decompositions. In Section 4 we show that every regular language over a unary alphabet has a prime decomposition.
Next we show that there exist nonregular languages without any prime decompositions. Let Σ = {a, b}. We deﬁne H0 ⊆ Σ∗ as follows:

H0 = {ai1 bi1 ai2 bi2 · · · aik bik | k ≥ 0, 1 ≤ i1 < i2 < . . . < ik}.

Lemma 2.1. The language H0 does not have any prime decomposition.

Proof. Consider an arbitrary decomposition of H0,

H0 = L1 · . . . · Lm,

(4)

m ≥ 1. For the sake of contradiction assume that (4) is a prime decomposition.

148 Y.-S. Han, K. Salomaa, and D. Wood

By the maximal ab-preﬁx, mab-preﬁx, (respectively, mab-suﬃx) of a word w

we mean the longest preﬁx (respectively, longest suﬃx) of w that is in a∗b∗.

Consider a ﬁxed i ∈ {1, . . . , m}. We claim that if the mab-preﬁx of some word

in Li is of a form

ajbk, j = k, j, k ≥ 0,

(5)

then all words in Li must have the same mab-preﬁx ajbk. This follows from the observation that if Li has two words u1, u2 where the mab-preﬁx ump of u1 is as in (5) and the mab-preﬁx of u2 is distinct from ump, then for any ﬁxed v ∈ L1 · · · Li−1 and w ∈ Li+1 · · · Lm only one of the words vu1w and vu2w can be in H0.
Now if all words in Li have the same mab-preﬁx as in (5) (which is not the empty word since j = k) we get a decomposition for Li by factoring out the common preﬁx.
Since Li is prime, the above means that we need to consider only the case where the mab-preﬁx of all words in Li, i = 1, . . . , m, is of a form ajbj, j ≥ 1. (Note that in this case the mab-preﬁxes need not be identical, e.g., it is possible that Li = {ajbjaj+1bj+1, ajbj, aj+1bj+1, ε}.) With a completely symmetric argument we see that the same property holds for mab-suﬃxes.
By a balanced word we mean a word of the form ajbj, j ≥ 0. From the above we can conclude that for all i ∈ {1, . . . , m},

the mab-preﬁx and the mab-suﬃx of any word in Li is balanced. (6)

Thus all words occurring in Li, 1 ≤ i ≤ m, are of the form

wi = a bk1,i k1,i · · · akr,i bkr,i , 0 < k1,i < . . . < kr,i, r ≥ 0.

(7)

Now

if

we

consider

an

arbitrary

word

wi+1

=

a b · · · a bk1,i+1 k1,i+1

ks,i+1 ks,i+1

∈

Li+1, the equation kr,i < k1,i+1 has to hold since otherwise wiwi+1 cannot occur

as a subword of a word in H0.

Now the equation (4) implies that, for all i = 1, . . . m − 1, there exist integers

Mi and Ni (M1 = 1, Ni = Mi+1 − 1) such that Li consists of exactly all the

words as in (7) where Mi ≤ k1,i and kr,i ≤ Ni, and Lm consists of all words as

in (7) where k1,i > Nm−1.

It follows that (4) is not a prime decomposition since, for example,

Lm = {ε, aNm−1+1bNm−1+1} · A,

where A consists of all words as in (7) where k1,i > Nm−1 + 1. This concludes

the proof.

2

The language H0 used in Lemma 2.1 is not context-free but its complement is context-free. It should be noted that Lemma 2.1 does not require any assumptions concerning the component languages, that is, H0 doesn’t have a prime decomposition even if the components could be non-recursively enumerable languages.

Prime Decompositions of Regular Languages 149

We conclude with the following question.
Open Problem. Does there exist a context-free (or even a regular) language L such that L has no prime decomposition.

3 Strong Prime Decomposition Property

In the previous section we saw (in Example 2.1) that regular languages can have artiﬁcial prime decompositions even if the natural way of decomposing the language does not result in a prime decomposition, i.e., the components could always be factorized further.

Example 3.1. Let L = ε + a2a∗. We note that L = L · L or L = (ε + a2) · L so obviously L has many diﬀerent factorizations with arbitrarily many components. However, L has also the following prime decomposition
∞
(ε + a2)(ε + a3)(ε + (a2)2i−1).
i=1
Note that the last component is an instance of the left side of (3) that was shown to be prime in Example 2.1.

Here we consider a stronger version of the prime decomposition property that prevents situations as in Example 3.1.
Deﬁnition 3.1. Let L ⊆ Σ∗. The index of a non-trivial decomposition of L,

L = L1 · . . . · Lm

(8)

is m. The decomposition index of L is the maximum index of any non-trivial decomposition of L if the maximum exists. Otherwise, we say that the decomposition index of L is inﬁnite.

If a language L has a ﬁnite decomposition index, we say that L is strongly prime decomposable. When L is strongly prime decomposable, any way of iteratively decomposing L has to stop after a ﬁnite number of steps, i.e., the reﬁnement of any decomposition results in a prime decomposition in a ﬁnite number of steps.
Clearly all ﬁnite languages are strongly prime decomposable since the decomposition index of a ﬁnite language L is at most the length of the longest word in L. The language L considered in Example 3.1 has a prime decomposition but it is not strongly prime decomposable. An example of a strongly prime decomposable inﬁnite language is a∗ + b∗. This follows from Theorem 3.1 below.
For presenting a characterization of the strongly prime decomposable regular languages we recall some notation and a result from [12, 14]. Let A = (Q, Σ, δ, q0, QF ) be a deterministic ﬁnite automaton (DFA). For a subset P ⊆ Q we deﬁne the languages

R1P = {w ∈ Σ∗ | δ(q0, w) ∈ P },
R2P = {w ∈ Σ∗ | δ(p, w) ∈ QF }.
p∈P

150 Y.-S. Han, K. Salomaa, and D. Wood

Proposition 3.1. [12] Let A = (Q, Σ, δ, q0, QF ) be the minimal DFA for a language L and assume that we can write L = L1L2. Then
L = R1P R2P ,
where P ⊆ Q is deﬁned by

P = {p ∈ Q | (∃w ∈ L1) δ(q0, w) = p}.

Furthermore, we know that Li ⊆ RiP , i = 1, 2.

Theorem 3.1. A regular language L is not strongly prime decomposable if and

only if there exist regular languages H1, H2, H3, where H2 contains some non-

empty word such that

L = H1(H2)∗H3.

(9)

Proof. The “if”-direction follows from the observation that, for any k ≥ 1, the equation (9) gives for L a decomposition of index at least k:

L = H1(H2 ∪ {ε})k−1(H2)∗H3.

(10)

(The index of the decomposition (10) is between k and k + 2 depending on whether or not H1 or H3 is the trivial language {ε}.)
Next we prove the “only-if”-direction. Let A = (Q, Σ, δ, q0, QF ) be the minimal DFA for L. Since L is not strongly prime decomposable, we can write

L = L1L2 · . . . · Lm,

where m = 2|Q| + 1 and Li = {ε}, i = 1, . . . , m. Furthermore, by [12] (Proposi-

tion 3.1 above) we know that the languages Li can be chosen to be regular.

Deﬁne Pi = {p ∈ Q | (∃w ∈ L1 · . . . · Li) δ(q0, w) = p}, i = 1, . . . m − 1. By

Proposition 3.1,

L = R1Pi R2Pi , i = 1, . . . , m − 1.

(11)

Here RjPi , j = 1, 2, is as deﬁned in Proposition 3.1. Since m−1 ≥ 2|Q| and Pi = ∅, i = 1, . . . , m−1, there exist j, k ∈ {1, . . . , m−1},
j < k, such that Pj = Pk. This means that for all p ∈ Pj and w ∈ Lj+1 · . . . · Lk

we have

δ(p, w) ∈ Pj (= Pk).

Thus (11) implies that for all r ≥ 1,

R1Pj (Lj+1 · . . . · Lk)rR2Pj ⊆ L.

Consequently, L = R1Pj (Lj+1 · . . . · Lk)∗R2Pj and Lj+1 · . . . · Lk is not empty or

{ε} since j < k.

2

It is known that primality is decidable for regular languages [12]. As a corollary of the proof of Theorem 3.1 we see that also the strong prime decomposition property is decidable for regular languages.

Prime Decompositions of Regular Languages 151

Corollary 3.1. Given a regular language L it is decidable whether or not L is strongly prime decomposable.

Proof. Let A = (Q, Σ, δ, q0, QF ) be the minimal DFA for L. In the “only if”

part of the proof of Theorem 3.1 it is established that if L is not strongly prime

decomposable, there exist P ⊆ Q and a nonempty language KP = {ε} such that L = R1P R2P (where RjP , j = 1, 2, is deﬁned as in Proposition 3.1) and δ(p, w) ∈ P for all p ∈ P and w ∈ KP . Conversely, the existence of P and KP as above implies that L = R1P (KP )∗R2P and hence, by the ﬁrst part of Theorem 3.1,
L is not strongly prime decomposable.

Given P ⊆ Q, a language KP as above exists if and only if some nonempty word of length at most s = |Q||P | takes each state of P to a state in P . Note that

if this property holds for some word of length greater than s, using a pumping

argument it follows that the property has to hold for a word of length at most

s. Hence we can determine whether P and KP as above exist by testing the

required property for all subsets of Q.

2

The algorithm given by Corollary 3.1 is extremely ineﬃcient since it relies on an exhaustive search of subsets of the state set of the minimal DFA for L. It is probable that an eﬃcient (e.g. a polynomial time) algorithm cannot be found since there is no known polynomial time algorithm even to test primality of a regular language [12].

4 Unary Regular Languages

We want to show that every regular language over a unary alphabet has a prime decomposition. First we recall some terminology concerning regular languages over a unary alphabet. A standard reference is [2], and references to more recent work on unary regular languages can be found e.g. in [4, 8].
A DFA A with a unary input alphabet can be divided into a tail which has the states that are not reachable from themselves with any non-empty word, and the cycle consisting of the remaining states of A. Naturally, A has no accepting states in the cycle if the language recognized by it is ﬁnite. If A is minimal, it is additionally required that all states are pairwise inequivalent. If the tail of A accepts words aj1 , . . . ajr−1 and the length of the cycle of A is m, the language accepted by A is denoted by a regular expression

aj1 + . . . + ajr−1 + ajr (ai1 + . . . ais−1 )(am)∗,

(12)

0 ≤ j1 < . . . jr−1 < jr, 0 ≤ i1 < . . . < is−1 < m, r, s ≥ 0. We use the names “tail” and “cycle” also when referring to the corresponding parts of a regular expression as in (12).
Lemma 4.1. Let L ⊂ {a}∗ be any unary language. Then L∗ is the union of a ﬁnite language and a linear language, that is, L∗ = F ∪{ai·p | i ≥ 0} where p ≥ 0 and F ⊆ {a}∗ is ﬁnite. Furthermore, p divides the length of any word in F .

152 Y.-S. Han, K. Salomaa, and D. Wood

Proof. If L is empty or L = {ε}, the property holds by choosing F = ∅ and

p = 0. Otherwise, if p is the greatest common divisor of the lengths of all words

in L, there exists Mp ≥ 1 such that for all n > Mp, an ∈ L if and only if n is

a multiple of p. We can choose F as the set of all words in L of length at most

Mp. The length of any word in F is divided by p.

2

Lemma 4.2. Let L ⊆ {a}∗ be a regular language such that L = LR∗

(13)

where R contains a nonempty word. Then L has a prime decomposition.

Proof. Let L be denoted by a regular expression as in (12). By factoring out the shortest word we can assume without loss of generality that ε ∈ L, that is, j1 = 0. We assume that m (using the notations of (12)) is the cycle length of the minimal DFA for L and all words ε, aj2 , . . . ajr−1 , ajr+i1 , . . . , ajr+is−1 are
pairwise inequivalent. These properties hold if the tail and cycle of (12) are as
in the minimal DFA for L. Note that (13) implies that L is inﬁnite and hence the minimal DFA has a cycle containing an accepting state, that is, m ≥ 1.
By Lemma 4.1 we can write

R∗ = ε + ak1 + . . . + akt−1 + akt (an)∗,

(14)

where 0 < k1 < . . . < kt, t ≥ 1, are all multiples of n. Here we require that kt ≥ 1 and as the word akt we can choose the ﬁrst nonempty word that is in the cycle of R∗. (The expression (14) does not need to correspond to the minimal DFA for R∗. This would be the case, for example, if the minimal DFA is cyclic, i.e., it has no tail.) Since R contains a nonempty word, it follows that n ≥ 1.
By (13), uv ∈ L for all u ∈ L and v ∈ R∗. Since m is the cycle length of the minimal DFA for L, this implies that m divides n, and consequently the length of any word in R∗ is a multiple of m. Write
akt = c · m, c ≥ 1.

Then
L = (ε + aj2 + . . . + ajr−1 + ajr (ai1 + . . . + ais−1 + ai1+m + . . . +ais−1+m + . . . + ai1+(c−1)m + . . . + ais−1+(c−1)m))(akt )∗.

(15)

In (15) the inclusion from right to left follows by (13) since all words in the ﬁrst factor are in L and (akt )∗ ⊆ R∗ because kt is a multiple of n. The inclusion
from left to right follows using the simple observation that the right side of (15) is

obtained from the regular expression (12) for L with cycle length m by repeating

the original cycle c times and taking c · m to be the new cycle length.

In the right side of (15) the ﬁrst component has a prime decomposition since

it is a ﬁnite language. The second component has a prime decomposition by

Example 2.1.

2

Prime Decompositions of Regular Languages 153

The construction of Lemma 4.2 is illustrated in the next example. In particular, the example shows that in the factorization (15) we could not use (an)∗ as a factor for L where n is the cycle length of the minimal DFA for R∗.

Example 4.1. Let L = ε + a5 + a12 + a17(a3)∗ + a18(a3)∗,

and let R = (a12 + a18)∗. Now L = LR∗ and the the construction from the proof of Lemma 4.2 gives for L the factorization
L = (ε + a5 + a12 + a17 + a18 + a20 + a21 + a23 + a24 + a26 + a27)(a12)∗.
It can be noted that the cycle length of R∗ is 6. However, (a6)∗ is not a factor of L since ε, a5 ∈ L and a6, a11 ∈ L.

Theorem 4.1. Every regular language over a unary alphabet has a prime decomposition.

Proof. Let L ⊆ {a}∗ be regular. If we can write L = L1(L2)∗ for regular languages L1 and L2, where L2 contains a nonempty word, then also L = L(L2)∗

holds and, by Lemma 4.2, L has a prime decomposition.

If there exist no regular languages Li, i = 1, 2, L2 = {ε}, L2 = ∅, such that

L = L1(L2)∗, then using the commutativity of catenation of unary languages

and Theorem 3.1 we get that L is strongly prime decomposable.

2

Let Σ be an arbitrary ﬁnite alphabet and L ⊆ Σ∗. The length set of L is the language over the unary alphabet {a} deﬁned by

length(L) = {ak | (∃w ∈ L) |w| = k}.

A language L over a non-unary alphabet may have more structure than the corresponding length set and decompositions of the length set of L do not necessarily yield a factorization of L. For example, the language {bc, cb} is prime but its length set has the factorization {aa} = {a} · {a}. Conversely, however, corresponding to any decomposition of L there exists a decomposition of the length set of L. This gives the following lemma.
Lemma 4.3. Let Σ be a ﬁnite alphabet and L ⊆ Σ∗. If length(L) is strongly prime decomposable, then the same holds for L.

Proof. If L has a non-trivial decomposition L = L1 · L2, then length(L1) ·

length(L2) is a non-trivial decomposition of length(L). Hence, if L has an inﬁnite

decomposition index, the same holds for length(L). In other words, if length(L)

is strongly prime decomposable, so is L.

2

The result of Lemma 4.3 can be used to show the existence of prime decompositions for context-free languages where the tail of the length set is “not closed” under any multiple of the cycle length of the minimal DFA for the length set. Note that the length set of a context-free language is always regular [9, 16].

154 Y.-S. Han, K. Salomaa, and D. Wood

Theorem 4.2. Let L be a context-free language and let m be the cycle length of
the minimal DFA for length(L). If for some d ≥ 0 and Md ≥ 1, ad ∈ length(L) and, for all i ≥ Md, ad+i·m ∈ length(L), then L has a prime decomposition.

Proof. Assume that length(L) has a decomposition length(L) = M R∗ in terms

of regular languages M and R, where R contains a nonempty word. Then length(L) = length(L)R∗ and, by the proof of Lemma 4.2, we know that there is a constant c such that ad ∈ length(L) implies that, for all i ≥ 1, ad+i·c·m is in

length(L). This contradicts the assumptions for length(L).

Hence there do not exist regular languages M and R, R = ∅, R = {ε}, such that length(L) = M R∗. By Theorem 3.1, length(L) is strongly

prime decomposable and Lemma 4.3 implies that also L is strongly prime

decomposable.

2

The conditions of Theorem 4.2 apply, for example, to any context-free language L such that L has a word of odd length and there exists a constant ML ≥ 1 such that all words of L of length greater than ML have even length. The assumption that L is context-free is needed to guarantee that the length set of the language is regular.
Finally, we note that Theorem 4.1 cannot be extended for arbitrary unary languages. Recently, Rampersad and Shallit [13], and A. Salomaa and Yu [15], have independently given examples of non-regular unary languages that provably do not have a prime decomposition. The ﬁrst mentioned language consists of all words over a unary alphabet whose length when represented in ternary notation does not contain a 2. The second mentioned language consists of all words whose length when represented in binary has no 1’s in odd positions from the right. These languages are higher in the complexity hierarchy than the language of Lemma 2.1 in the sense that they are not co-context-free.

5 Conclusions
We have established an eﬀective characterization of the strongly prime decomposable regular languages. Using the characterization it is easy to construct regular languages (over a unary or a non-unary alphabet) that are not strongly prime decomposable, i.e., that have an inﬁnite decomposition index. We have shown that every regular language over a unary alphabet has a prime decomposition. The main open problem remaining is whether all regular languages over arbitrary alphabets have at least one prime decomposition. We conjecture a positive answer to this question.

References
1. Avgustinovich, S.V., Frid, A.E.: A unique decomposition theorem for factorial languages. Intern. J. of Algebra and Computation 15 (2005) 149–160
2. Chrobak, M.: Finite automata and unary languages. Theoret. Comput. Sci. 47 (1986) 149–158

Prime Decompositions of Regular Languages 155
3. Czyzowicz, J., Fraczak, W., Pelc, A., Rytter, W.: Linear-time prime decomposition of regular preﬁx codes. Internat. J. Foundations of Computer Science 14 (2003) 1019–1031
4. Domaratzki, M., Ellul, K., Shallit, J., Wang, M.-W.: Non-uniqueness and radius of cyclic unary NFAs. Internat. J. Foundations of Computer Science 16 (2005) 883–896
5. Domaratzki, M., Salomaa, K.: Decidability of trajectory based equations. Theoret. Comput. Sci. 345 (2005) 304–330
6. Han, Y.-S., Wang, Y., Wood, D.: Inﬁx-free regular expressions and languages, Internat. J. Foundations of Computer Science, to appear.
7. Han, Y.-S., Wood, D.: The generalization of generalized automata: Expression automata. In: Domaratzki, M., Okhotin, A., Salomaa, K., Yu, S. (eds.): Implementation and Application of Automata, CIAA’04. Lecture Notes in Computer Science, Vol. 3317. Springer-Verlag (2005) 156–166
8. Holzer, M., Kutrib, M.: Unary language operations and their nondeterministic state complexity. In: Ito, M., Toyama, M. (eds.): Developments in Language Theory, DLT’02. Lecture Notes in Computer Science, Vol. 2450. Springer-Verlag (2003) 162–172
9. Hopcroft, J.E., Ullman, J.D.: Introduction to Automata Theory, Languages, and Computation. Addison-Wesley Publishing Company (1979)
10. Karhum¨aki, J.: Finite sets of words and computing. In: Margenstern, M. (ed.): Machines, Computations and Universality, MCU04. Lecture Notes in Computer Science, Vol. 3354. Springer-Verlag (2005) 36–49
11. Kari, L., Thierrin, G.: Maximal and minimal solutions to language equations, J. Comput. System Sci. 53 (1996) 487–496
12. Mateescu, A., Salomaa, A., Yu, S.: Factorizations of languages and commutativity conditions. Acta Cybernetica 15 (2002) 339–351
13. Rampersad, N., Shallit, J.: private communication. 14. Salomaa, A., Yu, S.: On the decomposition of ﬁnite languages. In: Rozenberg, G.,
Thomas, W. (eds.): Developments in Language Theory, DLT’99. World Scientiﬁc (2000) 22–31 15. Salomaa, A., Yu, S.: private communication. 16. Wood, D.: Theory of Computation. John Wiley & Sons, New York, NY, (1987) 17. Yu, S.: Regular languages. In: Rozenberg, G., Salomaa, A. (eds.): Handbook of Formal Languages, Vol. I. Springer-Verlag (1997) 41–110

