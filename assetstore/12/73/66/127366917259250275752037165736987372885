Modular Properties of Constructor-Sharing
Conditional Term Rewriting Systems
Enno Ohlebusch
Universitat Bielefeld, 33501 Bielefeld, Germany,
e-mail: enno@techfak.uni-bielefeld.de
Abstract. First, using a recent modularity result [Ohl94b] for uncon-
ditional term rewriting systems (TRSs), it is shown that semi-complete-
ness is a modular property of constructor-sharing join conditional term
rewriting systems (CTRSs). Second, we do not only extend results of
Middeldorp [Mid93] on the modularity of termination for disjoint CTRSs
to constructor-sharing systems but also simplify the proofs considerably.
Moreover, we refute a conjecture of Middeldorp [Mid93] which is related
to the aforementioned results.
1 Introduction
A property is modular for disjoint (constructor-sharing, respectively) term rewrit-
ing systems if it is preserved under the combination of disjoint (constructor-
sharing, respectively) TRSs. In his pioneering paper, Toyama [Toy87b] proved
that conuence is modular for disjoint TRSs. Middeldorp [Mid93] extended this
result to CTRSs. In contrast to these encouraging results, Kurihara & Ohuchi
[KO92] refuted the modularity of conuence for constructor-sharing TRSs { sys-
tems which may share constructors. Constructors are function symbols that do
not occur at the root position in left-hand sides of rewrite rules, the others are
called dened symbols. Recently, we have shown [Ohl94b] that semi-completeness
(conuence plus normalization) is modular for constructor-sharing TRSs. In the
rst part of this paper, we extend this result to CTRSs.
Unlike conuence, termination lacks a modular behavior for disjoint TRSs {
see [Toy87a]. The rst sucient conditions ensuring the preservation of termina-
tion under disjoint union were obtained by investigating the distribution of col-
lapsing and duplicating rules among the TRSs { see [Rus87, Mid89]. The results
were extended, mutatis mutandis, to disjoint CTRSs [Mid93] and constructor-
sharing TRSs [Ohl94c]. In the second part of this paper, we provide a relatively
simple proof for analogous results for constructor-sharing CTRSs. Furthermore,
a simple counterexample disproves a conjecture of Middeldorp [Mid93] which is
related to the above-mentioned results.
More sucient conditions for the modularity of termination of TRSs can
for instance be found in [TKB89, KO92, Gra94a, Gra94b, Ohl94c, Mar95]. The
reader is referred to [Mid90, Mid93, Mid94, Ohl93, Gra93] for modularity re-
sults of CTRSs. In recent investigations, one tries to weaken the constructor-
sharing requirement. On the one hand, [MT93, Mid94, Ohl94a, KO94] consider
composable systems { systems which have to contain all rewrite rules that
dene a dened symbol whenever that symbol is shared. On the other hand
[KR93, KR94, Der95, FJ94] investigate hierarchical systems, where dened sym-
bols of one TRS may occur as constructors in the other but not vice versa. We
refer to the nal section of this paper for more details. Moreover, we point out
that [Ohl94a] contains a comprehensive survey of all modularity results obtained
so far.
The paper is organized as follows. Section 2 briey recalls the basic notions
of (conditional) term rewriting. Section 3 contains required notions of combined
systems with shared constructors. In Section 4, we prove the aforementioned
modularity results. Finally, the last section contains concluding remarks.
2 Preliminaries
This section contains a concise introduction to term rewriting. The reader is
referred to the surveys of Dershowitz & Jouannaud [DJ90] and Klop [Klo92] for
more detail.
A signature is a countable set F of function symbols or operators, where
every f 2 F is associated with a natural number denoting its arity. Nullary
operators are called constants. The set T (F ;V) of terms built from a signature
F and a countable set of variables V with F \ V = ; is the smallest set such
that V  T (F ;V) and if f 2 F has arity n and t
1
; : : : ; t
n
2 T (F ;V), then
f(t
1
; : : : ; t
n
) 2 T (F ;V). We write f instead of f( ) whenever f is a constant.
The set of variables appearing in a term t 2 T (F ;V) is denoted by Var(t).
For t 2 T (F ;V), we dene root(t) by root(t) = t if t 2 V, and root(t) = f
if t = f(t
1
; : : : ; t
n
). jtj denotes the size of t, i.e., jtj = 1 if t 2 V, and jtj =
1 + jt
1
j+ : : :+ jt
n
j if t = f(t
1
; : : : ; t
n
).
A substitution  is a mapping from V to T (F ;V) such that fx 2 V j (x)6=xg
is nite. This set is called the domain of  and will be denoted by Dom().
Occasionally, we present a substitution  as fx 7! (x) j x 2 Dom()g. The
substitution with empty domain will be denoted by . Substitutions extend
uniquely to morphisms from T (F ;V) to T (F ;V), that is, (f(t
1
; : : : ; t
n
)) =
f((t
1
); : : : ; (t
n
)) for every n-ary function symbol f and terms t
1
; : : : ; t
n
. We
call (t) an instance of t. We also write t instead of (t).
Let 2 be a special constant. A context C[; : : : ; ] is a term in T (F [ f2g;V)
which contains at least one occurrence of 2. If C[; : : : ; ] is a context with n occur-
rences of 2 and t
1
; : : : ; t
n
are terms, then C[t
1
; : : : ; t
n
] is the result of replacing
from left to right the occurrences of 2 with t
1
; : : : ; t
n
. A context containing pre-
cisely one occurrence of 2 is denoted by C[ ]. A term t is a subterm of a term s if
there exists a context C[ ] such that s = C[t]. A subterm t of s is proper, denoted
by s > t, if s 6= t. By abuse of notation we write T (F ;V) for T (F [ f2g;V),
interpreting 2 as a special constant which is always available but used only for
the aforementioned purpose.
Let ! be a binary relation on terms, i.e., !  T (F ;V)  T (F ;V). The
reexive transitive closure of ! is denoted by !

. If s !

t, we say that s
reduces to t and we call t a reduct of s. We write s  t if t ! s; likewise
for s

 t. The transitive closure of ! is denoted by !
+
, and $ denotes the
symmetric closure of! (i.e.,$ = ! [ ). The reexive transitive closure of$
is called conversion and denoted by $

. If s$

t, then s and t are convertible.
Two terms t
1
; t
2
are joinable, denoted by t
1
# t
2
, if there exists a term t
3
such
that t
1
!

t
3

 t
2
. Such a term t
3
is called a common reduct of t
1
and t
2
.
The relation # is called joinability. A term s is a normal form w.r.t. ! if there
is no term t such that s ! t. A term s has a normal form if s !

t for some
normal form t. The set of all normal forms of ! is denoted by NF (!). The
relation ! is normalizing if every term has a normal form; it is terminating, if
there is no innite reduction sequence t
1
! t
2
! t
3
! : : :. In the literature, the
terminology weakly normalizing and strongly normalizing is often used instead
of normalizing and terminating, respectively. The relation ! is conuent if for
all terms s; t
1
; t
2
with t
1

 s!

t
2
we have t
1
# t
2
. It is well-known that! is
conuent if and only if every pair of convertible terms is joinable. The relation
! is locally conuent if for all terms s; t
1
; t
2
with t
1
 s! t
2
we have t
1
# t
2
. If
! is conuent and terminating, it is called complete or convergent. The famous
Newman's Lemma states that termination and local conuence imply conuence.
If! is conuent and normalizing, then it is called semi-complete. Sometimes this
property is called unique normalization because it is equivalent to the property
that every term has a unique normal form.
A term rewriting system (TRS) is a pair (F ;R) consisting of a signature
F and a set R  T (F ;V)  T (F ;V) of rewrite rules or reduction rules. Every
rewrite rule (l; r) must satisfy the following two constraints: (i) the left-hand
side l is not a variable, and (ii) variables occurring in the right-hand side r also
occur in l. Rewrite rules (l; r) will be denoted by l ! r. An instance of a left-
hand side of a rewrite rule is a redex (reducible expression). The rewrite rules
of a TRS (F ;R) dene a rewrite relation !
R
on T (F ;V) as follows: s !
R
t if
there exists a rewrite rule l ! r in R, a substitution  and a context C[ ] such
that s = C[l] and t = C[r]. We say that s rewrites to t by contracting redex
l. We call s !
R
t a rewrite step or reduction step. A TRS (F ;R) has one of
the above properties (e.g. termination) if its rewrite relation has the respective
property. Let (F ;R) be an arbitrary TRS. A function symbol f 2 F is called
a dened symbol if there is a rewrite rule l ! r 2 R such that f = root(l).
Function symbols from F which are not dened symbols are called constructors.
The set of normal forms of (F ;R) will also be denoted by NF (F ;R). We often
simply write R instead of (F ;R) if there is no ambiguity about the underlying
signature F . A rewrite rule l ! r of a TRS R is collapsing if r is a variable, and
duplicating if r contains more occurrences of some variable than l. A TRS R is
non-duplicating (non-collapsing, respectively) if it does not contain duplicating
(collapsing, respectively) rewrite rules.
In a join conditional term rewriting system (CTRS for short) (F ;R), the
rewrite rules of R have the form l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
with l; r; s
1
; : : : ; s
n
,
t
1
; : : : ; t
n
2 T (F ;V). s
1
# t
1
; : : : ; s
n
# t
n
are the conditions of the rewrite rule. If
a rewrite rule has no conditions, we write l ! r. We impose the same restrictions
on conditional rewrite rules as on unconditional rewrite rules. That is, we allow
extra variables in the conditions but not on right-hand sides of rewrite rules. The
rewrite relation associated with (F ;R) is dened by: s !
R
t if there exists a
rewrite rule l ! r( s
1
# t
1
; : : : ; s
n
# t
n
in R, a substitution  : V ! T (F ;V),
and a context C[ ] such that s = C[l]; t = C[r], and s
j
 #
R
t
j
 for all j 2
f1; : : : ; ng. For every CTRS R, we inductively dene TRSs R
i
, i 2 IN, by:
R
0
= fl ! r j l ! r 2 Rg
R
i+1
= fl ! r j l! r ( s
1
# t
1
; : : : ; s
n
# t
n
2 R and
s
j
 #
R
i
t
j
 for all j 2 f1; : : : ; ngg:
Note that R
i
 R
i+1
for all i 2 IN. Furthermore, s !
R
t if and only if s!
R
i
t
for some i 2 IN. The depth of a rewrite step s!
R
t is dened to be the minimal
i with s!
R
i
t. Depths of reduction sequences s!

R
t, conversions s$

R
t, and
valleys s #
R
t are dened analogously. All notions dened previously for TRSs
extend to CTRSs.
A partial ordering (A;>) is a pair consisting of a set A and a binary irreexive
and transitive relation > on A. A partial ordering is called well-founded if there
are no innite sequences a
1
> a
2
> a
3
> : : : of elements from A. A multiset is a
collection in which elements are allowed to occur more than once. If A is a set,
then the set of all nite multisets over A is denoted by M(A). The multiset ex-
tension of a partial ordering (A;>) is the partial ordering (M(A); >
mul
) dened
as follows:M
1
>
mul
M
2
if M
2
= (M
1
nX)[Y for some multisets X;Y 2M(A)
that satisfy (i) ; 6= X  M
1
and (ii) for all y 2 Y there exists an x 2 X such
that x > y. Dershowitz and Manna [DM79] proved that the multiset extension
of a well-founded partial ordering is a well-founded partial ordering.
3 Basic Notions of Constructor-Sharing CTRSs
Denition 3.1 Two CTRSs (F
1
;R
1
) and (F
2
;R
2
) are called constructor-
sharing if they share at most constructors, more precisely if
F
1
\ F
2
\ froot(l) j l ! r( s
1
# t
1
; : : : ; s
n
# t
n
2 R
1
[R
2
g = ;:
In this case, their union (F ;R) = (F
1
[ F
2
;R
1
[ R
2
) is called the combined
CTRS of (F
1
;R
1
) and (F
2
;R
2
) with shared constructors C, where C = F
1
\F
2
.
Furthermore, we dene D
1
= F
1
nC, D
2
= F
2
nC, and D = D
1
[D
2
. A property P
of CTRSs is called modular for constructor-sharing CTRSs if for all CTRSs R
1
and R
2
which share at most constructors, their union R
1
[R
2
has the property
P if and only if both R
1
and R
2
have the property P.
If (F
1
;R
1
) and (F
2
;R
2
) are constructor-sharing CTRSs, then (F ;R
1
) and
(F ;R
2
) are also CTRSs, where F = F
1
[F
2
. In order to avoid misunderstand-
ings, we write)
R
i
for the rewrite relation associated with (F
i
;R
i
) and!
R
i
for
the rewrite relation associated with (F ;R
i
), where i 2 f1; 2g. If s; t 2 T (F
i
;V)
and s )
R
i
t, then we clearly have s !
R
i
t. A priori, it is not clear at all
whether the converse is also true. For, if s!
R
i
t, then there exists a rewrite rule
l! r ( s
1
# t
1
; : : : ; s
n
# t
n
inR
i
, a substitution  : V ! T (F ;V), and a context
C[ ] such that s = C[l]; t = C[r], and s
j
 #
R
i
t
j
 for all j 2 f1; : : : ; ng. And
 : V ! T (F ;V) may substitute mixed terms for extra-variables occurring in the
conditions. From now on we implicitly assume that (F
1
;R
1
) and (F
2
;R
2
) are
constructor-sharing join CTRSs and that (F ;R) denotes their combined system
(F
1
[F
2
;R
1
[R
2
). In the following,! = !
R
= !
R
1
[R
2
.
Denition 3.2 A reduction rule l! r ( s
1
# t
1
; : : : ; s
n
# t
n
2 R is called
constructor-lifting if root(r) is a shared constructor, i.e., root(r) 2 C. A rewrite
rule l ! r( s
1
# t
1
; : : : ; s
n
# t
n
2 R is said to be layer-preserving if it is neither
collapsing nor constructor-lifting.
Denition 3.3 In order to enhance readability, function symbols from D
1
are
called black, those fromD
2
white, and shared constructors as well as variables are
called transparent. If a term s does not contain white (black) function symbols,
we speak of a black (white) term. s is said to be transparent if it only contains
shared constructors and variables. Consequently, a transparent term may be
regarded as black or white, this is convenient for later purposes. s is called top
black (top white, top transparent) if root(s) is black (white, transparent). To
emphasize that F
i
= D
i
[ C, we write T (D
i
; C;V) instead of T (F
i
;V) at the
appropriate places.
In the sequel, we often state denitions and considerations only for one color
(the same applies mutatis mutandis for the other color).
Denition 3.4 If s is a top black term such that s = C
b
[s
1
; : : : ; s
n
] for some
black context C
b
[; : : : ; ] 6= 2 and root(s
j
) 2 D
2
for j 2 f1; : : : ; ng, then we
denote this by s = C
b
[[s
1
; : : : ; s
n
]]. In this case we dene the multiset S
b
P
(s) of all
black principal subterms of s to be S
b
P
(s) = [s] and the set of all white principal
subterms of s to be S
w
P
(s) = [s
1
; : : : ; s
n
]. The topmost black homogeneous part
of s, denoted by top
b
(s), is obtained from s by replacing all white principal
subterms with 2. The topmost white homogeneous part of s is top
w
(s) = 2.
If s is a top transparent term such that
s =
8
<
:
C
t
[s
1
; : : : ; s
l
] where C
t
[; : : : ; ] 2 T (C;V) ; root(s
j
) 2 D
1
[ D
2
C
b
[t
1
; : : : ; t
m
] where C
b
[; : : : ; ] 2 T (D
1
; C;V) ; root(t
j
) 2 D
2
C
w
[u
1
; : : : ; u
n
] where C
w
[; : : : ; ] 2 T (D
2
; C;V) ; root(u
j
) 2 D
1
;
then this will be denoted by
s =
8
<
:
C
t
[[s
1
; : : : ; s
l
]] (note that C
t
[; : : : ; ] 6= 2)
C
b
[[t
1
; : : : ; t
m
]] (note that C
b
[; : : : ; ] 6= 2)
C
w
[[u
1
; : : : ; u
n
]] (note that C
w
[; : : : ; ] 6= 2):
In this situation, we dene the multiset S
b
P
(s) (S
w
P
(s), respectively) of black
(white, respectively) principal subterms of s to be S
b
P
(s) = [u
1
; : : : ; u
n
] (S
w
P
(s) =
[t
1
; : : : ; t
m
], respectively). The topmost black (white) homogeneous part of s, de-
noted by top
b
(s) (top
w
(s)), is obtained from s by replacing all white (black)
principal subterms with 2.
Example 3.5 Let D
1
= fF;Ag, D
2
= fg; bg, and C = fCg. The term s =
C(F (b); g(A)) has representations
s =
8
<
:
C
t
[[F (b); g(A)]] with C
t
[; : : : ; ] = C(2;2)
C
b
[[b; g(A)]] with C
b
[; : : : ; ] = C(F (2);2)
C
w
[[F (b); A]] with C
w
[; : : : ; ] = C(2; g(2))
Denition 3.6 For a top black term s, the rank of s is dened by
rank(s) =

1 , if s 2 T (D
1
; C;V)
1 +maxfrank(s
j
) j 1  j  ng, if s = C
b
[[s
1
; : : : ; s
n
]]
If s is a top transparent term, then the rank of s is dened by
rank(s) =

0 , if s 2 T (C;V)
maxfrank(t
j
) j 1  j  mg, if s = C
t
[[t
1
; : : : ; t
m
]]
Denition 3.7 Let s be a top black term such that s = C
b
[[s
1
; : : : ; s
n
]] and
s !
R
t. We write s !
i
R
t if the rewrite rule is applied in one of the s
j
and we write s !
o
R
t otherwise. Now let s be a top transparent term. If
s = C
t
[[s
1
; : : : ; s
n
]] and s !
R
t, then t = C
t
[s
1
; : : : ; s
j 1
; t
j
; s
j+1
; : : : ; s
n
] for
some j 2 f1; : : : ; ng. In this case we write s !
i
R
t if s
j
!
i
R
t
j
and s !
o
R
t if
s
j
!
o
R
t
j
. The reduction step s!
i
R
t is called inner reduction step and s!
o
R
t
is called outer reduction step.
Denition 3.8 Let s be a top black term. A rewrite step s ! t is destructive
at level 1 if the root symbols of s and t have dierent colors (i.e., root(t) 2
D
2
[C [V). A rewrite step s! t is destructive at level m+1 (for some m  1) if
s = C
b
[[s
1
; : : : ; s
j
; : : : ; s
n
]]!
i
C
b
[s
1
; : : : ; t
j
; : : : ; s
n
] = t with s
j
! t
j
destructive
at level m. For a top transparent term s a rewrite step s ! t is destructive at
level m if it is of the form s = C
t
[[s
1
; : : : ; s
j
; : : : ; s
n
]]! C
t
[s
1
; : : : ; t
j
; : : : ; s
n
] = t
with s
j
! t
j
destructive at level m. Note that if a rewrite step is destructive,
then the applied rewrite rule is collapsing or constructor-lifting.
Denition 3.9 As in [Mid90], we introduce some special notations in order
to enable a compact treatment of \degenerate" cases of t = C
b
[[t
1
; : : : ; t
n
]]. To
this end, the notion of context is extended. We write C
b
h; : : : ; i for a black
term containing zero or more occurrences of 2 and C
b
f; : : : ; g for a black term
dierent from 2 itself, containing zero or more occurrences of 2. If t
1
; : : : ; t
n
are
the (possibly zero) white principal subterms of some term t (from left to right),
then we write t = C
b
fft
1
; : : : ; t
n
gg provided that t = C
b
ft
1
; : : : ; t
n
g. We write
t = C
b
hht
1
; : : : ; t
n
ii if t = C
b
ht
1
; : : : ; t
n
i and either C
b
h; : : : ; i 6= 2 and t
1
; : : : ; t
n
are the white principal subterms of t or C
b
h; : : : ; i = 2 and t 2 ft
1
; : : : ; t
n
g.
Lemma 3.10 If s!

t, then rank(s)  rank(t).
Proof: Routine. 2
Denition 3.11 Let  and  be substitutions. We write  /  if x = y
implies x = y for all x; y 2 V. The notation  !

 is used if x !

x for
all x 2 V. Note that  !

 implies t !

t for all t 2 T (F ;V). Moreover, 
is said to be in normal form or ! normalized if x 2 NF (!) for every x 2 V .
A substitution  is called black if x is black for all x 2 Dom() and it is said
to be top black if x is top black for all x 2 Dom().
Proposition 3.12 Every substitution  can be decomposed into 
2
 
1
such
that 
1
is black, 
2
is top white, and 
2
/ .
Proof: Essentially the same as for disjoint conditional term rewriting systems
(see [Mid93] and cf. also [Ohl94a]). 2
4 Modular Properties
4.1 Semi-Completeness
Recently, we have shown that semi-completeness is a modular property of un-
conditional TRSs with shared constructors [Ohl94b]. Our rst goal is to extend
this result to constructor-sharing CTRSs. We use the structure of the proof of
the modularity of conuence for disjoint CTRSs [Mid90, Mid93]. The proof idea
is to construct two rewrite relations !
1
and !
2
on T (F ;V) such that their
union is semi-complete, and reduction in the combined system R corresponds to
joinability with respect to !
1;2
= !
1
[ !
2
. From these two properties and
the equality NF (F;R) = NF (!
1;2
), the modularity of semi-completeness for
CTRSs with shared constructors follows.
Denition 4.1 The rewrite relation !
1
is dened by: s !
1
t if there ex-
ists a rewrite rule l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
in R
1
, a substitution  : V !
T (F ;V), and a context C[ ] such that s = C[l]; t = C[r], and s
j
 #
o
1
t
j
 for
j 2 f1; : : : ; ng. Here the superscript o in s
j
 #
o
1
t
j
 means that s
j
 and t
j

are joinable using only outer !
1
reduction steps. The relation !
2
is dened
analogously. The union of !
1
and !
2
is denoted by !
1;2
.
Example 4.2 Consider the CTRSs R
1
= fF (x;C) ! G(x) ( x # Cg and
R
2
= fa ! Cg. We have F (a;C) !
R
G(a) but neither F (a;C) !
1
G(a)
nor F (a;C) !
2
G(a). However, the terms are joinable with respect to !
1;2
:
F (a;C) !
2
F (C;C) !
1
G(C) 
2
G(a):
Lemma 4.3 If s !
1;2
t, then s !
R
t.
Proof: Trivial. 2
Lemma 4.4 Let s be a black term and let  be a top white substitution such
that s !
o
1
t. Then there is a black term u such that t = u.
Proof: Straightforward. 2
Lemma 4.5 Let s; t be black terms and let  be a top white substitution with
s !
o
1
t. If  is a substitution with  /  , then s !
o
1
t .
Proof: The lemma is proved by induction on the depth of s !
o
1
t. The
case of zero depth is straightforward. Let the depth of s !
o
1
t equal d + 1,
d  0. There is a context C[ ], a substitution  : V ! T (F ;V), and a rewrite
rule l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
in R
1
such that s = C[l], t = C[r] and
s
j
 #
o
1
t
j
 is of depth  d for every j 2 f1; : : : ; ng. According to Proposition 3.12,
 has a decomposition  = 
2
 
1
such that 
1
is black, 
2
is top white, and

2
/ . We dene a substitution 
0
by 
0
(x) =  (y) for every x 2 Dom(
2
) and
y 2 Dom() satisfying 
2
(x) = (y). 
0
is well-dened because  /  . It follows
from 
2
/  and  / 
0
that 
2
/ 
0
. By Lemma 4.4, for any j 2 f1; : : : ; ng, we
may write

2
(
1
(s
j
)) = 
2
(u
1
)!
o
1
: : :!
o
1

2
(u
k
) = 
2
(v
l
)
o
1
 : : :
o
1
 
2
(v
1
) = 
2
(
1
(t
j
))
for some black terms u
1
; : : : ; u
k
; v
1
; : : : ; v
l
. Now repeated application of the in-
duction hypothesis yields

0
(
1
(s
j
)) = 
0
(u
1
)!
o
1
: : :!
o
1

0
(u
k
) = 
0
(v
l
)
o
1
 : : :
o
1
 
0
(v
1
) = 
0
(
1
(t
j
))
Thus 
0
(
1
(l)) !
o
1

0
(
1
(r)). Let
^
C[ ] be the context obtained from C[ ] by
replacing every white principal subterm which must be of the form (x) for
some variable x 2 Dom() by the corresponding  (x). (This is a slight abuse
of notation because
^
C[ ] contains in general more than one occurrence of 2.)
It is fairly simple to verify that s =
^
C[
0
(
1
(l))] and t =
^
C[
0
(
1
(r))]. Hence
s !
o
1
t . 2
Lemma 4.6 The restriction of !
1
to T (F
1
;V)  T (F
1
;V) and )
R
1
coincide.
Proof: \" Trivial.
\" Let s; t 2 T (F
1
;V) with s!
1
t. In order to show that s)
R
1
t, we proceed
by induction on the depth of s!
o
1
t. The case of zero depth is straightforward. So
suppose that the depth of s!
o
1
t equals d+1, d  0. Then there exists a rewrite
rule l! r ( s
1
# t
1
; : : : ; s
n
# t
n
in R
1
, a substitution  : V ! T (F ;V), and a
context C[ ] such that s = C[l]; t = C[r], and s
j
 #
o
1
t
j
 with depth  d for j 2
f1; : : : ; ng. According to Proposition 3.12,  can be decomposed into 
2

1
such
that 
1
is black, 
2
is top white, and 
2
/ . Induction on the number of rewrite
steps in s
j
 #
o
1
t
j
 in combination with Lemma 4.5 yields (
1
(s
j
)) #
o
1
(
1
(t
j
))
for j 2 f1; : : : ; ng. Since every term in the conversion 
1
(s
j
) #
o
1

1
(t
j
) is black,
we obtain 
1
(s
j
) +
R
1

1
(t
j
) by repeated application of the induction hypothesis.
Consequently, we have 
1
(l))
R
1

1
(r). Now s)
R
1
t follows from s = C[l] =
C[l
1
] and t = C[r] = C[r
1
] because s and t are black. 2
Proposition 4.7 If (F
1
;R
1
) and (F
2
;R
2
) are semi-complete constructor-
sharing conditional term rewriting systems, then the relation !
1;2
is semi-
complete.
Proof: We dene two unconditional TRSs (F
1
;S
1
) and (F
2
;S
2
) by
S
i
= fu! v j u; v 2 T (F
i
;V); root(u) 62 F
1
\ F
2
and u !
i
vg:
First of all note that (F
1
;S
1
) and (F
2
;S
2
) are constructor-sharing TRSs. By
Lemma 4.6, the restriction of !
i
to T (F
i
;V)T (F
i
;V) and)
R
i
coincide. It is
easy to show that !
S
i
and the restriction of !
i
to T (F
i
;V)T (F
i
;V) are also
the same. Hence !
S
i
and )
R
i
coincide on T (F
i
;V) T (F
i
;V). In particular,
the TRS (F
i
;S
i
) is semi-complete because (F
i
;R
i
) is semi-complete. It follows
from the modularity of semi-completeness for constructor-sharing unconditional
TRSs [Ohl94b] that (F
1
[F
2
;S
1
[ S
2
) is also semi-complete.
We next show that the relations !
S
i
and !
i
are also the same on
T (F ;V)  T (F ;V).
\" Straightforward.
\" Without loss of generality let i = 1. If s!
1
t, then there exists a rewrite rule
l! r ( s
1
# t
1
; : : : ; s
n
# t
n
in R
1
, a substitution  : V ! T (F ;V), and a con-
text C[ ] such that s = C[l]; t = C[r], and s
j
 #
o
1
t
j
 for j 2 f1; : : : ; ng. Note
that particularly l !
1
r. According to Proposition 3.12,  has a decomposi-
tion  = 
2

1
such that 
1
is black, 
2
is top white, and 
2
/ . Now we apply
Lemma 4.5: 
1
(l) and 
1
(r) are black terms and 
2
is a top white substitution
with 
2
(
1
(l)) !
1

2
(
1
(r)) and  is a substitution with 
2
/ . Consequently,
we obtain 
1
(l) = (
1
(l)) !
1
(
1
(r)) = 
1
(r). Since 
1
(l) and 
1
(r) are black
terms and root(
1
(l)) = root(l) 62 F
1
\ F
2
, it follows that 
1
(l) ! 
1
(r) is a
rewrite rule of S
1
. Thus s = C[
2
(
1
(l))]!
S
1
C[
2
(
1
(r))] = t.
With the above results, it further follows from
!
S
1
[S
2
= !
S
1
[ !
S
2
= !
1
[ !
2
= !
1;2
that !
1;2
is semi-complete on T (F ;V)  T (F ;V). 2
Denition 4.8 If !
1;2
is semi-complete, then every term t has a unique nor-
mal form w.r.t. !
1;2
. In the sequel, this normal form will be denoted by t
!
.
Furthermore, for any substitution , 
!
denotes fx 7! (x)
!
j x 2 Dom()g.
Lemma 4.9 Let !
1;2
be semi-complete. If s and t are black terms and  is a
top white !
1;2
normalized substitution such that s #
1;2
t, then s #
o
1
t.
Proof: We show that s !
1;2
u implies s !
o
1
u. Since u = v for some black
term v by Lemma 4.4, the lemma then follows by a straightforward induction
on the length of the valley. In order to prove the claim, we use induction on
the depth of s !
1;2
u. The case of zero depth is trivial. So suppose that the
depth of s !
1;2
u equals d + 1, d  0. Since  is a top white !
1;2
nor-
malized substitution, there exists a rewrite rule l! r ( s
1
# t
1
; : : : ; s
n
# t
n
in
R
1
, a substitution  : V ! T (F ;V), and a context C[ ] such that s = C[l],
u = C[r], and s
j
 #
1;2
t
j
 with depth  d for j 2 f1; : : : ; ng. By Proposi-
tion 3.12,  can be decomposed into 
2
 
1
such that 
1
is black, 
2
is top
white, and 
2
/ . Note that for every x 2 Dom(
2
) \ Var(l
1
), we have

2
(x) 2 NF (!
1;2
). Nevertheless, we do not have 
2
(x) 2 NF (!
1;2
) in general
because of possible extra variables. Since !
1;2
is semi-complete, 
2
!

1;2

!
2
.
Thus 
!
2
(
1
(s
j
))

1;2
 s
j
 #
1;2
t
j
 !

1;2

!
2
(
1
(t
j
)). The conuence of !
1;2
guarantees 
!
2
(
1
(s
j
)) #
1;2

!
2
(
1
(t
j
)) for every j 2 f1; : : : ; ng. By Proposi-
tion 3.12, 
!
2
can be decomposed into 
4
 
3
such that 
3
is black, 
4
is top
white, and 
4
/ . Evidently, 
3
(
1
(s
j
)), 
3
(
1
(t
j
)) are black terms and 
4
is a
top white !
1;2
normalized substitution. Hence the induction hypothesis yields

4
(
3
(
1
(s
j
))) #
o
1

4
(
3
(
1
(t
j
))). In other words, 
!
2
(
1
(s
j
)) #
o
1

!
2
(
1
(t
j
)), and
we obtain as a consequence that 
!
2
((l)) !
o
1

!
2
(
1
(r)) and C[
!
2
(
1
(l))] !
o
1
C[
!
2
(
1
(r))]. Clearly, s = C[
!
2
(
1
(l))] and u = C[
!
2
(
1
(r))] because

2
(x) 2 NF (!
1;2
) for every x 2 Dom(
2
) \ Var(l
1
). This proves the claim. 2
Lemma 4.10 Let !
1;2
be semi-complete and let s
1
; : : : ; s
n
; t
1
; : : : ; t
n
be black
terms. If  is a substitution with s
j
 #
1;2
t
j
 for every j 2 f1; : : : ; ng, then

!
(s
j
) #
o
1

!
(t
j
) for every j 2 f1; : : : ; ng.
Proof: We have 
!
(s
j
)

1;2
 s
j
 #
1;2
t
j
 !

1;2

!
(t
j
). The conuence of !
1;2
implies 
!
(s
j
) #
1;2

!
(t
j
). Proposition 3.12 yields a decomposition of 
!
into

2
 
1
such that 
1
is black and 
2
is top white. Evidently, 
1
(s
j
), 
1
(t
j
) are
black terms and 
2
is a top white !
1;2
normalized substitution. According to
Lemma 4.9, we eventually derive 
!
(s
j
) = 
2
(
1
(s
j
)) #
o
1

2
(
1
(t
j
)) = 
!
(t
j
).
2
∗
∗
∗
∗
∗ ∗ ∗ ∗ ∗
∗
∗
∗
∗ ∗ ∗ ∗∗
∗
= 1,2
(1) (1) (1) (1)
(2) (2)(2) (2)
(1)
σ (s )j σ (t )j
Fig. 1.
Proposition 4.11 Let (F
1
;R
1
) and (F
2
;R
2
) be semi-complete constructor-
sharing CTRSs. If s !
R
t, then s #
1;2
t.
Proof: We proceed by induction on the depth of s! t. The case of zero depth
is trivial. So suppose that the depth of s ! t equals d + 1, d  0. Then there
is a context C[ ], a substitution  : V ! T (F ;V), and a rewrite rule l ! r (
s
1
# t
1
; : : : ; s
n
# t
n
in R such that s = C[l], t = C[r], and s
j
 # t
j
 is of depth
less than or equal to d for every j 2 f1; : : : ; ng. Fig. 1 depicts how the induction
hypothesis and conuence of !
1;2
yield s
j
 #
1;2
t
j
 for every j 2 f1; : : : ; ng
(where (1) signals an application of the induction hypothesis and (2) stands
for an application of Proposition 4.7). W.l.o.g. we may assume that the applied
rewrite rule stems from R
1
. By Lemma 4.10, we have 
!
(s
j
) #
o
1

!
(t
j
) for
j 2 f1; : : : ; ng and thus 
!
(l)!
1

!
(r). Finally, we obtain s #
1;2
t from
s = C[l]!

1;2
C[
!
(l)]!
1
C[
!
(r)]

1;2
 C[r] = t:
2
Proposition 4.12 Let (F
1
;R
1
) and (F
2
;R
2
) be semi-complete constructor-
sharing CTRSs. Then the relations $

R
and #
1;2
coincide.
Proof: This is a consequence of Lemma 4.3 and Propositions 4.11 and 4.7. 2
Lemma 4.13 If (F
1
;R
1
) and (F
2
;R
2
) are semi-complete constructor-sharing
CTRSs, then NF (F;R) = NF (!
1;2
).
Proof: \" Trivial.
\" If NF (!
1;2
) 6 NF (F;R), then there is a term s with s 2 NF (!
1;2
) and
s 62 NF (F;R). W.l.o.g. we may assume that s is of minimal size (i.e., jsj is
minimal). Hence s is a redex and every proper subterm of s is irreducible by
!
R
. Therefore, there exists a rewrite rule l ! r( s
1
# t
1
; : : : ; s
n
# t
n
in R and
a substitution  : V ! T (F ;V) such that s = l; t = r, and s
j
 #
R
t
j
 for
all j 2 f1; : : : ; ng. Note that for every variable x 2 Dom() \ Var(l), we have
(x) 2 NF (F;R) because (x) is a proper subterm of s. W.l.o.g. we may further
assume that the applied rewrite rule originates from R
1
. By Proposition 4.12,
s
j
 #
1;2
t
j
 which, in conjunction with Lemma 4.10, yields 
!
(s
j
) #
o
1

!
(t
j
).
It follows s = (l) = 
!
(l) !
o
1

!
(r) because (x) = 
!
(x) for every x 2
Var(l). This means that s 62 NF (!
1
), contradicting s 2 NF (!
1;2
). 2
Theorem 4.14 Semi-completeness is modular for constructor-sharing CTRSs.
Proof: Let (F
1
;R
1
) and (F
2
;R
2
) be CTRSs with shared constructors. We have
to show that their combined system (F ;R) is semi-complete if and only if both
(F
1
;R
1
) and (F
2
;R
2
) are semi-complete. In order to show the if case, we consider
a conversion t
1

R
 s!

R
t
2
. According to Proposition 4.12 we have t
1
#
1;2
t
2
.
Since !
1;2
is semi-complete, t
1
!

1;2
t
3
and t
2
!

1;2
t
3
, where t
3
is the unique
normal form of s, t
1
, and t
2
. Now Lemma 4.3 implies t
1
!

R
t
3

R
 t
2
. Thus
(F ;R) is conuent. It remains to show normalization of !
R
. Let s 2 T (F ;V).
Since !
1;2
is normalizing, s !

1;2
t for some t 2 NF (!
1;2
). By Lemma 4.3,
s !

R
t. It follows from Lemma 4.13 that t 2 NF (F;R). Hence (F ;R) is also
normalizing.This all proves that (F ;R) is semi-complete. The only-if case follows
straightforwardly from Lemma 4.15. 2
Lemma 4.15 Let (F ;R) be the combined system of two constructor-sharing
CTRSs (F
1
;R
1
) and (F
2
;R
2
) such that (F ;R) is semi-complete. If s is a black
term and s!
R
t, then s)
R
1
t.
Proof: We show the following stronger claim, where the rewrite relation associ-
ated with (F
1
[ f2g;R
1
) is also denoted by )
R
1
.
Claim: If s is a black term and  is a top white !
R
normalized substitution
such that s !
R
t, then s
2
)
R
1
t
2
, where 
2
denotes the substitution
fx 7! 2 j x 2 Dom()g.
Since R is semi-complete, every term t has a unique normal form t# w.r.t.R. Fur-
thermore, for any substitution , let # denote the substitution fx 7! (x)# j x 2
Dom()g. The claim is proved by induction on the depth of s ! t. The
case of zero depth is straightforward. Let the depth of s ! t equal d + 1,
d  0. There is a context C[ ], a substitution  : V ! T (F ;V), and a rewrite
rule l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
in R
1
such that s = C[l], t = C[r] and
s
j
 # t
j
 is of depth  d for every j 2 f1; : : : ; ng. By Proposition 3.12,  can be
decomposed into 
2
 
1
such that 
1
is black and 
2
is top white. Note that for
every x 2 Dom(
2
)\Var(l
1
), we have 
2
(x) 2 NF (!). Nevertheless, we do not
have 
2
(x) 2 NF (!) in general because of possible extra variables. Since ! is
semi-complete, 
2
!


2
#. Thus 
2
#(
1
(s
j
))

 s
j
 # t
j
!


2
#(
1
(t
j
)). The
conuence of ! guarantees 
2
#(
1
(s
j
)) # 
2
#(
1
(t
j
)) for every j 2 f1; : : : ; ng.
By Proposition 3.12, 
2
# can be decomposed into 
4
 
3
such that 
3
is black
and 
4
is top white. Evidently, 
3
(
1
(s
j
)) and 
3
(
1
(t
j
)) are black terms and 
4
is a top white! normalized substitution. Repeated application of the induction
hypothesis yields 
2
4
(
3
(
1
(s
j
))) +
R
1

2
4
(
3
(
1
(t
j
))). We obtain as a conse-
quence that 
2
4
(
3
(
1
(l))) )
R
1

2
4
(
3
(
1
(r))). Clearly, s = C[
2
#(
1
(l))] and
t = C[
2
#(
1
(r))] because 
2
(x) 2 NF (!) for every x 2 Dom(
2
) \ Var(l
1
).
Let
^
C[ ] be the context obtained fromC[ ] by replacing every white principal sub-
term which must be of the form (x) for some variable x 2 Dom() with 2. It is
fairly simple to verify that s
2
=
^
C[
2
4
(
3
(
1
(l)))] and t
2
=
^
C[
2
4
(
3
(
1
(r)))].
Thus s
2
)
R
1
t
2
. This proves the claim. 2
It has been shown by Middeldorp [Mid90, Mid93] that conuence is also
modular for semi-equational disjoint CTRSs. Analogously, it should be possible
to prove that Theorem 4.14 also holds true for semi-equational CTRSs.
4.2 Termination
In contrast to the unconditional case (see [Rus87]), termination is not modular
for non-duplicating disjoint CTRSs. This is witnessed by the following example
which stems from [Mid93].
Example 4.16 Consider the CTRSs
R
1
=

F (x)! F (x)( x # A; x # B
	
R
2
=

g(x; y)! x
g(x; y)! y
Both systems are terminating and non-duplicating but their combined system is
non-terminating.
Note that the CTRSR
2
in Example 4.16 is not conuent. Middeldorp [Mid90,
Mid93] has shown that this is essential. He proved the following theorem.
Theorem 4.17 If R
1
and R
2
are terminating disjoint CTRSs, then their com-
bined system R = R
1
[ R
2
is terminating provided that one of the following
conditions is satised:
1. Neither R
1
nor R
2
contain collapsing rules.
2. Both systems are conuent and non-duplicating.
3. Both systems are conuent and one of the systems contains neither collapsing
nor duplicating rules.
Furthermore, he conjectured that the disjoint union of two terminating join
CTRSs is terminating if one of them contains neither collapsing nor duplicating
rules and the other is conuent. The next example disproves this conjecture. The
function symbols have been chosen in resemblance to other known counterexam-
ples.
Example 4.18 Let
R
1
=
8
<
:
0 1
A
2
B
?
@
R
 
	 ?
F (x)! F (x)( x # A; x # B
and
R
2
=

g (x; y; y)! x
g (y; y; x)! x:
Clearly,R
1
is non-collapsing, non-duplicating, and terminating (there is no term
t 2 T (F
1
;V) which rewrites to both A and B). Note that R
1
is not conuent.
Moreover, the CTRS R
2
is evidently terminating and conuent. However, their
disjoint union R = R
1
[R
2
is not terminating. Since
B
R
 1
R
 g(0; 0; 1)!
R
g(0; 2; 1)!
R
g(0; 2; 2)!
R
0!
R
A;
there is the cyclic reduction "sequence" F (g(0; 0; 1)) !
R
F (g(0; 0; 1)).
It will next be shown that the above theorem also holds, mutatis mutandis,
in the presence of shared constructors. We point out that our proof (though
based on the ideas of [Mid93]) is considerably simpler than that of [Mid93].
As in the previous subsection, let (F
1
;R
1
) and (F
2
;R
2
) be constructor-
sharing join CTRSs. It is not dicult to verify that the CTRS (F
i
[ f2g;R
i
)
is terminating if and only if (F
i
;R
i
) is terminating. Again, we also denote the
rewrite relation associated with (F
i
[ f2g;R
i
) by )
R
i
(by abuse of notation).
Proposition 4.19 Let (F
2
;R
2
) be layer-preserving.
1. If s!
o
t by some rule from R
1
, then top
b
(s) )
R
1
top
b
(t).
2. If s!
o
t by some rule from R
2
or s!
i
t, then top
b
(s) = top
b
(t).
Proof:We proceed by induction on the depth of s! t. The case of zero depth is
straightforward. So suppose that the depth of s! t equals d+ 1, d  0. The in-
duction hypothesis covers the statement that u! v implies top
b
(u))

R
1
top
b
(v)
whenever u! v is of depth less than or equal to d.
(1) If s !
o
t by some rule from R
1
, then s = C
b
ffu
1
; : : : ; u
p
gg and t =
^
C
b
hhu
i
1
; : : : ; u
i
q
ii, where i
1
; : : : ; i
q
2 f1; : : : ; pg. Moreover, there is a context C[ ],
a substitution  and a rewrite rule l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
2 R
1
such
that s = C[l], t = C[r] and s
j
 # t
j
 is of depth less than or equal to d
for every j 2 f1; : : : ; ng. We rst show that top
b
(s
j
) +
R
1
top
b
(t
j
) for every
j 2 f1; : : : ; ng. Fix j. Let w be the common reduct of s
j
 and t
j
. Clearly, it suf-
ces to show that top
b
(s
j
) )

R
1
top
b
(w) and top
b
(t
j
) )

R
1
top
b
(w). W.l.o.g.
we consider only the former claim. The claim is proved by induction on the length
of s
j
 !

w. The case of zero length is trivial, so let s
j
 ! v !
l
w with l  0.
The induction hypothesis (on l) yields top
b
(v) )

R
1
top
b
(w). Furthermore, the
induction hypothesis (on d) yields top
b
(s
j
))

R
1
top
b
(v). This proves the claim.
Thus top
b
(w) is a common reduct of top
b
(s
j
) and top
b
(t
j
) w.r.t.)
R
1
. Accord-
ing to Proposition 3.12,  = 
2
 
1
, where 
1
is a black substitution and 
2
is
top white. Recall that 
2
2
denotes the substitution fx 7! 2 j x 2 Dom(
2
)g.
It is clear that top
b
(s
j
) = 
2
2
(
1
(s
j
)) and top
b
(t
j
) = 
2
2
(
1
(t
j
)). Hence

2
2
(
1
(s
j
)) +
R
1

2
2
(
1
(t
j
)) and thus 
2
2
(
1
(l)) )
R
1

2
2
(
1
(r)). Let
^
C[ ] be the
context obtained from C[ ] by replacing all white principal subterms with 2.
Now (1) follows from top
b
(s) =
^
C[
2
2
(
1
(l))] and top
b
(t) =
^
C[
2
2
(
1
(r))].
(2) Let s !
o
t by some rule from R
2
or s !
i
t. Since R
2
is layer-preserving,
we may write s = C
b
hhu
1
; : : : ; u
j
; : : : ; u
p
ii and t = C
b
hhu
1
; : : : ; u
0
j
; : : : ; u
p
ii, where
u
j
! u
0
j
. Hence top
b
(s) = top
b
(t). 2
In the preceding proposition, the assumption that (F
2
;R
2
) has to be layer-
preserving cannot be dropped, as is witnessed by the next example (cf. [Mid90,
Mid93]).
Example 4.20 Let R
1
= fF (x) ! G(x) ( x # Ag and R
2
= fh(x) ! xg.
Then F (h(A)) !
o
G(h(A)) by the only rule of R
1
but top
b
(F (h(a)))) = F (2)
is a normal form w.r.t.)
R
1
.
Our next goal is to show an analogous statement to Proposition 4.19 (1) with-
out the layer-preservingness requirement on (F
2
;R
2
) but under the additional
assumption that !
1;2
is semi-complete.
Denition 4.21 Let the rewrite relation !
1;2
be semi-complete. For t =
C
b
hht
1
; : : : ; t
m
ii, we dene top
b
!
(t) by:
top
b
!
(t) = top
b
(C
b
ht
!
1
; : : : ; t
!
m
i):
In other words, rst the white principal subterms in t are replaced with their
unique !
1;2
normal form, and then the topmost black homogeneous part of the
term obtained is taken.
Lemma 4.22 Let !
1;2
be semi-complete. If s and t are black terms and  is a
top white substitution such that s !
o
t by some rewrite rule from R
1
, then

!
(s)!
o
1

!
(t).
Proof: There is a context C[ ], a substitution  : V ! T (F ;V) and a rewrite
rule l ! r ( s
1
# t
1
; : : : ; s
n
# t
n
2 R
1
such that s = C[l], t = C[r]
and s
j
 # t
j
 for j 2 f1; : : : ; ng. Fix j. From Proposition 4.12 we know that
sj
 #
1;2
t
j
. According to Proposition 3.12,  can be decomposed into 
2
 
1
such that 
1
is black and 
2
is top white. Since !
1;2
is semi-complete, it follows
as in the proof of Lemma 4.9 that 
!
2
(
1
(s
j
)) #
1;2

!
2
(
1
(t
j
)). Applying Lemma
4.10 to the black terms 
1
(s
1
); : : : ; 
1
(s
n
); 
1
(t
1
); : : : ; 
1
(t
n
) and the substitution

!
2
yields 
!
2
(
1
(s
j
)) #
o
1

!
2
(
1
(t
j
)). Therefore, 
!
2
(
1
(l)) !
o
1

!
2
(
1
(r)). Let
^
C[ ] be the context obtained from C[ ] by replacing all white principal subterms
with their respective !
1;2
normal form. It is clear that 
!
(s) =
^
C[
!
2
(
1
(l))]
and 
!
(t) =
^
C[
!
2
(
1
(r))]. Thus 
!
(s)!
o
1

!
(t). 2
Proposition 4.23 Let !
1;2
be semi-complete. If s!
o
t by some rule fromR
1
,
then top
b
!
(s) )
R
1
top
b
!
(t).
Proof: We may write s = C
b
ffs
1
; : : : ; s
n
gg and t =
^
C
b
hhs
i
1
; : : : ; s
i
m
ii for
some black contexts C
b
f; : : : ; g,
^
C
b
h; : : : ; i, and i
1
; : : : ; i
m
2 f1; : : : ; ng. Let
x
1
; : : : ; x
n
be distinct fresh variables and dene  = fx
j
7! s
j
j 1  j  ng,
s
0
= C
b
fx
1
; : : : ; x
n
g, and t
0
=
^
C
b
hx
i
1
; : : : ; x
i
m
i. Since  is top white, we obtain

!
(s
0
) !
o
1

!
(t
0
) by Lemma 4.22. According to Proposition 3.12, 
!
has a
decomposition 
!
= 
2
 
1
, where 
1
is black and 
2
is top white. It follows
from Lemma 4.5 that 
2
2
(
1
(s
0
))!
o
1

2
2
(
1
(t
0
)) because 
2
/ 
2
2
. To verify that

2
2
(
1
(s
0
)) )
R
1

2
2
(
1
(t
0
)) is relatively simple. Now top
b
!
(s) )
R
1
top
b
!
(t) is a
consequence of
top
b
!
(s) = top
b
(C
b
fs
!
1
; : : : ; s
!
n
g) = top
b
(
!
(s
0
)) = top
b
(
2
(
1
(s
0
))) = 
2
2
(
1
(s
0
))
and top
b
!
(t) = 
2
2
(
1
(t
0
)). 2
The above preparatory considerations and the following two lemmata (the
proofs of which are omitted) pave the way for the main results of this subsection.
Lemma 4.24 If ! is well-founded on a set T  T (F ;V), then >= (! [>)
+
is a well-founded partial ordering on T . 2
Lemma 4.25 Let s !
o
t by an application of a non-duplicating rewrite rule
from R
1
. Then S
w
P
(t)  S
w
P
(s). 2
Theorem 4.26 Let R
1
andR
2
be terminating constructor-sharing CTRSs such
that their combined system R = R
1
[R
2
is not terminating. Then the following
statements hold (where d;

d 2 f1; 2g with d 6=

d):
1. There exists an innite R rewrite derivation D : s
1
! s
2
! s
3
! : : : of
minimal rank such that D contains innitely many s
j
!
o
s
j+1
reduction
steps where s
j
reduces to s
j+1
by some rule from R
d
.
2. R

d
is not layer-preserving.
3. If both systems are conuent, then D contains innitely many duplicating
s
j
!
o
s
j+1
reduction steps such that s
j
reduces to s
j+1
by some rule from
R
d
.
Proof: First of all, the rank of a derivation D : s
1
! s
2
! s
3
! : : : is de-
ned to be rank(D) = rank(s
1
). Let D be an innite R rewrite derivation of
minimal rank, say rank(D) = k. Then rank(s
j
) = rank(D) for all indices j.
Moreover, !
R
is terminating on T
<k
= ft 2 T (F ;V) j rank(t) < kg. If s
1
is
top transparent, say s
1
= C
t
[[t
1
; : : : ; t
n
]], then there must be an innite rewrite
derivation starting from some t
l
, l 2 f1; : : : ; ng with rank(t
l
) = k. Therefore,
we may assume without loss of generality that s
1
is top black or top white, say
top black. Fix j 2 IN. It is not dicult to verify that the term s
j
cannot be top
white and that rank(u) < k for each white principal subterm u 2 S
w
P
(s
j
).
(1) Suppose that there are only nitely many !
o
reduction steps using a rule
from R
1
in D. Then we nd an index j 2 IN such that the rewrite derivation
D
0
: s
j
! s
j+1
! s
j+2
! : : :
contains no such reduction steps at all. Thus, if s
j
= C
b
[[t
1
; : : : ; t
n
]], then there
must be an innite rewrite derivation starting from some t
l
2 S
w
P
(s
j
). But this
contradicts the minimality assumption on rank(D) since rank(t
l
) < rank(s
j
).
(2) Suppose that R
2
is layer-preserving, i.e., it contains neither collapsing nor
constructor-lifting rules. By Proposition 4.19, we have:
{ If s
j
!
o
s
j+1
by some rewrite rule from R
1
, then top
b
(s
j
))
R
1
top
b
(s
j+1
).
{ If s
j
!
o
s
j+1
by some reduction rule from R
2
or s
j
!
i
s
j+1
, then the
equality top
b
(s
j
) = top
b
(s
j+1
) holds.
From (1) we know that innitely many reduction steps of the former kind occur
in D. This yields a contradiction to the termination of )
R
1
.
(3) Let > = (!
R
[>)
+
. According to Lemma 4.24, (T
<k
; >) is a well-founded
ordering. Let (M(T
<k
); >
mul
) denote its well-founded multiset extension. Note
that S
w
P
(s
j
) 2 M(T
<k
): As in the proof of (1), we may suppose that there is
no outer reduction step using a duplicating rule from R
1
in D. We distinguish
between three cases:
{ If s
j
!
o
s
j+1
by some rule from R
1
, then it follows from Lemma 4.25 that
S
w
P
(s
j+1
)  S
w
P
(s
j
) because the reduction step is non-duplicating. Clearly,
this implies S
w
P
(s
j
) 
mul
S
w
P
(s
j+1
).
{ If s
j
!
i
s
j+1
by some reduction rule from R
1
, then there is a white
principal subterm u of s
j
such that u = C
w
[[u
1
; : : : ; u
l
; : : : ; u
n
]] !
C
w
[u
1
; : : : ; v
l
; : : : ; u
n
] = v. Evidently, v 2 S
w
P
(s
j+1
). It follows from
S
w
P
(s
j+1
) = (S
w
P
(s
j
) n [u])[ [v] that S
w
P
(s
j
) >
mul
S
w
P
(s
j+1
).
{ If s
j
! s
j+1
by some rule from R
2
, then there is a white principal subterm
u 2 S
w
P
(s
j
) such that u ! v for some v, i.e., s
j
= C
b
[[; : : : ; u; : : : ; ]] !
C
b
[; : : : ; v; : : : ; ] = s
j+1
. Thus we have S
w
P
(s
j+1
) = (S
w
P
(s
j
) n [u])[ S
w
P
(v). It
follows from u ! v in conjunction with v = w or v > w for any principal
subterm w 2 S
w
P
(v) that u > w for any w 2 S
w
P
(v). As a consequence, we
obtain S
w
P
(s
j
) >
mul
S
w
P
(s
j+1
).
We conclude from the well-foundedness of (M(T
<k
); >
mul
) that only a nite
number of inner reduction steps as well as reduction steps using a rule from R
2
occur in D. W.l.o.g. we may suppose that there are no reduction steps of that
kind in D. Consequently, for all j 2 IN, we have s
j
!
o
s
j+1
by some rewrite
rule from R
1
. Now !
1;2
is semi-complete because (F
1
;R
1
) and (F
2
;R
2
) are
complete. Proposition 4.23 yields top
b
!
(s
j
) )
R
1
top
b
!
(s
j+1
) for every j 2 IN.
This is a contradiction to the termination of )
R
1
. 2
Corollary 4.27 IfR
1
andR
2
are terminating constructor-sharing CTRSs, then
their combined system R is terminating provided that one of the following con-
ditions is satised:
1. Neither R
1
nor R
2
contain either collapsing or constructor-lifting rules.
2. Both systems are conuent and non-duplicating.
3. Both systems are conuent and one of the systems contains neither collaps-
ing, constructor-lifting, nor duplicating rules.
Proof: This is an immediate consequence of Theorem 4.26. 2
Corollary 4.28
1. Termination is modular for layer-preserving constructor-sharing CTRSs.
2. Completeness is modular for layer-preserving constructor-sharing CTRSs.
3. Completeness is modular for non-duplicating constructor-sharing CTRSs.
Proof: (1) is an immediate consequence of Corollary 4.27. (2) and (3) follow
from Theorem 4.14 in conjunction with Corollary 4.27. 2
Theorem 4.17 is also true for semi-equational CTRSs, see [Mid90]. Again, it
is plausible that Corollaries 4.27 and 4.28 also hold for semi-equational CTRSs.
5 Conclusions
We have shown that semi-completeness is a modular property of constructor-
sharing CTRSs and that completeness is modular for non-duplicating constructor-
sharing CTRSs. It is denitely worthwhile to try to extend these results to
more general kinds of combinations of CTRSs. In particular, the question arises
whether the above results also hold for composable CTRSs. Composable sys-
tems may share constructors as well as dened function symbols { if they share
a dened symbol, then they must contain every rewrite rule which denes that
dened symbols. A typical example is the combination of
R
1
=
8
>
>
<
>
:
0 + x ! x
S(x) + y ! S(x + y)
0  x ! 0
S(x)  y ! (x  y) + y
with
R
2
=
8
>
>
<
>
>
>
:
0 + x ! x
S(x) + y ! S(x + y)
fib(0) ! 0
fib(S(0)) ! S(0)
fib(S(S(x))) ! fib(S(x)) + fib(x)
R1
and R
2
share the constructors 0 and S as well as the dened symbol +.
R
1
and R
2
are composable since the two dening rewrite rules for + occur
in both of them. Recently, we have shown that the above results also hold for
composable unconditional TRSs { see [Ohl94a]. This gives reason to expect that
the aforementioned question has an answer in the armative. Note, however,
that the proofs presented in this paper do not carry over to composable systems.
Moreover, we point out that there are two closely related results obtained by
Middeldorp [Mid94]. He proved that semi-completeness and completeness are
modular for composable conditional constructor systems without extra variables
(it is yet unknown if the same is true when extra variables are allowed). Hereby,
a CTRS (F ;R) is called a conditional constructor system if all function symbols
occurring at non-root positions in left-hand sides of conditional rewrite rules are
constructors.
Another extension of combinations with shared constructors are hierarchical
combinations (see for example [Ohl94a] for a precise denition). The standard
example of a hierarchical combination is the following, where the base system
R
1
=

0 + x ! x
S(x) + y ! S(x + y)
is extended with
R
2
=

0  x ! 0
S(x)  y ! (x  y) + y
Here the dened symbol + occurs as a constructor in the right-hand side of the
second rule of R
2
and  does not appear in R
1
. [KR93, KR94, Der95, FJ94]
state sucient conditions which allow to conclude termination of the combined
system from the termination of the constituent systems. It goes without saying
that it should also be investigated which of the known modularity results for
hierarchical combinations of TRSs can be carried over to CTRSs.
Decreasing (nite) CTRSs have been investigated by many researchers be-
cause all basic properties (like reducibility for instance) are decidable and a
critical pair lemma holds for those systems (cf. [DOS88]). But in contrast to
the slightly less general simplifying property (see [Ohl93, Ohl94a]), decreasing-
ness is not modular (not even for disjoint CTRSs) { Toyama's counterexam-
ple [Toy87a] to the modularity of termination for disjoint TRSs applies be-
cause every terminating TRS can be regarded as a decreasing CTRS. Using
the modular reduction relation (see [KO91]), it is possible, however, to compute
(unique) normal forms w.r.t. the combined system of n nite, decreasing, con-
uent, and pairwise constructor-sharing CTRSs. Let us make this more precise.
Consider n pairwise constructor-sharing CTRSs (F
1
;R
1
); : : : ; (F
n
;R
n
), and let
(F ;R) = (
S
n
j=1
F
j
;
S
n
j=1
R
j
). Roughly speaking, the modular reduction rela-
tion requires that in reducing a term the same CTRS (F ;R
j
), j 2 f1; : : : ; ng, is
used for as long as possible. It can be shown that the modular reduction rela-
tion is complete whenever each of the n CTRSs is semi-complete. Suppose that
the n systems are decreasing and conuent (hence complete). Since every CTRS
(F
j
;R
j
), j 2 f1; : : : ; ng, is semi-complete, the modular reduction relation is
complete and moreover their combined system (F ;R) is semi-complete accord-
ing to Theorem 4.14. Thus every term t 2 T (F ;V) has a unique normal form t#
with respect to (F ;R). Now if in addition every R
j
is nite, then, due to the
decreasingness of the constituent systems, t# is computable by computing the
unique normal form of t w.r.t. the modular reduction relation. Rigorous proofs
of these facts can be found in [Ohl94a].
Acknowledgements:The author thanks Aart Middeldorp for discussions about
the subtleties of CTRSs.
References
[Der95] N. Dershowitz. Hierarchical Termination. 1995. This volume.
[DJ90] N. Dershowitz and J.-P. Jouannaud. Rewrite Systems. In L. van Leeuwen, ed-
itor, Handbook of Theoretical Computer Science, volume B, chapter 6. North-
Holland, 1990.
[DM79] N. Dershowitz and Z. Manna. Proving Termination with Multiset Orderings.
Communications of the ACM 22(8), pages 465{476, 1979.
[DOS88] N. Dershowitz, M. Okada, and G. Sivakumar. Canonical Conditional
Rewrite Systems. In Proceedings of the 9th Conference on Automated De-
duction, pages 538{549. Lecture Notes in Computer Science 310, Springer
Verlag, 1988.
[FJ94] M. Fernandez and J.-P. Jouannaud. Modular Termination of Term Rewriting
Systems Revisited. In ADT Workshop, 1994.
[Gra93] B. Gramlich. Sucient Conditions for Modular Termination of Conditional
Term Rewriting Systems. In Proceedings of the 3rd International Workshop
on Conditional Term Rewriting Systems 1992, pages 128{142. Lecture Notes
in Computer Science 656, Springer Verlag, 1993.
[Gra94a] B. Gramlich. Abstract Relations between Restricted Termination and Con-
uence Properties of Rewrite Systems. Fundamenta Informaticae, 1994. To
appear.
[Gra94b] B. Gramlich. Generalized Sucient Conditions for Modular Termination of
Rewriting. Applicable Algebra in Engineering, Communication and Comput-
ing 5, pages 131{158, 1994.
[Klo92] J.W. Klop. Term Rewriting Systems. In S. Abramsky, D. Gabbay, and
T. Maibaum, editors, Handbook of Logic in Computer Science, volume 2,
pages 1{116. Oxford University Press, 1992.
[KO91] M. Kurihara and A. Ohuchi. Modular Term Rewriting Systems with Shared
Constructors. Journal of Information Processing 14(3), IPS of Japan, pages
357{358, 1991.
[KO92] M. Kurihara and A. Ohuchi. Modularity of Simple Termination of Term
Rewriting Systems with Shared Constructors. Theoretical Computer Science
103, pages 273{282, 1992.
[KO94] M. Kurihara and A. Ohuchi. Termination of Combination of Composable
Term Rewriting Systems. In Proceedings of the 7th Australian Joint Confer-
ence on Articial Intelligence, 1994. To appear.
[KR93] M.R.K. Krishna Rao. Completeness of Hierarchical Combinations of Term
Rewriting Systems. In Proceedings of the 13th Conference on the Foundations
of Software Technology and Theoretical Computer Science, pages 125{139.
Lecture Notes in Computer Science 761, Springer Verlag, 1993.
[KR94] M.R.K. Krishna Rao. Simple Termination of Hierarchical Combinations of
Term Rewriting Systems. In Proceedings of the International Symposium on
Theoretical Aspects of Computer Software, pages 203{223. Lecture Notes in
Computer Science 789, Springer Verlag, 1994.
[Mar95] M. Marchiori. Modularity of Completeness Revisited. In Proceedings of the
6th International Conference on Rewriting Techniques and Applications. Lec-
ture Notes in Computer Science , Springer Verlag, 1995. To appear.
[Mid89] A. Middeldorp. A Sucient Condition for the Termination of the Direct Sum
of Term Rewriting Systems. In Proceedings of the 4th IEEE Symposium on
Logic in Computer Science, pages 396{401, 1989.
[Mid90] A. Middeldorp. Modular Properties of Term Rewriting Systems. PhD thesis,
Vrije Universiteit te Amsterdam, 1990.
[Mid93] A. Middeldorp. Modular Properties of Conditional Term Rewriting Systems.
Information and Computation 104(1), pages 110{158, 1993.
[Mid94] A. Middeldorp. Completeness of Combinations of Conditional Constructor
Systems. Journal of Symbolic Computation 17, pages 3{21, 1994.
[MT93] A. Middeldorp and Y. Toyama. Completeness of Combinations of Construc-
tor Systems. Journal of Symbolic Computation 15(3), pages 331{348, 1993.
[Ohl93] E. Ohlebusch. Combinations of Simplifying Conditional Term Rewriting Sys-
tems. In Proceedings of the 3rd International Workshop on Conditional Term
Rewriting Systems 1992, pages 113{127. Lecture Notes in Computer Science
656, Springer Verlag, 1993.
[Ohl94a] E. Ohlebusch. Modular Properties of Composable Term Rewriting Systems.
PhD thesis, Universitat Bielefeld, 1994.
[Ohl94b] E. Ohlebusch. On the Modularity of Conuence of Constructor-Sharing
Term Rewriting Systems. In Proceedings of the 19th Colloquium on Trees
in Algebra and Programming, pages 261{275. Lecture Notes in Computer Sci-
ence 787, Springer Verlag, 1994.
[Ohl94c] E. Ohlebusch. On the Modularity of Termination of Term Rewriting Systems.
Theoretical Computer Science 136, pages 333{360, 1994.
[Rus87] M. Rusinowitch. On Termination of the Direct Sum of Term Rewriting Sys-
tems. Information Processing Letters 26, pages 65{70, 1987.
[TKB89] Y. Toyama, J.W. Klop, and H.P. Barendregt. Termination for the Direct
Sum of Left-Linear Term Rewriting Systems. In Proceedings of the 3rd Inter-
national Conference on Rewriting Techniques and Applications, pages 477{
491. Lecture Notes in Computer Science 355, Springer Verlag, 1989.
[Toy87a] Y. Toyama. Counterexamples to Termination for the Direct Sum of Term
Rewriting Systems. Information Processing Letters 25, pages 141{143, 1987.
[Toy87b] Y. Toyama. On the Church-Rosser Property for the Direct Sum of Term
Rewriting Systems. Journal of the ACM 34(1), pages 128{143, 1987.
This article was processed using the L
a
T
E
X macro package with LLNCS style
