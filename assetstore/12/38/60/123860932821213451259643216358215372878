Notre Dame Journal of Formal Logic Volume 21, Number 4, October 1980

685

An Extension of the Basic Functionality Theory for the A-Calculus
M. COPPO and M. DEZANI-CIANCAGLINI

1 Introduction

The first works about the assignment of types to terms of

the X-calculus (or combinatory logic) arose in the context of logical theories of types.* Church [2] presented a first-order system with types based on X-

conversion, and since then many systems of this kind have been proposed; a review of them is given in the introduction of [15]. The problem of adjoining

new objects and deduction rules to combinatory logic is faced in a more general

way in [6] and [7], since Curry is interested in studying the properties of

illative systems to analyze their suitability as a framework for the study of

the foundations of logic. This leads him to introduce many different systems in

which the new objects and rules are interesting for different aspects of com-

binatory logic. As Curry points out ([6], p. 256), the introduction of an illative

system is always associated with some interpretation of terms.

The first and simplest of the illative systems proposed in [6] is the theory

of basic functionality which is suggested by the very natural interpretation of

terms as functions from terms to terms. In this system terms are associated

(through a set of formal axioms and deduction rules) with functional characters

or types. Types are built from a set of basic objects (which are left uninter-

preted) by a composition operator F, which builds a new type For from two

types or basic objects o and r. If a term has type For then we can interpret it

as a function from terms of type o to terms of type r.

Functionality theory is interesting in the foundational program of Curry

essentially since the constant F can very naturally be interpreted as implication. In this case a typed term can be seen as the representation of a proof in a

natural deduction system.

The authors are very grateful to Prof. J. P. Seldin for many useful suggestions to improve the results of this paper.

Received June 23, 1978; revised December 21, 1979

686 M. COPPO and M. DEZANI-CIANCAGLINI
The notion of functionality is also interesting if we look at X-calculus in the field of theoretical computer science. X-calculus, in fact, can be considered as a programming language (see, for example, [9]) which supplies a natural formal framework for studying a very general class of programming concepts (such as the notion of a fixpoint of a functional or of self-application). Many of the most recent results on programming languages are more or less derived from the study of X-calculus, especially the development of the mathematical base for denotational semantics, which started with the works of Scott [13], [14], Plotkin [10], and Wadsworth [17]. If we look at X-calculus in this framework, the notion of the functional character of a term generalizes that of type in programming languages.
From this and, perhaps, other points of view, however, Curry's theory is not quite satisfactory since there are many terms which don't possess any functional character, even if we assume, with Church, that only terms with normal forms are suitable to possess some kind of interpretation. Types, in fact, are not preserved by conversion (unless we postulate it explicitly as Curry does in some systems) and not even all terms in normal form have a type. The reasons the theory of basic functionality fails to be truly satisfactory may be found both in the structure given to types and in the system of type assignment rules (which heavily depend on type structure).
Many recent theories (see the introduction of [15] for a review of them) have generalized functionality theory by modifying both type structure and type assignment rules, leading to more general systems in which, however, the functional characters assigned to terms often become quite complex. A feature of all these theories is that types are considered, more or less explicitly, as functions from terms to types.
In this paper we present a generalization of the basic functionality theory which is achieved simply by defining a more powerful rule for type formation and modifying accordingly the deduction rules. The main idea is to define from any arbitrary finite set of types \TU . . ., rn\ a "sequence" [rl9 . . ., rn] whose underlying set of terms can be interpreted as the intersection of those of Tj, . . ., rn. This leads to a system in which, leaving the assignment rules substantially unchanged, the set of typed terms is much larger than in the basic functionality theory (in particular, all strongly normalizable terms possess at least one type). This fact can be intuitively explained by observing that the introduction of sequences leads to a more refined classification of terms which allows us to define, for any arbitrary term, a proper domain (if it exists) into which it is total. The consistency of the present system is given by the proof that every typed term reduces to a normal form (Section 3). In Section 4 we give a characterization of the set of typed terms which turns out to properly include the set of stratified terms (in the sense of [6], Ch. 9). As an immediate consequence of this characterization it turns out that, in the X-l-calculus, all convertible terms have the same set of types. This restriction is not substantial if we are interested in studying functionality, since all Turing computable functions can be represented inside the X-l-calculus.
The idea of extending basic functionality theory by allowing types to represent more refined categories was first introduced, implicitly, in the system proposed in [4]. There we introduce a partial-order relation between types

BASIC FUNCTIONALITY FOR THE X-CALCULUS

687

such that the class of terms with type r includes any class of terms with type greater than r. This inclusion can be seen as the weakest version of the intersection defined by sequences of types.

2 Formalization of the theory The set of types is defined inductively from a set of basic types \ipu <p2, . . .! by an operator of composition whichgeneralizes the object F of Curry's theory. In fact, while F builds a new type from two types, this operator (let us call it Ff for the moment) builds a new type from a type and a set of types, i.e.,if r is a type and [au . . ., on] (n > 1)is a set of types (sequence) then F'[ol9 . . ., on]r is a type. F'[ou . . ., OH]T is the type of a term which maps terms that have all types au . . ., on into terms of type r. We shall abbreviate this notation by omitting F' (without danger of confusion), i.e., wewill write [ou . . ., on]r instead of F'[ou . . ., on]r.
Definition 1 The set of types is defined as follows:
a. each basic type is a type b. if au . . ., on, T{n > 1) aretypes then [ol, . . ., OH]T is a type.
Example 1: r = [<pu <p2, v?3] [[yu <p2\^ly ^J^3 is a type.
We will write [o] instead of [a1?. . ., on] (n > 1) whenever possible. Sequences are intended as sets of types, so they areindependent of the order in which the types are written and of the number of occurrences of each type. More formally, we consider sequences modulo the following two equivalence relations:
[al9 . . ., a/, oi+u . . ., on] =[al9 . . ., a/+1,a,-, . . ., on] [ou . . ., a, a, . . ., on] =[ou . . ., o, . . ., an] (0 < / < « ) .
Using set theoretic notation we write r e [a] if r is a type in [a] and [a] U [r] to denote the sequence which is the union of [a] and [ r ] .The composition operator builds a new type from a type anda set of n types in > 1).Obviously, when n = 1, [ a j is theset of one type, andnota type.
We give now the T-formulation (see [6], p. 315)of our system of type assignment. A basis is a set of statements of the form [a]x, where [a] isa sequence and x a variable (1), which functions as axioms for a deduction. This notation is very similar to that of [15] (appendix to Section A) except that here we assign sequences instead of types to variables. This allows the assignment of an arbitrary number of types (possibly only one) to thesame variable. Moreover, it is notrestrictive to assume, in a given basis, that only one sequence can be assigned to thesame variable. We will doit in order to simplify notation.
If HP, # ' are bases then iS U 43' is thebasis obtained by assigning to each variable x the sequence [a] U [ a ' ] , where [a] and [a'] are the sequences assigned to x in 43 and43' respectively (obviously [a]([a']) is empty if x does not occur in-ff(#')). Basis inclusion (denoted 43Q43') is defined similarly.
43 h oX (43 h [o]X) means that from 43 we can deduce oX([o]X). In particular, if 43 is empty, we write haX(h[a]^0. Moreover if 43 h oX and -ffC-g',then#' hoX.

688 M. COPPO and M. DEZANI-CIANCAGLINI
The axiom scheme and rules of our system are:
Axiom (Ap') / / 13 contains [o]x and T e [o] then -& h TX.
Rule (Fe'). If # h [d]rX and 13 h [a] Y then 18 h r(XY). Rule (Fif). If # , [a]x h rX (so x does not occur in 13) then 18 h [a]rXx.Z
Rule (Seq). If 13 K a,X for 1 < / < n then # h [a1? . . ., on ]X.
Axiom Ap' and Rules Fe' and Fi' are straightforward generalizations of Ap, Fe, Fi of [6], p. 317. Rule Seq allows the assignment of sequences to terms (while Ap', Fe', and Fi' allow only assignment of types to terms).
Notice that, owing to the presence of sequences, in a deduction many different types can be assigned to the same occurrence of a component of a term X. This is not true in classical functionality theories where each component of X has exactly one type.
Example 2: We show one deduction of h"[<^]^(Xx. xx)\y.y.

Ap

r r 1 i r 1— Ap'

Seq

[ M l l M l * [[<p]y]x ,

Mv(xx)

.

— — Ap

— Ap

[y]ipy p.,

<py F\-\c\

[[y]<p][<p]<phy.y Mv^y-y ^

[[[<p]<p]M^ M<p][<p]^Xx.xx

[ [ M l H l l l , I^l^lX^.;; p^,

[(p]^(Xx.xx)Xy..y

It is easy to verify that (\x.xx)\y.y > Xy.y. Notice that this term is not stratified in the sense of [6]. It is clear that when X is not a single variable 13 h rX implies that some types can be assigned to the (immediate) components of X. More precisely:

if X = YZ then there exists a sequence [a] such that 13 h [a]rF and 13 h [d]Z.

ifX = Xx.yandT- [a]p then # , [a]x Hp7.

Moreover, if [a] = [ou . . ., on], # \~ [o]X implies 13 h otX for all i, I < / < n.
3 Main properties In this section we prove that types are preserved by reduction (Theorem I) and that each term which possesses a type reduces to a normal form (Theorem 2). Lemmas I and 2 present more technical results. As a corollary of Theorem 2 we obtain a new proof of the Normal Form Theorem for the basic functionality theory of [6], p. 340. The results of this section will be proved for statements of the form 18 \~ oX, where a is a type. It is trivial to extend them to statements of the form 13 h [a]X, where [a] is a sequence.
Lemma I If R is a redex and Rr its contraction, then 13 h rR implies
1B\-TR'.

Proof: Let R = (kx. Y)Z. Then there exists a sequence [a] = [ol> . . ., on] such that we can deduce 13 h TR from 13 h [o]r Xx. Y and 13 h [o]Z (x does not occur in 18). Moreover 13 h [o]r \x.Y only if 18, [o]x h TY. By definition R' = Y[x/Z]. To obtain 13 V TY[X/Z] it is sufficient to replace, in the proof of

BASIC FUNCTIONALITY FOR THE X-CALCULUS

689

# , [o]x \~ TY the statements OjX(introduced by Ap') by the deductions of id ha/Zfor 1< / < n .
Theorem 1 If X > X1 and id h oX then 1® h aX\
Proof: It is clearly sufficient to prove the theorem when X' differs from X by the contraction of only one redex. Let R be such a redex and Rf its contractum. The proof of id h oX' can be obtained from that of id h oX by replacing any deduction of a type for R by the corresponding deduction of the same type for R' (obtained as in the proof of Lemma I).
To prove Theorem 2 we associate to each deduction 0 of a statement 13 h oX an element (the measure of 0) of a well-ordered set (in our case the set of pairs of integers). We then show (Lemma 2) that if X is not in normal form, there exists some suitable redex R such that X > X' by the contraction of R and there is a deduction 0' of i3 \~oX' (obtained from 0 as in the proofs of Lemma 1 and Theorem 1) such that the measure of 0' is strictly lower than that of 0. The proof of Theorem 2 is an immediate consequence of this result. To introduce the notion of measure we need some technical definitions.
The length \\r\\ of a type r is defined as the number of occurrences of basic types in it. Now let ^ b e a deduction of id h oX and R = (Kx.Y)Z the occurrence of a redex in X. The characteristic set of R in 0 is the set O{R) of all types [jx]vassigned to the occurrences of Ax. Y in 0, i.e., £>(/?) = [[M]H [JX]P is a type of Xx.Y in 0). The height h(R) of R is the maximum length of the types of&(R), i.e., h(R) = max{||r|||r e 0(/?)}. The measureof a deduction 0 is the pair of nonnegative integers (m(0), n{0)) defined by:
m{0) = maximum height of redexes in 0 n{jy) - number of redexes with height m{0) in 0.
We intend m(0) = 0 if there are no redexes in X and n(0) = 0 if m(0) =0. Integer pairs can be ordered by the usual lexicographic order relation (<):
</*', k')< <h, k)iff ti < h or, ti = h and k' < k.
Example 3: If R = (Xx.xx)X^.^ and we consider the deduction ^7 of Example 2 then: #(/*)= {[[M*1M*, M * H * M , A(*) = 8, m(0) = 8, and n{0) =1.
Lemma 2 Le/1 ^ Z?e a ^ deduction of i3 \~oX where X is a term not in normal form. Then there is a term X1 and a deduction 0f of i3 h oXf such that X > X' and the measure of 0f is lower than that of 0.
Proof (constructive): Choose a redex (Xx. Y)Z in X such that:
i. its height is m(0) ii. no redex with height m(0) occurs in it.
It is obvious that in X there exists always at least one redex which satisfies these conditions. Let £>((Xx.y)Z) = {[ju/l^-iO < / < n\. LetX' be obtained from X by contracting (\x.Y)Z. If we consider the deduction 0' of id h oX1 obtained as in the proofs of Lemma 1 and Theorem 1, we observe that:
(1) all redexes in X' which are residuals of some redex in X have, in 0\ the same characteristic sets as in 0. Moreover the redexes of X which have more than one residual in X1 have heights lower than m(0), by(ii).

690 M. COPPO and M. DEZANI-CIANCAGLINI

(2) the new redexes in X' (i.e., those which are not residuals of any redex
n_
in X) have characteristic sets which contain either types belonging to | J [JU/]
7 =1
(if they are redexes of the form ZV for some component V of Y[x/Z]) or types belonging to \vu . . ., vn\ (if (kx.Y)Z is applied, in X, to some component W and Y[x/Z]W is a redex in X'). In both cases these redexes have heights lower than m{0).
Therefore X contains exactly one redex of height ra(/T) more than Xf. This
means that either m(fi") < ra(/O (if {\x.Y)Z was the only redex of height
miJff)) or m(&') = m(&) and n(0') < n{ff).

Theorem 2 If X is an arbitrary term and 13 \~ oX (for some basis 13 and type o) then X reduces to a normal form.
Proof: By transfinite induction on the measure of jy, where ff is a deduction of 13 h oX, using Lemma 2. We notice that, if the measure of £f is <0, 0>, then X does not contain redexes, i.e., it is a normal form.

Notice that, thanks to the Church-Rosser property, the result of Theorem 2 is independent of the order in which we execute the reductions (although the proof is not). Moreover, since B h oX is deducible only if we can associate a type to each component of X, Theorem 2 implies that each component of X has a normal form too (i.e., X is strongly normalizable). Since the type assignment of basic functionality theory, when we force the bases to contain only assignment to variables, is a particular case of the present theory, we obtain immediately as a corollary of Theorem 2 the Normal Form Theorem of [6], p. 340, for bases which satisfy this restriction. It is not difficult, however, to use Theorem 2 to prove the Normal Form Theorem in its full formulation.2

4 Some characterization of typed terms In this section we prove some results which give a characterization of the set of terms which possess a type in our system. We do it first by proving (Theorem 3) that all terms in normal form possess a type and then by characterizing (Lemma 3) the class of all expansions which preserve types. Since all typed terms must possess a normal form (Theorem 2) this is enough for a characterization of typed terms. An immediate consequence of Lemma 3 is that, inside the X-l-calculus, all normalizable terms possess a type and types are preserved by convertibility (Theorems 4 and 5).

Theorem 3 basis 13.

Each normal form N possesses at least one type for a suitable

Proof: By structural induction on N. First step. If N is a free variable (say a) we have [o]a h ra for all sequences [a] and types r e [a]. Inductive step. We split the proof according to two possible cases:

I. N = aNx . . . Nm (m > 0). By inductive hypothesis there exist some
basis 19i and types a,- such that 19i h a/iV/(l < / < m). Then if we choose
m
^ ~ U ^l U ^ a ^ * ' * {°rn]ra\ where r is any type, we obtain 13\~TN by m
/=i
applications of Fe'.

BASIC FUNCTIONALITY FOR THE X-CALCULUS

691

2. N = Xx.N. By inductive hypothesis there exist a basis 19' and a type r such that # ' h rTV. If # ' = # , [a]x, then we obtain, by Fi': 19 h [o]WVOtherwise, if # ' does_not assign a sequence to x, then x cannot occur in TV,so we have 18', [v]x h rTV for any sequence [57] and by Fi': 18' h [?]rN.
Lemma 3 Let R = (Xx.7)Z and R'= Y[x/Z]. <G\-TR' implies 18 \-TR iff there exists a sequence [a] such that 19 h [o]Z.
Proof: The "only if" part is obvious. In the "if" part we distinguish two cases, according to whether x occurs (Case I) or not (Case 2) in Y (notice that Case 2 can occur only in the X-K-calculus).
Case 1: We will consider only the occurrences of Z in Y[x/Z] which replace occurrences of x in Y. Let [a] be the collection of all types assigned to Z in one deduction of 19 h TR'([O] is nonempty since x occurs in Y). Then i9 h [d]Z. Moreover we can obtain 18, [a]x \~TY by replacing, in the proof of i3 \- TR\ the deductions of 19 h pZ (for each p e [a]) by the statements px obtained by Ap' from [o]x. So we have 19 h [o]r\x.Y and, by Fe', 19 \~TR.
Case 2: In this case R' = Y. Then 18 h [V]T\X. Y for all sequences [v] and from 1S h [o)Z we obtain 19 h rR by Fe'.
Theorem 4 /« r/ze \-\-calculus, if X = X' a^2(i # h a Z r/ze^ i& h aX'.
Proof: Immediate from Lemmas 1 and 3.
Theorem 5 7/7 r/ze \-\-calculus, if X is an arbitrary term then 19 h rX (for some basis 19and type r) iff X reduces to a normal form.
Proof: The "if" part is immediate from Theorems 3 and 4, and the "only if" part is immediate from Theorem 2.
Conclusion The present generalization of basic functionality theory turns out to be satisfactory in the X-l-calculus in the sense that each solvable, i.e., normalizable (see [I]), term possesses a type. This is no longer true in the X-K-calculus since, in this case, the class of solvable terms does not coincide with that of strongly normalizable terms. It is not at all clear, moreover, that the terms to which it can be interesting to assign a functional character are only the normalizable ones (for example, the fixed-point combinator Y plays an important role in the X-definition of partial recursive functions). If we consider the X-calculus as a language to describe functions, the results on models of the X-calculus suggest that only unsolvable terms (in the sense of [17]) are completely meaningless. A further extension of the present theory, in which it is possible to assign meaningful functional characters to all solvable terms, can be obtained [5] by introducing a new object co with the meaning of a universal category as the object E of Curry ([6], p. 240).This is done by Salle [12], who generalizes the theory of [4]. Since co is a universal category we have that, in the systems of [5] and [12], each term possesses at least type CJ but only solvable terms turn out to possess types which carry information substantially greater than that of co.
Lastly, let us examine briefly the behavior of types with respect to ^-conversion. Owing to the existence of basic types, the present type assign-

692 M. COPPO and M. DEZANI-CIANCAGLINI
ment is not invariant by 77-expansion, since for example \-[y]<p\x.x but H~[<p]ip\xy.xy (when <p is any basic type). Moreover types are not invariant by 17-reduction, and this is essentially due to the possibility of introducing, in sequences, types which are not "used" in the deduction. For example, h[ [O]T] [a, p)r\xy.xy but V~[ [O]T] [o,p]r\x.x for all types a, p, r. The invariance of types under 77-convertibility is obtained, instead, in the systems presented in [4] and [12], thanks to some equivalence relations which are postulated between basic types.
NOTES
1. We make this last restriction since we are interesed in the X-calculus without extra objects. It is not difficult, however, to introduce systems without this restriction.
2. J.P. Seldin [16] proves the Normal Form Theorem for the T-formulation of functionality theory taking into account the types which are assigned to redexes but in a way which is easier than that one done here. This is essentially because of the possibility of carrying over Prawitz' Normalization Theorem for classical logic [11]. This is done simply by thinking of types as formulas and For asaDr and by defining in a suitable way a reduction which corresponds to D-reduction.
REFERENCES
[1] Barendregt, H., "A characterization of terms of the X-I-calculus having a normal form," The Journal of Symbolic Logic, vol. 38 (1973), pp. 441-445.
[2] Church, A., "A formulation of the simple theory of types," The Journal of Symbolic Logic, vol. 15 (1940), pp. 56-68.
[3] Church, A., The Calculi of Lambda-Conversion, Annals of Mathematical Studies, no. 6, Princeton University Press, Princeton, New Jersey, 1941.
[4] Coppo, M. and M. Dezani-Ciancaglini, "A new type assignment for X-terms," Archiv fur Mathematische Logik und Grundlagenforschung, vol. 19 (1978), pp. 139-156.
[5] Coppo, M., M. Dezani-Ciancaglini, and B. Venneri, "Functional characters of solvable terms," Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik, to appear.
[6] Curry, H. B. and R. Feys, Combinatory Logic, vol. 1, North-Holland, Amsterdam, 1958.
[7] Curry, H. B., R. Hindley, and J. P. Seldin, Combinatory Logic, vol. 2, North-Holland, Amsterdam, 1972.
[8] Kleene, S. C, "X-definability and recursiveness," Duke Mathematical Journal, vol. 2 (1936), pp. 340-353.
[9] Morris, J. H., X-CalculusModels of Programming Languages, Ph.D. thesis, MITMAC Reprint TR-57, Massachusetts Institute of Technology, Cambridge, Massachusetts, 1968.
[10] Plotkin, G.,A Set Theoretical Definition of Application, Memo, MIP-R-85, Edinburgh, 1972.

BASIC FUNCTIONALITY FOR THE X-CALCULUS

693

[11] Prawitz, D., Natural Deduction, a Proof-Theoretical Study, Almqvist & Wiksell, Stockholm, 1965.
[12] Salle, P., "Une extension de la theorie des types en X-calcul," pp. 398-410 in Automata, Languages and Programming, eds., G. Ausiello and C. Bohm, Lecture Notes in Computer Science, Springer-Verlag, vol. 62, 1978.
[13] Scott, D., "Continuous lattices," pp. 97-136 in Toposes, Algebraic Geometry and Logic, ed., F. W. Lawvere, Lecture Notes in Mathematics, Springer-Verlag, vol. 274, 1972.
[14] Scott, D., "Data types as lattices," SIAM Journal on Computing, vol. 5 (1976), pp. 522-587.
[15] Seldin, J. P., The Theory of Generalized Functionality I, Unpublished manuscript, Southern Illinois University at Carbondale, 1976.
[16] Seldin, J. P., "A sequent calculus for type assignment," The Journal of Symbolic Logic, vol. 42 (1977), pp. 11-28.
[17] Wadsworth, C. P., "The relation between computational and denotational properties for Scott's Doo-models of the lambda calculus," SIAM Journal on Computing, vol. 5 (1976), pp. 488-521.

Istituto di Scienza dellInformazione dell Vniversita di Torino CorsoMassimo d'Azeglio 42-10125 Torino, Italy

