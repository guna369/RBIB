A Ra t i ona l Reconst ruc t ion and Extens ion of Recurs ion Analys is * 
A l a n Bundy, Frank van Harmelen, Jane Hesketh 
A l a n Smai l l , and And rew Stevens 
Department of Artificial Intelligence, University of Edinburgh, 
80 South Bridge, Edinburgh, EH1 1HN, Scotland 
Abs t rac t 
The focus of this paper is the technique of re-
cur8\on analysis. Recursion analysis is used 
by the Boyer-Moore Theorem Prover to choose 
an appropriate induct ion schema and variable 
to prove theorems by mathematical induct ion. 
A rat ional reconstruction of recursion analysis 
is out l ined, using the technique of proof plans. 
This rat ional reconstruction suggests an exten-
sion of recursion analysis which frees the in -
duct ion suggestion f rom the forms of recursion 
found in the conjecture. Prel iminary results 
are reported of the automation of this rat ional 
reconstruction and extension using the CLAM-
Oyster system. 
1 In t roduc t ion 
The work described in this paper is part of a project to 
explore the use of proof plans for the automatic guidance 
of mathematical proofs. In part icular, we are developing 
proof plans for the proofs by mathematical induction 
that are required in the automatic synthesis of computer 
programs f rom their specifications. Given a conjecture, 
the CLAM plan format ion program constructs a proof 
plan to solve it f rom existing proof tactics. This proof 
plan is then used to guide the Oyster proof development 
system, [Horn, 1988], in a proof of the conjecture. Oyster 
is a Prolog re-implementation of Nupr l , [Constable et a/., 
1986]. They are both proof checkers for Intui t ionist ic 
Type Theory, a logic based on the work of Mart in-Lof . 
Oyster reasons backwards from the conjecture it is t ry-
ing to prove, using a sequent calculus formalism which 
includes rules of inference for mathematical induct ion. 
The search for a proof must be guided either by a hu-
man user or by a Prolog program called a tactic. The 
Oyster search space is very big, even by theorem prov-
ing standards. There are hundreds of rules of inference, 
many of which have an inf inite branching rate. So care-
fu l search is very impor tant if a combinatorial explosion 
is to be avoided. 
*The research reported in this paper was supported by 
SERC grant GR/E/44598, Alvey/SERC grant GR/D/44270, 
an SERC Senior Fellowship to the first author and an SERC 
postgraduate studentship to the last author. We are grateful 
to the other members of the mathematical reasoning group at 
Edinburgh for many useful discussions and to an anonymous 
IJCAI-89 referee for extensive feedback. 
Our aim is to develop a collection of powerful, heuris-
t ic tactics that w i l l guide as much of the search for a 
proof as possible, thus relieving the human user of a te-
dious and complex burden. These tactics need to be 
applied flexibly in order to maximise Oyster's chances 
of proving each theorem. Proof plans provide this flex-
ible application. Each tactic is part ial ly specified by a 
method, which is a description, in a meta-logic, of the 
preconditions and effects of the tactic. CLAM reasons 
w i th these methods to bui ld proof plans. A proof plan 
for a conjecture defines a tactic tailor-made to generate 
a proof of that conjecture. 
The state of the ar t in inductive theorem proving is 
the Boyer-Moore Theorem Prover, [Boyer and Moore, 
1979] (henceforth BMTP). It is, thus, natura l for us to 
t r y and represent the heuristics embedded in the BMTP 
as Oyster tactics. [Bundy, 1988] contains an analysis 
of some of these heuristics. We have used this analysis 
to implement a number of Oyster tactics for inductive 
proofs and have successfully tested them on some simple 
theorems drawn from the l i terature, [Bundy et a/., 1988]. 
2 Recursion Analysis 
Recursion analysis is the name we have given to the 
process, embedded in BMTP, of analysing the recursive 
structure of a conjecture and deciding what form of in-
duction to use to prove i t . This choice is cr i t ical to the 
success of the proof at tempt . Recursion analysis picks 
one out of several induction suggestions. An induction 
suggestion consists of an induction schema and some in-
duction variables1. The form of the recursive functions 
contained in the conjecture is used to construct raw in-
duction suggestions. These are then combined together 
into a final induction suggestion, which is the one used 
in the proof. In this section we w i l l explain the rat ional 
reconstruction of recursion analysis given in [Stevens, 
1988]. In later sections we w i l l see how to realise this 
rat ional reconstruction w i th in proof plans and how to 
extend i t . 
We can best explain how recursion analysis works by 
example. Consider the conjecture: 
(1) 
where the recursive definitions of -f and even are given 
in the top left hand corner of figure 1. Formulae of the 
however, in subsequent sections we wil l restrict ourselves 
to single variable inductions. 
Bundy, van Harmelen, Hesketh, Smaill and Stevens 359 
form X:T are to be read as ''X is of type T " , and pnat 
is the type of Peano natural numbers. Note that the 
definit ion of + steps down in single steps, whereas the 
definit ion of even steps down in double steps. The num-
ber of steps is determined by the term occurring in the 
recursive argument position in the head of the step for-
mula of the definit ion. These terms are emphasised w i th 
an underbrace in the definitions of + and even in fig-
ure 1. We w i l l call them recursion terms. The recursive 
function in the body of the definit ion is emphasised by 
an overbrace. 
To each recursion schema there corresponds a dual 
induction schema. For instance, the induction schema 
dual to 1 step recursion is: 
where P(x) ranges schematically over formulae which 
contain x 2 . To emphasise the dual i ty between induc-
t ion and recursion, the induction terms of each schema 
are also underbraced. Note that we have renamed the 
induction variable, x, to x' in the induction hypothesis 
and conclusion, cf. the renaming of x to x' in figure 1. 
This renaming is necessary for soundness, since T may 
contain x. 
Recursion analysis locates the recursive functions in 
the conjecture. Each occurrence of a recursive function, 
F3, w i th a variable, X, in its recursive argument posi-
t ion, gives rise to a raw induction suggestion. The in-
duction variable suggested is X. The induction schema 
suggested is the one dual to the form of recursion used 
to define F. Appl ied to the conjecture 1 this produces 
the raw induction suggestions given in table 1. 
Note that each occurrence of x gives rise to a raw in -
duction suggestion. Unfortunately, the two occurrences 
suggest two different induct ion schemata: a 2 step and 
1 step schema. Fortunately, the 2 step schema subsumes 
the 1 step schema. This is because the recursion term 
of the 2 step schema consists of repeated nestings of the 
recursion term of the 1 step schema. Thus the 2 step, x 
2 But it may also contain other variables, and is not nec-
essarily unary. 
3F is a meta-variable ranging over object-level functions. 
We use the conventions that: object-level variables are rep-
resented as meta-level constants, only meta-level variables 
start with an upper case letter, and the word 'function' is 
used in the lambda calculus sense to include predicates and 
connectives. 
schema is adopted as the single schema for x, replacing 
both itself and the 1 step, x schema. In general, there 
may not be an already suggested schema for a variable 
that subsumes al l the others, but it may be possible to 
find a new schema that does. Stevens' recursion anal-
ysis, [Stevens, 1988], finds such all-subsuming schemata 
by merging one or more raw induct ion suggestions. For 
instance, a 2 step and 3 step induct ion would be merged 
to give a 6 step schema that subsumed bo th 4 . 
The end result of merging is a set of suggestions cover-
ing every dist inct (i.e. non-subsumed) induction schema 
that can be derived from the raw induct ion schemata. 
In our example we would have a 2 step schema for x 
and a 2 step schema for y. A l l that remains is to choose 
which one should become the final induct ion suggestion. 
Note that the 2 step, x schema w i l l produce an induc-
t ion conclusion w i th the term s(s(x')) replacing each oc-
currence of x, and that , by design, a recursive defini-
t ion w i l l match the term immediately dominating each 
of these occurrences in the induct ion conclusion, namely 
even(s(s(x'))) and s(s(x ')) + y. The same is not true of 
the 2 step, y schema. The second occurrence of y did not 
play a role in formation of this induct ion suggestion, and 
no recursive definit ion w i l l match the term x + s($(y')) 
which it gives rise to in the induct ion conclusion. The 
replacement of the second occurrence of y w i t h s(s(y')) 
is regarded as unsuitable. Boyer and Moore classify such 
suggestions as flawed5. Flawed suggestions are rejected if 
any unflawed ones remain, so that in the example above, 
the 2 step, x suggestion is the one that is finally chosen. 
In the event of a tie the induction subsuming the largest 
number of raw suggestions is chosen. 
BMTP and [Stevens, 1988] use recursion analysis to 
construct induction schemata at run t ime, and hence 
must prove them well-founded after construction. We 
have not reconstructed this aspect of recursion analysis, 
and so do not discuss it further here. Our induction sug-
gestions must be formed f rom those schemata for which 
Oyster currently has induct ion rules of inference. 
The BMTP only uses the final induct ion suggestion 
generated by recursion analysis. Note that this makes 
its choice dependent on the forms of recursion found in 
the conjecture. For instance, it could not prove the clas-
sic version of the prime factorisation theorem6 . This uses 
a form of induction in which the induct ion term is p x x' , 
where p is a prime number. No p x x' recursion occurs 
in the theorem itself, or can be constructed by merging 
recursions in the theorem. 
Nevertheless, recursion analysis is extraordinari ly suc-
cessful. For many simple theorems, the final form of 
induct ion it suggests leads to a proof. Why is this? 
4The original BMTP deals with subsumption as a situ-
ation distinct from (as opposed to subsumed by) merging. 
One consequence is that it is unable to deal with the 2/3 
step situation and others like it. 
5See [Boyer and Moore, 1979] or [Stevens, 1988] for a full 
definition of unsuitable replacements and flawed suggestions. 
6 BMTP does prove a non-classic, 'verification' version of 
this theorem which, in the place of an existentially quanti-
fied variable, includes a function, defined by p x x' recursion, 
which returns the prime factors of a natural number. In the 
classic version (see §7 below) these factors are merely asserted 
to exist. Because the classic version includes an existential 
quantifier, it cannot even be stated in the BMTP logic. 
360 Automated Deduction 
3 A Proo f P lan for Induct ive Proofs 
We believe that the BMTP succeeds so often because 
many inductive proofs have the same overall shape. The 
BMTP heuristics combine to produce proofs of this over-
al l shape. In part icular, the final induction suggestions 
of recursion analysis ini t iate proofs of this type and gen-
erate subgoals that the other heuristics are designed to 
solve. We believe that proof plans provide a good no-
tat ion for describing this overall shape and accounting 
for the way that the heuristics combine together, [Bundy, 
1988]. Proof plans can be used to predict and account for 
the successes and failures of the BMTP. They also suggest 
ways of improving and extending the BMTP heuristics. 
In part icular, we w i l l show how to use proof plans to ac-
count for the success of recursion analysis, and to extend 
it to make it independent of the forms of recursion found 
in the conjecture. 
We can best explain the overall shape of BMTP proofs 
by example. Figure 1 is an outl ine of the proof of conjec-
ture (1) which is generated by our Oyster program using 
our rat ional reconstruction of the BMTP heuristics. The 
Oyster notat ion has been slightly simplified for exposi-
tory reasons. 
Each formula is a sequent of the form H I- G, where I-
separates the list of hypotheses, H, f rom the goal, G. The 
first sequent is a statement of the conjecture. Each suc-
cessive sequent is obtained by rewri t ing a subexpression 
in the one above i t . The subexpression to be rewrit-
ten is underlined and the subexpression which replaces 
it is overlined. Only newly introduced hypotheses are 
actually wr i t ten in successive sequents; sequents are to 
be understood as inherit ing al l those hypotheses above 
them in the proof. In the spaces between the sequents 
are the names of the tactics which invoke the rewrit ing. 
The proof is by backwards reasoning from the state-
ment of the conjecture. The induction tactic applies the 
2 step induction schema to the conjecture: replacing x 
by 0 and 5(0) in the two base cases, and by x' in the 
induction hypothesis and s(s(x')) in the induction con-
clusion of the step case. The base and step tactics then 
rewrite the base cases and the step case, respectively, 
using the base and step formulae of the recursive defini-
tions of + and even. The two applications of base rewrite 
both the base cases to tautologies, which the sym_eval 
tactic reduces to true. The four applications of step raise 
the occurrences of the successor function, s, f rom their 
innermost positions around the x's un t i l they are ab-
sorbed by the application of the step formula of even. 
The induction conclusion is then identical to the induc-
t ion hypothesis. The fertilize tactic uses the latter to 
deduce the former. 
ripple.out is a super-tactic which is responsible for the 
repeated application of step to the induction conclusion 
— raising the recursion terms, ind_strat, which is an ab-
Bundy, van Harmelen, Hesketh, Smaill and Stevens 361 
breviation of induction strategy, is a super-super-tactic 
for guiding the whole of this proof, apart f rom the two 
sym_eval applications. It is defined by combining the 
sub-tactics induction, base, ripplejout and fertilize in 
the order suggested by the proof in figure 1. sym_eval, 
which is an abbreviation of symbolic evaluation, puts ex-
pressions in normal form by unpacking definitions, el im-
inating quantifiers, applying reflexivity and recognising 
tautologies. It is also a super-tactic which repeatedly ap-
plies step, base, identity, intro and tautology. A large 
number of inductive proofs can be understood as a com-
binat ion of ind_strait and sym_eval, although not always 
in the combination i l lustrated in figure 1. For instance, 
there are often several nested applications of ind_strat 
before sym_eval is used to finish off the proof. 
Note how ripple_out acts as a bridge between the 
induction and fertilise tactics, induction makes the 
induct ion conclusion differ f rom the induct ion hypoth-
esis by the insertion of induct ion terms for the induc-
t ion variable. These induct ion terms form a barrier to 
fertilizers use of the induct ion hypothesis to prove the 
induct ion conclusion, ripplejout removes this barrier 
w i th a series of steps which raise the induct ion terms 
out of their inner-most positions. Recursion analysis en-
sures that the induct ion terms inserted w i l l have just 
the r ight form for the first wave of steps7 to succeed, i.e. 
those steps that raise the induct ion terms past the inner-
most functions that dominates them. The raw induction 
suggestion made by each recursive function occurrence 
proposes an induct ion term which is a syntactic vari-
ant of that recursive function's recursion term. So if this 
induct ion term is inserted then step is guaranteed to suc-
ceed on this occurrence. If the final induction suggestion 
is unflawed and subsumes al l the raw suggestions, then 
step is guaranteed to succeed on al l the occurrences, al-
though repeated steps may be required to completely l i f t 
the final induct ion term. This is the reason for choosing 
an induction schema based on the recursive schemata 
used to define the functions in the conjecture. These 
conditions only guarantee the success of this first wave 
of steps, not the whole ripple_out tactic. 
4 F i t t i n g P roo f Plans to Conjectures 
We have implemented each of the tactics i l lustrated 
above by a Prolog program which can guide the Oys-
ter proof checker to make the appropriate logical steps. 
Furthermore, we have specified each of these tactics w i th 
a method. CLAM uses these methods to bui ld a tactic 
tailor-made to prove the whole of each conjecture. 
A method is represented as a frame of 6 slots which 
between them describe the conditions under which its 
tactic is applicable and the effect if this application is 
successful. 
A l l that w i l l concern us in this paper are the input 
formula slot and the preconditions slot of the ind_strat 
method. Consider the preconditions of the version of 
the ind_strat method described in an early version of 
our program. W i t h some minor generalisations, these 
were: 
recur sive(FTerm, X, RTerm) (3) 
where Conj is the input formula, X ranges over object-
level variables, FTerm ranges over object-level terms, 
RTerm ranges over object-level recursion terms, N is a 
natural number and Posn is a position. These meta-
variables are al l universally quantif ied globally8 to the 
method. A position is a list of argument numbers, 
e.g. [1,2,3] would represent the 1st argument of the 
2nd argument of the 3rd argument of an expression. 
exp_at{Exp, Posn) = SubExp means that SubExp is the 
subexpression found at posit ion Posn in expression Exp. 
recursive(FTerm, X, RTerm) means FTerm is a term 
whose dominent funct ion is recursively defined w i th the 
variable, X, in its recursive argument and w i th recursion 
term, RTerm, e.g. the information that even is defined 
recursively w i t h recursive term s(s({ /)) is represented by 
the meta-assertion recursive(even(U), U, s(s[U)))9. Re-
cursion terms contain the crucial information that CLAM 
needs to pick an induct ion schema f rom those available 
to Oyster. The final induction suggestion w i l l consist 
of an recursion term and a recursion argument. CLAM 
picks an induct ion schema w i t h an induct ion term that 
matches this recursion term. Induct ion schemata are in-
dexed by their induction terms. 
Part of the process of planning involves fitting meth-
ods to the current conjecture. To fit a method, the input 
formula is matched to the conjecture and then the pre-
conditions are checked to see if they are satisfied and 
to instantiate their meta-variables. For instance, fitting 
these preconditions to the conjecture, ( l ) , above, pro-
duces the variable instantiations given in table 2. Com-
parison of these w i t h table 1 w i l l show that what this 
method fitting process does is to generate the raw in-
duction suggestions. 
5 Extend ing P lan F i t t i n g to Per form 
Recursion Analysis 
Two questions arise natural ly. 
• The preconditions, (3), above only guarantee the 
success of one application of the step tactic for one 
occurrence of X. Can they be extended to at least 
guarantee the success of the first wave of steps'! 
• The fitting of the preconditions, (3), above only gen-
erates raw induction suggestions. Can they be ex-
tended to do recursion analysis, i.e. to generate 
final induct ion suggestions? 
8So the quantifiers do not appear within the preconditions 
slot, (3), above. 
9Note the use of the meta-variable U ranging over object-
level variables, which wil l be instantiated to whatever X 
is instantiated to when recursive(FTerm,X, RTerm) and 
recursive(even(U),U, s(s(U))) are unified. 
362 Automated Deduction 
The answer to both these questions is yes. The beau­
t i fu l part of these answers is that the same extensions to 
the preconditions suffice in each case, i.e. in extending 
the preconditions to guarantee the success of later parts 
of the plan, the processes of flaw checking, subsumption 
checking and merging are generated natural ly as a side-
effect. Their presence and success in BMTP is thereby 
explained. 
The extended preconditions are: 
) 
where subsumes (RTerm, RTerm!) means that RTerm 
subsumes RTcrm1, e.g. subsumes(s(s(x)),s(x)). Only 
those meta-variables whose scope is restricted to the 
preconditions are quantif ied w i th in them. The others, 
e.g. RTerm, are universally quantif ied globally to the 
method. 
These revised preconditions extend the original pre­
conditions to every occurrence of every variable, X, in 
the conjecture, Conj. They check firstly that each such 
occurrence is at the recursive argument position of a 
recursive funct ion and secondly that there is a term, 
RTerm, that subsumes al l the recursion terms of these 
recursive functions. The instantiations of RTerm and X 
constitute the final induct ion suggestions and the instan-
tiations of RTerm1 and X the raw induction suggestions. 
Care has been taken in our implementat ion so to define 
subsumes that at tempts to satisfy i t , w i th its second 
argument instantiated and its f irst argument uninstant i-
ated, efficiently produce min imal subsuming schemata. 
F i t t i ng these preconditions to the conjecture 1 above, 
produces the variable instantiations given in table 3. The 
first line of this table is the required final induction sug­
gestion. 
Table 3: F i t t i ng the New ind_strat Method to the Even+ 
Example 
The second line of the table is a suggestion that ac­
tual ly /at/5 the preconditions, (4). We have included it 
and the Status column for the sake of the following dis­
cussion. An induct ion suggestion that meets all the pre­
conditions may not always be available, e.g. both x and 
y are flawed in x + y = y + x . In such cases we may want 
to follow BMTP and settle for the suggestion that meets 
most of them. We can classify the variables in the con­
jecture as follows. Those variables which occur only in 
recursive positions w i l l be called unflawed and those that 
occur in non-recursive positions w i l l be called f lawed. 
Those variables for which there is a schema that sub­
sumes al l the schemata of its recursive occurrences w i l l 
be called compatible and the rest w i l l be called incom-
patible. Thus only unflawed-compatible variables com­
pletely meet the preconditions (4). Note that an instan­
t iat ion of RTcrm can only be given for compatible vari­
ables. Suggestions are preferred in the order: unflawed-
compatible, flawed-compatible, unflawed-incompatible, 
flawed-incompatible. Ideally, our method fitting process 
would be flexible and accept part ia l ly fitting methods 
if fu l ly fitting ones are not available. However, in the 
current implementat ion we have adopted the short term 
expedient of bui lding this flexibil ity in to the precondi­
tions themselves. See [Bundy et al., 1988] for details. 
6 The Use of Lemmas in Ripp l ing-Out 
The step tactic, which is restricted to using rewrite rules 
based on the step formula of recursive definitions, is not 
always strong enough to enable ripple_out to succeed. 
Consider the following expression: 
where x is defined by: 
step applies to this once, to produce the expression: 
but the argument of even is not of the form s(s(...)), 
so step w i l l not apply a second t ime; ripple_out w i l l f a i l 
What would permit another r ipple, moving even adja­
cent to x X y, is the application of theorem (1) as a 
rewrite ru le 1 1 , i.e. applying: 
(5) 
produces the expression: 
which contains even(x x y) as required. 
In general, we want to extend step to a new tactic 
wave, which uses rewrite rules of the form: 
(6) 
where U ranges over object-level variables, F ranges over 
object-level functions and B and C range over object-
level terms. We w i l l call rewrite rules of the form (6) 
wave rules, where F(U) is the wave function, U is the 
wave argument and B(U) is the wave term by analogy 
to recursive funct ion, recursion argument and recursion 
term, respectively. The wave terms in wave rules are 
10This definition of flawing corresponds in spirit to the 
Boyer-Moore definition, but differs from it in minor ways. 
11 Recall that the proof is constructed by backwards rea­
soning, so that an implication of the form P —► Q should be 
used as a rewrite rule Q => P. 
Bundy, van Harmelen, Hesketh, Smaill and Stevens 363 
underbraced and the wave functions are overbraced. The 
braces in rule (5) above show that it is a wave rule in two 
ways: one for each occurrence of the wave funct ion on the 
r ight hand side of the rule. The wave tactic allows us to 
ripple out through non-recursive functions, non-recursive 
argument positions of recursive functions, and recursive 
argument positions that do not contain the appropriate 
constructor functions. 
Step formulae of recursive definitions are usually wave 
rules. In addi t ion, each theorem that Oyster proves can 
be tested to see if it has the r ight form and, if so, it can 
be stored as a wave rule for future use. 
7 E x t e n d i n g R e c u r s i o n A n a l y s i s 
Now that we have generalised ripple_out beyond the use 
of step formulae of recursive definitions, it is natural to 
consider generalising the preconditions of the ind_strat 
method to meet the new opportunit ies this provides. 
The key observation is that the induction term does 
not have to be derived f rom just the recursion terms of 
recursive functions in the conjecture. More generally, it 
can be derived f rom some wave rules' wave terms. We 
require only that its insertion would cause those wave 
rules to match subexpressions of the induct ion conclu­
sion. The recursion terms of recursive functions are can­
didates, but they are not the only ones. 
To i l lustrate this, consider the conjecture that ev­
ery natural number can be factorized into a product of 
primes. We w i l l formalise this as: 
where prod is defined by: 
Note that this definit ion is not based on a pxx' recursion. 
Now consider the rewrite rule: 
(8) 
As indicated by the braces, it is a wave rule whose wave 
funct ion is prod(tl) = u and whose wave term is hd x u. 
prod(xl) — x in the conjecture (7) matches this wave 
funct ion and has a variable, x, in the wave argument 
position. If induction used the induct ion term, p x x ' , 
suggested by this wave term then the wave rule would 
ripple the induct ion term out one wave. This suggests a 
form of induct ion that substitutes p x x ' for x, in wnich x ' 
is the induct ion variable. The pxx' form of induct ion: 
has just this property. The only other raw induction 
suggestion that CLAM can extract by matching available 
wave rules to this occurrence of x, is the very similar, 
and also successful, x' x x" schema. There are no other 
occurrences of x in conjecture (7), so no other raw in­
duction suggestions to consider. 
Using this p x x' induct ion the first wave of r ippl ing 
out is done w i t h the wave rule (8), as expected. The re­
maining r ippl ing out is done w i th some standard logical 
manipulat ion rules. The induct ion conclusion is then 
identical to the induct ion hypothesis, so fertilize fin­
ishes the proof of the step case. 
The generalisation of the preconditions, (4), of 
ind_strat required in order to use wave rules to suggest 
inductions is: 
(9) 
where wave_rule [FTerm!, X, B') means that there is a 
wave rule w i th wave funct ion, FTerm\ wave argument, 
X, and wave term, B', e.g. since (8) is a wave rule 
w i th wave function prod(UL) = U, wave argument U 
and wave term Hd x U, then wave_rulelprod(UL) = 
U,U,HdxU) (cf. recursive {even{U),U,s{s(U)))). 
These preconditions check that each occurrence of X 
is in the an argument position of a function for which 
there is a matching wave rule, and that there is a term, 
5, that subsumes each of the wave terms, B' ;, of these 
rules. B then determines the induction schema and X is 
the induction variable. 
If the only wave rules known to CLAM are step cases 
of recursive definitions then preconditions (9) generate 
exactly the same final induct ion suggestions as precon­
dit ions (9). If CLAM-Oyster proves theorems that have 
the form of wave rules and if the existence of these rules 
is recorded by wave_rule meta-assertions then additional 
induction suggestions are possible. However, in practice, 
the probabi l i ty that a wave rule w i l l match each conjec­
ture is quite low, so only a few final induction suggestions 
w i l l be made even when a large number of wave rules and 
induct ion schemata are available. Several of these few 
suggestions may succeed — leading to different proofs of 
the conjecture — so that some of the increase in search 
space is benign. Our experience so far is that the new 
preconditions substantially increase the number of con­
jectures for which CLAM can find proof plans, wi thout 
substantially increasing the size of the search space12. 
This situation may change as the number of wave rules 
increases, but there is no reason at present to suppose 
that it will. 
8 I m p l e m e n t a t i o n a n d Resu l ts 
The ideas discussed in this paper have been implemented 
in and tested on the CLAM-Oyster system. This required 
the following modifications. 
• The only pr imi t ive induct ion schemata provided in 
Oyster are 1 step schemata for natura l numbers, 
12Although search time does increase, since non-matching 
wave rules must be tried and rejected. 
364 Automated Deduction 
• The Oyster tactics and methods have been up-
graded to use these more general forms of induction. 
The step tactic and method have been replaced w i th 
the wave ones. 
• We have added a new tactic, existential, for in-
stantiat ing existentially quantified variables. It sub-
stitutes a meta-variable for the existential variable 
when el iminating the existential quantifier during 
the planning process. Unif ication then instantiates 
this to an appropriate object-level term as the plan-
ning process progresses, e.g. during rippl ing-out. 
When the ind_strat tactic is applied this object-level 
term is substi tuted for the existential variable at the 
t ime of existential quantifier el imination. 
• The preconditions of the ind_strat method have 
been upgraded to those given in meta-formula (9) 
above, but w i th modifications to permit part ial f i t-
t ing where tota l fitting is not possible. 
• Plans and proofs for the even+ theorem, (1), and 
the prime factorization theorem, (7), have been au-
tomatical ly generated. F i t t ing the new precondi-
tions of the ind_strat generates the recursion analy-
sis described above for each of these two examples. 
• The improvements in the methods and tactics has 
enabled simpler proofs to be found for some theo-
rems. For instance, the proof of the commutat iv i ty 
of times, x x y = yx i, which previously required 7 
nested applications of s(x) induction, now only re-
quires 3 nested inductions, 2 of which are x1 + x" 
inductions. 
9 Conclusion 
We have analysed recursion analysis by showing how the 
inductive proofs obtained by the Boyer-Moore Theorem 
Prover have a common overall shape, and how recur-
sion analysis selects an induction schema and variable 
that increases the chances that a proof of this shape wi l l 
be found. We have shown how to describe this overall 
shape using the technique of proof plans and, hence, both 
how to rat ional ly reconstruct recursion analysis wi th in 
proof plans and how to explain its success formally. Our 
analysis has suggested a natural extension to recursion 
analysis which frees the choice of induction schema from 
the forms of recursion present in the original conjecture. 
In fact, recursion need not be present at al l for induc-
t ion to be used. This is v i ta l if we are to specify pro-
grams wi thout making any premature procedural com-
mi t tment , e.g. by anticipating the form of recursion to 
be used in the program, and yet have this procedural 
commitment made during the synthesis process. 
The importance of this rat ional reconstruction of re-
cursion analysis is i l lustrated by the following points. 
• The neat way that it relates flaw checking, subsump-
t ion checking and merging as different aspects of 
fitting the same preconditions. 
• The way in which it suggests an interesting ex-
tension of recursion analysis, enabling our theorem 
prover to find proofs that are beyond the capacity 
of BMTP. 
We have implemented a theorem proving system, 
CLAM-Oyster, based on our rat ional reconstruction and 
shown that this system can find proofs which are beyond 
the abil i ty of BMTP. Whether this success is brought at 
the price of an unacceptable increase of the planning 
search space it is not possible to tel l wi thout further em-
irical testing. The ini t ia l empirical results reported in 
Bundy et a/., 1988] are very encouraging, however. The 
planning search space on simple examples is several or-
ders of magnitude smaller than the object-level search 
space, and the rat io improves w i th more complex theo-
rems. 
The research reported above is in the context of re-
cursive functions w i th a single recursion variable and a 
single step formula. This has served to simplify the dis-
cussion but the underlying ideas are not l imited to such 
functions. We plan to extend the tactics and methods to 
more general recursive functions. Only then wi l l we be 
able to test CLAM-Oyster on the fu l l list of conjectures 
proved by the BMTP and similar theorem provers. 
References 
[Boyer and Moore, 1979] R.S. Boyer and J.S. Moore. A 
Computational Logic. Academic Press, 1979. A C M 
monograph series. 
[Bundy et a/., 1988] A. Bundy, F. van Harmelen, J. Hes-
keth, and A. Smaill. Experiments w i th proof plans for 
induction. Research Paper 413, Dept. of Art i f ic ia l In-
telligence, Edinburgh, 1988. Submitted to JAR. 
[Bundy, 1988] A. Bundy. The use of explicit plans to 
guide inductive proofs. In 9th Conference on Au-
tomated Deduction, pages 111-120. Springer-Verlag, 
1988. Longer version available as D A I Research Pa-
per No. 349. 
[Constable et a/., 1986] R.L. Constable, S.F. Al len, 
H.M. Bromley, et al. Implementing Mathematics with 
the Nuprl Proof Development System. Prentice Hall, 
1986. 
[Horn, 1988] C. Horn. The Nurpr l proof development 
system. Working paper 214, Dept. of Ar t i f ic ia l Intel-
ligence, Edinburgh, 1988. The Edinburgh version of 
Nurpr l has been renamed Oyster. 
[Stevens, 1988] A. Stevens. A rat ional reconstruction of 
Boyer and Moore's technique for constructing induc-
t ion formulas. In Y. Kodratoff, editor, The Proceed-
ings of ECAI-88, pages 565-570. European Confer-
ence on Art i f ic ia l Intelligence, 1988. Also available as 
D A I Research Paper No. 360. 
Bundy, van Harmelen, Hesketh, Smaill and Stevens 365 
