Theoretical Computer Science 36 (1985) 265-289 North-Holland

265

THE COMPLEXITY OF FINDING MINIMUM-LENGTH GENERATOR SEQUENCES
Mark R. JERRUM Department of ComputerScience, Universityof Edinburgh, Edinburgh EH93JZ, Scotland (United Kingdom)
Communicated by M.S. Paterson Received July 1983 Revised May 1984
Abstract. The computational complexity of the following problem is investigated: Given a permutation group specified as a set of generators, and a single target permutation which is a member of the group, what is the shortest expression for the target permutation in terms of the generators ? The general problem is demonstrated to be PSpACE-complete and, indeed, is shown to remain so even when the generator set is restricted to contain only two permutations. The restriction on generator set cardinality is the best possible, as the problem becomes soluble in polynomial time if the generator set contains only one permutation. An interesting feature of this problem is that it does not fall under the headings of 'two person games" or 'formal languages' which cover the great majority of known PSPACE-COmplete problems. Some restricted versions of the problem, in which the generator set is fixed rather than being part of the problem instance, are also investigated and shown to be computationally tractable. One result of this kind is that determining the most compact expression of a permutation in terms of 'cyclicly adjacent transpositions" can be achieved in polynomial time. Thus, from an initial arrangement of distinct objects on a circle, one can quickly compute the smallest number of interchanges of adjacent objects required to realise any other arrangement. Surprisingly, this problem appears substantially more difficult to solve than the related one (for which a solution has been known for some time) in which the objects are arranged on a line segment.
Keywords. Computational complexity, permutation groups, polynomial-time algorithms, PSPACEcompleteness.
CR Categories. F.I.3, F.2.2, G.2.1.
Introduction
A permutation group is most commonly specified by listing a set of permutations which together generate the group. The computational utility of this method of specifying permutation groups rests on the observation that every group can be generated by a rather small set of permutations. Indeed, it can be shown that every permutation group on n letters has a generator set of cardinality at most n - 1 [9]. Perhaps the most fundamental problem in the computational study of permutation groups is that of PERMUTATION GROUP MEMBERSHIP: given a group G specified as a set of generators, and a permutation ~r, determine whether ~r is a member of
0304-3975/85/$3.30 © 1985, Elsevier Science Publishers B.V. (North-Holland)

266 M.R. Jerrum
G. By providing a complexity analysis for an algorithm of Sims [13], Furst et al. [4] were able to show that PERMUTATIONGROUP MEMBERSHIP is in P (the class of predicates which can be computed by polynomial time bounded deterministic Turing machines). In order to place this result in context, it is worth introducing a natural generalisation of PERMUTATIONGROUP MEMBERSHIPin which the role of permutations is taken by arbitrary functions from a finite set X into itself. The problem of FINITE FUNCTION GENERATION [5, p. 280] is the following: given a set of functions
f , , . . . , f k : X ~ X, and another function h:X-> X, can the function h be obtained
from the f by some sequence of function compositions? Note that the problem of PERMUTATION GROUP MEMBERSHIP is the special case of FINITE FUNCTION GENERATION obtained by restricting the functions f to be bijective. Despite the similarity of the two problems, Kozen [11] has shown that FINITE FUNCTION GENERATION is PSPACE-complete [8, p. 343] and hence is almost certainly computationally intractable.
Although, as we have noted, an efficient algorithm exists for verifying that a permutation is a member of a given group, the problem of exhibiting a succinct expression for the permutation in terms of the generators of the group appears to be computationally more demanding. In order to explain this phenomenon, Even and Goldreich [3] introduced a quantified version of the membership problem for
permutation groups. The MINIMUM GENERATOR SEQUENCEproblem is the follow-
ing: given a set of generators z r b . . . , 7rk of a permutation group (3, a target permutation r e G and an integer K, determine whether there is some sequence of the generators {zri}, of length not greater than K, whose composition is the permutation r. In the context of Rubic's cube puzzle [1, p. 760] the MINIMUM GENERATOR
SEQUENCEproblem is that of determining whether a given final configuration can
be obtained from a given initial configuration by a sequence of at most K elementary moves (the elementary moves correspond, of course, to the generators of the permutation group). Even and Goldreich [3] show that MINIMUM GENERATOR
SEQUENCE is NP-hard [8, p. 324]. Furthermore, if we insist that the integer K of
the problem instance be specified in unary notation, the problem is easily seen to be in NP, and hence NP-complete. (Nondeterministically generate all sequences of generators of length not greater than K, checking in polynomial time for each sequence whether its composition is z.) A different situation obtains if, as is conventional, the integer K is specified in binary notation. A consequence of Lemma 2.1 of this paper is that minimum generator sequences may be of length exponential in the degree of the permutation group; thus the obvious nondeterministic algorithm
for MINIMUM GENERATOR SEQUENCEis no longer polynomial time bounded. As
a result, in the formulation where K is specified in binary notation, membership of
MINIMUM GENERATOR SEQUENCEin NP is not immediate.
As a practical demonstration of the intractability of a problem, an NP-hardness result is perfectly adequate; from a theoretical viewpoint it is more satisfying to
pin-point the complexity of the problem by showing it to be complete for some class. In Section 2 of this paper it is shown that MINIMUM GENERATOR SEQUENCE

Finding minimum-length generator sequences

267

is complete for PSPACE with respect to log-space reducibility. This result suggests that the problem is not in NP, for that would imply N P = PSPACE, a conclusion which most would consider unlikely. A severely restricted version of the problem, in which the problem instance has just two generators, is also considered and proved to be PSpAcE-complete. This is the strongest possible restriction on generator set size, as the problem is soluble in polynomial time if the generator set has only one element.
Section 3 aims to explore the finer structure of MINIMUM GENERATOR SEQUENCE by investigating some special cases of the problem which are in P. In addition to the single generator problem referred to above, five instances of the problem are considered, in which the set of generators is taken to be:
(i) all transpositions on the set {1, 2 , . . . , n}, (ii) all 3-cycles, together with all disjoint pairs of transpositions, (iii) all 3-cycles, (iv) all adjacent transpositions (i.e., the permutations (1, 2), (2, 3 ) , . . . , (n - 1, n) on the set {1, 2 , . . . , n}), (v) all cyclicly adjacent transpositions (i.e., the generator set of (iv) together with the single transposition (1, n)). It is well known that (i), (iv), and (v) generate the symmetric group on n letters, whereas (ii) and (iii) generate the alternating group. In each of the five cases it is shown that minimum length expressions of arbitrary group elements in terms of the generators can be computed in time polynomial in n. Cases (i)-(iii) can be handled quite straightforwardly, while case (iv) is dealt with by counting 'inversions'. A priori, one might expect case (v) to be easier to deal with than case (iv) (after all, it has greater symmetry); however, the converse seems to hold. The solution to case (v), forms the main content of Section 3. Further positive results concerning minimum length generator sequences have been obtained by Driscoll and Furst [14].

1. Notation
Although an elementary knowledge of permutation groups and machine-based complexity is assumed, a brief review is provided here in order to fix notation. The definition of any terms which are not covered in this section may be found in [6] or [8].
If X is a set, then the symmetric group on X, denoted by Sym(X), is the set of all bijections from X to itself (permutations) with function composition as the group operation. A permutation group on X is any subgroup of Sym(X); the degree of such a group is just the cardinality of X. The alternating group on X, denoted by Alt(X) is the subgroup of Sym(X) consisting precisely of the even permutations of Sym(X) [6, p. 59]. Conventionally, we shall denote permutations by Greek letters; in particular the identity of a permutation group will always be denoted by L.

268 M.tL Jerrum
Composition of permutations is denoted by juxtaposition; when a sequence of permutations occur together, the compositions ate to be performed in order from left to right. If/7 is any subset of Sym(X), then the group generated by H, denoted by (H), is the smallest subgroup of Sym(X) which contains /7. If Y ~ X and •r ~ Sym(X), 7r is said to stabilise Y (setwise) if the image of Y under ~ is itself, and to stabilise Ypointwise if the restriction of ~- to Y is the identity. The order of
a permutation group (3, denoted by IGt, is the number of permutations contained
in G, while the order of a permutation, ~', is the order of the group generated by 7r, that is l(~r)]. If ~ is a partition of X, then we say that the permut_jation 7r respects
if the image under 1r of any block of ~ is again a block of ~. Let / 7 ~ Sym(X) and ~'~(H). Define L(~-,17) to be the minimum length of a sequence of permutations from 17 whose composition is ~'. The MINIMUM GENERATOR SEQUENCE problem (MGS) may then be expressed as follows:
Input: % 17, and integer K. Output: True if and only if L(r,/7) <<-K.
It is reasonable to define L(T, H) to be infinity if r~(17). The Turing machine variant we shall employ is the single-tape machine described
by Hopcroft and Ullman [8, p. 148]. The following standard notation is employed:
Q is the set of states of the machine,
F is the set of tape symbols, a subset of F, is the set of allowable input symbols,
b, a member of F - E is the distinguished blank symbol,
is the transition function, m~ipping Q x F to Q × F x { - 1, + 1} ( - 1 and +1 indicate left and fight movements of the tape head), q0, a member of Q, is the distinguished start state, qacc, a member of Q, is the unique accept state.
A configuration of a Turing machine is specified by the contents of the tape together with the current state of the machine and position of the read/write head.
Finally, if i and j are integers with i <~j, then [i,j] will denote the set of integers which are not less than i and not greater than j. If x is an integer, and m a positive integer, then x mod m will signify the unique element of[0, m - 1] which is congruent to x mod m.
2. Completeness results
Prior to proving the main result of the section, we require a technical lemma which guarantees the existence of permutations of small degree but large order.
Lemma 2.1. For all sufficiently large positive integers n, there exists a permutation cr of degree [2n 2 In nJ such that the order of the cyclic permutation group generated by tr is greater than 2".

Finding minimum-length generator sequences

269

Proof. Let p ~ , . . . , pn be an enumeration of the first n prime numbers, X be a set of cardinality p~+p2+'''+pn and 0-~Sym(X) be a permutation composed of disjoint cycles of lengths p ~ , . . . , pn. From the prime distribution theorem [7, p. 10] we know that p~ -- n In n ; thus, for all sufficiently large n, p, < 2n In n. As the lengths of the cycles which compose 0" are coprime, the order of 0" is PIP2. • • p,, which is certainly b o u n d e d below by 2~. Furthermore, the degree of o-(=[X[) is bounded above by np,,, which in turn is bounded by 2n 2 In n (assuming n sufficiently large). The permutation required by the statement of the lemma can be obtained by enlarging X to X ' , of cardinality [2n 2 In nJ, and extending 0" so that it pointwise stabilises X'- X. []

The significance of the lemma, in the context of the construction about to be presented, is that it allows the role of an n-bit counter to be taken by a cyclic permutation group of small degree.

T h e o r e m 2.2. MINIMUM GENERATOR S E Q U E N C E is complete f o r PSPACE with respect to log-space reducibility.

P r o o f . Suppose H is a set of generators, and ~-a target permutation, all of the same degree. The following algorithm, for determining whether L(¢, H)<~ K for any integer K, can be implemented on a linear space bounded nondeterministic Turing machine:
0- = r {identity permutation}
for i := 1 to K do begin
nondeterministically select w ~ H;
0- "= O'71",
if tr = ¢ then accept end
It follows from a theorem of Savitch [12] that MGS is in deterministic quadratic space, and hence in PSPACE.
To complete the proof we need to show that any language in PSPAC~. is reducible to MGS via log-space reduction. Let M be a single tape deterministic Turing machine with space b o u n d p, where p is a polynomial, p ( n ) >- n. Let w ~ n be any word over the input alphabet of M and set m = p (n). We may assume that, before accepting any input, M scans the leftmost m squares of its tape, overwriting those squares with the blank symbol, b, and leaving the head over the first tape square. This assumption is made without loss of generality, as any machine which does not satisfy the assumption can be modified to an equivalent machine which does, and which satisfies the same space bound. The modified machine locates and marks the first and mth squares of the tape, a task it is able to accomplish within the space bound because p is fully space-constructible [8, p. 297]. It is then straightforward to arrange that, as its final act, the modified machine scans from the right to the

270 M.R. Jerrum

left mark overwriting each square with a blank. (The modified machine will, of course, require a larger tape alphabet than the original one.)
We shall construct an instance of MGS for which true is returned if and only if M accepts w. Given n, we can compute, in logarithmic space, an integer k such
that k = O ( p ( n ) ) and 2k> m(m+l)lrlmlQI. (It may be impossible to compute
exactly, and in logarithmic space, the expression on the fight-hand side of the inequality. However, only an approximation to the expression need be computed in order to obtain an integer k with the required properties.) The integer K of the problem instance under construction is obtained by setting K = 2 k. Let X be a set containing 2k 3 symbols; note that the cardinality of X is bounded by a polynomial in n. By Lemma 2.1, there exists a permutation or ~ S y m ( X ) which generates a cyclic group of order greater than K ; moreover, the construction used in the proof of the lemma allows a suitable permutation tr to be determined in logarithmic space. Identifying the permutation tr i with the integer i, the action of (or) on X may be thought of as a counter, with composition by o- as the increment operation.
Let T = {0, 1 , . . . , m - 1} be an indexing of the tape squares of M, and let A = T × F w Q (the union here is disjoint). In the problem instance we shall construct, all permutations are members of Sym(A ×X) = Sym(TxF xXu Q xX). Informally, general permutations will encode configurations of M, while generators will be interpreted as moves of M. We shall, in fact, restrict attention to the group G of permutations ~r ~ Sym(A × X ) satisfying the following three conditions:
(i) ¢r respects the partition ~ ={{d} x X : d c / l } of the underlying set A x X , i.e., for any d ~ A the image of { d } x X under ¢r is of the form {d'} × X for some d' ~ A. Furthermore, 7r stabilises T x F x X and Q × X setwise.
(ii) ¢r respects the partition ~ ' = {{i} x F x X : i ~ T} of T x F ×X. Moreover, the induced action of 7r on the blocks of ~ ' is cyclic, i.e., of the form

{i} × F ×X~-->{(i-h) rood m} × F × X

for some h ~ Z. (iii) Let d e za and suppose {d'} x X is the image of {d} x X u n d e r ~r. Then the
action of ¢r on {d} x X is of the form

(d,x)~-->(d',xorC(~'d)), x~X

(2.1)

for some c(¢r, d) c Z. c(zr, d) is well defined if we insist that it is normalised to lie in the range [0, I(cr)l- 1].
Forget temporarily the role of X and consider the induced action of G on blocks of ~. Suppose 7r ~ G, that is, ¢r satisfies (i)-(iii) above. Let {q} x X (q ~ Q) be the image of {qo} x X under zr. For each i E T let { ( ( i - h ) m o d m, si)} x X (s~ ~ F ) be the image of {(i, b)} x X u n d e r 7r. We provide an interpretation of ¢r in terms of a configuration of the Turing machine M : namely zr corresponds to M being in state q, with tape contents SoS~ . . . s,,,_i, and with the head positioned over the square h. The reason for requirement (ii) above is now clear: it is just the constraint that all tape squares must be translated by equal amounts.

Findingminimum-lengthgeneratorsequences

271

We now introduce some specific elements of G together with their interpretations in terms of the machine M. Firstly, define the permutation A by
A:(i,s,x)~--~((i+l)modm, s,x), (i,s,x)eTxFxX.
From now on, permutations are assumed to stabilise pointwise all elements in their domain which are not mentioned explicitly; thus the restriction of Z to Q × X is taken to be the identity. To interpret A, note that if zr ~ G is viewed as specifying a configuration of the machine M, as suggested above, then 7rZ corresponds to the configuration obtained by shifting the head left by one tape square (equivalently, shifting the tape fight by one square). In a similar way, a fight shift of the head may be encoded as a permutation p defined by
p:(i,s,x)~--~((i-1)modm, s,x), (i,s,x)~TxFxX.
Next, for each s c F define ~s by
7s:(O'b'x)'-~(O's'x) l x~X. (O, s, x)~-~(O, b, x) J
If in the interpretation of ~r as a configuration of M the tape square under the head contains a blank, then in the interpretation of ~-~'~the square under the head contains the symbol s (and vice versa). Thus the effect of r~ is to change the symbol u n d e r the head from a blank to s and vice versa. (No interpretation is offered if the symbol under the h e a d is neither b nor s.) Similarly, for each q 6 Q define rq by
"rq'(q°'x)~-'~(q'x)} x~X.
(q, x)~--~(qo,x)
The interpretation of rq is of a change of state from q0 to q and vice versa. Using sequences of the above permutations, one can mirror the operation of the
machine M. Composition with the permutation A and p may be used to simulate left and right shifting of the tape head. The permutations {rs: s e F} may be used to change the symbol on the tape square under the head from s to s': compose first with rs to erase the old symbol and then ~'~,to write in the new one. The permutations {rq: q c Q} can be used to change the state from q to q': first compose with % then
with rq,.Note that all symbol changes are effected by first erasing and then rewriting,
while all state transitions are via temporary excursions to qo: this will be seen later to be a technical convenience.
For the purposes of the reduction, we must arrange that sequences of permutations cannot simulate improper transitions of the machine M. To ensure this we introduce a group action within blocks of ~. The blocks of ~ are to be thought of as counters which may be permuted amongst each other and/or incremented. There is a counter {d} × X associated with each d ~ A, i.e., with each state of M and each tape square, symbol pair. The contents of the counter associated with d e za is the value c(~-, d) defined by (2.1). According to the values {c(rr, d): d~A}, a permutation ~ is

272 M.R. Jerrum
classified as admissible or inadmissible. A permutation ~r is admissible if the counters satisfy the conditions
c(Tr, q) = 0 Vq~Q-{qo},
c(m i, s) = 0 V i e T , s ~ F - { b } ,
and inadmissible otherwise. The generator set of the problem instance under construction has the property that composition with any generator increments no counter by more than one. Suppose then that ~r is an admissible permutation, and that the inadmissible permutation ~r' is obtained from ~r by composition with a single generator. Since ~-' is inadmissible, it must be the case that c(~r', d) = 1 for some d ~ A - ({q0} u {(i, b): i e T}). By successively composing ~r' with permutations from the generator set, an admissible permutation can be obtained only by repeatedly incrementing the counter associated with d until it returns to zero (recall that the counters are cyclic). By construction, the period of the counters is very large ( > K); therefore, no admissible permutation can be reached from ~r' by composition with fewer than K generators. Thus, if the composition of a sequence of K or fewer generators is admissible, then the composition of any initial segment of the sequence must also be admissible. (The introduction of an inadmissible initial segment is a fatal error from which recovery is impossible.)
In order to utilise the idea of admissible permutations, we introduce a set of permutations designed to increment particular counters. For s ~ F, define o-s by
crs:(O,s,x)~(O,s, xcr), xeX.
Suppose ~r ~ G is an admissible permutation corresponding to a configuration of M in which the symbol under the head is s. Then ~rtrs is an admissible permutation corresponding to precisely the same configuration. However, if the symbol under the head is other than s, then 7ro's is inadmissible (some counter which should remain zero has been incremented). Thus o-s is a permutation which is able to 'sense' the symbol residing under the tape head. A similar set of permutations is introduced for the states of M. For q ~ Q, define o-q by
trq:(q,x)~--->(q, xtr), x ~ X .
Then if ~r ~ G is an admissible permutation corresponding to M in state q, then ~ro'q is admissible, otherwise it is inadmissible.
The permutations {o's} and {trq} are used as components in the construction of a set HL of permutations which simulate the transitions of M involving a left movement of the head:
HE = ((o'srs%'o'q~'qzq'A): s, s ' ~ F, q, q'~ Q, 8(s, q) = 8(s', q', -1)}
and a similar set//R for those involving a right movement:
.l'IR: {(orsTs"l's,O'qTqTq,p)"S, S' E F, q, q' ~ Q, 8(s, q) = 8(s', q', +1)}.

Finding minimum-length generator sequences

273

N o w if 7r ~ G is an admissible permutation corresponding to M in state q, with symbol s u n d e r the head, then the action of composing 7r with ors~'s~'s,CrqTqTq,A can be interpreted as follows.
O's: confirm current symbol under head is s, ~-s: erase s (overwrite with b), T~,: write s' onto tape square under head, o-q: confirm current state is q, zq: change state from q to qo, Tq,: immediately reset state to q', A: shift head one place to the left.
That is, an admissible permutation results in which the current state is q' and the symbol immediately to the right of the head is s'. If the permutation 7r is not of the postulated form, then an inadmissible permutation results. As we have noted, no recovery is possible once an inadmissible permutation has been created; thus improper transitions of the machine M are effectively debarred from the simulation.
Suppose ~rinitand ~'acc are permutations corresponding to the initial configuration, with w s Z" on the tape, and the unique accept configuration respectively. (The accept configuration is unique because the machine M erases its tape prior to accepting.) We would like to claim that 7racecan be obtained from qTinitby successive composition with at most K generators from HL u HR, if and only if M accepts w. An equivalent statement would be
M accepts w ¢:> L(~m]t~aec,/-/Lt--)/-/R) ~ K .
The only obstacle to be faced is that, to each configuration of M, there correspond m a n y permutations 7r, differing in their counter contents {c(Tr, i , b ) : i ~ T } u {c(zr, qo)}. (In terms of the machine being simulated, c(m qo) is the number of computation steps, while c(Tr, i, b) is the n u m b e r of times tape square i has been visited.) In particular, 7rinitand Ira¢¢are not uniquely defined. The remedy is, however, straightforward. Set N = mlrl'lQI and let SoS~... Sm-l = wb m-n be a description of the initial tape contents. Define
qTinit= (Tsof))(Ts~p)... (Tsm_J~) and ~ra¢~= (orbN P) m (rq~ooON'q,¢o).
Clearly, ~r~n~tand ~r~¢¢ are admissible, a n d correspond to the initial and accept
configurations of M. With machine M are associated just mlrl=lQI possibledistinct
configurations, so if M accepts w, then it must do so within that many steps. In terms of permutations, if M accepts w, then there is a sequence (Tr~e HL w HR: 1 ~< i ~<
l) of permutations, with l < mlrl lQI, such that 7Finit7717T2... 7"/1" is a permutation
corresponding to the accept configuration of M. That is,
qTinit qT"l 7~2 • • • 77 l ~- ( O ' g ° p ) . . . (or ebra-x P)Tqaccorqearca~
for some ( e o , . . . , era) ~ Z m+~. Because no permutation ¢r~, 1<~i ~<I, increments any counter by more than one, we necessarily have e~~<l < N for 0 <~i <~ m. Now consider

274 M.IL Jerrum
the slightly extended generator set H = HE u / T R W {O'b, Orqacc} , the newly added permutations trb and o'qaochave no ettect other t h a n to allow us to normalise counters at the end of the computation. At that point in the sequence ~r~... ~r~ corresponding to M writing b onto square i for the last time, insert N - ei copies of O'b, and at the very end of the sequence append N - e,~ copies of o-q~oo.The composition of the permutations in the augmented sequence is ~racc, and the length of the sequence is
no more than (m+ 1 ) N = m ( m + 1)[FIIQI<K. Thus
M accepts w ¢~ L(~-~lit ~'acc,/7) <~K.
We have already noted that K is computable in logarithmic space, and it is easy to check that qT"~nlt 7Taec a n d / 7 are also; this completes the reduction. []
From the proof of the theorem we can, in fact, deduce rather more than the
claimed result. Take as the machine M of the proof a fixed Turing machine which
computes the solution to some problem which is complete for PSPACE with respect to log-space reducibility. Then the generator set H of the constructed instance of
MGS is of fixed size, namely IFll QI + 2. Moreover, the generator s e t / 7 is completely
determined by n, the size of the input to M, and hence by the degree of the target permutation of the constructed problem instance. (It is assumed here that the reduction has been arranged in such a way that the degree of the target permutation is a strictly increasing function of n.) Hence we may deduce that MGS remains PSr'ACE-complete even when the generator set is of fixed size and is not specified as part of the problem instance.
In the remainder of the section we investigate restricted forms of MGS which remain PSPACE-COmplete. Let MGS Wrrri GENERATORS OF ORDER Two be the problem derived from MGS by imposing the constraint that every permutation in the generator set of the problem instance be of order 2 (i.e., self-inverse).
Theorem 2.3. MGS WrrH GENERATORS OF ORDER TWO is complete for PSPAcE with respect to log-space reducibility.
Proof. A reduction from MGS will be exhibited. Let (/7, z, K ) be an instance of M G S in which the generator s e t / 7 = { , r ~ , . . . , ~rm} and target p e r m u t a t i o n , are all elements of Sym(X) for some X. We can suppose, without loss of generality, that the identity permutation is a member of /7; thus, the existence of a generator sequence of length less than or equal to K is equivalent to the existence of one of length exactly K. Choose a set Y and a permutation ~r~ S y m ( Y ) such that the order of the group generated by o- is greater than 2K. By Lemma 2.1 it is sufficient to take IYI to be the cube of the number of digits in the binary representation of K. We construct an instance (/-/', ~", K') of M G S WITH GENERATORS OF ORDER Two in which the permutations are members of Sym({0, 1)x(X u Y)). The generator set
of the instance is /7'= { ~ r l , . . . , , r ' , y}, where the permutations ~r~, 1 ~<j~< m, are

Finding minimum-length generator sequences

275

defined by
~. (O,x)~(1,x~j) } x~X, (1, x)~(0, xwj-')
(0, y) ~-~(1, ytr) } y~Y,
(1, y) ~->(0, y t r - ' )
and y by
y: (i, x),---~(1 - i, x), x~X,i~{O, 1}
(¢ y)~-~(1 - ¢ y), y ~ Y, i~{0, 1}.
The target permutation r' is given by
• ': (0, x)~(0, x¢) } x~X,
(1, x) ~-->(1, x~-')
(0, y) ~-->(0, ytr ~c) )
} Y~ Y,
(1, y)~-->(1, ytr -K ) J
The bound K' of the problem instance is simply 2K. It is easily verified that the triple ( H ' , ~", K') may be computed in logarithmic space, and that each of the permutations in H' is of order 2.
To complete the proof we need to show L(z,/7) <~K if and only if L(C, H') <~K'. For the forward implication, assume L(¢, H ) ~< K. Then there exists a sequence ( i ~ , . . . , i t ) ~ { 1 , . . . , m} K such that 7r,,... ~,~ = ¢. In terms of the new generators, we have
(~-,!, y)(~r!,2y)... (~,¢ y) = ~"
and hence L(z', H')<~ 2K = K' as required. Conversely, if L ( z ' , / 7 ' ) <~K ' , then there exists a sequence of generators of length
at most 2/(, the composition of which is ¢'. From a consideration of the action of ¢', on Y, we see that the sequence must be of length exactly 2K, and that it must contain K occurrences of the generator 3' alternating with the other generators. That is the sequence is of the form:
(w~,y)(Tr'i2y)... (Tr~,,y) for some ( i l , . . . , i t ) e { 1 , . . , m} K.
Thus
wi~ . . . ~,~ = ¢, a n d h e n c e L(7-, H ) ~< K. [ ]

Let Two GENERATOR MGS be the problem derived from MGS by restricting the generator set of the problem instance to be of cardinality 2. Theorem 2.4 suggests that even this very restricted form of the problem is computationaIly intractable.

276 M.R. Jerrum

Theorem 2.4. Two GENERATOR MGS is complete for PSPACE with respect to log-space reducibility.

Proof. A reduction from MGS WITH GENERATORS OF ORDER Two will be exhibited. Let (H, ~-, K ) be a problem instance in which the generator set H = { ~ r l , . . . , ~',,}, and the target permutation ~, are all elements of S y m ( X ) for some X, and in which the generators satisfy ~j2-_ ~, 1 <~j <~m. We may assume, without loss of generality, that the identity permutation is a member of H, and hence that the existence of a generator sequence of length less than or equal to K is equivalent to the existence of a sequence of length exactly K.
Let A = { 0 , . . . , 2 m + 1}, B ={0, 1,2}
and
K ' = 6(K + 1) + (2m + 2 ) ( 2 K + 1).

Choose a set Y and a permutation cr ~ Sym(Y) such that the order of the group generated by o- is greater than K'. By Lemma 2.1, it is sufficient to take [Y] to be the cube of the number of digits in the binary representation of K'. We construct an instance ({~r, 3'}, r', K') of Two GENER_~TOR M G S in which the permutations 7r, y, r' are members of S y m ( ( A u {s, t}) × X u ( B u { r } ) × Y) where r, s, and t are unique symbols. The integer bound K' has already been defined; the permutations ~', 3', a n d ~-' are now presented, followed by an informal description of the role of the various parts of the constructed problem instance.

~r: (2i, x) ~ (2i, xrr,), i, x~X,l<~i<~m,
(2i + 1, x),-o (2i + 1, xcr~),J
(1, x) ~-->(s, x ) ]
(s,x) ~(t,x) ~ x~X,
(t,x) ~(1, x)J
(j, y) ~->((j + 1) mod 3, y), y E Y , j E B ,
(r,y) ~-~(r,y~), y~ Y,

y: (i, x) ~--~( ( i + 1) mod (2m +2), x), i ~ A , x ~ X ,
(s,.x)~(t,x)} (t,x)~(s,x) x~X,

(0, y) ~->(0, y~), y ~ Y,

~":(O,x)~(s,x~') ]
(l, x)~(t, x~-) [
(s,x)~(O, xr_~)[ xeX,

(t, x) ~-->(1, x'r-l) J

(r,y) ~---~(r, yo"6~K+'))

)

(0, y) ~ (0, y,7~2"+:)~2r+'-~)~

(2, y) ~-~(2, ytr)

!
J

y~Y.

Finding minimum-length generator sequences

277

Note that all the above permutations stabilise (Au{s, t})xX and (Bu{r})x Y setwise.
The action of the generators on {r} x Y is the easiest to describe. The restriction of 3, to the set {r} x Y is the identity, while that of ~r is isomorphic to tr. The effect is thus of a counter for the number of occurrences of zr in a generator sequence. From the definition of r' we see that any expression of r', as a sequence of generators of length not more t h a n K ' , must contain exactly 6 ( K + 1) occurrences of zr. Now consider the action of the generators on B x Y. The sets {0} x Y, {1} x Y, and {2} × Y are to be thought of as counters which are cyclicly permuted by 7r, a n d incremented by 3'. Imagine some sequence of the two generators, and focus attention on a particular occurrence o f 3'. That occurrence of 3" will increment one of the three counters--which of the three will be dependent on the number of occurrences (mod 3) of ~ to the left of 3' in the sequence. Suppose that the composition of the generator sequence is z', and that the length of the sequence is not more than K'. From the construction of z' we know that there must be precisely (2m + 2 ) ( 2 K + 1) occurrences of 3" in the sequence, t-urthermore, all but three instances of rr must occur in blocks of 3 - - t h e remaining three instances occur as the subsequence ~-3"7r2. The generator sequence may thus be written in the form

3'*(Ir 33'*)k~r3,~r23"*(rr33'*)',

(2.2)

where k and I are nonnegative integers, and 3"* represents an arbitrary (possibly zero) length sequence of 3"s. The final important feature of the construction is the action of the generators on the set {0, 1, s, t} x X . The subset {s, t} x X acts as a 'refuge'; most occurrences of rr are in blocks of 3, and it is easily seen that both rr3 and 3" setwise stabilise {s, t} x X. However, the action of the key generator sequence K = rr43,~rr23,2"+l is to transpose the sets {0, 1} x X and {s, t} x X ; in this way, elements may be moved into and out of the refuge.
Having made these observations, we are in a position to prove the correctness of the reduction. We need to show that L(r, 17) <-K ¢:> L(r', {rr, 3'}) <~K'. To obtain the forward implication, suppose ~ri, . . . m K = r where ( i l , . . . , i t ) e { 1 , . . . , m} r. For i e { 1 , . . . , m}, the action of the permutation 32i rr3 32(,,-~+1} on the set {0, 1} x X is given by
(0, x) ~ (0, xcr,)~
(1, x)~--~(1, xrri)J x ~ X .

(The permutation has a nontrivial action on the complement of {0, 1} x X, which, however, we do not need to consider.) Define the permutation p by

p = (3"2,,rra3,2(,,-q+,))... (3"2,,~~r33"2(,,,-,K+,))

(2.3)

and let p' be the permutation obtained from p by reversing the order of the parenthesised factors:

/9 '= (3" 2iK "/7"33"2(m-ix+l)) • . • (3"2i'q'r33"2(m-it+l)).

(2.4)

278 M.R. Jerrum

The action o f p on the set {0, 1, s, t} ×X is

p- (o,

]

(1, x),-'~ (1, xr)
(s, x) (s, x)
(t,x)~--~(t,x)

xEX.

We claim that pKp', where K = ¢r4yzr2y2"+~, is equal to ~". Note that this, together
with the explicit expressions (2.3) and (2.4) for p and p' in terms of the generators, implies

L('r', {'rr,p})~ L(p, {'n','y})+ L(K,{'rr,3'})+L(p', {'rr,Y})

(2m+5)K+(2m+8)+(2m+5)K

= 6 ( K + 1 ) + ( 2 m + 2 ) ( 2 K + 1) K I"

To establish the claim, we compute the action of K on (A u {s, t}) x X.

K: (0, x) (s, x) ) (1,
(s, x) x)
(t,x)~-~(1, x)

xEX.

Now, the restriction of K to { 2 , . . . , 2m + 1} ×X, a set stabilised by p and p', is the
identity. Hence, the restriction ofpKp' to { 2 , . . . , 2m + 1} x X is equal to the restriction of pp' to the same set, which is just the identity. Thus, pKp' and z' agree on the set
{ 2 , . . . , 2m + 1} × X. We have already explicitly computed the actions of p and K on
the set {0, 1, s, t} × X ; from these computations it is immediate that pKp' agrees with
~-' on {0, 1, s, t} × X and hence on (A u {s, t}) ×X. It is a straightforward mechanical
task to check that pKp' agrees with r' on (B u2{r}) × Y and, hence, that the two
permutations are identical, as required. Conversely, suppose r' is expressible as a sequence o f generators, or, % of length
not more than K'. We have argued that the generator sequence must have the form described by (2.2). Thus r' may be written as r ' = p(crycr2)p ', where p is of the form 5,*(¢r3"y*)k and p' is of the form ~/*(¢r3~,*)~.The permutation ¢r3/rr2 maps {0, 1} × X to {s, t} × X , and the latter set is stabilised by p'; furthermore, although p' may interchange the two blocks of the partition {{s}× X, { t } x X } of {s, t} x X it does
not permute within the blocks. Using this observation, and the definition of r', we
may write d o w n explicitly the action of p on {0, 1} x X :

o: (0,

xr)]

(1, x)~---~(1, x~')-~J x E X .

The action of p on {0} x X is derived from the composition of permutations isomorphic to those in the generator set/7. Since P is o f the form 3,*(w3~/*) k, there

Finding minimum-length

generator sequences

279

must be a sequence (i1,..., ik)E {1,..., m} k such that
33 '7" -~- 7"l'il . . . 7"f ik ~ "l"fil . . . "t'fik ,
since all the permutations in the set H are of order two. Hence,

L(r,/-/) ~<k.

(2.5)

A similar analysis of the action of/9' on {s, t} × X yields L ( r -1,/-/) ~</. Thus

L( r, 11) <- I

(2.6)

since any generator sequence for ~'-t becomes, on reversal, one for ~"itself. We have argued that any generator sequence for ~", of length less than or equal to K', must contain precisely 6 ( K + 1) occurrences of rr. From the form of p a n d p' we also have that the number of occurrences of 7r is 3(k + l + 1) ; hence k + l = 2 K + 1. Adding the inequalities (2.5) and (2.6) we obtain

2L(~-, H)<~ k + l = 2 K + 1

and thus L( z, 1I) <~K as required. As with the preceding proofs, it is straightforward to check that the reduction is
computable in logarithmic space. []

3. Restricted versions which are computationally tractable
In this section we investigate some restricted versions of MGS which are soluble in deterministic polynomial time. We know from Theorem 2.4 that MGS remains PSPACE-complete when the generator set contains two permutations; that this is the best possible restriction on generator set size is indicated by the following (unsurprising) result.
Theorem 3.1. Let 1r, ~"be elements o f Sym[0, n - 1]. Then L(~', {Tr}) is computable in time polynomial in n.
Proof. For each i, 0 <~ i < n, let ai be the smallest nonnegative integer such that i~ra' = i~, and let mi be the length of the cycle in ~" containing i. T h e n L(% {~r}) is a solution for x in the system of congruences
x=a~ (modmi), 0<~i<n;
it is, moreover, the smallest nonnegative solution to this system. (If the system has no solution, then L(z, {~r}) = oo.) Note that both ai and mi, 0<~ i < n, are efficiently computable. The system of congruences may be checked for consistency, and a minimum nonnegative solution efficiently determined, using the Chinese remainder technique [7, p. 94]. []

280 M.R. Jerrum
A number of positive results can be obtained by specifying a fixed generator set which is not part of the problem instance. (More precisely, the generator set is determined solely by the degree of the target permutation.) We consider in this section the five 'standard' sets of generators for the symmetric and alternating groups mentioned in the introduction. All the results are fairly easy to obtain, except the one concerning cyclicly adjacent transpositions. The proof method in this case is particularly interesting, and forms the main content of the section.
Let n >i 2. The first generator set to be considered is the one consisting of all (~) transpositions in Sym[0, n - 1]; we shall denote this generator set by Hr. For 7r Sym[0, n - 1], denote by c(lr) the number of cycles composing ~r (including those o f length 1).
Theorem 3.2 (Cayley). F o r all 7r~ Sym[0, n - 1], L(Tr, Ht) = n - c(Tr).
Proof. Let o-~ Sym[O, n - 1], r ~/-/t. The permutation r impinges on at most two cycles of or, and so all but two cycles of o- remain intact when o- is composed with -r. Hence, c(o-~-)/> c ( o - ) - 1, from which we may deduce
L(rr,/'/t) ~> c ( ~ ) - c ( ~ ) = n - c ( ~ r ) . For the opposite inequality, firstly note that a cycle of length m may be expressed as a composition of m - 1 transpositions. Then a permutation 7r, with cycles of lengths m l , . . . , mc(,~ may be expressed as a composition of
( m ~ - 1 ) + ( m 2 - 1 ) + . • • +(rnc¢~)- 1) =
= (m, +--. +
transpositions (see also [2]). []
N o w let /-/dt be the set of all permutations of [0, n - 1] which can be expressed as the product of two distinct transpositions. (Thus, /-'/dt consists of 3-cycles and products of pairs of disjoint transpositions.) Note that (/-/dt)= Alt[0, n - 1].
Theorem 3.3. L e t 1r ~ Alt[O, n - 1]. Then L(1r, /-/dt) : 1 ( gi -- C('/T)).
Proof. By definition, any expression for a member of the alternating group as a composition of transpositions must be of even length. The result follows from this observation combined with Theorem 3.2. []
The set of all 3-cycles, taken by themselves, also generates the alternating group;
let us denote this generator set by H3c. For 7re Sym[0, n - 1 ] , let Codd(TT)be the
n u m b e r of cycles in ~r of o d d length (including those of length 1).
Theorem 3.4. L e t ~r ~ Alt[0, n - 1]. Then L(~r, H3c) =½(n - Coad(1r)).

Finding minimum-length generator sequences

281

Proof. Let or e Sym[0, n - 1], 3' e//3c. The permutation 7 impinges on at most three cycles of or, and so all but three cycles remain intact when or is composed with 7If any of the three (or fewer) cycles affected by 3' is of even length, then it is immediate that Coda(or) cannot exceed Codd(orT) by more than two. In fact, this is still the case even if all three cycles are of odd length, for although 3, may annihilate all three cycles, it must, as a result, create at least one odd-length cycle. Thus Codo(orT)/> Coati(or)--2, from which:
L(~, H3c)/> ½(Coad(*) -- Coda(7r)) = ½(n -- Codd(~r)).
For the reverse inequality, it is sufficient to show that, for all permutations or A_lt[0, n - 1], or # ~, there exists a generator 3/c H3c such that Codd(or3')= Codd(O')+2. The required inequality then follows from the fact that the identity is the only permutation with n cycles of odd length. So suppose the permutation or is as stated. Then or must contain either an odd cycle of length at least 3 or a pair of even length cycles. (Since or is a member of the alternating group, the number of even length cycles must be even.) Now, if ( i , , . . . , i2r+,) is an odd-length cycle of or, then composition of or with the 3-cycle (i3, i2, il) yields the three disjoint, odd-length cycles (i,), (i2), ( i 3 , . . . , i2,+,). Also, if ( i t , . . . , i2r), ( j , , . . . , j 2 s ) are disjoint even-
length cycles of or, then composition of or with the 3-cycle (i2, il,jt) yields the two
disjoint odd-length cycles (i,), (i2, • •., i2,, j , , . . . ,j2s). In either case the number of odd-length cycles is increased by two. []

Let//at be the set of 'adjacent transpositions' of [0, n - 1], that is all transpositions of the form (i - 1, i) for 1 ~<i ~<n - 1. At this stage the permutation which transposes 0 and n - 1, completing the set of 'cyclicly adjacent transpositions', is excluded. It is well known that the adjacent transpositions generate the symmetric group; indeed, the economy with which an arbitrary permutation may be expressed in terms of adjacent transpositions can be precisely characterised using the notion of inversion of a permutation as described by K n u t h [10, p. 11]. If ~r a Sym[0, n - 1], define I ( ~ ) , the inversion number of ~r, by
I(~r) = t{(i,J): O ~ i < j ~<n - 1, irr >J~'}l-

Theorem 3.5. Let ~r~ Sym[0, n - 1]. Then L(¢r,//at) = I('rr).
Proof. Let o-~ Sym[0, n - 1], r~//at. Then I(orr)= I(or)+ 1 [10, p. 13]; moreover, if
or # ,, it is always possible to find a generator r such that it is the minus sign which holds in the equation. The result then follows from the observation the identity is the only permutation whose inversion number is 0. It is interesting to note that 'bubble sort' [10, p. 108] requires precisely I(,r) exchanges to sort the n integers 0,..., n-l, when the initial distribution of the integers is 0~, l~r,..., (n-l)Tr. Bubble sort is thus an optimal sorting method with respect to number of adjacent transpositions used. []

282 M.R. Jerrum
Now let/-/cat be the set of cyclicly adjacent transpositions obtained by augmenting Hat with the single permutation transposing 0 and n - 1. Computing L(~, Heat) appears to be less straightforward than computing L(~,//at); this is perhaps surprising as the generator set Heat possesses greater symmetry than Hat. It is proposed to solve the minimum length generator sequence problem for H~t using an extension of the inversion number method. To motivate the solution technique, consider why the inversion number argument cannot be applied directly. Let ~- be a target permutation, and let ~-= ~r~,rr2... ~'~ be an expression for ,rr in terms of elements of Hat. For a n y integer i e [0, n - 1], consider the sequence (Po,. • •, Pt) of images of i under the partial products of the sequence ~'~... ~'t, explicitly, P0 = i and Pk = i ~ ... "r~k (1 --~ k<~ l). We shall term the sequence (Po,. • • ,Pt) the trace of i u n d e r ~'1 • .. ~rt. N o w think of the integers 0, 1 , . . . , n - 1 as being arranged in clockwise order on a circle. Geometrically, we may interpret the trace of i as a time-dependent path on the circle, in which Pt is viewed as a location at time instant t. Let (Po,. • . , Pz) and (qo,. - . , q~) be the respective traces of i , j ~ [ 0 , n - l ] under ~ . . . ~'r. We shall say that the traces of i and j cross (during time interval t) if p, = qt-i and q, = Pt-i. Now suppose that the target permutation ~ transposes i and j, where i <j. Because the transposition (0, n - l) is not present in the generator set Hat, the trace of i has a net clockwise displacement on the circle, while that of j has a net anticlockwise displacement. The traces of i and j must cross, say during time interval t, Each crossing of traces corresponds to a particular generator in the sequence ~ . . . ~1, in this case the generator ~rt. Intuitively, the inversion number method works by counting these 'topologically forced' crossings. When, however, we progress to the generator set//cat, there is no necessity for the traces of i and j to cross (although they may do so). It is possible, for example, to choose a sequence of generators which yields clockwise traces for both i and j.
We shall salvage the inversion number argument for the generator set H~t by formalising the notion of the trace of an element i being either clockwise or anticlockwise. Let ~0:7/~ { - 1 , 0, +1} be the function given by
ti 1 ifi=-I (m°dn), ~o(i)= 1 ifi=+l (modn),
otherwise.
Let 7r~ . . . 7rl be a sequence of generators chosen from Heat, and (O'k: 0 ~< k<~ l) be
the corresponding partial products, that is:
O-0 = /,,
c r k = T r l . . . ~ r k (1 <~k<~/).
Define the d i s p l a c e m e n t vector, d(~-~ . . . 7rt)~ 7/n, of the sequence ~r~ . . . ~rt to be the vector whose ith component is given by
1
=2
k~l

Finding minimum-length generator sequences

283

Note that the displacement vector formalises the earlier discussion of paths on a circle: a clockwise path corresponds to a positive component of the displacement vector and an anticlockwise path to a negative component. Note also that the product of a sequence of generators is determined by the displacement vector of the sequence, but not vice versa.
If we now think of a sequence of generators as specifying a displacement vector, rather than a permutation (by composition), it is possible to reintroduce the notion
o f ' t o p o l o g i c a l l y forced crossing'. Suppose x = ( x 0 , . . . , X,_l) ~ Z ' , i,j ~ [0, n - 1], a n d let r= i-j, s = (i+xi)-(j+xj). Define the crossing number, ce(x), of i and j with
respect to x by
[{k e[r, s]: k=O (mod n)} I if r<~s,
r]: k=O (mod n)}l ifs<r.

Intuitively, if ~r~... ~rt is a sequence o f g e n e r a t o r s with d i s p l a c e m e n t vector x, t h e n
co(x ) m e a s u r e s the n u m b e r of times the traces o f i and j u n d e r ~ r l . . . 1rz must cross.
(Crossings in which the trace of i moves in a clockwise sense relative to that of j are counted positively, and the others negatively.)
A number of identities concerning displacement vectors and crossing numbers will be useful later. Let ~ = ~r~ . . . ~rt be an expression for 7r in terms o f generators
f r o m / / c a t , a n d x -- d(1rl . . . ~rt). Then, for i,j ~ [0, n - 1],

~,xk=O,
k
xi = i~ - i (rood n),

(3.1)
(3.2)

cu(x) = -qi(x),

(3.3)

n--|
x , = E C,k(X).
k=0

(3.4)

Identities (3.1) a n d (3.2) are easily o b t a i n e d by i n d u c t i o n on 1, the length o f the generator sequence; (3.3) immediately follows from the definition of crossing number. The final identity (3.4) can be p r o v e d by i n d u c t i o n on I. T h e base case l = 0 is trivial so assume l > 0. Because of cyclic symmetry, we may assume, without loss o f generality, that ~rz is the generator w h i c h transposes 0 and 1. Let r, s e [0, n - 1] be the e l e m e n t s w h i c h are m a p p e d by ~1 . . . ~rt-~ onto 0 and 1 respectively, and let x'= d(1rl... 1rt-l). We then have

ce(x) = co(x') for {i,j}# {r,s},

c,s(x) = c,s(x')+ 1,

(3.5)

cs,(x) = c,,(x') - 1.
The induction step necessary to establish (3.4) follows from (3.5) together with the
o b s e r v a t i o n that x agrees with x' except in two c o m p o n e n t s , n a m e l y x , = x ' , + 1, x , -_x_ ~ -! l .

284 M.R. Jerrum

Using the notion of crossing number, a cyclic analogue of inversion number (which might more properly be termed intersection number) may be introduced. For x ~ Z" define I(x) by

I(x)=½ ~ Ico(x)l.
~,j=l

(3.6)

Note that I is now a function of a vector (of displacements) rather than of a p e r m u t a t i o n as before. T h e factor o f ½occurs b e c a u s e the sum is over ordered, rather than unordered, pairs i,j. We are now able to state a cyclic analogue of Theorem 3.5.

Lemlna 3.6. Let 7rcSym[0, n-l], and x=(Xo,...,x~-i)~Z" satisfy ~ xi=O, xi= iTr- i ( m o d n). I f ~r = ~r~ . . . 7rt is an expression f o r ~r, in terms o f elements o f He,t, which satisfies d( Trl . . . ~rl) = x and which moreover is o f m i n i m u m length, then l = I (x).

Proof. S u p p o s e x, l a n d ~-~ . . . zr~ are as in the s t a t e m e n t of the lemma. We s h o w that l >~I ( x ) by i n d u c t i o n on 1.W h e n l = 0, x = 0 a n d h e n c e I ( x ) = 0, which establishes t h e inductive base. N o w suppose l ~> 1, a n d let x ' = d ( Z r l . . . 7r1_~). As before, by cyclic s y m m e t r y , we can assume that ~r~ is the transposition (0, 1). By definition o f /, (3.6), a n d f r o m the identities (3.5), we h a v e I ( x ) <~l ( x ' ) + 1; also, by the inductive hypothesis, I(x')~< l - 1 . H e n c e , I(x)<~ l, w h i c h completes the inductive step.
For the reverse inequality, l <- l ( x ) , s u p p o s e 7r a n d x are as in the statement. Let P ( m ) , m >i O, be the f o l l o w i n g p r o p o s i t i o n :
I ( x ) = m ~ :1 g e n e r a t o r s e q u e n c e 7rl . . . ~'m with d(~rl . . . 1rm) = x. (3.7)
We show by induction that P(m) is true for all nonnegative integers. Firstly, we establish the inductive base P(0). Suppose I ( x ) = 0. Then, by definition of/, c~(x) = 0 for all i,j ~ [0, n - 1]. It follows f r o m the definition o f crossing n u m b e r that, for all adjacent i , j (that is with j - i = 1 ( m o d n)), xj >--xi. Thus all c o m p o n e n t s of x are equal, and h e n c e 0, since ~ Xk = 0. T h e p r o p o s i t i o n P(0) follows from the observation that 0 is the displacement vector of the empty sequence of generators.
Now assume I(x)= m, and P(k) true for k < m. Since x ~ 0 and ~ xi =0, the vector x must possess both positive and negative components. It follows that r, s ~ [0, n - 1] can be f o u n d such that the images o f r a n d s u n d e r 7r are adjacent (that is r~- - s ~ = 1 ( m o d n)) and such that xr i> 0, xs < 0. (Let y be the vector defined by yk~ = Xk ; y m u s t h a v e at least o n e pair o f a d j a c e n t c o m p o n e n t s yi, y~ satisfying y~ < 0, yj >I 0.) By cyclic symmetry, we m a y s u p p o s e that the images o f r and s u n d e r ~- are 1 a n d 0 respectively. Let x' b e the vector w h i c h agrees with x except at c o m p o n e n t s r a n d s, w h e r e x's = x s + 1 a n d x'r= x ~ - 1 . Let z be the transposition (0, 1) and ~r'= ~'~'. F r o m the identities (3.5), n o t i n g that cry(x)> 0 a n d Csr(X)<0, we h a v e I ( x ' ) = I ( x ) - 1 = m - 1. By t h e i n d u c t i o n hypothesis, there exists a sequence o f generators ~r~ . . . ~',,,_~ (whose c o m p o s i t i o n is ~r') with d(~r~ . . . zr,,_~)= x'. Then, the sequence 1rl...Trm_~', of length m, must satisfy d(Trl ...~m_lZ)=X. This establishes P(m) and completes the inductive step. []

Finding minimum-length generatorsequences

285

Lemma 3.6 allows the problem of computing L(cr,/-/cat) to be recast as an integer p r o g r a m m e . For ¢rc Sym[0, n - 1] consider the optimisation problem:

Minimise I(x) over x ~ Z"

subject to ~ xi = 0, xi = icr - i ( m o d n).

(3.8)

Let ¢r = ¢r~... ¢rj be any expression for ¢r in terms o f generators, a n d x = d ( c r ~ . . . 7r~). By identities (3.1) and (3.2), x will necessarily be a feasible solution to (3.8). Combining this observation with Lemma 3.6 we have the following corollary.

Corollary 3.7. Suppose ¢r ~ Sym[0, n - 1], and let x be an optimal solution to the integer programme (3.8). Then L( w, H~at) = I ( x ) .

In the main theorem, a polynomial time algorithm for solving (3.8) (and hence, by Corollary 3.7, for computing L(¢r,/-/cat)) will be presented. We proceed to this result via a technical lemma, whose purpose is to restrict the search space for optimal solutions to (3.8).
Lemma 3.8. Suppose ¢r ~ Sym[0, n - 1], and let x be an optimal solution to the integer programme (3.8). Then, for all i, j ~ [O, n - 1], cij(x ) ~ { - 1 , 0, +1}.
Proof. We assume that 1%(x)1>~2 for some i,j and obtain a contradiction. Let I = I ( x ) . By L e m m a 3.6, there exists a g e n e r a t o r s e q u e n c e ¢rl . . . ¢r~ with p r o d u c t ¢r and satisfying d(crt ... cry)= x; moreover, by Corollary 3.7, no shorter expression for ¢r in terms o f the generators exists. Let (P0,. • •, Pt), (qo,. • . , qt) be the traces o f i a n d j u n d e r ¢rl . . . 1ft. Since I%(x)] I> 2, the traces o f i a n d j cross (at least) twice, say during time intervals t and u, t < u; that is, p, = q,-l, q, = Pt-l, and similarly for u. T h e traces o f i and j are inverted by the g e n e r a t o r or, a n d reinverted by ¢r,,. Thus the s e q u e n c e o b t a i n e d from cry... ¢rt by deleting ¢rt and ¢r, is still a generator s e q u e n c e for or, contradicting the minimality o f / . []

Theorem 3.9. The function L( Tr, H~at) is computable in time polynomial in n (the degree o f the permutation ~r).

ProoL By Corollary 3.7 it is sufficient to exhibit a polynomial time algorithm for solving the integer programme (3.8). In outline, the proposed algorithm starts with a feasible solution to (3.8) and applies a sequence of transformations which decrease the value of the objective function. When no further transformation can be applied, the solution is guaranteed to be optimal.
F o r e a c h i,j ~ [0, n - 1] with i # j introduce a t r a n s f o r m a t i o n T~j:Z ' - > ~'" defined as follows. For a n y vector x ~ 7/", the result, x' = T0(x), o f applying To to x is given by

X'k=Xk, k~:{i,j}, x ,f= x l - n ,

x~=xj+n.

286 M.R. Jerrum
Let max(x) and min(x) respectively denote the maximum and minimum component values of x. We say that T~j contracts x iff x~ = max(x), xj = min(x) and x~- xj I> n ; T~j strictly contracts x iff, in addition, the final inequality is strict. We make use of the following claims (proved later) concerning contracting transformations:
(i) Suppose x is a feasible solution to (3.8) which in addition satisfies ICk,,,(X)]<~1 for k, m ~ [0, n - 1]. Suppose also that T~j contracts (respectively strictly contracts) x, and let x' = T~j(x). Then I ( x ' ) <~I ( x ) (respectively I ( x ' ) < I ( x ) ) .
(ii) Suppose x, x' are feasible solutions to (3.8) which admit no strictly contracting transformations. Then x' can be obtained from x by a sequence of contracting transformations.
It follows from (i) and (ii) that the optimal solutions to (3.8) are precisely the feasible solutions which admit no strictly contracting transformations. For if x is an optimal solution to (3.8), then, by Lemma 3.8, x satisfies the conditions of claim (i). Since x minimises I(x) there can be no transformation which strictly contracts
Thus, the set of feasible solutions which admit no contracting transformations contains at least one optimal solution. Furthermore, if x and x' admit no strictly contracting transformations then, by (i) and (ii), I(x)= I(x'). Thus, every feasible solution to (3.8) which admits no strictly contracting transformation is optimal, justifying the stated characterisation of optimal solutions.
The following algorithm, for finding an optimal solution to (3.8) works by starting with a feasible solution x and successively applying strictly contracting transformations to x until no further improvement is possible. The optimality of the result is guaranteed by the above discussion.
for k:---0 to n-1 do Xk:=kTr-k; {Set up feasible solution.} while max(x) - min(x) > n do begin
choose i,j with xi = max(x), xj = min(x); xi:= xi-n; xj := xj + n
end
Each iteration of the while loop decreases the value of the objective function I(x), which is initially b o u n d e d above by n2. As the b o d y of the while statement has running time O(n), with an obvious implementation, the overall complexity of the
algorithm is O(n3). (A discussion following the p r o o f indicates that the running
time is, in fact, O(n2).) It remains to substantiate claims (i) and (ii). For claim (i), suppose that x is as
stated, that T# contracts x, and let x ' = T~j(x). View Ckm(X) and Ck,,(X'), k, m e
[0, n - 1], as n x n matrices of integers; let these matrices be referred to as A and B respectively. By identity (3.3), A and B are antisymmetric. Noting the simple relationship which holds between x' and x, and referring to the definition of crossing

Finding minimum-length generator sequences

287

number, we observe that B can be obtained from A by subtracting 1 from every element in the ith row and jth column, and adding 1 to every element in the jth row and ith column. (The effect of these changes is cumulative, so that B o = A o - 2, etc.) For an n × n integer matrix X, let So(X) denote the sum of the absolute values of the elements which are contained in the ith and jth rows and columns of X. Since, by definition (3.5), I(x) is the sum of the absolute values of the elements of A (a similar relationship holding between I(x') and B), and since A and B agree except on the distinguished rows and columns we have

l(x') - I(x) = So(B ) - So(A ).

(3.9)

Fortunately, the two terms on the right-hand side of (3.9) can be computed explicitly. Referring to t h e definition o f crossing n u m b e r , a n d n o t i n g t h a t x~ = m a x ( x ) , we have that the ith row of A contains only nonnegative integers. Further, from (3.4), we k n o w t h a t the ith r o w s u m of A is x~. Since A is a s s u m e d to be a { - 1 , 0, + I } matrix we d e d u c e that the ith row o f A contains precisely x~ l's a n d n - x i O's. A similar a r g u m e n t applied to the jth row of A yields a count o f - x j - l's and n + xj O's. (The corresponding results for the columns of A can be deduced from antisymmetry.) Noting the special cases A. = A~ = 0, A 0 = -Aj~ = 1 (the latter from the assumption that x~ - xj >I n), we h a v e sufficient i n f o r m a t i o n to c o m p u t e S#(A): explicitly, S o ( A ) = 2(x,-xj- 1).
As we have remarked, the ith row of B can be obtained from that of A by subtracting 1 in every place. (We should, however, note the special cases B, = 0 and B 0 = - 1 . ) Thus, every element in the ith row of A is either -1 or 0. Since row sums for B are available to us (by (3.4)), the computation which has been performed for the matrix A can be repeated for B. Carrying out the necessary arithmetic we obtain So(B) = 2(x~ - xl - 1). Hence,

I ( x ' ) - I ( x ) = 2(x~ - x~ - 1) - 2(x, - xj - l)
= 4(n +xj-xi).
Since T0 contracts x, the last expression is less than or equal to zero (strictly less than zero if T0 is strictly contracting). This establishes claim (i).
For claim (ii), suppose x and x' are as in the statement of the claim, and let r = min(x), s = max(x). Then, since no transformation exists which strictly contracts x, s - r ~< n. Similarly, s' - r' <~ n, w h e r e r' = m i n ( x ' ) a n d s' = m a x ( x ' ) . W e claim t h a t r ' = r a n d s ' = s. For, s u p p o s e to the c o n t r a r y that r ' > r (say). Since, for all i, x~ = xi ( m o d n), it follows t h a t x~ >t xi, with strict inequality f o r t h o s e integers i satisfying xi = r. T h u s t h e s u m ~ x~ w o u l d be strictly greater t h a n ~ xu c o n t r a d i c t i n g t h e assumption that both sums are zero.
If s - r < n, then x and x' must be equal and we are done. Otherwise, s - r = n, a n d x' a n d x a g r e e e x c e p t for a n u m b e r o f c o m p o n e n t s w i t h xi = r, x~ = s, a n d a n equal n u m b e r w i t h x~ = s a n d x~ = r. The vector x c a n d e a r l y be b r o u g h t into agreement with x' via a sequence of contracting transformations. []

288 M.R. Jerrum

The positive results derived in this section prompt a number of observations and remarks. For example, it is not difficult to show that the set of optimal solutions to the integer programme:

Minimise Y~ ]xi[ over x e 7/"
i
subject to ~xi =0 and xi= izr-i (mod n)
i

(3.10)

can be characterised as those feasible solutions which admit no strictly contracting transformations. Thus (3.8) and (3.10) have precisely the same set of optimal solutions. Hence, any generator sequence 7r~... zrl for ¢r which minimises the length l, simultaneously minimises the sum of the absolute values of the components of the displacement vector d(ert... ¢0). No really short proof of this intuitively appealing fact seems available.
In the program for computing an optimal solution to (3.8), none of the variables xi changes value more than once. Hence ½n is an upper bound on the number of iterations of the while loop, and O(n 2) a time bound for the whole algorithm. Further, a naive O(n 2) algorithm for evaluating I ( x ) is suggested by definition (3.6). Combining these two observations yields an O(n 2) time algorithm for evaluating
L( ~, /-/cat)We have concentrated, in this section, on the problem of finding the length of
minimum generator sequences for permutations, rather than the permutations themselves. However, the proofs are all constructive and directly imply efficientalgorithms for computing generator sequences of minimum length.

4. Conjecture
Let MGS FOR TRANSITIVE GROUPS be the restricted version of MGS obtained by insisting that the generator set of the problem instance generate a transitive group. (The generator sets constructed for the completeness proofs of Section 2 do not have this property, and hence the results obtained there say nothing about the complexity of the new problem.) By slightly modifying a proof from Even and Goldreich [3], it is not difficult to show that MGS FOR TRANSITIVE GROUPS is NP-hard. Now, it has been conjectured that there exists a polynomial f, such that if H is any set of permutations generating a transitive group of degree n, and ~r is any member of that group, then L(1r,//) ~<f(n). Informally, no matter how perversely a set of generators for a transitive group is chosen, they will always efficiently generate the group. If this were the case, then MGS FOR TRANSITIVEGROUPSwould clearly be in NP and hence NP-complete. Thus, while MGS FOR TRANSITIVE GROUPS is itself computationally intractable, it may well be 'easier' than the general problem.

Finding minimum-length generator sequences

289

Acknowledgment

I should like to thank Mike Paterson for discussions which prompted the recasting of the main result of Section 3, and the referees for their careful scrutiny of the original version of the paper.

References
[l] E.R. Berlekamp, J.H. Conway and R.K. Guy, Winning Ways. VoL 2--Games in Particular (Academic Press, New York, 1982).
[2] A. Cayley, Note on the theory of permutations, Philosophical Magazine 34 (1849) 527-529. [3] S. Even and O. Goldreich, The minimum-length generator sequence problem is NP-hard, J.
Algorithms 2 (1981) 311-313. [4] M. Furst, J.E. Hopcroft and E. Luks, Polynomial-time algorithms for permutation groups, Proc.
21st IEEE Symp. on Foundations of Computer Science (1980) 36-41. [5] M.R. Garey and D.S. Johnson, Computers and Intractability (Freeman, San Francisco, 1979). [6] M. Hall, The Theory of Groups (Macmillan, New York, 1959). [7] G.H. Hardy and E.M. Wright, An Introduction to the Theory of Numbers (Oxford University Press,
1938). [8] J.E. Hopcroft and J.D. Ullman, Introduction to Automata Theory, Languages and Computation
(Addison-Wesley, Reading, MA, 1979). [9] M.R. Jerrum, A compact representation for permutation groups, Proc.23rd IEEE Syrup. on Founda-
tions of Computer Science (1982) 126-133. [10] D.E. Knuth, The Art of Computer Programming, Voi. 3--Sorting and Searching (Addison-Wesley,
Reading, MA, 1973). [11] D. Kozen, Lower bounds for natural proof systems, Proc~ 18th IEEE Symp. on Foundations of
Computer Science (1977) 254-266. [ 12] W.J. Savitch, Relationships between nondeterministic and deterministic tape complexities, J. Comput.
System Sci. 4 (1970) 177-192. [13] C.C. Sims, Computational methods in the study of permutation groups, in: J. Leech, ed., Computa-
tional Problems in Abstract Algebra (Pergamon Press, New York, 1970). [14] J.R. Driscoll and M.L. Furst, On the diameter of permutation groups, Proc. 15th A C M Symp. on
Theory of Computing (1983) 152-160.

