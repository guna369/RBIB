MATHEMATICS
LAMBDA CALCULUS NOTATION WITH NAMELESS DUMMIES, A TOOL FOR AUTOMATIC FORMULA MANIPULATION,
WITH APPLICATION TO THE CHURCH-ROSSER THEOREM
N. G. DE BRUIJN
(Communicated at the meeting of June 24, 1972)
ABSTRACT In ordinary lambda calculus the occurrences of a bound variable are made
recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the “distance” to the binding il instead of a name attached to that 1. The system is claimed to be efficient for automatic formula manipulation as well aa for metdingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.
1. INTRODUCTION
For what lambda calculus is about, we refer to [l], [3] or [a], although no specific knowledge will be required for the reading of the present paper.
Manipulations in the lambda calculus are often troublesome because of the need for re-naming bound variables. For example, if a free variable in an expesssion has to be replaced by a second expression, the danger arises that some free variable of the second expression bears the same name as a bound variable in the first one, with the effect that binding is introduced where it is not intended. Another case of re-naming arises if we want to establish the equivalence of two expressions in those situations where the only difference lies in the names of the bound variables (i.e. when the equivalence is so-called or-equivalence).
In particular in machine-manipulated lambda calculus this re-naming activity involves a great deal of Iabour, both in machine time as in programming effort. It seems to be worth-while to try to get rid of the re-naming, or, rather, to get rid of names altogether.
Consider the following three criteria for a good notation:
(i) easy to write and easy to read for the human reader; (ii) easy to handle in metalingual discussion ; (iii) easy for the computer and for the computer programmer.
The system we shall develop here is claimed to be good for (ii) and
25 Inclagationes

382
good for (iii). It is not claimed to be very good for (i) ; this means that for computer work we shall want automatic translation from one of the usual systems to our present system at the input stage, and backwards at the output stage.
An example showing that our method is adequate for (ii) can be found in sections 10-12, which present the kernel of a proof for the ChurchRosser theorem. This proof is essentially the one that was given in [l], where it was attributed to P. Martin-LBf (1971). Later private information by Mr. H. P. Barendregt disclosed that the idea is due to W. W. Tait. For a survey of proofs of the Church-Rosser theorem see [l] p. 1617. An elaborate treatment of the theorem can also be found in [4].
What is said about lambda calculus in this paper can be applied directly to other kinds of dummy-binding in mathematics. For example, if we have an expression like the product Il~,,f(k, m), we can write it as 17(~1,P, hf(k m)). F or any new quantifier we wish to use (like 17 here) we have to take a particular symbol that is treated as an element of the alphabet of constants (see section 3).
Application to AUTOMATH is explained in section 13.
2. NOTATION IN METALINGTJAL DISCUSSION
If we want to denote a string of symbols by a single (“metalingual”) symbol, we have to be very careful, in particular if this procedure is repeated, e.g. if we form mixed strings of lingual and metalingual symbols, represent these by a new symbol, etc.
We shall use parentheses ( ) for this purpose. If @ denotes a string, then CDis not the string itself. For the string itself we shall use (CD). We shall say that @ denotes the string and that (d)) is the string. Let us consider some examples, where the basic lingual symbols are all Latin letters as well as the hyphen. (These examples will show the use of ( ) in nested form, and therefore show that the simple device of using Greek letters on the metalingual level is definitely insufficient.) We shall use the symbol Q for reversing the order of a string. That is, &zqra) denotes ar@, whence (&nqra)) = arqp. Now let @ denote the word phi, and let .Z denote the word sigma. Then (Q)(Z) is the word phisigma, (Q)-(Z) =phi-sigma, (e((Z))) = amgis, and
(e(G4(@‘>)G>?aFaDD =
= (&pamgis)) = sigmaphi = (Z)(@).
The ( )‘s of this section are not to be confused with the similar symbols we use in Backus’ normal form of a syntax (e.g. in section 5).
In typescript and in handwriting it is convenient to underline a formula instead of putting it in ( )‘a. In print, however, underlining, and in particular multi-level underlining, is awkward.

383

3. NAME-CARRYIN~

ExPREssIoNs

We explain the kind of lambda calculus expressions which we want to

turn into namefree expressions. We have a set of “constants” (a, b, c, f, g, ... )

and a set of “variables” (5, t, u, v, w, x, . . .). And there is the symbol iz

that can have any variable as a suffix. Moreover we admit application,

of which the following is the interpretation. If CDdenotes a function, and

r a value of the variable, then (C&)((P)) is the value of the function

at (r). We shall use a different notation instead : we add a symbol A

to the list of constants, and we write A((@), (r)) instead of (@)((Q.

This puts it on a par with another kind of expression we are going to

admit, viz. things like f(, ,), where f is ‘any constant. In the interpretations

the latter kind of expression can be very close to what we have just called

application, but that does not bother us at the moment.

We shall not go into a formal definition of the syntax; the following

example (that accidentally does not contain the symbol A at all) will be

clear enough. We take the expression

(3-l) Mw? t, f(W% 4 x), W), w, y).

4. GETTING RID OF THE NAMES OF VARUBLES
In order to facilitate the discussion, we represent the expression as a planar tree which is easier to read than (3.1) itself.
If in (3.1) we change the names of the bound variables, e.g. x, t, u, s into p, u, S, X, we get an expression that is what is usually called LYequivalent to (3.1) :
WM@, u, f&a@, u, 4, &w)), w, Y).
We shall take the simplistic point of view that or-equivalent expressions are the same. Formula (3.1) contains bound variables X, t, u, s and free variables z, w, y. We shall keep a list of letters from which the free variables are to be taken. Let that list be, in this order, x, v, w, y; we draw the points AZ,&,, A,,,, & under the‘ tree.
The variables in the tree (fig. 1) are encircled (unless they occur as a suffix of A).
For every encircled letter we evaluate two integers which are indicated in the figure, viz. the reference depth and the level. The reference depth of an encircled variable at a certain spot, x say, is the number of A’s we encounter when running down until we meet 1, (this 1, is counted as one of the encountered A’s). It is agreed that the A,, Azo,IV, AZ (which do not belong to the tree itself) can also be encountered on our way down, e.g. if we run down to & we encounter &,, &, ilV, AZ.
The level of an encircled variable at a certain spot counts the total number of it’s we encounter when running down the tree until we get to the root (if the root is a 4, like 1, here, this one is also included in the count; the loose 1,) Are,&,, A, are not counted this time.

384 Let us now erase the variables and the integers indicating the levels ; we keep the reference depth. No information is lost: the erased letters and numbers can be easily reconstructed. If we are not interested in the names of the bound variables (and honestly we should not be) we can erase the suffix in AZ,16, A,, 1,. In those cases where we are interested in the names of the free variables we have to keep the ordered list z, o, w, y in order to be able to reconstruct our expression. Note that a point of the tree refers to a free variable if and only if the reference depth exceeds the level.
2,3
Fig. 1. Thus the information contained in our name-carrying expression can be presented as (4-l) WW, 1, f(W, 3, 7), W), 3, 2) with the free variable list z, v, w, y. This expression is called namefree. Note that (3.1) can be represented differently if we take a different free variable list. Any sequence of distinct variables may serve as a free variable list provided it contains x, w, y in any order. Conversely, every namefree expression can be decoded into a name-carrying one if we provide a free variable list that is long enough. This determines the name-carrying expression up to name-changing of the bound variables.

Instead of providing a finite free variable list we can take an infinite one (with the effect that we need not bother whether the list is long enough). The reference depths refer to a count in the reference list from right to left, corresponding to the fact that 2’s are written in front of the formula they act on. Therefore, such in&rite free variable lists have to be written as . .. . x3,22, x1 instead of the usual left-to-right notation of an infinite sequence.

5. THE SYNTAX FOR NAMEFREE EXPRESSIONS We present the syntax in Backus’ normal form:
(constant) ::=alblcldl...
(NF expression string) : : = (NF expression) I( NF expression string), (NF expression)
(NF expression) : : = (constant) I(constant)((NF expression string)) I(positive integer)IIZ(NF expression)
In the next sections we shall use, in an informal way, the notions “level” of an integer in an NF expression, in the sense of section 4. (The “reference depth” of an integer is, of course, the integer itself).

6. SUBSTITUTION

We shall define the effect of a substitution of a sequence of NF expressions into a single NF expression denoted by 4.
What we intend to describe is the following. Let . .., 2’3, &, 22’1denote the sequence (in right-to-left notation). (In practice only finitely many

&‘a are relevant; whence we need not always give the full infinite sequence). We attach a free variable list .. ., x3, x2,21 to 52, and one and the

same free variable list .. ., ys, ya, yi to every &. That determines namecarrying expressions to be denoted by 9* and &*. Now replace any free xa in (Q*) by the corresponding (&*). Thus we get an expression, to be

denoted by r*, with possible free variables . .., ys, ya, yl. With respect to

this free variable list .. ., ya, ya, yi this r* corresponds to the NF expression

S(...,(~3),(zi),(zi);

(52)) we shall define presently. The definition will

be recursive with respect to the structure of (a) ; Q may denote either

an NF expression string or an NF expression. We follow the syntactic

classification of section 5.

(i) If (9)=(Qn,), (Qa) then

w..., <23)> (E2>, (&>; where rr denotes

(Q)D=(fih

<F2)

et..., <Z3), (Z2>'z), ei>; (ii) If (Q) is a constant then

<-a>)>.

PC..., <z;>, <Z2), <z;>; <Q)))=(Q).

386

(iii) If (Q)=(y)((Ql))

(w h ere y denotes a constant

expression string) then

(S(...,(Z3),(Z2),

(Z1); (Q)))=(y)((S(...,

(iv) If (Q) is the positive integer k then

(Z3),(Z22),

w..., (23), (z;>, (-G>; (Qn>D=(-w.
(v) If (Sz) = A(F) then

and Qi an NF
(z;); (Ql)))).

(6.1) <A(..., <Z3), (.Z2), (&:1); @>)>=W(...,
where At denotes

<A,>> <n2>, <Al>, 1; <r)))

(6.2) Gq..., 4, 3, 2; <.w)>.

Note that (At) is obtained from (&) by adding 1 to every integer in (&) that refers to a free variable.

7. THE OPERATORSzh, AND GLOBAL DESCRIPTION OF SUBSTITUTION

It will be convenient to use the separate notation abbreviate
As(...,h+3,h+2, h+1;(Z)).

tn((Z))

in order to

It means adding h (which is a positive integer) to every integer (2) that refers to a free variable. The special case ri(( &)) occurs in (6.2). With the aid of this notation we can give a more global description of how (4. m-2 <23), (22X (W ; G&D is obtained: start from 9, and in each case where an integer t in (Q) exceeds its level I, we replace that t by
<Q((Zlt-2))). In automatic formula manipulation it may be a good strategy to refrain
from evaluating such rl((Z))‘s, but just to store them as pairs I, (L’), and go into (full or partial) evaluation only if necessary. The following formulas may come in handy:

@(...,(zS),(zi),

(z;); (zk(@))))=@(...,

(2X+3),

(zjc+2),

(zk+l);

@>)>.

The latter formula substitution : If

is a special case of the following

result on composite

then where

S( . . . . (Z2), <&>; <@)=fl(

. . . . (Pz), <T1); (4)

(W=W...,

<z22), <w;

(A>)>

(i= 1, 2, ...).

8. BETA REDUCTION
If we have an applicational expression A((@), (F)) (cf. section 3), then the interpretation is that (@) is a function, (r} a value of the variable

387
in that function, and A((@), (r)) is intended to represent the value of the function (@} at the point (P). If (CD) happens to have the form A(Q), then the function value can actually be evaluated. Roughly speaking, it comes down to substituting (r) in (Q) for all occurrences of the bound variable corresponding to the A in front of (L?).
A precise definition in terms of NF expressions is easy to give: If 52 and r denote NF expressions, then A(J(Q), (r)) is an NF expression to which beta reduction can be applied. The effect of the beta reduction is the NF expression
(8.1) @(..., 3, 9, 1, (0; Wn))).
The usual beta reduction for name-carrying expressions is obtained if we use one and the same free variable list for all four expressions 1(Q), (0, 4@), (0) and (8.1).

9. ETA REDUCTION
In terms of name-carrying expressions, q-reduction means the following. If Z denotes a name-carrying expression that does not contain the variable x, then &(Z)(x) (or in our notation &4((C), x)) has the same mathematical interpretation as (2) itself. The transfer from izz(Z)(z) to (22) is called q-reduction. We shall define it for NF expressions:
For any NF expression (A) we define as r-reduction the transition of

P-1)

W(~dWD,

1) intO (0

If we transform both expressions of (9.1) into name-carrying expressions by means of one and the same free variable list, the transition (9.1) becomes the q-reduction for name-carrying expressions.

10. MULTIPLE BETA REDUCTION
In section 8 we considered beta reduction of an NF expression. It was reduction of the full expression and not the beta reduction of a subexpression (local beta reduction) which we shall consider presently. In order to be able to indicate where the p-reduction has to be carried out, we introduce a set of constants (applicational symbols) to be used instead of the single symbol A. By this same device we get the possibility of multiple local beta reduction : we indicate a subset of the set of applicational symbols and we carry out beta reduction for all symbols of that subset.
Let U be a subset of the set of constants. An NF expression (Z} is called U-correct if every element of U that occurs in (2) is always followed by a string in parentheses with the form (n(Q), (r)). In other words, each occurrence of each element of U is ready for local beta reduction. To be more precise, we indicate how the syntax of section 5 is to be changed in order to get the syntax of the U-correct NF expressions. We have to replace the entries

388

(constant)/(constant)((NF

expression string))

bY (constant (constant

not in U)l(constant not in U)((NF expression string))1 in U)(A(NF expression), (NF expression))

and, moreover, we have to write “U-correct NF” instead of “NF” throughout.
The following theorem is intuitively clear, and easily proved formally with the aid of the recursive definition of substitution (section 6).

THEOREM 10.1. If Q, 21, &, . . . denote U-correct expressions, then

(a(..., (&), (&:I); (Q))) is U-correct.

We shall now define the operator fiv on the set of U-correct NF expressions recursively :
(i) If (2) is a single constant or a positive integer, then

(Bu(<QD = (2). (ii) If (2) = (y)((L’i), .. .. (&)), where (y) is a constant not in U, then

(Bu((zl>)>=(Y>((Bu((~l:l>)>,
(iii) If (22) =A(&) then

-m-9 @u(<WD).

(iv) If (Z)=(y)(A(Q),

<Bu((Q)> =Wu(<Wb (r)) and (y) E U then (cf. (8.1))

(Bu((Q)>=@(...,

33% 19 @u(<OD; <Bu(GvDD.

Needless to say, the effect of #?u on an expression string (&), .. ., (&)

is to be defined

by (~u((&>)>,

. . . . (Bu((W)).

11. THEOREMS ON MULTIPLE

BETA REDUCTION

THEOREM 11.1. If (Q), (Zi), (A’$, . .. are U-correct, then

=<fJ(...,

(Bu(eY..., <BU((zi)D>

(Z2:2), @l>; <Bu(<~1>D;

WD= @u(@>DD.

PROOF: For easier reading we shall drop the signs ) and ( throughout this proof.
The proof has to be read twice. The fist time we deal with the proof of

(11.1)

pvq..., &, ~;Ln)=s(...,gu~2,~u~;Bu~)

in the case that the & are integers. (This case is intuitively clear, but it takes little extra trouble to derive it formally.) In the second reading
the result of the lirst reading can be used. We apply induction with respect to the structure of Q, using the definition
of substitution as given in section 6. (Note that in the lirst reading the

389

induction hypothesis is used only for cases belonging to the first reading.)
The cases (i), (ii), (iv) of section 6 are very simple, and so is case (iii) if the constant y is not in U. We concentrate on the two remaining cases, viz. Q=U and .Q=y(flA, r) with y E U.
If Q=nr we apply (v) of section 6 twice :

(11.2)

/9uS(...,

22, z1; nr)=pds(...,

AZ, A, 1; r),

(11.3)

X(...,~u~z,~u~1;~~u~)=IS(...,

A2*, Al*, 1; pun

where & is given by (6.2), and &*=S(..., By section 10 (iii) and by the induction
side of (11.2) equals

4, 3, 2; /?u&). hypothesis, the right-hand

(11.4)

qd3...,

112, -41, 1; r)=As(...,puA2,

pu4 1; pun.

In the first reading of the proof the & and AZ are integers, whence @uZ; = ,&, and therefore dt* = lit =BuL&. So the right-hand sides of (11.3) and (11.4) are equal, hence the left-hand sides of (11.2) and (11.3) are equal. In the second reading of the proof we may use the theorem for the case that the & are integers ; hence

/!?un$=puS( . ..) 4, 3, 2; &)=S( . ..) 4, 3, 2; j3cLz*d)=(la*,

and the right-hand sides of (11.2) and (11.3) are equal. The second case we have to deal with, is il= =@A, r) with y E U. We
have to show

(11.5) /?uS(...,
The right-hand

&, 21; y(lA, r))=S(...,

,&~~2,/9u&;BuyW,

side equals, by section 10 (iv)

U).

S(..., ,9&'2, Bu&;S(..., 3, 2, 1, @UC BuA)).

By the formulas on composite substitution (section 7) this is

(11.6)

SC..., Buz;, Bu&,S(...,

BuZ2, Buz;; Bur);

@VA).

The left-hand side of (11.5) equals, according to 6 (iii),

(11.7)

Buy(S(...,

By 6 (v) we have

where

@=S(...,

Z2, zi; AA),S(...,

22, &; r)).

S(..., a& &; nA)=J@ AZ, A,, 1; A), A< =S(. .. , 3, 2 ; a&).

Applying 10 (iv) we can write for (11.7)

(11.8) By the induction

S(..., 2, 1, BuS(..., 22, a; hypothesis we have

q; Bu@).

Bu@=4...,Bdz,

@VA, 1; Bud),

390

and so we can apply the formula for composite substitution (section 7) to (11.8); it becomes

(11.9)

q..., 172, fl1; Bud)

where

l71=S( ...) 2, 1,ppq .. .. &, 21; I-); 1)=/9vS( . ..) &?, &; r) I;Tr+z=S( . ..) 2, 1, /!??ps.y.. . &, 21; q; pgA$) (i=l, 2, . ..).

We have to show that (11.9) equals (11.6). By the induction hypothesis we

have nl=S(...,8~~2,Buzi;Bur),

so it remains to show that l&+1 =/l U&

(i= 1, 2, . ..).

In the first reading of the proof the & are positive integers. Therefore

the Ilt are integers > 1; it follows that @ullr = At > 1, whence lL7g+z= rlt - 1 =

=&=/3u&.

In the second reading of the proof we may use the result of the Crst

reading :

puAr=puS( .. .. 3, 2; &)=S( ...) 3, 2; pum,

and the formula for J7i+i now results in (cf. section 7)

~~+l=s(..., 3,2, 1; pu&)=pu&.

THEOREM 11.2. Let U and ?’ be subsets of the set of constants, and let (2) be both U-correct and V-correct. Then (@u((Z))) is V-correct,

@v((Q)> is U-comet and (~u((Bv(<~>)>)>

= @v((Bu((~c>)>)>.

PROOF : Again we omit the (‘s and )‘s. The P-correctness of BuZ is easily proved by recursion: use the definition of /?u of section 10. In 10 (iv) we have to use Theorem 10.1.
By the same recursion we shall prove /?u@vZ=~v/?uZ. The only case where the induction step is non-trivial is the case Z= y(lzsz, P) with
y E U u 7. If y E U we have by 10 (iv)

pvpuz==pvfq .. .. 3, 2, 1, @UC BUQ).

By Theorem 11.1 this equals

(11.10)

S(..., 3,2, 1, pvpuc BVBUQ).

If y $ U, y E V we find by 10 (ii), 10 (iii)

Bvsu~=pvy(MuQ, Bun
and by 10 (iv) this equals (11.10). So y E U U V implies that /?v@uZ equals (11.10). On behalf of the induction hypothesis (11.10) is symmetric, whence ~~v,~uC=#?U~VZ.

12. THE CHURCH-R• SSERTHEOREM FOR BETA REDUCTION
We consider an NF expression L’ with a single constant A that can be used for p-reduction. We label all A’s in Z so that they become all different.

391

Next we take a subset U of the labelled .4’s, we apply BU and then remove the labels. This gives an NF expression Z’. We say that 2’ is a multiple reduction of .Z’, and we write .Z pm Z. If U has only one element, and if that element has just one occurrence in Z; the reduction is called single, and we write Z >s Z’.
If & and & satisfy either 21 >s & or Z2 >s .Z’i, we write & N 22. The Church-Rosser theorem for beta reduction says : If Zi N Zz N . .. N Zn then there are 111, . . .. ilk and III, . . .. 17, with

zi >SAl>

8 . . . >a (ik, zn >,qnl

>a . . . >a nh, (Ik=nh.

This can now be proved as follows. From theorem 11.2 we easily obtain : if ,Zi >,,, Zz, & >m & then there is a & with Zz > m &, Za >m &. Moreover it can be shown: If Z > m A then there is a sequence

.E >a Z; >a & >s . . . >a Zn=A.
(Actually, if every element of U occurs at most once in the U-correct expression Z; then we can arrange the elements of U as ui, . .., u,,, in such a way that
BWmJa-* BW,} .c=Bua.
The Church-Rosser theorem now follows by a trivial reduction argument. The above proof can be easily adapted to lambda calculus with expressions as types (see section 13).

13. NOTATION IN AUTOMATH
The mathematical language AUTOMATH (see [2]) has lambda calculus with types, and these types are again expressions. That is, instead of 1, we have things that can be visualized as &,> (Q), where @ and Q denote name-carrying expressions. We may think of x to be a variable of the type (@). It ie clear that we do not want z to have any binding influence on (@). In order to achieve this, we create a new lingual constant
T (just like we added A to our set of constants in section 3), and we write

(13.1)

T((@), MQ>)

instead of 1Zc(o) (i-2). Now (13.1) can be transformed into a namefree expression just like any other name-carrying expression.
The actual notation in AUTOMATH is different. Instead of (13.1) AUTOMATH uses [x, (@>](Q), and for the application A((@), (P)) AUTOMATH uses {(r})(G).

14. ALGORITHMS
An algorithm for turning an NF expression into a name-carrying one, can be described on the basis of the recursive definition of substitution in section 6. Let (Q) be an Nl? expression. Take a free variable list . ..) xa, x2, xi consisting of distinct letters which do not belong to our

392

alphabet of constants. Now add these xi to that alphabet, and evaluate

<St..., x3, x2, x1; (J-q)>
This is a namefree expression ; if we proclaim the x$‘s to be variables again, it becomes an intermediate expression where the free variables have names but the bound variables are nameless. If we want to have names for the bound variables too, we have to modify S slightly. We take an infinite store of letters yi, yz, .. . (different from the ~2’s and different from the constants), and we take a modified form of (6.1). Any time we get to apply (6.1) we take a fresh y (i.e. one that has not been used before) and we replace the right-hand side of (6.1) by

n&q..., (A), (A2), <A>> Y; (0)).

It is not very hard either to give algorithms that transform name-carrying

expressions into namefree ones. This can be done if a free variable list is

given (and then it has to be checked, during the execution of the algorithm,

whether this list is adequate), but we can also write an algorithm that

produces a free variable list itself. For the case of the first-mentioned

possibility we give a brief description of the crucial steps, Let .. ., x3, x2, x1

be a free variable list, and let (9) be the name-carrying expression we

want to transfer into the namefree expression (sZ*). If (Q) equals one

of the x’s, then (Q*) is an integer, viz. the index of that x. If ($2) is a

variable, but not one of the x’s, the answer is “free variable list was

wrong”. If (Q) = A,(r) then we transform (r) into the nameless expression

(r*) by means of the free variable list .. .. x3, x2, xi, y, and we have

(Q*)=A(r*).

The other cases (the cases (i) (Q)=(Qi), (Qz), (ii) (Q)=

a constant, (iii) (Q)=(/?)((Qi)))

are very easy.

Technological University, Department of Mathematics, Eindwven, N&&an&.

REFERENCES
1. BARENDREGT, H. P., Some extensional models for combinatory logics and Rcalculi. Doctoral Thesis, Utrecht 197 1,
2. BRUIJN, N. G. DE, The mathematical language AUTOMATH, its usage, and some of its extensions, Symposium on Automatic Demonstration (Versailles December 1968), Lecture Notes in Mathematics, Vol. 125, Springer-Verlag, 29-61 (1970).
3. CHURCH, A., The Calculi of Lambda Conversion, Annals of Math. Studies, vol. 6, Princeton University Press, 1941.
4. CURRY, H. B. and R. FEYS, Combinatory Logic. North-Holland Publishing Company, Amsterdam 1958.

