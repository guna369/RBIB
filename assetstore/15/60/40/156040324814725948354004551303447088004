Theoretical Computer Science 103 (1992) 409-420 Elsevier

409

Note

Simulation of Turing machines by a regular rewrite rule*

Max Dauchet
LIFL (CNRS, lJ.R.A. 369), Uniuersity of Lille-Flanders-Artois, d’A.scq Cedex, France

UFR IEEA, 59655 Villeneuve

Communicated by M. Nivat Received October 1991

Abstract

Dauchet, M., Simulation of Turing machines by a regular rewrite rule, Theoretical Computer Science 103 (1992) 409-420.

We prove that for any Turing machine, there exists a regular (i.e. left-linear and nonoverlapping,

also called orthogonal) and variable-preserving

rule that simulates its behaviour. The main

corollary is the undecidability of termination for such a rule.

1. Introduction

We associate with every Turing machine M a rewrite rule RM that simulates M. Intuitively, this result means that a single rewrite rule is as powerful as a Turing machine. Furthermore, this rule is regular (more precisely, left-linear, variable preserving and nonoverlapping). Particularly, the rule associated with a universal Turing machine simulates any computations, as the two rules .(e( K, x), y) + x and *(*(.(S, x), y), z) * .(.(x, z), *(y, z)) in combinatory logic. As another corollary, we get the undecidability of the termination problem for one rewrite rule. Jouannaud [7] pointed out this problem and we obtained a first solution of it in [2] with a rule which was not left-linear. We also improve a previous result of Dershowitz [4], who proved the undecidability of the termination problem

This research was supported in part by the “GDR-PRC ESPRIT Basic Research Working Group 3166 ASMICS.
* A previous version of this note appeared as [3].

Mathematiques

et Informatique”

and by the

0304.3975/92/$05.00

0 1992-Elsevier Science Publishers B.V. All rights reserved

410 M. Dauchet
for two-rule systems which rewrite “almost at the root” (i.e. rewriting acts up to a bounded depth). On the other hand, we know from [6] that termination is decidable for one Prolog-like rewriting rule (or narrowing rule), i.e. for a rule which rewrites only at the root of terms. A comparison of these three results draws the “frontier of decidability” for simple rewrite systems.
Questions arise with respect to one-rule systems: is termination decidable in the linear case? Is termination decidable in the semi-Thue case (i.e. when functions are monadic) [l]? The conjecture is that it is decidable.
In Section 3, we design the rule R ,+, associated with a Turing machine M. We suggest reading Section 3 first, taking a close look at the figures, and referring to Section 2 only if necessary. Lemma 5.1 justifies the construction described in Section 3. The Simulation Theorem 5.2 is a straightforward consequence of Lemma 5.1. In order to obtain Theorem 6.3, we reduce the halting problem and the termination problem for a rule RM to the same problem for a Turing machine M; this theorem is an easy consequence of the simulation theorem; the only point which is not obvious is that if some rewriting is infinite, we can deduce from it an infinite rewriting starting from an instantaneous description of the corresponding Turing machine.

2. Preliminaries

2.1. The Turing machine M: notations

Let M be a Turing machine with a single tape. Let Q = {9,, 9?, . . . , qn} be the set

of states. States are also denoted q, q’, q”, etc. Letters of the tape alphabet I=

{a,,%,...,

a,} are also denoted by small latin letters a, b, c, . , b,, . . . , c,, . . . , etc.

Without loss of generality, an instantaneous description ID of M is of the form

(c, ,... c,#L,q,a,d ,... d,,#R),

where, #L and #R are special tape symbols. Furthermore, either d, = #R (the usual case), or d, . . . d,,#R= #R and a = #R (limit right position). So, we always get two copies of #R on the right of the tape; that will be useful for the rewriting rule. We omit the details for the #L case. We suppose #L= a, and #R = a,,.
This ID means that M is in state q, the head scans the symbol a, the nonblank left portion of tape is #Lc,. . . c, (from the left end to the symbol preceding the read head) and the right-portion is d,. . . d,,#R (from the symbol following the scan head).
An empty nonblank portion is denoted by NIL. (q, a, b, q’, L) denotes a left-moving M-instruction; it means “if M is in state q reading the symbol a, then replace on the tape a by the symbol b, move left and go into state 9”‘, Right-moving instructions are defined the same way. To increase the nonblank portion of a tape, there are special left-moving instructions of the form (q, #L, #Lb, q’, L). They mean “if M is in state q reading the symbol #L, then insert the symbol 6, move left to position the head on #L again, and go into state

Simulation of Turing machines

41 I

4 “‘. Special right-moving instructions are defined the same way. Obviously, moving instructions such as (q, #L, 6, q’, L) are forbidden.
IDI t- ID2 denotes a compufafion step. It means that M moves from ID1 to ID2
by application of an instruction. If that instruction is J, we sometimes write
ID1 G ID2; ? is the reflexive and transitive closure of +-; if S is a sequence of instructions, ID1 f ID2 denotes the corresponding computation.

2.2. Rewrite rules: notations for the rule RM
We suppose that the reader is familiar with rewrite systems (see for example [S] for basic definitions and properties). Let us recall that a rule is left-linear (respectively right-linear) if no variable occurs more than once on the left-hand side (resp. right-hand side) of the rule; a rule is linear if it is both left- and right-linear. A rule is variable-preseruing if every variable which occurs on the left-hand side of the rule occurs on the right-hand side. A rule is regular iff it is left-linear and nonoverlapping (i.e., there are no nontrivial critical pairs) (cf. [S]).
We write t + u to indicate that the term t rewrites to the term u by a single application of some rule. 3 denotes the reflexive and transitive closure of a.
For any term, x, x’, x”, xhr x,, z, z,, zC, y, y’, . denote variables. Let us define the ranked alphabet J, on which the rewrite rule Rk, is defined: l each state symbol and tape symbol of M will be a constant of J; l each instruction name I,. . . , J, . . . , K is a unary operator of J; l A, Q, V, T, *, NIL are new operators. We define their rank by
rank(A) = 1 + cardinality of the tape alphabet 2,
rank(Q) = I+ cardinality of the set of states,
rank( V) = cardinality of the set of instructions.
rank(T) = 4; rank( *) = 2; rank( NIL) = 0.
Type left-tape terms are defined as follows: l *(#L, *(#L, NIL)) is of type left-tape, l if t is of type left-tape and a E X, *(a, t) is of type left-tape. Type right-tape terms are defined in the same way, replacing #L with #R.

3. The rule R,w associated with a Turing machine M

Construction 3.1. LEFT+ RIGHT will be an abbreviation of RM. The six variables of the rule are xi,, x1, z,, z,, y, and ~1~.Figure 1 describes the general form of the rule, Fig. 2 shows subterms t,, . . . , t,, . , , tK according the four types of instructions.

Example 3.2. Suppose (q,a,a,r,R),J=(r,b,a,q,R)and in Fig. 3.

Q = {q, r}, C = {#L, a, 6, #R}, rules = {1, J, K} with I =

K=(q,#R,b#R,q,R).Then

R, isasshown

412 M. Daucher

Fig. 1. List of subterms t,. i,. rK associated with the set of M-instructions I,. , .I,. , K.
If J is a right-moving instruction (9,. a,, b, 9k, R) then !, =

T R2 “‘““‘Rn

/*\
b

0&
‘h

qk x
t

Yh yL

where Bj = zC and Bj’= a,. if j’# j, and where Ri = z, and Ri’= 9,, if i' # i.

If J is a left-moving instruction (9,, a,, b, 9&, L) then t, = A

Q

/\K

x I

qk

Rn
xh /‘\ b / *\
‘h yt

where Bj = z, and L?j’= a,, if j'# j, and where Ri = z, and Ri’= q,, if i'# i.

Fig. 2 (continued overleqf).

Simulation of Turing muchines If J is a special right-moving instruction (q,, #R, b#R, qr. R) then 11 =

/\Y

,/A* /\ x

qk yh /* \
x #R

ht

NIL

where Bp = z, and Bj’= a,. if j'# p, and where Ri = z, and Ri’= q,, if i’# i.

If J is a special left-moving instruction (q,, #L, #Lb, qr, L) then I,, =

/ FK\

Q BlB2

BP

413

where El = z, and Bj’ = a,, if j’# 1, and where Ri = z, and Ri’ = q,, if i' f i.
Fig. 2 (cont.)

Fig. 3.

414
4. First properties of RR,

M. Dauchd

Claim 4.1.

(Rl) R,,,, is regular

(R2) (R3)

RM is variable preserving
IfLEFT overlaps RIGHT, then LEFT is uniJied with some f,.

Definition 4.2 (Type ID substitutions). A (I,,, I,, qS, a,, rh, rl) is an ID substitution iff l lh, rh and a, are tape symbols, l qS is a state symbol,
l I, is of type left-tape or *(#L, NIL), l r, is of type right-tape or *(#R, NIL).

substitution

a( xh, x,, z, , z,, y, , y,) =

Notation 4.3. *(c,, *(. . . *(c,, *(co, NIL)). . .)) is identified with c,. . . c,c,. Claim 4.4. We can identify ID of Turing machines with ID substitutions.

Definition and notation 4.5. Let a and 8 be substitutions.
LEFTJ & LEFT.8’ iff for some t(x), LEFTJ 3 R1GHT.a = (~J(t~)).a and f,.a = LEFTA’.

The definition means that LEFTJ &LEFT.8 iff LEFT.a is rewritten in a term (which is RIGHTA), the subterm t,.a of which is an instantiation of LEFT.
We call 6 a pseudo-rewriting (or pseudo-derivation). & denotes the reflexive and transitive closure of ti. If S is a sequence of instruction names, we denote by & the corresponding pseudo-rewriting.

Example4.6. Figures 4 and 5 illustrate some pseudo-rewriting 3.2.

for the rule of Example

5. The simulation theorem
The following lemma proves that “the construction of RM works as we expected”. It is the crucial part of this note, but its proof is easy.
Simulation Lemma 5.1. For any instruction J, LEFT.ID & LEFT.ID’ if ID t=!ID’.

Simulation of Turing machines

An M-computation IDt!ID’with

ID=(#L#L,q,a,a#R#R)

The corresponding R,,, derivation:

and ID’=(a#L#L,r,a,#R#R)

415

< A& ,jQ #L a b #R

==>

LEt;T

/
Ah
Q #I. a b #R

I\
Ad
Q #L a a #R
Ic\ Tq q

Q#La b a
kl T4r

Akl * q’
;a,2

a* #f+A/;

/l--Y 6q

a#.(? /;

/A
#L ML

#R NIL #L #L NIL

#R NIL

The corresponding pseudo-derivation:

Q #L a b #R LEFT‘ IR

LEfl
I= I =>

Q #L a b #R
m Tq r

Fig. 4.

416 M. Daucher

An M-(infinite) computation

IDl:ID2:ID3;ID4t~~.;IDn~..

with ID1 =(#L#L, q,a, h#R#R);

ID2=(a#L#L,

r, h, #R#R);

ID4=(baa#L#L,q,#R,#R);

.._, IDn=(b...baa#L#L,q,#R,#)...

The corresponding R,,,, pseudo derivation:

ID3=(aa#L#L,q,#R,#R);

Q #L a b #R

I

K#L a b #R

I=J=>

PR#L a b #R

“A #,A #L NIL

#RA #R NIL

ID2

Q. #L a b #R

*b
Q #L a b #R

“A aA

#R NIL

#,A #L NIL ID3

*b
Q #L a b #R

b *. -.

#R NIL

ID4 Fig. 5.

#,.A #L NIL

Simulation of Turing machines

417

Proof. First case: J is a right-move instruction. We start with the “if” part. Hypothesis: J is the rule (q?, a/, b, qk, R), ID = (c,,,c,,_, . . . c,, qi, ai, d,. . . d,) and
ID p ID’. Conclusion: r,.ID = LEFT(x;, x:, z:, z:, y;, y;).ID’. Proof: The Turing machine A4 gives ID’= (bc,. . . c,, qkr d,, d,. . . d,) and the
instantaneous description ID’ is identified with the substitution

ID’%, x:, z:, z;, yk, Y:) = (b, *Cc,, *(. . c,))), qkr d,, 4, *(. . . 4,)).

On the other hand, LEFT.ID = LEFT(x,, xt, z,, z,, y,, y,).ID, with

ID(x,) = c,; ID( z,) = a,;

lD(x,) = *(c,-, , *(. . . c,));

Wy,) = d,;

WY,) = *(4,

ID(G) = a;
*(. . .. 4,))).

We can match LEFT(xk, xi, z:, z:, y;, y:) with t_,.ID; because . B,=z,=a,. l R, = z, = qi, and
l y, = *(dz, . . .)),
it cannot be reduced to NIL (see the shape of special instructions Fig. 2.
Then.

at the bottom of

x;= b.9 x: = *(cm, *(. . . c,)));

z:= qr;

y: = *(d,, . . . , d,)) or NIL,

if y,=NIL, then z,=#R and y,=#R.

z;=d,;

yL=d,;

The “only if’ part and the three other cases (J is a left-move instruction, a special right-move instruction or a special left-move instruction) are left to the reader. 0

Simulation Theorem 5.2. (a) For any sequence S of insfructions
LEFT.ID & LEFT.ID’ ifs ID P ID’. (b) There exisfs t(x) such that LEFT.ID 3 r.LEFT.ID’ ifthere exists S such that LEFT.ID 6 LEFT.ID’.

Proof. Straightforward induction on the length of S or of the rewriting. 0 Corollary 5.3. There is a rule RL, which can simulate any Turing machine.

Proof. Consider a universal Turing machine U, which simulates any Turing machine M. 0

Example 5.4. See Figs. 4 and 5 again.

418 M. Dauchet
Remark 5.5. Let us consider the “rewriting tree” which is associated in the usual way with a sequence of rewriting as: the sons of some term are the terms that we can get in one step. If the Turing machine A4 is deterministic, the rewriting tree of LEFT.ID 3 t.LEFT.lD’ is a string because there is only one instruction J such that LEFT left matches fJ.

6. Infinite rewriting
Let us recall that the halting problem is decidable for some class 9? of algorithms if there is an algorithm which decides, for any data I and algorithm of C%!,if computations starting from t halt. The termination problem is decidable for some class 3 of algorithms if there is an algorithm which decides if for any algorithm of PA?e,very computation halts. Our goal is reducing halting and termination problems for a Turing machine to the corresponding problems for a rule.
Remark 6.1. We only study the derivation of ground terms, i.e., terms without variable. Nevertheless, in the following, we will derive terms with variables, considering variables as constants. This point of view is common [4].

Lemma 6.2. For any Turing machine M, we can associate an infinite M computation with any infinite RM rewriting.

Before proving this lemma, let us remark that, conversely, the Simulation Theorem (Section 5) associates an infinite Rhl rewriting with any infinite M computation. So, since it is well known that halting and termination are undecidable for the class of Turing machines, we obtain the following theorem.

Theorem 6.3. Halting problem and termination problems are undecidable for a rewrite rule.

Finally, let us sketch a proof of Lemma 6.2.

Definition 6.4. A term t is said to be minimalfor infinite R,,,, rewritings (minimal for short) if there is an infinite rewriting starting from t and, for every proper subterm u of t, there is no infinite rewriting starting from u.

Property 6.5. Let t be minimal and suppose t 3 t’. There is some substitution

that

(a) t=LEFT.a and t’= V(I(t,),..

,J(tJ),.. , K(t,)).d,

(b) there is some instruction (name) J of M such that t_,.a is minimal.

8 such

Simulation of Turing machines

419

Proof. Straightforward minimality of t. 0

consequence

of the form of R,,., (see Figs. 1, 2) and the

Property 6.6. With any infinite rewriting, we can associate an injinite pseudo-rewriting

J, ‘2
t~t,~tz...~t,~t,+,....

Jr, J,I+ I

Proof. Using Property 6.5 we associate a pseudo-rewriting t & t,.a with the first step

t + t’ of the infinite rewriting. As t,.a is minimal, we iterate the construction.

0

Construction 6.7. For any t = LEFT.& the substitution 3 is of the form

(d(x,), 3(x,), 3(G), a(G), d(Yh), Xv,)).

We associate with a another substitution IDa as follows.

l IDa

= if (a(~,,) E 2 or 8(x,) = #R) then #L else 3(x,).

l IDa

is the “type-tape part” of a(~,), it is recursively defined

by

. IDa l IDa l IDa l IDa

IDa = if a(~,,) = #L then *(#L, NIL) else if (3(x,) = *(a, u) with a E 2) then *(a, IDa( else *(#L, *(#L, NIL)).
= a(z,). =a(~,). = if (a(yJ EC or 3(x,) = #L) then #R else a(x,). is defined by
IDa = if a(y,,) = #R then *(#R, NIL) else if (a(Y,) = *(a, u) with a E 2) then *(a, IDa( u)) else *(#R, *(#R, NIL)).

Property 6.8. If t = LEFT3 is minimal and if

‘I “5 tl=dtl~t2~..~t,c----jtn+l..

Jr, J,, +,

is an injiniinitpeseudo-rewriting, then we get a new infinite pseudo-rewriting

t’=LEFT.IDam

‘1
t;&

t;. . .A t:, & j;,, . . .

where, for every n, t:, = LEFT.ID, for some instantaneous description ID,,.

420 M. Daucher
Proof. It is easy to check that nodes of a which are modified by Construction 6.7 are nodes which cannot be matched during rewriting. So, we can do “the same” infinite pseudo-rewriting, starting from LEFT.IDa instead of LEFT.& Furthermore, ID, is obviously an ID if ID,_, is an ID. 0
Eventually, using Simulation Theorem 5.2, we identify the new infinite pseudorewriting with an infinite Turing commutation. Lemma 6.2 is proved.

References

[I] R.V. Book, Thue systems as rewriting systems, J. Symbolic Cornput. 3 (1987) 39-68. [2] M. Dauchet, Termination of rewriting is undecidable in the one-rule case, in: Proc. MFCS 1988,

Lecture Notes in Computer Science, Vol. 324 (Springer, Berlin, 1988) 262-268.

[3] M. Dauchet, Simulation of Turing machines by a regular rewrite rule, in: Proc. Internat. Conf: on Rewriting TechniquesandAppficarions, Lecture Notes in Computer Science, Vol. 355 (Springer, Berlin,

1989) 109-120.
[4] N. Dershowitz, Termination, J. Symbolic Comput. 3 (1987) 69-116.
[5] N. Dershowitz and J.P. Jouannaud, Rewrite systems in: J. van Leeuwen, ed., Handbook ofTheoretical
Computer Science, Vol. E (Elsevier, Amsterdam, 1990) 243-320.

[6] Ph. Devienne, Weighted graphs: a tool for studying the halting problem and term complexity term rewriting systems and logic programming, Theoret. Compur. Sci. 75 (1990) 157-215.
[7] J.P. Jouannaud, Editorial of 1. Symbolic Cornput. 3 (1987) 2-3.

in

