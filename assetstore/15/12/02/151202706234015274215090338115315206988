A framework to visualize equivalenes between omputational
models of regular languages

Mauriio Ayala-Rinon
y
, Alexsandro F. da Fonsea
z
,
Haydee Wernek Poubel
y
and Jose de Siqueira
x
Abstrat
We disuss how to inrease and simplify the under-
standing of the equivalene relations between ma-
hine models and/or language representations of
formal languages by means of the animation tool
SAGEMoLiC. Our new eduational tool permits the
simulation of the exeution of models of omputa-
tion, as many other animation systems do, but its
philosophy goes further than these of the usual sys-
tems sine it allows for a true visualization of the
key notions involved in the formal proofs of these
equivalenes. In ontrast with the proposal of pre-
vious systems, our approah to visualize equivalene
theorems is not a simple \step by step animation"
of spei onversion algorithms between omputa-
tional models and/or grammatial representations of
formal languages, beause we make emphasis on the
key theoretial notions involved in the formal proofs
of these equivalenes.
Keywords: Automata theory, Formal languages, Vi-
sualization, Algorithm Animation
1 Introdution
Most of the basi notions studied in formal language
and automata theory an be illustrated and visual-
ized by means of graphial representations as state
or transition diagrams and grammatial derivation
trees. Some of these onepts an be easily under-
stood by interating with omputer simulations of
the involved mahine models. For instane, the me-
hanis of nite state automata and Turing mahines

Researh partially supported by Grant 47488/01-6 of
CNPq Brazilian ounil
y
Departamento de Matematia, Universidade de Braslia,
Brasil ayalamat.unb.br haydeemat.unb.br
z
Departamento de Cie^nia da Computa~ao, Universidade
de Braslia, Brasil alexi.unb.br Author supported
by CAPES Brazilian Counil
x
Departamento de Cie^nia da Computa~ao, Universidade
Federal de Minas Gerais, Brasil josed.ufmg.br
an be quikly assimilated after some simulations of
simple examples of these mahines with systems like
Deus ex Mahina [14℄, JFLAP [9℄, Turing's World
[2℄ et. Simulation of spei mahines is a very
produtive exerise in order to understand eah kind
of mahine, but the most important onepts of for-
mal language and automata theory are the ones that
establish the relations between these models, their
grammars and languages.
These relations are established by onstrutive
proofs that allow, from a spei instane of a model
or language representation as input, the onstrution
of the related model or language representation as
output. For example, a non-deterministi nite state
automaton an be transformed into a deterministi
nite state automaton; a ontext-free grammar into
a push-down automaton; et. Implementation of one
of the related translations or onversions is an easy
programming exerise, that surely will make lear
the subjaent equivalene relation (at least for the
programmer him/herself). But experimentation with
the diret transformations generated by these kind of
implementations is not the best way to make lear
to students these relations, sine in many ases very
important fators as the orretness of the related
translation algorithms are not evident.
From the previous perspetive, we explain here how
our visualization system SAGEMoLiC
1
has been en-
rihed in order to make possible a real explanation of
relations of equivalene between omputational ma-
hine models and their orresponding language repre-
sentations. SAGEMoLiC, that is a Java applet load-
able from any web browser, enables the onstrution
of nite state automata and the subsequent simula-
tion of their exeution with dierent inputs. Addi-
tionally, this system allows for diret transformations
between the dierent representations of the lass of
languages assoiated with these mahines, that are
1
Available at www.mat.unb.br/ayala/TCgroup/SAGEMoLiC.
SAGEMoLiC is a Portuguese aronym for Sistema de An-
ima~ao Graa de Teoremas de Equivale^nia entre Modelos e
Linguagens Computaionais.
1
the regular languages and dierent kinds of nite
state automata as presented in most of the textbooks
on automata and formal language theory. Extensions
of the philosophy of visualization of equivalene re-
lations here presented are of ourse possible for dif-
ferent lasses of formal languages and their related
mahine models and grammatial representations.
Previous advanes of our work were reported in [4℄,
where our idea of how to visualize the existene of
minimal nite automata was presented. In partiu-
lar, here we inlude all orretness proofs and explain
in detail three additional visualization methods not
previously reported: equivalene between nite au-
tomata and regular expressions and inexpressiveness
of empty transitions and of non-determinism for nite
automata.
2 Bakground: onversions be-
tween mahine models and
their language representa-
tions
We assume familiarity with the notions of formal lan-
guage and automata theory as presented in the text-
books [8, 12, 5, 10, 11, 13, 14℄. All our argumentation
will be presented based on the tool SAGEMoLiC that
we will briey introdue here.
In its urrent state SAGEMoLiC is a full ative vi-
sualization tool or animator of nite state and push-
down automata that allows for diret transformations
or onversions between the involved mahine mod-
els and their language representations. For ative
we mean that the user has to provide his/her own
mahine models and/or language representations for
being further exeuted and simulated aording to
appropriate inputs given also for him/her. Conse-
quently, SAGEMoLiC is adequate for being used for
a person with good knowledge of the eld, who is
able to selet adequate examples to explain spei
situations and notions related with the theory. The
tool was made as exible and dynami as possible: for
instane, during a simulation of exeution of a nite
state automaton, the user an interrupt the simula-
tion, return to the beginning of the exeution, hange
the input, speed up or slow down the simulation, et.
This exibility makes very easy the use and adapta-
tion of the system for the explanation of dependent
notions after some basi onepts are understood via
slow simulations or the use of very simple examples.
This makes the tool adequate for explanation of a
sequene of onepts of inreasing omplexity, that
REsRGs
DFAmin DFAs
"-NFAs
NFAs
Figure 1: Diret onversions with SAGEMoLiC
is typial from the area. Finally, other of the nie
properties of SAGEMoLiC is its portability: being it
a Java applet, the system an be used independently
of omputer arhiteture and operational system by
means of any web browser on the net.
Most of the urrently known systems, as for in-
stane Deus ex Mahina [14℄ and Turing's World [2℄,
for mahine model and related language visualiza-
tion are simple simulators and are not onerned with
the visualization of relations between mahine models
and their languages. From this point of view Rodger's
system JFLAP (see [3℄) is surely more interesting,
sine it is not only a simulator, but it also allows
for some diret onversions or translations between
mahine and grammatial language representations.
Moreover, in the last papers desribing the urrent
evolution of the system it is purposed to granulate
the steps in the transformations to make learer, at
least, these transformations [7, 9℄.
For the ase of the nite state automata ma-
hine model and the regular languages we have
the possibilities of diret onversions or transfor-
mations presented in Figure 1, where as usual the
aronyms "-NFA, NFA, DFA, DFAmin, RE and RG
stand for Non-Deterministi Finite Automata with "-
transitions, Non-Deterministi Finite Automata, De-
terministi Finite Automata, Minimal Deterministi
Finite Automata, Regular Expressions and Regular
Grammars, respetively.
One these transformations have been imple-
mented a good tentative to illustrate the relations
between the involved models or language represen-
tations is to granulate, as proposed by Rodger, for
dierent examples, the steps of the onversion. This
works well in the very simple ases suh as onstru-
tion of a RG from a DFA or onstrution of a "-NFA
from a RE, where the equivalene relation is straight-
forward. But doing that for the more omplex and
interesting ases doesn't work at all. In these ases,
2
beause of the omplexity of the transformation, stu-
dents (and teahers too) have the tendeny to fo-
us on the orret exeution of the algorithm (and
their partiular data struture) missing the most im-
portant that is the equivalene relation between the
models and language representations involved. Ob-
serve that this kind of exerise an be done by use of
sophistiated debuggers or program animators, but
this should not be the objetive of a system for il-
lustrating the equivalene relations as the ones we
want. The development of dediated systems to an-
imate these onversion algorithms as it has suess-
fully been done in other ontexts suh as the one of
string mathing algorithms (see for example [1℄) re-
sults inappropriate too. The ause of this is that all
these onversion algorithms are based on non graph-
ial representations of the involved mahine models
and grammars. In the remaining of this setion, to
make the previous disussion lear, we will explain
the problems that ome arise when trying to explain
in this way perhaps the most omplex equivalene
relation in the ontext of regular languages: for any
DFA there exists a unique equivalent minimal DFA
up to a renaming of the states. We will use the stan-
dard notation of DFA, as in [8℄, where they are repre-
sented by quintuples of the form hQ;; Æ; q
0
; F i, being
Q;; Æ; q
0
and F , respetively, the set of states, the
alphabet, the transition funtion, the initial state and
the set of aepting or nal states.
The minimization method onsists on the deter-
mination of indistinguishable states by examining
whether the result of proessing any word beginning
from two dierent states gives rise to idential an-
swers; that means, whether for any word following
the transition funtion beginning from these states
one nishes always in the same lass of states: -
nal or non-nal. As it is well-known, the lassial
DFA minimization algorithm, makes this by, rstly,
ordering the set of states; afterward, assuming pairs
of nal and non-nal states distinguishable and then
by systematially omparing pairs of states, p; q, in a
table aording to the image states of the transition
funtion for eah symbol of the alphabet: Æ(q; a) and
Æ(p; a);8a 2 . In the ase where there exists a sym-
bol suh that the image states are distinguishable one
an infer the distinguishability of states q and p. In
the other ase, the distinguishability of states q and p
depends on the eventual distinguishability of the im-
age states. We will remind this translation algorithm
with a very simple DFA illustrated in Figure 2.
After distinguishing between nal and non-nal
states we obtain the underlined marks \" in the
table in Figure 3. Subsequently, one has to analyze
q
1
q
2
q
3
q
6
0
0
0
0
0
0
0
1
1
1
1
1
1
q
0
q
5
q
4
1
Figure 2: A simple non-minimal DFA
the non-marked pairs of states from the ordered list
(q
0
; q
1
); : : : ; (q
0
; q
6
); (q
1
; q
2
); : : : ; (q
1
; q
6
); : : : ; (q
4
; q
5
),
aording to their transitions (for eah symbol of
the alphabet). For example, states (q
0
; q
1
) an be
marked as distinguishable sine Æ(q
0
; 0) = q
2
and
Æ(q
1
; 0) = q
5
, being q
2
and q
5
previously marked
as distinguishable. Also, the distinguishability of the
pair (q
1
; q
3
) depends on the one eventually omputed
of either (q
4
; q
5
) or (q
3
; q
6
), sine Æ(q
1
; 0) = q
5
and
Æ(q
3
; 0) = q
4
and Æ(q
1
; 1) = q
3
and Æ(q
3
; 1) = q
6
. Af-
ter analyzing eah non-marked pair of states in the
table, the non-marked pairs are onluded indistin-
guishable and merged as a single state. The fully om-
pleted table and the orresponding automaton (that
the reader ould reognize as the ones for omputing
binary numbers ongruent to 2 modulo 4) are pre-
sented in the Figure 3.
Well, now the question if whether illustrating to
students the exeution of this translation algorithm
(or another spei one) is useful for explaining the
existene of a DFAmin equivalent to eah DFA? And
our answer is no, beause visualization of a spei
onversion algorithm explains details about the algo-
rithm itself and not about the equivalene relation
between omputational models. Students are usually
onerned on the data strutures involved and per-
haps on the terminality of the method, but not about
what is really making the algorithm on the states. Af-
ter some visualizations of this onversion for dierent
DFAs they annot answer very important questions
about the models of interest suh as:
1. Why losing the distinguishability relation be-
tween states in this way produes as result sets
of indistinguishable states?
2. Why sets of indistinguishable states onform
equivalene lasses?
3. Why is the resulting DFA deterministi?
3
10
q
1;3;6
q
4;5
0
0
1
q
0;2
1
q
1
q
2
q
3
q
4
q
5
q
6
q
0
q
1
q
2
  
 
q
3
q
4
q
5

 
   
 


Figure 3: Final table and orresponding DFAmin
4. Why is the resulting automaton a minimal DFA?
5. Why is the resulting automaton unique?
3 A real visualization of equiv-
alene relations between ma-
hines and their language
representations
Sine our intention is to visualize the equivalene re-
lations and not simply to granulate spei transla-
tions, we have to analyze ase by ase eah equiva-
lene relation between mahine models and language
representation and deide whether it is possible to il-
lustrate that via simulation of an spei translation
algorithm. In the more omplex ases visualizing a
spei translation is not enough for explaining the
related equivalene relation.
SAGEMoLiC allows for nie and true visualiza-
tions of the relation between DFAs and their orre-
sponding minimized DFAs, the equivalene relations
between ("-N)DFAs and REs and of the relations
between NFAs and DFAs and between "-NFAs and
NFAs. These are the equivalene relations that we
don't onsider as obvious to be explained by a simple
granulation or debugging of spei translation al-
gorithms between these mahine models and/or lan-
guage representation. In the remaining of this setion
we briey explain our proposal for a true visual ex-
planation of eah of these relations.
3.1 Visualization of the relation be-
tween DFAs and their orrespond-
ing minimized DFAs
We ontinue our explanation using the example of the
previous setion. In this ase, the most important is
to explain and illustrate the relations of distinguisha-
bility and indistinguishability between states and their
properties. From a good understanding about that,
the students will be able to produe their own onver-
sion or minimization algorithms. More formally, for
any DFA hQ;; Æ; q
0
; F i, the indistinguishability rela-
tion to be explained, subsequently denoted by IDis,
is dened by
qIDis p,

8x 2 

either Æ(q; x); Æ(p; x) 2 F
or Æ(q; x); Æ(p; x) 2 Q n F

Obviously, the distinguishability relation, for
brevity denoted by Dis, orresponds to the omple-
ment of this relation, and a pair p; q of nal and
non-nal states are distinguished by the empty word,
sine Æ(p; ) = p 2 F and Æ(q; ) = q 2 Q n F . Of
ourse, eah state is indistinguishable from itself. Be-
ginning from this point, what should be explained to
the students is simply that one the Dis relation is
built, one obtains automatially its omplement, that
is the IDis relation. Consequently, what should be
laried and understood is that the Dis relation an
be built from the pairs of nal and non-nal states.
How to omplete the Dis relation an be diretly illus-
trated on the state diagram of a DFA as represented
in SAGEMoLiC:
1. To emphasize the beginning point, we paint in
two dierent olors the nal and non-nal states.
All pairs of nal and non nal states are inluded
in the Dis relation.
2. The user hooses an unonsidered pair of states,
hp; qi, that has not been inluded in the Dis re-
lation. These states are highlighted.
3. For eah alphabet symbol a 2  we highlight the
orresponding transitions leaving these states
and the destiny states: Æ(p; a) and Æ(q; a). For
symbols whose destiny states oinide nothing
is done. In the other ase, if the pair of states
hÆ(p; a); Æ(q; a)i has not been onsidered, this
step is reursively repeated for the new pair.
This is done until either a pair of destiny states
that belongs to the Dis relation is reahed or all
4
hq
0
; q
2
i
hq
1
; q
3
i
hq
4
; q
5
i hq
3
; q
6
i
q
2
q
6
1
1
1
1
0
0
0
0
Figure 4: Ordering of Consideration of Pairs
possible pairs of destiny states were previously
onsidered.
4. If for some alphabet symbol the orresponding
highlighted pair of destiny states has previously
been inluded in the Dis relation, then following
the highlighted transitions in the reverse dire-
tion, all onsidered pairs of states are inluded in
the Dis relation and highlighted transitions and
states are played down until no more states are
highlighted.
If all the pairs of destiny states oinide or all
possible pairs of destiny states were previously
onsidered, then a message appears saying that
eah two states onforming the onsidered pairs
are indistinguishable and an animation is done
showing their merging and a redrawing of the
transitions that leave from and arrive to them.
5. The user an hoose another pair of unonsid-
ered states and exeute step (2) to (4) until no
more states an be inluded in the Dis and IDis
relations.
We illustrate our method of explanation by show-
ing how this works for the example in Figure 2. Ini-
tially, all pairs of nal and non-nal states are in-
luded in the Dis relation. Suppose that the user
hooses the unonsidered pair of states hq
0
; q
1
i. From
this pair, following the transitions for the symbol 0,
we reah the pair of states hq
2
; q
5
i that belongs to Dis.
Then hq
0
; q
1
i is inluded in the Dis relation. Now,
suppose that the user selets the unonsidered pair
hq
0
; q
2
i. The ordering of the analysis is illustrated in
Figure 4. Following the two transitions for 0, Æ(q
0
; 0)
and Æ(q
2
; 0), we reah the sole state q
2
that is indis-
tinguishable from itself. The transitions for 1 give the
unonsidered pair hq
1
; q
3
i; Æ(q
0
; 1) = q
1
and Æ(q
2
; 1) =
q
3
. Sine the pair hq
1
; q
3
i hasn't been onsidered and
doesn't belong to Dis, we reursively hek its distin-
guishability. From hq
1
; q
3
i we reah the unonsidered
pairs hq
5
; q
4
i and hq
3
; q
6
i; Æ(q
1
; 0) = q
5
, Æ(q
3
; 0) = q
4
,
Æ(q
1
; 1) = q
3
and Æ(q
3
; 1) = q
6
. On the one side, the
distinguishability of hq
5
; q
4
i depends on the ones of
hq
2
; q
0
i and hq
3
; q
1
i that were previously onsidered
in this step. On the other side, the distinguishability
of hq
3
; q
6
i depends only on the one of the onsidered
pair hq
4
; q
5
i, sine Æ(q
3
; 0) = q
4
, Æ(q
6
; 0) = q
5
and
Æ(q
3
; 1) = Æ(q
6
; 1) = q
6
. No additional pairs of un-
onsidered states an be reahed neither from the se-
leted pair hq
0
; q
2
i nor from the other pairs involved in
the analysis (i.e. hq
1
; q
3
i, hq
5
; q
4
i and hq
3
; q
6
i). There-
fore, the distinguishability of the two states q
0
and q
2
as well as of every two states onforming the onsid-
ered pairs depend on themselves. Consequently, one
an onlude that the states q
0
and q
2
as well as q
4
and q
5
and q
1
; q
3
and q
6
are indistinguishable. Join-
ing these sets of states and aggregating the respetive
transitions we obtain the redued automaton in Fig-
ure 3.
We think that explaining the equivalene relation
in this general way allows students (to try) to an-
swer in a oherent manner some of the essential ques-
tions about the existene and uniqueness of redued
DFAs that were formulated at the end of the pre-
vious setion. Moreover, after this kind of visual-
izations of these relations, that are independent of
any (granulation of a) spei translation algorithm,
some of the students ould give their own algorithms
for onstruting the Dis relation. For instane, they
an straightforwardly formulate algorithms that be-
ginning from pairs of non-nal and nal states and
following the transition funtion in the reverse di-
retion (that is the inverse relation of the transition
funtion) distinguish new pairs of states and so on
until no more pairs of states an be distinguished.
They an also nd some problems suh as the lak of
a mehanism for eliminating unneessary states, that
is states that annot be reahed from the start ones
or from where no nal states an be reahed.
Corretness of our proposed visualization method
is proved by indution showing that independently
of the seletion of unonsidered pairs of states at any
iteration of the proess (step 2), deisions taken about
belonging or not to the Dis relation are orret.
Theorem 3.1 (Corretness DFA vs DFAmin)
The visualization method above proposed is or-
ret and therefore independent of any seletion of
unonsidered pairs of states.
Proof. The proof is done by indution on the
seletions given by the user.
Before the rst seletion all pairs of non-nal and
nal states are inluded in the Dis relation (step 1).
That is orret aording to the denition.
5
Suppose that after k   1 seletions all deisions
about distinguishable and indistinguishable states
have been taken orretly (steps 2,3,4 and 5). That
means that all pairs of states inluded in the Dis
relation are eetively distinguishable as well as all
merged pair of states are eetively indistinguishable.
Suppose that the k
th
seleted unonsidered pair of
states is hp
0
; q
0
i (step 2). Two ases have to be on-
sidered.
Case 1: From hp
0
; q
0
i we reah (step 3) a pair of
states hp
n
; q
n
i previously inluded in the Dis relation:
hp
0
; q
0
i; hp
1
; q
1
i; : : : ; hp
n
; q
n
i, where for s
1
; : : : ; s
n
2
, Æ(p
i
; s
i+1
) = p
i+1
and Æ(q
i
; s
i+1
) = q
i+1
, 8i =
0::n-1. Sine by hypothesis, the states p
n
and q
n
have
been orretly plaed in the Dis relation, there exists
a word x 2 

that distinguishes p
n
and q
n
; i.e., ei-
ther Æ(p
n
; x) 2 F and Æ(q
n
; x) 2 Q n F or Æ(p
n
; x) 2
Q n F and Æ(q
n
; x) 2 F . Consequently, (step 4)
the pairs of states hp
0
; q
0
i; hp
1
; q
1
i; : : : ; hp
n 1
; q
n 1
i
are orretly plaed in the Dis relation, beause the
words s
1
: : : s
n
x; s
2
: : : s
n
x; : : : ; s
n
x distinguish these
pairs of states, respetively.
Case 2: from hp
0
; q
0
i we reah (step 3) a
losed set of previously unonsidered pairs of states
fhp
0
; q
0
i; : : : ; hp
n
; q
n
ig (none of whih has been pre-
viously inluded in the Dis relation). That means
that for any word x 2 

, and for all i = 0::n ei-
ther there exists j = 1::n suh that Æ(p
i
; x) = p
j
and
Æ(q
i
; x) = q
j
or Æ(p
i
; x) = Æ(q
i
; x). Sine before the
rst seletion were done, all pairs of nal and non
nal states were plaed in the Dis relation, that im-
plies that 8i = 0::n and 8x 2 

, Æ(p
i
; x) 2 F if and
only if Æ(q
i
; x) 2 F . Consequently, pairs of states
hp
i
; q
i
i;8i = 0::n are orretly deided indistinguish-
able and the merging of these states (step 4) is orret
too. 
3.2 Visualization of the equivalene
between ("-N)DFAs and REs
On the one side, that the regular language assoiated
with a given RE orresponds to a "-NFA is an obvi-
ous fat easy to explain. On the other side, our idea
to visualize this relation is to show graphially and
diretly over the state diagram of a ("-N)DFA how in-
termediate states (i.e., states that are neither initial
nor nal) an be eliminated one by one by replaing
eah ombination of \input transition" and \output
transition" to and from a spei intermediate state
by a new extended transition whose label is the RE
built by onatenating (see the Figure 5)
 the RE labelling the \input transition",
r t
s
1
s
n
: : :
r(s
1
[ : : : [ s
n
)

t
Figure 5: Building extended transitions
 the Kleene losure of the union of the REs la-
belling all the loop transitions at this state and
 the RE labelling the \output transition".
Before the rst seletion of an intermediate state and
just after eah elimination of a proessed state all
transition sets between the same pair of states (in-
luding loops) are merged in a sole transition whose
label is built as the union of the REs labelling the
transition set.
This is done for eah nal state, onsidering the
remaining aepting states as non nal ones, until all
intermediate states are deleted and only the initial
and the urrent nal state remain. Then one obtains
easily a RE for all words aepted by this nal state.
This graphi visualization is done diretly over the
state diagram and it illustrates the priniple in that
all algorithmi approahes for this transformation are
based. From the understanding of this priniple stu-
dents will be able to build his/her own translation al-
gorithmi methods to onstrut a RE orresponding
to a given ("-N)DFA. Moreover they will be able to
provide improvements on the input ("-N)DFAs as for
example elimination of unneessary states, replae-
ment of the set of nal states for a sole aepting
state, et.
In SAGEMoLiC, this visualization is independent
of any indexing or ordering over the set of states
and alphabet symbols and subsequent indutive or
reursive onstrution of the orresponding REs on-
trasting with the onstrutions that are given in
[8, 5, 11, 13, 14℄. In partiular, one an ontrast
our natural visualization with perhaps the most pop-
ular onversion method that is the one based on
the initial indexing of states (and alphabet symbols),
say q
0
; : : : ; q
jQj 1
(and a
1
; : : : ; a
m
), from a given ("-
N)DFA hQ;; Æ; q
0
; F i, and subsequent reursive on-
strution of the family of REs orresponding to the
sets of words R
k
i;j
dened by the indutive sheme
R
0
i;j
=
S
q
j
2Æ(q
i
;a)
a
R
k
i;j
= R
k 1
i;k
(R
k 1
k;k
)

R
k 1
k;j
S
R
k 1
i;j
6
After understanding that \for all 0  i; j; k < jQj,
R
k
i;j
orresponds to the set of words over  that an
be proessed beginning from the state q
i
and nishing
in the state q
j
through intermediate states with sub-
sripts that are less or equal than k" aording to our
indexing of states, a straightforward reursive on-
strution of the REs assoiated with the sets R
jQj 1
0;p
for all 0  p < jQj 1 suh that q
p
2 F may be done.
Then one an onlude that the RE assoiated with
the union of all these sets,
S
q
p
2F
R
jQj 1
0;p
, denotes the
language aepted by the given automaton.
Our point here is that this onversion is foused
on the reursive denition that allows for the al-
gorithmi onstrution of the reursive expressions.
Consequently the understanding of its orretness de-
pends on the omprehension of the intrinsi algorith-
mi properties involved in the indutive denitions.
Observe that this textual onstrution of sets is
a partiularization of our previously proposed visu-
alization: during the k
th
stage of the omputation,
where the state r
k
has been randomly seleted after
having randomly seleted and proessed the interme-
diate states r
1
; : : : ; r
k 1
in the previous stages, we
onstrut an extended transition from eah state p to
eah state q labelled with the RE that orresponds to
a set denoted as S
k
p;q
that is built as the union of
 the RE labelling the urrent transition from p to
q, that orresponds to the set S
k 1
p;q
and
 the onatenation of
{ the RE labelling the urrent transition from
p to r
k
, that orresponds to the set S
k 1
p;r
k
,
{ the Kleene losure of the union of the REs
labelling the loop transitions at r
k
, that or-
responds to the set S
k 1
r
k
;r
k
and
{ the RE labelling the urrent transition from
r
k
to q, that orresponds to the set S
k 1
r
k
;q
.
At any stage of the visualization, the semantis of
the RE assoiated with the set S
k
p;q
may be seen as
an invariant that orresponds to the words that an
be proessed beginning from the state p nishing in
the state q through the intermediate states r
1
; : : : ; r
k
,
that were previously seleted. This is independently
of any seletion of the states.
Corretness of our visualization is proved by in-
dution on the number of stages by showing that this
invariant holds during the whole proess.
Theorem 3.2 (Corretness RE vs FA)
Independently of any strategy of seletion, the
above mentioned invariant holds before all seletions
of states during the whole visualization proess.
Consequently the proposed visualization method is
orret.
Proof. Sine the RE of an automaton obviously
orresponds to the union of the REs assoiated with
the languages aepted by proessing or spelling a
word beginning at the initial state and nishing at
eah of its nal states, our analysis an be restrited
to automata with a sole nal state.
Suppose the invariant holds after the last possi-
ble seletion and elimination of an intermediate state.
Then we have two ases to onsider.
Case 1: the initial state p and the nal state q
are dierent. By hypothesis, the REs labelling the
sole possible extended transitions assoiated with the
sets S
m
p;q
; S
m
q;p
; S
m
p;p
and S
m
q;q
where m = jQj   2, or-
respond to the languages of words that an be pro-
essed (or spelled) from p to q, from q to p, from
p to p and from q to q through all intermediate
states, respetively. Then the RE assoiated with
the set ((S
m
p;p
)

S
m
p;q
(S
m
q;q
)

S
m
q;p
)

(S
m
p;p
)

S
m
p;q
(S
m
q;q
)

ob-
viously orresponds to the language aepted by the
automaton; i.e., all words proessed beginning at the
initial state p and nishing at the nal state q allow-
ing the use of all states of the automaton.
Case 2: The initial and nal states oinide. De-
note this state as p. Then we obtain a nal extended
automaton with a sole state and a unique possible ex-
tended transition assoiated with the set S
m
p;p
, where
m = jQj   1. As before, by indution hypothesis
we an onlude that the RE assoiated with the set
(S
m
p;p
)

orresponds to the language aepted by the
automaton.
Consequently, if the invariant holds at the end of
the visualization proess the RE orresponds or-
retly to the language aepted by the input automa-
ton.
Now we prove that the invariant holds before all se-
letions of states during the whole visualization pro-
ess.
The invariant holds before the rst seletion. Just
before the rst seletion and after merging all transi-
tion sets between the same pair of states of the input
automaton, all labels of the resulting extended tran-
sitions orrespond to the sets S
0
p;q
of (one symbol or
empty) words that an be proessed diretly from p
to q without going through intermediate states.
Suppose that after having randomly seleted, pro-
essed and eliminated k   1 states, say r
1
; : : : ; r
k 1
,
the invariant holds. At this stage, we randomly se-
let the intermediate state r
k
that is proessed and
eliminated: all pairs of \input" and \output" tran-
sitions to and from r
k
are onsidered and replaed
7
by new extended transitions and after that, all tran-
sition sets between the same states are merged in a
sole transition whose label is the union of the REs
labelling these transitions. Just before the k+1
th
se-
letion, for all pairs of remaining states p and q, the
orresponding transition is labelled by the union of
the REs assoiated with S
k 1
p;q
S
S
k 1
p;r
k
(S
k 1
r
k
;r
k
)

S
k 1
r
k
;q
,
where by indution hypothesis S
k 1
p;q
has been or-
retly dened as the set assoiated with the RE of
the language of words that an be spelled beginning
at p and nishing at q through intermediate states
r
1
; : : : ; r
k 1
and S
k 1
p;r
k
(S
k 1
r
k
;r
k
)

S
k 1
r
k
;q
is the set asso-
iated with the RE orresponding to the language
of words that an be proessed from p to q going
through the state r
k
and possibly through the states
r
1
; : : : ; r
k 1
. Consequently, the new extended tran-
sition is labelled by a RE whih orresponds to the
language of words that an be proessed beginning
at p and nishing at q through intermediate states
r
1
; : : : ; r
k
, that is our invariant. 
3.3 Visualization of the equivalenes
between NFAs and DFAs and be-
tween "-NFAs and NFAs
That non determinism is an inessential property of -
nite automata is graphially visualized over the state
diagram of a given NFA by illustrating the priniple
that enables the replaement of states by omposed
states, that is sets of states of the input NFA, obtain-
ing an equivalent DFA. Beginning from the initial
state of the input automaton, whose state diagram is
preserved during the whole proess in a anvas, the
user an selet in a seond anvas a omposed state
and for eah alphabet symbol, say a, the orrespond-
ing output transitions and the set of destiny states
are highlighted. Simultaneously, in the seond an-
vas the automaton in onstrution is inremented by
inluding an a-transition from the seleted omposed
state to the omposed state that orresponds to the
subset of highlighted states. When the destiny om-
posed state has not been previously generated a new
omposed state is drawn. Composed states that own
a nal state of the input NFA are dened to be nal.
This is done beginning from the initial input state
until all omposed states have been seleted and no
more additional omposed states an be generated.
The priniple for eliminating "-transitions in "-
NFAs is graphially visualized over the state diagram
of the automata independently of any translation al-
gorithm. The user selets a state and the system
will highlight the seleted state and all the states
reahable via a sequene of "-transitions from this
state. Then, for eah alphabet symbol, say a, the
states reahed via transitions labelled by a from the
highlighted states are highlighted by using a dierent
olor. In another anvas, where a opy of the states
of the given "-NFAs has been initially drawn, tran-
sitions labelled by a from the state orresponding to
the seleted one to the states orresponding to the
formerly highlighted states are built.
By illustrating (in this way) the key priniples sub-
jaent to the previous equivalene relations, we think
a solid explanation will be oered to the students.
From this point, surely an interesting and enrih-
ing exhange about properties and relations between
these mahines and/or grammatial language repre-
sentations will take plae. Of ourse, being this visu-
alization independent of any translation method, an
important part of this exhange will be foused on
how to implement eÆient translation algorithms.
For the ase of inexpressiveness of empty transi-
tions, our visualization method an be proved or-
ret in a way similar to the ase of elimination of
empty transitions for showing the orretness of the
onversion of a Thompson mahine into a Glushkov
mahine as in [6℄. The main dierene here is that
our automata are not restrited to be homogeneous
as the ones generated by the Thompson onstru-
tion, for whih all transitions inident to a state have
to be labelled either with the empty symbol or the
same alphabet symbol. Initially, we establish with
preision the operation done during one step of our
visualization; that is what the null-elimination on-
strution over an automaton M = hQ;; Æ; q
0
; F i af-
ter seleting a state p aording to our visualization
method means. Beginning with a opy of M without
any transition, that we denote as M
0
= hQ;; Æ
0
:=
;; q
0
; F
0
:= F i, the set of transitions in the opy is
inremented for eah seleted state p by adding an
a-transition from p to q for eah path onsisting of: a
sequene of empty transitions beginning from p, an a-
transition and empty transitions nishing at q. This
is done by omputing the empty losure of p, that is
the set of states reahable form p through empty tran-
sitions and denoted as usual by " los(p), then the
set of reahable states via a-transitions from states
belonging to " los(p) and subsequently the " los
of all these reahed states. Additionally, during the
whole proess, all onsidered states whose " los
owns a nal state are inluded into the set of nal
states of the opy of M . Supposing the opy of M
has been inremented in this way after k 1 randomly
seletions of states, say r
1
; : : : ; r
k 1
, and orrespond-
ing appliations of the null-elimination onstrution
for these states until we have obtained the automaton
8
Mk 1
= hQ;; Æ
k 1
; q
0
; F
k 1
i, elim(M;M
k 1
; r
k
)
gives the automaton
M
k
= hQ;; Æ
k
; q
0
; F
k
i
where
Æ
k
= Æ
k 1
[ f(r
k
; a; q) j q 2 " los(Æ(p; a));
for some p 2 " los(r
k
); a 2 g
F
k
= F
k 1
[
fq j q 2 " los(r
k
); " los(q) \ F 6= ;g[
fq j q 2 " los(Æ(p; a)); for some a 2 ;
p 2 " los(r
k
); " los(q) \ F 6= ;g
We will establish the onuene of the null-
elimination onstrution. That is, the order of se-
letion of states and subsequent appliation of the
null-elimination onstrution do not matter and all
permutations of their order of seletion yield the same
result. Then we will prove the orretness of our vi-
sualization method.
Lemma 3.1 (Conuene of elim) For all "-NFA
M = hQ;; Æ; q
0
; F i, suppose we have applied the
null-elimination onstrution beginning from the au-
tomaton M
0
= hQ;; Æ
0
; q
0
; F
0
i, for a sequene of
randomly seleted dierent states r
1
; : : : ; r
k
, where
jQj   k  2, and we have obtained the automa-
ton M
k
= hQ;; Æ
k
; q
0
; F
k
i. Let p
1
; p
2
2 Q n
fr
1
; : : : ; r
k
g. Then elim(M; elim(M;M
k
; p
1
); p
2
) =
elim(M; elim(M;M
k
; p
2
); p
1
)
Proof. The proof is diret from the denition of
elim, sine the addition of new transitions and nal
states depends diretly on the transition funtion Æ
and the set of nal states F of the input automaton
M and the seleted states p
1
and p
2
.
The notation M
k+2
= hQ;; Æ
k+2
; q
0
; F
k+2
i and
M
0
k+2
= hQ;; Æ
0
k+2
; q
0
; F
0
k+2
i will be used to denote
briey the automata elim(M; elim(M;M
k
; p
1
); p
2
)
and elim(M; elim(M;M
k
; p
2
); p
1
), respetively.
Suppose p 2 F
k+2
. If p 2 F
k
then p 2 F
0
k+2
. If
p 62 F
k
but p belongs to the set of nal states of
elim(M;M
k
; p
1
), then either there exists q
1
2 F and
p 2 " los(p
1
) and q
1
2 " los(p) or there exists
a 2 ; q
2
2 " los(p
1
), q
1
2 Æ(q
2
; a), p 2 " los(q
1
)
and q
3
2 F \ " los(p). Consequently, p 2 F
0
k+2
. If
neither p 2 F
k
nor p belongs to the set of nal states
of elim(M;M
k
; p
1
), then either there exists q
1
2 F
and p 2 " los(p
2
) and q
1
2 " los(p) or there ex-
ists a 2 ; q
2
2 " los(p
2
) and q
1
2 Æ(q
2
; a); p 2
" los(q
1
) and q
3
2 F [ " los(p). Consequently,
p 2 F
0
k+2
. We onlude that F
k+2
 F
0
k+2
Symmet-
rially, one an prove that F
0
k+2
 F
k+2
.
Now we prove that Æ
k+2
and Æ
0
k+2
oinide. In
fat, if (p; a; q) 2 Æ
k
, p 6= p
1
and p 6= p
2
, then
(p; a; q) 2 Æ
k+2
and (p; a; q) 2 Æ
0
k+2
. If (p
1
; a; q)
belongs to one of these transition funtions, then
it has been added to the transition funtion Æ
k
be-
ause there is a path from p
1
to q in the input ma-
hine M , that onsists of a sequene of empty tran-
sitions beginning at p
1
, one a-transition and a se-
quene of empty transitions nishing at q. By de-
nition of the null-elimination onstrution, the tran-
sition (p
1
; a; q) should be inluded in the transition
funtion of the automaton elim(M;M
k
; p
1
) and pre-
served within Æ
k+2
, that is the transition funtion of
M
k+2
, as well as in the transition funtion of the
automaton M
0
k+2
obtained from elim(M;M
k
; p
2
) by
seleting the state p
1
. Then (p
1
; a; q) 2 Æ
k+2
implies
(p
1
; a; q) 2 Æ
0
k+2
. Symmetrial, one an prove that
Æ
0
k+2
 Æ
k+2
.
Then, we onlude that M
k+2
=M
0
k+2
. 
Theorem 3.3 (Corretness "-NFA vs NFA)
Independently of the seletion of states our visual-
ization method gives as result a unique automaton
without "-transitions, that aepts the same language
that the input automaton aepts.
Proof. Uniqueness is a straightforward onse-
quene of the previously proved onuene property.
To prove orretness, on the one side, sine all
states have to be seleted one and proessed to ob-
tain the nal transformed automaton M
jQj
, all new
nal states belonging to F
jQj
are well-dened. That
is, for all p 2 F
jQj
, " los(p) \ F 6= ;. On the other
side, if Æ(w; q
0
) 2 F then Æ
jQj
(w; q
0
) 2 F
jQj
. In fat,
it is enough to eliminate all empty transitions in the
spelling of w in M . If Æ
jQj
(w; q
0
) 2 F
jQj
, all steps in
the spelling of w in M
jQj
orrespond to one path in
the spelling of w inM onsisting of empty transitions,
an one-symbol transition and empty transitions. 
Notie that the null-elimination onstrution elim
depends diretly on the input automaton. Therefore
the previous proof may be done diretly without the
use of the onuene property.
For the visualization of the equivalene between
DFAs and NFAs, orretness and uniqueness of the
resulting automata is a onsequene of the fat that
the omposed states (subsets of states) generated
from the input automaton M = hQ;; Æ; q
0
; F i as
well as the omputed transitions between them are
uniquely and diretly determined from the input au-
tomaton. Uniqueness of the transitions between om-
posed states holds sine for eah subset of states
P  Q and eah a 2 , [
p2P
Æ(p; a) is uniquely de-
ned. Uniqueness of the generated set of omposed
states is a onsequene of the fat that, independently
of the strategy of seletion of omposed states, begin-
9
ning from the initial state and following the transi-
tions for all alphabet symbols a sole set of omposed
states may be reahed. This an be easily veried, be-
ause when no more additional omposed states an
be reahed all words in 

an be uniquely spelled
in the resulting automaton. Corretness proof of the
resulting onstrution do not dier of the ones pre-
sented in text books of formal language theory as for
example [8℄ (Theorem 2.1) or [5℄ (Lemma 4.16). Con-
sequently, we an onlude the following theorem.
Theorem 3.4 (Corretness NFA vs DFA) Our
visualization of the equivalene between NFAs and
DFAs gives as result a uniquely determined DFA
equivalent to the input NFA, independently of the
seletion of omposed states.
Proof. See sketh before the Theorem. 
4 Conlusions and future work
SAGEMoLiC is not a tutorial system and has to be
used for an expert on formal language and automata
theory to illustrate and explain notions to the stu-
dents. This doesn't mean that the system is hard to
use, but that the user has to have some experiene
with this theory to provide interesting examples of
mahines and language representations. For obtain-
ing a tutorial system that ould be used diretly for
students without knowledge about this eld the sys-
tem is being extended with a passive module, where
the user will nd very well seleted built-in examples.
One interesting problem of graphial representa-
tion of state diagrams omes arise when new au-
tomata are generated from an original one. This
is a very hard geometri problem related with the
eÆient two-dimensional representation of graphs.
When a new automaton is being automatially gen-
erated SAGEMoLiC put states and transitions ran-
domly in unused positions of the anvas. But dur-
ing the whole proess the system allows the user to
hange these positions by simple use of the mouse.
We agree, that in a ertain way, here we have for-
mulated our very partiular way to explain some the-
oretial onepts in the eld of formal languages and
automata theory. But what should be onluded here
is that explaining relations between mahine models
and/or language representations, in the non-trivial
ases, by simple granulation or debugging of spe-
i translation algorithms is wrong, sine that is re-
strited to the peuliarities of the given onversion,
making the student (and in many opportunities the
instrutor too) forgetting the grade of generality of
the studied equivalene relations and be foused (and
onfused) on properties of the algorithm itself, suh
as its terminating property, its orretness and its
ompleteness. Of ourse, granulating translation al-
gorithms is useful. But that was yet possible with
the tehnology available some years ago. Today, the
urrent sophistiated and very heap software teh-
nology from simple personal omputers makes it pos-
sible more aurate graphial eduational tools that
really help instrutors to show and explain these re-
lations to students as our proposed tool does.
Aknowledgments. We would like to thank the
anonymous reviewers for their helpful suggestions.
Referenes
[1℄ R. Baeza-Yates and L. O. Fuentes. A Framework
to Animate String Algorithms. Information Pro-
essing Letters, 59:241{244, 1996.
[2℄ J. Barwise and J. Ethmendy. Turing's World
3.0. CSLI Press, 1995.
[3℄ A. O. Bilska, K. H. Leider, M. Proopiu, O Pro-
opiu, S. H. Rodger, J. R. Salemme, and
E. Tsang. A Colletion of Tools for Making
Automata Theory and Formal Languages Come
Alive. In Twenty-eight SIGCSE Tehnial Sym-
posium on Computer Siene Eduation, pages
15{19. ACM press, 1997.
[4℄ A. F. da Fonsea, A. H. R. da Silva, M. Ayala-
Rinon, H. W. Poubel, and J. de Siqueira. An-
imation of Relations Between Computational
Models and Languages. Bull. of the European
Assoiation for Theoretial Computer Siene,
74:235{241, 2001.
[5℄ R.W. Floyd and R. Beigel. The Language of
Mahines | An Introdution to Computability
and Formal Languages. Computer Siene Press,
1994.
[6℄ D. Giammarresi, J.-L. Ponty, and D. Wood.
Glushkov and Thompson Construtions: A Syn-
thesis. Tehnial Report HKUST-TCS-98-11,
HKUST Theoretial Computer Siene Center
Researh Report, 1999.
[7℄ E. Grammond and S. H. Rodger. Using JFLAP
to Interat with Theorems in Automata The-
ory. In Thirthieth SIGCSE Tehnial Sympo-
sium on Computer Siene Eduation, pages
336{340. ACM press, 1999. JFLAP is available
at www.s.duke.edu/rodger/tools.
10
[8℄ J. E. Hoproft and J. D. Ullman. Introdution to
Automata Theory, Languages and Computation.
Addison-Wesley, 1979.
[9℄ T. Hung and S. H. Rodger. Inreasing Visual-
ization and Interation in the Automata Theory
Course. In Thirty-rst SIGCSE Tehnial Sym-
posium on Computer Siene Eduation, pages
06{10. ACM press, 2000.
[10℄ D. Kelley. Automata and Formal Languages |
An Introdution. Prentie Hall, 1995.
[11℄ D. C. Kozen. Automata and Computabil-
ity. Undergraduate Texts in Computer Siene.
Springer, 1997.
[12℄ H. R. Lewis and C. H. Papadimitriou. Elements
of the Theory of Computation. Prentie-Hall,
1981.
[13℄ T. A. Sudkamp. Languages and Mahines: An
Introdution to the theory of Computer Siene.
Addison Wesley, 1997.
[14℄ R. G. Taylor. Models of Computation
and Formal Languages. Oxford University
Press, 1998. Deus ex Mahina N. Savoui
www.is.ui.edu/savoui/dem.
11
