Sistemas y subsistemas de sustituciones
expl√≠citas
Arbiser, Ariel
2005
Tesis Doctoral
Facultad de Ciencias Exactas y Naturales
Universidad de Buenos Aires
www.digital.bl.fcen.uba.ar
Contacto: digital@bl.fcen.uba.ar
Este documento forma parte de la colecci√≥n de tesis doctorales de la Biblioteca Central Dr. Luis
Federico Leloir. Su utilizaci√≥n debe ser acompa√±ada por la cita bibliogr√°fica con reconocimiento de la
fuente. 
This document is part of the doctoral theses collection of the Central Library Dr. Luis Federico Leloir.
It should be used accompanied by the corresponding citation acknowledging the source. 
Fuente / source: 
Biblioteca Digital de la Facultad de Ciencias Exactas y Naturales - Universidad de Buenos Aires
Expliit Substitution
Systems and Subsystems
By Ariel Arbiser
Sup ervisor: Dr. Alejandro R√≠os
Faultad de Cienias Exatas y Naturales
Universidad de Buenos Aires
A thesis submitted for the degree of
Dotor of Philosophy in Computer Siene
Jury:
Dr. Mauriio Ayala-Rin√≥n, Dept. of Mathematis, Universidade de Bras√≠lia
Dra. Delia Kesner, PPS, Universit√© Paris VI I
Dra. Nora Szasz, Universidad ORT Uruguay
Submitted in partial fulfillme n t for the degree of Dotor of Philosoph y in Computer
Siene. Seond prelimina r y version.
ii
Dediatio n
to my Family
Disovery is not the result of logial thought, even though the ultimate result is
intimately bound to the rules of logi.  A. Einstein
The great advantage of the mathematial sienes above the moral onsists in
this, that the ideas of the former, being sensible, are always lear and determinate,
the smal lest distintion between them is immediately pereptible, and the same terms
are stil l expressive of the same ideas, without ambiguity or variation. An oval is
never mistaken for a irle, nor an hyperbola for an el lipsis. The isoseles and
salenum are distinguished by boundaries more exat than vie and virtue, right and
wrong. If any term be dened in geometry, the mind readily, of itself, substitutes,
on al l oasions, the denition for the term dened: Or even when no denition
is employed, the objet itself may be presented to the senses, and by that means be
steadily and learly apprehended. But the ner sentiments of the mind, the opera-
tions of the understanding, the various agitations of the passions, though real ly in
themselves distint, easily esape us, when surveyed by reetion; nor is it in our
power to real l the original objet, as often as we have oasion to ontemplate it.
Ambiguity, by this means, is gradual ly introdued into our reasonings: Similar ob-
jets are readily taken to be the same: And the onlusion beomes at last very wide
of the premises.  D. Hume, An Enquiry Conerning Human Understanding
iii
Aknowledgement/Agradei miento
Esp ero que este traba jo sirva para que otras p ersonas puedan intro duirse en el √°rea de
Reesritura, o ono er un p o o m√°s aera de ella, y de mo do que surjan problemas nuevos a
partir de lo planteado aqu√≠.
Un agradeimiento profundo y esp eial a mi familia, p or diversas razones.
Quiero agradeer a Alejandro R√≠os, mi diretor de tesis, quien fue quien me intro dujo en el
terreno de las sustituiones expl√≠itas. M√°s all√° de esto, Alejandro siempre enuentra tiemp o
para onversar sobre to do tema o idea que ae en nuestras manos.
Agradezo a Fairouz Kamareddine, oautora nuestra, on quien hemos onversado a distania
sobre interesantes uestiones.
Agradezo a ada uno de los miembros del Jurado p or la paienia que implia esta letura,
y p or sus sugerenias.
Mi agradeimiento tambi√©n a Leonard, que fue algo as√≠ omo un gu√≠a de fato en ierto
momento, y quien insisti√≥ lo neesario para que me apurara un p o o m√°s.
Por √∫ltimo, p or qu√© no, un agradeimiento al letor gen√©rio que est√° p or leer este texto, y
orre el p eligro de aburrirse prematuramente on los agradeimientos (inluyendo este mismo).
Finalizo deseando que esta tesis no sea una forma normal ... sino ontinuar (re)esribiendo
dentro de este vasto amp o, lleno de transformai√≥n, y de derivaiones innitas ...
iv
Abstrat
This thesis is ab out some problems on rewriting theory and expliit substitution aluli. The
main topi is the study of sub-aluli for several rewriting systems.
After a biased intro dution to rewriting, Œª-alulus and expliit substitution, we make a
omparative study of the main rewriting formalisms, identifying a hierarhy b etween them.
As a rst approah to new aluli, we address Revesz' Œª-alulus with names, involving four
rewriting rules, with the partiularity that it do es not have any substitution at all. We show
the relative soundness and the onuene. We also prop ose and study two versions using de
Bruijn indies, proving that all these prop erties are preserved .
We then move to p erp etuality in the ŒªœÖ expliit substitution alulus, and study p erp etual
rewrite strategies, i.e. those strategies that preserve the p ossibility of innite derivations.
We give as an appliation a set of deterministi inferene rules whih haraterize indutively
the subsys te m of strongly normalizing terms, and we present an eetive p erp etual redution
strategy for ŒªœÖ.
Then we study dierent extensions of ŒªœÖ-alulus, with the addition of omp osition-like rules.
Weak onuene on op en terms is proved. As an appliation, a derived simpliation of ŒªœÖ
with a unique de Bruijn index an b e given, whih is a sub-alulus of the former and has the
same prop erties.
We show the weak normalization of the simply-typ ed Œªse-alulus with op en terms where
abstrations are deorated with typ es, and meta-variables, de Bruijn indies and up dating op-
erators are deorated with environments. The pro of is based on the Œªœâe-alulus, a alulus
whih over semi-op en terms (i.e. those whih allow term variables but not substitution vari-
ables) is isomorphi to Œªse over op en terms. This pro of is strongly inuened by a previous
pro of of weak normalization for the simply-typ ed ŒªœÉ-alulus but with subtle dierenes whih
show that the two styles require dierent attention. Furthermore, we give a new alulus, Œªœâ‚Ä≤e,
sub-alulus of Œªœâe, whih handles a unique de Bruijn index, whih is then loser to ŒªœÉ than
Œªœâe. For Œªœâ
‚Ä≤
e we also prove the weak normalization for typ ed semi-op en terms.
We present an extension of the Œª(Œ∑)-alulus with a primitive ase onstrut that propagates
through abstrations like a head linear substitution b efore doing onstrutor substitution, and
show that this way of deomp osing pattern mathing allows to reover the express iven e s s of
ML-style pattern mathing. Then we prove that this system enjoys onuene using a semi-
automati divide and onquer tehnique by whih we determine all the pairs of ommuting
subsys te ms of the formalism (onsidering all the p ossible ombinations of the nine redution
rules). Finally, we prove a (weak) separation theorem for the whole formalism, using a separa-
tion tehnique inspired by the B√∂hm-out tehnique.
And, as another faet of sub-aluli exploration, we investigate the terms whih satisfy the
prop erty of expansion to pure terms, for ŒªœÖ and Œªs. We prove that these sets of terms are
v
prop er and non-reursive. As an appliation, we prove the imp ossibility of adequate mappings
b etween ertain pairs of aluli.
vi
Resumen
Esta tesis trata aera de algunos problemas en la teor√≠a de reesritura y √°lulos on susti-
tuiones expl√≠itas. El tema prinipal es el estudio de sub √°lulos de algunos sistemas de
reesritura.
Luego de una intro dui√≥n sesgada a la reesritura, el √°lulo Œª y las sustituiones expl√≠itas,
haemos un estudio omparativo de los prinipales formalismos de la reesritura, identiando
una jerarqu√≠a entre √©stos.
Como primer aproximai√≥n a nuevos √°lulos, estudiamos el √°lulo Œª on nombres de Revesz,
que utiliza uatro reglas de reesritura, on la partiularidad de que no uenta on sustitui√≥n
alguna. Se prueba la orretitud relativa y la onuenia. Tambi√©n se prop onen y se estudian
dos versiones que usan √≠ndies de de Bruijn, y se prueba que estas dos propiedades se preservan.
Luego pasamos a la p erp etualidad en el √°lulo de sustituiones expl√≠itas ŒªœÖ y estudiamos
estrategias de redui√≥n p erp etuas, i.e. aquellas que preservan la p osibilidad de derivaiones
innitas. Se da omo una apliai√≥n un onjunto de reglas de inferenia determin√≠stias que
araterizan indutivamente el sub sistema de los t√©rminos fuertemente normalizantes, y pre-
sentamos una estrategia de redui√≥n p erp etua efetiva para ŒªœÖ.
A ontinuai√≥n se estudian distintas extensiones del √°lulo ŒªœÖ, on reglas al estilo de las
de omp osii√≥n. Se prueba la onuenia d√©bil sobre t√©rminos abiertos. Como apliai√≥n de
lo anterior, se puede dar un √°lulo simpliado, derivado de ŒªœÖ, que usa un solo √≠ndie de de
Bruijn, el ual es un sub √°lulo del anterior y on las mismas propiedades.
Se demuestra luego la normalizai√≥n d√©bil del √°lulo Œªse simplemente tipado sobre t√©rminos
abiertos, en donde las abstraiones se deoran on tip os, y las meta variables, √≠ndies de de
Bruijn y op eradores de atualizai√≥n se deoran on ontextos. La prueba se basa en el √°lulo
Œªœâe, que sobre t√©rminos semi-abiertos (i.e. aquellos que admiten variables de t√©rmino p ero
no de sustitui√≥n) es isomorfo a Œªse sobre t√©rminos abiertos. Esta prueba est√° fuertemente
inueniada p or otra previa de normalizai√≥n d√©bil para el √°lulo ŒªœÉ simplemente tipado p ero
on diferenias substaniales que indian que los dos estilos requieren distinto tratamiento.
Adem√°s, intro duimos el √°lulo Œªœâ‚Ä≤e, sub √°lulo de Œªœâe, el ual usa s√≥lo un √≠ndie de de Bruijn,
on lo que es m√°s erano a ŒªœÉ que Œªœâe. Para Œªœâ
‚Ä≤
e tipado probamos tambi√©n la normalizai√≥n
d√©bil sobre t√©rminos tipados semi-abiertos.
Presentamos una extensi√≥n del √°lulo Œª(Œ∑) que inluye un onstrutor de asos primitivo
que se propaga a trav√©s de las abstraiones omo una sustitui√≥n lineal de ab eza antes de
atuar sobre los onstrutores, y probamos que este mo do de desomp osii√≥n del apareamiento
de patrones p ermite reup erar la expresividad del estilo de los patrones de ML. Se demuestra
que este sistema satisfae onuenia, usando una t√©nia de dividir y onquistar semi au-
tom√°tia p or la ual se determinan to dos los pares de sub sistemas de este √°lulo que onmutan
(onsiderando to das las ombinaiones de las nueve reglas de redui√≥n). Finalmente, se prueba
vii
un teorema de separai√≥n (d√©bil) para to do el formalismo, usando una t√©nia de separai√≥n
inspirada en la t√©nia B√∂hm-out.
Por √∫ltimo, omo otra faeta de explorai√≥n de sub √°lulos, analizamos los t√©rminos que
satisfaen la propiedad de expandir a t√©rminos puros, para ŒªœÖ y Œªs. Probamos que estos
onjuntos de t√©rminos son propios y no reursivos. Como apliai√≥n, se prueba la imp osibilidad
de map eos adeuados entre iertos pares de √°lulos.
viii
Contents
1 Intro dution and preliminaries 2
1.1 How to read this thesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2.1 Rewriting and omputing . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2.2 Caluli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2.2.1 Œª-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
1.2.3 de Bruijn indies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
1.2.4 Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.2.5 Translations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
1.2.6 Substitution and expliit substitution . . . . . . . . . . . . . . . . . . . . 6
1.2.7 Typing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
1.2.8 Normalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
1.3 Rewriting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
1.3.1 Abstrat rewriting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
1.3.2 Normalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
1.3.3 Commutation and onuene . . . . . . . . . . . . . . . . . . . . . . . . 10
1.3.4 Isomorphisms b etween systems . . . . . . . . . . . . . . . . . . . . . . . 12
1.3.5 Sub-ARSs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
1.4 First-order rewriting and string rewriting . . . . . . . . . . . . . . . . . . . . . . 13
1.4.1 Term rewriting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
1.4.2 String rewriting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.4.2.1 Semi-Thue Systems . . . . . . . . . . . . . . . . . . . . . . . . . 15
1.4.2.2 Post-Canonial Systems . . . . . . . . . . . . . . . . . . . . . . 15
1.5 Œª-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
1.5.1 Classial Œª-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
1.5.1.1 Œ±-onversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
1.5.1.2 Œ≤-onversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
1.5.1.3 Œ∑-onversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
1.5.2 Œª-alulus √† la de Bruijn . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
ix
CONTENTS
1.5.3 Typ es and environments . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
1.6 Expliit substitution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
1.6.1 The Œªx-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
1.6.2 The ŒªœÖ-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
1.6.3 The Œªs-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
1.6.4 The Œªse-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
1.6.5 The Œªœâ- and Œªœâe-aluli . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
1.6.6 The ŒªœÉ-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
1.7 General notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
2 Motivating our work: systems, subsystems and relations 35
2.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
2.2 Dening subsys te ms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37
2.2.1 Charaterizing sub-ARSs . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
2.3 Map of the territory: examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
2.4 Bases as go o d generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
2.5 Relationships b etween rewriting paradigms . . . . . . . . . . . . . . . . . . . . . 44
2.5.1 Main relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44
2.5.2 Finite branhing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
2.5.3 Post anonial systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47
2.5.4 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
2.6 Conlusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49
3 A Œª-alulus without substitution: expliit substitution over pure terms 51
3.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
3.2 The Œª‚àÖ-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
3.2.1 Simulation and soundness . . . . . . . . . . . . . . . . . . . . . . . . . . 53
3.2.2 Conuene . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54
3.2.3 Relation with Œªx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56
3.2.4 Typing and PSN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
3.3 A de Bruijn alulus based on Œª‚àÖ . . . . . . . . . . . . . . . . . . . . . . . . . . 58
3.4 Simulation and soundness of Œª‚àÖdB . . . . . . . . . . . . . . . . . . . . . . . . . . 59
3.4.1 Conuene of Œª‚àÖdB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
3.5 œï and e as expliit op erators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
3.5.1 Typ ed Œª‚àÖS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67
3.6 Relating the aluli . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70
3.7 Conlusion and future work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72
3.8 App endix. A garbage-olletion rule for Œª‚àÖdB . . . . . . . . . . . . . . . . . . . . 73
x
CONTENTS
4 Perp etuality and Strong Normalization in ŒªœÖ 77
4.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
4.1.1 Some remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
4.2 Perp etuality . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
4.2.1 Auxiliary results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
4.2.2 Disussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88
4.3 A haraterization of SNŒªœÖ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89
4.3.1 Denition and remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
4.3.2 Denitions and remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
4.3.3 Auxiliary results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
4.3.4 Disussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
4.3.5 A p erp etual redution strategy for ŒªœÖ . . . . . . . . . . . . . . . . . . . . 98
4.3.6 Digression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
4.4 Conlusion and future work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
5 Extending lamb da upsilon with omp osition 105
5.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
5.2 Some imp ossibilities of ŒªœÖ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
5.3 Extending ŒªœÖ with omp osition . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
5.4 A alulus with one index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
5.5 Conlusion and future work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
5.6 App endix. CINNI-style alulus with omp osition . . . . . . . . . . . . . . . . . 125
5.7 App endix. Adding identity to ŒªœÖ . . . . . . . . . . . . . . . . . . . . . . . . . . 127
6 The Weak Normalization of the Simply Typ ed Œªse-alulus 133
6.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
6.2 Typing lamb da aluli by marking abstrations and op erators . . . . . . . . . . 134
6.2.1 The simply typ ed Œªs and Œªse-aluli . . . . . . . . . . . . . . . . . . . . 134
6.2.2 The simply typ ed Œªœâ and Œªœâe-aluli . . . . . . . . . . . . . . . . . . . . 136
6.3 The isomorphism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 138
6.4 Sub jet Redution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
6.5 Weak Normalization of
‚Üí
œâe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
6.6 Soundness and simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
6.7 Weak Normalization of Œª
‚Üí
œâe and Œª
‚Üí
s e . . . . . . . . . . . . . . . . . . . . . . . . . 144
6.8 The Œªœâ‚Ä≤e-alulus. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
6.8.1 Weak normalization of typ ed Œªœâ‚Ä≤e . . . . . . . . . . . . . . . . . . . . . . 156
6.9 Conlusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
xi
CONTENTS
7 A Œª-alulus with onstrutors 163
7.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
7.2 Syntax and redution rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
7.2.1 Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
7.2.1.1 Construtor binding . . . . . . . . . . . . . . . . . . . . . . . . 166
7.2.1.2 Free variables and meta-substitution . . . . . . . . . . . . . . . 166
7.2.2 Redution rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
7.2.3 The need of z . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
7.3 Strong Normalization of the BC-alulus . . . . . . . . . . . . . . . . . . . . . . 170
7.4 Preliminary denitions and ommutation results . . . . . . . . . . . . . . . . . . 170
7.5 General losure onditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
7.6 The Churh-Rosser prop erty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
7.6.1 Preservation by meta-substitution . . . . . . . . . . . . . . . . . . . . . . 177
7.6.2 Commutation of AL with AD, CO, CD and CL . . . . . . . . . . . . . . 180
7.6.3 Commutation of AL+ CL with CA . . . . . . . . . . . . . . . . . . . . . 182
7.6.4 Commutation of CC with AL . . . . . . . . . . . . . . . . . . . . . . . . 183
7.6.5 Commutation of AL with AL . . . . . . . . . . . . . . . . . . . . . . . . 191
7.6.6 Commutation of AL+ AD with LD . . . . . . . . . . . . . . . . . . . . 194
7.6.7 Commutation of AL with LA . . . . . . . . . . . . . . . . . . . . . . . . 194
7.6.8 Commutation of AL+ AD with LA+ LD . . . . . . . . . . . . . . . . . 198
7.6.9 Commutation of AL+ CL with LA+ CA . . . . . . . . . . . . . . . . . 199
7.6.10 Commutation of AL+ AD + CL+ CD with LA+ LD + CA+ CD . . . 201
7.6.11 General Commutation and Conuene . . . . . . . . . . . . . . . . . . . 204
7.7 Separation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
7.8 Conlusion and future work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
7.9 App endix 1. Commutative Union Lemma revisited . . . . . . . . . . . . . . . . 213
7.10 App endix 2. Inremental onuene pro ofs . . . . . . . . . . . . . . . . . . . . . 214
7.10.1 Conuene pro of trees for CL, ŒªŒ≤Œ∑ and ŒªBC . . . . . . . . . . . . . . . . 214
7.11 Some remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
8 The expansion problem in lamb da aluli with expliit substitution 221
8.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
8.1.1 Related work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
8.2 Expansion in Œªx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
8.3 Expansion in ŒªœÖ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
8.3.1 Terms with pure expansion . . . . . . . . . . . . . . . . . . . . . . . . . . 224
8.3.2 Some appliations on mappings b etween aluli . . . . . . . . . . . . . . 232
8.4 Undeidability results for ŒªœÖ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
xii
CONTENTS
8.4.1 Disussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
8.4.2 Prop erties of ŒªœÖp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
8.5 Expansion in Œªs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
8.6 Undeidability results for Œªs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
8.7 Conlusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
8.8 App endix. Pro ofs for Œªs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
9 Conlusion 262
Referenes 265
A Implementation 275
A.1 Intro dution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
A.2 Commuter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
A.2.1 Working with ommuter . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
A.2.2 Handling of abstrat losure onditions . . . . . . . . . . . . . . . . . . . 276
A.3 From rewriting to a funtional program . . . . . . . . . . . . . . . . . . . . . . . 276
A.3.1 Implementing typ es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
A.3.2 CL to Œª-alulus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
A.4 Fratal ob jets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
A.5 Term generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
B Glossary 284
C Some information ab out this do ument 294
C.1 Home page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
C.2 Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
C.3 Copyright questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
C.4 The author . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
xiii
List of Figures
1.1 The typing rules of the simply typ ed Œª-alulus √† la de Bruijn . . . . . . . . . . 21
1.2 The rewriting rules of the Œªx-alulus . . . . . . . . . . . . . . . . . . . . . . . . 23
1.3 The rewriting rules of the ŒªœÖ-alulus . . . . . . . . . . . . . . . . . . . . . . . . 24
1.4 Extra typing rules of the simply typ ed Œªs- and Œªse-aluli . . . . . . . . . . . . 26
1.5 The rewriting rules of the Œªs-alulus . . . . . . . . . . . . . . . . . . . . . . . . 26
1.6 The new rewriting rules of the Œªse-alulus . . . . . . . . . . . . . . . . . . . . . 27
1.7 The rewriting rules of the Œªœâ-alulus . . . . . . . . . . . . . . . . . . . . . . . . 29
1.8 The new rewriting rules of the Œªœâe-alulus . . . . . . . . . . . . . . . . . . . . . 29
1.9 Extra typing rules of the simply typ ed Œªœâ- and Œªœâealuli . . . . . . . . . . . . 30
1.10 The rewriting rules of the ŒªœÉ-alulus . . . . . . . . . . . . . . . . . . . . . . . . 31
1.11 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
1.12 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
2.1 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
2.2 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50
3.1 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
4.1 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
4.2 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
5.1 ŒªœÖc ritial pair (2) with (2) where i, j ‚â• 0. . . . . . . . . . . . . . . . . . . . 121
5.2 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
5.3 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
6.1 The rewriting rules of the simply typ ed Œªs-alulus . . . . . . . . . . . . . . . . 135
6.2 The typing rules of the simply typ ed Œªs-alulus . . . . . . . . . . . . . . . . . . 135
6.3 The new rewriting rules of the simply typ ed Œªse-alulus . . . . . . . . . . . . . 136
6.4 The rewriting rules of the simply typ ed Œªœâ-alulus . . . . . . . . . . . . . . . . 138
6.5 The new typing rules of the simply typ ed Œªœâe-alulus . . . . . . . . . . . . . . 138
6.6 The new rewriting rules of the simply typ ed Œªœâe-alulus . . . . . . . . . . . . . 139
xiv
LIST OF FIGURES
6.7 The rewriting rules of the simply typ ed Œªœâ‚Ä≤e-alulus . . . . . . . . . . . . . . . . 153
6.8 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
6.9 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
7.1 Redution rules of the Œª-alulus with onstrutors . . . . . . . . . . . . . . . . 167
7.2 Critial pairs 18 (/13) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
7.3 Critial pairs 913 (/13) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
7.4 The ommutation inferene algorithm . . . . . . . . . . . . . . . . . . . . . . . . 176
7.5 Statistis for ŒªBC-subsystems . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
7.6 Lamb da alulus with onstrutors: subsys te m ommutation grid . . . . . . . . 207
7.7 Pro of tree for the onuene of S +K-CL . . . . . . . . . . . . . . . . . . . . . 215
7.8 Pro of tree for the onuene of the full S +K + I-CL . . . . . . . . . . . . . . . 216
7.9 Pro of tree for the onuene of ŒªŒ≤Œ∑ . . . . . . . . . . . . . . . . . . . . . . . . . 217
7.10 Pro of tree for the onuene of the ŒªBC-subsystem AL+ AD + LA+ LD . . . . 218
7.11 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
8.1 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
8.2 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
9.1 Graphial CL-term . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
A.1 Œªx-alulus weak ommutation grid . . . . . . . . . . . . . . . . . . . . . . . . . 277
xv
LIST OF FIGURES
1
Chapter 1
Intro dution and preliminaries
The mind takes a long time to forget what has taken a long time to learn. 
Senea
One has to take are not that the reader ould understand, but his need to un-
derstand.  Quintilianus
As a Rol ler in the Oean, Life is Motion.  ABBA, Move On
ABSTRACT We start this thesis with a thorough intro dution to rewriting, Œª-alulus and
expliit substitution onepts, mainly known results whih will b e used in the subsequ e nt
hapters.
1.1 How to read this thesis
Here we briey desrib e dierent ways of reading this thesis, aording to the familiarity of
the reader with the topis treated.
After the intro dution and preliminaries (this hapter), the rest of the hapters are organized
in suh a way that they an b e read separately, although their order seems to b e the most
appropriate for reading them from a didati p oint of view.
The reader who is ompletely unfamiliar with any asp et of rewriting, should read setion
1.3 and the subseq u e nt setions of this hapter. The reader who is somehow familiar with Œª-
alulus, or has used it partially, may skip setion 1.5, although it is reommended for him/her
to read the most of this hapter sine we mention here many imp ortant results whih will b e
used afterwards. The reader who is familiar with Œª-alulus, but not so with abstrat rewriting,
may read setion 1.3 and 1.6. Last, the reader who is familiar with all the topis of this thesis
should go diretly to the next hapter, where some motivations are presented, or diretly to
the hapter of interest.
2
1.2 Intro dution
The reader should are that all subseq u e nt hapters ould b e read indep endently one from
eah other. But the general notation as well as the preliminary results to b e used are xed in
this hapter.
We now move into the intro dution.
1.2 Intro dution
Transformations govern our world. Heralitus (ira 450 b.C.) said that the entire world is in
pro ess of hange, and one never enters the same river twie. Aording to his philosophy, all
the world is in p erp etual hange, even when we are not aware of that suh as at the partile level.
We understand the imp ortane of hange and study rewriting theory, whih is a formulation of
hange in omputer siene. Change is imp ortant in every asp et of omputing, thus rewriting
is an appropriate formulation of theoretial omputer siene.
There has b een an extensive researh ativity in rewriting theory during the last deades.
Rewriting has an imp ortant numb er of sub-areas: general rewriting, Œª-alulus formulations,
semantis, term rewriting, higher-order rewriting, residual theory, expliit substitution, and
other.
The plan of the hapter is as follows. After a general intro dution, we make a (biased,
seleted) intro dution to rewriting onepts, lassial Œª-alulus, and aluli with expliit sub-
stitution as variants of the former.
This intro dution is informal, then we will formalize denitions starting from setion 1.3.
1.2.1 Rewriting and omputing
Rewriting an b e seen as a formulation of omputing. We are sp eaking of formulation
instead of  paradigm, sine we b elieve that rewriting reestablishes the essen e of omputing in
another (related) manner. For instane, term rewriting has the virtue (or defet) that leaves
two kinds of hoies as non-deterministi, namely the rule seletion and the redex seletion.
This two faets of non-determinism onstitute the nature of term rewriting in general.
In the following hapters we attak dierent problems onerning rewriting systems and Œª-
aluli with expliit substitution. We have seleted problems onerning systems and their
subsys te ms, in partiular problems ab out typing, onuene, normalization, expansion and
restrition.
1.2.2 Caluli
What is a alulus? We an disuss this question from the starting history of mathematis. In
partiular, lassial dierential and integral alulus (b oth onstituting innitesimal alulus)
3
1.2 Intro dution
in some sense are go o d examples of what the onept of alulus is or should b e. It should
allow a way of alulating, i.e. rewriting total or partial elements by seleting adequate rules
and sub-elements.
A alulus should have rewriting rules, suh as the hain rule in dierential alulus, or the
integration by parts rule in integral alulus. A rule an b e applied to a given problem instane,
thus it should b e general. Intuitively, a alulus is just (and as muh as) a way of alulation
 transformation, over a sp ei set of ob jets.
In our exploration in the following hapters, dierent aluli in several ontexts are prop osed
and studied. Atually a alulus is a rewriting system where a sp ei term syntax is given along
with sp ei rules as well as ompatibility rules. It is not the ase of abstrat rewriting, but
it is also the ase of (ontext-sensitive) term rewriting systems downwards in the formalism
hierarhy (to b e intro dued in hapter 2). Anyway, it is more than that, sine the term set
should b e manageable, at least the equality should b e deidable, for instane this implies that
the terms should b e of nite length or at least they should have a desription by omprehension
whih obviously should b e nite. As a matter of fat, dierential and integral aluli deal with
series, whih are some kind of innite ob jets or terms. In this ase, there is always the
need of a way of sp eifying a general term. Thus, an innite sum (series) is always nitely
desrib ed. There were prop osals of innitary Œª-aluli (whose terms may have innite length).
In these formulations, desriptions by omprehension are generally handled. The onept of
alulation an still go through even on these innite ob jets, but the onept of normal form
and normalization may hange. Nevertheless in this thesis we are interested in nitary aluli.
Sine rewriting systems are essentially non-deterministi, the interest in rewriting strategies
arises. Intuitively, a strategy is a riterion whih selets for eah element a rewrite step over the
existing ones. We an distinguish dierent kinds of strategies when studying rewriting systems,
suh as onstriting, p erp etual, zo om-in, normalizing, maximal, minimal, et. (4; 14).
1.2.2.1 Œª-alulus
Lamb da alulus, for short Œª-alulus (11; 12; 19; 20), is a paradigmati example of rewriting
theory, with interesting and representative prop erties that make itself a main ob jet of formula-
tion, study and disussion. Historially it was the rst rewriting system and it has most of the
ompliations and subtleties one an nd in the whole theory, despite of its apparent simpliity.
The ob jets of study in the Œª-alulus are the terms of the language, as well as the ideas
of onvertibility or equality b etween pairs of these terms. As one an see, the terms are
remarkably simple ob jets, sp eially onsidering that they an b e somehow onsidered and
used as programs. Note that Œª-alulus (as well as the term rewriting paradigm) assumes
the existene of a ountably innite set of variables as a starting p oint, for the simple (but
signiative) reason that one often needs to take a new (unused) variable in order to avoid
4
1.2 Intro dution
variables lash. The need of taking new variables is not only theoretial but also pratial,
in partiular during Œ±-onversion - see b elow. This is going to hange when one onsiders
Œª-alulus in a de Bruijn setting, where variables are replaed by indies. Remarkably, this
formulation solves some problems but op ens new ones, whih motivate many of the results to
follow in our work.
How to p erform substitution: the Œ≤-onversion. This relation is the main motivation of Œª-
alulus and has inspired its reation in the 1930s. Yet at present Œ≤-onversion still preserves its
essen e and profound motivation, with the partiularity that it is extremely simple to formulate
but omplex to study. It relies in the p ossibility of binding an argument within a given term,
and there is a onversion relation whih establishes what it do es with the argument. The p ower
of the (untyp ed) Œª-alulus omes from the lak of distintion b etween funtions and arguments
in some sense. Thus, the term Œªx.M b ehaves like a funtion, as if M was parameterized by
the variable x. Appliation in the Œª-alulus is like funtional appliation. A funtion an even
b e its own argument. If M represents a term in whih the variable x o urs free (p ossibly
more than one), then the Œ≤-redution has the task of substituting those o urrenes by the
atual argument. Note that any term an b e a parameter (even in typ ed aluli, there is some
freedom on this
1
). So the Œª-alulus do es not have that restrition (anyway it an have partial
restritions when onsidering typable terms).
1.2.3 de Bruijn indies
The main motivation of de Bruijn aluli (27) is avoiding the need of Œ±-onversion, and
hene eliminating variable names from the syntax, thus resulting in a relatively easier  imple-
mentation of the alulus in a pratial sense. De Bruijn aluli emerge in parallel with the
main Œª-alulus variations, as a result of mo difying the syntax diretly and with this simple
motivation. It is remarkable that this apparently slight hange in the formulation has deep
onseque n  e s and intro dues more requirements to study.
The use of indies make it p ossible for the syntax to b eome more free (in the sense of
a free algebra), sine the lassi formulation treats with variable names whih ould ollapse
when taking an appropriate quotient struture to the whole set of terms. When using indies,
no quotient is needed, so this means an advantage. Many pro ofs by indution on the terms set
would pro eed with a less numb er of ases, without the need of onsidering variable lashes,
thus pro eeding straightforwardly. Nevertheless , as a onseque n  e more work is required with
the subseq u e nt diulty to understand the alulus ob jets, sine these kinds of representations
are less intuitive. Muh of the diulty in dealing with sp ei aluli are due to the use of
indies.
1
This is to b e ontrasted with the substitution metho d of the œÄ-alulus of Milner, Parrow and Walker in
whih only  names (as opp osed to all œÄ-terms) may b e used in the op eration.
5
1.2 Intro dution
1.2.4 Patterns
Sp eial attention should b e devoted to patterns. Patterns -in a general sense- p ossibly on-
stitute the goal of mathematis. A mathematiian is exp eted to nd patterns in real life,
and to develop theories from them. The use of patterns in rewriting has b een investigated
(18; 21; 22; 41; 42; 80). Their inspiration omes from delarative -mainly funtional- languages
whih handle these kinds of onstruts (40; 68; 70). The goal of studying the use of patterns
within rewriting is to mo del and understand these languages b etter.
We fo us on a sp eial kind of patterns in hapter 7, to obtain an extension of ŒªŒ≤Œ∑-alulus,
having ase onstruts, whih an b e b oth adequate for mo deling pattern mathing, and to gain
separation, a prop erty whih shows that the alulus is omplete in the sense that it provides
suiently many redution rules to identify all observationally equivalent normalizable terms.
1.2.5 Translations
Another ommon to ol is the use of translations, and we will b e using them. What is a
translation? It mainly onsists of a funtion whih takes some ob jet of a given set and returns
an ob jet of another given set. A translation an link two universes, apparently unrelated, and
aording to its prop erties, the struture of one ould b e translated to the other.
We will use and study some translations from one alulus syntax to another, in hapters
5, 6 and 8. These translations allow to prove prop erties of one of them by transferring the
prop erties from the other. This do es not mean that it is the only way to prove them for the
latter. But p erhaps the one whih is more simple and eortless.
Remark that go o d translations use to map a subsys te m into another one, and they are
onsidered satisfatory appliations when omputing in one system is translated as omputing
in the other one. When a go o d translation do es not exist, we are interested in proving the
non-existene. This is done in hapter 8.
The idea of translation is related with rewriting itself. In all our formulations of translations,
we deal with instantly translating express ions to other express ions, but not in a rewriting -step
by step- manner. We give an example of a translation as a rewriting system in app endix A.
1.2.6 Substitution and explii t substitution
Substitution is omnipresent in Computer Siene: it is a fundamental building blo k for
dening Œ≤-redution in the Œª-alulus (funtional programming (40; 68; 70)), it plays a pre-
p onderate role in uniation (logi programming (65; 71)), it blends into the formalization of
parameter passing metho ds (imp erative programming), et. Researhers have learnt that dis-
missing substitution as a simple (simultaneous) replaement op eration ould p ossibly b eome
a mistake. The prime witness of this fat is the proli development of the so alled aluli of
6
1.2 Intro dution
expliit substitution: substitution whih was usually regarded as an atomi pro ess op erating at
the meta-level (our language of disourse) has b een promoted to the ob jet-level (our language
of study), it has b eome a new operator in our language, that is, part of the syntax. Sine
op erational prop erties of substitution are studied in the ob jet-level, unexp e te d b ehavior at
the time of implementation is minimized. Also, a ne-grained ontrol of substitution is made
available, for instane we may delay substitutions in order to avoid unnees s ary dupliation of
information, this resulting in a more eient implementation of the orresp onding alulus.
During the last fteen years -and b efore, in a somehow impliit manner-, many lamb da aluli
with expliit substitutions have b een prop osed and studied in the literature (for referenes , see
(47; 59)). Among all the known aluli, the pioneering ŒªœÉ (1) has b een historially the rst one
as well as a mo del for others to ompare with. This alulus reets in its hoie of op erators
and rules the alulus of ategorial ombinators (f. (24)). The main innovation of the ŒªœÉ-
alulus is the division of terms in two sorts: the sort term and the sort substitut i o n . ŒªœÖ
(13) has the same style, but with less op erators and rules, thus onstitutes a go o d example
to work with. Œªs (46) departs from this style of expliit substitutions in two ways. First, it
keeps the lassial and unique sort term of the Œª-alulus. Seond, it do es not use some of the
ategorial op erators, esp eially those whih are not present in the Œª-alulus. Œªs intro dues
two new sets of op erators whih reet the substitution and up dating that are only present in
the meta-language of the Œª-alulus. By doing so, the Œªs-alulus an b e said to b e loser to
the Œª-alulus from an intuitive p oint of view, rather than a ategorial one.
One an easily reognize that the onept of substitution is itself omnipresent in many the-
ories, formulations and ideas within Computer Siene (11; 15). It an b e said that the main
p oint of expliit substitution is that this imp ortant onept has b een aptured, in the sense
that its prop erties b eome relevant when implementing it. We understand that expliit sub-
stitution is appropriate when treating a alulus' syntax, in a non-trivial higher-order or rst
order approah. We may ask the question of why the idea of a substitution is so imp ortant,
and what is b ehind expliit substitution. Whih are their main onepts? Realling Ab elson
and Sussman (2), there is nothing in Computer Siene whih seems simple enough, but re-
sults more ompliated in theory and pratie, than substitution. Substitutions app ear in one
way or another b ehind the dierent notions of omputing, from omputability to ompilation,
interpretation and translation, from the theory to the implementation. Thus, it should not b e
so straightforward to handle or at least to understand and use them in a onvenient way.
In order to b enet from the idea of expliit substitution, muh work has b een done, and
more remains. Some key prop erties are neess ary, or at least desirable, suh as simulation,
soundness , preservation of strong normalization (PSN), sub jet redution, expansion to pure
terms, sub jet redution, weak or strong normalization of the substitution alulus, et. The
syntax onerning expliit substitution extends the old one, in order to inlude the substitution
7
1.2 Intro dution
op erator, but it has to b e done autiously. The language of substitutions is subtle and should
b e studied in order to nd out the b ehavior of the alulus.
There are also expliit substitution formulations for higher-order rewriting (83) (Expression
Redution Systems, Combinatory Redution Systems (54), Caluli of Indexed Names and Named
Indies (79), and others) as well as for other formalisms (œÄ-alulus for instane).
1.2.7 Typing
One of the key p oints in delarative languages as well as logi and sp eiation paradigms
is typ e theory. Typ e theory b egan in the early 20th entury with the work of B. Russell with
the goal of solving inonsisteny problems of set theory. Atually typ e theory was one of the
p ossible solutions (others were prop osed and studied by Zermelo-Frankel and Von Neumann).
Mo dern typ e theory an b e seen as an extension of this work diretion. The goal was to
lassify dierent ob jets aording to their nature, p ossibly aording to their main prop erties.
For us, terms ould have dierent typ es and this is a way of lassiation for them.
The use of typ es in an abstrat setting has also b een prop osed, for example (83), where
abstrat rewriting systems with typing are onsidered, and sub jet redution and typ e redution
is dened. Thus typ ed terms always dene a subsys te m of the parent alulus, as well as terms
having a sp ei typ e.
1.2.8 Normalization
Typing allows for example to reognize a term as b eing strongly normalizing. Also, terms
with a dierent typ e result non-equivalent in a system with sub jet onversion, in partiular,
when sub jet redution holds. These two imp ortant prop erties link typ es with rewriting. In
this sense we an say that typ es are relevant to rewriting theories and paradigms.
Typing an assist in a pro of of normalization, even strong normalization. Typable terms use
(and need) to b e strongly normalizing or weakly normalizing for a alulus to b e appropriate or
go o d enough, b oth in theory and pratie. The interest in this result has led to the disovery
of dierent formulations of Œª-alulus, as well as dierent expliit substitution formulations.
Typing an motivate relations from one language to another one, and sub jet redution b eomes
an imp ortant prop erty as we will see.
Now, another problem is how to reah a normal form when it exists. In Œª-alulus and some
variations, strategies and standardization tehniques were prop osed and studied for a long
time, and for instane reduing leftmost-outermost redexes one an always reah the normal
form when it exists. Thus in general determining the existene of a normal form is, although
undeidable, a semi-deidable problem. This would not b e the ase in some ARSs when, for
instane, no standardization algorithm may exist. Else, when suh an algorithm is not known, it
8
1.3 Rewriting
ould b e the ase that this deision problem remains unsolved. We ould not even know a priori
if it is semi-deidable or not. This happ ens b eause the ARS paradigm is very general, hene
there is a strong justiation that deomp osing it in dierent sub-formulations is adequate.
We now move into the preliminaries.
1.3 Rewriti ng
Rewriting is a tehnique, pro ess, theory, ... whih allows to exp eriene, work with and
formalize transformation. There are dierent paradigms of rewriting, whih will b e desrib ed
next.
1.3.1 Abstrat rewriting
We reall basi denitions.
Denition 1.3.1 An Abstrat Rewriting System (ARS) is a pair (A,‚Üí) where A is a set and
‚Üí a binary relation on A.
So an ARS is a pair onsisting of a set and a binary relation on it, without any a priori
struture. When a‚Üí b we say that a redues (in one step) to b, we all a‚Üí b a redution (or a
one-step derivation). A (p ossibly innite) sequen e of redutions a1 ‚Üí a2 ‚Üí a3 ‚Üí . . . is alled
a derivation starting from a. We all length of that derivation its numb er of redutions (0 or
more, nite or innite). Some ARSs may admit or not admit innite-length derivations as we
shall see in the following subsetion.
Sometimes we denote with A the ARS (A,‚Üí) when the relation ‚Üí is lear from the ontext.
For any relation ‚Üí over a xed set, we denote with
+
‚Üí its transitive losure (i.e. the least
transitive relation whih inludes ‚Üí), with ‚Üí its reexive-transitive losure (i.e. the least
reexive and transitive relation whih inludes ‚Üí), and with =‚Üí its reexive-symmetrial-
transitive losure (i.e. the least equivalene relation whih inludes ‚Üí).
Denition 1.3.2 Let (A,‚Üí) be an ARS. For every x ‚àà A we denote ‚Üí (x) = {y ‚àà A | x ‚Üí
y}, and ‚Üí‚àí1 (x) = {y ‚àà A | y ‚Üí x} the sets of immediate suessors and immediate predees-
sors of x, respetively.
Dene n‚Üíp (x) = | ‚Üí
‚àí1 (x)| the number of immediate predeessors of x (i.e. the number
of possible one-step derivations ending in x), and n‚Üís (x) = | ‚Üí (x)| the number of immediate
suessors of x (i.e. the number of possible one-step derivations starting from x). Sometimes we
may omit the supra-index
‚Üí
if the rewriting relation is lear from the ontext and no ambiguity
arises.
9
1.3 Rewriting
Denition 1.3.3 Given an ARSs A = (A,‚ÜíA) and a subset B ‚äÜ A, we dene the set of
suessors of B as S(B) = {y ‚àà A | there exists x ‚àà B suh that x ‚Üí y}. We write S({x})
simply as S(x).
An ARS (A,‚ÜíA) is nitely branhing (FB) if every element has a nite number of diret
suessors, i.e. n‚ÜíAs (x) is nite for al l x ‚àà A.
An ARS (A,‚ÜíA) is b ounded (out-)degree (BD) if the number max({n
‚ÜíA
s (x) | x ‚àà A}) is
nite, i.e. there is an upper bound on the number of immediate suessors of every element.
Remark that the relation ‚Üí an b e reovered from the funtion S, whih in general is not
the ase of the relation ‚Üí, in the sense that two dierent rewriting relations may lead to the
same funtion S.
Note that BD implies FB, but the onverse is not true.
1.3.2 Normalization
In any ARS, an element a is a normal form i there is no element b suh that a ‚Üí b. An
element b is alled a normal form of an element a i a‚Üí b and b is a normal form. An element
a is said normalizing, or weakly normalizing (WN) if there exists a normal form of a. An
element is alled innitely derivating, if there exists an innite derivation a‚Üí a1 ‚Üí a2 ‚Üí . . .
starting from a. An element is alled strongly normalizing (SN) if it do es not admit an innite
derivation starting from it, i.e. if it is not innitely derivating. For every ARS A, let WNA
denote the set of WN elements of A, let SNA denote the set of SN elements of A, and let ‚àûA
denote the set of non-SN elements of A. If an element is SN then it is learly WN, but the
onverse is not true.
Normalization represents the halting of omputations, i.e. the p ossibility of a pro ess to
stop. There are at least two imp ortant variations of normalization, due to the non-deterministi
nature of rewriting: weak and strong normalization. Both of them represent halting p ossibilities
in some manner.
1.3.3 Commutation and onuene
Conuene was presented by Churh and Rosser (19; 20) and proved for the Œª-alulus for the
rst time by them, and it resulted in a lue requirement for most rewriting systems afterwards.
Denition 1.3.4 Given two relations ‚ÜíA and ‚ÜíB on the same set S, we say that ‚ÜíA om-
mutes weakly with ‚ÜíB , and we denote it with A//wB, if, for al l a, a1, a2 ‚àà S, if a ‚ÜíA a1
and a ‚ÜíB a2 then there exists a3 ‚àà S suh that a1 ‚Üí
B
a3 and a2 ‚Üí
A
a3. In other words, the
10
1.3 Rewriting
fol lowing diagram holds:
a
A
//
B
¬≤¬≤
a1
B
¬≤¬≤¬≤¬≤
a2
A
// // a3
We say that ‚ÜíA ommutes with ‚ÜíB , and we denote it with A//B, if, for al l a, a1, a2 ‚àà S, if
a‚Üí
A
a1 and a‚Üí
B
a2 then there exists a3 ‚àà A suh that a1 ‚Üí
B
a3 and a2 ‚Üí
A
a3. In other words,
the fol lowing diagram holds:
a
A
// //
B
¬≤¬≤¬≤¬≤
a1
B
¬≤¬≤¬≤¬≤
a2
A
// // a3
We say that ‚ÜíA ommutes strongly with ‚ÜíB if, for al l a, a1, a2 ‚àà S, if a ‚ÜíA a1 and
a ‚ÜíB a2 then there exists a3 ‚àà S suh that a1 ‚Üí=B a3 and a2 ‚Üí
A
a3. In other words, the
fol lowing diagram holds:
a
A
//
B
¬≤¬≤
a1
=B
¬≤¬≤
a2
A
// // a3
Note that strong ommutation is not a symmetrial relation.
Denition 1.3.5 We say that the ARS A (and also that the relation ‚ÜíA) is weakly onuent,
or weakly Churh-Rosser (WCR) if A//wA. We say that the ARS A (and also that the relation
‚ÜíA) is onuent, or Churh-Rosser (CR) if A//A. We say that the ARS A (and also that the
relation ‚ÜíA) has the diamond prop erty if for al l a, a1, a2 ‚àà S, if a ‚ÜíA a1 and a ‚ÜíA a2 then
there exists a3 suh that a1 ‚ÜíA a3 and a2 ‚ÜíA a3.
Atually, onuene an b e formulated in other onvenient equivalent ways.
Prop osition 1.3.6 Given any ARS, the fol lowing statements are equivalent:
1. ‚Üí is onuent
2. ‚Üí is WCR
3. If a1 =‚Üí a2, then there exists a term a3 suh that a1 ‚Üí a3 and a2 ‚Üí a3 (original ly
known as CR)
4. if a ‚Üí a1 and a ‚Üí a2 then there exists a3 suh that a1 ‚Üí a3 and a2 ‚Üí a3 (original ly
al led semi-onuene).
Of ourse, ommutation (resp etively onuene) implies weak ommutation (resp. weak
onuene), but the onverse(s ) do(es) not hold. Also, if the diamond prop erty is satised, the
system is onuent, but the onverse do es not hold.
11
1.3 Rewriting
When onuene holds, normal forms, when they exist, are unique, i.e. every term has at
most one normal form.
Given the ARSs A and B, we denote with A+B the (set theoreti) union of b oth relations.
Standard results we will use are the following two well-known lemmas.
Lemma 1.3.7 (Commutation Lemma) If A ommutes strongly with B, then A//B.
Proof: See (9) or (14). ‚ú∑
Lemma 1.3.8 (Newman's Lemma) Let A be an ARS suh that A is WCR and SN. Then,
A is CR.
Proof: See (9), (14) or any other standard text on Rewriting theory. ‚ú∑
The imp ortane of Newman's Lemma is that it onnets two apparently unrelated notions:
onuene and normalization. It will b e extensively used, mainly on hapter 7.
A system whih is b oth CR and SN is alled anonial.
Conuene and weak onuene are key onepts of rewriting. The usual idea b ehind onu-
ene is that from a single ob jet, two derivations should eventually reah the same ob jet. But
there is another more profound idea b ehind this prop erty. Conuene is in some manner a min-
imal prop erty whih should hold in order to b e able to formulate an equational theory starting
from a rewriting setting. That is, if onuene is guaranteed, then sp ei pairs of ob jets (for
instane terms) would make sense as equations, otherwise some fundamental prop erties suh
as transitivity would ease to hold.
The denition of onuene takes three terms (one term and any two other sues s ors ).
One ould ask whether there ould b e another denition of onuene taking more than 2
derivations of a given term. A simple examination reveals that this notion would b e equivalent
to the lassial with two reduts, i.e. stating the lassial prop erty implies this apparently
generalized form with any nite numb er of sues s ors in the hyp othesis. This do es not happ en
with weak onuene nor with the diamond prop erty, even when the seond implies onuene
but the rst do es not.
1.3.4 Isomorphisms b etween systems
Two ARSs are isomorphi if there is a one-on-one mapping b etween one and the other whih
resp ets the one-step rewriting relation (in one way and in the other). More preisely, given the
ARSs A = (A,‚ÜíA), and B = (B,‚ÜíB), an isomorphism b etween b oth is a bijetion f : A‚Üí B
suh that a‚ÜíA a
‚Ä≤
i f(a) ‚ÜíB f(a
‚Ä≤). Isomorphi ARSs b ehave exatly in the same way as far
as rewriting is onerned. Rewriting steps and derivations in one of them are translated into
steps or derivations of the same harateristis in the other one.
12
1.4 First-order rewriting and string rewriting
1.3.5 Sub-ARSs
A sub-ARS of a given ARS is an ARS whose set of terms is a subset of the original set, losed
under redution, and with its relation b eing the restrition of the original ARS relation to the
latter.
Denition 1.3.9 Given two ARSs A = (A,‚ÜíA) and B = (B,‚ÜíB) we say that A is a sub-ARS
of B if
‚Ä¢ A ‚äÜ B
‚Ä¢ the restrition of ‚ÜíB to A is ‚ÜíA, i.e. for al l x, y ‚àà A x‚ÜíA y i x‚ÜíB y
‚Ä¢ for al l x ‚àà A, y ‚àà B, if x‚ÜíB y, then y ‚àà A.
Sub-ARSs always inherit the rewriting-related prop erties of the original ARS (suh as b eing
onuent, weakly onuent, normalizing, FB, et.)
As a lo osening of the denition of sub-ARS, a subsys te m of a given rewriting system will b e
a subset of the elements with a relation whih is a subset of the original one, whih should b e
losed under redution. The ondition of b eing the restrition of the former is eliminated.
Denition 1.3.10 Given two ARSs A = (A,‚ÜíA) and B = (B,‚ÜíB) we say that A is a
subsys te m of B if
‚Ä¢ A ‚äÜ B
‚Ä¢ ‚ÜíA‚äÜ‚ÜíB
In the following setions we reall denitions of ertain ARSs whih have syntatial struture,
in whih their elements will b e alled terms.
1.4 First-or der rewriti ng and string rewriti ng
This setion briey realls rewriting in rst-order signatures and in sets of strings.
1.4.1 Term rewriting
Term Rewriting Systems (TRSs) (9; 14) roughly onsist of (ontext-free) rewriting over any
rst-order signature. A TRS onsists of terms and rules for rewriting these terms.
A signature Œ£ onsists of a non-empty set of funtion symbols or operator symbols, denoted
f, g, ..., eah equipp ed with a xed arity, given by a natural numb er, whih indiates the numb er
of arguments it must have. Sometimes a symb ol of arity n is alled n-ary. An arity 1 symb ol
13
1.4 First-order rewriting and string rewriting
is alled unary, an arity 2 symb ol is alled binary, and a 0-arity symb ol is alled a onstant, or
nullary. An arity n symb ol f is sometimes denoted with fn in the examples.
Terms are strings of symb ols taken from a so alled alphabet, whih is the signature plus a
ountably innite set X of variables, denoted x, y, z, ... whih is disjoint from Œ£.
The set of terms over Œ£, denoted T (Œ£), is dened indutively as follows:
1. x ‚àà T (Œ£) for every x ‚àà X.
2. if n ‚â• 0, f is an n-ary symb ol and t1, . . . , tn ‚àà T (Œ£), then f(t1, . . . , tn) ‚àà T (Œ£) (it should
b e understo o d as just f if nullary).
The terms ti are alled the arguments of the term f(t1, . . . , tn), and the symb ol f is the head
symbol or the root. Terms not ontaining variables are alled ground terms or losed terms,
otherwise they are alled non-ground terms, and in general all terms are alled open terms
(when they an p ossibly have variables). Terms in whih no variable o urs more than one
are linear. The length of a term t, denoted by |t|, is dened as exp eted :
|x| = 1
|f(t1, . . . , tn)| = |t1|+ ¬∑ ¬∑ ¬∑+ |tn|+ 1
whih measures the numb er of o urrenes of funtion symb ols plus variables.
A ontext is an inomplete term, a term with a unique hole denoted ‚ú∑, whih is a distin-
guished element not in Œ£. In a ontext, usually denoted C{‚ú∑}, the replaement of the hole by
a term t, denoted C{t}, is dened as exp eted .
The set of variables of a term t is dened as exp eted :
V ar(x) = {x}
V ar(f(t1, . . . , tn)) = V ar(t1) ‚à™ ¬∑ ¬∑ ¬∑ ‚à™ V ar(tn)
A redution rule for a signature Œ£ is a pair (l, r) of terms of T (Œ£) (note they may ontain
variables), to b e written as l‚Üí r, suh that:
1. l is not a variable
2. V ar(r) ‚äÜ V ar(l), that is, no variable whih do es not o ur in l may o ur in r
l is alled the left-hand side (lhs) and r is alled the right-hand side (rhs).
A substitution is a funtion œÉ : X ‚Üí T (Œ£) suh that œÉ(f(t1, . . . , tn)) = f(œÉ(t1), . . . , œÉ(tn)).
Thus a substitution is always determined by its values in the set of variables X. Other way to
intro due a substitution is as a funtion from X to T (Œ£) and then extend it to the whole set
of terms T (Œ£) suh that the previous ondition is fullled. For more details and results ab out
this formulation of substitutions (with formulations of mathing and uniation problems), see
(9; 14) (also any go o d text ab out logi programming).
14
1.4 First-order rewriting and string rewriting
A TRS is a pair (Œ£, R) where R is a set of rules.
The rewriting relation of a TRS (Œ£, R) is given as follows. Given two terms t and s, we say
that t rewrites to s i there exists a ontext C, a rule l‚Üí r ‚àà R and a substitution œÉ suh that
t = C{œÉ(l)} and s = C{œÉ(r)}.
In this ase we say that œÉ(l) is the redex and œÉ(r) is the ontratum or redut of the redex.
A ground TRS is a TRS in whih b oth lhs and rhs of every rule are ground terms.
Every TRS is FB. As a simplest example of a ground TRS whih is not BD, take the one
given by the unary symb ol a, the binary symb ol f and the rule: a‚Üí f(a, a).
1.4.2 String rewriting
There are dierent formulations of string rewriting, whether variables are inluded or not.
1.4.2.1 Semi-Thue Systems
Semi-Thue Systems (STSs) (9; 14) roughly onsist of rewriting over strings, where the rules
are pairs of strings. Given a non-empty nite set Œ£ of symbols or haraters, alled the alphabet,
the set of strings over Œ£, denoted Œ£‚àó, onsists of nite sequen e s of (zero or more) elements of
Œ£. If u and v are strings, their onatenation is denoted u.v or simply uv.
A rewriting rule for Œ£ is a pair (l, r) of strings of Œ£‚àó, written as l ‚Üí r. An STS is a pair
(Œ£, R) where R is a set of rules.
Given two strings t and s, we will say that t rewrites to s, written t ‚Üí s, if there exists a
rule l‚Üí r and strings u, v ‚àà Œ£‚àó suh that t = ulv and s = urv.
1.4.2.2 Post-Canonial Systems
Post Canonial Systems (PCSs) (14) basially onsist of rewriting over strings without on-
text ompatibility, and allowing the use of variables in the rules.
A PCS is a rewriting system based on string rewriting, with a set of rules of the form u‚Üí v,
where u and v are strings over the alphab et Œ£ ‚à™ X, with Œ£ a non-empty nite set of symb ols and
X a denumerably innite set of variables (notation x, y, . . . ) disjoint from Œ£, whih will denote
strings during the rewriting pro ess, and with the (exp eted ) restrition that every variable
o urring in v must o ur in u.
Substitutions an b e dened in a way similar to substitutions for TRSs, with the dierene
that variables are mapp ed to strings from (Œ£ ‚à™ X)‚àó. The empty string is denoted by «´. All
substitutions are extended to handle arbitrary strings in an exp eted indutive way: for c any
symb ol, x any variable and v any string, œÉ(«´) = «´, œÉ(cv) = cœÉ(v) and œÉ(xv) = œÉ(x)œÉ(v).
15
1.5 -alulus
The rewriting relation is dened as follows. Given two strings (p ossibly empty, p ossibly
ontaining variables) t and s, we will say that t rewrites to s, written t ‚Üí s, if there exists a
rule l‚Üí r and a substitution œÉ suh that t = œÉ(l) and s = œÉ(r).
As it an b e seen, there is an imp ortant restrition: rules do not manage to rewrite under the
substring relation, that is, a rule ompletely sp eies a rewriting step, where variables denote
any substring and the lhs and rhs denote a string onatenation b etween their omp onents
(variables and/symb ols). The rewriting relation is given as with TRSs but taking the ontext
equal to a hole.
For that reason, a ground PCS (i.e. those without the use of variables) is not exatly a STS,
sine redution steps do not neess arily o ur in substrings mathing a rule lhs. The rewriting
relation dened by the PCS takes the entire string and rewrites it aording to mathing with
some rule. But STSs are indeed a partiular ase of PCSs. For instane, to ahieve the same
eet than the STS rule a‚Üí bbc, a PCS may have the rule xay ‚Üí xbbcy, having the variables
x and y represent the string prex and p ostx resp etively.
PCSs atually ome from the logi arena, and they an b e more general by allowing rules
with a lhs having a (nite) set of strings instead of just one, thus stating that given a set of
strings whih have b een dedued so far, a rewriting step onsists in adding a new string to
this set aording to some rule. But we would not onsider this general form sine we are not
dealing here with rewriting over sets nor any other struture whih is not a rst-order term or
a string.
A nal remark of this setion. We have dened isomorphism b etween any pair of ARSs.
Sometimes we will sp eak ab out (mixed) isomorphisms b etween an ARS and an STS, as well as
b etween an ARS and a TRS, et., making it lear that in every ase we will mean isomorphi
as ARSs. Remark that for example a TRS an have as a  graph atually a multi-graph, i.e.
some pairs of no des may b e onneted by more than one edge. For instane, in the TRS with
symb ols {a0, b0, f 2} and rules f(a, x) ‚Üí x and f(x, a) ‚Üí a, the edge (f(a, a), a) may app ear
twie. We will disregard this p ossibility when sp eaking ab out graph isomorphisms, sine in our
formulation ARS isomorphisms do not handle this. Thus when we take the graph of an ARS
we impliitly ollapse all edges onneting the same pair of no des to a single one, everyw h e re
where they may o ur.
1.5 Œª-alulus
Œª-alulus will b e a entral issue in this thesis. Although we shall assume familiarity with
lassial Œª-alulus with names (11), we briey desrib e it here.
16
1.5 -alulus
1.5.1 Classial Œª-alulus
In the untyp ed Œª-alulus (11) we should explain the role of the symb ol Œª as a binding
op erator. It has the goal of p erforming substitution in a given ontext. This notion is aptured
by equational theories over terms.
The set of Œª-terms, denoted Œõ, is desrib ed by the syntax:
M ::= x | (MM) | (Œªx.M)
where x means  variables, i.e. x ranges over a given denumerably innite set X of the so
alled variables, that is, elements that an b e replaed during redution as we shall see. Letters
M,N,O, P, . . . shall b e used for Œª-terms. Free and b ound variables are dened as follows. We
denote with FV (M) the set of free variables of M whih is dened as
FV (x) = {x}
FV (MN) = FV (M) ‚à™ FV (N)
FV (Œªx.M) = FV (M) \ {x}
Bound variables of a term are dened as exp ete d :
BV (x) = ‚àÖ
BV (MN) = BV (M) ‚à™BV (N)
BV (Œªx.M) = BV (M) ‚à™ {x}
Remark that a variable may app ear b ound and free in dierent o urrenes .
A ontext C{‚ú∑} is a term with a unique hole, whih an b e replaed by any term, in the
exp ete d way.
1.5.1.1 Œ±-onversion
We reall the rst of two notions of onvertibility (also alled onversion) b etween terms
whih is desrib ed by a relation, namely Œ±-onversion.
Œ±-onversion is stated indutively as follows:
Œªx.M =Œ± Œªy.M{x‚Üê y} if y 6= x, y /‚àà FV (M)
if M =Œ± M
‚Ä≤
then MN =Œ± M
‚Ä≤N
if N =Œ± N
‚Ä≤
then MN =Œ± MN
‚Ä≤
if M =Œ± M
‚Ä≤
then Œªx.M =Œ± Œªx.M
‚Ä≤
The signiane of this relation relies in the fat that variables are b orn all equal, and there
is no need to make them dier one from eah other when they get the status of b ound variables.
We an make sure that the b ound variables of terms do not interfere with eah other, nor with
any free variables. For this we usually adopt the so alled Barendregt's  variable onvention,
whih an b e vaguely stated: In any denition, theorem or proof in whih only nitely many
terms appear, we silently Œ±-onvert them so that bound variables of eah term are not the same
17
1.5 -alulus
as the bound variables of any other term, or the free variables of any term. This priniple is
of meta-level, thus it an b e seen as higher-order with resp et to normal ontexts we use to
manage within a mathematial theory.
Syntatial equality (mo dulo renaming of b ound variables) is express e d using the = symb ol.
For every pair of terms M and N , M is a sub-term of N , denoted M ‚äÜ N , i M ‚àà Sub(M)
where the set of terms Sub(M) is dened as follows:
Sub(x) = {x}
Sub(MN) = Sub(M) ‚à™ Sub(N) ‚à™ {MN}
Sub(Œªx.M) = Sub(M) ‚à™ {Œªx.M}
1.5.1.2 Œ≤-onversion
We reall M{x‚Üê N} whih is used to denote meta-level substitution of all free o urrenes
of x in M by N (see (11)). The formal denition is:
x{x‚Üê P} = P
y{x‚Üê P} = y y 6= x
(MN){x‚Üê P} = (M{x‚Üê P})(N{x‚Üê P})
(Œªy.M){x‚Üê P} = Œªy.(M{x‚Üê P}) y 6= x
Without the use of the free-variable onvention, it would b e neess ary a lause like
(Œªy.M){x ‚Üê P} = Œªu.(M{y ‚Üê u}){x ‚Üê P}) for y 6= x, u /‚àà FV (M) ‚à™ FV (P ) i.e. a fresh
variable u is taken, for handling the ase y ‚àà FV (P ) (and avoiding the so alled variable lash
or apture).
Intuitively {x ‚Üê N} is seen to traverse M until it reahes its variables and then either a
opy of N is disarded or replaes the o urrene of x in question.
The Œ≤-redution of Œª-alulus is desrib ed next. We write M ‚ÜíŒ≤ N when M redues in one
Œ≤-step to N , that is M = C[(Œªx.P )Q] and N = C[P{x‚Üê Q}] where C is some ontext.
Thus the Œ≤-rewrite rule reads: (Œªx.M)N ‚ÜíŒ≤ M{x ‚Üê N}. Intuitively, Œªx.M denotes a one
argument funtion whose (formal) parameter is named x, and N is the atual parameter to
whih this funtion is applied. The result of applying Œªx.M to N is a new term, denoted
M{x‚Üê N}, obtained from M by substituting all (free) o urrenes of x by N . Note that this
op eration is exeuted atomially, in one go.
It is a fundamental theorem of Churh and Rosser that Œª-alulus is onuent (19; 20).
A redution strategy ‚Üís is omplete with resp et to a subset B of terms if, given any term
a, if a ‚Üí b with b ‚àà B, then a ‚Üí
s
b. For instane, it is known that in lamb da alulus the
leftmost-outermost redution strategy is omplete with resp et to the set of normal forms.
18
1.5 -alulus
1.5.1.3 Œ∑-onversion
The Œ∑-redution, sometimes also alled extensionality, is the rule
Œªx.Mx ‚Üí M if x /‚àà FV (M)
with its ompatible losure. The intuition b ehind Œ∑-redution and its asso iated equivalene
relation, Œ∑-onversion (denoted =Œ∑) is that two  funtions an b e onsidered equal if yield
idential results when applied to idential arguments.
ŒªŒ≤Œ∑-alulus, whih is Œª-alulus with b oth Œ≤- and Œ∑-redution, is also onuent.
1.5.2 Œª-alulus √† la de Bruijn
Although familiarity is assumed with de Bruijn notation (27) and meta-substitution, we now
briey desrib e this Œª-alulus formulation.
As we said the motivation b ehind the use of indies instead of variables is to avoid the need
of Œ±-onversion. Natural numb ers (indies) are used to represent the variables, aording to
the nesting of Œª-binders.
In the ontext of the Œª-alulus √† la de Bruijn we denote with ŒõdB the set of de Bruijn terms,
whose syntax is as follows:
Denition 1.5.1 1. The syntax of the Œª-alulus terms in de Bruijn notation is given by:
a ::= n | (aa) | (Œªa) where n ‚àà IN.
2. We say that a redution ‚Üí is ompatible on ŒõdB when for al l a, b, c ‚àà ŒõdB, if a‚Üí b then
a c‚Üí b c, c a‚Üí c b and Œªa‚Üí Œªb.
3. Œ≤-redution is the smal lest ompatible redution on Œõ generated by:
(Œ≤-rule) (Œªa) b‚ÜíŒ≤ a{ 1‚Üêb}
where ‚Ä¢{ ‚Ä¢ ‚Üê ‚Ä¢} is the usual meta-substitution operator for the de Bruijn terms (see
below). The Œª-alulus (√† la de Bruijn), is the redution system whose only rewriting rule
is Œ≤.
We reall the denition of free variables of de Bruijn terms as follows:
FV (m) = {m}
FV (ab) = FV (a) ‚à™ FV (b)
FV (Œªa) = FV (a)‚àí 1
where A‚àí n = {m‚àí n | m ‚àà A,m > n}.
We also reall the up dating funtions U ik(‚Ä¢) for i ‚â• 1, k ‚â• 0 as follows:
19
1.5 -alulus
U ik(m) =
{
m+ i‚àí 1 if m > k
m if m ‚â§ k
U ik(ab) = U
i
k(a)U
i
k(b)
U ik(Œªa) = ŒªU
i
k+1(a)
Last, we reall the meta-substitution op erator at level i, for i ‚â• 1, of a term b ‚àà ŒõdB in a
term a ‚àà ŒõdB, denoted a{ i‚Üêb} , as follows:
n{ i‚Üêb} =
Ô£±Ô£≤
Ô£≥
n‚àí 1 if n > i
U i0(b) if n = i
n if n < i
(cd){ i‚Üêb} = (c{ i‚Üêb} )(d{ i‚Üêb} )
(Œªc){ i‚Üêb} = Œª(c{ i + 1‚Üêb} )
There is a elebrated isomorphism b etween lassial Œª-alulus and the Œª-alulus √† la de
Bruijn (43; 44), thus the latter is also onuent. This isomorphism is given by the pair of
translation funtions w[x1,...,xn](‚Ä¢) : Œõ ‚Üí ŒõdB and u[x1,...,xn](‚Ä¢) : ŒõdB ‚Üí Œõ dened b elow.
For every term M ‚àà Œõ suh that FV (M) ‚äÜ {x1, . . . , xn} we dene, by indution on M ,
w[x1,...,xn] as follows:
w[x1,...,xn](v) = min{j | v = xj}
w[x1,...,xn](MN) = w[x1,...,xn](M)w[x1,...,xn](N)
w[x1,...,xn](Œªx.M) = Œªw[x,x1,...,xn](M)
Let X = {v1, v2, . . . } the set of all variables, then for every term M ‚àà Œõ we dene
w(M) = w[v1,v2,...,vn](M) where n is suh that FV (M) ‚äÜ {v1, v2, . . . , vn}.
For every term a ‚àà ŒõdB suh that FV (a) ‚äÜ {1, . . . , n} we dene, by indution on a, u[x1,...,xn]
as follows:
u[x1,...,xn](i) = xi
u[x1,...,xn](bc) = u[x1,...,xn](b)u[x1,...,xn](c)
u[x1,...,xn](Œªb) = Œªx.u[x,x1,...,xn](b) with x /‚àà {x1, . . . , xn}
Let X b e the same enumeration of variables as ab ove, then for every a ‚àà ŒõdB we dene
u(a) = u[v1,v2,...,vn](a) where n is suh that FV (a) ‚äÜ {1, 2, . . . , n}.
Both denitions of w and u are orret, i.e. do not dep end on the n taken nor on the hoie
of x (see (44)). The pair (w, u) realizes the isomorphism b etween b oth aluli in the sense that
for every a ‚àà ŒõdB w(u(a)) = a and for every M ‚àà Œõ u(w(M)) =Œ± M . We will take Œ±-onversion
as equality from now onwards, thus we aept that w and u are inverses of eah other.
20
1.6 Expliit substitution
1.5.3 Typ es and environments
We give a brief survey of the Curry-style simply typ ed versions of the Œª-alulus with de
Bruijn indies (47).
Typ es and environments (or ontexts) are dened for most of the aluli disussed in this
thesis as follows:
Denition 1.5.2 The syntax for types and environments in the de Bruijn setting is given by:
Types T ::= T | T ‚Üí T Environments E ::= nil | T,E
where T is a set of basi types. We let A, B, et. range over T and E, F , et. range over E.
Sometimes we will refer to environments as ontexts. The following notation for environments
will b e frequently used. For an environment E = A1, A2, . . . , An, we denote with Ei the i-th
typ e of the environment, i.e. Ai, with E‚â•i the environment Ai, Ai+1, . . . , An and with E>i the
environment Ai+1, Ai+2, . . . , An. Similarly, E‚â§i denotes the environment A1, A2, . . . , Ai; E<i is
the environment A1, A2, . . . , Ai‚àí1, and E<i,B,‚â•i is the environment
A1, A2, . . . , Ai‚àí1, B,Ai, . . . , An
i.e. the result of adding typ e B b efore p osition i to the environment E.
(L1‚àí var) A,E ‚ä¢ 1 : A (L1‚àí Œª)
A,E ‚ä¢ b : B
E ‚ä¢ Œªb : A‚Üí B
(L1‚àí varn)
E ‚ä¢ n : B
A,E ‚ä¢ n + 1 : B
(L1‚àí app)
E ‚ä¢ b : A‚Üí B E ‚ä¢ a : A
E ‚ä¢ b a : B
Figure 1.1: The typing rules of the simply typ ed Œª-alulus √† la de Bruijn
The typing rules for the simply typ ed Œª-alulus in de Bruijn notation are dened in Fig-
ure 1.1. We all this typing system L1 (and it is going to b e extended in short for other
aluli). This typing system satises several go o d prop erties: sub jet redution and strong
normalization of typable terms (f. (11)).
1.6 Expliit substituti o n
Classial Œª-alulus has the meta-substitution op erator whih b ehaves as an atomi or prim-
itive op eration. Sine there are many interesting questions regarding the way substitutions are
21
1.6 Expliit substitution
exeuted, aluli of expliit substitution for the Œª-alulus were reated. The aim is to ll the
gap b etween theory and implementation of the Œª-alulus by making the substitution notion
expliit, that is, part of the syntax of the alulus.
We give in the following subsetions just a minimal brieng ab out Œªx, ŒªœÖ, Œªs, Œªse, Œªœâ and Œªœâe
for understanding the motivations b ehind expliit substitution, as well as the main problems
of this thesis to b e disussed later on. For more details ab out these rewriting systems, see the
referenes ited for eah one of them.
1.6.1 The Œªx-alulus
The Œªx-alulus (15; 76) is a alulus of expliit substitutions for the Œª-alulus formulated
in a named variable setting. The op eration of substitution is inorp orated at the ob jet-level,
thus the Œ≤-redution rule is transformed into the following Beta-redution rule:
(Œªx.M)N ‚ÜíBeta M„Äàx := N„Äâ where the op erator ‚Ä¢„Äà‚Ä¢ := ‚Ä¢„Äâ is a new op erator in the alulus to
make substitutions expliit. Thus rules desribing its b ehavior must b e intro dued.
Denition 1.6.1 (Œªx-terms) Given a denumerably innite set of variables X the Œªx-terms,
denoted Œõx, are given by the fol lowing syntax:
M ::= x | (Œªx.M) | (MM) |M„Äàx := M„Äâ
where x ranges over X as usual.
So now a term is either a variable, an appliation of a term to another term (represented by
juxtaposition, as before), an abstration, or a term of the form P „Äàx := Q„Äâ al led a losure.
The ‚Ä¢„Äà‚Ä¢ := ‚Ä¢„Äâ operator is al led the substitution op erator. Terms without ourrenes of
substitution operators are al led pure terms. The usual variable onvention is maintained with
the additional observation that the variable x in the term M„Äàx := N„Äâ binds the free ourrenes
of x in M ; M is al led the target and N the body of the substitution. FV (M) denotes the set of
free variables of a term M , dened as usual, with FV (M„Äàx := N„Äâ) = FV (M) \ {x} ‚à™ FV (N).
The rewriting rules of the Œªx-alulus are given in Figure 1.2.
The Œªx-alulus is onuent. The Œªx-alulus without the Beta-rule is alled the substitution
sub-alulus of Œªx and is denoted by x. This sub-alulus is SN and onuent, and its normal
forms are pure terms (15). Thus if M ‚àà Œõx then we use x(M) to denote its unique x-normal
form.
A variant of the Œªx-alulus is the Œªx‚àí-alulus whose rules are those of the Œªx-alulus
exept for the Gc-rule (also alled garbage ol letion) whih is replaed by the more restrited
rule y„Äàx := P „Äâ ‚ÜíVar2 y where x 6= y. Note that Œªx is more general than Œªx
‚àí
in the sense that
‚ÜíŒªx‚àí‚äÇ‚ÜíŒªx but ‚ÜíŒªx 6‚äÇ‚ÜíŒªx‚àí .
22
1.6 Expliit substitution
(Beta) (Œªx.M) N ‚Üí M„Äàx := N„Äâ
(App) (MN)„Äàx := P „Äâ ‚Üí M„Äàx := P „Äâ N„Äàx := P „Äâ
(Lam) (Œªy.M)„Äàx := P „Äâ ‚Üí Œªy.M„Äàx := P „Äâ x 6= y
(Var) x„Äàx := P „Äâ ‚Üí P
(G) M„Äàx := P „Äâ ‚Üí M x /‚àà FV (M)
Figure 1.2: The rewriting rules of the Œªx-alulus
It is easy to see that eah Œ≤-rewrite step may b e implemented" by one Beta-rewrite step
followed by many x-rewrite steps. In some ases there might b e p ending substitutions that
may not need to b e exeuted . For example in the derivation b elow there has b een no need
to ompute the substitution (yy)„Äày := N„Äâ thus reduing omputation time and unnees s ary
dupliation of the term N :
(Œªy.(Œªx.z)(yy))N ‚ÜíBeta ((Œªx.z)(yy))„Äày := N„Äâ
‚ÜíApp (Œªx.z)„Äày := N„Äâ(yy)„Äày := N„Äâ
‚ÜíLam (Œªx.z„Äày := N„Äâ)(yy)„Äày := N„Äâ
‚ÜíGc (Œªx.z)(yy)„Äày := N„Äâ
‚ÜíBeta z„Äàx := (yy)„Äày := N„Äâ„Äâ
‚ÜíGc z
When augmenting the lamb da alulus with expliit substitutions and assuming M Œ≤-rewrites
to N , a rih supply of alternative derivations are provided in order to go from M to N . This
suggests that rewrite strategies for the lamb da alulus are relevant in this new setting. For
instane, some work in optimal rewrite strategies for (weak) aluli of expliit substitutions has
b een addressed in (63) and normalizing strategies in (67), see also (30).
An imp ortant prop erty that Œªx fullls is the Preservation of Strong Normalization (PSN). It
means that given a SN term of lassial Œª-alulus, it is still SN in Œªx. One pro of of this fat
an b e found in (15).
1.6.2 The ŒªœÖ-alulus
The ŒªœÖ-alulus (13; 60) is a alulus of expliit substitutions for the Œª-alulus formulated
in a de Bruijn setting with minimal substitution op erators.
Denition 1.6.2 The fol lowing is the two-sorted syntax for the ŒªœÖ-terms and substitutions
(where IN denotes the set of positive natural numbers):
Terms a ::= n | (a a) | (Œªa) | a[s] where n ‚àà IN
Substitutions s ::= a/ | ‚Üë | ‚áë (s)
23
1.6 Expliit substitution
Let ŒõtœÖ be the set of ŒªœÖ-terms, and Œõ
s
œÖ be the set of ŒªœÖ-substitutions, dened above.
Terms without ourrenes of substitution operators are al led pure terms. A term of the
form a[s] is al led a losure, where the sub-term a is al led its head.
The rewriting rules of the ŒªœÖ-alulus are given in Figure 1.3.
(Beta) (Œªa)b ‚Üí a[b/]
(App) (ab)[s] ‚Üí a[s]b[s]
(Lam) (Œªa)[s] ‚Üí Œªa[‚áë (s)]
(Fvar) 1[a/] ‚Üí a
(Rvar) (n+ 1)[a/] ‚Üí n
(FvarLift) 1[‚áë (s)] ‚Üí 1
(RvarLift) (n+ 1)[‚áë (s)] ‚Üí n[s][‚Üë]
(V arShift) n[‚Üë] ‚Üí n+ 1
Figure 1.3: The rewriting rules of the ŒªœÖ-alulus
We use ŒªœÖ to denote this set of rules. Compatibility on ŒõtœÖ is dened by the following rules
for terms a, b, c and substitutions s, t: if a ‚ÜíŒªœÖ b then ac ‚ÜíŒªœÖ bc, ca ‚ÜíŒªœÖ cb, Œªa ‚ÜíŒªœÖ Œªb,
a/ ‚ÜíŒªœÖ b/ and a[s] ‚ÜíŒªœÖ b[s], and if s ‚ÜíŒªœÖ t then ‚áë (s) ‚ÜíŒªœÖ‚áë (t) and a[s] ‚ÜíŒªœÖ a[t]. The rules
(App), (Lam), (Fvar), (Rvar), (FvarLift), (RvarLift) and (VarShift) onform the œÖ-alulus. ŒªœÖ
is onuent, and œÖ is onuent and SN. We denote with œÖ(u) the unique œÖ-normal form of a
term or substitution u.
A ŒªœÖ-ontext is dened in the exp ete d way as follows:
Denition 1.6.3 A ontext in ŒªœÖ is a term ontaining a unique hole ‚ú∑, i.e. generated by the
fol lowing four-sorted syntax:
Term contexts C ::= ‚ú∑ | (C a) | (a C) | (Œª C) | C[s] | a[S]
Substitution contexts S ::= C/ | ‚áë (S)
where the syntax of terms a (ŒõtœÖ) and substitutions s (Œõ
s
œÖ) are those of Denition 1.6.2.
We reall the usual notion of sub-term and positions (given as sequen e s over {0,1}) of sub-
terms (or holes) inside a given term (or ontext), and we denote with Pos(a) the set of p ositions
of the term a. We reall the notion of prex and proper prex b etween p ositions (orresp onding
to the nesting of sub-terms), as usual b oth for terms and ontexts.
A term ontext is a ontext where the hole is in a sub-term (not substitution) p osition.
Otherwise, the ontext will b e a substitution ontext.
24
1.6 Expliit substitution
Denition 1.6.4 For s ‚àà ŒõsœÖ we dene the fol lowing substitutions as indiated:
‚áë0 (s) = s
‚áëi+1 (s) = ‚áë (‚áëi (s)) i ‚â• 0
Remark 1.6.5 Every substitution in ŒõsœÖ has either the form ‚áë
k (a/) for some a ‚àà ŒõtœÖ and
k ‚â• 0 or the form ‚áëk (‚Üë) for some k ‚â• 0.
Proof: By indution on the derivation of its memb ership in ŒõsœÖ. ‚ú∑
Denition 1.6.6 For al l a ‚àà ŒõœÖ we dene the size of a in the expeted way, written |a|. Note
that by the two-sorted fashion of ŒõœÖ we are dening the size not only for terms but also for
substitutions in a mutual ly reursive way. For terms:
|m| = 1
|Œªa| = |a|+ 1
|ab| = |a|+ |b|+ 1
|a[s]| = |a|+ |s|+ 1
and for substitutions:
|a/| = |a|+ 1
| ‚Üë | = 1
| ‚áë (s)| = |s|+ 1
ŒªœÖ satises PSN, with resp et to the de Bruijn Œª-alulus. For more details and pro ofs see
(13; 60).
1.6.3 The Œªs-alulus
The Œªs-alulus (43) is a alulus of expliit substitutions for the Œª-alulus formulated in a
de Bruijn setting.
Denition 1.6.7 1. The set of terms, noted Œõs , of the Œªs-alulus is given as fol lows:
a ::= n | (a a) | (Œªa) | a œÉja | œïika where j, i ‚â• 1, k ‚â• 0, n ‚â• 1.
A losure is a term of the form a œÉjb. A pure term does not ontain œÉ's nor œï's.
2. The Œªs-alulus is the rewriting system (Œõs,‚ÜíŒªs), where ‚ÜíŒªs is the least ompatible re-
dution on Œõs generated by the rules in Figure 1.5.
We use Œªs to denote this set of rules. Compatibility on Œõs is dened by the following rules
for terms a, b, c: if a ‚ÜíŒªs b then ac ‚ÜíŒªs bc, ca ‚ÜíŒªs cb, Œªa ‚ÜíŒªs Œªb, a œÉ
jc ‚ÜíŒªs b œÉ
jc, c œÉja ‚ÜíŒªs
c œÉjb and œïika ‚ÜíŒªs œï
i
kb. The s-alulus is the rewriting system generated by the set of rules
25
1.6 Expliit substitution
(Ls1‚àí œÉ)
E‚â•i ‚ä¢ b : B E<i, B,E‚â•i ‚ä¢ a : A
E ‚ä¢ a œÉib : A
(Ls1‚àí œï)
E‚â§k, E‚â•k+i ‚ä¢ a : A
E ‚ä¢ œïika : A
(Ls1‚àíMtv) E ‚ä¢ XE,A : A
Figure 1.4: Extra typing rules of the simply typ ed Œªs- and Œªse-aluli
œÉ-generation (Œªa) b ‚àí‚Üí a œÉ1 b
œÉ-Œª-transition (Œªa)œÉjb ‚àí‚Üí Œª(aœÉj+1b)
œÉ-app-transition (a1 a2)œÉ
jb ‚àí‚Üí (a1 œÉ
jb) (a2 œÉ
jb)
œÉ-destrution nœÉjb ‚àí‚Üí
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
n‚àí 1 if n > j
œïj0 b if n = j
n if n < j
œï-Œª-transition œïik(Œªa) ‚àí‚Üí Œª(œï
i
k+1 a)
œï-app-transition œïik(a1 a2) ‚àí‚Üí (œï
i
k a1) (œï
i
k a2)
œï-destrution œïik n ‚àí‚Üí
{
n + i‚àí 1 if n > k
n if n ‚â§ k
Figure 1.5: The rewriting rules of the Œªs-alulus
26
1.6 Expliit substitution
s = Œªs \ {œÉ-generation}. Œªs is onuent, and s is onuent and SN. We denote with s(a) the
unique s-normal form of a term a.
Œªs also satises PSN, with resp et to the de Bruijn Œª-alulus. For more details and pro ofs
ab out Œªs, see for example (15; 43; 74).
1.6.4 The Œªse-alulus
The Œªse-alulus has b een prop osed as an extension of Œªs in order to get the onuene on
op en terms for this alulus.
Denition 1.6.8 1. The set of op en terms, noted Œõsop is given as fol lows:
a ::= X | n | (a a) | (Œª a) | a œÉja | œïik a where j, i ‚â• 1 , k ‚â• 0 , n ‚â• 1.
where X ranges over V whih stands for a denumerably innite set of variables (sometimes
also al led meta-variables). Furthermore, losures, pure terms and ompatibility are
dened as for Œªs.
2. Œªse is obtained by adding the rules of Figure 1.6 to those of Figure 1.5. The Œªse-alulus
is the redution system (Œõsop,‚ÜíŒªse) where ‚ÜíŒªse is the smal lest ompatible redution on
Œõsop generated by the set of rules Œªse. The se-alulus is the rewriting system generated
by the set of rules se = Œªse \ {œÉ-generation}.
œÉ-œÉ-tr (a œÉib)œÉj c ‚àí‚Üí (a œÉj+1 c) œÉi (b œÉj‚àíi+1 c) if i ‚â§ j
œÉ-œï-tr 1 (œïik a)œÉ
j b ‚àí‚Üí œïi‚àí1k a if k < j < k + i
œÉ-œï-tr 2 (œïik a)œÉ
j b ‚àí‚Üí œïik(a œÉ
j‚àíi+1 b) if k + i ‚â§ j
œï-œÉ-tr œïik(a œÉ
j b) ‚àí‚Üí (œïik+1 a)œÉ
j (œïik+1‚àíj b) if j ‚â§ k + 1
œï-œï-tr 1 œïik (œï
j
‚Ñì a) ‚àí‚Üí œï
j
‚Ñì (œï
i
k+1‚àíj a) if l + j ‚â§ k
œï-œï-tr 2 œïik (œï
j
‚Ñì a) ‚àí‚Üí œï
j+i‚àí1
‚Ñì a if l ‚â§ k < l + j
Figure 1.6: The new rewriting rules of the Œªse-alulus
Working with op en terms in Œªs one loses onuene. This was solved in (45; 46) by intro-
duing Œªse.
We reall the basi typing rules for Œªs and Œªse:
27
1.6 Expliit substitution
Denition 1.6.9 The basi typing system Ls1 is dened by adding to the rules of Figure 1.1,
three new rules given in Figure 1.4. The rst two rules are for both Œªs and Œªse. The third
is only for Œªse. It is added to type open terms and should be understood as fol lows: for every
meta-variable X, there exists an environment E and a type A suh that the rule holds.
Last, Œªse do es not satisfy PSN.
1.6.5 The Œªœâ- and Œªœâe-aluli
In order to express Œªs-terms in the ŒªœÉ-style, (47) split the losure op erator of ŒªœÉ (denoted
in a semi-inx notation as ‚àí[‚àí]) into a family of losure op erators that were denoted also
with a semi-inx notation as ‚àí[‚àí]i, where i ranges over the set of natural numb ers. (47)
also admitted as basi op erators the iterations of ‚Üë and therefore had a ountable set of basi
substitutions ‚Üën, where n ranges over the set of natural numb ers. By doing so, the up dating
op erators of Œªs b eome available as ‚àí[‚Üën]i. Finally, (47) intro dued a slash op erator of sort
term ‚Üí substitut i o n whih transforms a term a into a substitution a/. This op erator may
b e onsidered as onsing with id (in the ŒªœÉ-jargon, see subsetion 1.6.6) and has b een rst
exploited in the ŒªœÖ-alulus (f. (13)).
Denition 1.6.10 1. The set of terms of the Œªœâ-alulus, noted Œõœâ, is dened as Œõœât ‚à™
Œõœâs, where Œõœât (terms) and Œõœâs (substitutions) are mutual ly dened as fol lows:
Terms a ::= n | (a a) | (Œª a) | a [s]j where j ‚â• 1, n ‚â• 1
Substitutions s ::= ‚Üëi | a / where i ‚â• 0
The set Œªœâ, of rules of the Œªœâ-alulus is given in Figure 1.7. The set of rules of the
œâ-alulus is Œªœâ \ {œÉ‚àígeneration} .
2. The set of op en terms, noted Œõœâop is dened as Œõœâ
t
op ‚à™ Œõœâ
s
op, where Œõœâ
t
op (open terms)
and Œõœâsop (open substitutions) are mutual ly dened as fol lows:
Open Terms a ::= X | n | (a a) | (Œªa) | a [s]j where j ‚â• 1
Open Substitutions s ::= x | ‚Üëi | a / where i ‚â• 0
where X ranges over V, a denumerably innite set of term variables, and x ranges over
W, a denumerably innite set of substitution variables.
3. The set of semi-op en terms, denoted Œõœâtsop is the set of open terms whih do not ontain
substitution variables (i.e. only term variables are al lowed).
4. The set Œªœâe, of rules of the Œªœâe-alulus is obtained by adding to the set of rules Œªœâ the set
of rules given in Figure 1.8. The set of rules of the œâe-alulus is Œªœâe \ {œÉ‚àígeneration}.
Remark that the shemes œÉ-œÉ-tr. and œï-œÉ-tr. of Œªse both translate into the same sheme of
Œªœâe, namely œÉ-/-trans.
28
1.6 Expliit substitution
œÉ-generation (Œªa) b ‚àí‚Üí a [b/]1
œÉ-app-tr (a b)[s]j ‚àí‚Üí (a [s]j) (b [s]j)
œÉ-Œª-tr (Œªa)[s]j ‚àí‚Üí Œª(a[s]j+1)
œÉ-/-des n[a/]j ‚àí‚Üí
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
n‚àí 1 if n > j
a[‚Üëj‚àí1]1 if n = j
n if n < j
œÉ-‚Üë-des n[‚Üëi]j ‚àí‚Üí
{
n + i if n ‚â• j
n if n < j
Figure 1.7: The rewriting rules of the Œªœâ-alulus
œÉ-/-tr a [b/]k[s]j ‚àí‚Üí a [s]j+1[b[s]j‚àík+1/]k if k ‚â§ j
/-‚Üë-tr a [‚Üëi]k[b/]j ‚àí‚Üí
{
a[b/]j‚àíi[‚Üë
i]k if k + i ‚â§ j
a[‚Üëi‚àí1]k if k ‚â§ j < k + i
‚Üë-‚Üë-tr a [‚Üëi]k[‚Üë
l]j ‚àí‚Üí
{
a[‚Üël]j‚àíi[‚Üë
i]k if k + i < j
a[‚Üëi+l]k if k ‚â§ j ‚â§ k + i
Figure 1.8: The new rewriting rules of the Œªœâe-alulus
29
1.6 Expliit substitution
We desrib e now the basi typing rules for Œªœâ and Œªœâe.
Denition 1.6.11 The basi typing system of the Œªœâ-alulus is al led Lœâ1. The rules are
those given in Figure 1.1 together with the new rules given in Figure 1.9. As usual, rules
(Lœâ1-Mtv) and (Lœâ1-Msv) are for open terms.
(Lœâ1‚àí id) E ‚ä¢ ‚Üë0 ‚ä≤E (Lœâ1‚àí slash)
E ‚ä¢ a : A
E ‚ä¢ a/ : A,E
(Lœâ1‚àí shift)
E ‚ä¢ ‚Üëi ‚ä≤E‚Ä≤
A,E ‚ä¢ ‚Üëi+1 ‚ä≤E‚Ä≤
(Lœâ1‚àí clos)
E‚â•j ‚ä¢ s ‚ä≤ E
‚Ä≤ E<j, E
‚Ä≤ ‚ä¢ a : A
E ‚ä¢ a[s]j : A
(Lœâ1‚àíMtv) E ‚ä¢ XE,A : A (Lœâ1‚àíMsv) E ‚ä¢ xE,E‚Ä≤ ‚ä≤ E
‚Ä≤
Figure 1.9: Extra typing rules of the simply typ ed Œªœâ- and Œªœâealuli
We reall the following results for the Œªs-, Œªse-, Œªœâ and Œªœâe-aluli:
Theorem 1.6.12 (f. (46; 47)) The fol lowing hold:
1. The s- and œâ-aluli are SN and onuent on Œõs and Œõœât respetively.
2. Let a, b ‚àà Œõ and r ‚àà {œâ, s}. If a‚Üí Œªr b then a‚Üí Œ≤ b . If a‚ÜíŒ≤ b then a‚Üí Œªr b .
3. The Œªœâ- and Œªs-aluli are onuent on Œõœât and Œõs respetively.
4. The Œªœâ- and Œªs-aluli satisfy PSN
5. The œâe- and se-aluli are WN and onuent.
6. The Œªœâe- and Œªse-aluli are onuent on semi-open and open terms, respetively.
7. Let a, b ‚àà Œõ and r ‚àà {œâe, se}. If a‚Üí Œªr b then a‚Üí Œ≤ b . If a‚ÜíŒ≤ b then a‚Üí Œªr b .
8. Sub jet Redution of Œªr for r ‚àà {s, œâ, se, œâe}: If E ‚ä¢ a : A and a ‚ÜíŒªr b then
E ‚ä¢ b : A, where the typing system should be understood as Ls1 for r ‚àà {s, se} and as
Lœâ1 for r ‚àà {œâ, œâe}.
9. SN of Œªr for r ‚àà {s, œâ}: Every wel l typed term is SN in the simply typed Œªr-alulus.
30
1.6 Expliit substitution
1.6.6 The ŒªœÉ-alulus
The ŒªœÉ-alulus (1; 25; 66) is historially the rst alulus of expliit substitutions for the
Œª-alulus, originally based in ategorial ombinators (24). It was formulated in a de Bruijn
setting, but the syntax has 1 as the only index.
Denition 1.6.13 The fol lowing is the two-sorted syntax for the ŒªœÉ-terms and substitutions:
Terms a ::= 1 | (a a) | (Œªa) | a[s]
Substitutions s ::= id | ‚Üë | (a ‚Ä¢ s) | (s ‚ó¶ s)
Let ŒõtœÉ be the set of ŒªœÉ-terms, and Œõ
s
œÉ be the set of ŒªœÉ-substitutions, dened above.
A term of the form a[s] is al led a losure, where the sub-term a is al led its head. The
‚ó¶ operator is al led omp osition, the ‚Ä¢ operator is al led ons and the id operator is al led
identity. Note that there are no other indies than 1, thus indies are oded as fol lows:
1, 1[‚Üë], 1[‚Üë ‚ó¶ ‚Üë], 1[‚Üë ‚ó¶(‚Üë ‚ó¶ ‚Üë)], . . . , and then pure terms may inlude losures, ompositions and
‚Üë's used in this way. Let ‚Üë1=‚Üë, ‚Üën+1=‚Üë ‚ó¶ ‚Üën for n ‚â• 1. Then the fol lowing is the syntax for
the ŒªœÉ-pure terms:
Pure terms a ::= 1 | 1[‚Üën] | (a a) | (Œªa) where n ‚â• 1
The rewriting rules of the ŒªœÉ-alulus are given in Figure 1.10.
(Beta) (Œªa)b ‚Üí a[b/]
(App) (ab)[s] ‚Üí a[s]b[s]
(Abs) (Œªa)[s] ‚Üí Œªa[1 ‚Ä¢ (s‚ó¶ ‚Üë)]
(Clos) a[s][t] ‚Üí a[s ‚ó¶ t]
(V arId) 1[id] ‚Üí 1
(V arCons) 1[a ‚Ä¢ s] ‚Üí a
(IdL) id ‚ó¶ s ‚Üí s
(ShiftId) ‚Üë ‚ó¶ id ‚Üí ‚Üë
(ShiftCons) ‚Üë ‚ó¶ (a ‚Ä¢ s) ‚Üí s
(Map) (a ‚Ä¢ s) ‚ó¶ t ‚Üí a[t] ‚Ä¢ (s ‚ó¶ t)
(Ass) (s ‚ó¶ t) ‚ó¶ u ‚Üí s ‚ó¶ (t ‚ó¶ u)
Figure 1.10: The rewriting rules of the ŒªœÉ-alulus
ŒªœÉ is onuent. The rules (App), (Abs), (Clos), (VarId), (VarCons), (IdL), (ShiftId), (Shift-
Cons), (Map) and (Ass) onform the œÉ-alulus, whih is onuent and SN. We denote with
œÉ(u) the unique œÉ-normal form of a term or substitution u.
31
1.7 General notation
ŒªœÉ do es not satisfy PSN with resp et to the de Bruijn Œª-alulus (66). For more details and
pro ofs see (15; 63; 66).
A nal remark for this setion. The PSN problem b eame interesting when it was observed
that ŒªœÉ did not satisfy this prop erty, leading to innite derivations whih were not intended at
the rst glane when onsidering pure terms. Not only ŒªœÉ laks the PSN prop erty. Another
one is Œªse. Also Œªx// (15), whih is similar to Œªx but handles a paral lel substitution op erator.
Last, another non-PSN alulus is Œª‚àÖ and its de Bruijn variations (see hapter 3).
1.7 General notatio n
Throughout the thesis, we use IN to denote the set of (p ositive) natural numb ers (1, 2, . . . ),
and use the notation M , N , . . . to range over terms of lassial Œª-alulus as well as over Œªx-
terms, a, b, . . . to range over terms of any of the de Bruijn aluli treated, s, t, . . . to range over
substitutions of any of the aluli having substitutions as a sort, and m,n, . . . to range over IN.
In typ ed Œª-aluli, we use A,B, . . . to denote typ es. Moreover, for terms as well as substitutions
we denote with u = v the fat that u and v are syntatially idential. We will assume from
now onwards the usual onventions ab out parentheses (see (11; 12)), that is, when ambiguity
do es not arise we an omit parenthesis always taking appliations, losures to b e left asso iative
and typ es to b e right asso iative (for instane, A‚Üí B ‚Üí C means A‚Üí (B ‚Üí C)). For every
named Œª-alulus we denote with Œªx1x2x3 . . . xn.M the term Œªx1.(Œªx2.(Œªx3.(. . . (Œªxn.M)))).
For every notion of redution R we use the following standard notation:
‚Ä¢ ‚ÜíR for one R-redution step,
+
‚ÜíR for its transitive losure, and ‚Üí
R
or ‚Üí‚àóR for its reexive
transitive losure.
‚Ä¢ ‚ÜínR denotes the n-th omp osition of the relation ‚ÜíR with itself (for n ‚â• 0), i.e. u‚Üí
n
R v
i there exist u0, u1, . . . , un where u = u0 ‚ÜíR u1 ‚ÜíR . . . ‚ÜíR un‚àí1 ‚ÜíR un = v. If n = 0,
‚ÜínR is the identity relation.
‚Ä¢ If u‚Üí
R
v we will also say that v R-expands (in zero or more steps) to u, and that u is an
(R‚àí) expansion of v.
32
1.7 General notation
33
1.7 General notation
Figure 1.11: LLL(LLLL) after 22 left-most steps
Figure 1.12: S(S(SS)K)S(SSS)(S(S(SS))KS(SSS)) after 24 left-most steps
34
Chapter 2
Motivating our work: systems,
subsystems and relations
Siene is organized know ledge. Wisdom is organized life.  I. Kant
Con el n de busar la verdad, es neesario, una vez a lo largo del urso de
nuestra vida, dudar de todo tanto omo sea posible.  R. Desartes
El primer paso haia la losof√≠a es la inredulidad.  An√≥nimo
ABSTRACT We aim to study subsys te ms of general and sp ei abstrat rewriting systems.
We treat sub-ARSs of Œª-alulus and other systems. We also exhibit a hierarhy of rewriting
systems from the p oint of view of their redution graphs. Given two rewriting paradigms, we
are interested in knowing if any instane of one of them an b e represented by some instane
of the other one, and vieversa, in suh a way that every single redution step is preserved . We
prove that this is not the ase for the formalisms we study.
2.1 Intro dution
Rewriting, not only from the philosophial but also from the mathematial and pratial
p oints of view, seems to b e a p owerful omputing formulation, more preisely a family of
paradigms.
This is a thesis ab out aluli with expliit substitution in the broad area of rewriting theory.
The reader will aess in the subsequ e nt hapters to dierent problems ab out Œª-aluli, mainly
in the area of expliit substitution.
The idea of sub-struture turns out to b e very interesting in most topis of rewriting theory,
and that will b e the main invariant of this thesis. In essen e , we will treat several subsys te ms
of Œª-alulus. The onept of subsys te m is thus very imp ortant, moreover its motivations
35
2.1 Intro dution
atually ome from abstrat algebra, ategory theory and logi. Imp ortant relations b etween
rewriting systems ome from onsidering subsys te ms and sub-ARSs as we will see. We also p ose
many examples of subsys te ms of given ARSs, many of whih will b e studied in the subseq u e nt
hapters.
Other question whih omes to mind in the ontext of rewriting as omputing is the generation
of ob jets using rewriting rules, that is, the p ossibility of obtaining a given element from a set
of elements (what in logi is usually alled an inferene). We an then formulate the onept
of base, as a minimal set of generators for a given set, in the same way a base is a minimal set
of generators in algebrai strutures (suh as a vetor spae, group, ring, algebra, et.) This
resembles the idea of a minimal set of axioms for a given theory.
In this hapter we are studying some rewriting formulations by lo oking at their omplete
redution graphs. A natural question is to ask what is the relationship b etween rewriting theory
and graph theory. The question seeks an explanation on what kind of problems rewriting an
express , formulate or pro of sp eially, that graphs ould not handle. At rst glane every
nite or innite direted graph (even a multi-graph) an b e seen as an ARS. And ARSs an
b e seen as direted graphs. But the main motivation of ARSs is ompletely dierent from the
motivation of graph theory. In graphs, there is entral interest in aessibility relation, and the
interesting graphs use to b e the nite ones. In ARSs, the entral interest is normalization and
onuene (as well as other prop erties whih are essentially variations of the former), and most
of the interesting ARSs are always innite. In graphs, lo ops do not use to play an imp ortant role
(sometimes they are simply exluded from analysis), while in ARSs a lo op is just a partiular
ase of yle, whih relates to non-normalization. Also, in graphs the existene of one or more
paths for a pair of given no des ould b e imp ortant, but it not always makes a dierene if one
or more than one exist. It is in general interesting to study prop erties of sp ei no des, or pairs
of no des. Within ARSs, the existene of paths is ruial, although the formulation is dierent,
and the main interest aets all ob jets and not a sp ei one, unless one onsiders sub-ARSs.
Perhaps one of the most signiative dierenes is what onerns to deidability. In graph
theory most interesting problems are deidable, even p olynomial suh as the existene of paths.
Some of them though are NP-omplete, as the existene of hamiltonian yles, some kinds of
sub-graphs, et. In ARSs, sine in general the relevant ases are innite, most interesting
problems are (far b eyond the barrier of the) undeidable, like weak and strong normalization
and onuene. Even restriting some formulations and problems for the Œª-alulus, for some
TRSs and for some STS, many of these problems may remain undeidable.
Given that rewriting paradigms are several and have very dierent presentations, in this
hapter we prop ose a omparison b etween them. Our goal is to nd imp ortant dierenes with
resp et to express iven e s s , to get evidene of the neess ity for the dierent rewriting formalisms,
for identifying dierent lasses of rewriting systems and understand a bit more of them. We
36
2.2 Dening subsystems
will onsider the redution graphs they have for omparing instanes of one formalism with
instanes of another one. The main tehnique to apply will b e to nd dierent invariants whih
one formalism may have as a dierene with others, as we will see.
Among existing rewriting paradigms, we fo us on Abstrat Redution Systems (ARSs), Term
Rewriting Systems (TRSs), Semi Thue Systems (STSs) and Post Canonial Systems (PCSs),
as well as dierent forms of Œª-alulus; and to investigate a numb er of relations b etween these
formulations of rewriting.
2.2 Dening subsystems
There are three main ways of obtaining subsys te ms from rewriting systems:
1. restriting the set of elements
2. restriting set of rules (when they are given), and
3. restriting the replaement (when there is syntax), i.e. rewriting under sp ei p ositions
(as in term or ontext-sensitive rewriting).
The rst restrition always makes sense. The seond one needs to have a alulus, where
rules and a mathing notion are dened. The third one needs to have a alulus and a term
syntax. In this ase we may all sub-alulus to a given subsys te m. All these forms of restrition
an b e ombined and many dierent subsys te ms an b e found in this way. We will desrib e
some examples in setion 2.3.
Denition 2.2.1 Given an ARS A = (A,‚Üía), a sub-ARS B = (B,‚Üíb) of A and a subset
C ‚äÜ A, we say that C is a generator of B if S(C) = B.
We will now haraterize the sub-ARSs of any ARS in an abstrat manner, with some im-
mediate top ologial onseque n  e s , as a relation b etween generators and sub-ARSs.
Lemma 2.2.2 For al l ARSs A = (A,‚Üí) one has the fol lowing (where S is given in Denition
1.3.3):
1. S(‚àÖ) = ‚àÖ
2. for C ‚äÜ A, S(S(C)) = S(C)
3. for C,D ‚äÜ A, S(C ‚à™D) = S(C) ‚à™ S(D) (and then also for nite unions)
4. moreover, for al l families of sets Ai ‚äÜ A, S(‚à™iAi) = ‚à™iS(Ai) (in partiular, for al l B ‚äÜ A,
S(B) = ‚à™x‚ààBS({x}).
37
2.3 Map of the territory: examples
Proof: By denition using reexivity and transitivity of ‚Üí . ‚ú∑
Atually any reexive and transitive relation (here, ‚Üí ) satises the previous result.
The rst three items of Lemma 2.2.2 state that if we all the subsets C of A suh that
S(C) = C losed, then we have a losure operator S and therefore a top ology in the set P(A)
(56), in whih the op en sets are the omplements of all losed sets. Closed sets are all sub-ARSs,
as shown next.
2.2.1 Charaterizing sub-ARSs
There is a lear relation b etween sub-ARSs and the S op erator.
Prop osition 2.2.3 Let A = (A,‚Üí) be an ARSs, and B ‚äÜ A. The fol lowing statements are
equivalent:
1. (B,‚Üí |B) is a sub-ARS of A (where ‚Üí |B is the restrition of the ‚Üí relation to subset
B and B is losed under ‚Üí)
2. there exists C ‚äÜ A suh that B = S(C)
3. B = S(B)
Proof:
‚Ä¢ (3) ‚áí (2) is obvious
‚Ä¢ (2) ‚áí (1) Let x ‚àà B = S(C), suh that x‚Üí y, then y ‚àà S(x) ‚äÜ S(S(C)) = S(C) = B
‚Ä¢ (1) ‚áí (3) B ‚äÜ S(B) is always true. To prove that S(B) ‚äÜ B, let y ‚àà S(B), thus there
exists x ‚àà B suh that x‚Üí y, therefore y ‚àà B, sine losed under ‚Üí implies losed under
‚Üí .
‚ú∑
Therefore the sub-ARSs are the xp oints of the S op erator and also the losed sets of the
top ology.
2.3 Map of the terri to r y: examples
We give here a rst lo ok to subsys te ms, atually, some general examples of sub-ARSs. Given
an ARS A, the following are imp ortant sub-ARSs.
Example 2.3.1 The set SN of strongly normalizing terms of A is a sub-ARS.
38
2.3 Map of the territory: examples
Example 2.3.2 The set of CR elements of A is a sub-ARS, where an element a ‚àà A is CR
when the fol lowing impliation holds: a ‚Üí a1, a ‚Üí a2 then there exists a3 ‚àà A suh that
a1 ‚Üí a3 and a2 ‚Üí a3.
Example 2.3.3 The set WN of weakly normalizing terms of A is a sub-ARS when it is on-
uent.
Example 2.3.4 Given k ‚àà IN, the set of terms a suh that the set S(a)(= {b | a ‚Üí b}) has
ardinal not greater than k, is a sub-ARS.
Example 2.3.5 Given k ‚àà IN, the set of global ly nite terms a, is a sub-ARS, where a is
global ly nite if the set S(a) = {b | a‚Üí b} has nite ardinal.
Example 2.3.6 Given an element b, the set {a ‚àà A | a =‚Üí b}, the lass of ‚Üí-equivalene of
b, is a sub-ARS, where the relation =‚Üí is the smal lest equivalene relation inluding ‚Üí.
Example 2.3.7 Given a term N and k ‚àà IN, the set {a ‚àà A | maxred(a) ‚â§ k}, the terms not
admitting derivations longer than k, is a sub-ARS.
TRSs have interesting examples of sub-ARSs to o.
Example 2.3.8 The set of ground terms of a TRS are a sub-ARS. In general, given a subset
of variables V , the set of al l terms having variables from the set V is a sub-ARS.
Example 2.3.9 If the TRS is orthogonal, the set of al l elements whih admit an innite deriva-
tion, where in every step al l erased subterms are SN ((14), h. 4, se. 4.8), is a sub-ARS.
Now we move to Œª-alulus.
For short, sub-ARSs of Œª-alulus will b e sometimes alled Œª-sub-aluli. In general it is
diult to identify and study all Œª-sub-aluli, or to know how they lo ok like. We will show
examples next.
For appropriate typing systems we have the following
Example 2.3.10 The set of wel l-typed terms, is a sub-ARS. This holds beause of subjet
redution.
Example 2.3.11 Let œÉ be a type and Œì a typing ontext. The set of terms M suh that
Œì ‚ä¢M : œÉ, by subjet redution, is again a sub-ARS.
Example 2.3.8 is also valid for Œª-alulus. Let V ar(M) b e the set of variables that o ur in
the term M . The following is also a family of Œª-sub-aluli.
Example 2.3.12 Let V ‚Ä≤ be a subset of V . Then the set ŒõV ‚Ä≤ = {M ‚àà Œõ | V ar(M) ‚äÜ V
‚Ä≤} is a
Œª-sub-alulus.
39
2.3 Map of the territory: examples
For this example to work, the Barendregt's free-variables onvention must b e used.
The previous examples an also b e extended for most expliit substitution aluli, for instane
Œªx. Also in Œª-aluli √† la De Bruijn similar examples of sub-ARSs an b e given.
Remark 2.3.13 The intersetion of a family of sub-aluli is also a sub-alulus
Proof: It is learly losed under redution sine all the memb ers are. ‚ú∑
Remark 2.3.14 There exist a non-denumerably innite number of dierent Œª-sub-aluli.
Proof: For eah subset of variables V0 ‚äÜ V take the set {M ‚àà Œõ | FV (M) ‚äÜ V0} whih is
learly losed under Œ≤-redution, thus it is a sub-alulus. ‚ú∑
The same applies to TRSs. Anyway there exist more sub-ARSs than those generated in this
manner.
The following example realls ontext-sensitive rewriting (CSR) (61), in whih a Œ£-map (or
replaement map) is joined to the signature indiating, for eah funtion symb ol, the set of its
arguments under whih redutions an b e p erformed. If every Œ£-map is trivial (i.e. the set of
all arguments), we have a TRS as usual.
Example 2.3.15 (61; 62) Given two Context-Sensitive Rewriting Systems (CSRSs) (T1, ¬µ1)
and (T2, ¬µ2) with the same signature, and two Œ£-maps ¬µ1 and ¬µ2 suh that for eah symbol
f , ¬µ1(f) ‚äÜ ¬µ2(f). Then (T1, ¬µ1) is a subsystem of (T2, ¬µ2) (not neessarily a sub-ARS). In
partiular, every CSRS is a subsystem (not neessarily a sub-ARS) of the orresponding TRS.
The CSR paradigm via replaement maps an b e extended to higher-order rewriting, having
as an example Œª-alulus itself. The inlusion or exlusion of rules ¬µ, ŒΩ and Œæ in the denition of
Œ≤-redution (see (11)) is the way of dening a replaement map, whih sp eies if it is p ossible
to redue under a sp ei symb ol (or binder). Œª-alulus without some of these rules has b een
studied, for instane lazy Œª-alulus onsiders redution without the ŒΩ-rule for mo deling lazy
funtional programming.
Example 2.3.16 Real l the ŒªI-alulus (11) whose terms are given by the grammar
M ::= x |MM | Œªx.M where x ‚àà FV (M)
The last lause states that a term should always inlude al l its abstrated variables. The Œ≤-
redution is the same as in lassial Œª-alulus, restrited for this syntax. An important property
for this restrited version of Œª-alulus is that a term is WN i it is SN.
ŒªI is another example of sub-ARS of lassial Œª-alulus, sine the property that every term
should inlude al l its abstrated variables is preserved by redution. And something analogous
ours if one onsiders ŒªI with Œ∑-redution.
40
2.4 Bases as go o d generators
Example 2.3.17 In al l studied aluli with expliit substitution, the assoiated substitution
alulus is indeed a sub-alulus of the ful l alulus, beause its rules are a subset of the ful l set
of rules.
Example 2.3.18 A alulus of expliit substitution is always a proper sub-ARS of its formu-
lation with open terms (also, semi-open terms), that is, the inlusion of term meta-variables in
its syntax.
Example 2.3.19 In Œª-alulus, the set of so al led quasi normal forms, whih are terms of the
form Œªx1x2 . . . xn.xN1N2 . . . Nm where N1, . . . , Nm are arbitrary terms, is a sub-ARS.
Example 2.3.20 In hapter 7 we wil l introdue a onservative extension of Œª-alulus, whih
hand les ase bindings, that is the addition of ase onstruts to Œª-alulus for modeling pattern
mathing. In this rewriting system we wil l work with a notion of dened and undened terms.
Dened terms an only redue to dened terms, and undened terms an only redue to unde-
ned terms. We wil l see that the set of dened quasi-normal forms is a sub-ARS, and so is the
set of undened quasi-normal forms. A remarkable feature is that we wil l have a partition of
quasi normal forms into disjoint sub-ARSs as wil l be given by a Separation Theorem.
2.4 Bases as go o d generator s
When a subsys te m of a system has b een found, an appropriate way of desribing it is to show
how its elements are obtained, for example how an the system b e generated. For this we may
give a generator set. Better yet if that generator is minimal, or non-redundant. Therefore we
prop ose the following Denition.
Denition 2.4.1 Given an ARS A = (A,‚Üía)
1. An ARS-basis, ‚Üí-basis or simply a basis, of A is a minimal generator (in the sense of
‚äÜ).
2. An =-basis of A is a set D suh that for al l M ‚àà A, there exists a unique N ‚àà D suh
that N =A M .
3. An ‚Üê-basis of A is a basis with respet to ‚Üê, the inverse relation of ‚Üí, i.e. a minimal
set D suh that for al l M ‚àà A, there exists N ‚àà D suh that M ‚Üí
A
N .
Sine there are dierent ways of generating the existing subsys te ms, we have a reasonable
notion of basis, that is a minimal set of terms whih an b e rewritten into any term of another
given set of terms. The imp ortane of a basis is that with a minimal numb er of elements one an
haraterize a given sub ARS so it an b e generated in a minimal (non redundant) manner.
41
2.4 Bases as go o d generators
A little insight reveals that for having an ‚Üí-basis one would need exatly one term for eah
‚Üí -branh, whih an b e in general a diult thing to ensure.
It is in general undeidable to know whether some given set of terms is a basis (a ‚Üê-basis, an
=-basis) of a given TRS. Atually, a muh simpler problem, the word problem, is undeidable
(9).
We investigate here the following question: do es there exists a basis for Œª-alulus? In that
ase, how to show one? Whih other well known rewriting systems, suh as term rewriting
systems admit bases? We will prove that Œª-aluli do not admit them, nor most of their
interesting subsets of terms admit them.
Note that if we x an N ‚àà Œõ and let B = Œõ‚àí{M ‚àà Œõ |M =Œ≤ N}, then B is not a basis, sine
S(B) will not ontain N , otherwise there would b e an M ‚àà B suh that M ‚Üí
Œ≤
N . On the other
hand, Œõ itself is learly not a basis. So the problem is to nd one or to prove non-existene of
them. Remark that if one tries to prove the existene of a basis by using Zorn's Lemma, the
pro of fails. We will show that in fat this failure is essential, for there do es not exist a basis of
Œª-alulus. To do it, we rst give the following key prop erty.
Lemma 2.4.2 Let B be a basis of an ARS. Then for al l M ‚àà B, N any term, if N ‚Üí M then
M ‚Üí N .
Proof: If N = M then M ‚Üí N holds trivially. So we may supp ose that N 6= M . Let
N ‚Üí M . Then N /‚àà B, or else by minimality B would not b e a basis, and there exists P ‚àà B
suh that P
+
‚Üí N . Supp ose P 6= M , then P
+
‚Üí M , whih is absurd sine B is a basis. Then
P = M , thus M
+
‚Üí N . ‚ú∑
Remark that the last lemma an b e stated in an equivalent way as: for B a basis of an ARS,
M ‚àà B and N any term, if N
+
‚Üí M then M ‚Üí N .
Now we an prove
Lemma 2.4.3 The set of al l Œª-terms does not have a basis.
Proof: Let B b e a basis of Œª-alulus. Let M ‚àà B, and let u /‚àà FV (M), and let x1, x2, ...
b e all variables. Note that for all i ‚â• 1, (Œªu.M)xi ‚ÜíŒ≤ M ‚àà B. By Lemma 2.4.2 applied to
Œª-alulus, M
+
‚ÜíŒ≤ (Œªu.M)xi, then FV ((Œªu.M)xi) ‚äÜ FV (M), so xi ‚àà FV (M) for all i ‚â• 1,
whih is learly absurd. Therefore bases do not exist. ‚ú∑
This lemma is interesting in itself, stating that the set of Œª-alulus terms annot b e generated
from the left in a minimal way.
We also have
Lemma 2.4.4 The set of al l Œª-terms does not have a ‚Üê-basis.
42
2.4 Bases as go o d generators
Proof: If B is an ‚Üê-basis of Œª-alulus, take for example T = (Œªx.xxx) and M = TT , thus
there exists a unique N ‚àà B suh that M ‚Üí
Œ≤
N . Sine learly S(T i) = {T j| j ‚â• i} then
again taking M ‚Ä≤ = T i+1 there should exist a unique j ‚â• 2 suh that M ‚Ä≤ ‚Üí
Œ≤
T j, but then
M ‚Üí
Œ≤
T i
+
‚ÜíŒ≤ T
j
, whih ontradits the minimality of B. Therefore there is no suh a set. ‚ú∑
As a onseque n  e , we have that for all C ‚äÇ Œõ, if S(C) = Œõ, then there exist M,N ‚àà C suh
that M 6= N and M ‚Üí
Œ≤
N . This is immediate by Denition 2.4.1 and Lemma 2.4.3. In other
words, a set of generators of Œª-alulus will neess arily have some redundane.
Corollary 2.4.5 The set ŒõdB of al l de Bruijn terms in Œª-alulus √† la de Bruijn does not have
a basis nor an ‚Üê-basis either.
Proof: One way is using Lemma 2.4.3 and the isomorphism b etween the de Bruijn and the
lassial formulations. Another pro of is using the notion of free variable in the de Bruijn setting
and a similar argument. ‚ú∑
Moreover, the question whether Œª-alulus has an =-basis is immediately answered in the
armative using the axiom of hoie, by seleting a representative for eah equivalene lass.
This holds for every ARS.
We ould also rep eat the question and obtain the same answer for most Œª-alulus variations,
suh as expliit substitution aluli, and also for sp ei subsys te ms over those aluli. But in
hapter 8 we will see that, for instane, Œõ is not even a generator of the entire set of terms of
some expliit substitution aluli.
Remark that in ŒªI alulus (see Example 2.3.16) all abstrations should inlude the abstrated
variable, thus the argument in Lemma 2.4.3 is no longer valid, sine when u /‚àà FV (M), Œªu.M
is not a valid ŒªI term, and this was used in the pro of of Lemma 2.4.3.
We also have the following remarks onerning the existene or non-existene of bases and
‚Üê-bases.
Remark 2.4.6 The set NF of normal forms in any rewriting system has a basis (itself ) whih
is also a ‚Üê-basis.
Remark 2.4.7 The set SN of strongly normalizing terms in Œª-alulus does not have a basis
but it has a ‚Üê-basis. Take the set of normal forms.
Remark 2.4.8 The set WN of weakly normalizing terms in Œª-alulus does not have a basis
but it has a ‚Üê-basis. Take again the set of normal forms.
43
2.5 Relationships b etween rewriting paradigms
2.5 Relati o nshi ps b etween rewriti ng paradig ms
We now pro eed with the omparisons b etween the rewriting paradigms mentioned so far.
Reall that a ground TRS is a TRS where all rules have ground terms as lhs and rhs. In other
words, it is a TRS where no variables are present in the rules.
When omparing one TRS with another, sometimes one lo oks at their entire redution graph
and sometimes the redution graph of their ground terms.
To start, it is known -and easy to show- that every STS is isomorphi to the restrition to
ground terms of a linear TRS with only unary symb ols and a onstant (14). Also, remark
that every ground TRS is isomorphi to a subsys te m of an STS (p erhaps not to the full STS),
by o ding the rst order terms and rules with appropriate strings in an straightforward way
inluding auxiliary symb ols suh as omma and parenthesis.
In this setion we will show strit inlusions of lasses of rewriting systems involving STSs,
TRSs, PCSs and ARSs, and sometimes these relations involve the identiation of a system
with a subsys te m (p ossibly a sub-ARS) of the other one.
From now onwards in the present hapter, unless expliitly stated, all TRSs, STSs, et. are
onsidered nitary, i.e. with a nite signature and a nite numb er of rules.
2.5.1 Main relations
We show and disuss the main relations among formalisms.
Remark 2.5.1 If (A,‚ÜíA) and (B,‚ÜíB) are isomorphi ARSs, then the funtions n
‚ÜíA
p and
n‚ÜíBp oinide, and so do the funtions n
‚ÜíA
s and n
‚ÜíB
s .
Proof: Straightforward. ‚ú∑
The onverse is not true, as it happ ens in graph theory: take on one side a iruit of n ‚â• 6
elements, and on the other two disjoint iruits of n ‚àí k and k elements resp etively, with
3 ‚â§ k ‚â§ n‚àí 3. Both sides will not b e isomorphi.
Lemma 2.5.2 In every (sub-ARS of an) STS, for every string t, np(t) and ns(t) are nite.
Proof: We prove the assertion for ns. Sine eah rule onsists of a pair of strings, then given
any string x there is just a nite numb er of substrings, then a nite numb er of redexes (given
that there are nite rules), thus the numb er of p ossible sues s ors is nite.
The ase of np is analogous sine one an take the inverse STS, i.e. that in whih every rule
is the onverse of a rule of the original STS, thus the role of sues s or and predees s ors are
symmetrial.
Finally, the prop erty still holds when onsidering arbitrary sub-ARSs sine in any sub-ARS
b oth quantities never inrease. ‚ú∑
44
2.5 Relationships b etween rewriting paradigms
The following Lemma states that np and ns are not symmetrial.
Lemma 2.5.3 There exist (linear) TRSs where, for some term t, np(t) is innite.
Proof: Take the TRS given by the signature Œ£ = {a0, f 2} and the rule f(x, y) ‚Üí x.
Then taking the term t = a, one has that ‚Üí‚àí1 (a) inludes the set
{f(a, a), f(a, f(a, a)), f(a, f(a, f(a, a))), ...}
thus np(a) = ‚àû. ‚ú∑
We prove now that there are TRSs (with other go o d prop erties) whih are not isomorphi
to any sub-ARS of any STS. Pro of is as follows.
Corollary 2.5.4 There exist (linear and anonial) TRSs whih are not isomorphi to (any
sub-ARS of ) any STS.
Proof: Take the ab ove TRS whih is anonial and use Remark 2.5.1 and Lemmas 2.5.2 and
2.5.3, then there is no STS nor sub-ARS of an STS whih is isomorphi to this TRS. ‚ú∑
Nevertheless, every TRS is almost isomorphi to a sub-ARS of an augmented STS where
rules an have variables denoting substrings (see subsetion 2.5.3 b elow).
Now, the question: is every ARS isomorphi to some TRS? is answered negatively by an
almost trivial syntatial argument in the following
Remark 2.5.5 There are ARSs whih are not isomorphi to any TRS.
Proof: Reall that every TRS is FB (sine a term an only have nite redexes b eause of its
nite length), and there are ARSs whih do not fulll this ondition, so we are done. ‚ú∑
Other way to prove the assertion is using a ardinality argument. Given any subset S ‚äÜ IN ,
let AS = (IN ‚à™ {‚àó},‚Üí) b e the ARS where ‚Üí is dened by: x‚Üí y i y = x + 1 or x ‚àà S and
y = ‚àó. Then for every pair of sets S, S ‚Ä≤ ‚äÜ IN suh that S 6= S ‚Ä≤, AS is learly not equal (even
not isomorphi) to AS‚Ä≤ . This shows that there exist a non-denumerable numb er of ARSs, when
the numb er of TRSs (with nite rules) is denumerable.
As a side note, onsider multi-sorted signatures (9). Every n-sorted TRS is isomorphi to a
subsys te m (not neess arily a sub-ARS) of a one-sorted TRS whih uses only one onstant and
one binary symb ol. The idea of the pro of relies on o ding and urriation for representing
symb ols of higher-arities.
45
2.5 Relationships b etween rewriting paradigms
2.5.2 Finite branhing
The previous question subsists, now in the following form: is every ARS, satisfying FB and/or
BD, isomorphi to some TRS? The answer is still negative, as we shall see in the next orollary
(no matter if one is restrited to ground TRSs or not). We distinguish two kinds of redution
graphs: total (whih inludes all terms) and ground (whih inludes only the ground terms).
Prop osition 2.5.6 If the graph of al l ground terms of a TRS is innite, then it is isomorphi
to some proper sub-graph.
Proof: Let A b e a TRS, let G = (V,E) b e the graph of A ground terms, with V and E
innite. There must exist in A a signature symb ol, say f , with arity n ‚â• 1 (otherwise the TRS
would have a nite graph sine the term set would b e nite). Take t1, . . . , tn‚àí1 some n‚àí1 xed
(p ossibly zero) A ground terms. Then onsider the graph Gf =def (f(V ), f(E)) where f(V ) =
{f(t, t1, . . . , tn‚àí1) | t ‚àà V } and f(E) = {(f(d, t1, . . . , tn‚àí1), f(e, t1, . . . , tn‚àí1)) | (d, e) ‚àà E}. It is
easy to see that Gf is isomorphi to G, and it is learly not all of G nor empty. ‚ú∑
A anonial example is a omplete innite binary tree, where every branh is isomorphi to
the entire tree. It is the graph of the (ground) TRS with unary symb ols f and g, onstant a
and rules a‚Üí f(a) and a‚Üí g(a).
Note also that the graph of ground terms and the graph of a ground TRS are not the same
thing. The prop erty is suient but not neess ary for the non-existene of a TRS whose graph
is a given graph.
Thus Prop osition 2.5.6 states that all interesting TRSs have this  fratal prop erty: the
entire ob jet is in some sense equal to some of its parts. (In App endix A we disuss  fratal
ob jets built from L-systems, whih are in some way a variant of the STSs.)
Considering the entire graph of ground and non-ground terms, the same prop erty holds
almost trivially. Aording to the pro of, if there were no symb ol with arity ‚â• 1, the only no des
are given by the set of all variables and onstants. Sine variables are denumerably innite,
this set is isomorphi to a prop er subset. We will not onsider this graph from now onwards.
But remark that this would not have worked if instead of onsidering sub-graphs one onsiders
sub-ARSs. For instane, taking the TRS with unique rule a‚Üí f(a, a), let (B,‚ÜíB) b e a prop er
sub-ARS. Then a /‚àà B (otherwise B = A) therefore every term (no de in the graph) has degree
greater or equal than 2 (this is b eause the only no de with degree 1 is the term a). Thus
(B,‚ÜíB) annot b e isomorphi to (A,‚ÜíA).
The fat is that sub-ARSs are a less omplex (more restritive) substruture than sub-graphs,
i.e. there are muh more sub-graphs than sub-ARSs.
Corollary 2.5.7 There are ARSs whih are BD (hene FB) and whih are not isomorphi to
any TRS (either ground or not).
46
2.5 Relationships b etween rewriting paradigms
Proof: As an example take the following ARS A = (IN ‚à™{‚àó},‚Üí) where u‚Üí v i u ‚àà IN and,
either v = u+ 1, or u = 1 and v = ‚àó. Then it an b e proved that the graph of A has no prop er
sub-graph isomorphi to itself, thus by the previous Prop osition this ARS is not isomorphi to
any TRS. ‚ú∑
2.5.3 Post anonial systems
Now we move the attention to Post anonial systems (PCS), as dened in the preliminaries
hapter as well as in (14). From now onwards all PCSs will b e nite, that is, with a nite
set of rules and a nite alphab et. Like with TRSs, a PCS is left-linear (right-linear, linear)
if its rules do not rep eat variables (at the lhs, at the rhs, on neither side). In priniple there
is no restrition in having a lhs with only a single variable, ontrarily to what TRSs require.
Isomorphism b etween PCSs as well as b etween a PCS and another given rewriting system is
dened as exp eted onsidering the redution graphs. The FB and BD prop erties are also
dened as usual for PCSs.
We have:
Lemma 2.5.8 Every PCS is FB.
Proof: Every string may math a given PCS rule in a nite numb er of ways, and there is a
nite numb er of rules to apply for eah p ossible redex given by a substring. ‚ú∑
Lemma 2.5.9 There are BD ARSs whih are not isomorphi to any PCS.
Proof: Using a ardinality argument. There exist a non denumerable numb er of BD ARSs
while the numb er of PCSs (with nite rules and symb ols) is denumerably innite. ‚ú∑
Lemma 2.5.10 There are (linear) PCSs whih are not isomorphi to any TRS (thus, in par-
tiular, there are (linear) PCSs whih are not isomorphi to any STS).
Proof: Take the PCS with alphab et {a} and rules
a‚Üí aa
a‚Üí aaa
aaax‚Üí aaaax
It is lear that the redution graph of the ground terms of this linear PCS (whih is the same
as the one in the pro of of Corollary 2.5.7) is innite and it is not isomorphi to any prop er
subgraph, then by Prop osition 2.5.6 it is not the redution graph of a TRS. ‚ú∑
Note that the idea of the pro of of Lemma 2.5.10 do es not work if one takes an alphab et of
more than one harater (the graph would b e muh more omplex).
The literature also onsiders TRSs mo dulo asso iativity. One relation b etween PCSs and
TRSs an b e made expliit as follows.
47
2.5 Relationships b etween rewriting paradigms
Prop osition 2.5.11 Every PCS is isomorphi to some sub-ARS of some TRS modulo asso-
iativity.
Proof: (Sketh) Take a TRS with alphab et equal to the one of the PCS plus a sp eial symb ol
$ whih will b e used to delimit the strings during rewriting. And for eah PCS rule
u1 . . . um ‚Üí v1 . . . vm
onsider the following TRS rule:
c(u1, c(u2, c(. . . um))) ‚Üí c(v1, c(v2, c(. . . vm)))
where ui and vj might b e onstants or variables, and c(‚Ä¢, ‚Ä¢) is taken to b e an asso iative binary
funtion symb ol. It is almost straightforward to verify that every redution step in the PCS an
b e mimiked by a step in the sub-ARS given by the TRS restrited to the terms representing
strings delimited by $. ‚ú∑
Prop osition 2.5.12 Every TRS is isomorphi to a sub-ARS of some PCS.
Proof: (Sketh) Every term t of the TRS an b e represented by a string s of the PCS whose
alphab et is dened to inlude a symb ol for eah funtion symb ol of the TRS (no matter whih
arity they have), to whih the auxiliary symb ols (, ) and , (omma) are added. Note that the
PCS will inlude ill-formed strings whih do not orresp ond to any term of the TRS. Let L b e
the set of legal strings so formed. Take the PCS sub-ARS S(L). It is learly isomorphi to
the TRS. ‚ú∑
2.5.4 Summary
As a morale, sine our goal was to justify the existene of the dierent rewriting formalisms,
or to show that they are not isomorphi to eah other, the previous statements prove the
Prop osition 2.5.13 The fol lowing inlusions of lasses of rewriting systems hold and are
proper:
‚Ä¢ BD STS ‚äÇ STS ‚äÇ TRS / PCS ‚äÇ FB ARS
‚Ä¢ BD TRS ‚äÇ TRS ‚äÇ FB ARS
‚Ä¢ BD ARS ‚äÇ FB ARS ‚äÇ ARS
Note that most aluli with expliit substitution √† la de Bruijn an b e formulated as TRSs,
therefore they are examples whih rely in this hierarhy.
Although part of the ab ove hierarhy omes from intuition, the question whether it is a
simple, appropriate, p edagogial or researh-oriented lassiation of rewriting paradigms will
p ossibly remain op en.
48
2.6 Conlusion
2.6 Conlusio n
We have revisited the dierent rewriting paradigms: ARSs, TRSs, STSs and PCSs, lo oking
for reasonable relations b etween them. The omparison of express ive p ower was made by using
their redution graphs. The relations involve sub-ARSs and quotients mo dulo equivalene. In
the future we exp et to ontinue this study, to treat other relations, and to lo ok for other p ossible
ombinations of ARSs and haraterizations of dierent rewriting systems. Further researh
inludes to distinguish ground from non-ground TRSs, left-linearity and right-linearity, and the
relationship with rational languages (84), with CSRSs and with graph-rewriting formulations
(78).
We have found that bases, with its intuitive and natural meaning, do not exist in rewriting
formalisms suh as Œª-alulus; not for the set of all terms, nor for the set of WN terms, nor
for the set of SN terms, among other, whih gives some evidene that these sets are indeed
interesting.
We treat simulation questions in this thesis, although not with resp et to any pair of for-
malisms. In a future approah we will onsider a omparison not only based on the existene
of isomorphisms b etween formalisms but on the existene of simulations b etween them, i.e. the
p ossibility of translating derivations from one to another, no matter how many rewriting steps
are done.
One goal of this hapter was to explore relations b etween the dierent rewriting formalisms,
in order to nd relations among them. Appliations of these relations ould b e to deide whether
a pro of tehnique from one formalism may b e arried to another one. Having said that, it is
worth studying the relationship b etween dierent rewriting formalisms, in order to ompare
them and to b e able to selet one or other for express ing omputing p ower.
ARSs are general enough in rewriting formulations, although they have little struture in
general. Nevertheless they are the ob jets of a artesian ategory, where the sub-ARSs are the
sub-ob jets, and they form a omplete lattie. As far as the author knows, no work has b een
done in studying sub-ARSs, ARSs pro duts and ARSs of funtions.
As a future task it remains to prove or disprove that there are (go o d) TRSs whih are not
isomorphi to any PCS. The pro of of this fat seems to b e more involved than the pro ofs we
presented in this hapter.
We started and motivated the treatment of systems and subsys te ms here. In the subseq u e nt
hapters many imp ortant subsys te ms of several ARSs are analyzed, in partiular interesting
sets of terms of dierent Œª-aluli having termination-related, onuene-related and typing-
related prop erties, as we shall see. To illustrate most of the problems we work mainly with the
ŒªœÖ-alulus of expliit substitution sine it has b een aepted as a alulus with minimal rules
and go o d prop erties.
49
2.6 Conlusion
Figure 2.1: S(SKK)(S(SKK))(S(SKK)(S(SKK))) after 70 left-most steps
Figure 2.2: (S(SSSS(SSSS)(SS)))S(SSS) after 65 left-most steps
50
Chapter 3
A Œª-alulus without substitution: expliit
substitution over pure terms
To the question whether we need the intuition for solving mathematial problems,
it must be answered that in this ase the language itself gives the neessary intuition
... The proess of alulus atual ly provides that intuition.  L. Wittgenstein,
Tratatus Logio-Philosophius
ABSTRACT In this hapter we study a Œª-alulus with names and without substitutions,
involving only four rules, whih somehow result from emb edding Œªx-alulus terms into lassial
Œª-alulus terms. We show the relative soundness and onuene and disuss some of its
advantages. We also prop ose two versions using de Bruijn indies, and prove that the main
prop erties are preserved .
3.1 Intro dution
This hapter revisits what is p ossibly the simplest Œª-alulus and without substitutions at all
(27; 66; 77) (and (73), whih we ould not aess). The alulus has variable names and uses
a minimal set of rules. We present some fats ab out suh an a priori simplisti alulus over
the set of lassial Œª-terms. We an say that it has no substitution at all, although another
view indiates that it inorp orates expliit substitution in some manner over the pure terms
themselves. But this expliit substitution eliminates the need of formal (impliit, simultaneous)
substitution. One of the main dierenes when omparing to other aluli of expliit substitu-
tion is that the Œ≤-rule is divided into four rules, and instead of rules propagating substitution,
this b o okkeeping is assigned in some way to the Œ≤-redution itself in its present form, thus the
non-neessity of a substitution op erator. Moreover, without this substitution op erator, some
go o d prop erties of Œª-alulus as well as other aluli of expliit substitution are preserved ,
51
3.2 The -alulus
whereas others are not. In some sense this alulus an b e seen as an interesting alternative to
Œªx.
We also make some onsiderations on the implementation of this alulus. One of the features
of suh a alulus is that it needs not to b e orret (sound) with resp et to the Œ≤-redution in
the lassial sense. That is, a derivation starting and ending in pure terms may not hold in
Œª-alulus, but this will not b e an inonvenient if, given a term, the alulus inludes a way to
obtain its normal form when it exists.
We also ontribute with a prop osal of two versions of this alulus using de Bruijn indies,
to whih we transfer all the go o d prop erties of the initial alulus. Those versions an b e seen
as a starter's study in expliit substitution √† la de Bruijn, sine, as we will see throughout the
hapter, it an b e develop ed indep endently of the urrent literature ab out expliit substitution.
The plan of the hapter is as follows. Setion 3.2 gives the syntax and rules of Œª‚àÖ, the
prop osed alulus. In subsetion 3.2.1 we prove the simulation of the Œ≤-redution and the
relative soundness of the rules. Subsetion 3.2.2 addresses the onuene. In subsetion 3.2.3
we disuss the relation with the Œªx alulus of expliit substitution. Subsetion 3.2.4 treats
typing onsiderations. In setion 3.3 we present a de Bruijn version of Œª‚àÖ. Subsetion 3.4
shows the simulation and relative soundness for the de Bruijn setting. Subsetion 3.4.1 treats
its onuene. In setion 3.5 we intro due another de Bruijn version and study its prop erties.
Subsetion 3.5.1 treats the simply typ ed version of this alulus. Soundness, simulation and
preservation of strong normalization (PSN) are disussed in setion 3.6. Finally, in setion 3.7
we summarize our onlusion and identify future lines of work.
In what follows, when we mention Œªx atually we will mean Œªx‚àí.
3.2 The Œª‚àÖ-alulus
We b egin by intro duing the Œª‚àÖ-alulus. Its syntax and rules are given next.
Denition 3.2.1 The Œª‚àÖ-alulus is a Œª-alulus with names, over the same syntax of lassial
Œª-alulus. Its four rules are:
(Œªx.x)M ‚ÜíŒªvar1 M
(Œªx.y)M ‚ÜíŒªvar2 y x 6= y
(Œªx.PQ)M ‚ÜíŒªapp (Œªx.P )M((Œªx.Q)M)
(Œªx.(Œªy.P ))M ‚ÜíŒªŒª Œªy.(Œªx.P )M x 6= y
Let us denote with NFŒ≤ the set of Œ≤-normal forms, with NFŒª‚àÖ the set of Œª‚àÖ-normal forms,
with WNŒ≤ the set of Œ≤-weakly normalizing terms, with WNŒª‚àÖ the set of Œª‚àÖ-weakly normalizing
terms, with SNŒ≤ the set of Œ≤-strongly normalizing terms and with SNŒª‚àÖ the set of Œª‚àÖ-strongly
normalizing terms.
52
3.2 The -alulus
In the last rule we assume the usual free variable onvention.
The reader may note an analogy with the rules of the substitution alulus asso iated to the
Œªx-alulus of expliit substitution (see the preliminaries). Having said this, we will use Œªx as
a referene for omparison, but we do not need to transfer its prop erties to our alulus. The
b enet of ahieving this is that we will have a alulus over the pure (lassial) terms without
the need of a losure op erator and with less rules than Œªx.
Apart from b eing inspired in Œªx, the rst 3 rules resemble resp etively the eets of the
ombinatory logi rules for I, K and S (11). The fourth rule has no ounterpart in ombinatory
logi.
As with lassial Œª-alulus we have
Remark 3.2.2 If M ‚ÜíŒª‚àÖ N then FV (N) ‚äÜ FV (M).
Proof: By indution on M . ‚ú∑
Another feature is that in Œª‚àÖ there is no lear distintion b etween the Œ≤-redution and the
asso iated substitution alulus. With this formulation of a alulus we intend to show how
with just lassial Œª-terms the same work of an expliit substitution alulus is p erformed (sine
it has ollapsed with the Œ≤-rule). In some sense, this is a alulus without substitutions (and
of ourse this means not to use any losure op erator).
Our pro ofs for Œª‚àÖ do not use Œªx prop erties. We prove our results indep endently, using only
lassial results from Œª-alulus.
3.2.1 Simulation and soundness
We now show that our alulus enjoys simulation of the Œ≤-redution.
Prop osition 3.2.3 (Simulation) If M ‚ÜíŒ≤ N then M
+
‚ÜíŒª‚àÖ N . Furthermore, if M
‚àó
‚ÜíŒ≤ N
then M
‚àó
‚ÜíŒª‚àÖ N .
Proof: By indution on the p osition of the redex.
‚Ä¢ if the redution o urs at the ro ot, we have that M = (Œªx.U)V ‚ÜíŒ≤ U{x‚Üê V }, then the
following ases may o ur:
 U = x, then M ‚ÜíŒªvar1 V = U{x‚Üê V }
 U = y, then M ‚ÜíŒªvar2 y = U{x‚Üê V }
 U = PQ, then M ‚ÜíŒªapp (Œªx.P )V ((Œªx.Q)V )
+
‚Üí
IH
Œª‚àÖ
P{x‚Üê V }Q{x‚Üê V }
= U{x‚Üê V }
 U = Œªy.P , then M ‚ÜíŒªŒª Œªy.(Œªx.P )V
+
‚Üí
IH
Œª‚àÖ
Œªy.P{x‚Üê V } = U{x‚Üê V }
53
3.2 The -alulus
‚Ä¢ if the redution is internal, then the following ases may o ur:
 PQ‚ÜíŒ≤ P
‚Ä≤Q with P ‚ÜíŒ≤ P
‚Ä≤
, then by IH P
+
‚ÜíŒª‚àÖ P
‚Ä≤
thus PQ
+
‚ÜíŒª‚àÖ P
‚Ä≤Q
 PQ‚ÜíŒ≤ PQ
‚Ä≤
with Q‚ÜíŒ≤ Q
‚Ä≤
, analogous to the previous ase
 Œªx.P ‚ÜíŒ≤ Œªx.P
‚Ä≤
with P ‚ÜíŒ≤ P
‚Ä≤
, then by IH P
+
‚ÜíŒª‚àÖ P
‚Ä≤
thus Œªx.P
+
‚ÜíŒª‚àÖ Œªx.P
‚Ä≤
The seond statement follows immediately by indution on the length of the derivation. ‚ú∑
It is interesting that this alulus is not sound, sine it do es not satisfy that when M ‚ÜíŒª‚àÖ N
then M
‚àó
‚ÜíŒ≤ N . This happ ens b eause the right-hand side of the Œªapp-rule (resp etively, the
ŒªŒª-rule) in general is not a Œ≤-redut of the left-hand side. But it do es satisfy relative soundness
(Lemma 3.2.4 and Corollary 3.2.8).
Lemma 3.2.4 (Soundness with resp et to =Œ≤) If M
‚àó
‚ÜíŒª‚àÖ N then M =Œ≤ N
Proof: We prove that if M ‚ÜíŒª‚àÖ N then M =Œ≤ N , by indution on the p osition of the redex.
Then the result will follow by indution on the length of the
‚àó
‚ÜíŒª‚àÖ-derivation.
‚Ä¢ if the redution o urs at the ro ot, then the following ases may o ur:
 the redution is (Œªx.x)M ‚ÜíŒªvar1 M , then learly (Œªx.x)M ‚ÜíŒ≤ M
 the redution is (Œªx.y)M ‚ÜíŒªvar2 y, then learly (Œªx.y)M ‚ÜíŒ≤ y
 the redution is (Œªx.PQ)M ‚ÜíŒªapp (Œªx.P )M((Œªx.Q)M), then
(Œªx.PQ)M ‚ÜíŒ≤ P{x‚ÜêM}Q{x‚ÜêM} and
(Œªx.P )M((Œªx.Q)M)
‚àó
‚ÜíŒ≤ P{x‚ÜêM}Q{x‚ÜêM} so we are done
 the redution is (Œªx.(Œªy.P ))M ‚ÜíŒªŒª Œªy.(Œªx.P )M , then
(Œªx.(Œªy.P ))M ‚ÜíŒ≤ Œªy.P{x ‚Üê M} and Œªy.(Œªx.P )M ‚ÜíŒ≤ Œªy.P{x ‚Üê M} so again we
are done.
‚Ä¢ if the redution is internal, then the following ases may o ur:
 PQ‚ÜíŒª‚àÖ P
‚Ä≤Q with P ‚ÜíŒª‚àÖ P
‚Ä≤
, then by IH P =Œ≤ P
‚Ä≤
thus PQ =Œ≤ P
‚Ä≤Q
 PQ‚ÜíŒª‚àÖ PQ
‚Ä≤
with Q‚ÜíŒª‚àÖ Q
‚Ä≤
, analogous to the previous ase
 Œªx.P ‚ÜíŒª‚àÖ Œªx.P
‚Ä≤
with P ‚ÜíŒª‚àÖ P
‚Ä≤
, then by IH P =Œ≤ P
‚Ä≤
thus Œªx.P =Œ≤ Œªx.P
‚Ä≤
‚ú∑
3.2.2 Conuene
A natural question is: given that the Œ≤-redution is split into four rules, do es one lose the
onuene of the lassial Œª-alulus? The answer is given by the following Corollary. Note
that onuene of Œª‚àÖ is not an immediate onseque n  e of b eing orthogonal, i.e. left-linear and
54
3.2 The -alulus
without ritial pairs, in its higher-order formulation (14; 81). The alulus is learly left-
linear but, unlike Œª-alulus and ombinatory logi, it has ritial pairs, thus we annot use the
higher-order result that orthogonality implies onuene. The same observation applies for the
aluli intro dued later in this hapter.
Corollary 3.2.5 (Conuene of Œª‚àÖ) If M
‚àó
‚ÜíŒª‚àÖ M1 and M
‚àó
‚ÜíŒª‚àÖ M2 then there exists M3
suh that M1
‚àó
‚ÜíŒª‚àÖ M3 and M2
‚àó
‚ÜíŒª‚àÖ M3.
Proof: Let M
‚àó
‚ÜíŒª‚àÖ M1 and M
‚àó
‚ÜíŒª‚àÖ M2, then by Lemma 3.2.4 M =Œ≤ M1 and M =Œ≤ M2,
then M1 =Œ≤ M2, whih by the onuene of Œª-alulus implies that there exists M3 suh that
M1
‚àó
‚ÜíŒ≤ M3 and M2
‚àó
‚ÜíŒ≤ M3. By Prop osition 3.2.3, M1
‚àó
‚ÜíŒª‚àÖ M3 and M2
‚àó
‚ÜíŒª‚àÖ M3. ‚ú∑
Corollary 3.2.6 The relations =Œ≤ and =Œª‚àÖ oinide.
Proof: Conseque n  e of Prop osition 3.2.3 and Lemma 3.2.4. ‚ú∑
We show that the set of Œª‚àÖ-normal forms oinide with the set of normal forms of the lassial
Œª-alulus.
Lemma 3.2.7 (Œª‚àÖ-normal forms) NFŒ≤ = NFŒª‚àÖ
Proof: If M /‚àà NFŒª‚àÖ then there is a Œª‚àÖ-redex, whih is learly also a Œ≤-redex, thus M /‚àà NFŒ≤.
If M /‚àà NFŒ≤ then there is a subterm (Œªx.U)V ‚äÜ M whih is a Œ≤-redex. Reasoning over U ,
whether it is a variable, an appliation or an abstration, in either ase we have that (Œªx.U)V
is also a Œª‚àÖ-redex, thus M /‚àà NFŒª‚àÖ . ‚ú∑
As a onseque n  e we have
Corollary 3.2.8 (Soundness with resp et to normal forms) If M
‚àó
‚ÜíŒª‚àÖ N and N ‚àà NFŒª‚àÖ
then M
‚àó
‚ÜíŒ≤ N
Proof: If M
‚àó
‚ÜíŒª‚àÖ N ‚àà NFŒª‚àÖ , by Lemma 3.2.4 M =Œ≤ N . By Lemma 3.2.7, N ‚àà NFŒ≤ thus
M
‚àó
‚ÜíŒ≤ N . ‚ú∑
The ab ove Corollary states that we exp et sound alulations when reahing normal forms.
As another nie onseque n  e we have
Corollary 3.2.9 1. WNŒ≤ = WNŒª‚àÖ
2. SNŒ≤ ‚äÇ WNŒª‚àÖ
Proof:
55
3.2 The -alulus
1. If M
‚àó
‚ÜíŒ≤ N ‚àà NFŒ≤ then M ‚àà WNŒª‚àÖ sine NFŒ≤ = NFŒª‚àÖ and M
‚àó
‚ÜíŒª‚àÖ N (Prop osition
3.2.3). If M
‚àó
‚ÜíŒª‚àÖ N ‚àà NFŒª‚àÖ then by Corollary 3.2.8 M
‚àó
‚ÜíŒ≤ N and again use that
NFŒ≤ = NFŒª‚àÖ .
2. Beause SNŒ≤ ‚äÇ WNŒ≤ and using item (1).
‚ú∑
3.2.3 Relation with Œªx
In this subsetion we exhibit a mapping whih will show that Œª‚àÖ b ehaves almost as Œªx.
Denition 3.2.10 We dene the mapping [‚Ä¢] : Œõx‚Üí Œõ as fol lows:
[x] = x
[MN ] = [M ][N ]
[Œªx.M ] = Œªx.[M ]
[M < x = N >] = (Œªx.[M ])[N ]
Remark 3.2.11 1. [‚Ä¢] is surjetive and non-injetive
2. for every M ‚àà Œõx, [M ] = M i M ‚àà Œõ (i.e. only pure Œªx-terms map to themselves)
3. in partiular, for every M ‚àà Œõx, [[M ]] = [M ]
Proof: Straightforward. ‚ú∑
The following Prop osition states that [‚Ä¢] is an homomorphism from Œªx-alulus to Œª‚àÖ-alulus,
whih restrited to the set Œõ is the identity1 .
Atually we already have an homomorphism from Œªx to Œª‚àÖ, namely x(‚Ä¢), i.e. to take the
x-normal form. Beause M
‚àó
‚ÜíŒªx N implies (see (15)) x(M)
‚àó
‚ÜíŒ≤ x(N) and then by simulation
of the Œ≤-redution we have x(M)
‚àó
‚ÜíŒª‚àÖ x(N), thus x(‚Ä¢) is an homomorphism whih also leaves
unhanged the pure terms. We simply show that [‚Ä¢] is another suh homomorphism.
Prop osition 3.2.12 (Simulation of Œªx) Let M,N ‚àà Œõx.
1. If M ‚ÜíŒªx N then [M ]
‚àó
‚ÜíŒª‚àÖ [N ]
2. If M
‚àó
‚ÜíŒªx N then [M ]
‚àó
‚ÜíŒª‚àÖ [N ]
Proof:
1
Without this extra requirement, or an equivalent one, trivial homomorphisms always exist suh as a
onstant funtion.
56
3.2 The -alulus
1. By indution on the p osition of the redex.
‚Ä¢ if the redution o urs at the ro ot, then the following ases may o ur:
 the redution is (Œªx.M)N ‚ÜíBeta M < x = N >, then [(Œªx.M)N ] = (Œªx.[M ])[N ]
= [M < x = N >]
 the redution is (PQ) < x = N >‚ÜíApp P < x = N > Q < x = N >, then
[(PQ) < x = N >] = (Œªx.[P ][Q])[N ] ‚ÜíŒªapp (Œªx.[P ])[N ]((Œªx.[Q])[N ])
= [(Œªx.P )N((Œªx.Q)N)]
 the redution is (Œªy.M) < x = N >‚ÜíLam Œªy.M < x = N >, then
[(Œªy.M) < x = N >] = (Œªx.(Œªy.[M ]))[N ]) ‚ÜíŒªŒª Œªy.(Œªx.[M ])[N ] = [Œªy.(Œªx.M)N ]
 the redution is x < x = N >‚Üívar1 N , then [x < x = N >] = (Œªx.x)[N ]
‚ÜíŒªvar1 [N ]
 the redution is y < x = N >‚Üívar2 y, then [y < x = N >] = (Œªx.y)[N ]
‚ÜíŒªvar2 y = [y]
‚Ä¢ if the redution is internal, then the following ases may o ur:
 PQ ‚ÜíŒªx P
‚Ä≤Q with P ‚ÜíŒªx P
‚Ä≤
, then by IH [P ]
‚àó
‚ÜíŒª‚àÖ [P
‚Ä≤] thus [PQ] = [P ][Q]
‚àó
‚ÜíŒª‚àÖ
[P ‚Ä≤][Q] = [P ‚Ä≤Q]
 PQ‚ÜíŒªx PQ
‚Ä≤
with Q‚ÜíŒªx Q
‚Ä≤
, analogous to the previous ase
 Œªx.P ‚ÜíŒªx Œªx.P
‚Ä≤
with P ‚ÜíŒªx P
‚Ä≤
, then by IH [P ]
‚àó
‚ÜíŒª‚àÖ [P
‚Ä≤] thus [Œªx.P ] =
Œªx.[P ]
‚àó
‚ÜíŒª‚àÖ Œªx.[P
‚Ä≤] = [Œªx.P ‚Ä≤]
 P < x = N >‚ÜíŒªx P
‚Ä≤ < x = N > with P ‚ÜíŒªx P
‚Ä≤
, then by IH [P ]
‚àó
‚ÜíŒª‚àÖ [P
‚Ä≤] thus
[P < x = N >] = (Œªx.[P ])[N ]
‚àó
‚ÜíŒª‚àÖ (Œªx.[P
‚Ä≤])[N ] = [P ‚Ä≤ < x = N >]
 P < x = N >‚ÜíŒªx P < x = N
‚Ä≤ > with N ‚ÜíŒªx N
‚Ä≤
, then by IH [N ]
‚àó
‚ÜíŒª‚àÖ [N
‚Ä≤] thus
[P < x = N >] = (Œªx.[P ])[N ]
‚àó
‚ÜíŒª‚àÖ (Œªx.[P ])[N
‚Ä≤] = [P < x = N ‚Ä≤ >]
2. Using the previous item and indution on the length of the derivation.
‚ú∑
In this way we an emb ed Œªx onto Œª‚àÖ. It is worth mention that we did not nd, whether
it exists, a variant of this alulus whih satises the stronger prop erty: M ‚ÜíŒªx N then
[M ]
+
‚ÜíŒª‚àÖ [N ].
3.2.4 Typing and PSN
Without details we remark that Œª‚àÖ admits simple typing in the same way as lassial Œª-
alulus. But we will see with a simple example that Œª‚àÖ do es not satisfy PSN. That is, there
are terms M ‚àà Œõ whih are SN in Œª-alulus but may admit an innite derivation in Œª‚àÖ by
means of these four rules, atually the appliation of rules Œªapp and ŒªŒª may alternate innitely
57
3.3 A de Bruijn alulus based on
often. The example of innite derivation, as p ointed out in (66), b egins with a term of the form
(Œªx.(Œªy.P )Q)R, and roughly lo oks like follows:
(Œªx.(Œªy.P )Q)R ‚ÜíŒªapp ((Œªx.(Œªy.P ))R)(. . . )
‚ÜíŒªŒª (Œªy.(Œªx.P )R)(. . . )
‚ÜíŒªapp ((Œªy.(Œªx.P ))(. . . ))((. . . )(. . . ))
‚ÜíŒªŒª (Œªx.(Œªy.P )(. . . ))(. . . )
‚ÜíŒªapp ((Œªx.(Œªy.P ))(. . . ))((. . . )(. . . ))
‚ÜíŒªŒª (Œªy.(Œªx.P )(. . . ))(. . . )
. . .
where the appliation of b oth rules alternate and o ur at the left-most p ositions. Therefore,
even when we annot partition the Œª‚àÖ-rules set into a (Beta)-rule on one side and a substitution
alulus on the other, it is immediate that PSN do es not hold, sine in this example the meta-
variables P,Q and R an b e instantiated in suh a way that the ab ove term is SN in lassial
Œª-alulus, for example P = Q = R = Œªx.x. As a side note, this also shows that the left-most
redution strategy is not standard in Œª‚àÖ, i.e. do es not yield a normal form when it exists,
ontrarily to the ase of the lassial Œª-alulus.
It might b e thought that it is the prie of not having in the syntax a distintion b etween
losure and abstration, thus the expliit substitution idea b eomes useful, and it an b e seen as
some way to avoid this phenomenon (although this has not b een the reason for its intro dution
from a historial p oint of view; see the onlusion).
Sine PSN do es not hold, it is not plausible to prove strong normalization of simply typ ed
terms by transferring the problem to lassial Œª-alulus. The most that one an guarantee is
that a typ ed term is in WNŒ≤(= WNŒª‚àÖ). This holds b eause of the inlusion SNŒ≤ ‚äÇ WNŒª‚àÖ
(Corollary 3.2.9) and the fat that simply typ ed terms in Œª-alulus are SN. We will see a more
detailed treatment of typing in subsetion 3.5.1.
3.3 A de Bruijn alulus based on Œª‚àÖ
In this setion we study a de Bruijn version of Œª‚àÖ, over the set of pure de Bruijn terms. This
alulus is motivated by the fat that the problem of Œ±-onversion from lassial Œª-alulus
remains. This is not the only p ossibility of suh a alulus as we shall see. We intro due here
the exhange operators ek, to b e explained b elow.
Denition 3.3.1 Our de Bruijn formulation wil l have the same syntax of the (pure) de Bruijn
terms, and the fol lowing rules
(Œª1)a ‚ÜídbŒªvar1 a
(Œª(m+ 1))a ‚ÜídbŒªvar2 m
(Œªab)c ‚ÜídbŒªapp (Œªa)c((Œªb)c)
(Œª(Œªa))c ‚ÜídbŒªŒª Œª(Œªe1(a))œï0(c)
58
3.4 Simulation and soundness of
where œï0(‚Ä¢) = U
2
0 (‚Ä¢) is the usual (impliit, simultaneous) updating operator (see the prelimi-
naries), and ek(‚Ä¢) is the (k, k + 1)-exhange operator, dened by the equalities
ek(m) =
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
k + 1 if m = k
k if m = k + 1
m if m 6= k, k + 1
ek(Œªa) = Œªek+1(a)
ek(ab) = ek(a)ek(b)
We wil l al l Œª‚àÖdB the preeding alulus over de Bruijn terms.
Thus Œª‚àÖdB seems to b e the simplest of all de Bruijn aluli of  expliit substitution (although
the op erators œïk and ek are not inluded in its syntax). In the following setions we address
the main prop erties of this alulus, and we will see that the essential prop erties of Œª‚àÖ are
preserved .
Let us denote with NFŒª‚àÖdB the set of Œª‚àÖdB-normal forms, with WNŒª‚àÖdB the set of Œª‚àÖdB-weakly
normalizing terms and with SNŒª‚àÖdB the set of Œª‚àÖdB-strongly normalizing terms.
3.4 Simulati o n and soundness of Œª‚àÖdB
Sine mappings b etween Œª‚àÖ and Œª‚àÖdB do not seem at hand, we plan to show the simulation
and relative soundness using the lassial isomorphism as it is done for lassial Œª-alulus with
resp et to the de Bruijn formulation. We remark that the pro ofs may not use pro edures similar
to those on setion 3.2.1.
Therefore we will now translate the emb edding b etween aluli with names to an emb edding
b etween de Bruijn aluli. We reall the isomorphism b etween lassial Œª-alulus and the Œª-
alulus √† la de Bruijn, given by the funtions w[x1,...,xn](‚Ä¢) : Œõ ‚Üí ŒõdB and u[x1,...,xn](‚Ä¢) : ŒõdB ‚Üí
Œõ (see the preliminaries). If the ontext makes it lear, we will not write as a subsript the
ordered set of free variables [x1, . . . , xn] of the term to whih w applies to. We will only use the
equality w(u(a)) = a and not the other equivalene in the following treatment.
Lemma 3.4.1 For every M ‚àà Œõ, we have that
ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) = w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M).
Proof: By indution on M .
‚Ä¢ M = x, then ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) = ek(k) = k + 1 = w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M)
(x 6= y).
‚Ä¢ M = y, then ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) = ek(k + 1) = k = w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M).
‚Ä¢ M = xm 6= x, y, then ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) = ek(m) = m = w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M).
59
3.4 Simulation and soundness of
‚Ä¢ M = Œªz.P , then ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) = ek(Œªw[z,x1,...,xk‚àí1,x,y,xk+2,...,xn](P )) =
Œªek+1(w[z,x1,...,xk‚àí1,x,y,xk+2,...,xn](P )) =IH Œªw[z,x1,...,xk‚àí1,y,x,xk+2,...,xn](P ) =
w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M).
‚Ä¢ M = PQ, then ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](M)) =
ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](P )) ek(w[x1,...,xk‚àí1,x,y,xk+2,...,xn](Q)) =IH
w[x1,...,xk‚àí1,y,x,xk+2,...,xn](P ) w[x1,...,xk‚àí1,y,x,xk+2,...,xn](Q) =
w[x1,...,xk‚àí1,y,x,xk+2,...,xn](M).
‚ú∑
Lemma 3.4.2 For every M ‚àà Œõ, œï0(w[x1,...,xn](M)) = w[y,x1,...,xn](M)
if y /‚àà FV (M).
Proof: See (43) for a pro of of the more general prop erty
U ik(w[x1,...,xk,xk+i,...,xn](M)) = w[x1,...,xn](M) for every term M provided k ‚â• 0, i ‚â• 1,
n ‚â• k + i and xk+1, . . . , xk+i‚àí1 /‚àà FV (M). Here the interesting ase is
œï0(w[x1,...,xn](xi)) = œï0(i) = i+ 1 = w[y,x1,...,xn](xi). ‚ú∑
Lemma 3.4.3 Let M,N ‚àà Œõ.
1. if M ‚ÜíŒª‚àÖ N then w(M) ‚ÜíŒª‚àÖdB w(N)
2. if M
+
‚ÜíŒª‚àÖ N then w(M)
+
‚ÜíŒª‚àÖdB w(N)
Proof:
1. By indution on the p osition of the redex.
‚Ä¢ if the redution o urs at the ro ot, then the following ases may o ur:
 the redution is (Œªx.x)N ‚ÜíŒªvar1 N , then w((Œªx.x)N) = (Œª1)w(N)
‚ÜídbŒªvar1 w(N)
 the redution is (Œªx.y)N ‚ÜíŒªvar2 y, then w((Œªx.y)N)
= (Œª(m+ 1))w(N) ‚ÜídbŒªvar1 m = w(y)
 the redution is (Œªx.PQ)N ‚ÜíŒªapp (Œªx.P )N((Œªx.Q)N), then
w[x1,...,xn]((Œªx.PQ)N) = (Œªw[x,x1,...,xn](P )w[x,x1,...,xn](Q)) w[x1,...,xn](N)
‚ÜídbŒªapp (Œªw[x,x1,...,xn](P ))w[x1,...,xn](N)((Œªw[x,x1,...,xn](Q))w[x1,...,xn](N))
= w[x1,...,xn]((Œªx.P )N((Œªx.Q)N)).
 the redution is (Œªx.(Œªy.P ))N ‚ÜíŒªŒª Œªy.(Œªx.P )N , then
w[x1,...,xn]((Œªx.(Œªy.P ))N) = (Œª(Œªw[y,x,x1,...,xn](P )))w[x1,...,xn](N)
‚ÜídbŒªŒª Œª(Œªe1(w[y,x,x1,...,xn](P ))œï0(w[x1,...,xn](N))
= Œª(Œªw[x,y,x1,...,xn](P ))w[y,x1,...,xn](N)) (by Lemmas 3.4.1 and 3.4.2)
= w[x1,...,xn](Œªy.(Œªx.P )N).
60
3.4 Simulation and soundness of
‚Ä¢ if the redution is internal, the pro of pro eeds in a straightforward way.
2. By item (1) and indution on the length of the derivation.
‚ú∑
As a onseque n  e we have that Œª‚àÖdB also veries simulation of the Œ≤dB-redution.
Prop osition 3.4.4 Let a, b be de Bruijn terms. If a‚ÜíŒ≤dB b then a
+
‚ÜíŒª‚àÖdB b
Proof: Supp ose a ‚ÜíŒ≤dB b. Then by the isomorphism, u(a) ‚ÜíŒ≤ u(b). By simulation of the
Œ≤-redution, u(a)
+
‚ÜíŒª‚àÖ u(b). By Lemma 3.4.3 (2), w(u(a))
+
‚ÜíŒª‚àÖdB w(u(b)). Sine w and u are
inverses of eah other, the result follows. ‚ú∑
Again relative soundness holds.
Lemma 3.4.5 (Soundness with resp et to =Œ≤dB ) If a
‚àó
‚ÜíŒª‚àÖdB b then a =Œ≤dB b
Proof: Similar to Lemma 3.2.4. ‚ú∑
3.4.1 Conuene of Œª‚àÖdB
As b efore, we have the onuene of Œª‚àÖdB (on losed terms) and the subseq u e nt results.
Corollary 3.4.6 (Conuene of Œª‚àÖdB) If a
‚àó
‚ÜíŒª‚àÖdB a1 and a
‚àó
‚ÜíŒª‚àÖdB a2 then there exists a3
suh that a1
‚àó
‚ÜíŒª‚àÖdB a3 and a2
‚àó
‚ÜíŒª‚àÖdB a3.
Proof: Similar to Lemma 3.2.5. ‚ú∑
Corollary 3.4.7 The relations =Œ≤dB and =Œª‚àÖdB oinide.
Proof: Similar to Corollary 3.2.6 ‚ú∑
Lemma 3.4.8 (Œª‚àÖdB-normal forms) NFŒ≤dB = NFŒª‚àÖdB
Proof: Similar to Lemma 3.2.7. ‚ú∑
Corollary 3.4.9 (Soundness with resp et to normal forms) If M
‚àó
‚ÜíŒª‚àÖdB N and N ‚àà
NFŒª‚àÖdB then M
‚àó
‚ÜíŒ≤dB N
Proof: Similar to Corollary 3.2.8. ‚ú∑
Corollary 3.4.10 1. WNŒ≤dB = WNŒª‚àÖdB
2. SNŒ≤dB ‚äÇ WNŒª‚àÖdB
Proof: Similar to Corollary 3.2.9. ‚ú∑
61
3.5 and as expliit op erators
3.5 œï and e as explii t op erator s
Even when the initial motivation of Œª‚àÖ was to get rid of substitution, we an go bak and
also formulate a de Bruijn version of Œª‚àÖ by b eing expliit in the denition of U
2
k and ek, that
is we an inlude them in the term syntax and the alulus itself may have rules for one or
-b etter- b oth of them. The resulting alulus is the following.
Denition 3.5.1 The Œª‚àÖS-alulus has the fol lowing syntax:
a ::= n | (aa) | (Œªa) | œï‚Ä≤k(a) | e
‚Ä≤
j(a) k ‚â• 0, j ‚â• 1, n ‚â• 1
and the fol lowing rules:
(Œª1)a ‚ÜísŒªvar1 a
(Œª(m+ 1))a ‚ÜísŒªvar2 m
(Œªab)c ‚ÜísŒªapp (Œªa)c((Œªb)c)
(Œª(Œªa))c ‚ÜísŒªŒª Œª(Œªe
‚Ä≤
1(a))œï
‚Ä≤
0(c)
œï‚Ä≤k(m) ‚Üíœïvar
{
m+ 1 if m > k
m if m ‚â§ k
œï‚Ä≤k(Œªa) ‚ÜíœïŒª Œªœï
‚Ä≤
k+1(a)
œï‚Ä≤k(ab) ‚Üíœïapp œï
‚Ä≤
k(a)œï
‚Ä≤
k(b)
e‚Ä≤k(m) ‚Üíevar
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
k + 1 if m = k
k if m = k + 1
m if m 6= k, k + 1
e‚Ä≤k(Œªa) ‚ÜíeŒª Œªe
‚Ä≤
k+1(a)
e‚Ä≤k(ab) ‚Üíeapp e
‚Ä≤
k(a)e
‚Ä≤
k(b)
The set of terms wil l be denoted by ŒõdBs. The set of Œª‚àÖS-normal forms wil l be denoted by
NFŒª‚àÖS
Remark that we use œï‚Ä≤k and e
‚Ä≤
j (with the primes) in order to distinguish them from last
setion's œïk and ej impliit op erators, whih we will b e still using.
Denition 3.5.2 We denote with ‚àÖS the alulus formed by rules (œïvar), (œïŒª), (œïapp), (evar), (eŒª),
(eapp), i.e. rules governing the propagation of the operators œï‚Ä≤k and e
‚Ä≤
j.
In the rest of this subsetion we will study the prop erties of Œª‚àÖS.
Lemma 3.5.3 The ‚àÖS-alulus is SN
Proof: Standard, using the reursive path order metho d (9; 14) taking e‚Ä≤j, œï
‚Ä≤
k >> Œª,@. ‚ú∑
62
3.5 and as expliit op erators
Lemma 3.5.4 The ‚àÖS-alulus is WCR
Proof: There are no ritial pairs b etween rules (œïvar), (œïŒª), (œïapp), (evar), (eŒª), (eapp). ‚ú∑
Remark 3.5.5 The set of ‚àÖS-normal forms is equal to ŒõdB.
Proof: Every term with an o urrene of the œï‚Ä≤k or e
‚Ä≤
j op erators will math some of the
‚àÖS-rules. ‚ú∑
Corollary 3.5.6 The ‚àÖS-alulus is CR
Proof: By Lemmas 3.5.3 and 3.5.4, and Newman's Lemma. ‚ú∑
We denote with ‚àÖS(a) the unique ‚àÖS-normal form of a term a ‚àà Œõ‚àÖS.
The rest of the subsetion will prove the onuene of Œª‚àÖS i.e. the full alulus.
Lemma 3.5.7 1. ‚àÖS(Œªa) = Œª‚àÖS(a)
2. ‚àÖS(ab) = ‚àÖS(a)‚àÖS(b)
Proof:
1. Œªa
‚àó
‚Üí‚àÖS Œª‚àÖS(a) whih is learly an ‚àÖS-normal form. By CR, ‚àÖS(Œªa) = Œª‚àÖS(a).
2. Analogous to item (1): ab
‚àó
‚Üí‚àÖS ‚àÖS(a)‚àÖS(b) whih is learly an ‚àÖS-normal form. By CR,
‚àÖS(ab) = ‚àÖS(a)‚àÖS(b).
‚ú∑
Now we state some simple simulation lemmas for pure terms and sp ei rules.
Lemma 3.5.8 (simulation of œïk) For every a ‚àà ŒõdB and k ‚â• 0, œï
‚Ä≤
k(a)
‚àó
‚Üí‚àÖS œïk(a).
Proof: By indution on a.
‚Ä¢ if a = m then learly œï‚Ä≤k(m)
‚àó
‚Üíœïvar œïk(m) in all ases
‚Ä¢ if a = Œªb then œï‚Ä≤k(Œªb) ‚Üí‚àÖS Œªœï
‚Ä≤
k+1(b)
‚àó
‚Üí
IH
‚àÖS
Œªœïk+1(b) = œïk(Œªb)
‚Ä¢ if a = bc then œï‚Ä≤k(bc) ‚Üí‚àÖS œï
‚Ä≤
k(b)œï
‚Ä≤
k(c)
‚àó
‚Üí
IH
‚àÖS
œïk(b)œïk(c) = œïk(bc)
‚ú∑
Lemma 3.5.9 (simulation of ej) For every a ‚àà ŒõdB and j ‚â• 1, e
‚Ä≤
j(a)
‚àó
‚Üí‚àÖS ej(a).
Proof: By indution on a, very similar to Lemma 3.5.8. ‚ú∑
63
3.5 and as expliit op erators
Then the main simulation follows:
Prop osition 3.5.10 For al l a, b ‚àà ŒõdB, if a
‚àó
‚ÜíŒª‚àÖdB b then a
‚àó
‚ÜíŒª‚àÖS b.
Proof: We prove that if a ‚ÜíŒª‚àÖdB b then a
‚àó
‚ÜíŒª‚àÖS b, by indution on the p osition of the redex.
Then the result will follow by indution on the length of the
‚àó
‚ÜíŒª‚àÖdB -derivation.
1. if the redution takes plae at the ro ot, we have the following ases:
(a) (Œª1)c‚ÜídBŒªvar1 c, then trivially (Œª1)c‚ÜísŒªvar1 c
(b) (Œª(m+ 1))c‚ÜídBŒªvar2 m, then trivially (Œª(m+ 1))c‚ÜísŒªvar2 m
() (Œª(Œªa))c‚ÜídBŒªŒª Œª(Œªe1(a))œï0(c), then
(Œª(Œªa))c‚ÜísŒªŒª Œª(Œªe
‚Ä≤
1(a))œï
‚Ä≤
0(c)
‚àó
‚ÜíŒª‚àÖS Œª(Œªe1(a))œï0(c) by Lemmas 3.5.8 and 3.5.9
(d) (Œªab)c‚ÜídbŒªapp (Œªa)c((Œªb)c), then trivially (Œªab)c‚ÜísŒªapp (Œªa)c((Œªb)c)
2. if the redution is internal, the result follows easily by IH
‚ú∑
Reall that for a ‚àà ŒõdB, œïk(a) ‚àà ŒõdB for all k ‚â• 0 and ej(a) ‚àà ŒõdB for all j ‚â• 1. We still
need the following lemmata to prepare the territory for Pro jetion.
Lemma 3.5.11 ((‚àÖS, œï
‚Ä≤
k)-interhange) For every a ‚àà ŒõdBs and k ‚â• 0, ‚àÖS(œï
‚Ä≤
k(a)) = œïk(‚àÖS(a)).
Proof: œï‚Ä≤k(a)
‚àó
‚Üí‚àÖS œï
‚Ä≤
k(‚àÖS(a))
‚àó
‚Üí‚àÖS œïk(‚àÖS(a)) (by Lemma 3.5.8).
The last term is in ŒõdB hene an ‚àÖS-normal form, therefore ‚àÖS(œï
‚Ä≤
k(a)) = œïk(‚àÖS(a)). ‚ú∑
Lemma 3.5.12 ((‚àÖS, e
‚Ä≤
j)-interhange) For every a ‚àà ŒõdBs and j ‚â• 1, ‚àÖS(e
‚Ä≤
j(a)) = ej(‚àÖS(a)).
Proof: Similar to Lemma 3.5.11. e‚Ä≤j(a)
‚àó
‚Üí‚àÖS e
‚Ä≤
j(‚àÖS(a))
‚àó
‚Üí‚àÖS ej(‚àÖS(a)) (by Lemma 3.5.9).
Again the last term is in ŒõdB hene an ‚àÖS-normal form, therefore ‚àÖS(e
‚Ä≤
j(a)) = ej(‚àÖS(a)). ‚ú∑
The following four lemmas, whih will b e used later on, are valid for pure terms.
Lemma 3.5.13 ((œï, œï)-interhange) For every a ‚àà ŒõdB and k ‚â• 0, œï0(œïk(a)) = œïk+1(œï0(a)).
Proof: œïi(œïk+i(a)) = œïk+i+1(œïi(a)) for all i ‚â• 0 is proved by indution on a. ‚ú∑
Lemma 3.5.14 ((œï, e)-interhange) For every a ‚àà ŒõdB and j ‚â• 1, œï0(ej(a)) = ej+1(œï0(a)).
Proof: œïi(ej+i(a)) = ej+i+1(œïi(a)) for all i ‚â• 0 is proved by indution on a. ‚ú∑
Lemma 3.5.15 ((e, œï)-interhange) For every a ‚àà ŒõdB and k ‚â• 0, e1(œïk+2(a)) = œïk+2(e1(a)).
Proof: ei+1(œïk+i+2(a)) = œïk+i+2(ei+1(a)) for all i ‚â• 0 is proved by indution on a. ‚ú∑
64
3.5 and as expliit op erators
Lemma 3.5.16 ((e, e)-interhange) For every a ‚àà ŒõdB and j ‚â• 1, e1(ej+2(a)) = ej+2(e1(a)).
Proof: ei+1(ej+i+2(a)) = ej+i+2(ei+1(a)) for all i ‚â• 0 is proved by indution on a. ‚ú∑
The pro ofs of the last four lemmas are by a routine indution on a. We need the results for
i = 0, but sine b oth œï(‚Ä¢) and e(‚Ä¢) inrease their indies while traversing the Œª binder, those
general statements are needed for the indution to work.
Anyway they may admit intuition. For example, in Lemma 3.5.16, sine j ‚â• 1, 1 and j + 2
dier in 2 or more, therefore at the index level b oth exhanges e1 and ej+2 do not overlap with
eah other, i.e. one is not aeted by the eet of the other (in a pratial setting they might
b e exeuted in parallel).
Lemma 3.5.17 (Redution under œïk and under ej) Let a, b ‚àà ŒõdB.
1. Let k ‚â• 0. If a‚ÜíŒª‚àÖdB b then œïk(a)
‚àó
‚ÜíŒª‚àÖdB œïk(b).
2. Let j ‚â• 1. If a‚ÜíŒª‚àÖdB b then ej(a)
‚àó
‚ÜíŒª‚àÖdB ej(b).
Proof:
1. By indution on the p osition of the redex. If the redution is at the ro ot then we have the
following ases:
‚Ä¢ for the redution (Œª1)c‚ÜíŒª‚àÖdB c, œïk((Œª1)c) = (Œªœïk+1(1))œïk(c) = (Œª1)œïk(c)
‚ÜíŒª‚àÖdB œïk(c).
‚Ä¢ for the redution (Œª(m + 1))c ‚ÜíŒª‚àÖdB m, œïk((Œª(m + 1))c) = (Œªœïk+1(m + 1))œïk(c). In
ase m ‚â§ k, the latter equals (Œª(m + 1))œïk(c) ‚ÜíŒª‚àÖdB m = œïk(m). Else, m > k and
the term in the right equals (Œª(m+ 2))œïk(c) ‚ÜíŒª‚àÖdB m+ 1 = œïk(m).
‚Ä¢ for the redution (Œªcd)e‚ÜíŒª‚àÖdB (Œªc)e((Œªd)e), œïk((Œªcd)e) = (Œªœïk+1(c)œïk+1(d))œïk(e)
‚ÜíŒª‚àÖdB (Œªœïk+1(c))œïk(e)((Œªœïk+1(d))œïk(e)) = œïk((Œªc)e((Œªd)e)).
‚Ä¢ for the redution (ŒªŒªc)d‚ÜíŒª‚àÖdB Œª(Œªe1(c))œï0(d), œïk((ŒªŒªc)d) = (ŒªŒªœïk+2(c))œïk(d)
‚ÜíŒª‚àÖdB Œª(Œªe1(œïk+2(c)))œï0(œïk(d))
= Œª(Œªœïk+2(e1(c)))œïk+1(œï0(d)) (by Lemmas 3.5.15 and 3.5.13)
= œïk(Œª(Œª(e1(c))œï0(d))).
If the redution is internal, it is straightforward.
2. By indution on a. If the redution is at the ro ot then we have the following ases:
‚Ä¢ for the redution (Œª1)c‚ÜíŒª‚àÖdB c, ej((Œª1)c) = (Œªej+1(1))ej(c) = (Œª1)ej(c) ‚ÜíŒª‚àÖdB ej(c).
65
3.5 and as expliit op erators
‚Ä¢ for the redution (Œª(m+ 1))c‚ÜíŒª‚àÖdB m, ej((Œª(m+ 1))c) = (Œªej+1(m+ 1))ej(c).
In ase m < j, the latter equals (Œª(m+ 1))ej(c) ‚ÜíŒª‚àÖdB m = ej(m).
Else if m = j, the term in the right equals (Œª(m+ 2))ej(c) ‚ÜíŒª‚àÖdB m+ 1 = ej(m).
Else if m = j + 1 (thus m ‚â• 2), the term in the right equals (Œªem(m+ 1))ej(c)
= (Œªm)ej(c) ‚ÜíŒª‚àÖdB m‚àí 1 = ej(m) sine j = m‚àí 1.
Else m > j + 1 and the term in the right equals (Œª(m+ 1))ej(c) ‚ÜíŒª‚àÖdB m = ej(m).
‚Ä¢ for the redution (Œªcd)e‚ÜíŒª‚àÖdB (Œªc)e((Œªd)e), ej((Œªcd)e) = (Œªej+1(c)ej+1(d))ej(e)
‚ÜíŒª‚àÖdB (Œªej+1(c))ej(e)((Œªej+1(d))ej(e)) = ej((Œªc)e((Œªd)e)).
‚Ä¢ for the redution (ŒªŒªc)d‚ÜíŒª‚àÖdB Œª(Œªe1(c))œï0(d), ej((ŒªŒªc)d) = (ŒªŒªej+2(c))ej(d)
‚ÜíŒª‚àÖdB Œª(Œªe1(ej+2(c)))œï0(ej(d))
= Œª(Œªej+2(e1(c)))ej+1(œï0(d)) (by Lemmas 3.5.16 and 3.5.14)
= ej(Œª(Œª(e1(c))œï0(d))).
If the redution is internal, it is straightforward.
‚ú∑
Then the Pro jetion Lemma omes out.
Prop osition 3.5.18 (Pro jetion Lemma) Let a, b ‚àà ŒõdBs.
If a
‚àó
‚ÜíŒª‚àÖS b then ‚àÖS(a)
‚àó
‚ÜíŒª‚àÖdB ‚àÖS(b).
Proof: By indution on the p osition of the redex.
If the redution is at the ro ot, the interesting ase is:
(Œª(Œªc))d‚ÜísŒªŒª Œª(Œªe
‚Ä≤
1(c))œï
‚Ä≤
0(d), then, by Lemma 3.5.7,
‚àÖS((Œª(Œªc))d) = (Œª(Œª‚àÖS(c)))‚àÖS(d) ‚ÜídBŒªŒª Œª(Œªe1(‚àÖS(c)))œï0(‚àÖS(d))
= Œª(Œª‚àÖS(e
‚Ä≤
1(c)))‚àÖS(œï
‚Ä≤
0(d)) (by Lemmas 3.5.11 and 3.5.12)
= ‚àÖS(Œª(Œªe
‚Ä≤
1(c))œï
‚Ä≤
0(d)) (by Lemma 3.5.7).
If the redution is internal in cd ‚ÜíŒª‚àÖS c
‚Ä≤d, cd ‚ÜíŒª‚àÖS cd
‚Ä≤
or Œªc ‚ÜíŒª‚àÖS Œªc
‚Ä≤
, use Lemma 3.5.7 (1)
and (2).
If the redution is internal in œï‚Ä≤k(c) ‚ÜíŒª‚àÖS œï
‚Ä≤
k(c
‚Ä≤), then ‚àÖS(œï
‚Ä≤
k(c)) = œïk(‚àÖS(c)) (by Lemma 3.5.11)
‚àó
‚ÜíŒª‚àÖdB œïk(‚àÖS(c
‚Ä≤)) (using the IH and Lemma 3.5.17 (1))
= ‚àÖS(œï
‚Ä≤
k(c
‚Ä≤)) (by Lemma 3.5.11 again).
If the redution is internal in e‚Ä≤j(c) ‚ÜíŒª‚àÖS e
‚Ä≤
j(c
‚Ä≤), then analogously
‚àÖS(e
‚Ä≤
j(c)) = ej(‚àÖS(c)) (by Lemma 3.5.12)
‚àó
‚ÜíŒª‚àÖdB ej(‚àÖS(c
‚Ä≤)) (using the IH and Lemma 3.5.17 (2))
= ‚àÖS(e
‚Ä≤
j(c
‚Ä≤)) (by Lemma 3.5.12 again). ‚ú∑
66
3.5 and as expliit op erators
Corollary 3.5.19 (Conuene of Œª‚àÖS) Let a, b, c ‚àà ŒõdBs. If a
‚àó
‚ÜíŒª‚àÖS b and a
‚àó
‚ÜíŒª‚àÖS c then
there exists d ‚àà ŒõdBs suh that b
‚àó
‚ÜíŒª‚àÖS d and c
‚àó
‚ÜíŒª‚àÖS d.
Proof: Supp ose a
‚àó
‚ÜíŒª‚àÖS b and a
‚àó
‚ÜíŒª‚àÖS c. Then by Prop osition 3.5.18 ‚àÖS(a)
‚àó
‚ÜíŒª‚àÖdB ‚àÖS(b) and
‚àÖS(a)
‚àó
‚ÜíŒª‚àÖdB ‚àÖS(c). By the onuene of Œª‚àÖdB (Corollary 3.4.1), there exists d ‚àà ŒõdB suh
that ‚àÖS(b)
‚àó
‚ÜíŒª‚àÖdB d and ‚àÖS(c)
‚àó
‚ÜíŒª‚àÖdB d. By Simulation (Prop osition 3.5.10), ‚àÖS(b)
‚àó
‚ÜíŒª‚àÖS d and
‚àÖS(c)
‚àó
‚ÜíŒª‚àÖS d. Using this, and that b
‚àó
‚Üí‚àÖS ‚àÖS(b) and c
‚àó
‚Üí‚àÖS ‚àÖS(c), we are done. ‚ú∑
It turns out that Œª‚àÖS is sound with resp et to Œª‚àÖdB (it is a onseque n  e of the Pro jetion
Lemma), and like the latter, it is relatively sound with resp et to Œ≤dB. In brief
Corollary 3.5.20 If a, b ‚àà ŒõdB and a
‚àó
‚ÜíŒª‚àÖS b then:
1. a
‚àó
‚ÜíŒª‚àÖdB b, and (therefore) a =Œ≤dB b
2. if b ‚àà NFŒª‚àÖdB then a
‚àó
‚ÜíŒ≤dB b.
Proof:
1. Immediate using Prop osition 3.5.18 and Remark 3.5.5.
2. Immediate by item (1) and CR of Œ≤dB.
‚ú∑
3.5.1 Typ ed Œª‚àÖS
Typ es and environments are dened for all the de Bruijn aluli disussed in this hapter,
as follows. We deal with sequent-base d typing, and reall the syntax and typing rules for the
simply typ ed Œª-alulus in de Bruijn notation. The typ es we will treat are generated as rst
order terms from a set of basi typ es T with the binary typ e op erator ‚Üí. Environments will
b e lists of typ es.
The system L1 (see the preliminaries) is also appliable to Œª‚àÖdB, where go o d results follow.
We will not fo us on this system, but will go diretly to simply typ ed Œª‚àÖS. Therefore we add
b elow the rules to handle typ es for the new terms of Œª‚àÖS in a Curry style as follows. Remark
that we are not marking the abstrations with typ es as it is done in other syntatial variations
of typing systems (whih will b e used in another hapter).
Denition 3.5.21 The typing system LS is dened with the same set of types, and as typing
rules the set of L1 rules of simply-typed lassial Œª-alulus plus the fol lowing two typing rules:
67
3.5 and as expliit op erators
(LS‚àí œï)
A1, . . . , An ‚ä¢ a : B
A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ œï‚Ä≤k(a) : B
n ‚â• k ‚â• 0
(LS‚àí e)
A1, . . . , An ‚ä¢ a : B
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e‚Ä≤j(a) : B
n ‚â• j ‚â• 1
From the logial p oint of view, the typing rule (LS‚àíœï) represents a weakening rule, sine it
allows the addition of an extra typ e in an environment (asso iated to an extra hyp othesis, but
in the prop er plae). And the typing rule (LS‚àí e) represents an exhange rule, sine it allows
the swap b etween two onseutive typ es in an environment.
We will say a term a ‚àà ŒõdBs is typ ed, or typable (in LS) i there exist an environment Œì
and a typ e A suh that Œì ‚ä¢LS a : A.
The following exp ete d results tell ab out the relation b etween b oth typing systems, typ e
preservation and normalization of typable terms.
Lemma 3.5.22 (Typ e preservation) Let a ‚àà ŒõdB. Then Œì ‚ä¢L1 a : A i Œì ‚ä¢LS a : A.
Proof: Can b e done by a simple indution on a. ‚ú∑
This typing system admits a Generation Lemma for terms of all forms: m, ab, Œªa, œï‚Ä≤k(a) and
e‚Ä≤j(a). (See (12) for these results in the lassial setting.)
Lemma 3.5.23 (Generation Lemma for Œª‚àÖS) 1. Let n ‚â• 0,m ‚â• 1. If A1, . . . , An ‚ä¢ m :
B, then m ‚â§ n and B = Am.
2. If A1, . . . , An ‚ä¢ ab : B, then there exists a type A suh that A1, . . . , An ‚ä¢ a : A ‚Üí B and
A1, . . . , An ‚ä¢ b : A.
3. If A1, . . . , An ‚ä¢ Œªa : C, then there exist types A and B suh that C = A ‚Üí B and
A,A1, . . . , An ‚ä¢ a : B.
4. Let n ‚â• k ‚â• 0. If A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ œï
‚Ä≤
k(a) : B, then A1, . . . , An ‚ä¢ a : B.
5. Let n ‚â• j ‚â• 1. If A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e
‚Ä≤
j(a) : B, then
A1, . . . , An ‚ä¢ a : B.
Proof: All the items are proved by indution on the typing derivation. (The pro ofs of items
(1), (2) and (3) are analogous to the lassial ones.) ‚ú∑
Prop osition 3.5.24 (Sub jet redution) Let a, b ‚àà ŒõdBs. If a
‚àó
‚ÜíŒª‚àÖS b and Œì ‚ä¢LS a : A,
then Œì ‚ä¢LS b : A.
68
3.5 and as expliit op erators
Proof: If a ‚ÜíŒª‚àÖS b and Œì ‚ä¢LS a : A, then Œì ‚ä¢LS b : A an b e proved by indution on a. We
illustrate with the following ases:
1. ro ot redution of the rule œï‚Ä≤k(m) ‚Üíœïvar m where m ‚â§ k. We have:
A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ œï
‚Ä≤
k(m) : B
where n ‚â• k ‚â• 0. By generation, A1, . . . , An ‚ä¢ m : B. Again by generation, B = Am.
Then, sine m ‚â§ k, A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ m : Am and we are done.
2. ro ot redution of the rule œï‚Ä≤k(m) ‚Üíœïvar m+ 1 where m > k. We have:
A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ œï
‚Ä≤
k(m) : B
where n ‚â• k ‚â• 0. By generation, A1, . . . , An ‚ä¢ m : B. Again by generation, B = Am.
Then, sine m > k, A1, . . . , Ak, A,Ak+1, . . . , An ‚ä¢ m+ 1 : Am and we are done.
3. ro ot redution of the rule e‚Ä≤j(m) ‚Üíevar m where m < j. We have by generation the
inferene step:
A1, . . . , An ‚ä¢ m : B
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e‚Ä≤j(m) : B
where n ‚â• j ‚â• 1. By generation on the premise, B = Am. Then, sine m < k, we have
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ m : Am and we are done.
4. ro ot redution of the rule e‚Ä≤j(j) ‚Üíevar j + 1. We have by generation the inferene step:
A1, . . . , Aj‚àí2, Aj‚àí1, Aj, Aj+1, Aj+2, . . . , An ‚ä¢ j : B
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e‚Ä≤j(j) : B
where n ‚â• j ‚â• 1. By generation on the premise, B = Aj. Then we have
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ j + 1 : Aj and we are done.
5. ro ot redution of the rule e‚Ä≤j(j + 1) ‚Üíevar j. We have by generation the inferene step:
A1, . . . , Aj‚àí2, Aj‚àí1, Aj, Aj+1, Aj+2, . . . , An ‚ä¢ j + 1 : B
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e‚Ä≤j(j + 1) : B
where n ‚â• j ‚â• 1. By generation on the premise, B = Aj+1. Then we have
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ j : Aj+1 and we are done.
6. ro ot redution of the rule e‚Ä≤j(m) ‚Üíevar m where m > j + 1. We have by generation the
inferene step:
A1, . . . , Aj‚àí2, Aj‚àí1, Aj, Aj+1, Aj+2, . . . , An ‚ä¢ m : B
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ e‚Ä≤j(m) : B
where n ‚â• j ‚â• 1. By generation on the premise, B = Am. Then we have
A1, . . . , Aj‚àí2, Aj‚àí1, Aj+1, Aj, Aj+2, Aj+3 . . . , An ‚ä¢ m : Am and we are done.
69
3.6 Relating the aluli
For the ro ot redutions of the other Œª‚àÖdB-rules the Generation Lemma for the typing rules
(LS-var), (L1-varn), (L1-abs) and (L1-app) should b e used and the pro of pro eeds. The other
2 rules and the 5 indutive ases present no problem at all. ‚ú∑
The most that an b e stated ab out typ ed terms and normalization is given by the
Prop osition 3.5.25 (Weak normalization of simply typ ed Œª‚àÖS) Let a ‚àà ŒõdBs. If a is
typable then a is WN (but may not be SN).
Proof: Supp ose Œì ‚ä¢LS a : A. Sine a
‚àó
‚Üí‚àÖS ‚àÖS(a) then by Prop osition 3.5.24 Œì ‚ä¢LS ‚àÖS(a) : A.
Sine ‚àÖS(a) is pure, by Lemma 3.5.22 ‚àÖS(a) is SN in lassial Œª-alulus √† la de Bruijn (11; 12).
Then, by Corollary 3.4.10 (2) and Simulation (Prop osition 3.5.10),
‚àÖS(a) ‚ààWNŒª‚àÖS thus a ‚àà WNŒª‚àÖS . ‚ú∑
3.6 Relati ng the aluli
This setion deals with the relationship b etween the various aluli we have treated in this
hapter, from the p oint of view of soundness , simulation and PSN.
We have a alulus over names, with a version over indies, satisfying simulation of Œ≤-
redution, onuene, relative soundness but not PSN, and whih is somehow easier to im-
plement than other expliit substitution aluli sine it is entirely onstruted over the pure
Œª-terms (no need of losures) and with only four rules.
Yet we onjeture that Œª‚àÖ is the simplest of all Œª-aluli with names and (in some manner)
expliit substitution. Reasons supp orting this assertion are the following. We have that:
1. the set of Œª‚àÖ-terms is Œõ, the set of Œª‚àÖdB-terms is ŒõdB
2. a Œ≤-step (Œ≤dB-step) may b eome several Œª‚àÖ-steps (Œª‚àÖdB-steps) over the Œ≤-equivalene (Œ≤dB-
equivalene) lass
3. every WN-term preserves its unique normal form, in Œª‚àÖ and Œª‚àÖdB
4. NFŒª‚àÖ = NFŒ≤, NFŒª‚àÖdB = NFŒ≤dB
5. WNŒª‚àÖ = WNŒ≤, WNŒª‚àÖdB = WNŒ≤dB
6. SNŒª‚àÖ ‚äÇ SNŒ≤, SNŒª‚àÖdB ‚äÇ SNŒ≤dB
7. Œª‚àÖ (Œª‚àÖdB) has a simply typ ed version in whih typ ed terms are WN and preserve Œª (ŒªdB)
simple typing
70
3.6 Relating the aluli
And other relevant assertions an b e stated for the Œª‚àÖS de Bruijn version as we have illus-
trated.
Being in the presene of various aluli, we will relate the systems by express ing them in a
general way. We give the following general (almost informal)
Denition 3.6.1 Given two aluli Œª1 and Œª2 (that is, two higher-order rewriting systems
whih are variants of Œª-alulus in some lear way), an appropriate mapping between their
respetive sets of terms is an eetive bi-injetive pair of funtions (or algorithms), that is a
omputable way to take a term from one of them and obtain a unique term from the other one.
Denition 3.6.2 Given two aluli Œª1 and Œª2 (in the above sense) and an appropriate pair of
mappings (w, u) between them, we wil l write:
‚Ä¢ So(Œª1, Œª2) i Œª1 is sound with respet to Œª2 via the mapping, i.e. for every pair of Œª1-terms
a, b, if a
‚àó
‚ÜíŒª1 b then w(a)
‚àó
‚ÜíŒª2 w(b)
‚Ä¢ Rs(Œª1, Œª2) i Œª1 is relatively sound with respet to Œª2 via the mapping, i.e. for every pair
of Œª1-terms a, b, if a
‚àó
‚ÜíŒª1 b then, w(a) =Œª2 w(b) and w(a)
‚àó
‚ÜíŒª2 w(b) if b is a Œª1-normal
form
‚Ä¢ Si(Œª1, Œª2) i Œª1 simulates Œª2 via the mapping, i.e. for every pair of Œª2-terms a, b, if
a‚ÜíŒª2 b then u(a)
+
‚ÜíŒª1 u(b)
‚Ä¢ PSN(Œª1, Œª2) i Œª1 is PSN with respet to Œª2 via the mapping, i.e. for every term a of
Œª1, a ‚àà SNŒª1 implies w(a) ‚àà SNŒª2
All denitions are in the sense given at the b eginning of the hapter.
As a generalization of some of the results in the previous setion, we have
Prop osition 3.6.3 Given the aluli Œª1, Œª2 and Œª3 the fol lowing statements hold (where ap-
propriate mappings are to be onsidered):
1. So(Œª1, Œª1)
2. Rs(Œª1, Œª1)
3. Si(Œª1, Œª1)
4. PSN(Œª1, Œª1)
5. So(Œª1, Œª2) ‚áí Rs(Œª1, Œª2)
6. So(Œª1, Œª2), So(Œª2, Œª3) ‚áí So(Œª1, Œª3)
7. So(Œª1, Œª2), Rs(Œª2, Œª3) ‚áí Rs(Œª1, Œª3)
71
3.7 Conlusion and future work
8. Rs(Œª1, Œª2), Rs(Œª2, Œª3) ‚áí Rs(Œª1, Œª3)
9. Si(Œª1, Œª2), Si(Œª2, Œª3) ‚áí Si(Œª1, Œª3)
10. PSN(Œª1, Œª2), PSN(Œª2, Œª3) ‚áí PSN(Œª1, Œª3)
Proof: All pro ofs are nearly immediate one xed the subsets of terms and the mappings. ‚ú∑
There are trivial examples where these  relations hold, as when relating a alulus with a
sub-alulus, for example when a new rule is added whih is simulated by many-steps of an
already present rule (or set of rules).
Example 3.6.4 Applying the previous proposition to Œª‚àÖS, Œª‚àÖdB, Œ≤dB and Œ≤ (lassial Œª-alulus),
we have for instane the fol lowing inferenes:
1. So(Œ≤dB, Œ≤) (lassial isomorphism)
2. Rs(Œ≤dB, Œ≤) (from 1)
3. So(Œª‚àÖS, Œª‚àÖdB) (Corol lary 3.5.20)
4. Rs(Œª‚àÖS, Œª‚àÖdB) (from 3)
5. Rs(Œª‚àÖdB, Œ≤dB) (Lemma 3.4.5)
6. Rs(Œª‚àÖS, Œ≤dB) (from 4, 5)
7. Rs(Œª‚àÖS, Œ≤) (from 6, 2)
3.7 Conlusio n and future work
We have studied a Œª-alulus with names using the set of pure Œª-terms, without losure
op erators, whih in some sense emb eds Œªx but with only four rules, and no substitutions. We
have in this way proved the relative soundness in the sense that only orret alulations with
resp et to Œ≤-equivalene and normal forms an b e done. We have seen that a Œ≤-step may
b eome several Œª‚àÖ-steps over the Œ≤-equivalene lass. This means that the new terms whih
may app ear within a derivation simulating a lassial Œ≤-redution are just expansions of the
lassial Œ≤-redut, thus Œ≤-equivalene is preserved . This also indiates that the dierenes of
this alulus with lassial Œª-alulus are non-trivial, in the sense that new terms would app ear
along the derivations with resp et to the latter. We have intro dued two de Bruijn versions of
this alulus, preserving the same prop erties.
It might b e viewed that the losure op erators b eome neess ary from the fat that the
prop osed variant of Œª-alulus is not PSN, although as we stated b efore this was not the
72
3.8 App endix. A garbage-olletion rule for
historial motivation. Closure op erators have app eared in the literature motivating the expliit
substitution paradigm of Œª-alulus, as a two-phase pro edure for alulation. On one hand,
the Œª-abstration (along with the appliation), and on the other, the losure. Without this
distintion, one loses PSN as well as lassial soundness but it preserves Œ≤-equivalene lasses
and orretly alulates normal forms. The other main requirements work well and this alulus
is suitable for implementation.
Sine Œª‚àÖ is already non-PSN, the addition of a p ossible omp osition rule would b e plausible.
The addition of Œ∑-redution may also b e viable: for Œª‚àÖdB it would read Œª(œï0(a)1) ‚Üí a. Also
a version of Œª‚àÖ with onstrutors (see hapter 7) ould b e an interesting topi to study for
omparison with other pattern-based Œª-aluli.
It would b e interesting to study the p ossible emb edding of other de Bruijn aluli onto Œª‚àÖdB.
Also to study other riher typing systems for these aluli.
As a future task it remains to study the onuene on op en terms for p ossible extensions of
Œª‚àÖS, whih will require to transform the exhange lemmas 3.5.13, 3.5.14, 3.5.15, 3.5.16 into rules
by giving them some appropriate orientation. Another interesting faet is the identiation of
(more) non-trivial hains of aluli enjoying step-wise simulation, soundness and, as a partiular
asp et, to study this relative PSN of one alulus with resp et to another.
3.8 App endix. A garbage-ol l e ti o n rule for Œª‚àÖdB
In this short app endix we prop ose a variant of Œª‚àÖdB in whih following the idea of the full
(g)-rule in Œªx, the dbŒªvar2-rule is replaed by a garbage-olletion rule.
For this purp ose we extend the up dating funtions U ik(‚Ä¢) by inluding the ase i = 0, to b e
named V ik :
V ik (m) =
Ô£±Ô£≤
Ô£≥
m‚àí 1 if m > k and i = 0
m+ i‚àí 1 if m > k and i > 0
m if m ‚â§ k
V ik (ab) = V
i
k (a)V
i
k (b)
V ik (Œªa) = ŒªV
i
k+1(a)
With the syntax of (pure) de Bruijn terms, we onsider the following rules (reall the deni-
tion of FV (‚Ä¢) in the preliminaries):
(Œª1)a ‚ÜídbŒªvar1 a
(Œªa)b ‚ÜídbŒªgc V
0
0 (a) if 1 /‚àà FV (a)
(Œªab)c ‚ÜídbŒªapp (Œªa)b((Œªa)c)
(Œª(Œªa))c ‚ÜídbŒªŒª Œª(Œªe1(a))V
2
0 (b)
where V ik (‚Ä¢) is the ab ove up dating op erator, and ek(‚Ä¢) is the (k, k+1)-exhange op erator. The
goal of V 00 (a) is to derement every free index of a by 1. (Atually we do not need to dene
V ik (‚Ä¢) for other values of i 6= 0, 2 in this formulation.)
73
3.8 App endix. A garbage-olletion rule for
We will all Œª‚àÖdBg the preeding alulus over de Bruijn terms.
Lemma 3.8.1 If 1 ‚àà FV (e1(a)) then 2 ‚àà FV (a).
Proof: Sine ej(ej(a)) = a, it sues to show that for every j ‚â• 1, j ‚àà FV (a) implies
j + 1 ‚àà FV (ej(a)). It is done by indution on a. ‚ú∑
Lemma 3.8.2 Let j ‚â• 1. If j /‚àà FV (a) then V 0j (a) = V
0
j‚àí1(a).
Proof: By indution on a. The ase a = m is lear sine m 6= j. The interesting ase is
a = Œªa‚Ä≤, where j /‚àà FV (Œªa‚Ä≤) = FV (a‚Ä≤)‚àí 1 so j+1 /‚àà FV (a‚Ä≤) and then by IH V 0j+1(a
‚Ä≤) = V 0j (a
‚Ä≤),
so ŒªV 0j+1(a
‚Ä≤) = ŒªV 0j (a
‚Ä≤) and then V 0j (Œªa
‚Ä≤) = V 0j‚àí1(Œªa
‚Ä≤)1 . ‚ú∑
Lemma 3.8.3 If j /‚àà FV (ej(a)) then V
0
j (ej(a)) = V
0
j (a).
Proof: By indution on a. ‚ú∑
Remark 3.8.4 If a‚ÜíŒª‚àÖdB b then a‚ÜíŒª‚àÖdBg b.
Proof: Obvious sine the dbŒªvar-rule is subsumed by the dbŒªgc-rule. ‚ú∑
With resp et to the onverse for many steps, we need
Lemma 3.8.5 For every de Bruijn term a and i ‚àà IN, |ei(a)| = |a|.
Proof: Easy indution on a. ‚ú∑
Lemma 3.8.6 states that the dbŒªgc-rule an b e simulated in Œª‚àÖdB.
Lemma 3.8.6 If 1 /‚àà FV (a) then (Œªa)b
‚àó
‚ÜíŒª‚àÖdB V
0
0 (a).
Proof: By indution on the p osition of the redex.
‚Ä¢ if the redution o urs at the ro ot, then the following ases may o ur:
 if a = 1, it is vauous sine 1 ‚àà FV (1)
 if a = m+ 1, learly (Œª(m+ 1))b‚ÜídbŒªvar1 m = V
0
0 (m+ 1)
 if a = b1b2 then (Œªb1b2)c‚ÜídbŒªapp (Œªb1)c((Œªb2)c)
‚àó
‚Üí
IH
Œª‚àÖdB
V 00 (b1)V
0
0 (b2) (sine 1 /‚àà FV (b1) ‚à™ FV (b2) = FV (b1b2))
= V 00 (b1b2)
1
Atually a stronger version holds: if k < j and k + 1, k + 2, . . . , j /‚àà FV (a) then V 0k (a) = V
0
k+1(a) = ¬∑ ¬∑ ¬∑ =
V 0j (a).
74
3.8 App endix. A garbage-olletion rule for
 if a = (Œªa1) then (ŒªŒªa1)c‚ÜídbŒªŒª d with d = Œª(Œªe1(a1))V
2
0 (c) and sine 1 /‚àà FV (Œªa1)
2 /‚àà FV (a1) thus 1 /‚àà FV (e1(a1)) by Lemma 3.8.1. Lemma 3.8.5 guarantees that
|a1| = |e1(a1)| < |Œªa1| = |a|, then the IH an b e used:
(Œªe1(a1))V
2
0 (c)
‚àó
‚ÜíŒª‚àÖdB V
0
0 (e1(a1)) sine 1 /‚àà FV (e1(a1))
= V 01 (e1(a1)) by Lemma 3.8.2 taking j = 1 /‚àà FV (e1(a1))
= V 01 (a1) by Lemma 3.8.3 using again that 1 /‚àà FV (e1(a1)), so
d
‚àó
‚ÜíŒª‚àÖdB ŒªV
0
1 (a1) = V
0
0 (a) and we are done.
‚Ä¢ if the redution is internal, it is straightforward.
‚ú∑
Corollary 3.8.7 (Simulation of Œª‚àÖdBg) If a
‚àó
‚ÜíŒª‚àÖdBg b then a
‚àó
‚ÜíŒª‚àÖdB b.
Proof: We prove that if a‚ÜíŒª‚àÖdBg b then a
‚àó
‚ÜíŒª‚àÖdB b by indution on a. The internal redutions
are straightforward. The dbŒªgc-rule is handled by Lemma 3.8.6. Then the result follows by
indution on the length of the derivation. ‚ú∑
So b oth relations
‚àó
‚ÜíŒª‚àÖdB and
‚àó
‚ÜíŒª‚àÖdBg happ en to oinide. This oinidene do es not hold in
the setting of Œªx (having the (Gc)-rule) and Œªx‚àí (having the more restritive (V ar2)-rule),
sine Œªx allows derivation steps whih are not simulated by Œªx‚àí. More preisely, Œªx‚àí-rules
annot simulate the (Gc)-rule sine a losure may blo k a redution. In Œª‚àÖdB there is no suh
a blo king p ossibility sine there are no losures. As immediate onseque n  e s we have the
following orollaries (we omit details).
Corollary 3.8.8 (Soundness with resp et to =Œ≤dB ) If a
‚àó
‚ÜíŒª‚àÖdBg b then a =Œ≤dB b
Corollary 3.8.9 (Conuene of Œª‚àÖdBg) If a
‚àó
‚ÜíŒª‚àÖdBg a1 and a
‚àó
‚ÜíŒª‚àÖdBg a2 then there exists a3
suh that a1
‚àó
‚ÜíŒª‚àÖdBg a3 and a2
‚àó
‚ÜíŒª‚àÖdBg a3.
75
3.8 App endix. A garbage-olletion rule for
Figure 3.1: S((S(SS))K)K(SSSSS)(S(S(SS)K)S(SKK)) after 80 left-most steps
76
Chapter 4
Perp etuality and Strong Normalization in
ŒªœÖ
He that would know what kind of idea it is to whih we give the name of INFIN-
ITY, annot do it better than by onsidering to what innity is by the mind more
immediately attributed; and then how the mind omes to frame it.  J. Lo ke
... by being able to repeat the idea of any length of duration we have in our minds,
with al l the end less addition of number, we ome by the idea of ETERNITY. For
we nd in ourselves, we an no more ome to an end of suh repeated ideas than we
an ome to the end of number ...  J. Lo ke
ABSTRACT We prove a p erp etuality result for the ŒªœÖ alulus of expliit substitution, based
on safe redutions. We give as an appliation a set of deterministi inferene rules whih
haraterize indutively the strongly normalizing terms and an eetive p erp etual redution
strategy for ŒªœÖ.
4.1 Intro dution
In most rewriting systems, in partiular term rewriting systems (TRSs) (9) and expliit
substitution aluli (13; 15; 35), the onept of perpetuality (49; 50; 51; 52; 82) an b e dened
and studied. This notion means, for any term, a way of preserving innite derivations starting
from it when they exist. When one nds that a alulus satises p erp etuality in the given sense,
then strong normalization results and p erp etual rewriting strategies an b e ahieved. Perp etual
strategies app ear in a more or less straightforward way when a alulus satises orthogonality
(14), but when this do es not happ en a sp ei analysis should b e done.
The ŒªœÖ- (13) and Œªs- (43) aluli of expliit substitution have minimal substitutions op erators
and rules in some sense (/, ‚Üë, ‚áë for ŒªœÖ and œÉ, œï for Œªs). They an b e seen as translating the
77
4.1 Intro dution
main ideas of the Œªx-alulus, whih is a named expliit substitution alulus, into a de Bruijn
setting. These systems oer the advantage that they rely on de Bruijn indies and the numb er
of rules is relatively small ompared with those from other aluli. and somehow ompliated
redution rules. For that reason most of the results for Œªx should b e transferred to other aluli,
when p ossible, in order to relate most of the asp ets of the dierent formalisms. One of the
reasons for seleting ŒªœÖ is that it is a alulus with a minimum numb er of rules and enjoying
a go o d numb er of prop erties.
We are interested in perpetual rewrite strategies. A p erp etual rewrite strategy is one that
preserves the p ossibility of innite derivations wheneve r p ossible. The interest in these strategies
is that if they normalize a term M (ompute a term N suh that M Œ≤-rewrites to N and no
further Œ≤-rewrites from N are p ossible) then this term is strongly normalizing, that is, al l
derivations starting from M are nite. In this work we dene a p erp etual rewrite strategy for
ŒªœÖ. Also, we use this p erp etual strategy to prove that there is an indutive haraterization of
a lass of terms in ŒªœÖ whih aptures exatly those that are SN in this alulus. By indutive
we mean desribing the set as the smallest set losed under some set of rules, as when dening
the set of Œª-terms or the set of theorems of some logi system (3).
Perp etuality will b e proved using the losure-traing and minimal derivations tehniques.
After that, and as an appliation, we give a set of deterministi inferene rules whih indu-
tively haraterize the set of SN ŒªœÖ-terms and substitutions. Then, we use the preeding
haraterization to build an eetive (deidable) p erp etual redution strategy for ŒªœÖ terms and
substitutions.
A p erp etual strategy allows to identify a subsys te m of a alulus that restrits itself to some
derivations whih fulll a sp ei ondition, namely that redutions never delete a sub-term
whih is not SN.
Perp etuality in a named expliit substitution alulus has b een rst studied in (17).
4.1.1 Some remarks
The ompatibility rules of ŒªœÖ play the role of the following lassial lemma for the pure Œª-
alulus, used by van Raamsdonk et al. to prove p erp etuality for the Œª-alulus ((82), Lemma
3.1).
Lemma 4.1.1 Let M,M ‚Ä≤, N,N ‚Ä≤ be Œª-terms and let x be any variable. If M ÷âŒ≤ M
‚Ä≤
and
N ÷âŒ≤ N
‚Ä≤
then M{x := N}÷âŒ≤ M
‚Ä≤{x := N ‚Ä≤}.
Proof: See (11). ‚ú∑
What is proved as a lemma in Œª-alulus will hold in ŒªœÖ by ompatibility of redution.
Let S(a) denote the set of sub-terms of term a for any TRS. We will use the following easy
general result, whih holds where indiated.
78
4.2 Perp etuality
Remark 4.1.2 In every Abstrat Rewriting System (ARS) the rst item holds, and in every
TRS the fol lowing two items hold:
1. if a ‚àà SN and a‚Üí b then b ‚àà SN
2. if b ‚àà SN and a ‚àà S(b) then a ‚àà SN
In hapter 1 we just gave the basi denitions ab out ŒªœÖ, inluding term ontexts in this
alulus, whih will b e of use
1
. Pro ofs of PSN and onuene, as well as other results and
omments, an b e found in (13).
4.2 Perp etuali ty
In this setion we will state and prove a version of the Perp etuality Lemma for ŒªœÖ using
losure traing along with minimal derivations tehniques.
4.2.1 Auxili ary results
Now we prepare for proving p erp etuality for ŒªœÖ.
Denition 4.2.1 (set of sub-terms and sub-substitutions of a term/substitution) Given
a term a (resp., a substitution s), the set of sub-terms and sub-substitutions of a (resp., of s)
is dened in an expeted way:
S(m) = {m}
S(Œªa) = {Œªa} ‚à™ S(a)
S(ab) = {ab} ‚à™ S(a) ‚à™ S(b)
S(a/) = {a/} ‚à™ S(a)
S(‚Üë) = { ‚Üë }
S(‚áë (s)) = { ‚áë (s)} ‚à™ S(s)
S(a[s]) = {a[s]} ‚à™ S(a) ‚à™ S(s)
For every term a, S(a) will inlude terms and substitutions (unless a is pure in whih ase it
will onsists of only terms).
Remark 4.2.2 If a‚ÜíœÖ b, then there exists a sub-term of a of the form c[s‚ÑÑ. This is due to the
rules of ŒªœÖ.
We will use the following notion of skeleton of a term (intro dued in (75) and also used in
(17)).
1
As we shall see, there will b e no need to use substitution ontexts in the present hapter.
79
4.2 Perp etuality
Denition 4.2.3 (skeleton)
SK(m) = m
SK(Œªa) = ŒªSK(a)
SK(ab) = SK(a)SK(b)
SK(a[s]) = SK(a)[‚ú∑]
The following denition was intro dued in (13).
Denition 4.2.4 (internal and external redution for ŒªœÖ) We dene the internal redu-
tion for ŒªœÖ, denoted with ‚ÜíintŒªœÖ , as the least sub-relation of ‚ÜíŒªœÖ over terms and substitutions,
whih satises:
1. s‚ÜíŒªœÖ s
‚Ä≤ ‚áí a[s‚ÑÑ ‚ÜíintŒªœÖ a[s
‚Ä≤
‚ÑÑ
2. a‚ÜíintŒªœÖ a
‚Ä≤ ‚áí ab ‚ÜíintŒªœÖ a
‚Ä≤b ‚àß ba ‚ÜíintŒªœÖ ba' ‚àß Œªa‚Üí
int
ŒªœÖ Œªa
‚Ä≤
If a ‚ÜíŒªœÖ b holds but a ‚Üí
int
ŒªœÖ b does not, we write a ‚Üí
ext
ŒªœÖ b instead, and al l it an external
redution.
Remark 4.2.5 ‚ÜíintŒªœÖ is a ompatible redution relation over Œõ
t
and Œõs, but ‚ÜíextŒªœÖ is not om-
patible.
Denition 4.2.6 (number of losures in a term or a skeleton)
Given a term or substitution a we dene the number of losures of a, noted #a, in the
fol lowing expeted way:
#m = 0
#(ab) = #a+ #b
#(Œªa) = #a
#a[s] = 1 + #a+ #s
#(a/) = #a
#(‚Üë) = 0
#(‚áë (s)) = #s
We straightforward ly extend it for skeletons, by dening #(‚ú∑) = 0.
Before the main lemmas, we give a very simple result that we will use afterwards.
Lemma 4.2.7 (Preservation of skeleton) If a‚ÜíintŒªœÖ b then SK(a) = SK(b).
Proof: By indution on the inferene of a‚ÜíintŒªœÖ b.
‚Ä¢ If a[s] ‚ÜíintŒªœÖ a[s
‚Ä≤] with s‚ÜíŒªœÖ s
‚Ä≤
, then SK(a[s]) = SK(a)[‚ú∑] = SK(a[s‚Ä≤]).
80
4.2 Perp etuality
‚Ä¢ If ab‚ÜíintŒªœÖ a
‚Ä≤b with a‚ÜíintŒªœÖ a
‚Ä≤
, then SK(ab) = SK(a)SK(b) =IH SK(a‚Ä≤)SK(b) = SK(a‚Ä≤b).
‚Ä¢ If ab‚ÜíintŒªœÖ ab
‚Ä≤
with b‚ÜíintŒªœÖ b
‚Ä≤
, then SK(ab) = SK(a)SK(b) =IH SK(a)SK(b‚Ä≤) = SK(ab‚Ä≤).
‚Ä¢ If Œªa‚ÜíintŒªœÖ Œªa
‚Ä≤
with a‚ÜíintŒªœÖ a
‚Ä≤
, then SK(Œªa) = ŒªSK(a) =IH ŒªSK(a‚Ä≤) = SK(Œªa‚Ä≤).
‚ú∑
We will need to handle p ositions of a term and redutions over p ositions in a standard way
as it was done in (13) and (17). Positions are elements of the set {1, 2}*. Given a term or
substitution a, we dene the term at p osition p of a as usual (13). Let Pos(a) b e the set of all
p ositions of term a. If the term at p osition p in a is the œÖ-redex used in a redution a ‚ÜíœÖ a
‚Ä≤
,
we write a‚ÜípœÖ a
‚Ä≤
.
Reall we denote with C{‚ú∑}p a ontext C in whih the hole is lo ated at the p osition p, and
with C{a}p the ontext C where we replae the hole, whih is lo ated at the p osition p, by the
term a.
We b orrow the following three lemmas from (13). For the pro ofs, see this referene.
Lemma 4.2.8 (many-step Closure Traing for ŒªœÖ) Let a1, .., an ,e ‚àà ŒõœÖ suh that ai
‚ÜíŒªœÖ ai+1 for 1 ‚â§ i ‚â§ n‚àí 1, and an = C{b[‚áë
j (e/)]}p.
Then:
1. either ‚àÉ i suh that ai = C
‚Ä≤{(Œªd‚Ä≤)e‚Ä≤}p‚Ä≤, with e
‚Ä≤ ÷âŒªœÖ e
2. or a1 = C
‚Ä≤{d‚Ä≤[‚áëk (e‚Ä≤/)]}p‚Ä≤, with e
‚Ä≤ ÷âŒªœÖ e.
Lemma 4.2.9 (Pro jetion Lemma for ŒªœÖ) The fol lowing hold:
1. ‚àÄa, b ‚àà ŒõœÖ , if a‚ÜíŒªœÖ b then œÖ(a)÷âŒ≤ œÖ(b).
2. ‚àÄa, b ‚àà ŒõœÖ , if a‚Üí
ext
Beta b then œÖ(a) ‚ÜíŒ≤ œÖ(b).
Lemma 4.2.10 (Iterative Commutation Lemma for ŒªœÖ) Let a0, .., an ‚àà ŒõœÖ suh that
œÖ(a0) ‚àà SNŒ≤ and for 1 ‚â§ i ‚â§ n œÖ(a0) = œÖ(ai) and
ai‚àí1 ‚Üí
int
ŒªœÖ * . ‚Üí
ext
œÖ ai. Then a0 ‚Üí
ext n
œÖ . ( ‚Üí
int
ŒªœÖ . ‚Üí
ext
œÖ )* an.
Lemma 4.2.10 states that some external œÖ-step ould b e brought to the b eginning of suh a
derivation, but in the form of n external œÖ-steps, p ossibly followed by other steps whih may
b e either internal ŒªœÖ-steps or external œÖ-steps.
Lemma 13 in (13) states the following: if a ‚àà ŒõœÖ is a pure term suh that a ‚àà SNŒ≤, then for
all innite derivations a = a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ a3 ‚ÜíŒªœÖ. . . ‚àÉn ‚â• 1 suh that ‚àÄm ‚â• n, am ‚Üí
int
ŒªœÖ am+1.
We prove now a generalization.
81
4.2 Perp etuality
Lemma 4.2.11 If a ‚àà ŒõœÖ suh that œÖ(a) ‚àà SNŒ≤, then for al l innite derivations a = a1 ‚ÜíŒªœÖ
a2 ‚ÜíŒªœÖ a3 ‚ÜíŒªœÖ. . . ‚àÉn ‚â• 1 suh that ‚àÄm ‚â• n, am ‚Üí
int
ŒªœÖ am+1
Proof: Supp ose there is an innite derivation starting from a suh that there are innite
external redutions.
If there is an innite numb er of external (Beta)-redutions, suh a derivation will have the form
a1 ÷âŒªœÖ a
‚Ä≤
1 ‚Üí
ext
Beta a2 ÷âŒªœÖ a
‚Ä≤
2 ‚Üí
ext
Beta a3 ÷âŒªœÖ . . .
By the Pro jetion Lemma (1) and (2) we translate this derivations into
œÖ(a1) ÷âŒ≤ œÖ(a
‚Ä≤
1) ‚ÜíŒ≤ œÖ(a2) ÷âŒ≤ œÖ(a
‚Ä≤
2) ‚ÜíŒ≤ œÖ(a3) . . . so there is an innite Œ≤-redution starting
from œÖ(a1), but œÖ(a1) ‚àà SNŒ≤, whih is an absurd. Therefore, all (Beta)-rewrites from one p oint
onward are internal. So we an supp ose that from one p oint onward, say am, there are no
more external (Beta)-redutions. We will see that not only the (Beta)-rewrites, but also the
œÖ-rewrites must b e internal, by the following. Sine œÖ is SN there exists a p suh that no more
than p œÖ- rewrites are p ossible from am. If we supp ose that there are innitely many external œÖ-
rewrites in an innite ŒªœÖ derivation starting from am, then there are of ourse at least p+ 1 of
them. By the Iterative Commutation Lemma, (at least) p+ 1 external rewrites an b e reated
starting from am, whih is absurd sine p was the maximum. ‚ú∑
Note that the ab ove result is equivalent to stating that there exists a p oint suh that all
redutions from there on are internal (sine a redution annot b e b oth internal and external
at the same time).
Also note that Lemma 13 in (13) do es not diretly imply our Lemma 4.2.11. This ould b e
the ase if for example one knows that there exists a pure term a‚Ä≤ suh that a‚Ä≤ ÷âŒªœÖ a (and also
a‚Ä≤ SN). But this will not always happ en (it is the problem of expansion to pure terms whih
will b e treated in hapter 8).
Lemma 4.2.12 Let a ‚àà ŒõœÖ suh that œÖ(a) ‚àà SNŒ≤. Then for al l innite derivations a = a1 ‚ÜíŒªœÖ
a2 ‚ÜíŒªœÖ a3 ‚ÜíŒªœÖ. . . ‚àÉ k ‚â• 1, p ‚àà Pos(a), a ontext C, a term b and substitutions s1, s2, s3, . . .
suh that s1 ‚ÜíŒªœÖ s2 ‚ÜíŒªœÖ s3 ‚ÜíŒªœÖ. . . and
a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ ak = C{b[s1]}p ‚Üí
int
ŒªœÖ C{b[s2]}p ‚Üí
int
ŒªœÖ C{b[s3]}p ‚Üí
int
ŒªœÖ . . .
Proof: Sine œÖ(a) ‚àà SNŒ≤, by the previous lemma ‚àÉk ‚â• 1 suh that ‚àÄi ‚â• k, ai ‚Üí
int
ŒªœÖ ai+1. By
Lemma 4.2.7, SK(ai) = SK(ai+1) = . . .
Sine for all terms b we have that #b <‚àû, #SK(ai) < ‚àû, and hene by K√∂nig's Lemma there
is a losure b[s1‚ÑÑ ‚àà S(ai) suh that there is an innite branh of rewrites in s1. Then, ‚àÉ k ‚â• 1,
p ‚àà Pos(a), a ontext C, a term b and substitutions s1, s2, s3, . . . suh that
a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ ak = C{b[s1‚ÑÑ}p ‚Üí
int
ŒªœÖ C{b[s2‚ÑÑ}p ‚Üí
int
ŒªœÖ C{b[s3‚ÑÑ}p ‚Üí
int
ŒªœÖ . . . ‚ú∑
82
4.2 Perp etuality
Denition 4.2.13 (garbage) In the redution a1 ‚ÜíœÖ a2 we al l garbage to the erased (sub-
)term or (sub-)substitution, if any. That is:
1. for (RVar) (m+ 1)[a/] ‚Üí m, its garbage is the term a
2. for (FVarLift) 1[‚áë (s)] ‚Üí 1, its garbage is the substitution s
3. for the rules (Beta), (App), (Lam), (FVar), (RVarLift) and (VarShift), there is no
garbage.
Note that the garbage plays the same role as the eliminated sub-term by the (G)-rule in Œªx.
Denition 4.2.14 (safe redution) A redution of any of the fol lowing forms wil l be al led
safe:
(ab)[s] ‚Üí a[s]b[s]
(Œªa)[s] ‚Üí Œª(a[‚áë (s)])
1[a/] ‚Üí a
(m+ 1)[a/] ‚Üí m if a ‚àà SNŒªœÖ
1[‚áë (s)] ‚Üí 1 if s ‚àà SNŒªœÖ
(m+ 1)[‚áë (s)] ‚Üí m[s][‚Üë]
m[‚Üë] ‚Üí m+ 1
We will use the symb ol ‚Üíg to denote this relation extended to satisfy the usual ompatibility.
Note that ‚Üíg‚äÜ‚ÜíœÖ is a prop er inlusion.
Remark that safe redution is equivalent to the fat that every garbage is SN.
The following Lemma states that for any œÖ-redution from a term of the form
C{b[‚áëi (e/)‚ÑÑ}, if the redex is not in e then that sub-term is either a sub-term of the redut
or a sub-term of the garbage.
Lemma 4.2.15 Let C be a ontext, b, e terms and i ‚â• 0, suh that C{b[‚áëi (e/)]} ‚ÜíœÖ d where
the redution does not our inside e. Then
1. either e ‚àà S(d)
2. or the redution garbage h is dened, with e ‚àà S(h)
Proof: We use indution on the ontext C.
1. If C = ‚ú∑, we have two sub ases :
(a) If the redex is inside b, with b‚ÜíœÖ b
‚Ä≤
then d = b‚Ä≤[‚áëi (e/)] therefore e ‚àà S(d).
(b) Otherwise the redex must b e b[‚áëi (e/)] (i.e., its p osition equal to the p osition of the
hole in C) b eause the redution do es not o ur inside e. Then we analyze eah rule:
83
4.2 Perp etuality
i. (App) (uv)[‚áëi (e/)] ‚Üí u[‚áëi (e/)]v[‚áëi (e/)], hene (1) applies.
ii. (Lam) (Œªa)[‚áëi (e/)] ‚Üí Œª(a[‚áëi+1 (e/)]), hene (1) applies.
iii. (FVar) 1[‚áëi (e/)] ‚Üí e with i = 0, hene (1) applies.
iv. (RVar) (m+ 1)[‚áëi (e/)] ‚Üí m with i = 0, hene (2) applies with h = e/.
v. (FVarLift) 1[‚áëi (e/)] ‚Üí 1 with i ‚â• 1, hene (2) applies with h =‚áëi (e/).
vi. (RVarLift) (m+ 1)[‚áëi (e/)] ‚Üí m[‚áëi‚àí1 (e/)][‚Üë] with i ‚â• 1, hene (1) applies.
vii. (VarShift) m[‚Üë] ‚Üí m + 1, but in this ase the result holds vauously sine the
redex do es not have the required form b[‚áëi (e/)].
2. If C 6= ‚ú∑, then we have the following ases:
(a) C = C ‚Ä≤v, then the redution step C{b[‚áëi (e/)]} ‚ÜíœÖ d must b e internal and d = d1d2.
There are two p ossibilities:
‚Ä¢ C ‚Ä≤{b[‚áëi (e/)]} ‚ÜíœÖ d1 and v = d2, hene the result follows by IH.
‚Ä¢ d1 = C{b[‚áë
i (e/)]} and v ‚ÜíœÖ d2, hene (1) holds.
(b) C = uC ‚Ä≤, analogous to the previous ase.
() C = ŒªC ‚Ä≤, then the redution C{b[‚áëi (e/)]} ‚ÜíœÖ d must b e internal and the result
follows by IH.
(d) C = C ‚Ä≤{‚ú∑}[‚áëk (‚Üë)] with k ‚â• 0, then we have the following ases:
‚Ä¢ the redution takes plae at the ro ot, then
i. it annot b e (FVar), (RVar), (FVarLift), (RVarLift), nor (VarShift) sine no
index mathes C ‚Ä≤{b[‚áëi (e/)]}.
ii. if it is an (App)-step, learly e ‚àà S(d) thus (1) holds.
iii. if it is a (Lam)-step, learly e ‚àà S(d) thus (1) holds.
‚Ä¢ the redution is internal in C ‚Ä≤{b[‚áëi (e/)]}, i.e. C ‚Ä≤{b[‚áëi (e/)]}[‚áëk (‚Üë)]
‚ÜíœÖ d
‚Ä≤[‚áëk (‚Üë)] = d with C ‚Ä≤{b[‚áëi (e/)]} ‚ÜíœÖ d
‚Ä≤
, then sine it annot b e inside e, by
IH either e ‚àà S(d‚Ä≤) ‚äÜ S(d), thus (1) holds, or e ‚àà S(h) thus (2) holds.
(e) C = C ‚Ä≤{‚ú∑}[‚áëk (f/)] with k ‚â• 0, then we have the following ases:
‚Ä¢ the redution takes plae at the ro ot, then we make the same onsiderations as
b efore:
i. it annot b e (FVar), (RVar), (FVarLift), (RVarLift), nor (VarShift) sine again
no index mathes C ‚Ä≤{b[‚áëi (e/)]}.
ii. if it is an (App)-step, learly e ‚àà S(d) thus (1) holds.
iii. if it is a (Lam)-step, learly e ‚àà S(d) thus (1) holds.
‚Ä¢ the redution is inside C ‚Ä≤{b[‚áëi (e/)]}, i.e. C ‚Ä≤{b[‚áëi (e/)]}[‚áëk (f/)]
‚ÜíœÖ d
‚Ä≤[‚áëk (f/)] = d with C ‚Ä≤{b[‚áëi (e/)]} ‚ÜíœÖ d
‚Ä≤
, then sine it annot b e inside e, by
IH either e ‚àà S(d‚Ä≤) ‚äÜ S(d), thus (1) holds, or e ‚àà S(h) thus (2) holds.
84
4.2 Perp etuality
‚Ä¢ the redution is internal in f , i.e. C ‚Ä≤{b[‚áëi (e/)]}[‚áëk (f/)]
‚ÜíœÖ C
‚Ä≤{b[‚áëi (e/)]}[‚áëk (f ‚Ä≤/)] = d with f ‚ÜíœÖ f
‚Ä≤
, then learly e ‚àà S(d) thus (1)
holds.
(f ) C = u[‚áëk (C ‚Ä≤{‚ú∑}/)] with k ‚â• 0, then we have the following ases:
‚Ä¢ the redution takes plae at the ro ot, then
i. if it the rule applied is (FVar) (k = 0), then e ‚àà S(d) thus (1) holds.
ii. if it is (RVar) (k = 0), then e ‚àà S(h) thus (2) holds.
iii. if it is (FVarLift) (k ‚â• 1), then e ‚àà S(h) thus (2) holds.
iv. if it is (RVarLift) (k ‚â• 1), then e ‚àà S(d) thus (1) holds.
v. it annot b e (VarShift) sine ‚áëk (C ‚Ä≤{b[‚áëi (e/)]}/) do es not math ‚Üë.
vi. if it is an (App)-step, learly e ‚àà S(d) thus (1) holds.
vii. if it is a (Lam)-step, learly e ‚àà S(d) thus (1) holds.
‚Ä¢ the redution takes plae at u, i.e. u[‚áëk (C ‚Ä≤{b[‚áëi (e/)]}/)]
‚ÜíœÖ u
‚Ä≤[‚áëk (C ‚Ä≤{b[‚áëi (e/)]}/)] = d with u ‚ÜíœÖ u
‚Ä≤
, then learly e ‚àà S(d) thus (1)
holds.
‚Ä¢ the redution takes plae inside the losure, i.e. at C ‚Ä≤{b[‚áëi (e/)]}, then
u[‚áëk (C ‚Ä≤{b[‚áëi (e/)]}/)] ‚ÜíœÖ u[‚áë
k (d‚Ä≤/)] = d with C ‚Ä≤{b[‚áëi (e/)]} ‚ÜíœÖ d
‚Ä≤
, hene by IH
e ‚àà S(d‚Ä≤) ‚äÜ S(d) hene (1) holds, or e ‚àà S(h) hene (2) holds.
‚ú∑
We will need to use minimal redutions in the way as it was done in (13) and (17).
Denition 4.2.16 (lexiographi order b etween redutions and minimal redutions)
Given an innite derivation
D: a1 ‚Üí
p1
œÖ a2 ‚Üí
p2
œÖ ‚Üí . . .
and an innite derivation
D': b1 ‚Üí
q1
œÖ b2 ‚Üí
q2
œÖ ‚Üí . . .
we write D ‚à† D' i the sequene (p1, p2, . . . ) is lexiographial ly below the sequene
(q1, q2, . . . ).
A minimal derivation is a derivation with no derivation below it (i.e., minimal for the strit
total ordering ‚à†).
The following lemma holds in the ontext of (13). The only dierene here is that a is any
term and not neess arily a pure term.
Lemma 4.2.17 If the set of innite derivations from a given term a is nonempty (i.e., a ‚àà ‚àû)
then there always exists a minimal innite derivation.
85
4.2 Perp etuality
Proof: Let a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . b e an innite derivation. For every ai, dene the following
subset of ai p ositions: Pi = {p ‚àà Pos(ai) | if ai ‚Üí
p
ŒªœÖ b, then b ‚àà ‚àû}. Clearly Pi is nonempty
and nite. For i ‚â• 1, let pi = min(Pi) any minimal element of the set of p ositions Pi with
resp et to the prex ordering
1
. Then a1 ‚Üí
p1
ŒªœÖ a2 ‚Üí
p2
ŒªœÖ . . . is a minimal innite derivation. ‚ú∑
I.e., in eah step, we selet a p osition suh that an innite derivation is still p ossible and
suh that it is a minimal of suh p ositions. Remark that a minimal innite derivation always
will exist among innite derivations, but it may not b e neess arily lesser than some nite
derivation.
The following is one of the key lemmas in this setion.
Lemma 4.2.18 Suppose a ‚ÜípœÖ b, and b ‚àà SNŒªœÖ, with the additional supposition that, if the
garbage h is dened for this redution, then h ‚àà SNŒªœÖ. Therefore a ‚àà SNŒªœÖ.
Proof: Let n = #a. Note that sine a‚ÜíœÖ b, by Remark 4.2.2 a has at least a losure, so
n ‚â• 1.
We supp ose there exists an innite derivation from a, and apply indution on n.
1. Case n = 1.
Let D := a = a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . b e a minimal innite redution from a (it always
exists sine the set of redutions is well-founded w.r.t. the lexiographi ordering). Sine
b ‚àà SNŒªœÖ then œÖ(b) ‚àà SNŒ≤, then as a ‚ÜíœÖ, b, œÖ(a) = œÖ(b) ‚àà SNŒ≤. Then we use Lemma
4.2.12 applied to a, and we have that ‚àÉ k ‚â• 1, p ‚àà Pos(a), a ontext C, a term d and
substitutions s1, s2, s3, . . . suh that
a = a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ ak = C{d[s1‚ÑÑ}p ‚Üí
int
ŒªœÖ C{d[s2‚ÑÑ}p ‚Üí
int
ŒªœÖ C{d[s3‚ÑÑ}p ‚Üí
int
ŒªœÖ . . .
with s1 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ sk ‚ÜíŒªœÖ. . . Thus ‚àÄi ‚â• 1 si 6=‚áë
k(‚Üë) (sine ‚àÄk ‚áëk (‚Üë) has no redexes ),
so ‚àÄi ‚â• 1 si =‚áë
k (ei/) with ei ‚àà ŒõœÖ, and therefore e1 ‚ÜíŒªœÖ e2 ‚ÜíŒªœÖ . . . , so e1 ‚àà ‚àûŒªœÖ.
By the many-step Closure Traing Lemma, there are two p ossibilities:
(a) Either ‚àÉ j ‚â§ k, pj ‚àà Pos(a), a ontext C', a term d
‚Ä≤
suh that aj = C'{(Œªd
‚Ä≤
) ej' }pj,
with ej' ‚Üí
‚àó
ŒªœÖ ej. So we have another innite derivation
D' := a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ aj = C'{(Œªd
‚Ä≤
) ej' }pj
‚ÜíŒªœÖ C'{d
‚Ä≤
[ej'/‚ÑÑ }pj ‚Üí
‚àó
ŒªœÖ C'{d
‚Ä≤
[ej /‚ÑÑ}pj ‚ÜíŒªœÖ . . .
satisfying D' ‚à† D, thus ontraditing the minimality of D.
(b) Or ‚àÉr ‚â• 0, d‚Ä≤, c‚Ä≤ suh that c‚Ä≤ ÷âŒªœÖ e1 and d
‚Ä≤[‚áër (c‚Ä≤/)] ‚àà S(a1) (i.e., the losure or some
anestor is already in a1). Sine c
‚Ä≤ ÷âŒªœÖ e1 ‚àà ‚àûŒªœÖ, c
‚Ä≤ ‚àà ‚àûŒªœÖ. We have two ases:
1
It always exists sine the sets Pos(ai) are nite. If there were more than one minimal element, it sues
to take the left-most b etween them.
86
4.2 Perp etuality
i. a = C ‚Ä≤{d‚Ä≤[‚áër (c‚Ä≤/)]} ‚ÜíœÖ b, with the œÖ-redex dierent from d
‚Ä≤[‚áër (c‚Ä≤/)] (in d‚Ä≤, in c‚Ä≤
or elsewhere in C ‚Ä≤). But then n would b e greater than 1, ontraditing the urrent
assumption n = 1.
ii. The redex is d‚Ä≤[‚áër (c‚Ä≤/)]. Then, by Lemma 4.2.15, either c‚Ä≤ ‚àà S(b), whih implies
that c‚Ä≤ ‚àà SNŒªœÖ by Remark 4.1.2(2) (sine b ‚àà SNŒªœÖ); or c
‚Ä≤ ‚àà S(h) where h is
the garbage of the redution, but the additional requirement h ‚àà SNŒªœÖ implies
that c‚Ä≤ ‚àà SNŒªœÖ by Remark 4.1.2(2). In either ase c
‚Ä≤ ‚àà SNŒªœÖ, ontraditing the
previous fat that c‚Ä≤ ‚àà ‚àûŒªœÖ.
2. Case n > 1.
Let D := a = a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . b e a minimal innite redution from a (it always exists
sine the set of redutions is well-founded). As b efore, sine b ‚àà SNŒªœÖ then œÖ(b) ‚àà SNŒ≤,
then as a ‚ÜíœÖ, b, œÖ(a) = œÖ(b) ‚àà SNŒ≤. Then we use Lemma 4.2.12 applied to a, and we
have that ‚àÉ k ‚â• 1, p ‚àà Pos(a), a ontext C, a term d and substitutions s1, s2, s3, . . . suh
that
a = a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ ak = C{d[s1‚ÑÑ}p ‚Üí
int
ŒªœÖ C{d[s2‚ÑÑ}p ‚Üí
int
ŒªœÖ C{d[s3‚ÑÑ}p ‚Üí
int
ŒªœÖ . . .
with s1 ‚ÜíŒªœÖ s2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ sk ‚ÜíŒªœÖ. . . Thus ‚àÄi ‚â• 1 si 6=‚áë
k(‚Üë) (sine ‚àÄk ‚áëk (‚Üë) has
no redexes ), so ‚àÄi ‚â• 1 si =‚áë
k (ei/) with ei ‚àà ŒõœÖ, and therefore e1 ‚ÜíŒªœÖ e2 ‚ÜíŒªœÖ . . . , so
e1 ‚àà ‚àûŒªœÖ.
By the many-step Closure Traing Lemma, there are two p ossibilities:
(a) Either ‚àÉ j ‚â§ k, pj ‚àà Pos(a), a ontext C', a term b suh that aj = C'{(Œªd
‚Ä≤
) ej' }pj,
with ej' ‚Üí
‚àó
ŒªœÖ ej. So we have another innite derivation
D' := a1 ‚ÜíŒªœÖ a2 ‚ÜíŒªœÖ . . . ‚ÜíŒªœÖ aj = C'{(Œªd
‚Ä≤
) ej' }pj
‚ÜíŒªœÖ C'{d
‚Ä≤
[ej'/‚ÑÑ }pj ‚Üí
‚àó
ŒªœÖ C'{d
‚Ä≤
[ej /‚ÑÑ}pj ‚ÜíŒªœÖ . . .
satisfying D' ‚à† D, thus ontraditing the minimality of D.
(b) Or ‚àÉr, d‚Ä≤, c‚Ä≤ suh that c‚Ä≤ ÷âŒªœÖ e1 and ‚áë
r (d‚Ä≤[c‚Ä≤/]) ‚àà S(a1) (i.e., the losure or some
anestor is already in a1). Sine c
‚Ä≤ ÷âŒªœÖ e1 ‚àà ‚àûŒªœÖ, c
‚Ä≤ ‚àà ‚àûŒªœÖ. We have two ases:
i. the redution step takes plae in c‚Ä≤, i.e., a = C ‚Ä≤{d‚Ä≤[‚áër (c‚Ä≤/)]} ‚ÜíœÖ b
= C ‚Ä≤{d‚Ä≤[‚áër (c‚Ä≤‚Ä≤/)]} with c‚Ä≤ ‚ÜíœÖ c
‚Ä≤‚Ä≤
. Sine b ‚àà SNŒªœÖ, by Remark 4.1.2(2) c
‚Ä≤‚Ä≤ ‚àà SNŒªœÖ,
and then by IH we have that c‚Ä≤ ‚àà SNŒªœÖ, ontraditing the previous fat that
c‚Ä≤ ‚àà ‚àûŒªœÖ.
ii. the redution step do es not take plae in c‚Ä≤. Then, by Lemma 4.2.15, either
c‚Ä≤ ‚àà S(b), whih implies that c‚Ä≤ ‚àà SNŒªœÖ by Remark 4.1.2(2) (sine b ‚àà SNŒªœÖ); or
c‚Ä≤ ‚àà S(h) where h is the garbage of the redution, but the additional requirement
h ‚àà SNŒªœÖ implies that c
‚Ä≤ ‚àà SNŒªœÖ by Remark 4.1.2(2). In either ase c
‚Ä≤ ‚àà SNŒªœÖ,
ontraditing the previous fat that c‚Ä≤ ‚àà ‚àûŒªœÖ.
87
4.2 Perp etuality
‚ú∑
To the ab ove p erp etuality analysis we will add the ase of Corollary 4.2.19(2) to allow the
use of the (B) rule.
Note that the preeding pro of fails if one onsiders the redution of a term of the form
((Œªa)b)[s1]. . .[sk]a1a2. . .an ‚Üí a[b/][s1]. . .[sk]a1a2. . .an, sine the (App) rule an b e applied and
then ((Œªa‚Ä≤)[s‚Ä≤1]b
‚Ä≤[s‚Ä≤1])[s
‚Ä≤
2]. . .[s
‚Ä≤
k]a
‚Ä≤
1a
‚Ä≤
2. . .a
‚Ä≤
n an app ear in the derivation.
The previous p erp etuality analysis has shown the following (reall Denition 4.2.14 for the
‚Üíg redution).
Corollary 4.2.19 (Perp etuality Prop osition for ŒªœÖ) The fol lowing hold:
1. Let c, c‚Ä≤ ‚àà ŒõœÖ, with c‚Üíg c
‚Ä≤
. Then: c ‚àà SNŒªœÖ ‚áî c
‚Ä≤ ‚àà SNŒªœÖ.
2. For n ‚â• 0, a[b/]a1a2. . .an ‚àà SNŒªœÖ ‚áî (Œªa)ba1a2. . .an ‚àà SNŒªœÖ
Proof:
1. (‚áí) Trivially by Remark 4.1.2(1)
(‚áê) By Lemma 4.2.18.
2. (‚áê) Trivially by Remark 4.1.2(1).
(‚áí) Supp ose a[b/‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ and
(Œªa)ba1a2 . . . an /‚àà SNŒªœÖ; thus, all a, b, a1, a2, . . . , an ‚àà SNŒªœÖ by Remark 4.1.2(2) and
(Œªa)ba1a2 . . . an ‚àà ‚àû. By the ŒªœÖ rules any innite derivation of (Œªa)ba1a2 . . . an must
have the form
(Œªa)ba1a2 . . . an ÷â (Œªa
‚Ä≤)b‚Ä≤a‚Ä≤1a
‚Ä≤
2 . . . a
‚Ä≤
n ‚ÜíBeta a
‚Ä≤[b‚Ä≤/]a‚Ä≤1a
‚Ä≤
2 . . . a
‚Ä≤
n ‚Üí . . .
where a÷â a‚Ä≤ and b÷â b‚Ä≤, ‚àÄ1 ‚â§ i ‚â§ n ai ÷â a
‚Ä≤
i (for, sine a, b, a1, a2, . . . an ‚àà SNŒªœÖ, none
of them an have an innite derivation).
But then we also have that a[b/]a1a2 . . . an ÷â a
‚Ä≤[b‚Ä≤/]a‚Ä≤1a
‚Ä≤
2 . . . a
‚Ä≤
n ‚Üí . . .
whih is an innite derivation; so a[b/]a1a2 . . . an ‚àà ‚àû, a ontradition sine it was
supp osed to b e SN.
‚ú∑
4.2.2 Disussion
The meaning of the ab ove results is that safe redutions preserves SN and an b e losure-
traed to SN terms. The reader should realize that the so dened safe redution onstitutes
a subsys te m of the original alulus when restrited to the set of terms admitting an innite
derivation. The ondition of safe redution annot b e lo osened: the garbage should b e SN,
88
4.3 A haraterization of SN
otherwise the p ossibility of innite redution ould b e lost. The following term in ŒªœÖ is an
example: a = (Œª2)((Œª11)(Œª11)), whih is the equivalent of the lassial (Œªx.y)‚Ñ¶, where ‚Ñ¶ =
(Œªx.xx)(Œªx.xx). As it an b e seen easily, a‚Üí 2[(Œª11)(Œª11)/] ‚Üí 1 ‚àà SNŒªœÖ but
2[(Œª11)(Œª11)/] /‚àà SNŒªœÖ.
Perp etuality will not b e neess arily valid in other known expliit substitution aluli. Let us
onsider a alulus with omp osition, for example ŒªœÉ. Then, for instane, it will not b e nees-
sarily true that any innite derivation of (ab)[s1][s2] has the form (ab)[s1][s2]÷â (a
‚Ä≤b‚Ä≤)[s‚Ä≤1][s
‚Ä≤
2]÷â
(a‚Ä≤[s‚Ä≤1]b
‚Ä≤[s‚Ä≤1])[s
‚Ä≤
2] ÷â . . . The reason is the existene of the omp osition rule whih has the form
d[s][t] ‚Üí d[s ‚ó¶ t], and therefore (ab)[s1][s2] ‚Üí (ab)[s1 ‚ó¶ s2] ‚Üí . . . and we annot ensure that
a term of the form (a‚Ä≤[s1])(b
‚Ä≤[s1])[s
‚Ä≤
2] will b e eventually ahieved in that derivation. Thus for
ŒªœÉ, whih is usually taken as the main representative of the family to where ŒªœÖ b elongs, the
present argument will not work.
We note also that we ould have pro eeded analogously dening the garbage always as a
term (and not as a substitution), i.e., the garbage of (m+ 1)[a/] ‚Üí m b eing the term a, for all
m ‚â• 1, and the garbage of 1[‚áëj (a/)] ‚Üí 1 b eing the term a, for all j ‚â• 1. This will lead to the
same result sine, for every j ‚â• 0, ‚áëj (a/) ‚àà SN ‚áî a/ ‚àà SN ‚áî a ‚àà SN .
4.3 A harateri zat i o n of SNŒªœÖ
In this setion we will treat a haraterization of an interesting set of terms (atually a
sub-ARS). We will p ose formation rules for stating memb ership to that set.
Let us remark that a formation rule for a set is written as: the name of the rule, a list of
preonditions, and a onlusion stating some formed term whih should b e a memb er of that
set. Suh a rule means that, if the premises are already in the set, and if the side ondition
(whih will b e indeed a syntati ondition on the premises and/or the onlusion) also holds,
then the onlusion term will b e in the set to o. In some of the rules there might b e no premises,
or no side ondition, or p erhaps neither premises nor side ondition. When we dene a set using
this style of rules, we mean that this set is the least set (with resp et to set-theoreti inlusion)
for whih all the rules hold. Hene one appliation will b e to prove prop erties of a set dened
in suh a fashion, whih will b e p ossible after this if we use indution, more preisely indution
in the (length of the) pro of that a given term is a memb er of this set.
Thus, in this setion, as an appliation of the previous result, we formulate and prove for ŒªœÖ
an indutive haraterization of the SNŒªœÖ set, analogous to the one presented in (82) for the
pure Œª alulus and the one in (17) for Œªx. The goal is to haraterize indutively the family of
SN terms for most aluli as to allow indutive pro ofs for these terms. This of ourse do es not
imply that suh a set is reursive, but it gives a manner to prove that all its elements satisfy
some given prop erty.
89
4.3 A haraterization of SN
4.3.1 Denition and remarks
For all a ‚àà SNŒªœÖ we dene maxred(a) to b e the maximum length of any derivation from
a in the usual way. In other words, maxred(a) = max{n ‚àà IN / ‚àÉa1, a2, . . . , an ‚àà ŒõœÖ with
a‚Üí a1 ‚Üí a2 ‚Üí . . . ‚Üí an}.
Note that maxred(a) ‚â• 0, and maxred(a) = 0 ‚áî a ‚àà NFŒªœÖ. Note also that by the denition
of ŒõœÖ we are dening maxred not only for terms but also for substitutions. We extend maxred
to all ŒõœÖ dening it to b e ‚àû when applied to terms whih are not in SN. In other words,
maxred(a) = ‚àû‚áî a ‚àà ‚àûŒªœÖ.
Denition 4.3.1 Let SœÖ ‚äÜ ŒõœÖ be the smal lest set losed under the fol lowing inferene rules.
In al l of them, a, b, a1,a2, a3, . . . , an wil l denote terms of ŒõœÖ (i.e., elements of Œõ
t
œÖ) and s1, . . . ,
sk wil l denote substitutions (i.e., elements of Œõ
s
œÖ). For every rule we assume ‚àÄn ‚â• 0, ‚àÄk ‚â• 0,
‚àÄm ‚â• 1.
1.
a[b/]a1a2 . . . an ‚àà SœÖ
Œª‚àí I
(Œªa)ba1a2 . . . an ‚àà SœÖ
2.
(a[s]b[s])[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
App
ab[s][s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
3.
Œª(a[‚áë (s)])[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
‚áë ‚àíE
(Œªa)[s][s1] . . . [sk]a1a2 . . . an ‚àà SœÖ
4.
a[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
F []‚àí I
1[a/][s1] . . . [sk]a1a2 . . . an ‚àà SœÖ
5.
m[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ, a ‚àà SœÖ
R[]‚àí I
m+1[a/][s1] . . . [sk]a1a2 . . . an ‚àà SœÖ
6.
1[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ, s ‚àà SœÖ
F ‚áë ‚àíI
1[‚áë (s)][s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
7.
m[s][‚Üë][s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
(R ‚áë ‚àíI) or (‚Üë ‚àíE)
m+1[‚áë (s)][s1] . . . [sk]a1a2 . . . an ‚àà SœÖ
8.
m+1[s1]. . .[sk]a1a2 . . . an ‚àà SœÖ
‚Üë ‚àíI
m[‚Üë][s1] . . . [sk]a1a2 . . . an ‚àà SœÖ
90
4.3 A haraterization of SN
9.
a ‚àà SœÖ
Abs‚àí I
Œªa ‚àà SœÖ
10.
a ‚àà SœÖ
/‚àí I
a/ ‚àà SœÖ
11.
s ‚àà SœÖ
‚áë ‚àíI
‚áë (s) ‚àà SœÖ
12.
‚Üë ‚àíG
‚Üë‚àà SœÖ
13.
a1, a2, . . . , an ‚àà SœÖ
var ‚àí I
ma1a2 . . . an ‚àà SœÖ
For onveniene, we have adopted the rule names indiated at the right side of eah one.
In them, x-I stands for x-intro dution, x-E stands for x-elimination, and x-G stands for
x-generation (for rule ‚Üë-G only).
SœÖ is nonempty, even without onsidering the rule (12), b eause the (var-I) rule serves as a
startup rule sine it is valid ‚àÄn ‚â• 0. Thus, for instane, m ‚àà SœÖ ‚àÄm ‚àà IN (applying (var-I) for
n = 0).
Let S b e SœÖ. When from c1 ‚àà S, c2 ‚àà S, . . . , cn ‚àà S the r rule is applied to infer that c ‚àà S,
we will use the symb ol ‚ä¢r and write:
c1, c2, . . . , cn ‚ä¢
r c.
Finally, when from c1 ‚àà S, c2 ‚àà S, . . . , cn ‚àà S some rule is applied to infer that c ‚àà S, we
will use the symb ol ‚ä¢ and write:
c1, c2, . . . , cn ‚ä¢ c.
4.3.2 Denitions and remarks
Remark 4.3.2 For al l a ‚àà SœÖ there exists d ‚â• 0 and some a1,a2, a3, . . . , ad suh that
ad = a and ‚àÄ1 ‚â§ i ‚â§ d,
1. either ai ‚àà IN or ai =‚Üë
2. or ‚àÉ r1, . . . , rn ‚àà IN, with n ‚â• 0, suh that ‚àÄ1 ‚â§ k ‚â§ n: rk < i and ar1, . . . , arn ‚ä¢ ai
Denition 4.3.3 A sequene a1,a2, a3, . . . , ad satisfying the above onditions, wil l be al led
an inferene of a ‚àà SœÖ, and we wil l write a1,a2, a3, . . . , ad ‚ä¢ a. Its length wil l be d.
Denition 4.3.4 For a ‚àà SœÖ we dene minder(a) = min{d ‚àà IN / there exists an inferene of
a with length d} = min{d ‚àà N / ‚àÉa1,a2, a3, . . . , ad ‚àà ŒõœÖ suh that a1,a2, a3, . . . , ad ‚ä¢ a}
1
.
1
We ould extend the minder denition to all ŒõœÖ , by dening minder(a)=‚àû for a /‚àà SœÖ .
91
4.3 A haraterization of SN
That is, minder(a) denotes the minimum length of any derivation of a ‚àà SœÖ. A derivation of
minimum length of a is alled a minimal derivation. Note there always exist minimal derivations
‚àÄa ‚àà SœÖ sine the set of lengths of derivations of any a ‚àà SœÖ is a nonempty subset of IN, hene
it has a minimum element. Note also that minder(a) is nite ‚àÄa ‚àà SœÖ.
4.3.3 Auxili ary results
Before proving the main result of this setion, we will need the following easy auxiliary
results.
Remark 4.3.5 Let a, a1,a2, a3, . . . , an be terms, with n ‚â• 0, let s be a substitution and let m
‚â• 1. Then
1. a1,a2, a3, . . . , an ‚àà SNŒªœÖ ‚áî ma1a2 . . . an ‚àà SNŒªœÖ
2. a ‚àà SNŒªœÖ ‚áî Œªa ‚àà SNŒªœÖ
3. a ‚àà SNŒªœÖ ‚áî a/ ‚àà SNŒªœÖ
4. s ‚àà SNŒªœÖ ‚áî‚áë (s) ‚àà SNŒªœÖ
Proof:
1. (‚áê) Obvious by Remark 4.1.2(2) sine all a1,a2, a3, . . . , an are sub-terms of
ma1a2 . . . an.
(‚áí) In the innite derivation ma1a2 . . . an ‚Üí ma1'a2' . . . an' ‚Üí . . . the only redexes
are inside the terms ai, ai', . . . ; therefore, by K√∂nig's lemma, ‚àÉ k, 1 ‚â§ k ‚â§ n, suh that
ak ‚Üí ak' ‚Üí . . . is an innite derivation, whih is an absurd sine ‚àÄ1 ‚â§ i ‚â§ n, ai ‚àà SN.
2. (‚áê) Obvious by Remark 4.1.2(2) sine a is a sub-term of Œªa.
(‚áí) In the innite derivation Œªa‚Üí Œªa‚Ä≤ ‚Üí . . . the only redexes are inside the terms a, a‚Ä≤,
. . . ; then a‚Üí a‚Ä≤ ‚Üí . . . is an innite derivation, whih is an absurd sine a ‚àà SN.
3. (‚áê) Obvious by Remark 4.1.2(2) sine a is a sub-term of a/.
(‚áí) In the innite derivation a/‚Üí a‚Ä≤/‚Üí . . . the only redexes are inside the terms a, a‚Ä≤,
. . . ; then a‚Üí a‚Ä≤ ‚Üí . . . is an innite derivation, whih is an absurd sine a ‚àà SN.
4. (‚áê) Obvious by Remark 4.1.2(2) sine s is a sub-term of ‚áë (s).
(‚áí) In the innite derivation ‚áë (s) ‚Üí‚áë (s‚Ä≤) ‚Üí . . . the only redexes are inside the terms
s, s‚Ä≤, . . . ; then s‚Üí s‚Ä≤ ‚Üí . . . is an innite derivation, whih is an absurd sine s ‚àà SN.
‚ú∑
92
4.3 A haraterization of SN
The idea b ehind the following lemma is that for every term one an p eel o  all appliations
leaving a term whih an b e an index, an abstration or a losure, where in the last ase we
an again p eel o  all losures nally arriving to an index, an abstration or an appliation.
Lemma 4.3.6 Every term c ‚àà ŒõtœÖ has one and only one of the fol lowing forms:
1. c = ma1a2. . .an, with n ‚â• 0
2. c = (Œªa)a1a2. . .an, with n ‚â• 0
3. c = a[s1][s2]. . .[sk]a1a2. . .an with n ‚â• 0, k ‚â• 1 and a not a losure (i.e., a an be an
index, an abstration or an appliation)
Proof: By indution on c. ‚ú∑
Note we ould replae the last lause by
3'. c = a[s‚ÑÑ a1a2 . . . an with n ‚â• 0 and a is any term
but we prefer the ab ove formulation, whih intuitively p eels o  rst all appliations and
then all losures.
Let us justify the eletion of the rules. The following result will state that given a SNŒªœÖ term
or substitution its inferene tree an b e deterministially onstruted.
Lemma 4.3.7 The above inferene rules are deterministi, i.e., for al l terms and substitutions
c ‚àà SœÖ there exists a unique rule whih ould have been applied to obtain c. Therefore this is
true for every step in any derivation of c.
Proof: Immediate onseque n  e of Lemma 4.3.6. ‚ú∑
Lemma 4.3.8 Let c1, . . . , cn, c ‚àà SNŒªœÖ with n ‚â• 0.
1. Let r be any rule among the rules (1) to (8). If c1 ‚ä¢
r c then maxred(c1) < maxred(c)
2. Let r be any rule among the rules (9) to (11). If c1 ‚ä¢
r c, then maxred(c) = maxred(c1).
3. Let r be any rule. If c1 ‚ä¢
r c (resp., c1, c2, . . . , cn ‚ä¢
r c), then minder(c1) < minder(c)
(resp., minder(ci) < minder(c) for 1 ‚â§ i ‚â§ n).
4. Consider the (var-I) rule. Then ‚àÄ1 ‚â§ i ‚â§ n, maxred(ci) ‚â§ maxred(c).
Proof:
1. In all ases we have that c‚Üí c1. Thus, if c1 ‚Üí a1 ‚Üí a2 ‚Üí a3 ‚Üí . . .‚Üí ad is a derivation
of maximum length from c1, then c ‚Üí c1 ‚Üí a1 ‚Üí a2 ‚Üí a3 ‚Üí . . . ‚Üí ad is a derivation
from c, therefore maxred(c) ‚â• maxred(c1) + 1 > maxred(c1).
93
4.3 A haraterization of SN
2. It trivially follows from the following fats that an b e shown by easy indution in the
length of the term a and in the length of the substitution s:
a‚Üí a‚Ä≤ ‚áî Œªa‚Üí Œªa‚Ä≤
a‚Üí a‚Ä≤ ‚áî a/‚Üí a‚Ä≤/
s‚Üí s‚Ä≤ ‚áî ‚áë (s) ‚Üí‚áë (s‚Ä≤)
3. Using the fat that the rules are deterministi (Lemma 4.3.7).
4. Sine any redex in mc1 . . . cn is a redex within some ci.
‚ú∑
Now we give the main result for SNŒªœÖ.
Prop osition 4.3.9 The above rules haraterize SNŒªœÖ, i.e., SœÖ = SNŒªœÖ.
Proof: (‚äÜ) Let c ‚àà SœÖ. We will show that c ‚àà SNŒªœÖ by indution in minder(c) (whih is
nite).
If minder() = 1, then either c ‚àà IN or c =‚Üë, and in either ase c ‚àà SNŒªœÖ trivially follows.
If minder() > 1, we have the following ases for c (one for eah rule onlusion).
If c is a term:
1. c= ma1a2 . . . an where a1, a2, . . . , an ‚àà SœÖ, with n ‚â• 0 and m ‚â• 1; i.e., the (var-I) rule
was last applied. So, sine by Lemma 4.3.8 (4) ‚àÄ1 ‚â§ i ‚â§ n minder(ai) < minder(c), then
by IH a1, a2, . . . , an ‚àà SNŒªœÖ and, by Remark 4.3.5 (1), c ‚àà SNŒªœÖ.
2. c = Œªa where a ‚àà SœÖ; i.e., the (Abs-I) rule was last applied. So, sine by Lemma 4.3.8 (3)
minder(a) < minder(Œªa), then by IH, a ‚àà SNŒªœÖ and, by Remark 4.3.5 (2), Œªa ‚àà SNŒªœÖ.
3. c= (Œªa)ba1a2 . . . an where a[b /‚ÑÑ a1a2 . . . an ‚àà SœÖ and b ‚àà SœÖ, with n ‚â• 0; i.e., the (Œª-I)
rule was last applied. So by IH, sine by Lemma 4.3.8 (3) a minimal derivation of a[b /‚ÑÑ
a1a2 . . . an ‚àà SœÖ has length less than the length of a minimal derivation of c, then a[b
/‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ, and, sine c ‚Üíg a[b /‚ÑÑ a1a2 . . . an, then, by the Perp etuality
Prop osition (Corollary 4.2.19 (2)), (Œªa)ba1a2 . . . an ‚àà SNŒªœÖ.
For c having the form a‚Ä≤[s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an we an have:
1. c= (Œªa) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ
and s ‚àà SœÖ, with k ‚â• 0 and n ‚â• 0; i.e., the (‚áë-E) rule was last applied. So by IH, sine
by Lemma 4.3.8 (3) a minimal derivation of Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ
has length less than the length of a minimal derivation of c, then Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ
a1a2 . . . an ‚àà SNŒªœÖ, and, sine c ‚Üíg Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an, then by the
Perp etuality Prop osition (Corollary 4.2.19 (2)) c ‚ààSNŒªœÖ.
94
4.3 A haraterization of SN
2. c= (ab) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ ‚àà SœÖ and s ‚àà SœÖ, with k
‚â• 0 and n ‚â• 0; i.e., the (App) rule was last applied. So by IH, sine by Lemma 4.3.8 (3)
a minimal derivation of (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà S has length less than the
length of a minimal derivation of c, then (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ, and,
sine c‚Üíg (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an, then by p erp etuality c ‚àà SNŒªœÖ.
3. c= 1 [a /‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where a [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, with k ‚â• 0
and n ‚â• 0; i.e., the (F[‚ÑÑ-I) rule was last applied. So by IH, sine by Lemma 4.3.8 (3) a
minimal derivation of a [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ has length less than the length of a
minimal derivation of c, then a [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ, and, sine c‚Üíg a[s1‚ÑÑ . . .
[sk‚ÑÑ a1a2 . . . an, then by p erp etuality c ‚àà SNŒªœÖ.
4. c= (m+1) [a/‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ and a ‚àà SœÖ,
with k ‚â• 0, n ‚â• 0 and m ‚â• 1; i.e., the (R[‚ÑÑ-I) rule was last applied. So by IH, sine by
Lemma 4.3.8 (3) a minimal derivation of m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ has length less
than the length of a minimal derivation of c, then m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ,
and, sine minder(a) < minder(c), then a ‚àà SNŒªœÖ; then, sine c ‚Üíg m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2
. . . an, by p erp etuality, c ‚àà SNŒªœÖ.
5. c= 1 [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ and s ‚àà SœÖ,
with k ‚â• 0 and n ‚â• 0; i.e., the (F‚áë-I) rule was last applied. So by IH, sine by Lemma
4.3.8 (3) a minimal derivation of 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ has length less than the
length of a minimal derivation of c, then 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ, and, sine
minder(s) < minder(), then s ‚àà SNŒªœÖ; then, sine c ‚Üíg 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an, by
p erp etuality, c ‚àà SNŒªœÖ.
6. c= (m + 1) [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ
with k ‚â• 0, n ‚â• 0 and m ‚â• 1; i.e., the (R‚áë-I) rule was last applied. So by IH, sine
by Lemma 4.3.8 (3) a minimal derivation of m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ has
length less than the length of a minimal derivation of c, then m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2
. . . an ‚àà SNŒªœÖ, and, sine c ‚Üíg m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an, then by p erp etuality
c ‚àà SNŒªœÖ.
7. c= m [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an where m + 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, with k ‚â• 0,
n ‚â• 0 and m ‚â• 1; i.e., the (‚Üë-I) rule was last applied. So, by IH, sine by Lemma 4.3.8
(3) a minimal derivation of (m+ 1) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ has length less than the
length of a minimal derivation of c, then (m + 1) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SNŒªœÖ, and,
sine c‚Üíg (m+ 1) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an, then by p erp etuality c ‚àà SNŒªœÖ.
Otherwise, c is a substitution, and we have the following ases:
95
4.3 A haraterization of SN
1. c = a/ where a ‚àà SœÖ, i.e., the (/-I) rule was last applied. So, sine by Lemma 4.3.8 (3)
minder(a) < minder(c) then, by IH, a ‚àà SNŒªœÖ, and, by Remark 4.3.5 (2), c ‚àà SNŒªœÖ.
2. c =‚áë (s) where s ‚àà SœÖ, i.e., the (‚áë-I) rule was last applied. So, sine by Lemma 4.3.8 (3)
minder(s) < minder(c) then, by IH, s ‚àà SNŒªœÖ, and, by Remark 4.3.5 (4), c ‚àà SNŒªœÖ.
3. c =‚Üë, i.e., the ‚Üë-G rule was applied in a minimal derivation. But c ‚àà SNŒªœÖ sine ‚Üë is a
normal form.
(‚äá) Let c ‚àà SNŒªœÖ. We will show by lexiographi indution in (maxred(c), |c|) that c ‚àà SœÖ.
If c is a term, by Lemma 4.3.6, we have the following p ossible ases:
1. c = ma1a2 . . . an with n ‚â• 0 and m ‚â• 1, and therefore by Remark 4.1.2(2), a1, a2, . . . ,
an ‚àà SNŒªœÖ. Beause by Lemma 4.3.8 (4), ‚àÄ1 ‚â§ i ‚â§ n ( maxred(ai) ‚â§ maxred(c) and
(maxred(ai) = maxred(c) ‚áí |ai| < |c|) ), then we an use the IH, so all a1, a2, . . . ,
an ‚àà SœÖ; then, by the (var-I) rule, ma1a2 . . . an ‚àà SœÖ.
2. c = Œªa, and therefore by Remark 4.1.2(2), a ‚àà SN. Sine by Lemma 4.3.8(2) maxred(c) =
maxred(a), and |a| < |a| + 1 = |c|, then, by IH, a ‚àà SœÖ; then, by the (Abs-I) rule, c ‚àà SœÖ.
3. c = (Œªa)ba1a2 . . . an with n ‚â• 0, and therefore by Remark 4.1.2(2), a, b, a1a2 . . .
an ‚àà SNŒªœÖ. By Lemma 4.3.8(1), maxred(a[b/‚ÑÑ a1a2 . . . an) < maxred(c), and then by IH
a[b/‚ÑÑ a1a2 . . . an ‚àà SœÖ;then, by the (Œª-I) rule, c ‚àà SœÖ.
For c having the form a‚Ä≤[s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an we an have:
1. c = (Œªa) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0 and n ‚â• 0, and therefore by Remark
4.1.2(2), s, s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8(1), maxred(Œª(a[‚áë (s)‚ÑÑ)
[s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an) < maxred(c), and then by IH Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . .
an ‚àà SœÖ;then, by the (‚áë-E) rule, c ‚àà SœÖ.
2. c = (ab) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0 and n ‚â• 0, and therefore by Remark
4.1.2(2), a, b, s, s1, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By IH, a, b, s, s1, . . . , sk, a1, a2, . . . ,
an ‚àà SœÖ, and sine by Lemma 4.3.8 (1) maxred ((a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an) <
maxred(c), (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ; then, by the (App) rule, c ‚àà SœÖ.
3. c = 1[a /‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0 and n ‚â• 0, and therefore by Remark 4.1.2(2),
a, s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8 (1), maxred(a[s1‚ÑÑ . . . [sk‚ÑÑ a1a2
. . . an) < maxred(c), and then by IH, sine a ‚àà SœÖ, by the (F[‚ÑÑ-I) rule, c ‚àà SœÖ.
4. c = (m+ 1) [a/‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0, n ‚â• 0 and m ‚â• 1, and therefore by
Remark 4.1.2(2), a, s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8 (1), maxred(
m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an) < maxred(c), and sine maxred(a) < maxred(c), then by IH
a ‚àà SœÖ, and m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ; then, by the (R[‚ÑÑ-I) rule, c ‚àà SœÖ.
96
4.3 A haraterization of SN
5. c = 1 [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0 and n ‚â• 0, and therefore by Remark
4.1.2(2), s, s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8 (1), maxred( 1 [s1‚ÑÑ . . .
[sk‚ÑÑ a1a2 . . . an) < maxred(c), and sine maxred(s) < maxred(c), then by IH s ‚àà SœÖ, and
1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ;then, by the (F‚áë-I) rule, c ‚àà SœÖ.
6. c = (m+1) [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0, n ‚â• 0 and m ‚â• 1, and therefore by
Remark 4.1.2(2), s, s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8 (1), maxred(
m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an) < maxred(c), and then by IH m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2
. . . an ‚àà SœÖ;then, by the (R‚áë-I) rule, c ‚àà SœÖ.
7. c = m [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with k ‚â• 0, n ‚â• 0 and m ‚â• 1, and therefore by Remark
4.1.2(2), s1, s2, . . . , sk, a1, a2, . . . , an ‚àà SNŒªœÖ. By Lemma 4.3.8 (1), maxred( (m + 1)
[s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an) < maxred(c), and then by IH (m + 1) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . .
an ‚àà SœÖ;then, by the (‚Üë-I) rule, c ‚àà SœÖ.
Otherwise, c is a substitution, and we have the following ases:
1. c = a/, and therefore by Remark 4.1.2(2), a ‚àà SNŒªœÖ. Sine by Lemma 4.3.8 (2), maxred(a)
= maxred(c), and |a| < |a| + 1 = |c|, then, by IH a ‚àà SœÖ;then, by the (/-I) rule, c ‚àà SœÖ.
2. c =‚áë (s), and therefore by Remark 4.1.2(2), s ‚àà SNŒªœÖ. Sine by Lemma 4.3.8 (2),
maxred(s) = maxred(c), and |s| < |s| + 1 = |c|, then, by IH s ‚àà SœÖ;then, by the (‚áë-I)
rule, c ‚àà SœÖ.
3. c =‚Üë; then, by the (‚Üë-G) rule, c ‚àà SœÖ.
‚ú∑
4.3.4 Disussion
We have proved the previous indutive haraterization of SNŒªœÖ with the partiularity that
this set inludes not only terms but also substitutions. This required a bigger numb er of ases
to analyze but it was straightforward when grouping terms and substitutions in the same set.
As it an b e seen, we have tried to keep the rule set as small as p ossible. We have some
evidene that the given rule set annot b e substantially simplied or redued. The rules are
deterministi in a sense; this means that unique pro ofs of memb ership to SNŒªœÖ an b e easily
obtained, although if the term is not in SNŒªœÖ, nothing an b e done and the system will not
provide any help sine it is undeidable whether a given term is in the set of SN terms for all
reasonable lamb da aluli.
97
4.3 A haraterization of SN
4.3.5 A p erp etual redution strategy for ŒªœÖ
We reall (4; 17; 82) for the denition of redution strategies and perpetual redution strategies
for TRSs, as well as disussions ab out their signiane. For the sake of larity we remind the
following denition in the way we will use it.
Denition 4.3.10 A perpetual redution strategy for ŒªœÖ is a funtion F : ŒõœÖ ‚Üí ŒõœÖ suh that
for al l a ‚àà ŒõœÖ
1. a ‚àà NFœÖ ‚áí F(a) = a
2. a /‚àà NFœÖ ‚áí a‚ÜíŒªœÖ F(a)
3. a ‚àà Œõ‚àû ‚áí F(a) ‚àà Œõ‚àû
When F satises only (1) and (2), it is just al led a redution strategy.
Note that, sine this alulus is two-sorted, F is dened to b e applied b oth to terms and
substitutions, this b eing a dierene with resp et to Œªx.
We give here a p erp etual redution strategy for ŒªœÖ based in the previous haraterization. We
reall the notion of left-most redex and left-most redution ‚ÜíŒªœÖ,l (whih we will not formalize
in detail).
Denition 4.3.11 We dene F : ŒõœÖ ‚Üí ŒõœÖ by the fol lowing:
1. If u ‚àà ŒõœÖ‚àíNFœÖ , let u = C{‚àÜ} where C is a ontext and ‚àÜ ‚àà ŒõœÖ is the left-most ŒªœÖ-redex
of u. In this ase we dene F (u) as fol lows:
‚Ä¢ For terms:
F (C{(Œªa)b}) = C{a[b/]}
F (C{(Œªa)[s]}) = C{Œªa[‚áë (s)]}
F (C{(ab)[s]}) = C{a[s]b[s]}
F (C{1[a/]}) = C{a} if a ‚àà NFœÖ
F (C{1[a/]}) = C{1[F (a)/]} if a /‚àà NFœÖ
F (C{(m+ 1)[a/]}) = C{m} if a ‚àà NFœÖ
F (C{(m+ 1)[a/]}) = C{(m+ 1)[F (a)/]} if a /‚àà NFœÖ
F (C{1[‚áë (s)]}) = C{1} if s ‚àà NFœÖ
F (C{1[‚áë (s)]}) = C{1[‚áë (F (s))]} if s /‚àà NFœÖ
F (C{(m+ 1)[‚áë (s)]}) = C{m[s][‚Üë]} if s ‚àà NFœÖ
F (C{(m+ 1)[‚áë (s)]}) = C{(m+ 1)[‚áë (F (s))]} if s /‚àà NFœÖ
F (C{m[‚Üë]}) = C{m+ 1}
98
4.3 A haraterization of SN
‚Ä¢ For substitutions:
F (‚áë (s)) = ‚áë (F (s))
F (b/) = F (b)/
2. If u ‚àà NFœÖ, we dene F (u) = u. (For instane, F (‚Üë) =‚Üë.)
Remark 4.3.12 F is a redution strategy (F satises (1) and (2) by simple inspetion of eah
lause above.) Moreover, F is eetive (i.e. deidable), sine the omputation of the left-most
ŒªœÖ-redex as wel l as the problem of whether a given term is a ŒªœÖ-normal form are both deidable.
Remark 4.3.13 The strategy F dened above satises the fol lowing properties:
1. F(ab) = F(a)b if the left-most redex of ab belongs to a
2. F(ab) = a F(b) if the left-most redex of ab belongs to b
3. F(Œªa) = ŒªF(a)
4. F(a[s‚ÑÑ) = F(a)[s‚ÑÑ if the left-most redex of a[s‚ÑÑ belongs to a
5. F(a[s‚ÑÑ) = a[F(s)‚ÑÑ if the left-most redex of a[s‚ÑÑ belongs to s
6. F(‚áë (s)) = ‚áë(F(s))
We will need the following lemma whih states that F follows left-most redexes .
Lemma 4.3.14 Let a = C{‚àÜ} ‚àà ŒõœÖ - NFœÖ where C is a ontext and ‚àÜ ‚àà ŒõœÖ is the left-most
ŒªœÖ-redex of a. Then F(a) = C{F(‚àÜ)}.
Proof: We use indution on C. We have the following ases:
1. C = ‚ú∑, then a = ‚ú∑{‚àÜ} = ‚àÜ, then F(a) = F(‚àÜ) = C{F(‚àÜ)} and we are done.
2. C = C'b, with C' a ontext. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then, using Remark 4.3.13
F(a) = F(C'{‚àÜ}b) = F(C'{‚àÜ})b = C'{F(‚àÜ)} b = C{F(‚àÜ)}
3. C = b C', with C' a ontext. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then, using Remark 4.3.13
F(a) = F(b C'{‚àÜ}) = b F(C'{‚àÜ}) = b C'{F(‚àÜ)}= C{F(‚àÜ)}
4. C = ŒªC', with C' a ontext. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then, using Remark 4.3.13
F(a) = F(Œª C'{‚àÜ}) = Œª F(C'{‚àÜ}) = Œª C'{F(‚àÜ)}= C{F(‚àÜ)}
5. C = C'[‚áëj (‚Üë)‚ÑÑ, with C' a ontext and j ‚â• 0. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then, using
Remark 4.3.13 F(a) = F(C'{‚àÜ} [‚áëj (‚Üë)‚ÑÑ) = F(C'{‚àÜ}) [‚áëj (‚Üë)‚ÑÑ = C'{F(‚àÜ)}[‚áëj (‚Üë)‚ÑÑ =
C{F(‚àÜ)}
99
4.3 A haraterization of SN
6. C = C'[‚áëj (b/)‚ÑÑ, with C' a ontext and j ‚â• 0. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then, using
Remark 4.3.13 F(a) = F(C'{‚àÜ} [‚áëj (b/)) = C'{F(‚àÜ)}[‚áëj (b/)‚ÑÑ = C{F(‚àÜ)}
7. C = b [‚áëj(C' /)‚ÑÑ, with C' a ontext and j ‚â• 0. By IH F(C'{‚àÜ}) = C'{F(‚àÜ)}; then,
iterating Remark 4.3.13 F(a) = F(b[‚áëj(C'{‚àÜ} /)‚ÑÑ) = b[‚áëj(C'{F(‚àÜ)} /)‚ÑÑ = C{F(‚àÜ)}
‚ú∑
We onlude the setion with the following
Prop osition 4.3.15 The strategy F dened above is an eetive perpetual redution strategy
for ŒªœÖ.
Proof: As explained b efore, F is eetive. Let us see that it is p erp etual.
Let c ‚àà ŒõœÖ. Supp ose F(c) ‚àà SNŒªœÖ, and let us prove that c ‚àà SNŒªœÖ. Sine by Prop osition 4.3.9
SœÖ = SNŒªœÖ, we reason by indution on the derivation of F(c) ‚àà SœÖ and show that c ‚àà SœÖ.
If c ‚àà NFŒªœÖ then all is trivial. So we an supp ose c has a left-most redex.
By Lemma 4.3.6 we have the following ases for c:
1. c = ma1a2 . . . an with n ‚â• 0 and m ‚â• 1. If n = 0, the result is trivial. Otherwise F(c)
= ma1a2 . . . ai‚àí1 F(ai)ai+1 . . . an ‚àà SœÖ (iterating Lemma 4.3.14), for some i s.t. a1, . . . ,
ai‚àí1, F(ai), ai+1, ..., an ‚àà SœÖ. Then by IH ai ‚àà SœÖ. Then sine all a1, a2, . . . , an ‚àà SœÖ, the
(var-I) rules states that c ‚àà SœÖ.
2. c = Œªa. Then F(c) = ŒªF(a) ‚àà SœÖ (using Lemma 4.3.14), where F(a) ‚àà SœÖ, so by IH
a ‚àà SœÖ, and by the (Abs-I) rule, c ‚àà SœÖ.
3. c = (Œªa)ba1a2 . . . an with n ‚â• 0. Then F(c) = (a[b/‚ÑÑ) a1a2 . . . an ‚àà SœÖ, then by the (Œª-I)
rule, c ‚àà SœÖ.
4. c = (ab) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0. Then
F(c) = (a[s‚ÑÑ b[s‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (App) rule, c ‚àà SœÖ.
5. c = (Œªa) [s‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0. Then
F(c) = Œª(a[‚áë (s)‚ÑÑ) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (‚áë-E) rule, c ‚àà SœÖ.
6. c = 1 [a /‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0, and a ‚àà NFŒªœÖ.
Then F(c) = a[s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (F[‚ÑÑ-I) rule, c ‚àà SœÖ.
7. c = 1 [a /‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0, and a /‚àà NFŒªœÖ.
Then F(c) = 1 [F(a)/‚ÑÑ[s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by IH and by the (F[‚ÑÑ-I) rule,
c ‚àà SœÖ.
8. c = (m+1) [a/‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0, k ‚â• 0 and m ‚â• 1, and a ‚àà NFŒªœÖ.
Then F(c) = m [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (R[‚ÑÑ-I) rule, c ‚àà SœÖ.
100
4.3 A haraterization of SN
9. c = (m+1) [a/‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0, k ‚â• 0 and m ‚â• 1, and a /‚àà NFŒªœÖ.
Then F(c) = (m+1) [F(a)/‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by IH and by the (R[‚ÑÑ-I)
rule, c ‚àà SœÖ.
10. c = 1 [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0, and s ‚àà NFŒªœÖ.
Then F(c) = 1 [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (F‚áë-I) rule, c ‚àà SœÖ.
11. c = 1 [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0 and k ‚â• 0, and s /‚àà NFŒªœÖ.
Then F(c) = 1 [‚áë(F(s))‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by IH and by the (F‚áë-I) rule,
c ‚àà SœÖ.
12. c = (m+1) [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0, k ‚â• 0 and m ‚â• 1, and s ‚àà NFŒªœÖ..
Then F(c) = m [s‚ÑÑ [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (F‚áë-I) rule, c ‚àà SœÖ.
13. c = (m+1) [‚áë (s)‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0, k ‚â• 0 and m ‚â• 1, and s /‚àà NFŒªœÖ.
Then F(c) = (m+1) [‚áë(F(s))‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by IH and by the (F‚áë-I)
rule, c ‚àà SœÖ.
14. c = m [‚Üë‚ÑÑ [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an with n ‚â• 0, k ‚â• 0 and m ‚â• 1.
Then F(c) = (m+1) [s1‚ÑÑ . . . [sk‚ÑÑ a1a2 . . . an ‚àà SœÖ, then by the (‚Üë-I) rule, c ‚àà SœÖ.
Otherwise, c is a substitution, and we have the following ases:
1. c = a/, then F(c) = F(a)/ ‚àà SœÖ, where F(a) ‚àà SœÖ, then by IH a ‚àà SœÖ, and by the (/-I)
rule, c ‚àà SœÖ.
2. c =‚áë (s), then F(c) =‚áë(F(s)) ‚àà SœÖ, where F(s) ‚àà SœÖ, then by IH s ‚àà SœÖ, and by the (‚áë-I)
rule, c ‚àà SœÖ.
3. c =‚Üë, then by the (‚Üë-G) rule c ‚àà SœÖ.
‚ú∑
4.3.6 Digression
Note that for some ases the result ould have b een proved easily without the haraterization,
e.g., as in the following ase
2) c = Œªa
F(c) = ŒªF(a) ‚àà SNŒªœÖ, so by Remark 4.1.2(2) F(a) ‚àà SNŒªœÖ, and by IH, a ‚àà SNŒªœÖ, then by
Remark 4.3.5 (2), c ‚àà SNŒªœÖ.
And analogously for the substitution ases (1) and (2).
101
4.4 Conlusion and future work
4.4 Conlusio n and future work
We have formulated and proved p erp etuality for ŒªœÖ. As an appliation we ould state and
prove a SN haraterization and then give a p erp etual redution strategy. This has onrmed
one more that suh a reasonable de Bruijn expliit substitution alulus enjoys the exp eted
prop erties when ompared to a named alulus, and this leads to b elieve that other expliit
substitution aluli (e.g., Œªs) preserve the same result. It is p ossible that most of these teh-
niques ould b e applied to test a new alulus for this prop erty in an analogous way. Another
p ossible diretion of work in the future ould b e to lo ok for neess ary and suient onditions
under whih various TRSs and aluli may enjoy p erp etuality.
In the inferene rules for haraterizing SN terms, we have put together in the same set b oth
terms and substitutions. This made the analysis simpler, although it ould have b een done
separating b oth sorts and then formulating and proving the desired prop erties for the set of
terms (and eventually for the set of substitutions). Also, in the haraterization of SN terms,
we had to deide whih onditions to put in the rule premises. We also hop e to nd -or simplify-
other haraterizations of SN terms and substitutions, in several aluli, by analyzing dierent
sets of rules, although we b elieve that these annot b e substantially hanged.
We should remark that apart from the work in this hapter, a new metho d for nding
p erp etual redution strategies was explored in a joint work (see (4)), namely the use of zoom-
in strategies. This tehnique was applied to Œªx and also to Œªws, a alulus with expliit
substitution and weakening (see (26; 35)) in order to obtain p erp etual strategies and rules
haraterizing their resp etive sets of SN terms.
Possible researh inludes omparing the redution strategy F found ab ove with others (eg.,
left-most outer-most, right-most inner-most, et.) and to nd normalizing as well as maximal
redution strategies (see (82)). Other tasks would b e to nd how to move from one p erp etual
strategy to another one, in order to aess to dierent innite derivations.
102
4.4 Conlusion and future work
103
4.4 Conlusion and future work
Figure 4.1: (SS)(SS)(SS)(SS)(SS)(SS)(SS)(SS) after 28 left-most steps
Figure 4.2: (SS)(SS)(SS)(SS)(SS)(SS)(SS)(SS) after 65 left-most steps
104
Chapter 5
Extending lamb da upsilon with
omp osition
The method by whih mathematis obtains its equations is the method of substi-
tution.  L. Wittgenstein, Tratatus Logio-Philosophius
ABSTRACT In this hapter a prop osal for the ŒªœÖ-alulus with omp osition rules (i.e. al-
lowing the interation of losures) is intro dued and studied, and then weak onuene on op en
terms is proved. As an appliation, a derived variation of ŒªœÖ is presented with a unique de
Bruijn index, preserving the prop erties of the previous extension.
5.1 Intro dution
Sine at present there is a huge numb er of aluli of expliit substitutions, with many vari-
ations and subtleties, we b elieve that a study must b e done for omparing them from several
p oints of view. This is strengthened by the fat that those aluli have prop erties whih are
dierent.
It is often useful to relate one alulus with another, by means of a mapping, that is an
appliation preserving some of the alulus prop erties. Several mappings were prop osed and
used in the literature (15; 47; 75) with sp ei goals, for instane to let a alulus inherit a
prop erty whih another one satises. But little eort has b een done with resp et to proving the
non-existene of mappings b etween one and another. For instane, it ould b e interesting to
nd appropriate mappings from (and to) the ŒªœÉ-alulus (15; 66) i.e. to nd out how ŒªœÖ (and
also Œªs) substitutions (and mayb e those of other aluli) ould b e represented in ŒªœÉ whih has
a riher syntax.
One p oint when omparing dierent existing aluli is the express ive p ower of the substitution
alulus (5), namely the haraterization of the set of substitutions whih they implement.
105
5.2 Some imp ossibilities of .
The reasons to study ŒªœÖ are multiple. It is a de Bruijn alulus, with minimal omp osition
op erators and rules. It has go o d prop erties, for instane the œÖ-alulus is anonial (CR and
SN), and the alulus preserves strong normalization (PSN). It is two-sorted like ŒªœÉ, its syntax
is simpler. It has a relatively small set of rules, hene some pro ofs an b e generalized to those
so alled basi substitution aluli (BSC) (48) as well as CINNI (79) in whih the onstruts
are of ŒªœÖ-avor.
When intro duing rules propagating substitution over the dierent kinds of terms, omp o-
sition rules may app ear for losing ritial pairs and gain (weak) onuene. The main goal
of this hapter is to b enet from omposition-like rules in the ŒªœÖ-alulus (13; 60), in order to
gain some go o d prop erties. Additionally, we explore the p ossibility of extending ŒªœÖ by other
means.
Let us briey disuss related work. One main development ab out onuene on op en terms of
an expliit substitution alulus was given in (45; 46) extending the Œªs-alulus. Some variants
of ŒªœÖ have b een previously given. In (31; 32), the aluli Œªd, Œªdn and Œªe are studied, and PSN
is proved for the rst time for a alulus with omp osition. These aluli are onuent on losed
terms but not even weakly onuent on op en terms, even when they handle rule shemas as we
do. In (77), a alulus is given with one de Bruijn index and two limited omp osition rules,
whih is also onuent on losed terms but not weakly onuent on op en terms, sine its rules
are very limited.
Our work here onsists mainly in two lines. One is to prove some negative results ab out ŒªœÖ,
whih indeed are interesting to show that there are no appropriate mappings whih relate it
with some other aluli. The other one is to extend ŒªœÖ in order to gain go o d prop erties. The
fat that ŒªœÖ laks identity substitution motivates the addition of rules propagating losures, as
will b e done afterwards.
This hapter is presented as follows. Setion 5.2 disusses some negative results ab out ŒªœÖ
and intro dues some straightforward extensions. Setion 5.3 intro dues ŒªœÖc, an extension of the
ŒªœÖ-alulus whih adds omp osition, resulting in a alulus with expliit substitution whih is
weakly onuent (WCR) on op en terms. Setion 5.4 shows a alulus with only one de Bruijn
index having the same prop erties of ŒªœÖc, based in the latter. Finally, we present our onlusion
in setion 5.5.
5.2 Some imp ossibi l i t i e s of ŒªœÖ.
We b egin by showing some negative results ab out this alulus for justifying the extension.
This is inspired in the idea of exploring whih funtions Œõ ‚Üí Œõ (in partiular, IN ‚Üí IN) are
express ible in a alulus, and to b e more preise, to see whih kinds of strutures they dene.
106
5.2 Some imp ossibilities of .
One goal is to study the lass of substitutions whih an b e represented in eah of the aluli
of expliit substitution.
We formulate the problem using notation for two-sorted aluli (in whih losures make
sense), although similar results an b e ahieved for aluli like Œªs.
Denition 5.2.1 Given ŒªŒ∂ a alulus of expliit substitution, where Œ∂ is its assoiated sub-
stitution alulus, and given n substitutions s1, s2, . . . , sm, we wil l say that f = fs1,...,sm is the
funtion represented by the sequene of substitutions s1, . . . , sm if and only if
1. for every term a, f(a) is in Œ∂-normal form
2. for every term a, a[s1] . . . [sm]
‚àó
‚ÜíŒ∂ f(a)
Equivalently, f(a) = Œ∂(a[s1] . . . [sm]).
Denition 5.2.2 We say that the substitution alulus Œ∂ is losed under omposition if, for
every pair of funtions f, g from terms to terms and for every pair of substitutions s and t suh
that f is represented by s and g is represented by t, there exists a substitution r suh that f o g
is represented by r.
One imp ortant prop erty will b e to nd out if the substitution set is losed under omp osition.
In all disussed aluli addition of a onstant to an index is p ossible (by using the appropriate
‚Üë ombination). We an say also that subtration is available, in a limited way. Then one
an ask if the same an b e said ab out multipliation by a onstant. For example, is there a
substitution s suh that ((1 2)3)[s]
+
‚Üí ((2 4)6), i.e. suh that it multiplies by 2 all free indies?
It would b e interesting to disover if there is some relation with the express ive p ower of the
alulus, its adequay or its relation to Œª-alulus. We shall see that the answer to the former
is negative for known systems.
Our riterion when mapping the funtion meaning into the substitution apparatus is to
onsider normalization, eg. a funtion f from terms to terms in normal form will b e express ible
in the alulus wheneve r there is a substitution s suh that for every term t the term t[s]
normalizes to f(t).
We reall that the set of substitutions in the œÉ-alulus is losed under omp osition sine
there expliitly exists a omp osition op erator, i.e. given substitutions s and s‚Ä≤ (representing
some funtions f and g), s o s‚Ä≤ is another substitution in the alulus (representing the om-
p osition f o g). This happ ens to b e false in other substitution aluli. Even when a[s][s‚Ä≤] (or a
similar term) in most aluli omputes the omp osition of s and s‚Ä≤ applied to the term a, the
substitution set needs not to b e losed under omp osition.
The following is an interesting prop erty for helping to nd the funtions represented by
substitutions.
We will need the following lemma whih is also proved in (60).
107
5.2 Some imp ossibilities of .
Lemma 5.2.3 m[‚áëi (s)] ‚Üí œÖ m if m ‚â§ i, i ‚â• 1.
Proof: By indution on m. If m = 1, it is straightforward sine we have that i ‚â• 1 thus
1[‚áëi (s)] ‚ÜíFVarLift 1. If m > 1, we have that
m[‚áëi (s)] ‚ÜíFVarLift (m‚àí 1)[‚áë
i‚àí1 (s)][‚Üë]
‚Üí (m‚àí 1)[‚Üë] (by IH, sine m‚àí 1 ‚â§ i‚àí 1)
‚ÜíVarShift m. ‚ú∑
We will also need the following lemmas:
Lemma 5.2.4 m[‚áëi (‚Üë)] ‚Üí œÖ m+ 1 if m > i ‚â• 0.
Proof: By indution on m. ‚ú∑
Lemma 5.2.5 m[‚áëi (b/)] ‚Üí œÖ m‚àí 1 if m > i+ 1, i ‚â• 1.
Proof: By indution on m. ‚ú∑
Prop osition 5.2.6 Let Œ∂ be any of the fol lowing aluli: œÖ, œÉ, and let m ‚â• 1. Let f = fs1,...,sm
be the funtion represented by the sequene of substitutions s1, . . . , sm (f. Denition 5.2.1).
Then, there exist k ‚àà IN, r ‚àà Z depending on s1, . . . , sm suh that for al l n ‚â• k f(n) = n+ r.
Proof: We prove the assertion for œÖ although for œÉ something analogous an b e done. Use
indution on m, Remark 1.6.5 and Lemmas 5.2.4 and 5.2.5. Take k = |s1|+ ¬∑ ¬∑ ¬∑+ |sm|+ 1, and
add up the dierent r's obtained, whih results in an integer. ‚ú∑
Corollary 5.2.7 Let Œ∂ be any of the fol lowing aluli: œÖ, œÉ, and let m ‚â• 1. Let f = fs1,...,sm be
the funtion represented by the sequene of substitutions s1, . . . , sm. Then, f(IN) is an innite
set.
Proof: Immediate from Prop osition 5.2.6 ‚ú∑
As a onseque n  e we have the following imp ossibilities.
Corollary 5.2.8 Let Œ∂ be any of the fol lowing aluli: œÖ, œÉ and let k, r,m ‚â• 1. Then, there
do not exist
1. substitutions s1, . . . , sm suh that for al l n ‚àà IN , n[s1] . . . [sm]
‚àó
‚ÜíŒ∂ k.
2. substitutions s1, . . . , sm suh that for al l n ‚àà IN , n[s1] . . . [sm]
‚àó
‚ÜíŒ∂ k if n is odd, n[s1] . . . [sm]
‚àó
‚ÜíŒ∂
r if n is even.
3. substitutions s1, . . . , sm suh that for al l n ‚àà IN , n[s1] . . . [sm]
‚àó
‚ÜíŒ∂ k if n ‚â§ m, n[s1] . . . [sm]
‚àó
‚ÜíŒ∂
r if n > m.
108
5.2 Some imp ossibilities of .
Proof: All these are sp eial ases of Corollary 5.2.7. ‚ú∑
Now we onsider the identity funtion. The presene or absene of the identity funtion in
the substitution set of a given expliit substitution alulus is a subtle question. For instane,
ŒªœÉ-alulus has the identity as a given substitution in a primitive way. But that is not the
ase of ŒªœÖ-alulus as we shall see.
We have
Prop osition 5.2.9 œÖ does not have an identity substitution (even restriting its appliation to
indies), i.e. there does not exist s suh that for al l n ‚àà IN, n[s]
+
‚ÜíœÖ n.
Proof: Supp ose there exists suh a substitution s. Then we reason by ases and use the ab ove
lemmas:
‚Ä¢ s =‚áëm (b/), then taking for instane n = m + 2 one has that n[s]
+
‚ÜíœÖ m + 1 whih is a
œÖ-normal form, so n[s] an never redue to n.
‚Ä¢ s =‚áëm (‚Üë), then taking for instane n = m+ 1 one has that n[s]
+
‚ÜíœÖ m+ 2, and we reason
as ab ove.
Thus for all s there exists n suh that n[s] do es not redue to n. ‚ú∑
Let id denote the identity substitution in ŒªœÉ. For pure terms in ŒªœÉ we have the useful and
well-known
Lemma 5.2.10 For al l a ‚àà ŒõœÉt pure, a[id]
‚àó
‚ÜíœÉ a
Proof: By indution on a. ‚ú∑
As an appliation we show the non-existene of an appropriate mapping from ŒªœÉ to ŒªœÖ in
the following sense. Let us denote the set of ŒªœÉ terms with ŒõœÉt, and the set of ŒªœÉ substitutions
with ŒõœÉs.
Prop osition 5.2.11 There does not exist a pair of funtions (t, t‚Ä≤) suh that t : ŒõœÉt ‚Üí ŒõtœÖ,
with IN ‚äÜ t(ŒõœÉt) i.e. the image of t inludes al l de Bruijn indies, t‚Ä≤ : ŒõœÉs ‚Üí ŒõsœÖ, and suh
that
1. a‚ÜíœÉ b‚áí t(a)
‚àó
‚ÜíœÖ t(b)
2. t(a[s]) = t(a)[t‚Ä≤(s)]
109
5.2 Some imp ossibilities of .
Proof: Supp ose there exists suh a pair (t, t‚Ä≤), take s = t‚Ä≤(id). Then, for all pure a, by (2)
we would have t(a[id]) = t(a)[s], but a[id]
‚àó
‚ÜíœÉ a by Lemma 5.2.10, then by (1) t(a[id])
‚àó
‚ÜíœÖ t(a)
thus t(a)[s]
‚àó
‚ÜíœÖ t(a). Sine given any m ‚àà IN by hyp othesis there exists a ‚àà ŒõœÉ
t
suh that
m = t(a), then s would b e an identity substitution in ŒªœÖ, whih is absurd by Prop osition 5.2.9.
‚ú∑
For pure terms in Œªx we have
Lemma 5.2.12 For al l M ‚àà Œõ, M < x := x >
‚àó
‚Üíx M
Proof: By indution on M . ‚ú∑
Then, as another appliation we show the non-existene of a mapping from Œªx to ŒªœÖ in the
following sense.
Prop osition 5.2.13 There does not exist a pair of funtions (t, t‚Ä≤) suh that t : Œõx‚Üí ŒõtœÖ with
IN ‚äÜ t(Œõx) i.e. the image of t inludes al l de Bruijn indies, t‚Ä≤ : V √ó Œõx‚Üí ŒõsœÖ, and suh that
1. M ‚Üíx N ‚áí t(M)
‚àó
‚ÜíœÖ t(N)
2. t(M < x := N >) = t(M)[t‚Ä≤(x,N)]
Proof: Supp ose there exists suh a pair (t, t‚Ä≤), take s = t‚Ä≤(x, x), then, for all pure M and x,
by (2) we would have t(M < x := x >) = t(M)[s], but M < x := x >
‚àó
‚Üíx M by Lemma 5.2.12,
then by (1) t(M < x := x >)
‚àó
‚ÜíœÖ t(M) thus t(M)[s]
‚àó
‚ÜíœÖ t(M). Sine given any m ‚àà IN by
hyp othesis there exists M ‚àà Œõx suh that m = t(M), then s would b e an identity substitution
in ŒªœÖ, whih is again absurd by Prop osition 5.2.9. ‚ú∑
The previous results b eome useful sine mappings b etween de Bruijn aluli usually need
to map indies to indies (atually themselves). The non-existene of mappings may indiate
that a simulation is not suitable for transferring results from one alulus to another one.
Prop osition 5.2.13 is to b e generalized in hapter 8. Namely, we will prove the non-existene
of go o d mappings with less restritions. To ahieve this, further analysis will b e done. We rene
now the negative result of Prop osition 5.2.9. œÖ do es not have any generi identity substitution
for the entire set of terms, as formalized next.
We will all a generi substitution ontext in ŒªœÖ any ontext of the form C{‚ú∑} = ‚ú∑[s1] . . . [sn]
where the hole should b e replaed by a ŒªœÖ term. A generi identity substitution will b e a generi
substitution ontext suh that for all a ‚àà ŒõtœÖ, C{a}
+
‚ÜíœÖ a
Lemma 5.2.14 Let a, b ‚àà ŒõtœÖ, s, t ‚àà Œõ
s
œÖ.
1. If Œªa‚ÜíœÖ b, then there exists b
‚Ä≤ ‚àà ŒõtœÖ suh that b = Œªb
‚Ä≤
and a‚ÜíœÖ b
‚Ä≤
.
110
5.2 Some imp ossibilities of .
2. If Œªa‚ÜíœÖ Œªb, then a‚ÜíœÖ b.
3. If ‚áë (s) ‚ÜíœÖ t, then there exists t
‚Ä≤ ‚àà ŒõsœÖ suh that t =‚áë (t
‚Ä≤) and s‚ÜíœÖ t
‚Ä≤
.
Proof:
1. By indution on a, heking all œÖ-rules and p ossible redex p ositions.
2. Using the previous item.
3. By indution on s, heking all œÖ-rules and p ossible redex p ositions.
‚ú∑
Lemma 5.2.15 Let n ‚â• 1, s1, . . . , sn ‚àà Œõ
s
œÖ suh that a[s1] . . . [sn]
‚àó
‚ÜíœÖ a for al l a ‚àà Œõ (i.e. pure
terms). Then a[‚áë (s1)] . . . [‚áë (sn)]
‚àó
‚ÜíœÖ a.
Proof: Sine a[s1] . . . [sn]
‚àó
‚ÜíœÖ a for all a, then in partiular (Œªa)[s1] . . . [sn]
‚àó
‚ÜíœÖ Œªa, but
(Œªa)[s1] . . . [sn]
‚àó
‚ÜíœÖ Œª(a[‚áë (s1)] . . . [‚áë (sn)]), then by Lemma 5.2.14 and onuene of œÖ (13; 60),
a[‚áë (s1)] . . . [‚áë (sn)]
‚àó
‚ÜíœÖ a sine a is pure. ‚ú∑
Lemma 5.2.16 Let n ‚â• 1, t1, . . . , tn ‚àà Œõ
s
œÖ.
1. If 1[1/][‚áë (t1)] . . . [‚áë (tn)] ‚ÜíœÖ c, then
‚Ä¢ either c = 1[‚áë (t1)] . . . [‚áë (tn)],
‚Ä¢ or there exists 1 ‚â§ i ‚â§ n and t‚Ä≤i ‚àà Œõ
s
œÖ suh that
c = 1[1/][‚áë (t1)] . . . [‚áë (ti‚àí1)][‚áë (t
‚Ä≤
i)][‚áë (ti+1)] . . . [‚áë (tn)] with ti ‚ÜíœÖ t
‚Ä≤
i.
2. If 1[‚áë (t1)] . . . [‚áë (tn)] ‚ÜíœÖ c, then
‚Ä¢ either c = 1[‚áë (t2)] . . . [‚áë (tn)],
‚Ä¢ or there exists 1 ‚â§ i ‚â§ n and t‚Ä≤i ‚àà Œõ
s
œÖ suh that
c = 1[‚áë (t1)] . . . [‚áë (ti‚àí1)][‚áë (t
‚Ä≤
i)][‚áë (ti+1)] . . . [‚áë (tn)] with ti ‚ÜíœÖ t
‚Ä≤
i.
3. If 1[1/][‚áë (t1)] . . . [‚áë (tn)]
‚àó
‚ÜíœÖ c, then
‚Ä¢ either c = 1[1/][‚áë (t‚Ä≤1)] . . . [‚áë (t
‚Ä≤
n)] with ti
‚àó
‚ÜíœÖ t
‚Ä≤
i for 1 ‚â§ i ‚â§ n,
‚Ä¢ or c = 1[‚áë (t‚Ä≤k)] . . . [‚áë (t
‚Ä≤
n)], with ti
‚àó
‚ÜíœÖ t
‚Ä≤
i for k ‚â§ i ‚â§ n, with 1 ‚â§ k.
‚Ä¢ or c = 1.
Proof: For items 1 and 2, heking all œÖ-rules and p ossible redex p ositions. Item 3 follows
from the iteration of the previous items. ‚ú∑
111
5.2 Some imp ossibilities of .
As a onseque n  e , unless one onsiders pure terms only, there are no generi identities as
stated next:
Prop osition 5.2.17 Given any n ‚â• 1, there do not exist s1, . . . , sn ‚àà Œõ
s
œÖ suh that for al l
a ‚àà ŒõtœÖ a[s1] . . . [sn]
+
‚ÜíœÖ a, i.e., œÖ does not have generi identity substitutions.
Proof: Supp ose that there exist suh substitutions. By Lemma 5.2.15 we may assume that all
si =‚áë (ti) for some ti. Take a = 1[1/]. Thus by Lemma 5.2.16 the set of reduts of a[s1] . . . [sn]
is
‚Ä¢ 1[1/][‚áë (t‚Ä≤1)] . . . [‚áë (t
‚Ä≤
n)]
‚Ä¢ 1[‚áë (t‚Ä≤1)] . . . [‚áë (t
‚Ä≤
n)]
‚Ä¢ 1[‚áë (t‚Ä≤2)] . . . [‚áë (t
‚Ä≤
n)]
‚Ä¢ . . .
‚Ä¢ 1[‚áë (t‚Ä≤n‚àí2)][‚áë (t
‚Ä≤
n‚àí1)][‚áë (t
‚Ä≤
n)]
‚Ä¢ 1[‚áë (t‚Ä≤n‚àí1)][‚áë (t
‚Ä≤
n)]
‚Ä¢ 1[‚áë (t‚Ä≤n)]
‚Ä¢ 1
for all p ossible t‚Ä≤i suh that ti
‚àó
‚ÜíœÖ t
‚Ä≤
i, 1 ‚â§ i ‚â§ n. But we also have that 1[1/][s1] . . . [sn]
‚àó
‚ÜíœÖ 1[1/],
and 1[1/] do es not math any of the ab ove terms. This is absurd. ‚ú∑
Although we omit details here, these negative assertions an b e extended to CINNI whih is
of the ŒªœÖ-style (f. (79)).
Denition 5.2.18 A weak identity is a ontext C suh that C{a}
+
‚Üí a for al l a ‚àà Œõ.
Weak identities in priniple are not neess arily of the form ‚ú∑[s1] . . . [sn] i.e. an iteration of
losures, but we are sp eially interested in them.
Although there are no generi identities, there are weak identities in œÖ as given by the
Lemma 5.2.19 œÖ has an innite number of weak identities
Proof: Let C{‚ú∑} = ‚ú∑[‚áëk (‚Üë)][‚áëk (b/)] for any xed term b ‚àà ŒõtœÖ and k ‚àà IN . Then by
indution on a, C{a}
+
‚ÜíœÖ a for all a ‚àà Œõ. The ase a = n ‚àà IN an index is proved by ases,
separately analyzing n ‚â§ k and n > k and using Lemmas 5.2.3, 5.2.4 and 5.2.5. ‚ú∑
Note that the ab ove lemma do es not ontradit Prop osition 5.2.17 sine it applies to pure
terms. This lemma will motivate an interation rule in the next setion. The following is a
simple onseque n  e of the ab ove results:
112
5.2 Some imp ossibilities of .
Corollary 5.2.20 The set of œÖ substitutions is not losed under omposition.
Proof: In œÖ it is enough to reall that, even restrited to pure terms, the identity funtion is
not express ible with a single substitution (Lemma 5.2.9), although it an b e represented by a
sequen e of two losures (last lemma). ‚ú∑
Thus in the following setion we takle this problem partially, that is, we add omp osition-like
rules to ŒªœÖ. We say partially b eause not every pair of losures will interat, but the neess ary
ones to gain weak onuene on op en terms.
To nish this subsetion, we add as a uriosity that there is still another kind of weak identity
whose existene is shown next.
Denition 5.2.21 A lo al identity is a funtion p from terms to substitutions, p : ŒõtœÖ ‚Üí Œõ
s
œÖ,
suh that for al l a ‚àà ŒõtœÖ, a[p(a)]
+
‚ÜíœÖ a. A pure lo al identity is a funtion p from pure terms to
substitutions, p : Œõ ‚Üí ŒõsœÖ, suh that for al l a ‚àà Œõ, a[p(a)]
+
‚ÜíœÖ a.
Lemma 5.2.22 œÖ has an innite number of pure loal identities whih are not weak identities.
Proof: For all a ‚àà ŒõœÖ we dene pm(a) =‚áë
m (‚Üë) for m ‚àà IN , and l(a) ‚àà IN indutively as
follows:
l(n) = n
l(Œªa) = 1 + l(a)
l(ab) = max(l(a), l(b))
l(a[s]) = max(l(a), l(s))
l(‚áë (s)) = l(s)
l(‚Üë) = 1
l(a/) = l(a)
It an b e shown by indution on a that a[pm(a)]
+
‚ÜíœÖ a for all m ‚â• l(a), again using the ab ove
lemmas. ‚ú∑
Note that in general it is not the ase that a[‚áëm (‚Üë)]
+
‚ÜíœÖ a if m < l(a).
It is also interesting that it is imp ossible to extend this result for all ŒõœÖ terms, shown b elow.
Lemma 5.2.23 There does not exist p : ŒõtœÖ ‚Üí Œõ
s
œÖ suh that for al l a ‚àà ŒõœÖ, a[p(a)]
+
‚ÜíœÖ a. I.e.,
there are no loal identities in ŒªœÖ.
Proof: We provide a ounterexample: let a = 1[‚Üë][‚áë ((Œª1)/)]. 1 Now supp ose there is suh a
p, so let s = p(a), then it must b e the ase that a[s]
+
‚ÜíœÖ a. Let us write all the
‚àó
‚ÜíœÖ-reduts of
a[s] (whih are p ossibly innite):
1[‚Üë][‚áë ((Œª1)/)][s‚Ä≤]
1
It seems that there is no simpler one!
113
5.3 Extending with omp osition
2[‚áë ((Œª1)/)][s‚Ä≤]
1[(Œª1)/)][‚Üë][s‚Ä≤]
(Œª1)[‚Üë][s]
(Œª1[‚áë (‚Üë)])[s‚Ä≤]
(Œª1[‚áë (‚Üë)][‚áë (s‚Ä≤)])
(Œª1)[s‚Ä≤]
(Œª1[‚áë (s‚Ä≤)])
Œª1
for every substitution s‚Ä≤ suh that s
‚àó
‚ÜíœÖ s
‚Ä≤
.
But then, as a onseque n  e of Lemma 5.2.14, a do es not app ear among these terms. Then
a[s]
+
‚ÜíœÖ a do es not hold, therefore there is no suh a funtion p. ‚ú∑
So this kind of identity annot b e extended to all terms. As a morale, we have seen that
in a substitution alulus (even if it is a BSC) the existene of weak identities and pure lo al
identities do not imply the existene of identities nor of lo al identities.
5.3 Extending ŒªœÖ with omp ositio n
In most of the pro ofs of the previous setion, the main problem and diulty ome from
the fat that in ŒªœÖ losures do not interat, that is, a losure may blo k ertain desirable
redutions.
The ob jetive of this setion is to exhibit omp osition rules for ŒªœÖ and show that lo al
onuene on op en terms is obtained. The reasons for intro duing a ŒªœÖ with omp osition are
twofold. On one hand, we have seen in the previous setion that the diulty of getting an
identity substitution omes from the non interation of losures. The other one is to gain weak
onuene as we p ointed ab ove.
We will see that the omp osition rules will not have side onditions (e.g. inequalities, like
Œªse), nevertheless these interation rules will b e atually rule shemas instead of plain rules.
Denition 5.3.1 We introdue the ŒªœÖc-alulus (a variation of the ŒªœÖ-alulus) on open terms
given by the fol lowing syntax:
Open Terms a ::= n | X| (aa) | (Œªa) | a[s]
Open Substitutions s ::= x | a/ | ‚Üë | ‚áë (s)
where n ‚â• 1, X denotes term meta-variables and x denotes substitution meta-variables; and
with the fol lowing rules (where the rst eight onstitute the ŒªœÖ-alulus):
114
5.3 Extending with omp osition
(Œªa)b‚Üí a[b/] (Beta)
1[a/] ‚Üí a (FVar)
(n+ 1)[a/] ‚Üí n (RVar)
1[‚áë (s)] ‚Üí 1 (FVarLift)
(n+ 1)[‚áë (s)] ‚Üí n[s][‚Üë] (RVarLift)
n[‚Üë] ‚Üí n+ 1 (VarShift)
(ab)[s] ‚Üí a[s]b[s] (App)
(Œªa)[s] ‚Üí Œª(a[‚áë (s)]) (Lam)
to whih we add the fol lowing omposition rules shemas:
a[‚áëi (‚Üë)][‚áëi (b/)] ‚Üí a i ‚â• 0 (1)
a[‚áëi (b/)][‚áëi (s)] ‚Üí a[‚áëi+1 (s)][‚áëi (b[s]/)] i ‚â• 0 (2)
a[‚áëi (‚Üë)][‚áëi+1 (s)] ‚Üí a[‚áëi (s)][‚áëi (‚Üë)] i ‚â• 0 (3)
Let us denote the set of open terms with ŒõtœÖ and the set of open substitutions with Œõ
s
œÖ.
We dene ŒªœÖc as ŒªœÖ-rules plus {(1), (2), (3)}. œÖ plus {(1),(2),(3)} i.e. al l ŒªœÖc-rules
exept (Beta) is al led œÖc.
We added rules (1), (2) and (3) in order to lose the ritial pairs. As we said these are
rule shemas sine they state redution relations for a (denumerable) family of terms, anyway
with these rules, given any term, its redexes an b e easily alulated.
Using Lemmas 5.2.3,5.2.4 and 5.2.5 we have the following
Prop osition 5.3.2 ŒªœÖc is WCR on open terms.
Proof: We hek all the ritial pairs reated by the addition of the new rules.
‚Ä¢ (Beta) with (App):
((Œªa)b)[s]
app
¬≤¬≤
Beta
// a[b/][s]
(c2) ))RR
RRR
RRR
RRR
RRR
(Œªa)[s]b[s]
lam
// Œª(a[‚áë (s)])(b[s])
Beta
// a[‚áë (s)][b[s]/]
115
5.3 Extending with omp osition
‚Ä¢ (FVarLift) with (1) where i ‚â• 1:
1[‚áëi (‚Üë)][‚áëi (b/)]
¬≤¬≤
c1 // 1
1[‚áëi (b/)]
88qqqqqqqqqqqq
‚Ä¢ (RVarLift) with (1) where i ‚â• 1:
(n+ 1)[‚áëi (‚Üë)][‚áëi (b/)]
RV arLift
¬≤¬≤
c1
// n+ 1
||
n[‚áëi‚àí1 (‚Üë)][‚Üë][‚áëi (b/)]
n ‚â• i, L.5.2.4
¬≤¬≤¬≤¬≤
Case
n ‚â§ i‚àí 1, L.5.2.3
// // n[‚Üë][‚áëi (b/)]
V arShift
// (n+ 1)[‚áëi (b/)]
L.5.2.3
// // n+ 1
||
(n+ 1)[‚Üë][‚áëi (b/)]
V arShift
// (n+ 2)[‚áëi (b/)]
L. 5.2.5
// // n+ 1
‚Ä¢ (VarShift) with (1) (i = 0):
n[‚Üë][b/]
c1
//
¬≤¬≤
n
||
(n+ 1)[b/] // n
‚Ä¢ (App) with (1):
(ab)[‚áëi (‚Üë)][‚áëi (c/)]
c1
//
¬≤¬≤
(ab)
(a[‚áëi (‚Üë)]b[‚áëi (‚Üë)])[‚áëi (c/)]
¬≤¬≤
(a[‚áëi (‚Üë)][‚áëi (c/)])(b[‚áëi (‚Üë)][‚áëi (c/)]) // // a[‚áëi (‚Üë)][‚áëi (c/)]b[‚áëi (‚Üë)][‚áëi (c/)]
OOOO
‚Ä¢ (Lam) with (1):
(Œªa)[‚áëi (‚Üë)][‚áëi (b/)]
c1
//
¬≤¬≤
(Œªa)
(Œªa[‚áëi+1 (‚Üë)])[‚áëi (b/)] // Œª(a[‚áëi+1 (‚Üë)][‚áëi+1 (b/)])
OO
‚Ä¢ (FVar) with (2) (i = 0):
116
5.3 Extending with omp osition
1[a/][s]
c2
//
¬≤¬≤
1[‚áë (s)][a[s]/]
wwwwooo
ooo
ooo
ooo
a[s]
‚Ä¢ (RVar) with (2) (i = 0):
(n+ 1)[a/][s]
c2
//
RV ar
¬≤¬≤
(n+ 1)[‚áë (s)][a[s]/]
¬≤¬≤
n[s] n[s][‚Üë][a[s]/]c1oo
‚Ä¢ (FVarLift) with (2) (i ‚â• 1):
1[‚áëi (b/)][‚áëi (s)]
c2
//
FV arLift
¬≤¬≤
1[‚áëi+1 (s)][‚áëi (b[s]/)]
FV arLift
¬≤¬≤¬≤¬≤
1[‚áëi (s)] // 1
‚Ä¢ (RVarLift) with (2) (i ‚â• 1):
(n+ 1)[‚áëi (b/)][‚áëi (s)]
c2
//
RV arLift
¬≤¬≤
(n+ 1)[‚áëi+1 (s)][‚áëi (b[s]/)]
RV arLift
¬≤¬≤
n[‚áëi‚àí1 (b/)][‚Üë][‚áëi (s)] = lhs n[‚áëi (s)][‚Üë][‚áëi (b[s]/)] = rhs
 Case n = 1, i = 1:
lhs‚Üí b[‚Üë][‚áë (s)] ‚Üí b[s][‚Üë]
rhs‚Üí b[s][‚Üë]
 Case n = 1, i > 1:
lhs // 1[‚Üë][‚áëi (s)] // 2[‚áëi (s)] // 1[‚áëi‚àí1 (s)][‚Üë]
i>1 // // 2
rhs // // 2[‚áëi (b[s]/)] // 1[‚áëi‚àí1 (b[s]/)][‚Üë]
i>1
88 88qqqqqqqqqqqq
 Case n > 1, i = 1:
lhs = n[b/][‚Üë][‚áë (s)]
¬≤¬≤
rhs = n[‚áë (s)][‚Üë][‚áë (b[s]/)]
¬≤¬≤
n[b/][s][‚Üë]
c2
// n[‚áë (s)][b[s]/][‚Üë]
 Case n > 1, i > 1:
117
5.3 Extending with omp osition
lhs = n[‚áëi‚àí1 (b/)][‚Üë][‚áëi (s)]
c3
¬≤¬≤
n[‚áëi‚àí1 (b/)][‚áëi‚àí1 (s)][‚Üë]
c2
¬≤¬≤
rhs = n[‚áëi (s)][‚Üë][‚áëi (b[s]/)]
c3
ssggggg
ggggg
ggggg
ggggg
n[‚áëi (s)][‚áëi‚àí1 (b[s]/)][‚Üë]
‚Ä¢ (App) with (2):
(ab)[‚áëi (c/)][‚áëi (s)]
app
¬≤¬≤
c2
// (ab)[‚áëi+1 (s)][‚áëi (c[s]/)]
app
¬≤¬≤
((a[‚áëi (c/)])(b[‚áëi (c/)]))[‚áëi (s)]
app
¬≤¬≤
(a[‚áëi+1 (s)]b[‚áëi+1 (s)])[‚áëi (c[s]/)]
app
¬≤¬≤
(a[‚áëi (c/)][‚áëi (s)])(b[‚áëi (c/)][‚áëi (s)])
c2
// // (a[‚áëi+1 (s)][‚áëi (c[s]/)])(b[‚áëi+1 (s)][‚áëi (c[s]/)])
‚Ä¢ (Lam) with (2):
(Œªa)[‚áëi (c/)][‚áëi (s)]
lam
¬≤¬≤
c2
// (Œªa)[‚áëi+1 (s)][‚áëi (c[s]/)]
lam
¬≤¬≤
(Œªa[‚áëi+1 (c/)])[‚áëi (s)]
lam
¬≤¬≤
(Œªa[‚áëi+2 (s)])[‚áëi (c[s]/)]
lam
¬≤¬≤
(Œªa[‚áëi+1 (c/)][‚áëi+1 (s)])
c2
// (Œªa[‚áëi+2 (s)][‚áëi+1 (c[s]/)])
‚Ä¢ (FVarLift) with (3) (i ‚â• 1):
1[‚áëi (‚Üë)][‚áëi+1 (s)]
c3
//
FV arLift
¬≤¬≤
1[‚áëi (s)][‚áëi (‚Üë)]
FV arLift
¬≤¬≤¬≤¬≤
1[‚áëi+1 (s)]
FV arLift
// 1
‚Ä¢ (1) with (2) (i ‚â• 0):
Two p ossible overlaps:
1. a[‚áëi (‚Üë)][‚áëi (b/)][‚áëi (s)]
c1
¬≤¬≤
c2
// a[‚áëi (‚Üë)][‚áëi+1 (s)][‚áëi (b[s]/)]
c3
¬≤¬≤
a[‚áëi (s)] a[‚áëi (s)][‚áëi (‚Üë)][‚áëi (b[s]/)]
c1oo
118
5.3 Extending with omp osition
2. a[‚áëi (b/)][‚áëi+j (‚Üë)][‚áëi+j (c/)]
c2
//
c1
¬≤¬≤
a[‚áëi+1+j (‚Üë)][‚áëi (b[‚áëj (‚Üë)]/)][‚áëi+j (c/)]
c2
¬≤¬≤
a[‚áëi (b/)] a[‚áëi+j+1 (‚Üë)][‚áëi+j+1 (c/)][‚áëi (b[‚áëj (‚Üë)][‚áëj (c/)])/]
c1
rreeeeee
eeeeee
eeeeee
eeeeee
ee
a[‚áëi (b[‚áëj (‚Üë)][‚áëj (c/)]/)]
c1
OO
‚Ä¢ (RVarLift) with (3) (i ‚â• 1):
(n+ 1)[‚áëi (‚Üë)][‚áëi+1 (s)]
c3
//
RV arLift
¬≤¬≤
(n+ 1)[‚áëi (s)[‚áëi (‚Üë)]
RvarLift
¬≤¬≤
n[‚áëi‚àí1 (‚Üë)][‚Üë][‚áëi+1 (s)]
c3
¬≤¬≤
n[‚áëi‚àí1 (s)][‚Üë][‚áëi (‚Üë)]
c3
¬≤¬≤
n[‚áëi‚àí1 (‚Üë)][‚áëi (s)][‚Üë]
c3
// n[‚áëi‚àí1 (s)][‚áëi‚àí1 (‚Üë)][‚Üë]
‚Ä¢ (VarShift) with (3) (i = 0):
n[‚Üë][‚áë (s)]
c3
//
V arShift
¬≤¬≤
n[s][‚Üë]
(n+ 1)[‚áë (s)]
RV arLift
77ppppppppppp
‚Ä¢ (App) with (3):
(ab)[‚áëi (‚Üë)][‚áëi+1 (s)]
app
¬≤¬≤
c3
// (ab)[‚áëi (s)][‚áëi (‚Üë)]
app
¬≤¬≤
((a[‚áëi (‚Üë)])(b[‚áëi (‚Üë)]))[‚áëi+1 (s)]
app
¬≤¬≤
(a[‚áëi (s)]b[‚áëi (s)])[‚áëi (‚Üë)]
app
¬≤¬≤
(a[‚áëi (‚Üë)][‚áëi+1 (s)])(b[‚áëi (‚Üë)][‚áëi+1 (s)])
c3
// // (a[‚áëi (s)][‚áëi (‚Üë)])(b[‚áëi (s)][‚áëi (‚Üë)])
‚Ä¢ (Lam) with (3):
(Œªa)[‚áëi (‚Üë)][‚áëi+1 (s)]
lam
¬≤¬≤
c3
// (Œªa)[‚áëi (s)][‚áëi (‚Üë)]
lam
¬≤¬≤
(Œªa[‚áëi+1 (‚Üë)])[‚áëi+1 (s)]
lam
¬≤¬≤
(Œªa[‚áëi+1 (s)])[‚áëi (‚Üë)]
lam
¬≤¬≤
(Œªa[‚áëi+1 (‚Üë)][‚áëi+2 (s)])
c3
// (Œªa[‚áëi+1 (s)][‚áëi+1 (‚Üë)])
119
5.3 Extending with omp osition
‚Ä¢ (1) with (3) (i ‚â• 0, j ‚â• 0):
a[‚áëi (‚Üë)][‚áëi+j+1 (‚Üë)][‚áëi+j+1 (b/)]
c3
//
c1
¬≤¬≤
a[‚áëi (‚áëj (‚Üë))][‚áëi (‚Üë)][‚áëi+j+1 (b/)]
c3
¬≤¬≤
a[‚áëi (‚Üë)] a[‚áëi+j (‚Üë)][‚áëi+j (b/)][‚áëi (‚Üë)]
c1oo
‚Ä¢ (2) with (3) (i, j ‚â• 0):
Two p ossible overlaps:
1. a[‚áëi (b/)][‚áëi+j (‚Üë)][‚áëi+j+1 (s)]
c2
//
c3
¬≤¬≤
a[‚áëi+j+1 (‚Üë)][‚áëi (b[‚áëj (‚Üë)]/)][‚áëi+j+1 (s)]
√Ç√Ç
a[‚áëi (b/)][‚áëi+j (s)][‚áëi+j (‚Üë)]
c2
¬≤¬≤
(‚àó)
a[‚áëi+j+1 (s)][‚áëi (b[‚áëj (s)]/)][‚áëi+j (‚Üë)]
c2
¬≤¬≤
a[‚áëi+j+1 (s)][‚áëi+j+1 (‚Üë)][‚áëi (b[‚áëj (s)][‚áëj (‚Üë)/])] = (‚àó‚àó)
where
(‚àó)
c2
// a[‚áëi+j+1 (‚Üë)][‚áëi+j+2 (s)][‚áëi (b[‚áëj (‚Üë)][‚áëj+1 (s)]/)]
c3
// a[‚áëi+j+1 (s)][‚áëi+j+1 (‚Üë)][‚áëi (b[‚áëj (‚Üë)][‚áëj+1 (s)]/)]
c3
// a[‚áëi+j+1 (s)][‚áëi+j+1 (‚Üë)][‚áëi (b[‚áëj (s)][‚áëj (‚Üë)])/] = (‚àó‚àó)
2. a[‚áëi (‚Üë)][‚áëi+j+1 (b/)][‚áëi+j+1 (s)]
c3
//
c2
¬≤¬≤
a[‚áëi+j (b/)][‚áëi (‚Üë)][‚áëi+j+1 (s)]
c3
¬≤¬≤
a[‚áëi (‚Üë)][‚áëi+j+2 (s)][‚áëi+j+1 (b[s]/)]
c3
¬≤¬≤
a[‚áëi+j (b/)][‚áëi+j (s)][‚áëi (‚Üë)]
c2
¬≤¬≤
a[‚áëi+j+1 (s)][‚áëi (‚Üë)][‚áëi+j+1 (b[s]/)]
c3
// a[‚áëi+j+1 (s)][‚áëi+j (b[s]/)][‚áëi (‚Üë)]
‚Ä¢ (2) with (2) where i, j ‚â• 0, see Figure 5.1
‚Ä¢ (3) with (3):
120
5.
3
E
x
t
e
n
d
i
n
g
w
i
t
h

o
m
p
o
s
i
t
i
o
n
a[‚áëi (b/)][‚áëi+j (c/)][‚áëi+j (s)]
c2
//
c2
¬≤¬≤
a[‚áëi (b/)][‚áëi+j+1 (s)][‚áëi+j (c[s]/)]
c2
¬≤¬≤
a[‚áëi+j+1 (c/)][‚áëi (b[‚áëj (c/)]/)][‚áëi+j (s)]
c2
¬≤¬≤
a[‚áëi+j+2 (s)][‚áëi (b[‚áëj+1 (s)]/)][‚áëi+j (c[s]/)]
c2
¬≤¬≤
a[‚áëi+j+1 (c/)][‚áëi+j+1 (s)][‚áëi (b[‚áëj (c/)][‚áëj (s)]/)]
c2
¬≤¬≤
a[‚áëi+j+2 (s)][‚áëi+j+1 (c[s]/)][‚áëi (b[‚áëj+1 (s)][‚áëj (c[s]/)]/)]
a[‚áëi+j+2 (s)][‚áëi+j+1 (c[s]/)][‚áëi (b[‚áëj (c/)][‚áëj (s)]/)]
and it is the ase that b[‚áëj (c/)][‚áëj (s)] ‚àí‚Üí
c2
b[‚áëj+1 (s)][‚áëj (c[s]/)] therefore the diagram is losed.
Figure 5.1: ŒªœÖc ritial pair (2) with (2) where i, j ‚â• 0.
1
2
1
5.3 Extending with omp osition
a[‚áëi (‚Üë)][‚áëi+1+j (‚Üë)][‚áëi+2+j (s)]
c3
//
c3
¬≤¬≤
a[‚áëi (‚Üë)][‚áëi+j+1 (s)][‚áëi+j+1 (‚Üë)]
c3
¬≤¬≤
a[‚áëi+j (‚Üë)][‚áëi (‚Üë)][‚áëi+j+2 (s)]
c3
¬≤¬≤
a[‚áëi+j (s)][‚áëi (‚Üë)][‚áëi+j+1 (‚Üë)]
c3
¬≤¬≤
a[‚áëi+j (‚Üë)][‚áëi+j+1 (s)][‚áëi (‚Üë)]
c3
// a[‚áëi+j (s)][‚áëi+j (‚Üë)][‚áëi (‚Üë)]
‚ú∑
It is imp ortant to note that even when one an hek the ritial pairs in an automated
and onvenient way using to ols suh as CiME (23), no simple to ol is likely to b e useful for our
setting sine the terms are b eing parameterized by natural numb ers, suh as the index i in
the substitution ‚áëi (s) reeting its generiity, atually not part of the syntax1 . Therefore
eah one of the ab ove ritial pair diagrams has to b e onsidered an innite family of diagrams.
In a same way we an get WCR for the substitution alulus:
Prop osition 5.3.3 œÖc is WCR for open terms.
Proof: Restriting the attention only to the substitution alulus ritial pairs.
Other way to prove it is by using Prop osition 5.3.2 and the fat that œÖc is a sub-ARS of ŒªœÖc.
‚ú∑
With the present formulation, we are not sure if œÖc is SN, i.e. there is the p ossibility that
omp osition rules eventually reate innite derivations.
Every losed term a has a œÖc-nf whih is a pure term. This is immediate b eause œÖ is a SN
sub-alulus of œÖc, thus with the œÖ-rules a term always normalizes.
Let us disuss a p ossible omparison with Œªse (see the preliminaries). A natural question is
if we ould transfer our ŒªœÖc formulation to Œªs-style aluli, by means of a translation from ŒªœÖ
op en terms to Œªse, i.e. Œªs with new rules for op en terms (see the preliminaries). It is p ossible to
hek that the omp osition rules are not the result of translating the Œªse omp osition rules by
the standard translations. Nor vieversa, the latter annot b e obtained by bakward translation
of the former.
We emphasize that the omp osition rules of Œªse are quite dierent from the rules that we are
using with ŒªœÖ in this hapter, even when some of them may lo ok similar. As in Œªse our rules are
rule shemas b eause of the supraindies i denoting natural numb ers as we previously explained.
But one almost immediate advantage of these rules with resp et to those of Œªse is that they
do not handle onditions given by inequalities, so this oers more larity in understanding the
alulus.
1
In ELAN (53) it is p ossible to dene several rules by using a variable ranging over a nite set of natural
numb ers as a parameter, and ritial pairs an b e pro dued mehanially, but this also yields nite families of
them.
122
5.4 A alulus with one index
5.4 A alulus with one index
As an appliation of the previous setion, we here show a alulus of expliit substitution √†
la de Bruijn with 1 as its sole index, somehow in the way ŒªœÉ works. This is feasible due to the
presene of omp osition rules like the ones given in setion 5.3. The resulting alulus has a
minimal set of 8 rules, without the rules (Shift), (RVar) and (RVarLift).
Denition 5.4.1 We introdue the ŒªœÖ1-alulus set of open terms Œõ
t
œÖ1 and its set of open sub-
stitutions ŒõsœÖ1 given by the fol lowing syntax:
Open terms a ::= 1 | X | (a a) | (Œªa) | a[s]
Open substitutions s ::= x | a/ | ‚Üë | ‚áë (s)
where X denotes term meta-variables and x denotes substitution meta-variables; and the fol-
lowing rule shemas:
(Œªa)b‚Üí a[b/] (Beta1)
1[a/] ‚Üí a (FVar1)
1[‚áë (s)] ‚Üí 1 (FVarLift1)
(ab)[s] ‚Üí a[s]b[s] (App1)
(Œªa)[s] ‚Üí Œª(a[‚áë (s)]) (Lam1)
a[‚áëi (‚Üë)][‚áëi (b/)] ‚Üí a i ‚â• 0 (11)
a[‚áëi (b/)][‚áëi (s)] ‚Üí a[‚áëi+1 (s)][‚áëi (b[s]/)] i ‚â• 0 (21)
a[‚áëi (‚Üë)][‚áëi+1 (s)] ‚Üí a[‚áëi (s)][‚áëi (‚Üë)] i ‚â• 0 (31)
We all œÖ1 to all ŒªœÖ1-rules exept (Beta1). Let ŒõœÖ1 = Œõ
t
œÖ1 ‚à™ Œõ
s
œÖ1.
The idea is to represent indies greater than 1 with 1[‚Üë]...[‚Üë], to give the translation b elow.
Remark that, in order to have a useful rewriting system, the omp osition rules b eome neess ary
to lose diagrams, i.e. one annot leave them out. For instane, a simulation of the simple
redution (Œª2)b
‚àó
‚ÜíŒªœÖ 1 would start with the step (Œª1[‚Üë])b ‚ÜíŒªœÖ1 1[‚Üë][b/] and, if one do es not
onsider the (11)-rule, the last term would b e a normal form.
Note that ŒªœÖ1 is a sub-alulus of ŒªœÖc and œÖ1 is a sub-alulus of œÖc, as stated by the
Lemma 5.4.2 Let a, b ‚àà ŒõtœÖ1 be open terms.
1. If a‚ÜíœÖ1 b, then a‚ÜíœÖc b.
2. If a‚ÜíŒªœÖ1 b, then a‚ÜíŒªœÖc b.
123
5.4 A alulus with one index
Proof: Both items are immediate by indution on a using rule-by-rule analysis. ‚ú∑
Denition 5.4.3 We dene the fol lowing translation from ŒõœÖ open terms to ŒõœÖ1 open terms:
t(1) = 1
t(n+ 1) = 1[‚Üë] . . . [‚Üë]Ô∏∏ Ô∏∑Ô∏∑ Ô∏∏
n
t(Œªa) = Œªt(a)
t(ab) = t(a)t(b)
t(a[s]) = t(a)[t(s)]
t(X) = X
t(a/) = t(a)/
t(‚Üë) =‚Üë
t(‚áë (s)) =‚áë (t(s))
t(x) = x
Remark 5.4.4 t is learly an onto non-injetive appliation (both onsidering its restrition
to the subset of losed terms as wel l as with respet to the set of open terms).
Lemma 5.4.5 For every a ‚àà ŒõœÖ1 t(a) = a.
Proof: By indution on a. ‚ú∑
The following Prop osition shows that ŒªœÖ1 simulates (in 0 or more steps) ŒªœÖc (in partiular,
it simulates ŒªœÖ).
Prop osition 5.4.6 Let a, b ‚àà ŒõœÖ be open terms. If a‚ÜíŒªœÖc b, then t(a)
‚àó
‚ÜíŒªœÖ1 t(b).
Proof: By indution on a. The (RVar)-rule is simulated by the (11)- rule. The (FVarLift)-
rule is simulated by iteration of the (31)-rule. The (VarShift)-rule is simulated trivially in 0
steps. All omp osition rules are simulated straightforwardly sine they are the same, and the
other rules and the indutive ases present no problem. ‚ú∑
Lemma 5.4.7 Let a ‚àà ŒõœÖ be a œÖ-nf open term. Then t(a) is a œÖ1-nf.
Proof: Noting that terms of the form 1[‚Üë] . . . [‚Üë] do not ontain (11)-, (21)- nor (31)-redexes.
‚ú∑
We have
Corollary 5.4.8 1. œÖ1 is WCR for open terms.
2. ŒªœÖ1 is WCR for open terms.
Proof: Conseque n  e of the results in setion 5.3 ab out ŒªœÖc, Lemma 5.4.2, Prop osition 5.4.6
and Lemma 5.4.7. ‚ú∑
124
5.5 Conlusion and future work
5.5 Conlusio n and future work
In this hapter we have studied and established the weak onuene on op en terms of a
ŒªœÖ-alulus with omp osition-like rules.
The main feature of this result is that we gain weak onuene on op en terms in a alulus
in a dierent style to Œªs and having many of its (go o d) prop erties. Also, it is a alulus derived
from ŒªœÖ, thus having the same style and minimal rules, using rule shemas (a feature whih
do es not dier from Œªse). This alulus with omp osition rules has a set of terms whih an
b e shrinked to a smaller set by using only one de Bruijn index, for whih an appropriate set of
rules an b e dened to simulate the parent alulus. This indiates that the omp osition rules
are p owerful.
Dierent things an happ en aording to the presene of the various substitution onstruts.
We found that eah alulus may have a dierent b ehavior from this p oint of view, a fat that
suggests to study them omparatively. It is known that for instane ŒªœÉ loses PSN, prinipally
b eause of the presene of substitution omp osition. Thus it would b e interesting to explore a
general relation b etween these families of funtions and the prop erties of the alulus: SN of
the substitution alulus, PSN, onuene and other.
Future work inludes to study SN of the substitution alulus œÖc, and also studying typing
systems and PSN for ŒªœÖc and ŒªœÖ1. Other natural ontinuation ould b e to haraterize the
various substitution funtions (and their strutures) in dierent aluli of substitutions. These
strutures will tell us ab out the express ive p ower of the aluli, a notion whih is not ompletely
formalized at present.
5.6 App endix. CINNI-style alulus with omp ositio n
In this setion we will onsider the Calulus of Indexed Names and Named Indies (CINNI)
(79). CINNI style of rewriting is greatly inspired in ŒªœÖ, and it intro dues the b enet of using
b oth names and de Bruijn indies with the goal of onstituting a general theory of higher order
rewriting through sp eially parameterized substitution aluli. It is suiently generi in the
sense that it an b e instantiated for a wide range of ob jet languages, thus b eing a partiularly
interesting sub jet of study as the author states in (79).
Denition 5.6.1 Given an underlying rst order language L of funtion symbols equipped with
an arity, the CINNI alulus over L is given by the fol lowing syntax1 :
Terms a ::= Xm | f(a1, ...an) | a[s] where m,n ‚â• 0
Substitutions s ::= [X = a] | ‚ÜëX | ‚áë (s)X
1
We use a dierent losure notation w.r.t. (79): in the losures we preede substitution by the aeted
term.
125
5.6 App endix. CINNI-style alulus with omp osition
where X ranges over a denumerably innite set of variables; and by the fol lowing rules:
X0[X = a] ‚Üí a (1)
Xn+1[X = a] ‚Üí Xn (2)
Yn[X = a] ‚Üí Yn if X 6= Y (2')
X0[‚áë (s)X ] ‚Üí X0 (3)
Xn+1[‚áë (s)X ] ‚Üí Xn[s][‚ÜëX ] (4)
Yn[‚áë (s)X ] ‚Üí Yn[s][‚ÜëX ] if X 6= Y (4')
Xn[‚ÜëX ] ‚Üí Xn+1 (5)
Yn[‚ÜëX ] ‚Üí Yn if X 6= Y (5')
Furthermore, for eah syntati onstrutor f of the underlying language L we add a syntax-
sp ei equation in the form of a rewriting rule:
f(P1, . . . , Pn)[s] ‚Üí f(P1[s1], . . . , Pn[sn]) (f)
where the rhs is a term headed by f but in whih the arguments have as losures the substitu-
tions si whih are basially hains of lifts over s, in p ossibly dierent ways whih solely dep end
on f . For example, in CINNIc (for the Œª-alulus, to b e dened b elow) the Œª binder is an
arity 1 symb ol whih is always lifted at level 1 in its unique argument, and the appliation is
an arity 2 symb ol for whih arguments are not lifted at all.
When instantiating this rule appropriately, that is, when using dierent funtion symb ols
with arities and losure propagation riteria as desrib ed ab ove, we obtain the (App)- and
(Lam)-rules in ŒªœÖ. Thus ŒªœÖ is learly a sub-alulus of CINNI, and in this manner CINNI
latter represents a big family of extensions of ŒªœÖ.
Now, for s a substitution, W = W1, . . . ,Wn a sequen e of n meta-variables and Z =
Z1, . . . , Zm another sequen e of m meta-variables, we use the notation |Z|X = the numb er
of o urrenes of X in the list Z,
also ‚áë (s)W =‚áë (‚áë (. . . ‚áë (s)Wn . . . )W2)W1
and for onatenation we write
W,X = W1, . . . ,Wn, X
W,Z = W1, . . . ,Wn, Z1, . . . , Zm.
We now intro due a ompletion of CINNI.
Denition 5.6.2 The CINNIc (for the Œª-alulus) is dened by the fol lowing rules:
126
5.7 App endix. Adding identity to
‚Ä¢ Al l CINNI rules
‚Ä¢ with regard to elements f ‚àà L, the rules (BetaC), (AppC) and (LamC) below:
(ŒªX.a)b‚Üí a[X = b] (BetaC)
(ab)[s] ‚Üí a[s]b[s] (AppC)
(ŒªX.a)[s] ‚Üí ŒªX.(a[‚áë (s)X ]) (LamC)
‚Ä¢ the fol lowing omposition rules:
a[‚áë (‚ÜëX)W ][‚áë (X = b)W ] ‚Üí a (1)
a[‚áë (X = b)W ][‚áë (s)W ] ‚Üí a[‚áë (s)W,X ][‚áë (X = s(b))W ] (2)
a[‚áë (‚ÜëX)W ][‚áë (s)W,X ] ‚Üí a[‚áë (s)W ][‚áë (‚ÜëX)W ] (3)
The weak onuene of the CINNIc-alulus on op en terms an b e proved in the same way
as b efore by analyzing the ritial pairs (we omit the various diagrams).
5.7 App endix. Adding identi ty to ŒªœÖ
Sine we saw in Prop osition 5.2.17 that there are no generi identities in ŒªœÖ, we will see
b elow the onseque n  e of adding a (full) identity to this alulus. The interesting thing is
that it will not lose its main prop erties. First we prop ose to enrih the syntax with another
substitution: id, and a new rule an b e added aordingly. In this way we intro due the simply
typ ed ŒªœÖid-alulus term syntax as follows.
Denition 5.7.1
Terms a ::= n | (a a) | (Œª a) | a[s] where n ‚àà IN
Substitutions s ::= id | a / | ‚Üë | ‚áë (s)
with the usual notation.
The rules will onsist of the regular ŒªœÖ-rules to whih an identity rule is to b e added. We
rst onsider the following one:
(id1 ) n[id] ‚Üí n
Note that the eet is not the same as adding the (more eient) rule
(id2 ) a[id] ‚Üí a
127
5.7 App endix. Adding identity to
sine it an b e applied to every term.
Let us all ŒªœÖid2 the full alulus adding this rule, and œÖid2 the substitution alulus adding
this rule.
In order to justify what omes next, we show that ‚áëm (id) will also b ehave as an identity for
pure terms.
Lemma 5.7.2 For al l a ‚àà Œõ, m ‚àà IN0, a[‚áë
m (id)]
+
‚ÜíœÖid2 a.
Proof: We rst prove that for all n ‚àà IN , m ‚àà IN0, n[‚áë
m (id)]
+
‚ÜíœÖid2 n. This is simple
onsidering n = 1 and n > 1 separately. Then use indution on a to prove a[‚áëm (id)]
+
‚ÜíœÖid2 a.
‚ú∑
Note that Lemma 5.7.2 holds for pure terms and annot b e extended to all ŒõœÖ. More preisely,
if a is a losure then it might not b e the ase that a[‚áëm (id)]
+
‚ÜíœÖid2 a. One may have more than
one way to takle this drawbak. One of them is onsidering a weaker ondition: a[‚áëm (id)] =œÖ
a. Then to prop ose a (restrited) omp osition rule for ŒªœÖ. Reall that a[b/][s] =œÖ a[‚áë (s)][b[s]/]
an b e proved for ŒªœÖ, so we an dene the following (restrited) omp osition rule:
(c) a[b/][s] ‚Üí a[‚áë (s)][b[s]/]
But in this ase Lemma 5.7.2 an b e extended to ŒõœÖ only for losures of the form a[b/], sine
a[s][‚áëm (id)] ‚Üíc a[‚áë
m+1 (id)][s]
+
‚ÜíœÖid2 a[s] by IH (in the pro of of Lemma 5.7.2).
One way to solve this is adding omp osition rules (see next setion). The other is to add a
more p owerful identity.
Therefore adding an identity to this ŒªœÖ with omp osition as in rule (id1 ) or (id2 ) would not
have the same eet than adding the more general (and eient) rule
(id) a[‚áëm (id)] ‚Üí a (m ‚â• 0)
as we shall see.
Denition 5.7.3 We al l œÖ with identity, or œÖid, the œÖ-alulus together with the above (id)-
rule shema. Let also ŒªœÖid = œÖid + (Beta). We al l œÖidp the alulus restriting the appliation
of the (id)-rule to pure terms, and we denote with ŒõœÖtid the set of terms and with ŒõœÖ
s
id the set
of substitutions.
Even if we restrit the appliation of rule id to pure terms, this new rule makes sense, sine
this alulus has the required prop erties. We state the
Prop osition 5.7.4 (Soundness of œÖidp) . The fol lowing is valid: For al l a ‚àà ŒõœÖ, m ‚àà IN0,
a[‚áëm (id)] =œÖidp a.
128
5.7 App endix. Adding identity to
Proof: Use that œÖ(a)[‚áëm (id)]
‚àó
‚ÜíœÖidp œÖ(a) and a
‚àó
‚ÜíœÖ œÖ(a). ‚ú∑
Having said this, for the rest of this setion we onsider œÖid as having the full identity rule
given ab ove, i.e. for all ŒõœÖ terms.
In the last part of this setion we study the œÖid-alulus.
We dene the following identity erasure funtion over ŒõœÖid terms and substitutions:
e(n) = n
e(Œªa) = Œªe(a)
e(ab) = e(a)e(b)
e(a[‚áëm (id)]) = e(a)
e(a[s]) = e(a)[e(s)] if s 6= ‚áëm (id)
e(‚áë (s)) = ‚áë (e(s))
e(‚Üë) = ‚Üë
e(a/) = e(a)/
or equivalently:
e(n) = n
e(Œªa) = Œªe(a)
e(ab) = e(a)e(b)
e(a[‚áëm (id)]) = e(a)
e(a[‚áëm (b/)]) = e(a)[‚áëm (e(b)/)]
e(a[‚áëm (‚Üë)]) = e(a)[‚áëm (‚Üë)]
Lemma 5.7.5 For al l w ‚àà ŒõœÖid term or substitution, w
‚àó
‚Üíid e(w)
Proof: By indution on w. Note that the derivation is empty i w = e(w) i w ‚àà ŒõœÖ. ‚ú∑
We show the following weak projetion:
Lemma 5.7.6 Let a, b ‚àà ŒõœÖid.
1. If a
‚àó
‚ÜíœÖid b, then e(a) =œÖ e(b).
2. If a‚ÜíBeta b, then e(a) ‚ÜíBeta e(b).
3. If a
‚àó
‚ÜíŒªœÖid b, then e(a) =ŒªœÖ e(b).
Proof:
1. We prove rst that if a ‚ÜíœÖid b, then e(a) =œÖ e(b), by indution on a and mehanially
heking eah œÖid-rule. Then we use indution on the length of the derivation a
‚àó
‚ÜíœÖid b.
2. We prove that if a‚ÜíBeta b, then e(a) ‚ÜíBeta e(b) by indution on a.
3. By (1) and (2).
‚ú∑
129
5.7 App endix. Adding identity to
Atual pro jetion, i.e. if a ‚ÜíœÖid b then e(a)
‚àó
‚ÜíœÖ e(b), is not valid, taking for instane
a = (n + 1)[‚áë (id)], and b = n[id][‚Üë], then a ‚ÜíœÖid b and obviously it is not the ase that
n + 1
‚àó
‚ÜíœÖ n[‚Üë]
1
. This will slightly mo dify the following pro of with resp et to other known
onuene pro ofs.
Prop osition 5.7.7 (Conuene of ŒªœÖid and œÖid) 1. œÖid is onuent.
2. ŒªœÖid is onuent.
Proof:
1. Let a, b, c ‚àà ŒõœÖid suh that a
‚àó
‚ÜíœÖid b and a
‚àó
‚ÜíœÖid c. By Lemma 5.7.5, a
‚àó
‚Üíid e(a), b
‚àó
‚Üíid e(b)
and c
‚àó
‚Üíid e(c). By Lemma 5.7.6(1), e(a) =œÖ e(b) and e(a) =œÖ e(c), thus e(b) =œÖ e(c).
Therefore, by the onuene of œÖ, there exists d suh that e(b)
‚àó
‚ÜíœÖ d and e(c)
‚àó
‚ÜíœÖ d and
we are done.
2. Analogous to the previous item, using Lemmas 5.7.5 and 5.7.6(3) and the fat that ŒªœÖ is
onuent.
‚ú∑
Remark that the (id)-rule is itself SN sine it is size-dereasing for all terms with resp et to
| ‚Ä¢ |. We an show that SN holds for œÖid-alulus.
Prop osition 5.7.8 Strong Normalization holds for œÖid-alulus.
Proof: We dene the funtion h : ŒõœÖid ‚Üí IN , resembling the denition in (60) but with the
addition of the last lause:
h(n) = n+ 1
h(ab) = h(a) + h(b) + 1
h(Œªa) = h(a) + 1
h(a[s]) = h(a)h(s)
h(a/) = h(a)
h(‚Üë) = 2
h(‚áë (s)) = h(s)
h(id) = 2
It is easy to hek that wheneve r a ‚ÜíœÖid b, h(a) > h(b). For the new ase, sine h(‚áë
n (id)) =
h(id) = 2 (by indution on n) then h(a[‚áën (id)]) = 2h(a) > h(a) for all a. ‚ú∑
Corollary 5.7.9 PSN holds for ŒªœÖid
Proof: If a ‚àà Œõ is a SN term, it an b e proved by indution on a that no id-redex is reated
from a after any ŒªœÖid-step. Then an innite ŒªœÖid-derivation from a would b e an innite ŒªœÖ-
derivation starting from a, thus by PSN of ŒªœÖ (13; 60) a is SN with resp et to ŒªœÖid. ‚ú∑
1
In fat only the (RVarLift)-rule blo ks the p ossibility of pro jetion.
130
5.7 App endix. Adding identity to
131
5.7 App endix. Adding identity to
Figure 5.2: SS(SSS(SS))(SSS(S(SSSS))) after 33 left-most steps
Figure 5.3: SS((SSS)(SS))(SSS(S((SSS)S))) after 73 left-most steps
132
Chapter 6
The Weak Normalization of the Simply
Typ ed Œªse-alulus
Computer Siene is no more about omputers than astronomy is about tele-
sopes.  E. W. Dijkstra
In mathematis you don't understand things. You just get used to them.  J.
von Neumann
ABSTRACT In this hapter, we show the weak normalization (WN) of the simply-typ ed
Œªse-alulus with op en terms where abstrations are deorated with typ es, and meta-variables,
de Bruijn indies and up dating op erators are deorated with environments. We show a pro of
of WN using the Œªœâe-alulus, a alulus isomorphi to Œªse. This pro of is strongly inuened
by Goubault-Larreq's pro of of WN for the ŒªœÉ-alulus but with subtle dierenes whih show
that the two styles require dierent attention. Furthermore, we give a new alulus Œªœâ‚Ä≤e whih
works like Œªse but whih is loser to ŒªœÉ than Œªœâe. For b oth Œªœâe and Œªœâ
‚Ä≤
e we prove WN for
typ ed semi-op en terms (i.e. those whih allow term variables but no substitution variables),
unlike the result of Goubault-Larreq whih overed all ŒªœÉ op en terms.
6.1 Intro dution
The ob jetive of this hapter is to study the weak normalization of typable terms in a simply
typ ed de Bruijn lamb da alulus with expliit substitution, and some variants. We b egin by
giving here a brief survey of the simply typ ed versions of the Œª-alulus with de Bruijn indies
and of Œªs, Œªse and their resp etively isomorphi (in a sense to b e dened later) aluli Œªœâ
and Œªœâe as presented in (47). From the p oint of view of syntax the only dierene in those
presentations from the typ e free framework is that abstrations are deorated with typ es. In
133
6.2 Typing lamb da aluli by marking abstrations and op erators
the aluli we study here we also have meta-variables, de Bruijn indies and up dating op erators
deorated with environments. We will present these extensions in Setion 6.2.
A result of weak normalization for typ ed Œªse with op en terms is quite interesting, sine
on the one hand Œªse is a alulus enjoying most go o d prop erties, and on the other it is an
op en problem whether the se-alulus is strongly normalizing. Moreover, we give strategies to
alulate normal forms. For the pro of of WN we will use the metho d of Goubault-Larreq (37)
already employed for ŒªœÉ, although a non-trivial adaptation is neess ary for Œªse as we will see.
This hapter ontains the joint work in (7).
6.2 Typing lamb da aluli by marking abstrati o ns and op-
erators
In this setion we give the typ ed versions of the aluli we are going to study. We reall
the alulus Œª
‚Üí
œâe from (46), and we remark that when we dene this alulus as well as Œª
‚Üí
s e
they dier from the previously studied versions (see (46; 47)) in that not only abstrations
are deorated with typ es (as in Churh-style formulations of typ ed Œª-aluli), but also meta-
variables, de Bruijn indies and up dating op erators are deorated with environments. These
new deorations should allow one to typ e eah typable term in a unique way, in the sense that
given a typable term, there is a unique environment and a unique typ e for it. This will allow us
to talk ab out the type of a term. For instane, the typ e of nA1...Am will b e An in the environment
A1 . . . Am (for m ‚â• n), whereas undeorated terms would have a typ e dep ending on the given
environment. Nevertheless we remark that all the results to follow also hold when erasing all
typ e deorations.
6.2.1 The simply typ ed Œªs and Œªse-aluli
Denition 6.2.1 The set of ground simply typ ed Œªs-terms, denoted Œõ
‚Üí
s
, and the set of op en
simply typ ed Œªs-terms, denoted Œõ
‚Üí
s op are given as fol lows :
GroundTerms a ::= nE | (a a) | (ŒªT.a) | a œÉ
ja | œïi,Ek a
OpenTerms a ::= XE;T | nE | (a a) | (ŒªT.a) | a œÉ
ja | œïi,Ek a
where i, j, n ‚â• 1, k ‚â• 0 and X ranges over V a denumerably innite set of variables with
pairs of environments and types as subsripts, denoted as XE,T , YE,T , et. For eah n ‚àà IN ,
we assume that nE an be formed only when the length of E is greater than or equal to n.
Sometimes, when no ambiguity ould arise, the subsripts wil l be omitted. We al l pure terms
the terms that do not ontain meta-variables, œÉ- or œï-operators.
Denition 6.2.2 1. A losure is a term of the form a œÉjb. Compatibility on Œõs is extended
by adding: if a‚Üí b then a œÉjc‚Üí b œÉjc, c œÉja‚Üí c œÉjb and œïika‚Üí œï
i
kb.
134
6.2 Typing lamb da aluli by marking abstrations and op erators
‚Üí
œÉ
-gen (ŒªA.a) b ‚àí‚Üí a œÉ1 b
‚Üí
œÉ
-Œª-tr (ŒªA.a)œÉjb ‚àí‚Üí ŒªA.(a œÉj+1 b)
‚Üí
œÉ
-app-tr (a1 a2)œÉ
jb ‚àí‚Üí (a1 œÉ
jb) (a2 œÉ
jb)
‚Üí
œÉ
-des nE<j ,B,E‚â•j œÉ
jb ‚àí‚Üí
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
n‚àí 1E if n > j
œïj,E0 b if n = j
nE if n < j
‚Üí
œï
-Œª-tr œïi,Ek (ŒªA.a) ‚àí‚Üí ŒªA.(œï
i,E
k+1 a)
‚Üí
œï
-app-tr œïi,Ek (a1 a2) ‚àí‚Üí (œï
i,E
k a1) (œï
i,E
k a2)
‚Üí
œï
-des œï
i,E>k
k nE‚â§k,E‚â•k+i ‚àí‚Üí
{
n + i‚àí 1E if n > k
nE if n ‚â§ k
Figure 6.1: The rewriting rules of the simply typ ed Œªs-alulus
2. The simply typed Œªs-alulus is given by the rewriting rules in Figure 6.1, i.e. its redution
relation is the smal lest ompatible relation generated by those rules. We use Œª
‚Üí
s
to denote
this set of rules. The
‚Üí
s
-alulus is the rewriting system given by the set of rules
‚Üí
s= Œª
‚Üí
s
\{
‚Üí
œÉ
-gen}. The typing rules are given by the typing system L
‚Üí
s1 of Figure 6.2. We wil l
use the symbol ‚ä¢
L
‚Üí
s1
for this typing relation.
3. We say that a ‚àà Œõ
‚Üí
s
is a well typ ed term, or typ ed for short, if there exists an environment
E and a type A suh that E ‚ä¢
L
‚Üí
s1
a : A.
Denition 6.2.3 1. The set of rules Œª
‚Üí
s e is obtained by adding the rules in Figure 6.3 to
(L
‚Üí
s1‚àí var) A,E ‚ä¢ 1A,E : A (L
‚Üí
s1‚àí Œª)
A,E ‚ä¢ b : B
E ‚ä¢ ŒªA.b : A‚Üí B
(L
‚Üí
s1‚àí varn)
E ‚ä¢ nE : B
A,E ‚ä¢ n + 1A,E : B
(L
‚Üí
s1‚àí app)
E ‚ä¢ b : A‚Üí B E ‚ä¢ a : A
E ‚ä¢ b a : B
(L
‚Üí
s1‚àí œÉ)
E‚â•i ‚ä¢ b : B E<i, B,E‚â•i ‚ä¢ a : A
E ‚ä¢ a œÉib : A
(L
‚Üí
s1‚àí œï)
E‚â§k, E‚â•k+i ‚ä¢ a : A
E ‚ä¢ œïi,E>kk a : A
Figure 6.2: The typing rules of the simply typ ed Œªs-alulus
135
6.2 Typing lamb da aluli by marking abstrations and op erators
‚Üí
œÉ
-
‚Üí
œÉ
-tr (a œÉib)œÉj c ‚àí‚Üí (a œÉj+1 c) œÉi (b œÉj‚àíi+1 c) if i ‚â§ j
‚Üí
œÉ
-
‚Üí
œï
-tr 1 (œï
i,E<j‚àík,B,E‚â•j‚àík
k a)œÉ
j b ‚àí‚Üí œïi‚àí1,Ek a if k < j < k + i
‚Üí
œÉ
-
‚Üí
œï
-tr 2 (œï
i,E<j‚àík,B,E‚â•j‚àík
k a)œÉ
j b ‚àí‚Üí œïi,Ek (a œÉ
j‚àíi+1 b) if k + i ‚â§ j
‚Üí
œï
-
‚Üí
œÉ
-tr œïi,Ek (a œÉ
j b) ‚àí‚Üí (œïi,Ek+1a)œÉ
j (œïi,Ek+1‚àíjb) if j ‚â§ k + 1
‚Üí
œï
-
‚Üí
œï
-tr 1 œï
i,E>k‚àíl
k (œï
j,E‚â§k‚àíl,E‚â•k+i‚àíl
‚Ñì a) ‚àí‚Üí œï
j,E
‚Ñì (œï
i,E>k‚àíl
k+1‚àíj a) if l + j ‚â§ k
‚Üí
œï
-
‚Üí
œï
-tr 2 œï
i,E>k‚àíl
k (œï
j,E‚â§k‚àíl,E‚â•k+i‚àíl
‚Ñì a) ‚àí‚Üí œï
j+i‚àí1,E
‚Ñì a if l ‚â§ k < l + j
Figure 6.3: The new rewriting rules of the simply typ ed Œªse-alulus
the rules of the Œª
‚Üí
s
-alulus given in Figure 6.1. The Œª
‚Üí
s e-alulus is the redution system
(Œõ
‚Üí
s op,‚ÜíŒª‚Üís e) where ‚ÜíŒª
‚Üí
s e
is the smal lest ompatible redution on Œõ
‚Üí
s op generated by the
set of rules Œª
‚Üí
s e.
The
‚Üí
s e-alulus is the rewriting system generated by the set of rules
‚Üí
s e= Œª
‚Üí
s e \{
‚Üí
œÉ
-gen}.
Remark that the typing rules for Œª
‚Üí
s e are exatly the same as the typing rules for Œª
‚Üí
s
given
in Figure 6.2. We only need to add rules to type meta-variables:
(L
‚Üí
s1 ‚àíMetav) E ‚ä¢ XE,A : A.
We further assume that for eah ontext E and type A there are innitely many meta-
variables X, suh that E ‚ä¢ X : A.
2. We say that a ‚àà Œõ
‚Üí
s op is a well typ ed term, or typ ed for short, if there exists an environ-
ment E and a type A suh that E ‚ä¢
L
‚Üí
s1
a : A.
We denote with Œªs and Œªse the resp etive untyp ed aluli, i.e. the aluli where the deora-
tions have b een erased.
6.2.2 The simply typ ed Œªœâ and Œªœâe-aluli
In this setion we desrib e Œªœâ and Œªœâe where terms are deorated with typ es and environ-
ments. See the disussion ab out the losure notation and op erators in the preliminaries.
Denition 6.2.4 The set of terms of the Œª
‚Üí
œâ
-alulus, noted Œõ
‚Üí
œâ
, is dened as Œõ
‚Üí
œâ
t
‚à™ Œõ
‚Üí
œâ
s
,
where Œõ
‚Üí
œâ
t
(terms) and Œõ
‚Üí
œâ
s
(substitutions) are mutual ly dened as fol lows :
Terms a ::= nE | (a a) | (ŒªT.a) | a[s]j where n, j ‚â• 1
Substitutions s ::= ‚Üëi
E
| a / where i ‚â• 0
136
6.2 Typing lamb da aluli by marking abstrations and op erators
The set, denoted Œª
‚Üí
œâ
, of rules of the Œª
‚Üí
œâ
-alulus is given in Figure 6.4 . The set of rules
of the
‚Üí
œâ
-alulus is the set
‚Üí
œâ= Œª
‚Üí
œâ \{
‚Üí
œÉ ‚àígen}. Closures are terms of the form a[s]i, pure
terms are terms without substitutions, and ompatibility is dened in the usual way (see the
preliminaries).
The typing system for the Œª
‚Üí
œâ
-alulus is al led L
‚Üí
œâ
1. The rules L
‚Üí
œâ
1-var, L
‚Üí
œâ
1-varn, L
‚Üí
œâ
1-Œª
and L
‚Üí
œâ
1-app are exatly the same as L
‚Üí
s
1-var, L
‚Üí
s
1-varn, L
‚Üí
s
1-Œª and L
‚Üí
s
1-app, respetively,
as given in Figure 6.2. The new rules are given in Figure 6.5 . We wil l use the symbol ‚ä¢
L
‚Üí
œâ1
for this typing relation.
Just like the Œª
‚Üí
s
-alulus, the Œª
‚Üí
œâ
-alulus is not even lo ally onuent on op en terms. By open
terms in this new syntax we mean terms whih admit variables (usually alled meta-variables)
of sort term and of sort substitu t i o n .
Now, we dene formally what we mean by op en terms in our new syntax and give the
rewriting rules of Œª
‚Üí
œâe:
Denition 6.2.5 The set of op en terms, noted Œõ
‚Üí
œâop is dened as Œõ
‚Üí
œâ
t
op ‚à™ Œõ
‚Üí
œâ
s
op, where Œõ
‚Üí
œâ
t
op
(terms) and Œõ
‚Üí
œâ
s
op (substitutions) are mutual ly dened as fol lows :
Open Terms a ::= XE;T | nE | (a a) | (ŒªT.a) | a[s]j
Open Substitutions s ::= xE;E | ‚Üë
i
E
| a /
where n, j ‚â• 1 and i ‚â• 0, X ranges over V a denumerably innite set of term variables denoted
with XE,T , YE,T , et. and x ranges over W a denumerably innite set of substitution variables,
denoted with xE,E‚Ä≤, yE,E‚Ä≤, et. Closures, pure terms and ompatibility are dened as for Œª
‚Üí
œâ
.
The set, denoted Œª
‚Üí
œâe, of rules of the Œª
‚Üí
œâe-alulus is obtained by adding to the set of rules
Œª
‚Üí
œâ
given in Figure 6.4, the rules given in Figure 6.6. The set of rules of the
‚Üí
œâe-alulus is
‚Üí
œâe= Œª
‚Üí
œâe \{
‚Üí
œÉ ‚àígen}.
The typing rules for Œª
‚Üí
œâe are those of Œª
‚Üí
œâ
together with rules to type meta-variables:
(L
‚Üí
s1 ‚àíMetavT ) E ‚ä¢ XE,A : A (L
‚Üí
s1 ‚àíMetavS ) E ‚ä¢ xE,E‚Ä≤ ‚ä≤ E
‚Ä≤
We further assume that for eah ontext E and type A there are innitely many meta-variables
X, suh that E ‚ä¢ X : A. We also assume that for eah pair of ontexts E, E ‚Ä≤ there are innitely
many meta-variables x, suh that E ‚ä¢ x ‚ä≤ E ‚Ä≤.
We also dene Œõ
‚Üí
œâ
t
sop as the set of semi-op en terms, i.e. those open terms without substitution
variables (it is a proper subset of Œõ
‚Üí
œâ
t
op), and Œõ
‚Üí
œâ
s
sop as the set of semi-op en substitutions, i.e.
those open substitutions without substitution variables (it is a proper subset of Œõ
‚Üí
œâ
s
op). Œõ
‚Üí
œâ
t
sop
and Œõ
‚Üí
œâ
s
sop are mutual ly dened as fol lows:
Semi‚àí open Terms a ::= XE;T | nE | (a a) | (ŒªT.a) | a[s]j
Semi‚àí open Substitutions s ::=‚Üëi
E
| a /
137
6.3 The isomorphism
‚Üí
œÉ
-gen (ŒªA.a) b ‚àí‚Üí a [b/]1
‚Üí
œÉ
-app-tr (a b)[s]j ‚àí‚Üí (a [s]j) (b [s]j)
‚Üí
œÉ
-Œª-tr (ŒªA.a)[s]j ‚àí‚Üí ŒªA.(a[s]j+1)
‚Üí
œÉ
-/-des nE<j ,B,E‚â•j [a/]j ‚àí‚Üí
Ô£±Ô£¥Ô£≤
Ô£¥Ô£≥
n‚àí 1E if n > j
a[‚Üëj‚àí1E ]1 if n = j
nE if n < j
‚Üí
œÉ
-‚Üë-des nE<j ,E‚â•i+j [‚Üë
i
E‚â•j
]j ‚àí‚Üí
{
n + iE if n ‚â• j
nE if n < j
Figure 6.4: The rewriting rules of the simply typ ed Œªœâ-alulus
(L
‚Üí
œâ1‚àí id) E ‚ä¢ ‚Üë0E ‚ä≤E (L
‚Üí
œâ1‚àí slash)
E ‚ä¢ a : A
E ‚ä¢ a/ ‚ä≤ A,E
(L
‚Üí
œâ1‚àí shift)
E ‚ä¢ ‚ÜëiE ‚ä≤E
‚Ä≤
A,E ‚ä¢ ‚Üëi+1A,E ‚ä≤E
‚Ä≤
(L
‚Üí
œâ1‚àí clos)
E‚â•j ‚ä¢ s ‚ä≤ E
‚Ä≤ E<j, E
‚Ä≤ ‚ä¢ a : A
E ‚ä¢ a[s]j : A
(L
‚Üí
œâ1‚àíMetavT ) E ‚ä¢ XE,A : A (L
‚Üí
œâ1‚àíMetavS ) E ‚ä¢ xE,E‚Ä≤ ‚ä≤ E
‚Ä≤
Figure 6.5: The new typing rules of the simply typ ed Œªœâe-alulus
where n, j ‚â• 1 and i ‚â• 0 and X means the same as before. Last, we denote with Œªœâ and Œªœâe
the respetive untyped aluli, i.e. the aluli where the deorations have been erased.
In the rest of the hapter unless expliitly stated we will restrit Œª
‚Üí
œâe to the set Œõ
‚Üí
œâ
t
sop.
6.3 The isomorphi sm
The untyp ed versions of Œª
‚Üí
s
, Œª
‚Üí
s e, Œª
‚Üí
œâ
and Œª
‚Üí
œâe are obtained by deleting every typ e and
environment information of terms (f. (47)). For the untyp ed aluli, in (47) the authors proved
that the term restrition of the Œª
‚Üí
œâ
- and Œª
‚Üí
œâe-aluli on Œõ
‚Üí
œâ
t
sop are isomorphi resp etively to
the Œª
‚Üí
s
- and Œª
‚Üí
s e-aluli. In this setion, we state that the isomorphism an b e adapted for the
typ ed versions of these aluli and furthermore, that the new isomorphism preserves typ es.
Denition 6.3.1 The funtions T : Œõ
‚Üí
s op‚Üí Œõ
‚Üí
œâ
t
sop and S : Œõ
‚Üí
œâ
t
sop‚Üí Œõ
‚Üí
s op are dened indu-
138
6.3 The isomorphism
‚Üí
œÉ
-/-tr a [b/]k[s]j ‚àí‚Üí a [s]j+1[b[s]j‚àík+1/]k if k ‚â§ j
/-‚Üë-tr a [‚ÜëiE‚â§j‚àík,B,E>j‚àík ]k[b/]j ‚àí‚Üí
{
a[b/]j‚àíi[‚Üë
i
E]k if k + i ‚â§ j
a[‚Üëi‚àí1E ]k if k ‚â§ j < k + i
‚Üë-‚Üë-tr a [‚ÜëiE‚â§j‚àík,E>j+l‚àík ]k[‚Üë
l
E>j‚àík
]j ‚àí‚Üí
{
a[‚ÜëlE>j‚àík ]j‚àíi[‚Üë
i
E]k if k + i < j
a[‚Üëi+lE ]k if k ‚â§ j ‚â§ k + i
Figure 6.6: The new rewriting rules of the simply typ ed Œªœâe-alulus
tively:
T (XE,A) = XE,A S(XE,A) = XE,A
T (nE) = nE S(nE) = nE
T (a b) = T (a)T (b) S(a b) = S(a)S(b)
T (ŒªA.a) = ŒªA.T (a) S(ŒªA.a) = ŒªA.S(a)
T (a œÉjb) = T (a)[T (b)/]j S(a [b/]j) = S(a)œÉ
jS(b)
T (œïi,Ek a) = T (a)[‚Üë
i‚àí1
E ]k+1 S(a [‚Üë
i
E]k) = œï
i+1,E
k‚àí1 (S(a))
We make an abus de notation and use the same names T and S for the trivial restritions
of these funtions to ground terms. The ontext wil l make it lear whih is meant in every ase.
Theorem 6.3.2 The fol lowing hold:
1. Let a, b ‚àà Œõ
‚Üí
s op. If a‚Üí‚Üís b then T (a) ‚Üí‚Üíœâ T (b). If a‚ÜíŒª‚Üís b then T (a) ‚ÜíŒª‚Üíœâ T (b).
2. Let a, b ‚àà Œõ
‚Üí
s op. If a‚Üí‚Üís e b then T (a) ‚Üí
‚Üí
œâ e
T (b). If a‚Üí
Œª
‚Üí
s e
b then T (a) ‚Üí
Œª
‚Üí
œâ e
T (b).
3. Let a, b ‚àà Œõ
‚Üí
œâ
t
sop. If a‚Üí‚Üíœâ b then S(a) ‚Üí‚Üís S(b). If a‚ÜíŒª‚Üíœâ b then S(a) ‚ÜíŒª‚Üís S(b).
4. Let a, b ‚àà Œõ
‚Üí
œâ
t
sop. If a‚Üí‚Üíœâ e b then S(a) ‚Üí
‚Üí
s e
S(b). If a‚Üí
Œª
‚Üí
œâ e
b then S(a) ‚Üí
Œª
‚Üí
s e
S(b).
Proof: By indution on a. If the redution is internal, the indution hyp othesis applies;
otherwise, the theorem must b e heke d for eah rule. As an example, we illustrate for item 2.
the ase of redution at the ro ot with the rules œÉ-œï-tr 1 and œÉ-œï-tr 2:
Supp ose k < j < k + i. Then (œïika)œÉ
jb‚ÜíœÉ‚àíœï‚àítr1 œï
i‚àí1
k a, and
T (œïika)œÉ
jb) = T (œïika)[T (b)/]j
= T (a)[‚Üëi‚àí1]k+1[T (b)/]j ‚Üí/‚àí‚Üë‚àítr T (a)[‚Üë
i‚àí2]k+1 (sine k + i ‚â• j ‚â• k + 1 > k)
= T (œïi‚àí1k a).
Supp ose k + i ‚â§ j. Then (œïika)œÉ
jb‚ÜíœÉ‚àíœï‚àítr2 œï
i
k(aœÉ
j‚àíi+1b), and
T ((œïika)œÉ
jb) = T (œïika)[T (b)/]j
139
6.4 Sub jet Redution
= T (a)[‚Üëi‚àí1]k+1[T (b)/]j ‚Üí/‚àí‚Üë‚àítr T (a)[T (b)/]j‚àíi+1[‚Üë
i‚àí1]k+1 (sine k + i ‚â§ j)
= T (aœÉj‚àíi+1b)[‚Üëi‚àí1]k+1 = T (œï
i
k(aœÉ
j‚àíi+1b)).
The other ases are simpler. ‚ú∑
We verify nally that T and S are in fat inverses of eah other.
Theorem 6.3.3 The fol lowing holds: For al l a ‚àà Œõ
‚Üí
œâ
t
sop, we have T (S(a)) = a. For al l
a ‚àà Œõ
‚Üí
s op, we have S(T (a)) = a.
Proof: By an easy indution on a. ‚ú∑
Corollary 6.3.4 Œª
‚Üí
s
is isomorphi to Œª
‚Üí
œâ
restrited to Œõ
‚Üí
œâ
t
, and Œª
‚Üí
s e is isomorphi to Œª
‚Üí
œâe
restrited to Œõ
‚Üí
œâ
t
sop.
We end this setion by stating that the isomorphism preserves typ es, whih will b e used to
obtain sub jet redution for Œª
‚Üí
s
and Œª
‚Üí
s e from the orresp onding results for Œª
‚Üí
œâ
and Œª
‚Üí
œâe.
Lemma 6.3.5 Let E be an environment, A a type, a ‚àà Œõ
‚Üí
s op and b ‚àà Œõ
‚Üí
œâ
t
sop.
1. If E ‚ä¢
L
‚Üí
s 1
a : A then E ‚ä¢
L
‚Üí
œâ1
T (a) : A.
2. If E ‚ä¢
L
‚Üí
œâ1
b : A then E ‚ä¢
L
‚Üí
s 1
S(b) : A.
Proof: By indution on the struture of a and b, resp etively. ‚ú∑
6.4 Sub jet Redution
This setion is devoted to establish Sub jet Redution for our four aluli. We prove rst
sub jet redution for Œª
‚Üí
œâ
and Œª
‚Üí
œâe and then we use the isomorphisms given in the previous
setion to obtain Sub jet Redution for Œª
‚Üí
s
and Œª
‚Üí
s e.
Theorem 6.4.1 (Sub jet Redution for Œª
‚Üí
œâ
) Let a, b ‚àà Œõ
‚Üí
œâ
t
op and s, t ‚àà Œõ
‚Üí
œâ
s
op.
1. If E ‚ä¢ a : A and a‚Üí
Œª
‚Üí
œâ
b then E ‚ä¢ b : A.
2. If E ‚ä¢ s ‚ä≤ F and s‚Üí
Œª
‚Üí
œâ
t then E ‚ä¢ t ‚ä≤ F .
Proof: By simultaneous indution on the struture of a and s. If the redution is internal it
is enough to apply the indutive hyp othesis. If the redution is at the ro ot then eah rule must
b e examined. We hek for instane the rule
‚Üí
œÉ
-/-des for the ase n = j.
Let us assume E ‚ä¢ nF<j ,B,F‚â•j [a/]j : A. Therefore there exists an environment E
‚Ä≤
suh that
E‚â•j ‚ä¢ a/ ‚ä≤ E
‚Ä≤
and E<j, E
‚Ä≤ ‚ä¢ nF<j ,B,F‚â•j : A. Hene E<j = F<j and E
‚Ä≤ = B,F‚â•j and therefore
E‚â•j = F‚â•j, hene E = F . From E‚â•j ‚ä¢ a/ ‚ä≤ E
‚Ä≤
we dedue E‚â•j ‚ä¢ a : B and, sine A =
140
6.4 Sub jet Redution
(E<j, B,E‚â•j)n and n = j, we have A = B. Therefore, E‚â•j ‚ä¢ a : A and, b eause E ‚ä¢‚Üë
j‚àí1
E ‚ä≤E‚â•j,
we an apply the los-rule (rememb er E = E‚â•1 and, by onvention, E<1 = nil) to obtain
E ‚ä¢ a[‚Üëj‚àí1E ]1 : A. ‚ú∑
Theorem 6.4.2 (Sub jet Redution for Œª
‚Üí
œâe) Let a, b ‚àà Œõ
‚Üí
œâ
t
op and s, t ‚àà Œõ
‚Üí
œâ
s
op.
1. If E ‚ä¢ a : A and a‚Üí
Œª
‚Üí
œâ e
b then E ‚ä¢ b : A.
2. If E ‚ä¢ s ‚ä≤ F and s‚Üí
Œª
‚Üí
œâ e
t then E ‚ä¢ t ‚ä≤ F .
Proof: By simultaneous indution on the struture of a and s. The pro of is analogous to
the previous pro of, only the new rules must b e heke d now. As an example we study
‚Üí
œÉ
-/-tr.
Assume E ‚ä¢ a[b/]k[s]j : A and k ‚â§ j. Therefore, there exists an environment E
‚Ä≤
suh that
E‚â•j ‚ä¢ s ‚ä≤ E
‚Ä≤
(6.1)
and E<j, E
‚Ä≤ ‚ä¢ a[b/]k : A. Sine k ‚â§ j, by L
‚Üí
œâ
1-los there exists an environment E ‚Ä≤‚Ä≤ suh that
E<k, E
‚Ä≤‚Ä≤ ‚ä¢ a : A (6.2)
and Ek, . . . , Ej‚àí1, E
‚Ä≤ ‚ä¢ b/ ‚ä≤ E‚Ä≤‚Ä≤. Therefore, E ‚Ä≤‚Ä≤ = B,Ek, . . . , Ej‚àí1, E
‚Ä≤
and
Ek, . . . , Ej‚àí1, E
‚Ä≤ ‚ä¢ b : B (6.3)
Applying the los rule, from 6.1 and 6.2 we get
E<k, B,E‚â•k ‚ä¢ a[s]j+1 : A (6.4)
and from 6.1 and 6.3, E‚â•k ‚ä¢ b[s]j‚àík+1 : B, and a further appliation of slash gives
E‚â•k ‚ä¢ b[s]j‚àík+1/ ‚ä≤ B,E‚â•k (6.5)
Finally, applying los to 6.4 and 6.5, we onlude E ‚ä¢ a[s]j+1[b[s]j‚àík+1/]k : A. ‚ú∑
We use now the translations to prove Sub jet Redution for Œª
‚Üí
s
and Œª
‚Üí
s e. Atually, this will
only need the ab ove Sub jet Redution result restrited to the set Œõ
‚Üí
œâ
t
sop.
Theorem 6.4.3 (Sub jet Redution for Œª
‚Üí
s
and Œª
‚Üí
s e) Let a, b ‚àà Œõ
‚Üí
s
and c, d ‚àà Œõ
‚Üí
s op.
1. If E ‚ä¢ a : A and a‚Üí
Œª
‚Üí
s
b then E ‚ä¢ b : A.
2. If E ‚ä¢ c : A and c‚Üí
Œª
‚Üí
s e
d then E ‚ä¢ d : A.
Proof: We just hek the 1st item (the 2nd is similar). If E ‚ä¢ a : A then, by Lemma 6.3.5.1,
E ‚ä¢ T (a) : A. On the other hand, if a‚Üí
Œª
‚Üí
s
b then, by Theorem 6.3.2.2, T (a) ‚Üí
Œª
‚Üí
œâ
T (b). Now,
by Theorem 6.4.1.1, E ‚ä¢ T (b) : A, and by Lemma 6.3.5.2, we get E ‚ä¢ S(T (b)) : A, and we are
done b eause S(T (b)) = b, by Theorem 6.3.3. ‚ú∑
141
6.5 Weak Normalization of
6.5 Weak Normali zati o n of
‚Üí
œâe
In this setion we prove weak normalization for
‚Üí
œâe, the alulus of substitutions asso iated
to Œª
‚Üí
œâe, by reduing the problem to the untyp ed alulus. Weak normalization of
‚Üí
œâe will b e
needed in the next setion to obtain weak normalization of Œª
‚Üí
œâe.
Denition 6.5.1 We dene typ e erasure for Œª
‚Üí
œâ
-terms as fol lows:
|XE,A| = XE,A |xE,F | = xE,F
|nE| = n | ‚Üë
i
E | =‚Üë
i
|a b| = |a| |b| |a/| = |a|/
|ŒªA.a| = Œª|a| |a[s]j| = |a|[|s|]j
Lemma 6.5.2 Let a, b ‚àà Œõ
‚Üí
œâ
t
sop and s, t ‚àà Œõ
‚Üí
œâ
s
sop.
1. If a‚Üí
Œª
‚Üí
œâ e
b then |a| ‚ÜíŒªœâe |b|.
2. If s‚Üí
Œª
‚Üí
œâ e
t then |s| ‚ÜíŒªœâe |t|.
Proof: By an easy indution on the struture of terms and substitutions. ‚ú∑
Theorem 6.5.3
‚Üí
œâe-alulus is weakly normalizing for semi-open terms.
Proof: In (46) it is shown that every innermost strategy terminates in the se-alulus, i.e.
the untyp ed version of
‚Üí
s e, for op en terms. Here, we prove that every innermost strategy must
also terminate for
‚Üí
œâe for semi-op en terms. The pro of is by ontradition. Let us onsider an
innermost innite redution path b eginning with:
‚Ä¢ a term a, i.e. a‚Üí a1 ‚Üí . . . ‚Üí an ‚Üí . . . . Now, using the previous lemma and remarking
that erasing the typ es do es not hange the harater of the strategy, we get an innermost
innite derivation in œâe:
|a| ‚Üí |a1| ‚Üí . . .‚Üí |an| ‚Üí . . .
and then, applying the translation S (f.(47)) from untyp ed Œª
‚Üí
œâ
-terms into untyp ed Œª
‚Üí
s e-
terms, whih do es not hange the harater of the strategy either, we get the innermost
innite se-derivation:
S(|a|) ‚Üí S(|a1|) ‚Üí . . .‚Üí S(|an|) ‚Üí . . .
whih ontradits the ab ove mentioned result in (46).
‚Ä¢ a substitution s, then s = a/ (b eause s =‚ÜëiE is a normal form) and the innite redution
must o ur within a. Hene, by the previous item, this is also a ontradition.
‚ú∑
142
6.6 Soundness and simulation
6.6 Soundness and simulati o n
We have shown that
‚Üí
œâe is WN for semi-op en terms. Therefore for every term a in the
orresp onding language we an dene the normal forms
‚Üí
s (a),
‚Üí
s e (a),
‚Üí
œâe (a) as usual. In this
setion we show that these aluli enjoy the exp eted soundness and simulation prop erties with
resp et to de Bruijn Œª-alulus.
These aluli are sound in the following sense:
Prop osition 6.6.1 (Soundness of Œª
‚Üí
s
, Œª
‚Üí
s e, Œª
‚Üí
œâ
and Œª
‚Üí
œâe) The fol lowing hold:
1. Let a, b ‚àà Œõ
‚Üí
s
. If a‚Üí‚Üí
Œªs
b then
‚Üí
s (a)‚Üí Œ≤
‚Üí
s (b).
2. Let a, b ‚àà Œõ
‚Üí
s op. If a‚Üí‚Üí
Œªse
b then
‚Üí
s e (a)‚Üí Œ≤
‚Üí
s e (b).
3. Let a, b ‚àà Œõ
‚Üí
œâ
. If a‚Üí‚Üí
Œªœâ
b then
‚Üí
œâ (a)‚Üí Œ≤
‚Üí
œâ (b).
4. Let a, b ‚àà Œõ
‚Üí
œâsop. If a‚Üí‚Üí
Œªœâe
b then
‚Üí
œâe (a)‚Üí Œ≤
‚Üí
œâe (b).
Proof: All items an b e proved by indution on the p osition where the redution takes plae.
See more details in (46). ‚ú∑
Also, they simulate the Œ≤-redution in the de Bruijn Œª-alulus with or without op en terms.
We reall next the denition of the de Bruijn Œª-alulus with the addition of meta-variables.
Denition 6.6.2 We dene the de Bruijn open terms, denoted Œõop, by:
Open Terms a ::= XE;T | nE | (a a) | (ŒªT.a)
where again X ranges over a denumerably innite set of variables V. The de Bruijn Œª-alulus
on open terms has as its only rule Œ≤-redution, whih is the smal lest ompatible redution on
Œõop based on the shema in Denition 1.5.1. As before we may assume that for eah ontext E
and type A there are innitely many meta-variables X, suh that E ‚ä¢ X : A. The typing rules
are the usual ones plus the term meta-variable typing rule as given before.
Prop osition 6.6.3 (Simulation of Œ≤-redution for Œª
‚Üí
s
, Œª
‚Üí
s e, Œª
‚Üí
œâ
and Œª
‚Üí
œâe) 1. Let a, b ‚àà
Œõ be typed terms. If a‚ÜíŒ≤ b, then the fol lowing hold:
(a) there exists c ‚àà
‚Üí
Œõs suh that a‚Üí‚Üí
œÉ‚àígen
c‚Üí‚Üí
s
b.
(b) there exists c ‚àà
‚Üí
Œõœâ suh that a‚Üí‚Üí
œÉ‚àígen
c‚Üí‚Üí
œâ
b.
2. Let a, b be open Œª-alulus typed terms. If a‚ÜíŒ≤ b, then the fol lowing hold:
(a) there exists c ‚àà
‚Üí
Œõsop suh that a‚Üí‚ÜíœÉ‚àígen c‚Üí‚Üís e b.
143
6.7 Weak Normalization of and
(b) there exists c ‚àà
‚Üí
Œõœâsop suh that a‚Üí‚ÜíœÉ‚àígen c‚Üí‚Üíœâ e b.
Proof: All items an b e proved by indution on the p osition where the redution takes plae.
‚ú∑
6.7 Weak Normali zati o n of Œª
‚Üí
œâe and Œª
‚Üí
s e
The main tehnial to ol in the pro of of weak normalization of Œª
‚Üí
œâe is a translation similar
to the one given in (37) of typ ed terms into funtions whose arguments are Œª-terms (or lists
of them) and whose results are Œª-terms (or lists of them). Although the idea is the same, the
translation has to b e arefully adapted. Let T b e a given typ e. In order to dene this translation
we asso iate every term variable XE,A with a variable of the Œª-alulus that we denote
XÀÜA1‚Üí...‚ÜíAn‚ÜíT‚ÜíA,
where E = A1, . . . , An. We also asso iate every substitution variable xE,F with a list of lassial
variables denoted
xÀÜA1‚Üí...‚ÜíAn‚ÜíT‚ÜíB1 ; . . . ; xÀÜA1‚Üí...‚ÜíAn‚ÜíT‚ÜíBm , xÀÜA1‚Üí...‚ÜíAn‚ÜíT‚ÜíT,
where F = B1, . . . , Bm. The sripts show the typ es of the asso iated lassial variables.
The translation maps every Œª
‚Üí
œâ
-term u suh that A1, . . . , An ‚ä¢ u : A into a funtion [[u]]
whose arguments are lists of n + 1 terms t1; . . . ; tn+1 of resp etive typ es A1, . . . , An and T and
whih returns a term of typ e A. The translation of a Œª
‚Üí
œâ
-substitution s suh that A1, . . . , An ‚ä¢
s‚ä≤B1, . . . , Bm is a funtion [[s]] whose arguments are lists of n+1 terms t1; . . . ; tn+1 of resp etive
typ es A1, . . . , An and T and whih returns a list of m + 1 Œª-terms of typ es B1, . . . , Bm and T,
resp etively.
Essentially the translation redues the term to substitution normal form, susp ending substitu-
tions on variables. Then, roughly sp eaking, substitution steps map to vauous b eta-redutions
and
‚Üí
œÉ ‚àígen (i.e. Beta) steps on substitution normal forms map to non-empty Œª-alulus Œ≤
redutions, yielding the desired result by a simulation argument.
Denition 6.7.1 The translation [[‚Ä¢]] is given as fol lows, where t denotes the list of terms
144
6.7 Weak Normalization of and
t1; . . . ; tn; tn+1 and E = A1, . . . , An, F = B1, . . . , Bm and E ‚Üí A = A1 ‚Üí . . .‚Üí An ‚Üí T‚Üí A.
1. [[XE,A]](t) = XÀÜE‚ÜíA t1 . . . tn+1
2. [[xE,F ]](t) = (xÀÜE‚ÜíB1 t1 . . . tn+1); ¬∑ ¬∑ ¬∑ ; (xÀÜE‚ÜíBm t1 . . . tn+1); (xÀÜE‚ÜíT t1 . . . tn+1)
3. [[kE]](t) = tk where k ‚â§ n
4. [[ŒªA.u]](t) = Œªz.([[u]](z; t)) with z fresh of type A
5. [[u v]](t) = ([[u]](t))([[v]](t))
6. [[u[s]i]](t) = [[u]](t1; . . . ; ti‚àí1; [[s]](ti; . . . ; tn+1))
7. [[‚ÜëkE]](t) = tk+1; . . . ; tn+1 where k ‚â§ n+ 1
8. [[u/]](t) = ([[u]](t)); t
In item (4), z fresh means z 6‚àà FV (t) and z 6= XÀÜ, xÀÜ for every free variable X and x in u. If
we assume that our ountable set of variables is ordered then we may take z as the rst variable
satisfying the previous onditions.
In item (6), the arguments list (t1; . . . ; ti‚àí1; [[s]](ti; . . . ; tn+1)) should b e interpreted as the
onatenation b etween the list t1; . . . ; ti‚àí1 and the list whih results from [[s]](ti; . . . ; tn+1).
Lemma 6.7.2 If z 6= XÀÜ,xÀÜ for every X,x in u, then ([[u]](t))[a/z] ‚â°Œ± [[u]](t[a/z]) where by t[a/z]
we mean the list t1[a/z]; . . . ; tn[a/z] if t = t1; . . . ; tn.
Proof: By an easy indution on u. ‚ú∑
The next lemma is imp ortant, stating that [[]] is invariant under all the rules of the substitution
alulus.
Lemma 6.7.3 Let f, g ‚àà Œõ
‚Üí
œâop, if f ‚Üí‚Üíœâ e g then [[f ]] = [[g]].
Proof: By indution on the struture of f . If the redution is internal, use the indution
hyp othesis. We only give the ase where f = a[s]i, g = a[s
‚Ä≤]i and s‚Üí s
‚Ä≤
, sine the appliation
and abstration ases are analogous.
Let t = t1; . . . ; tn+1 with the right length. Then [[a[s]i]](t) =
[[a]](t1; . . . ; ti‚àí1; [[s]](ti; . . . ; tn+1)) = [[a]](t1; . . . ; ti‚àí1; [[s
‚Ä≤]](ti; . . . ; tn+1))
(by the indution hyp othesis)
= [[a[s‚Ä≤]i]](t).
If the redution is at the ro ot, then we must study eah rule. In all ases, let t = t1; . . . ; tn+1
with the right length.
For the
‚Üí
œÉ
-/-des rule,
145
6.7 Weak Normalization of and
‚Ä¢ if k > j, then [[k[a/]j]](t1; . . . ; tn+1) =
[[k]](t1; . . . ; tj‚àí1; [[a/]](tj; . . . ; tn+1)) =
[[k]](t1; . . . ; tj‚àí1; [[a]](tj; . . . ; tn+1); tj; . . . ; tn+1) =
tk‚àí1 = [[k ‚àí 1]](t1; . . . ; tn+1)
‚Ä¢ if k = j, then [[k[a/]j]](t1; . . . ; tn+1) =
[[k]](t1; . . . ; tj‚àí1; [[a/]](tj; . . . ; tn+1)) =
[[k]](t1; . . . ; tj‚àí1; [[a]](tj; . . . ; tn+1); tj; . . . ; tn+1) =
[[a]](tj; . . . ; tn+1) =
[[a]]([[‚Üëj‚àí1]](t1; . . . ; tn+1)) =
[[a[‚Üëj‚àí1]1]](t1; . . . ; tn+1)
‚Ä¢ if k < j, then [[k[a/]j]](t1; . . . ; tn+1) =
[[k]](t1; . . . ; tj‚àí1; [[a/]](tj; . . . ; tn+1)) =
tk = [[k]](t1; . . . ; tn+1).
For the
‚Üí
œÉ
-Œª-tr rule,
[[(ŒªA.a)[s]j]](t1; . . . ; tn+1) =
[[(ŒªA.a)]](t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
Œªz.[[a]](z; t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
Œªz.[[a[s]j+1]](z; t1; . . . ; tn+1) =
[[ŒªA.(a[s]j+1)]](t).
For the
‚Üí
œÉ
-app-tr rule,
[[(ab)[s]j]](t1; . . . ; tn+1) =
[[(ab)]](t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
[[a]](t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1))[[b]](t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
[[a[s]j]](t1; . . . ; tn+1)[[b[s]j]](t1; . . . ; tn+1) =
[[a[s]jb[s]j]](t1; . . . ; tn+1).
For the
‚Üí
œÉ
-‚Üë-des rule,
‚Ä¢ if k ‚â• j, then [[k[‚Üëi]j]](t1; . . . ; tn+1) =
[[k]](t1; ¬∑ ¬∑ ¬∑ : tj‚àí1[[‚Üë
i]](tj; . . . ; tn+1)) =
[[k]](t1; ¬∑ ¬∑ ¬∑ : tj‚àí1; tj+i; . . . ; tn+1) =
tj+i+k‚àí1‚àíj+1 = tk+i = [[k + i]](t1; . . . ; tn+1)
‚Ä¢ if k < j, then [[k[‚Üëi]j]](t1; . . . ; tn+1) =
[[k]](t1; ¬∑ ¬∑ ¬∑ : tj‚àí1[[‚Üë
i]](tj; . . . ; tn+1)) =
tk = [[k]](t1; . . . ; tn+1).
146
6.7 Weak Normalization of and
For the
‚Üí
œÉ
-/-tr rule, let k ‚â§ j, f = a[b/]k[s]j and g = a[s]j+1[b[s]j‚àík+1/]k.
Let B = [[b]](tk; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)). Then
[[a[b/]k[s]j]](t) =
[[a[b/]k]](t1; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
[[a]](t1; . . . ; tk‚àí1;B; tk; . . . ; tj‚àí1; [[s]](tj; . . . ; tn+1)) =
[[a[s]j+1]](t1; . . . ; tk‚àí1;B; tk; . . . ; tn+1) =
[[a[s]j+1]](t1; . . . ; tk‚àí1; [[b[s]j‚àík+1]](tk; . . . ; tn+1)) =
[[a[s]j+1[b[s]j‚àík+1/]k]](t).
For the /-‚Üë-tr rule,
‚Ä¢ if k + i ‚â§ j, then [[a[‚Üëi]k[b/]j]](t) =
[[a[‚Üëi]k]](t1; . . . ; tj‚àí1; [[b]](tj; . . . ; tn+1); tj . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tj‚àí1; [[b]](tj . . . ; tn+1); tj . . . ; tn+1)) =
[[a]](t1; . . . ; tk‚àí1; tk+i; . . . ; tj‚àí1; [[b]](tj . . . ; tn+1); tj . . . ; tn+1) =
[[a[b/]j‚àíi]](t1; . . . ; tk‚àí1; tk+i; . . . ; tn+1) =
[[a[b/]j‚àíi]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tn+1)) =
[[a[b/]j‚àíi[‚Üë
i]k]](t)
‚Ä¢ if k ‚â§ j < k + i, then [[a[‚Üëi]k[b/]j]](t) =
[[a[‚Üëi]k]](t1; . . . ; tj‚àí1; [[b]](tj; . . . ; tn+1); tj . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tj‚àí1; [[b]](tj . . . ; tn+1); tj . . . ; tn+1)) =
[[a]](t1; . . . ; tk‚àí1; tk+i‚àí1; . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i‚àí1]](tk; . . . ; tn+1); tk; . . . ; tn+1) =
[[a[‚Üëi‚àí1]k]](t).
For the ‚Üë-‚Üë-tr rule,
‚Ä¢ if k + i < j, then [[a[‚Üëi]k[‚Üë
l]j]](t) =
[[a[‚Üëi]k]](t1; . . . ; tj‚àí1; [[‚Üë
l]](tj; . . . ; tn+1)) =
[[a[‚Üëi]k]](t1; . . . ; tj‚àí1; tj+l; . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tj‚àí1; tj+l; . . . ; tn+1)) =
[[a]](t1; . . . ; tk‚àí1; tk+i; . . . ; tj‚àí1; tj+l; . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; tk+i; . . . ; tj‚àíi‚àí1+i; [[‚Üë
l]](tk; . . . ; tn+1)) =
[[a[‚Üël]j‚àíi]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tn+1)) =
[[a[‚Üël]j‚àíi[‚Üë
i]k]](t)
‚Ä¢ if k ‚â§ j ‚â§ k + i, then [[a[‚Üëi]k[‚Üë
l]j]](t) =
[[a[‚Üëi]k]](t1; . . . ; tj‚àí1; [[‚Üë
l]](tj; . . . ; tn+1)) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i]](tk; . . . ; tj‚àí1; tj+l; . . . ; tn+1)) =
147
6.7 Weak Normalization of and
[[a]](t1; . . . ; tk‚àí1; tk+i+l; . . . ; tn+1) =
[[a]](t1; . . . ; tk‚àí1; [[‚Üë
i+l]](tk; . . . ; tn+1)) =
[[a[‚Üëi+l]k]](t)
‚ú∑
Denition 6.7.4 Given the terms u, v ‚àà Œõ
‚Üí
œâop we say that u and v have the same typ e if both
are wel l typed and there is a ontext E and type A suh that E ‚ä¢
L
‚Üí
s1
u : A and E ‚ä¢
L
‚Üí
s1
v : A.
Denition 6.7.5 We dene the quasi-order > on Œõ
‚Üí
œâop terms as fol lows: u > v if u and v
have the same type and [[u]](t)
+
‚ÜíŒ≤ [[v]](t) for every list of Œª-terms t of the right length and the
right types (to be al led right t from now onwards).
It follows immediately that > is a strit order (i.e. irreexive and transitive), whih is also
ompatible with taking losures as stated next.
Lemma 6.7.6 1. Let a, b ‚àà Œõ
‚Üí
œâ
t
sop, j ‚â• 1 and s ‚àà Œõ
‚Üí
œâ
s
sop. If a > b, then a[s]j > b[s]j.
2. Let a, b ‚àà Œõ
‚Üí
œâ
t
sop, i1, . . . , ik ‚â• 1 and s1, . . . , sk ‚àà Œõ
‚Üí
œâ
s
sop. If a > b, then a[s1]i1 . . . [sk]ik >
b[s1]i1 . . . [sk]ik .
Proof:
1. For every right t,
[[a[s]j]](t) = [[a]](t1, . . . , tj‚àí1, [[s]](tj, . . . , tn)) ‚Üí
+
Œ≤ [[b]](t1, . . . , tj‚àí1, [[s]](tj, . . . , tn))
= [[b[s]j]](t).
2. Iterating the previous result.
‚ú∑
The following Lemma is tehnially imp ortant and will b e used in the pro of of Lemma 6.7.8.
Lemma 6.7.7 Let k ‚â• 1, i1 ‚â• i2 ‚â• ¬∑ ¬∑ ¬∑ ‚â• ik ‚â• 1, s1, . . . , sk ‚àà Œõ
‚Üí
œâ
s
sop and let X be a term
variable. Then for every right t, there exist r ‚â• 1, q1, . . . , qr ‚àà Œõ
‚Üí
œâ
t
sop whih do not depend on
t1, . . . , tik‚àí1 suh that [[X[s1]i1 . . . [sk]ik ]](t) = XÀÜ t1 t2 . . . tik‚àí1 q1 . . . qr.
Proof: By indution on k.
‚Ä¢ For k = 1 we have:
 s1 = d/, then [[X[s1]i1 ]](t) = XÀÜ t1 . . . ti1‚àí1 [[d]](ti1 , . . . , tn) ti1 . . . tn, thus take
(q1, . . . , qr) = ([[d]](ti1 , . . . , tn), ti1 , . . . , tn) whih learly do not dep end on the pre-
srib ed terms.
148
6.7 Weak Normalization of and
 s1 =‚Üë
m
with m ‚â• 0, then [[X[s1]i1 ]](t) = XÀÜ t1 . . . ti1‚àí1 ti1+m . . . tn, thus take
(q1, . . . , qr) = (ti1+m, . . . , tn) whih do not dep end on the presrib ed terms either.
‚Ä¢ For the indutive ase we have:
 sk+1 = d/, then [[X[s1]i1 . . . [sk]ik [sk+1]ik+1 ]](t)
= [[X[s1]i1 . . . [sk]ik ]](t1, . . . , tik+1‚àí1[[d]](tik+1 , . . . , tn), tik+1 , . . . , tn)
= XÀÜ t1 . . . tik+1‚àí1 [[d]](tik+1 , . . . , tn) tik+1 . . . tik‚àí2 q1 . . . qr (by the indution hyp oth-
esis) where q1, . . . , qr do not dep end on the previous terms in the list.
Taking (q‚Ä≤1, . . . , q
‚Ä≤
r‚Ä≤) = ([[d]](tik+1 , . . . , tn), tik+1 , . . . , tik‚àí2, q1, . . . , qr),
no q‚Ä≤j dep ends on t1, . . . , tik+1‚àí1, and
[[X[s1]i1 . . . [sk+1]ik+1 ]](t) = XÀÜ t1 t2 . . . tik+1‚àí1 q
‚Ä≤
1 . . . q
‚Ä≤
r‚Ä≤ .
 sk+1 =‚Üë
m
with m ‚â• 0, then [[X[s1]i1 . . . [sk]ik [sk+1]ik+1 ]](t)
= [[X[s1]i1 . . . [sk]ik ]](t1, . . . , tik+1‚àí1, tik+1+m, . . . , tn)
= XÀÜ t1 . . . tik+1‚àí1 tik+1+m . . . tik‚àí1+m q1 . . . qr (by the indution hyp othesis)
where q1, . . . , qr do not dep end on the previous terms in the list. Taking
(q‚Ä≤1, . . . , q
‚Ä≤
r‚Ä≤) = (tik+1+m, . . . , tik‚àí1+m, q1, . . . , qr), no q
‚Ä≤
j dep ends on
t1, . . . , tik+1‚àí1, and
[[X[s1]i1 . . . [sk+1]ik+1 ]](t) = XÀÜ t1 t2 . . . tik+1‚àí1 q
‚Ä≤
1 . . . q
‚Ä≤
r‚Ä≤ .
‚ú∑
Now we an give the key result, for semi-op en terms.
Lemma 6.7.8 Let a, b ‚àà Œõ
‚Üí
œâ
t
sop where a is an
‚Üí
œâe-normal form. If a‚Üí‚ÜíœÉ‚àígen b then a > b.
Proof: By indution on the p osition of the
‚Üí
œÉ ‚àígen redex in the term a.
If the redution is at the ro ot, i.e. a = (ŒªA.c)d and b = c[d/]1, then
[[(ŒªA.c)d]](t) = ([[(ŒªA.c)]](t))([[d]](t)) = (Œªz.[[c]](z; t))([[d]](t)) ‚ÜíŒ≤ [[c]](z; t))[([[d]](t))/z]
= [[c]]([[d]](t); t) = [[c[d/]1]](t) (by Lemma 6.7.2). Remark that, when Lemma 6.7.2 has b een
used, sine z should b e hosen suh that z 6‚àà FV (t), then t[([[d]](t))/z] = t.
Else we have the following ases:
‚Ä¢ a = n or a = X a term variable, the result holds vauously sine there is no
‚Üí
œÉ ‚àígen redex.
‚Ä¢ a = cd then if the redution o urs in c, say c‚Üí‚Üí
œÉ‚àígen
c‚Ä≤, we have
[[a]](t) = [[c]](t)[[d]](t) ‚Üí+Œ≤ [[c
‚Ä≤]](t)[[d]](t) = [[(c‚Ä≤d)]](t) = [[b]](t) using the indution hyp othesis;
and the situation is analogous if the redution o urs in d.
‚Ä¢ a = ŒªA.c then the redution o urs in c, say c‚Üí‚Üí
œÉ‚àígen
c‚Ä≤, then
[[a]](t) = Œªz.[[c]](t) ‚Üí+Œ≤ Œªz.[[c
‚Ä≤]](t) = [[ŒªA.c‚Ä≤]](t) = [[b]](t) using the indution hyp othesis.
149
6.7 Weak Normalization of and
‚Ä¢ a is a losure, then a will neess arily have the form d[s1]i1 . . . [sm]im where d is not a losure;
d annot b e an abstration, nor an appliation, nor an index (or else a would not b e a nf ).
Then d = X a term variable, and i1 > i2 > ¬∑ ¬∑ ¬∑ > im (or else a would not b e a nf ). Then
we have that there exists k ‚â• 1 suh that a = X[s1]i1 . . . [sk‚àí1]ik‚àí1 [sk]ik [sk+1]ik+1 . . . [sm]im
where sk = e/ with e‚Üí‚ÜíœÉ‚àígen e
‚Ä≤
, for some terms e, e‚Ä≤, and
a‚Üí‚Üí
œÉ‚àígen
X[s1]i1 . . . [sk‚àí1]ik‚àí1 [e
‚Ä≤/]ik [sk+1]ik+1 . . . [sm]im = b.
Supp ose rst k ‚â• 2. In what follows Lemma 6.7.7 will b e used twie; the non dep enden e
of the terms q1, . . . , qr on the ik‚àí1 ‚àí 1 terms expliited in the pro of guarantees that the
q1, . . . , qr whih app ear after the 2nd. equality also ensure that the 3rd. equality holds.
We have that
[[X[s1]i1 . . . [sk‚àí1]ik‚àí1 [e/]ik ]](t)
= [[X[s1]i1 . . . [sk‚àí1]ik‚àí1 ]](t1, . . . , tik‚àí1, [[e]](tik , . . . , tn), tik , . . . , tn)
= XÀÜ t1 t2 . . . tik‚àí1 [[e]](tik . . . tn) tik . . . tik‚àí1‚àí1 q1 . . . qr (by Lemma 6.7.7)
‚Üí+Œ≤ XÀÜ t1 t2 . . . tik‚àí1 [[e
‚Ä≤]](tik . . . tn) tik . . . tik‚àí1‚àí1 q1 . . . qr
(by the indution hyp othesis and ompatibility).
On the other hand,
[[X[s1]i1 . . . [sk‚àí1]ik‚àí1 [e
‚Ä≤/]ik ]](t)
= [[X[s1]i1 . . . [sk‚àí1]ik‚àí1 ]](t1, . . . , tik‚àí1, [[e
‚Ä≤]](tik , . . . , tn), tik , . . . , tn)
= XÀÜ t1 t2 . . . tik‚àí1 [[e
‚Ä≤]](tik . . . tn) tik . . . tik‚àí1‚àí1 q
‚Ä≤
1 . . . q
‚Ä≤
r
and b eause of the fat that q‚Ä≤1, . . . , q
‚Ä≤
r do not dep end on the terms b efore q
‚Ä≤
1, we have that
qi = q
‚Ä≤
i for 1 ‚â§ i ‚â§ r.
Thus, by Lemma 6.7.6(2),
[[a]](t) = [[X[s1]i1 . . . [sk‚àí1]ik‚àí1 [e/]ik [sk+1]ik+1 . . . [sm]im ]](t)
‚Üí+Œ≤ [[X[s1]i1 . . . [sk‚àí1]ik‚àí1 [e
‚Ä≤/]ik [sk+1]ik+1 . . . [sm]im ]](t) = [[b]](t).
The ase k = 1 follows diretly by Denition 6.7.1:
[[X[e/]i1 ]](t)
= XÀÜ t1 t2 . . . ti1‚àí1 [[e]](ti1 . . . tn) ti1 . . . tn
‚Üí+Œ≤ XÀÜ t1 t2 . . . ti1‚àí1 [[e
‚Ä≤]](ti1 . . . tn) ti1 . . . tn
(by the indution hyp othesis and ompatibility)
= [[X[e‚Ä≤/]i1 ]](t) and use Lemma 6.7.6(2) similarly.
‚ú∑
150
6.7 Weak Normalization of and
Even though it is an adaptation of the tehnique in (37), the tehnial result in Lemma 6.7.7
was required. In Lemma 6.7.8 sp eial are is neess ary for handling losures. For the ase that
a is a losure, if it were any op en term (i.e. having substitution variables), it might have a more
ompliated form than just d[s1]i1 . . . [sm]im with the onditions ab ove mentioned, and here is
where the metho d would not work. The ondition i1 > ¬∑ ¬∑ ¬∑ > im b eomes stritly neess ary,
otherwise the Œ≤-redex ould b e lost in the [[‚Ä¢]] transform. The result do es not hold for full op en
terms, taking for instane the normal form a = 2[x]2[d/]1 as a ounterexample, for d‚Üí‚ÜíœÉ‚àígen d
‚Ä≤
,
sine a‚Üí‚Üí
œÉ‚àígen
2[x]2[d
‚Ä≤/]1 but
[[a]](t) = [[2[x]2]]([[d/]](t1; . . . ; tn)) =
[[2[x]2]]([[d]](t1; . . . ; tn); t1; . . . ; tn) =
[[2]]([[d]](t1; . . . ; tn); [[x]](t1; . . . ; tn)) =
[[2]]([[d]](t1; . . . ; tn); xÀÜt1 . . . tn; . . . ; xÀÜt1 . . . tn) =
xÀÜt1 . . . tn
whih may not have Œ≤-redexes. This ounterexample is ritial. So far, Lemma 6.7.8 ould not
b e extended for the full op en term set using the same tehnique; it do es not seem that some
simple or intuitive hange in the [[‚Ä¢]] funtion denition ould help. Problems also are aused
by terms like 1[x]2, whih ould b e partially xed redening the
‚Üí
Œªœâe-alulus in suh a way
that terms of the form k[x]j for k < j would not b e in normal form. Reall that if a, b ‚àà
‚Üí
Œõœâ
are two typ ed terms where a is an
‚Üí
œâe-normal form, we need to ertify that, when a‚Üí‚ÜíœÉ‚àígen b,
then for every right t, [[a]](t)
+
‚ÜíŒ≤ [[b]](t), i.e. the p ossibility of Œ≤ redution in the simply typ ed
Œª-alulus must b e reated. For this reason we ould add to
‚Üí
Œªœâe the following rule:
(
‚Üí
œÉ ‚àídes) n[s]j ‚Üí n if n < j
This rule subsumes rules (
‚Üí
œÉ
-/-des) and (
‚Üí
œÉ
-‚Üë-des) for the ase n < j, and it is onsistent with
Lemma 6.7.3. The addition of this rule fores terms like n[x]j for n < j not to b e
‚Üí
œâe-normal
forms. But note that terms having losures with substitution variables are not in the domain
of the translation S.
Nevertheless, the addition of this new rule do es not x the problem for examples like a ab ove,
sine the ondition is n = j and there is no similar rule to b e added in order to fore n[x]n to
redue.
In virtue of the main result in (37), a natural question is: what happ ens in Œªœâe whih an
make the dierene with ŒªœÉ, sine the latter is WN on all typ ed op en terms? The reason
we found is that, when the ounterexample is translated to ŒªœÉ, it is not a œÉ-normal form and
hene it do es not represent a ounterexample. Remark that the statement of Lemma 6.7.8 is for
‚Üí
œâe-normal forms. More preisely, a = 2[x]2[d/]1 translates to the ŒªœÉ term 1[‚Üë][1.(x ‚ó¶ ‚Üë)][d.id]
(and to the ŒªœÉ‚áë term 1[‚Üë][‚áë (x)][d.id]), whih is learly not a œÉ-normal form.
151
6.8 The -alulus.
The problem fored the statement of Lemma 6.7.8 to refer to semi-op en terms. It is worth
mentioning, however, that due to the ab ove isomorphism it sues to onsider this restrited
set of terms in order to obtain WN of
‚Üí
Œªse. This was our original goal.
Denition 6.7.9 A anonial strategy for Œª
‚Üí
œâe is a strategy whih applies the
‚Üí
œÉ ‚àígen rule
only to
‚Üí
œÉ ‚àígen-redexes in
‚Üí
œâe-normal forms and whose
‚Üí
œâe-redutions are normalizing.
As an example, take a strategy whih applies the
‚Üí
œÉ ‚àígen rule only to
‚Üí
œâe-normal forms
and whose
‚Üí
œâe-redutions are leftmost-innermost (li). Hene, given a term a1, suh a anonial
redution sequen e will b e:
a1
li
‚Üí‚Üí
œâ e
‚Üí
œâe (a1) ‚Üí‚ÜíœÉ‚àígen a2
li
‚Üí‚Üí
œâ e
‚Üí
œâe (a2) ‚Üí‚ÜíœÉ‚àígen ¬∑ ¬∑ ¬∑
where
li
‚Üí‚Üí
œâ e
stands for li
‚Üí
œâe-redution and
‚Üí
œâe (ai) is the
‚Üí
œâe-normal form of ai.
Theorem 6.7.10 Every anonial strategy for Œª
‚Üí
œâe is strongly normalizing and therefore the
Œª
‚Üí
œâe-alulus is WN for semi-open terms.
Proof: If there is an innite redution sequen e
a1 ‚Üí‚Üíœâ e
‚Üí
œâe (a1) ‚Üí‚ÜíœÉ‚àígen a2 ‚Üí‚Üíœâ e
‚Üí
œâe (a2) ‚Üí‚ÜíœÉ‚àígen ¬∑ ¬∑ ¬∑
then by Lemmas 6.7.3 and 6.7.8, for every right t, we get a ontradition through the innite
redution sequen e in the typ ed Œª-alulus:
[[a1]](t) = [[
‚Üí
œâe (a1)]](t) ‚Üí
+
Œ≤ [[a2]](t) = [[
‚Üí
œâe (a2)]](t) ‚Üí
+
Œ≤ ¬∑ ¬∑ ¬∑
‚ú∑
Now, the isomorphism presented in Setion 6.3, gives:
Theorem 6.7.11 The Œª
‚Üí
s e-alulus is weakly normalizing for open terms.
6.8 The Œªœâ‚Ä≤e-alulus.
We extend the previous result to a new alulus,
‚Üí
Œªœâ‚Ä≤e, derived from
‚Üí
Œªœâe. In this setion we
omit typing deorations for notation simpliity, therefore
‚Üí
Œªœâ‚Ä≤e will b e just written Œªœâ
‚Ä≤
e.
Œªœâ‚Ä≤e is written in the style of ŒªœÉ and has 1 as the sole de Bruijn index, while the others are
onstruted as in ŒªœÉ. We will show that typ ed Œªœâ‚Ä≤e is WN on semi-op en terms.
A go o d reason to use this alulus is to show the p ower of the omp osition rules, whih
indeed emulate the b ehavior of the other indies. Thus with a smaller language one will have
in some sense the same redution p ossibilities.
Remark that the problem whih fored us to restrit Lemma 6.7.8 still holds. Up to now, we
do not know whether typ ed Œªœâ‚Ä≤e is WN on all op en terms.
152
6.8 The -alulus.
(œÉ-gen') (Œªa)b ‚àí‚Üí a[b/]1
(œÉ-app-tr') (ab)[s]j ‚àí‚Üí a[s]jb[s]j
(œÉ-Œª-tr') (Œªa)[s]j ‚àí‚Üí Œª(a[s]j+1)
(œÉ-/-des') 1[a/]1 ‚àí‚Üí a[‚Üë
0]1
(œÉ-‚Üë-des') 1[‚Üë0]1 ‚àí‚Üí 1
(œÉ-des') 1[s]j ‚àí‚Üí 1 j > 1
(œÉ-/-tr') a[b/]k[s]j ‚àí‚Üí a[s]j+1[b[s]j‚àík+1/]k k ‚â§ j
(/-‚Üë-tr') a[‚Üëi]k[b/]j ‚àí‚Üí
{
a[b/]j‚àíi[‚Üë
i]k k + i ‚â§ j
a[‚Üëi‚àí1]k k ‚â§ j < k + i
(‚Üë-‚Üë-tr') a[‚Üëi]k[‚Üë
l]j ‚àí‚Üí
{
a[‚Üël]j‚àíi[‚Üë
i]k k + i < j
a[‚Üëi+l]k k ‚â§ j ‚â§ k + i
Figure 6.7: The rewriting rules of the simply typ ed Œªœâ‚Ä≤e-alulus
Denition 6.8.1 The set of open terms and substitutions of the Œªœâ‚Ä≤e-alulus, noted Œõœâ
‚Ä≤
op, is
dened as Œõtœâ‚Ä≤op ‚à™ Œõ
sœâ‚Ä≤op, where Œõ
tœâ‚Ä≤op (terms) and Œõ
sœâ‚Ä≤op (substitutions) are mutual ly dened
as fol lows:
Open terms a ::= X | 1 | (Œª a) | (a a) | a[s]j j ‚â• 1
Open substitutions s ::= x | ‚Üëk | a / k ‚â• 0
and the set of semi-open terms and substitutions of the Œªœâ‚Ä≤e-alulus is dened as Œõ
tœâ‚Ä≤sop ‚à™
Œõsœâ‚Ä≤sop, where Œõ
tœâ‚Ä≤sop (terms) and Œõ
sœâ‚Ä≤sop (substitutions) are mutual ly dened as fol lows:
Semi‚àí open terms a ::= X | 1 | (Œª a) | (a a) | a[s]j j ‚â• 1
Semi‚àí open substitutions s ::= ‚Üëk | a / k ‚â• 0
where X ranges over V a denumerably innite set of term variables and x ranges over W
a denumerably innite set of substitution variables. The rules of the Œªœâ‚Ä≤e-alulus are given in
Figure 6.7
As with Œªœâe, all rules exept (œÉ-gen') onform œâ
‚Ä≤
e.
Note that the (œÉ-des') rule, in the presene of the (œÉ-/-des') rule, subsumes the following
two p ossible rules:
(œÉ ‚àí /‚àí des ‚Ä≤‚Ä≤) 1[a/]j ‚Üí
{
a[‚Üë0]1 j = 1
1 j > 1
(œÉ‚àí ‚Üë ‚àídes ‚Ä≤‚Ä≤) 1[‚Üëi]j ‚Üí 1 j > 1
153
6.8 The -alulus.
Note also that for all i ‚â• 1, the term 1[‚Üëi]1 is an œâ
‚Ä≤
e-normal form representing the de Bruijn
index i+ 1. In fat, 1[‚Üëi]1[‚Üë
l]1 ‚Üíœâ‚Ä≤e 1[‚Üë
i+l]1.
Now we wish to relate Œªœâ‚Ä≤e and Œªœâe by means of a translation.
Denition 6.8.2 For open terms and substitutions we dene a translation | ‚Ä¢ | : Œõœâop ‚Üí Œõœâ
‚Ä≤
op
by:
|X| = X |x| = x
|1| = 1 |n+ 1| = 1[‚Üën]1 (n ‚â• 1)
|Œªa| = Œª|a| |ab| = |a||b|
| ‚Üëk | = ‚Üëk |a/| = |a|/
|a[s]j| = |a|[|s|]j
Note that the translation of an index greater than 1 yields a term of the form 1[‚Üën], while 1 is
translated as 1.
We give a Simulation Prop osition whih will b e used in the subseq u e nt results of the setion.
Prop osition 6.8.3 (Simulation) Let a, b ‚àà Œõœâop.
1. If a‚ÜíœÉ‚àígen b, then |a| ‚ÜíœÉ‚àígen‚Ä≤ |b|.
2. If a‚Üíœâe b, then |a| ‚Üí œâ‚Ä≤e |b|.
3. If a‚Üí œâe b, then |a| ‚Üí œâ‚Ä≤e |b|.
4. If a‚Üí Œªœâe b, then |a| ‚Üí Œªœâ‚Ä≤e |b|.
Proof:
1. By indution on a. If the redution is at the ro ot where (Œªc)d‚ÜíœÉ‚àígen c[d/]1, then
|a| = (Œª|c|)|d| ‚ÜíœÉ‚àígen‚Ä≤ |c|[|d|/]1 = |b|. For internal redutions, the pro of is straightforward.
2. By indution on a. If the redution is at the ro ot, we analyze every p ossible œâe-rule
applied.
‚Ä¢ a = n[c/]j ‚ÜíœÉ‚àí/‚àídes n ‚àí 1 = b with n > j ‚â• 1, then n ‚â• 2. If n > 2, then
|a| = |n|[|c|/]j = 1[‚Üë
n‚àí1]1[|c|/]j ‚Üí/‚àí‚Üë‚àítr ‚Ä≤ 1[‚Üë
n‚àí2]1 = |n ‚àí 1| = |b|, sine 1 = k ‚â§ j <
k + i = n > 2. If n = 2, 1[‚Üën‚àí2]1 = 1[‚Üë
0]1 ‚ÜíœÉ‚àí‚Üë‚àídes‚Ä≤ 1 = |1| = |b|.
‚Ä¢ a = n[c/]j ‚ÜíœÉ‚àí/‚àídes c[‚Üë
j‚àí1]1 = b with n = j ‚â• 1.
If n = 1, then |n[c/]j| = 1[|c|/]j ‚ÜíœÉ‚àí/‚àídes‚Ä≤ |c|[‚Üë
0]1 = |c[‚Üë
0]1| and we are done.
If n > 1, then |a| = |n|[|c|/]j = 1[‚Üë
n‚àí1]1[|c|/]j ‚Üí/‚àí‚Üë‚àítr ‚Ä≤ 1[|c|/]j‚àín+1[‚Üë
n‚àí1]1
‚ÜíœÉ‚àí‚Üë‚àídes‚Ä≤ |c|[‚Üë
0]1[‚Üë
n‚àí1]1 ‚Üí‚Üë‚àí‚Üë‚àítr ‚Ä≤ |c|[‚Üë
n‚àí1]1 = |b| sine
1 = k ‚â§ k + i = n = j thus j ‚àí n+ 1 = 1.
154
6.8 The -alulus.
‚Ä¢ a = n[c/]j ‚ÜíœÉ‚àí/‚àídes n = b with 1 ‚â§ n < j. If n = 1, we are done by rule (œÉ-/-des
‚Ä≤
)
sine j > 1. Else, |a| = |n|[|c|/]j = 1[‚Üë
n‚àí1]1[|c|/]j ‚Üí/‚àí‚Üë‚àítr ‚Ä≤ 1[|c|/]j‚àín+1[‚Üë
n‚àí1]1 ‚ÜíœÉ‚àídes‚Ä≤
1[‚Üën‚àí1]1 = |b|, sine j > n = k + i ‚â§ j thus j ‚àí n+ 1 > 1.
‚Ä¢ a = n[‚Üël]j ‚ÜíœÉ‚àí‚Üë‚àídes n+ l = b, with n ‚â• j ‚â• 1. We have the following ases
If n = 1 (thus j = 1) and l = 0, then |a| = 1[‚Üë0]1 ‚ÜíœÉ‚àí‚Üë‚àídes‚Ä≤ 1 = |b|.
If n = 1 (thus j = 1) and l > 0, then |a| = 1[‚Üël]1 = |1 + l| = |b|
If n ‚â• 2 then |a| = |n|[‚Üël]j = 1[‚Üë
n‚àí1]1[‚Üë
l]j ‚Üí‚Üë‚àí‚Üë‚àítr ‚Ä≤ 1[‚Üë
n+l‚àí1]1 = |n+ l| = |b|
sine 1 = k ‚â§ j ‚â§ k + i = n.
‚Ä¢ a = n[‚Üël]j ‚ÜíœÉ‚àí‚Üë‚àídes n = b with 1 ‚â§ n < j. We have the following ases:
If n = 1, then |a| = 1[‚Üël]j ‚ÜíœÉ‚àídes‚Ä≤ 1 = |b| sine j > 1.
If n ‚â• 2 then |a| = 1[‚Üën‚àí1]1[‚Üë
l]j ‚Üí‚Üë‚àí‚Üë‚àítr ‚Ä≤ 1[‚Üë
l]j‚àín+1[‚Üë
n‚àí1]1 ‚ÜíœÉ‚àídes‚Ä≤ 1[‚Üë
n‚àí1]1
= |n| = |b| sine 1 ‚â§ n < j thus j ‚àí n+ 1 > 1.
‚Ä¢ The other rules are straightforward.
For internal redutions, the pro of is straightforward.
3. Conseque n  e of the seond item.
4. Conseque n  e of the previous items.
‚ú∑
As it an b e seen in the pro of of Prop osition 6.8.3, the œâ‚Ä≤e-rules (œÉ-/-tr'), (/-‚Üë-tr') and (‚Üë-‚Üë-
tr') an handle losures over indies thus simulating the b ehavior of the œâe-rules (œÉ-/-des) and
(œÉ-‚Üë-des).
Remark 6.8.4 Let u, v ‚àà Œõœâ‚Ä≤sop.
1. If u‚ÜíŒªœâ‚Ä≤e v, then u‚ÜíŒªœâe v.
2. |u| = u.
Proof: Both 1. and 2. an b e proved by an easy indution on u. ‚ú∑
The seond assertion ab ove means that the translation is onto and invariant for the set Œõœâ‚Ä≤sop.
Corollary 6.8.5 (Conuene) Œªœâ‚Ä≤e and œâ
‚Ä≤
e are onuent on semi-open terms.
Proof: To prove the onuene of Œªœâ‚Ä≤e, let a ‚àà Œõœâ
‚Ä≤
sop, and supp ose a ‚Üí Œªœâ‚Ä≤e a1, a ‚Üí Œªœâ‚Ä≤e a2.
By Remark 6.8.4, b oth derivations are also Œªœâe-derivations. Sine Œªœâe is isomorphi to Œªse,
it is onuent on semi-op en terms (46), thus there exists b ‚àà Œõœâsop suh that a1 ‚Üí Œªœâe b and
a2 ‚Üí Œªœâe b. By the fourth item of the Simulation Prop osition, |a1| ‚Üí Œªœâ‚Ä≤e |b| and |a2| ‚Üí Œªœâ‚Ä≤e |b|.
Sine a = |a| by Remark 6.8.4, this loses the diagram.
The onuene of œâ‚Ä≤e is proved analogously, by using the third item of the Simulation Prop osi-
tion. ‚ú∑
155
6.8 The -alulus.
We dene the typing rules of Œªœâ‚Ä≤e in a straightforward manner analogously to
‚Üí
Œªœâe. Moreover,
we have:
Lemma 6.8.6 (Typability preservation) For al l a ‚àà Œõœâ‚Ä≤sop, if a is typed in Œªœâ
‚Ä≤
e, then a is
typed in Œªœâe.
Proof: By indution on a. ‚ú∑
6.8.1 Weak normalization of typ ed Œªœâ‚Ä≤e
In order to prove WN of typ ed Œªœâ‚Ä≤e, we will relate the Œªœâe-alulus with the Œªœâ
‚Ä≤
e-alulus.
We rst give a grammar for the set of Œªœâe op en terms in œâe-normal form and another grammar
for the set of Œªœâe op en terms in Œªœâe-normal form. These grammars will sp eify onditions
asso iated to some of their rules (stritly sp eaking, they an b e seen as grammar shemas or
onditional grammars.)
We denote with NFœâe , NFŒªœâe , NFœâ‚Ä≤e and NFŒªœâ‚Ä≤e the sets of normal forms of the resp etive
aluli untyp ed op en terms.
Denition 6.8.7 We al l œâe-syntati normal forms the terms NSœâe generated by the fol lowing
syntax with start symbol M :
M ::= M1 . . .Mn | c | ŒªM where n ‚â• 1
c ::= c1 | c2
c1 ::= m[s1]i1 . . . [sn]in where m ‚â• 1, n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W))),
n ‚â• 1 ‚áí s1 ‚àà W
c2 ::= X[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k < n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W)))
s ::= M/ | x | ‚Üëk where k ‚â• 0
Denition 6.8.8 We al l Œªœâe-syntati normal forms the terms NSŒªœâe generated by the fol-
lowing syntax with start symbol N :
N ::= cN1 . . . Nn | ŒªN where n ‚â• 0
c ::= c1 | c2
c1 ::= m[s1]i1 . . . [sn]in where m ‚â• 1, n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W))),
n ‚â• 1 ‚áí s1 ‚àà W
c2 ::= X[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k < n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W)))
s ::= N/ | x | ‚Üëk where k ‚â• 0
Lemma 6.8.9 The œâe-syntati normal forms are exatly the œâe-normal forms.
156
6.8 The -alulus.
Proof: We prove NSœâe ‚äÜ NFœâe by heking that in eah lause no rhs term ontains any
œâe-redex.
Now we prove NFœâe ‚äÜ NSœâe . Let t ‚àà NFœâe . We prove that t ‚àà NSœâe by indution on t.
If t = n, it is lear. The same if t = X, t = Œªb or t = t1t2. If t is a losure, then let
t = u[s1]√ü1 . . . [sn]√ün , where u is not a losure. Then u annot b e Œªv, nor t1t2, otherwise t
would not b e an œâe-nf. It an only b e a de Bruijn index or a meta-variable. In either ase, t
is generated by the c1 or c2 lause resp etively, and in eah ase the onditions should hold or
else t would not b e an œâe-nf. ‚ú∑
Lemma 6.8.10 The Œªœâe-syntati normal forms are exatly the Œªœâe-normal forms.
Proof: The pro ofs of b oth inlusions are analogous to the ones given in the previous Lemma.
‚ú∑
We also give grammars for the set of Œªœâ‚Ä≤e op en terms in œâ
‚Ä≤
e-normal form and for the set of
Œªœâ‚Ä≤e op en terms in Œªœâ
‚Ä≤
e-normal form, sp eifying onditions in some of their rules.
Denition 6.8.11 We al l œâ‚Ä≤e-syntati normal forms the terms NSœâ‚Ä≤e generated by the fol low-
ing syntax with start symbol M :
M ::= M1 . . .Mn | c |ŒªM where n ‚â• 1
c ::= c1 | c2
c1 ::= 1[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W))),
n ‚â• 1 ‚áí (i1 = 1 and (s1 ‚àà W or s1 =‚Üë
t, t > 0))
c2 ::= X[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W)))
s ::= M/ | x | ‚Üëk where k ‚â• 0
Denition 6.8.12 We al l Œªœâ‚Ä≤e-syntati normal forms the terms NSŒªœâ‚Ä≤e generated by the fol-
lowing syntax with start symbol N :
N ::= cN1 . . . Nn | ŒªN where n ‚â• 0
c ::= c1 | c2
c1 ::= 1[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W))),
n ‚â• 1 ‚áí (i1 = 1 and (s1 ‚àà W or s1 =‚Üë
t, t > 0))
c2 ::= X[s1]i1 . . . [sn]in where n ‚â• 0,‚àÄ1 ‚â§ k ‚â§ n, ik ‚â• 1,
‚àÄ1 ‚â§ k < n, (ik ‚â§ ik+1 ‚áí (sk ‚àà W or (sk =‚Üë
t and sk+1 ‚àà W)))
s ::= N/ | x | ‚Üëk where k ‚â• 0
Lemma 6.8.13 The œâ‚Ä≤e-syntati normal forms are exatly the œâ
‚Ä≤
e-normal forms.
157
6.8 The -alulus.
Proof: We prove NSœâ‚Ä≤e ‚äÜ NFœâ‚Ä≤e by heking that in eah lause no rhs term ontains any
œâ‚Ä≤e-redex.
Now we prove NFœâ‚Ä≤e ‚äÜ NSœâ‚Ä≤e . Let t ‚àà NFœâ‚Ä≤e . We prove that t ‚àà NSœâ‚Ä≤e by indution on
t. If t = 1, it is lear. The same if t = X, t = Œªb or t = t1t2. If t is a losure, then let
t = u[s1]√ü1 . . . [sn]√ün , where u is not a losure. Then u annot b e Œªv, nor t1t2, otherwise t would
not b e an œâe-nf. It an only b e 1 or a meta-variable. In either ase, t is generated by the c1
or c2 lause resp etively, and in eah ase the onditions should hold or else t would not b e an
œâ‚Ä≤e-nf. ‚ú∑
Lemma 6.8.14 The Œªœâ‚Ä≤e-syntati normal forms are exatly the Œªœâ
‚Ä≤
e-normal forms.
Proof: The pro ofs of b oth inlusions are analogous to the ones given in the previous Lemma.
‚ú∑
Remark that all these grammars generate all the resp etive normal forms inluding untypable
normal forms (eg. suh as 11).
Lemma 6.8.15 If a ‚àà NFœâe then |a| ‚àà NFœâ‚Ä≤e .
Proof: We use indution on a. In virtue of Lemma 6.8.9, we have the following ases:
1. if a = M1 . . .Mn or a = ŒªM , i.e. the M lause was used, it is straightforward, sine
|a| = |M1| . . . |Mn| or |a| = Œª|M |, so in b oth ases |a| has no internal œâe-redexes by the
indution hyp othesis.
2. analogous for the c2 lause.
3. analogous for the s lause.
4. for the c1 lause, a will have the form m[s1]i1 . . . [sn]in where the mentioned onditions
hold. Then:
‚Ä¢ If n = 0, then
(a) either m = 1, then |a| = 1 whih is an œâ‚Ä≤e-normal form
(b) or m ‚â• 2, then |a| = 1[‚Üëm‚àí1]1 whih is also an œâ
‚Ä≤
e-normal form.
‚Ä¢ Else n ‚â• 1, then s1 ‚àà W, and we have two ases:
(a) if m = 1, |a| = 1[|s1|]i1 . . . [|sn|]in , and sine |s1| = s1 ‚àà W, there are no œâ
‚Ä≤
e-redexes
by the indution hyp othesis, thus |a| ‚àà NFœâ‚Ä≤e
(b) if m ‚â• 2, |a| = 1[‚Üëm‚àí1]1[|s1|]i1 . . . [|sn|]in , and sine |s1| = s1 ‚àà W, there are no
œâ‚Ä≤e-redexes by the indution hyp othesis, thus |a| ‚àà NFœâ‚Ä≤e .
‚ú∑
158
6.8 The -alulus.
Lemma 6.8.16 If a ‚àà NFŒªœâe then |a| ‚àà NFŒªœâ‚Ä≤e .
Proof: We use indution on a. In virtue of Lemma 6.8.10, we have the following ases:
1. if a = cN1 . . . Nn or a = ŒªN , i.e. the N lause was used, it is straightforward, sine
|a| = |c||N1| . . . |Nn| or |a| = Œª|N |, so in b oth ases |a| has no internal Œªœâe-redexes by the
indution hyp othesis.
Cases 2., 3. and 4. are analogous to items 2., 3. and 4. of the previous lemma. ‚ú∑
Corollary 6.8.17 (Weak normalization of typ ed œâ‚Ä≤e) Typed œâ
‚Ä≤
e is weakly normalizing for
semi-open terms.
Proof: Let a ‚àà Œõœâ‚Ä≤sop b e a typ ed semi-op en term. By Theorem 6.5.3, a has an œâe-normal form
‚Üí
œâe (a). By Simulation and Remark 6.8.4, a = |a| ‚Üí œâ‚Ä≤e |
‚Üí
œâe (a)|. Last, |
‚Üí
œâe (a)| is an œâ
‚Ä≤
e-normal
form by Lemma 6.8.15. ‚ú∑
We will state a neess ary result ab out li-strategies:
Lemma 6.8.18 (leftmost-innermost harater preservation) Via simulation, every li-strategy
applied to a term a ‚àà Œõœâsop projets into a li-strategy applied to the term |a| ‚àà Œõœâ
‚Ä≤
sop.
Proof: We an prove that if a‚Üíœâe b is a li-step, then |a| ‚Üí œâ‚Ä≤e |b| is a sequen e of li-steps, by
indution on the p osition where the redution takes plae. As an illustration, we analyze the
ase of the œÉ-/-des rule for the ase n = j:
n[a/]n ‚Üíœâe a[‚Üë
n‚àí1]1, so we supp ose a ‚àà NFœâe sine this is a li-step, then:
|n[a/]n| = 1[‚Üë
n‚àí1]1[|a|/]n
‚Üíœâ‚Ä≤e 1[|a|/]1[‚Üë
n‚àí1]1
‚Üíœâ‚Ä≤e |a|[‚Üë
0]1[‚Üë
n‚àí1]1
‚Üíœâ‚Ä≤e |a|[‚Üë
n‚àí1]1 = |a[‚Üë
n‚àí1]1|.
Note that all ‚Üíœâ‚Ä≤e steps in this sequen e are li, in partiular the seond and third steps are li
b eause |a| ‚àà NFœâ‚Ä≤e by Lemma 6.8.15 thus it do es not ontain œâ
‚Ä≤
e-redexes.
The rest of the ases require similar or less onsiderations. ‚ú∑
Combining the previous lemmas and Theorem 6.7.10 we get
Theorem 6.8.19 (Weak normalization of typ ed Œªœâ‚Ä≤e) Every anonial strategy for Œªœâ
‚Ä≤
e with
li œâ‚Ä≤e-steps is strongly normalizing and therefore the simply typed Œªœâ
‚Ä≤
e-alulus is WN for semi-
open terms.
Proof: Let a ‚àà Œõœâ‚Ä≤sop. Then, sine Œõœâ
‚Ä≤
sop ‚äÇ Œõœâsop, by Theorem 6.7.10 there exists b ‚àà NFŒªœâe
suh that a ‚Üí Œªœâe b and this derivation is a anonial strategy. Then by Remark 6.8.4 and
Lemma 6.8.18, we have that a = |a| ‚Üí Œªœâ‚Ä≤e |b| and this derivation is a anonial strategy, and
by Lemma 6.8.16 |b| ‚àà NFŒªœâ‚Ä≤e , thus a ‚àà WNŒªœâ‚Ä≤e . ‚ú∑
159
6.9 Conlusion
6.9 Conlusio n
The main purp ose of this hapter was to present a pro of of weak normalization for simply
typ ed Œªse, inspired by the tehnique of (37) for proving weak normalization of simply typ ed
ŒªœÉ. We proved not only that typ ed terms are WN but we also gave a strategy for reahing the
normal forms.
A main feature to emphasize is that the b ehavior of Œªœâe diers when analyzing weak nor-
malization of op en and semi-op en terms. The same applies to Œªœâ‚Ä≤e. It is imp ortant to notie
that this question for Œªœâe on op en terms emerged when analyzing Œªs op en terms, a alulus in
whih there is no distintion b etween semi-op en and op en terms sine it is one-sorted.
We intro dued a new alulus, Œªœâ‚Ä≤e, to whih we transferred the same result. This alulus
is loser to ŒªœÉ than the alulus Œªœâe (whih is isomorphi to Œª
‚Üí
s e yet written in the ŒªœÉ style),
in the sense that the only de Bruijn index it uses is 1. It is a go o d example whih shows that
a alulus may not need more than a single index, if it has adequate omp osition rules. Thus
suh a new alulus has a smaller set of terms when ompared to its parent. We showed that
Œªœâ‚Ä≤e enjoys the same go o d prop erties as Œªœâe, by relating their resp etive sets of normal forms.
For that purp ose we provided onditional ontext-free grammars to desrib e the normal forms,
this b eing a useful to ol for p erforming those omparisons.
Future work inludes a p ossible haraterization of the prop erties that make it p ossible to
arry over this result to other aluli. Also, it will b e interesting to analyze weak normalization
(p ossibly in a dierent line from (37)) for typ ed Œªœâe and Œªœâ
‚Ä≤
e on full op en terms.
160
6.9 Conlusion
161
6.9 Conlusion
Figure 6.8: LL(L(LX)(LL)) after 12 left-most steps
Figure 6.9: SS(SSS)(S((S(SS))S))S(SSS) after 40 left-most steps
162
Chapter 7
A Œª-alulus with onstrutors
In sum, in what matter soever there is plae for Addition and Substration, there
also is plae for Reason; and where these have no plae, there Reason has nothing
at al l to do [...‚ÑÑ For Reason, in this sense, is nothing but Rekoning (that is, Adding
and Subtrating) of the Consequenes of general names agreed upon, for the Marking
and Signifying of our thoughts; I say Marking them, when we rekon by our selves;
and Signifying, when we demonstrate, or approve our rekonings to other men. 
T. Hobb es, Leviathan
Proof is the idol before whom the pure mathematiian tortures himself.  A.
Eddington
Roma no se onstruy√≥ en un d√≠a  An√≥nimo
ABSTRACT We intro due a Œª-alulus with onstrutors as an extension of lassial Œª-
alulus with extensionality. We study all its subsys te ms when taking dierent subsets of rules.
We adopt a novel approah to proving onuene, where some basi ommutation lemmas are
proved for some key pairs of subsys te ms, establishing in this way a database of ommutation
results, and with a omputer program the ommutations b etween new pairs of systems are
inferred ombinatorially until all pairs are identied as ommutative or non-ommutative. For
this tehnique we formulate a set of binary losure onditions whih allow to easily identify
whih pairs of systems ommute weakly. We prove that these pairs are the same pairs that enjoy
ommutation. Among all 262144 pairs we prove that 26544 pairs ommute (in partiular 248
subsys te ms are onuent, and the same subsys te ms whih are weakly onuent are onuent).
We also intro due and prove a separation theorem based on syntatial disagreement.
163
7.1 Intro dution
7.1 Intro dution
Lamb da-alulus has b een intro dued by Churh in the 30's (19) as a universal language to
express omputations of funtions. Despite its remarkable simpliity, Œª-alulus is rih enough
to express all reursive funtions. Sine the rise of omputers, Œª-alulus has b een used fruitfully
as the basis of all funtional programming languages, from LISP to the languages of the ML
family (40; 68; 70). From the theoretial p oint of view, untyp ed Œª-alulus enjoys many go o d
prop erties (11), suh as Churh and Rosser's prop erty express ing determinism of omputations.
In Logi, Œª-alulus is also a fundamental to ol to desrib e the omputational ontents of pro ofs
via the Curry-Howard orresp ondene .
Although arbitrarily omplex data strutures an b e eno ded in the pure Œª-alulus, mo dern
funtional programming languages provide primitive onstruts for most data strutures, for
whih a purely funtional eno ding would b e ineient. One of the most p opular extensions of
Œª-alulus is pattern-mathing on onstruted values (a.k.a. variants), a problem that has b een
widely investigated in funtional programming (40; 68; 70) and in rewriting (18; 21; 41; 42; 80).
However, intro duing ob jets of dierent kindsfuntions and onstruted valuesin the
same formalism addresses the problem of their interation. What do es it mean to apply a
onstruted value cM1 ¬∑ ¬∑ ¬∑Mn to an argument? Should the onstruted value aumulate the
extra argument? Or should it pro due an error? Similarly, what do es it mean to p erform ase
analysis on a funtion?
Unfortunately, these problems are usually not addressed in the literature b eause they are
irrelevant in a typ ed settingappliations go with funtions, ase analysis with variants. How-
ever, one should not forget that one of the reasons of the sues s of the Œª-alulus in omputer
siene and in logi lies in its exellent op erational semantis in the untyp ed ase. The b est
example is given by B√∂hm's separation theorem (16), that express e s that two observationally
equivalent Œ≤Œ∑-normal Œª-terms are intentionally equal. In the pure Œª-alulus, Œ≤Œ∑-normal terms
are not anonial forms b eause they annot b e further redued; they are anonial forms
b eause the omputational b ehavior of a Œ≤Œ∑-normal term annot b e express e d by another Œ≤Œ∑-
normal term.
The situation is far from b eing as lear when we add pattern-mathing to the untyp ed Œª-
alulus. As far as we know, there is no generalization of B√∂hm's theorem for this kind of
extension. One reason for that is that the notion of normal form is not as lear as in the
pure Œª-alulus, preisely b eause the traditional op erational semantis says nothing ab out the
omputational b ehavior of ill-typ ed onstrutions, suh as a ase analysis over an abstration.
An extended op erational semantis of ase analysis In this hapter, we prop ose an
extension of the untyp ed Œª-alulus with onstrutors and ase analysis that lls the holes of
164
7.2 Syntax and redution rules
the traditional op erational semantis. Tehnially, the main novelty is that we let appliation
and ase analysis (written {|Œ∏|}.M) ommute via the (ill-typ ed1 ) redution rule
(CaseApp) {|Œ∏|}. (MN) ‚Üí ({|Œ∏|}.M)N .
(Here, Œ∏ denotes a ase binding, that is a nite map from onstrutors to terms.) Symmetrially,
we intro due a redution rule
(CaseLam) {|Œ∏|}. (Œªx .N) ‚Üí Œªx . ({|Œ∏|}.M) (x /‚àà FV (Œ∏))
to let ase analysis go through abstrations. In this way, ase analysis an b e understo o d as a
form of head linear expliit substitution. . . of onstrutors.
Surprisingly, the system we obtain is not only omputationally soundwe will show that
it is onuent (setions 7.4, 7.5 and 7.6) and onservative over the untyp ed ŒªŒ∑-alulus, i.e.
the latter is a sub-alulusbut it also p ermits to deomp ose ML-style pattern mathing (with
patterns of any arity) from the onstrution {|Œ∏|}.M that only p erforms ase analysis on onstant
onstrutors.
Finally, we will show (setion 7.7) a theorem of weak separation for the whole alulus,
using a separation tehnique inspired by B√∂hm's (11; 16). For this reason, the formalism
provides a sp eial onstant written z and alled the daimon (following Girard's terminology
and notation (34)) that requests the termination of the program something like am exit
system all and whih will b e used as the main tehnial devie to observe normal forms and
to separate them.
This hapter is based on the joint work in (8).
7.2 Syntax and redution rules
In this setion we provide syntax and rules for our alulus.
7.2.1 Syntax
The Œª-alulus with onstrutors distinguishes two kinds of names: variables (written x, y,
z, et.) and onstrutors (written c, c‚Ä≤, et.) The set of variables and the set of onstrutors
are written V and C, resp etively. In what follows, we assume that b oth sets V and C are
denumerable and disjoint.
1
Observe that M is treated as a funtion in the l.h.s. of the rule whereas it is treated as a onstruted value
in the r.h.s. This rule should not b e onfused with the rule of ommutative onversion ({|Œ∏|}.M)N = {|Œ∏N |}.M
that omes from logi, a rule whih is well-typ ed. . . but inompatible with the redution rules of our alulus!
165
7.2 Syntax and redution rules
The terms (written M , N , et.) and the ase bindings (written Œ∏, œÜ, et.) of the Œª-alulus
with onstrutors are indutively dened as follows:
Terms M,N ::= x (Variable)
| c (Construtor)
| z (Daimon)
| MN (Appliation)
| Œªx .M (Abstration)
| {|Œ∏|}.M (Case onstrut)
Case bindings Œ∏, œÜ ::= c1 7‚ÜíM1; . . . ; cn 7‚ÜíMn (ci 6= cj for i 6= j)
We denote the set of terms with ŒõC, the set of ase bindings with B, and the disjoint union
of ŒõC and B with ŒõC+B.
7.2.1.1 Construtor binding
Eah ase binding Œ∏ is formed as an nite unordered list of onstrutor bindings of the form
(c 7‚ÜíM) whose l.h.s. are pairwise distint. We say that a onstrutor c is bound to a term M
in a ase binding Œ∏ if the binding (c 7‚Üí M) b elongs to the list Œ∏. From the denition of ase
bindings, it is lear that a onstrutor c is b ound to at most one term in a given ase binding Œ∏.
When there is no suh binding, we say that the onstrutor c is unbound in Œ∏.
For Œ∏ = {ci 7‚ÜíMi}i=1,...,n, we write |Œ∏| = n.
We also intro due an (external) op eration of omposition b etween two ase bindings Œ∏ and
œÜ, whih is written Œ∏ ‚ó¶ œÜ and dened by:
Œ∏ ‚ó¶ (c1 7‚ÜíM1; . . . ; cn 7‚ÜíMn) ‚â° c1 7‚Üí {|Œ∏|}.M1; . . . ; cn 7‚Üí {|Œ∏|}.Mn
(where œÜ ‚â° (c1 7‚Üí M1; . . . ; cn 7‚Üí Mn)). Notie that this op eration is not syntatially asso ia-
tive, sine:
(Œ∏ ‚ó¶ œÜ) ‚ó¶ (c1 7‚ÜíM1; . . . ; cn 7‚ÜíMn) ‚â°
c1 7‚Üí {|Œ∏ ‚ó¶ œÜ|}.M1; . . . ; cn 7‚Üí {|Œ∏ ‚ó¶ œÜ|}.Mn
whereas
Œ∏ ‚ó¶ (œÜ ‚ó¶ (c1 7‚ÜíM1; . . . ; cn 7‚ÜíMn)) ‚â°
c1 7‚Üí {|Œ∏|}. {|œÜ|}.M1; . . . ; cn 7‚Üí {|Œ∏|}. {|œÜ|}.Mn .
However, omp osition of ase bindings only makes sense in the presene of the ase onversion
redution rule {|Œ∏|}. {|œÜ|}.M ‚Üí {|Œ∏ ‚ó¶ œÜ|}.M (see 7.2.2), for whih b oth right hand sides ab ove
are onvertible.
7.2.1.2 Free variables and meta-substitution
The notions of b ound and free o urrenes of a variable are dened as exp eted . The set of
free variables of a term M (resp. a ase binding Œ∏) is written FV (M) (resp. FV (Œ∏)), where for
Œ∏ = {ci 7‚ÜíMi}i=1,...,n, we dene FV (Œ∏) = FV (M1) ‚à™ . . .FV (Mn) and FV ({|Œ∏|}.M) = FV (Œ∏) ‚à™
166
7.2 Syntax and redution rules
FV (M). As in the (ordinary) Œª-alulus, terms are onsidered up to Œ±-onversion (i.e. up
to a renaming of b ound variables). Notie that the renaming p oliy of the Œª-alulus with
onstrutors is stritly the same as in the Œª-alulus: it only aets (b ound) variable names,
but leaves onstrutor names unhanged.
The external substitution op eration of the Œª-alulus, written M{x := N}, is extended to
the Œª-alulus with onstrutors as exp eted . The same op eration is also dened for ase
bindings (notation: Œ∏{x := N}) in the obvious way: for Œ∏ = {ci 7‚Üí Mi}i=1,...,n, we dene
Œ∏{x := N} = {ci 7‚ÜíMi{x := N}}i=1,...,n, and ({|Œ∏|}.M){x := N} = {|Œ∏{x := N}|}.M{x := N}.
7.2.2 Redution rules
The Œª-alulus with onstrutors has 9 dierent redution rules that are divided into four
redution groups, that are given in Fig. 7.1.
Beta-redution
AppLam (AL) (Œªx .M)N ‚Üí M{x := N}
AppDai (AD) zN ‚Üí z
Eta-redution
LamApp (LA) Œªx .Mx ‚Üí M (x /‚àà FV (M))
LamDai (LD) Œªx .z ‚Üí z
Case propagation
CaseCons (CO) {|Œ∏|}. c ‚Üí M ((c 7‚ÜíM) ‚àà Œ∏)
CaseDai (CD) {|Œ∏|}.z ‚Üí z
CaseApp (CA) {|Œ∏|}. (MN) ‚Üí ({|Œ∏|}.M)N
CaseLam (CL) {|Œ∏|}. Œªx .M ‚Üí Œªx . {|Œ∏|}.M (x /‚àà FV (Œ∏))
Case onversion
CaseCase (CC) {|Œ∏|}. {|œÜ|}.M ‚Üí {|Œ∏ ‚ó¶ œÜ|}.M
Figure 7.1: Redution rules of the Œª-alulus with onstrutors
In what follows, our interest will fo us not only on the redution indued by the 9 redution
rules (taken together), but also on all the subsys te ms formed by any ombination of these
9 rules. We all ŒªBC-alulus the alulus generated by the 9 rules given in Figure 7.1, and we
all BC-alulus the alulus generated by all the rules exept AppLam.
167
7.2 Syntax and redution rules
Let R b e a binary relation over terms. Taking the ontextual losure of R naturally denes
two binary relations: one over terms, and another one over ase bindings, b oth b eing written
‚ÜíR and alled the one step R-redution (over terms, over ase bindings). The reexive and
transitive losure of ‚ÜíR (over terms, over ase bindings) is written
‚àó
‚ÜíR as well as ‚Üí R and
alled the R-redution relation (over terms, over ase bindings). We will also use the reexive
losure of ‚ÜíR (over terms, over ase bindings) whih will b e written ‚Üí
=
R. Finally, the reexive,
symmetri and transitive losure of ‚ÜíR (over terms, over ase bindings) is written ‚âÉR and
alled the R-equality relation (over terms, over ase bindings).
As we will see in setion 7.6, the redution relation dened by these 9 rules (taken together)
enjoys the Churh-Rosser prop erty, i.e. the ŒªBC-alulus is onuent.
We onlude this setion with some lemmas giving satisfatory onditions like in lassial
Œª-alulus, whih will b e useful later on.
Lemma 7.2.1 Let P,Q ‚àà ŒõC + B. If P ‚ÜíŒªBC Q, then FV (Q) ‚äÜ FV (P ).
Proof: By indution on P analyzing eah one of the rules. Note that for the CaseCase-rule,
if œÜ = {ci 7‚ÜíMi}i=1,...,n, then
FV (Œ∏ ‚ó¶ œÜ) = FV ({ci 7‚Üí {|Œ∏|}.Mi}i=1,...,n) = FV (Œ∏) ‚à™ FV (M1) ‚à™ ¬∑ ¬∑ ¬∑ ‚à™ FV (Mn). ‚ú∑
Lemma 7.2.2 For al l terms and ase bindings M , for every term P and variable x, if x /‚àà
FV (M) then M{x := P} = M .
Proof: By indution on M . ‚ú∑
Lemma 7.2.3 Let P,Q ‚àà ŒõC + B and y a variable. Then FV (P{y := Q}) ‚äÜ FV (P )‚àí {y} ‚à™
FV (Q).
Proof: By indution on P muh in the same way as for lassial Œª-alulus. For ase binder
Œ∏ = {ci 7‚ÜíMi}i=1,...,n, we have
FV (Œ∏) = ‚à™i=1,...,nFV (Mi) =IH ‚à™i=1,...,n(FV (Mi)‚àí {y} ‚à™ FV (Q))
= (‚à™i=1,...,nFV (Mi))‚àí {y} ‚à™ FV (Q) = FV (Œ∏)‚àí {y} ‚à™ FV (Q) ‚ú∑
Now we an state the Meta-substitution Lemma for ŒªBC extending the result of lassial
Œª-alulus.
Lemma 7.2.4 (Meta-substitution Lemma) For al l terms and ase bindings M , for al l
terms P,Q and variables x, y, if y 6= x /‚àà FV (Q) then we have that M{x := P}{y := Q} =
M{y := Q}{x := P{y := Q}}.
Proof: By indution on M .
‚Ä¢ If M = x we have by Lemma 7.2.2 that P{y := Q} = P{y := Q}.
168
7.2 Syntax and redution rules
‚Ä¢ If M = y, we have that Q = Q sine by hyp othesis x /‚àà FV (Q).
‚Ä¢ If M = z(6= x, y), we have that z = z.
‚Ä¢ If M = c a onstrutor, we have that c = c.
‚Ä¢ If M = z, we have that z = z.
‚Ä¢ If M = M1M2, M{x := P}{y := Q} =
M1{x := P}{y := Q}M2{x := P}{y := Q} =IH
M1{y := Q}{x := P{y := Q}}M2{y := Q}{x := P{y := Q}} =
M{y := Q}{x := P{y := Q}}.
‚Ä¢ If M = Œªz.M1, M{x := P}{y := Q} =
Œªz.M1{x := P}{y := Q} =IH
Œªz.M1{y := Q}{x := P{y := Q}} =
M{y := Q}{x := P{y := Q}}.
‚Ä¢ If M = Œ∏ = {ci 7‚ÜíMi}i=1,...,n, Œ∏{x := P}{y := Q} =
{ci 7‚ÜíMi{x := P}{y := Q}}i=1,...,n =IH
{ci 7‚ÜíMi{y := Q}{x := P{y := Q}}}i=1,...,n =
Œ∏{y := Q}{x := P{y := Q}}.
‚Ä¢ If M = {|Œ∏|}.M1, M{x := P}{y := Q} =
{|Œ∏{x := P}{y := Q}|}.M1{x := P}{y := Q} =IH
{|Œ∏{y := Q}{x := P{y := Q}}|}.M1{y := Q}{x := P{y := Q}} =
M{y := Q}{x := P{y := Q}}.
‚ú∑
7.2.3 The need of z
As a side note, the z funtionality annot b e mimiked by a regular term. Even restriting
to lassial Œª-alulus (whih is a subsys te m of ŒªBC), there is no term D ‚àà Œõ suh that
Œªx.D
‚àó
‚ÜíŒ≤ D, simply b eause Œªx.D ‚ÜíŒ≤ D implies D = Œªx.D
‚Ä≤
with D ‚ÜíŒ≤ D
‚Ä≤
and then one
obtains by indution on the derivation that Œªx.D = D whih is an absurd equality. The other
prop erty required for D, whih is DM
‚àó
‚ÜíŒ≤ D for every M , is indeed p ossible in Œª-alulus
taking D = Y K where Y is the Turing xp oint ombinator and K = Œªxy.x. But then D
would not have Œ≤-normal form, and this is not adequate for the idea of z whih is to stop
immediately (very far from not having a normal form). This plainly motivates the addition
of z to the language. Suh a sp eial term will b e exploited in the Separation Theorem near
the end of the hapter. We also notied that in priniple z an b e added to aluli of expliit
substitution preserving its main idea.
169
7.3 Strong Normalization of the -alulus
7.3 Strong Normali zati o n of the BC-alulus
In this setion we prove that the substitution alulus BC enjoys strong normalization (SN).
This is a key result whih will b e useful later on for the pro ofs of onuene.
Prop osition 7.3.1 (SN of BC-alulus) The BC-alulus is SN, i.e. there are no innite
derivations of the form M1 ‚ÜíBC M2 ‚ÜíBC . . . .
Proof: Let h : ŒõC + B ‚Üí IN b e dened by mutual indution for terms by
h(x) = h(c) = h(z) = 1
h(MN) = h(M) + h(N)
h(Œªx.M) = h(M) + 1
h({|Œ∏|}.M) = h(Œ∏) + (|Œ∏|+ 2)h(M)
and for ase bindings by
h({ci 7‚ÜíMi}i=1,...,n) =
‚àën
i=1 h(Mi)
It is routine to hek that for all P,Q ‚àà ŒõC + B, if P ‚ÜíBC Q then h(P ) > h(Q). ‚ú∑
Corollary 7.3.2 (SN of ŒªBC-subsystems) Let s be a subsystem of ŒªBC-alulus, given by a
subset of its rules. Then s is SN i AppLam /‚àà s.
This imp ortant result will b e used extensively within the pro of of onuene in setion 7.6.
7.4 Preli mina r y deniti o ns and ommutation results
We give some general ommutation results, whih we will use extensively hereinafter.
Lemma 7.4.1 Let A,B,C be ARSs.
1. If A//B and A//C then A//B + C.
2. If A//wB and A//wC then A//wB + C.
Proof:
1. Given a divergene from an element x for relation A versus B + C, the diagram an b e
losed by tiling with the orresp onding ommutation diagrams for A//B and A//C.
2. Immediate from the denition sine a single-step divergene for relations A versus B +C
may b e of ase A versus B or ase A versus C.
‚ú∑
170
7.5 General losure onditions
We generalize Newman's Lemma (see hapter 1) for the ase of two redution relations, as
follows.
Lemma 7.4.2 Let A,B be ARSs suh that A//wB and A+B is SN. Then, A//B.
Proof: Similar to Newman's Lemma, by well-founded indution. ‚ú∑
7.5 General losure onditi o ns
We are interested in proving the CR prop erty for the Œª-alulus with onstrutors, as well as
several of its subsys te ms.
In order to prepare for the onuene pro of, we show the ritial pairs of Œª-alulus with
onstrutors in Figures 7.2 and 7.3. In Figure 7.2 we show the ritial pairs whih require other
rules to lose, while in Figure 7.3 we show the ritial pairs that lose without using other
rules. Another distintion b etween b oth sets of ritial pairs is that the seond set involves the
CaseCase-rule.
We will intro due the binary losure onditions (BCC), whih apply to pairs of systems, as
well as the losure onditions (CC) whih apply to systems. Two systems will weakly ommute
i they satisfy the BCC. The form of these onditions is the following: r1 ‚àà s1 and r2 ‚àà s2 then
r3 ‚àà s1, for ri rules and si systems. Therefore it will b e quite simple to hek any BCC on any
pair of systems.
Denition 7.5.1 (Closure onditions)  We say that a subsystem s formed by a subset of
the nine rules given in Figure 7.1 enjoys the losure onditions (CC) if it is losed under the
fol lowing 6 onditions:
(CC1)
(CC2)
(CC3)
(CC4)
(CC5)
(CC6)
AppLam ‚àà s, LamDai ‚àà s ‚ä¢ AppDai ‚àà s
LamApp ‚àà s, AppDai ‚àà s ‚ä¢ LamDai ‚àà s
CaseApp ‚àà s, AppLam ‚àà s ‚ä¢ CaseLam ‚àà s
CaseApp ‚àà s, AppDai ‚àà s ‚ä¢ CaseDai ‚àà s
CaseLam ‚àà s, LamApp ‚àà s ‚ä¢ CaseApp ‚àà s
CaseLam ‚àà s, LamDai ‚àà s ‚ä¢ CaseDai ‚àà s
Denition 7.5.2 (Binary losure onditions)  We say that a pair of subsystems (s1, s2)
171
7.5 General losure onditions
(1) AppLam/LamApp (2) AppLam/LamDai
(Œªx .Mx)N [x/‚ààFV (M)]
AppLam
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ LamApp
√Ç√Ç?
??
??
?
MN MN
(Œªx .z)N
AppLam
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ LamDai
√Ç√Ç?
??
??
?
z
?
?
?
? zN
AppDai√Ñ√Ñ
z
(3) LamApp/AppLam (4) LamApp/AppDai
Œªx . (Œªy .M)x [x/‚ààFV (M)]
LamApp
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ AppLam
√Ç√Ç?
??
??
?
Œªy .M Œªx .M{y := x}
Œªx . (z x)
LamApp
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ AppDai
√Ç√Ç?
??
??
?
z
?
?
?
? Œªx .z
LamDai√Ñ√Ñ
z
(5) CaseApp/AppLam (6) CaseApp/AppDai
{|Œ∏|}. ((Œªx .M)N) [x/‚ààFV (Œ∏)]
CaseApp
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ AppLam
√Ç√Ç?
??
??
?
({|Œ∏|}. Œªx .M)N
CaseLam
¬≤¬≤
{|Œ∏|}. (M{x := N})
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
(Œªx . {|Œ∏|}.M)N
AppLam √Ç√Ç
({|Œ∏|}.M){x := N}
{|Œ∏|}. (zN)
CaseApp
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ AppDai
√Ç√Ç?
??
??
?
({|Œ∏|}.z)N
CaseDai
¬≤¬≤
{|Œ∏|}.z
CaseDai
¬®¬®
zN
AppDai √Ç√Ç
z
(7) CaseLam/LamApp (8) CaseLam/LamDai
{|Œ∏|}. Œªx . (Mx) [x/‚ààFV (M,Œ∏)]
CaseLam
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ LamApp
√Ç√Ç?
??
??
?
Œªx . {|Œ∏|}. (Mx)
CaseApp
¬≤¬≤
{|Œ∏|}.M
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
¬≤
Œªx . ({|Œ∏|}.M)x
LamApp √Ç√Ç
{|Œ∏|}.M
{|Œ∏|}. Œªx .z
CaseLam
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ LamDai
√Ç√Ç?
??
??
?
Œªx . {|Œ∏|}.z
CaseDai
¬≤¬≤
{|Œ∏|}.z
CaseDai
¬®¬®
Œªx .z
LamDai √Ç√Ç
z
Figure 7.2: Critial pairs 18 (/13)
172
7.5 General losure onditions
(9) CaseCase/CaseCons (10) CaseCase/CaseDai
{|Œ∏|}. {|œÜ|}. c [(c 7‚ÜíM)‚ààœÜ]
CaseCase
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ CaseCons
√Ç√Ç?
??
??
?
{|Œ∏ ‚ó¶ œÜ|}. c
CaseCons √Ç√Ç
{|Œ∏|}.M
√Ñ
√Ñ
√Ñ
{|Œ∏|}.M
{|Œ∏|}. {|œÜ|}.z
CaseCase
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ CaseDai
√Ç√Ç?
??
??
?
{|Œ∏ ‚ó¶ œÜ|}.z
CaseDai √Ç√Ç
{|Œ∏|}.z
CaseDai√Ñ√Ñ
z
(11) CaseCase/CaseApp (12) CaseCase/CaseLam
{|Œ∏|}. {|œÜ|}. (MN)
CaseCase
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ CaseApp
√Ç√Ç?
??
??
?
{|Œ∏ ‚ó¶ œÜ|}. (MN)
CaseApp
¬∫¬∫
{|Œ∏|}. ({|œÜ|}.M)N
CaseApp
¬≤¬≤
({|Œ∏|}. {|œÜ|}.M)N
CaseCase√Ñ√Ñ
({|Œ∏ ‚ó¶ œÜ|}.M)N
{|Œ∏|}. {|œÜ|}. Œªx .M
CaseCase
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ CaseLam
√Ç√Ç?
??
??
?
{|Œ∏ ‚ó¶ œÜ|}. Œªx .M
CaseLam
¬∫¬∫
{|Œ∏|}. Œªx . {|œÜ|}.M
CaseLam
¬≤¬≤
Œªx . {|Œ∏|}. {|œÜ|}.M
CaseCase√Ñ√Ñ
Œªx . {|Œ∏ ‚ó¶ œÜ|}.M
(13) CaseCase/CaseCase
{|Œ∏|}. {|œÜ|}. {|œÅ|}.M
CaseCase
√Ñ√Ñ √Ñ
√Ñ√Ñ
√Ñ√Ñ CaseCase
√Ç√Ç?
??
??
?
{|Œ∏ ‚ó¶ œÜ|}. {|œÅ|}.M
CaseCase
¬∫¬∫
{|Œ∏|}. {|œÜ ‚ó¶ œÅ|}. t
CaseCase
¬≤¬≤
{|Œ∏ ‚ó¶ (œÜ ‚ó¶ œÅ)|}.M
CaseCase
‚àó√Ñ√Ñ
{|(Œ∏ ‚ó¶ œÜ) ‚ó¶ œÅ|}.M
Figure 7.3: Critial pairs 913 (/13)
173
7.5 General losure onditions
enjoys the binary losure onditions (BCC) if it is losed under the fol lowing 9 onditions:
(BCC1)
(BCC2)
(BCC3)
(BCC4)
(BCC5)
(BCC6)
(BCC7)
(BCC8)
(BCC9)
AppLam ‚àà s1, LamDai ‚àà s2 ‚ä¢ AppDai ‚àà s1
LamApp ‚àà s1, AppDai ‚àà s2 ‚ä¢ LamDai ‚àà s1
CaseApp ‚àà s1, AppLam ‚àà s2 ‚ä¢ CaseLam ‚àà s2
CaseApp ‚àà s1, AppDai ‚àà s2 ‚ä¢ CaseDai ‚àà (s1 ‚à© s2)
CaseLam ‚àà s1, LamApp ‚àà s2 ‚ä¢ CaseApp ‚àà s2
CaseLam ‚àà s1, LamDai ‚àà s2 ‚ä¢ CaseDai ‚àà (s1 ‚à© s2)
CaseCase ‚àà s1, CaseDai ‚àà s2 ‚ä¢ CaseDai ‚àà s1
CaseCase ‚àà s1, CaseApp ‚àà s2 ‚ä¢ CaseApp ‚àà s1
CaseCase ‚àà s1, CaseLam ‚àà s2 ‚ä¢ CaseLam ‚àà s1
as wel l as under the 9 symmetri onditions obtained by interhanging s1 with s2.
Remark 7.5.3 A subsystem s full ls the losure onditions i the pair (s, s) full ls the binary
losure onditions.
Proof: Obvious. Take s1 = s2 = s in Denition 7.5.2. ‚ú∑
Theorem 7.5.4 (General weak ommutation)  Given two subsystems s1 and s2, the fol-
lowing propositions are equivalent:
1. The pair (s1, s2) full ls the binary losure onditions;
2. The redution relations s1 and s2 weakly ommute;
Proof: (2)‚áí(1) holds b eause, when onsidering arbitrary terms, the ritial pairs an only
b e losed as shown in Figures 7.2 and 7.3, therefore the BCC must hold
1
. (1)‚áí(2) it is easy
to verify that the binary losure onditions allow to lose the ritial pairs (see Figures 7.2 and
7.3). ‚ú∑
Corollary 7.5.5 (General weak onuene)  Given a subsystem s, the fol lowing propo-
sitions are equivalent:
1. The subsystem s full ls the losure onditions;
2. The s-redution is loal ly onuent;
Proof: Immediate using Theorem 7.5.4 and Remark 7.5.3. ‚ú∑
1
The b est way of heking this is to think that in those gures the letters M and N may b e replaed by
fresh free variables, thus the only way to lose a ritial pair is by using the indiated rules in eah ase
174
7.6 The Churh-Rosser prop erty
7.6 The Churh-Rosser prop erty
This setion is devoted to the pro of of the ommutation of several pairs of subsys te ms.
Atually, to prove that s1//ws2 i s1//s2 for all pairs of subsys te ms s1, s2. As a orollary, the
onuene of the whole system will b e obtained.
Unless otherwise sp eied, all ommutation and weak ommutation results will b e stated not
only for terms but also for ase bindings. In partiular, we are interested in the CR prop erty
for ŒªBC, i.e. the entire set of rules.
In studying the onuene of our system and subsys te ms, we adopt a novel approah given
by the following metho d of omputer assisted pro of :
We develop a omputer program whih
1. given an initial table of ommutation and weak ommutation results (i.e. two sets of pairs
of subsys te ms of the ŒªBC-alulus)
2. given the information ab out subsets of rules whih are SN (for us, all subsys te ms whih
exlude the AppLam-rule), and
3. given the binary losure onditions (in Setion 7.5)
infers all additional ommutation results ombinatorially using Lemmas 7.4.1 and 7.4.2.
The program implements the algorithm in Figure 7.4.
The main idea of this algorithm is the following:
1. it starts with an initial database of results, to b e heke d by hand (i.e. they have to b e
proved)
2. the main routine infers additional ommutation results using lemmas 7.4.1 and 7.4.2
3. it adds the inferred lemmas to the database, and yle until no new ommutation result
an b e added
So we end up with a omplete table of ommutation (and therefore onuene) results among
(all) subsys te ms of the ŒªBC-alulus.
What is also interesting is that in this way, during the yle whih adds ommutation entries
to the table, the program an output not only the inferred ommutation results but also the
new lemmas whih will b e required to b e proved by hand (and to b e added to the database
afterwards) in order to ontinue with the iterations. Even one ould also add a what-if result
temp orarily, and nd out whih other lemmas should b e proved after that supp osition.
The natural advantage of this approah is that one an prove just the (minimal set of ) required
lemmas. This tehnique for proving onuene gives an alternative pro of to the Interpretation
175
7.6 The Churh-Rosser prop erty
 main algorithm
Algorithm ommutingPairs;
uses the arrays WC and C indexed by pairs of subsystems
b egin
initialize C(‚Ä¢, ‚Ä¢) with
true where stated by database lemmas, and
false elsewhere;
opy C(‚Ä¢, ‚Ä¢) into WC(‚Ä¢, ‚Ä¢);
for eah pair of subsys te ms (s1, s2)
if (s1, s2) ‚ä¢ BCC then
WC(s1, s2) := true;  Theorem 7.5.4
for eah pair of subsys te ms (s1, s2)
if WC(s1, s2) and isSN(s1 ‚à™ s2) then
C(s1, s2) := true;  Lemma 7.4.2
rep eat
for eah 3-uple of subsys te ms (s1, s2, s3)
if C(s1, s2) and C(s1, s3) then
if C(s1, s2 ‚à™ s3) = false then hange it to true;
 Lemma 7.4.1
until no more hanges are p erformed;
end;
 to determine if a ŒªBC-subsystem is SN
isSN (s a subsys te m);
b egin;
if AppLam ‚àà s then return false;
else return true;
 Corollary 7.3.2
end;
Figure 7.4: The ommutation inferene algorithm
176
7.6 The Churh-Rosser prop erty
Metho d (75) with the b enet that ommutation and onuene results are obtained for the
subsys te ms as well.
Thus the following subsetions of this setion are devoted to prove by hand the initial
database ommutation results, whih will b e given by ommutation diagrams.
We will prove several lemmas by indution on the struture of a term. In eah of these pro ofs,
if there is no overlap the orresp onding diagram an b e easily losed, otherwise the ritial pairs
presented in Figures 7.2 and 7.3 will guide the pro of.
The following subsetions thus provide:
1. Preservation by meta-substitution
2. Commutation of AppLam with AppDai, CaseCons, CaseDai and CaseLam
3. Commutation of AppLam+CaseLam with CaseApp
4. Commutation of CaseCase with AppLam
5. Commutation of AppLam with AppLam
6. Commutation of AppLam+AppDa i with LamDai
7. Commutation of AppLam with LamApp
8. Commutation of AppLam+AppDa i with LamApp+LamDai
9. Commutation of AppLam+CaseLam with LamApp+CaseApp
10. Commutation of AppLam+AppDa i+CaseLa m+CaseDa i with LamApp+LamDai+
CaseApp+CaseDai, and
11. General Commutation and Conuene
7.6.1 Preservation by meta-substitution
We now prove imp ortant basi lemmas whih relate meta-substitution with the BC-rules, to
b e used in the ommutation diagrams of the subsequ e nt lemmas. All these lemmas state that
meta-substitution is preserved under the ŒªBC-rules.
We formulate these lemmas in a generi way, i.e. treating every alulus rule generially, in
order to have a single statement for eah one of them.
We will rst need the distribution of meta-substitution over omp osition.
Remark 7.6.1 For al l ase bindings Œ∏, œÜ, for every term P and variable y,
(Œ∏ ‚ó¶ œÜ){y := P} = Œ∏{y := P} ‚ó¶ œÜ{y := P}
177
7.6 The Churh-Rosser prop erty
Proof: Let œÜ = {ci 7‚ÜíMi}i=1,...,n.
Then (Œ∏ ‚ó¶ œÜ){y := P} = {ci 7‚Üí {|Œ∏|}.Mi}i=1,...,n{y := P}
= {ci 7‚Üí {|Œ∏{y := P}|}.Mi{y := P}i=1,...,n}
= Œ∏{y := P} ‚ó¶ {ci 7‚ÜíMi{y := P}}i=1,...,n
= Œ∏{y := P} ‚ó¶ œÜ{y := P} ‚ú∑
Now we an give the generi
Lemma 7.6.2 Let R be any rule in the set {AppLam, AppDai, LamApp, LamDai, CaseLam,
CaseApp, CaseDai, CaseCons, CaseCase}.
1. For al l terms and ase bindings M,N , for every term P and variable y,
if M ‚ÜíR N then M{y := P} ‚ÜíR N{y := P}.
2. For al l terms and ase bindings M , for al l terms P,Q and variable y,
if P ‚ÜíR Q, then M{y := P}
‚àó
‚ÜíR M{y := Q}
Proof:
1. By a straightforward indution on M .
‚Ä¢ If M = x, y,z, c, the result holds vauously.
‚Ä¢ If the redution is at the ro ot, we have the following p ossibilities:
 R = AppLam , then M = (Œªx.Q)R‚Üí
AppLam
Q{x := R} = N ,
then M{y := P} = (Œªx.Q{y := P})R{y := P} ‚Üí
AppLam
Q{y := P}{x := R{y := P}} = Q{x := R}{y := P} (by Lemma 7.2.4)
= N{y := P}.
 R = AppDai , then M = zM1 ‚Üí
AppDai
z = N ,
then M{y := P} = zM1{y := P} ‚Üí
AppDai
z = N{y := P}.
 R = LamApp , then M = (Œªx.Qx) ‚Üí
LamApp
Q where x /‚àà FV (Q) and x 6= y,
then M{y := P} = Œªx.Q{y := P}x
‚Üí
LamApp
Q{y := P} using Lemma 7.2.3, sine by the free variable onvention
x /‚àà FV (P ) and x /‚àà FV (Q) thus
x /‚àà FV (Q)‚àí {y} ‚à™ FV (P ).
 R = LamDai , then M = Œªx.z‚Üí
LamDai
z = N ,
then M{y := P} = Œªx.z{y := P} = Œªx.z‚Üí
LamDai
z
= N{y := P}.
 R = CaseLam , then M = {|Œ∏|}. Œªx.M1 ‚Üí
CaseLam
Œªx.{|Œ∏|}.M1
= N , then M{y := P} = {|Œ∏{y := P}|}. (Œªx.M1){y := P}
= {|Œ∏{y := P}|}. Œªx.M1{y := P}
‚Üí
CaseLam
Œªx.{|Œ∏{y := p}|}.M1{y := P} = N{y := P}.
178
7.6 The Churh-Rosser prop erty
 R = CaseApp , then M = {|Œ∏|}. (M1M2) ‚Üí
CaseApp
{|Œ∏|}.M1M2 = N ,
then M{y := P} = {|Œ∏{y := P}|}. (M1{y := P}M2{y := P})
‚Üí
CaseApp
{|Œ∏{y := P}|}.M1{y := P}M2{y := P} = N{y := P}.
 R = CaseDai , then M = {|Œ∏|}.z‚Üí
CaseDai
z = N ,
then M{y := P} = {|Œ∏{y := P}|}.z{y := P}
= {|Œ∏{y := P}|}.z‚Üí
CaseDai
z = N{y := P}.
 R = CaseCons , then M = {|{ci 7‚ÜíMi}i=1,...,n|}. cj
‚Üí
CaseCons
Mj = N , then M{y := P}
= {|{ci 7‚ÜíMi}i=1,...,n{y := P}|}. cj{y := P}
= {|{ci 7‚ÜíMi{y := P}}i=1,...,n|}. cj
‚Üí
CaseCons
Mj{y := P} = N{y := P}.
 R = CaseCase , then M = {|Œ∏|}. {|œÜ|}. Q‚Üí
CaseCase
{|Œ∏ ‚ó¶ œÜ|}. Q = N ,
then M{y := P} = {|Œ∏{y := P}|}. {|œÜ{y := P}|}. Q{y := P}
‚Üí
CaseCase
{|Œ∏{y := P} ‚ó¶ œÜ{y := P}|}. Q{y := P}
= {|(Œ∏ ‚ó¶ œÜ){y := P}|}. Q{y := P} (by Remark 7.6.1)
= ({|Œ∏ ‚ó¶ œÜ|}. Q){y := P} = N{y := P}.
‚Ä¢ If M = M1M2 ‚ÜíR N1M2 with M1 ‚ÜíR N1, then
M{y := P} = M1{y := P}M2{y := P}
‚ÜíIHR N1{y := P}M2{y := P} = N{y := P}.
‚Ä¢ If M = M1M2 ‚ÜíR M1N2 with M2 ‚ÜíR N2, analogous to the previous ase.
‚Ä¢ If M = Œªx.M1 ‚ÜíR Œªx.N1 with M1 ‚ÜíR N1, then
M{y := P} = Œªx.M1{y := P} ‚Üí
IH
R Œªx.N1{y := P} = N{y := P} using the free
variable onvention.
‚Ä¢ If M = Œ∏ = {ci 7‚Üí Mi}i=1,...,n ‚ÜíR {ci 7‚Üí Ni}i=1,...,n = œÜ where Mi = Ni for i 6= j for
some 1 ‚â§ j ‚â§ n and Mj ‚ÜíR Nj, then
M{y := P} = {ci 7‚ÜíMi{y := P}}i=1,...,n
‚ÜíIHR {ci 7‚Üí Ni{y := P}}i=1,...,n = Œ∏{y := P}.
‚Ä¢ If M = {|Œ∏|}.M1 ‚ÜíR {|œÜ|}.M1 = N and Œ∏ ‚ÜíR œÜ, then
M{y := P} = {|Œ∏{y := P}|}.M1{y := P}
‚ÜíIHR {|œÜ{y := P}|}.M1{y := P}
= N{y := P}.
‚Ä¢ If M = {|Œ∏|}.M1 ‚ÜíR {|Œ∏|}. N1 = N with M1 ‚ÜíR N1, then
M{y := P} = {|Œ∏{y := P}|}.M1{y := P}
‚ÜíIHR {|Œ∏{y := P}|}. N1{y := P} = N{y := P}.
2. By indution on M .
‚Ä¢ If M = y we have P ‚ÜíR Q (1 step).
179
7.6 The Churh-Rosser prop erty
‚Ä¢ If M = x 6= y we have x
‚àó
‚ÜíR x (0 steps).
‚Ä¢ If M = z we have z
‚àó
‚ÜíR z (0 steps).
‚Ä¢ If M = c we have c
‚àó
‚ÜíR c (0 steps).
‚Ä¢ If M = M1M2, M{y := P} = M1{y := P}M2{y := P}
‚àó
‚Üí
IH
R M1{y := Q}M2{y := Q} = M{y := Q}.
‚Ä¢ If M = Œªx.M1, M{y := P} = Œªx.M1{y := P}
‚àó
‚Üí
IH
R Œªx.M1{y := Q} = M{y := Q}.
‚Ä¢ If M = Œ∏ = {ci 7‚ÜíMi}i=1,...,n, M{y := P} = {ci 7‚ÜíMi{y := P}}i=1,...,n
‚àó
‚Üí
IH
R {ci 7‚ÜíMi{y := Q}}i=1,...,n = Œ∏{y := Q}.
‚Ä¢ If M = {|Œ∏|}.M1, M{y := P} = {|Œ∏{y := P}|}.M1{y := P}
‚àó
‚Üí
IH
R {|Œ∏{y := Q}|}.M1{y := Q} = M{y := Q}.
‚ú∑
Atually we need the extension to many-step redutions.
Corollary 7.6.3 Let R be any ŒªBC-rule.
1. For al l terms and ase bindings M,N , for every term P and variable y,
if M
‚àó
‚ÜíR N then M{y := P}
‚àó
‚ÜíR N{y := P}.
2. For al l terms and ase bindings M , for al l terms P,Q and variable y,
if P
‚àó
‚ÜíR Q, then M{y := P}
‚àó
‚ÜíR M{y := Q}
Proof:
1. By Lemma 7.6.2(1) and indution on the length of the derivation
M
‚àó
‚ÜíR N .
2. By Lemma 7.6.2(2) and indution on the length of the derivation
P
‚àó
‚ÜíR Q.
‚ú∑
7.6.2 Commutation of AL with AD, CO, CD and CL
We prove the neess ary ommutation lemmas for these one-rule systems.
Lemma 7.6.4 AppLam//AppDai
180
7.6 The Churh-Rosser prop erty
Proof: We prove that the following diagram holds for terms and ase bindings (where we
denote b oth sorts by using the letter M):
M
AL
//
AD
¬≤¬≤
M1
AD
¬≤¬≤¬≤¬≤
M2 =AL
// M3
It is done by indution on M . There is no ritial pair. It uses Corollary 7.6.3 (1) and (2).
Note that the = subsript app ears at the AppLam-redution sine AppDai may erase redexes ,
and a many-step AppDai-derivation app ears b eause AppLam may erase or dupliate redexes .
Sine they strongly ommute, by the Commutation Lemma (Lemma 1.3.7) they ommute. ‚ú∑
Lemma 7.6.5 AppLam//CaseCons
Proof: We prove that the following diagram holds for terms and ase bindings:
M
AL
//
CO
¬≤¬≤
M1
CO
¬≤¬≤¬≤¬≤
M2 =AL
// M3
It is done by indution on M . There is no ritial pair. It uses Corollary 7.6.3 (1) and (2). Note
that the = subsript app ears at the AppLam-redution sine CaseCons may erase redexes , and
a many-step CaseCons-derivation app ears b eause AppLam may erase or dupliate redexes .
Sine they strongly ommute, by the Commutation Lemma they ommute. ‚ú∑
Lemma 7.6.6 AppLam//CaseDai
Proof: We prove that the following diagram holds for terms and ase bindings:
M
AL
//
CD
¬≤¬≤
M1
CD
¬≤¬≤¬≤¬≤
M2 =AL
// M3
It is done by indution on M . There is no ritial pair. It uses Corollary 7.6.3 (1) and (2).
Note that the = subsript app ears at the AppLam-redution sine CaseDai may erase redexes ,
and a many-step CaseDai-derivation app ears b eause AppLam may erase or dupliate redexes .
Sine they strongly ommute, by the Commutation Lemma they ommute. ‚ú∑
Lemma 7.6.7 AppLam//CaseLam
181
7.6 The Churh-Rosser prop erty
Proof: We prove that the following diagram holds for terms and ase bindings:
M
AL
//
CL
¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
M2 AL
// M3
It is done by indution on M . There is no ritial pair. It uses Corollary 7.6.3 (1) and (2).
Note that the many-step CaseLam-derivation app ears b eause AppLam may erase or dupliate
redexes . Sine they strongly ommute, by the Commutation Lemma they ommute. ‚ú∑
7.6.3 Commutation of AL+ CL with CA
Lemma 7.6.8 The fol lowing diagrams hold for terms and ase bindings:
M
CA
//
CL
¬≤¬≤
M1
CL
¬≤¬≤
M2 CA
// M3
M
CA
// //
CL
¬≤¬≤
M1
CL
¬≤¬≤
M2 CA
// // M3
M
CA
//
CL
¬≤¬≤¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
M2 CA
// M3
Proof:
1. By indution on M . There is no ritial pair.
2. By indution on the length of the CA-derivation using item (1).
3. By indution on the length of the CL-derivation using item (1).
‚ú∑
Lemma 7.6.9 The fol lowing diagram holds for terms and ase bindings:
M
CA
//
AL
¬≤¬≤
M1
=CL
¬≤¬≤
AL
¬≤¬≤
M2 CA
// // M3
Proof: By indution on M . There is one ritial pair, whih loses aording to the diagram.
It uses Corollary 7.6.3 (1) and (2). Note that AppLam may erase or dupliate a redex thus the
many-step CaseApp-derivation at the b ottom. ‚ú∑
Lemma 7.6.10 The fol lowing diagram holds for terms and ase bindings:
M
CA
// //
AL
¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
AL
¬≤¬≤
M2 CA
// // M3
182
7.6 The Churh-Rosser prop erty
Proof: By indution on the length of the CaseApp-derivation, using Lemma 7.6.9 and Lemma
7.6.8(2). The piture is:
M
CA
// //
AL
¬≤¬≤
M ‚Ä≤
CA
//
CL
¬≤¬≤¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
‚Ä¢
CA
//
AL
¬≤¬≤
‚Ä¢
=CL
¬≤¬≤
‚Ä¢
AL
¬≤¬≤
M2 CA
// // ‚Ä¢
CA
// // M3
where the left retangle an b e losed by IH. ‚ú∑
Lemma 7.6.11 AppLam + CaseLam//CaseApp
Proof: We show rst that the following diagram holds:
M
CA
// //
CL+AL
¬≤¬≤
M1
CL+AL
¬≤¬≤¬≤¬≤
M2 CA
// // M3
using Lemma 7.6.8(3) and Lemma 7.6.10. Then we onlude by indution on the derivation
M
‚àó
‚ÜíCL+AL M2. ‚ú∑
7.6.4 Commutation of CC with AL
To show ommutation of CaseCase with AppLam we will use the parallel redution teh-
nique. We dene for this a parallel version of AppLam, whih will also help in proving onuene
of the latter.
Denition 7.6.12 We dene the paral lel AppLam redution as fol lows:
M ‚áíM ‚Ä≤ N ‚áí N ‚Ä≤
(pAppLam)
(Œªx.M)N ‚áíM ‚Ä≤{x := N ‚Ä≤}
(pRef)
M ‚áíM
M ‚áíM ‚Ä≤
(pLam)
Œªx.M ‚áí Œªx.M ‚Ä≤
Mi ‚áíM
‚Ä≤
i , i = 1, . . . , n
(pCB)
{ci 7‚ÜíMi}i=1,...,n ‚áí {ci 7‚ÜíM
‚Ä≤
i}i=1,...,n
M ‚áíM ‚Ä≤ N ‚áí N ‚Ä≤
(pApp)
MN ‚áíM ‚Ä≤N ‚Ä≤
M ‚áíM ‚Ä≤ Œ∏ ‚áí Œ∏‚Ä≤
(pCase)
{|Œ∏|}.M ‚áí {|Œ∏‚Ä≤|}.M ‚Ä≤
183
7.6 The Churh-Rosser prop erty
Now we state Prop osition 7.6.13 whih provides a sequen e of easy but useful strutural
prop erties to b e used afterwards:
Prop osition 7.6.13 (Struture preservation by CaseCase and ‚áí) For al l terms M,M1,M2, N ,
ase bindings Œ∏, œÜ and variable x
1. if Œªx.M ‚Üí
CaseCase
N then there exists M ‚Ä≤ suh that N = Œªx.M ‚Ä≤ with M ‚Üí
CaseCase
M ‚Ä≤
2. if M1M2 ‚Üí
CaseCase
N then
‚Ä¢ either there exists M ‚Ä≤1 suh that N = M
‚Ä≤
1M2 with M1 ‚Üí
CaseCase
M ‚Ä≤1
‚Ä¢ or there exists M ‚Ä≤2 suh that N = M1M
‚Ä≤
2 with M2 ‚Üí
CaseCase
M ‚Ä≤2
3. if Œ∏ ‚Üí
CaseCase
œÜ then there exist M1, . . . ,Mn, N , and onstrutors c1, . . . , cn, with n ‚â• 1
suh that Œ∏ = {ci 7‚ÜíMi}i=1,...,n and there exists 1 ‚â§ j ‚â§ n suh that œÜ = {ci 7‚Üí Ni}i=1,...,n
with Ni = Mi for i 6= j and Mj ‚Üí
CaseCase
Nj
4. if {|Œ∏|}.M ‚Üí
CaseCase
N then
‚Ä¢ either there exists Œ∏‚Ä≤ suh that N = {|Œ∏‚Ä≤|}.M with Œ∏ ‚Üí
CaseCase
Œ∏‚Ä≤
‚Ä¢ or there exists M ‚Ä≤ suh that N = {|Œ∏|}.M ‚Ä≤ with M ‚Üí
CaseCase
M ‚Ä≤
‚Ä¢ or there exists œÜ,M ‚Ä≤ suh that M = {|œÜ|}.M ‚Ä≤ and N = {|Œ∏ ‚ó¶ œÜ|}.M ‚Ä≤
5. if Œªx.M ‚áí N then there exists M ‚Ä≤ suh that N = Œªx.M ‚Ä≤ with M ‚áíM ‚Ä≤
6. if M1M2 ‚áí N then
‚Ä¢ either there exist M ‚Ä≤1,M
‚Ä≤
2 suh that N = M
‚Ä≤
1M
‚Ä≤
2 with M1 ‚áíM
‚Ä≤
1 and M2 ‚áíM
‚Ä≤
2
‚Ä¢ or there exists P, P ‚Ä≤,M ‚Ä≤2 and a variable y suh that M1 = Œªy.P and N = P
‚Ä≤{y := M ‚Ä≤2}
with P ‚áí P ‚Ä≤ and M2 ‚áíM
‚Ä≤
2
7. if Œ∏ ‚áí œÜ then there exist M1, . . . ,Mn, N , and onstrutors c1, . . . , cn, with n ‚â• 1 suh
that Œ∏ = {ci 7‚ÜíMi}i=1,...,n and œÜ = {ci 7‚Üí Ni}i=1,...,n with Mi ‚áí Ni for 1 ‚â§ i ‚â§ n
8. if {|Œ∏|}.M ‚áí N then there exists Œ∏‚Ä≤,M ‚Ä≤ suh that N = {|Œ∏‚Ä≤|}.M ‚Ä≤ with Œ∏ ‚áí Œ∏‚Ä≤ and M ‚áíM ‚Ä≤
Proof: All items are proved by indution on M or Œ∏, the same way as in the lassial Œª-
alulus. ‚ú∑
184
7.6 The Churh-Rosser prop erty
Having dened parallel AppLam redution (Denition 7.6.12) we will prove that it ommutes
strongly with CaseCase (Lemma 7.6.17), whih will imply that AppLam ommutes with Case-
Case (Corollary 7.6.20). In other words, we will prove that the following diagram holds for
terms and ase bindings:
M
CC
//
¬Æ¬∂
M2
¬Æ¬∂
M1 CC
// // M3
We need the following tehnial lemmata. All these lemmas will b e formulated for ŒõC terms
as well as for B ase bindings. Pro ofs will b e by simultaneous indution on terms and ase
bindings. In what follows, we also use Barendregt's free variable onvention wheneve r neess ary.
Similar to Lemma 7.6.2, meta-substitution is preserved under parallel AppLam redution.
Lemma 7.6.14 For every term and ase binding M , for al l terms P,Q and every variable y,
if P ‚áí Q, then M{y := P} ‚áíM{y := Q}
Proof: By indution on M .
‚Ä¢ If M = y, then we have P ‚áí Q.
‚Ä¢ If M = x 6= y, then by reexivity x‚áí x.
‚Ä¢ If M = z, then by reexivity z‚áí z.
‚Ä¢ If M = c a onstrutor, then by reexivity c‚áí c.
‚Ä¢ If M = M1M2, then by IH and pApp M{y := P} = M1{y := P}M2{y := P}
‚áíM1{y := Q}M2{y := Q} = M{y := Q}.
‚Ä¢ If M = Œªx.M1, then by IH and pLam M{y := P} = Œªx.M1{y := P}
‚áí Œªx.M1{y := Q} = M{y := Q}.
‚Ä¢ If M = Œ∏ = {ci 7‚ÜíMi}i=1,...,n, then by IH and (pCB)
M{y := P} = {ci 7‚ÜíMi{y := P}}i=1,...,n
‚áí {ci 7‚ÜíMi{y := Q}}i=1,...,n = Œ∏{y := Q}.
‚Ä¢ If M = {|Œ∏|}. N , then by IH and pCase
M{y := P} = {|Œ∏{y := P}|}. N{y := P}
‚áí {|Œ∏{y := Q}|}. N{y := Q} = M{y := Q}.
‚ú∑
The following is a generalization of the previous lemma:
Lemma 7.6.15 For al l terms and ase bindings P,Q, for al l terms R,S and every variable y,
if P ‚áí Q and R‚áí S, then P{y := R} ‚áí Q{y := S}
185
7.6 The Churh-Rosser prop erty
Proof: By indution on the derivation of P ‚áí Q.
‚Ä¢ if (pRef ) was applied, P = Q, then by Lemma 7.6.14 P{y := R} ‚áí Q{y := S}.
‚Ä¢ for (pAppLam), P = (Œªx.M)N , Q = M ‚Ä≤{x := N ‚Ä≤} with M ‚áí M ‚Ä≤ and N ‚áí N ‚Ä≤, then
((Œªx.M)N){y := R} = (Œªx.M{y := R})N{y := R}. By IH, M{y := R} ‚áí M ‚Ä≤{y := S}
and N{y := R} ‚áí N ‚Ä≤{y := S}, thus
(Œªx.M{y := R})N{y := R} ‚áíM ‚Ä≤{y := S}{x := N ‚Ä≤{y := S}}
= M ‚Ä≤{x := N ‚Ä≤}{y := S} (by Lemma 7.2.4)
= Q{y := S} sine x is fresh by the free variable onvention.
‚Ä¢ for (pApp), (MN){y := R} = M{y := R}N{y := R} ‚áíIH
M ‚Ä≤{y := S}N ‚Ä≤{y := S} = M ‚Ä≤N ‚Ä≤{y := S}
‚Ä¢ for (pLam), (Œªx.M){y := R} = Œªx.M{y := R} ‚áíIH Œªx.M ‚Ä≤{y := S} = (Œªx.M ‚Ä≤){y := S}
‚Ä¢ for (pCB), {ci 7‚ÜíMi}i=1,...,n{y := R} = {ci 7‚Üí Mi{y := R}}i=1,...,n ‚áí
IH {ci 7‚Üí M
‚Ä≤
i{y :=
S}}i=1,...,n = {ci 7‚ÜíM
‚Ä≤
i}i=1,...,n{y := S}
‚Ä¢ for (pCase), {|Œ∏|}. N{y := R} = {|Œ∏{y := R}|}. N{y := R} ‚áíIH
{|Œ∏‚Ä≤{y := S}|}. N ‚Ä≤{y := S} = {|Œ∏‚Ä≤|}. N ‚Ä≤{y := S}
‚ú∑
We still need the following
Lemma 7.6.16 For al l ase bindings Œ∏, Œ∏‚Ä≤, œÜ, œÜ‚Ä≤, if Œ∏ ‚áí Œ∏‚Ä≤ and œÜ‚áí œÜ‚Ä≤ then
Œ∏ ‚ó¶ œÜ‚áí Œ∏‚Ä≤ ‚ó¶ œÜ‚Ä≤.
Proof: Let œÜ = {di 7‚Üí Ni}i=1,...,n ‚áí {di 7‚Üí N
‚Ä≤
i}i=1,...,n = œÜ
‚Ä≤
with Ni ‚áí N
‚Ä≤
i for all 1 ‚â§ i ‚â§ n.
Then Œ∏ ‚ó¶ œÜ = {di 7‚Üí {|Œ∏|}. Ni}i=1,...,n ‚áí {di 7‚Üí {|Œ∏
‚Ä≤|}. N ‚Ä≤i}i=1,...,n = Œ∏
‚Ä≤ ‚ó¶ œÜ‚Ä≤. ‚ú∑
Then we get
Lemma 7.6.17 (parallel AppLam and CaseCase strong ommutation) For al l terms
M,M1,M2, if M ‚áíM1 and M ‚Üí
CaseCase
M2, then there exists M3 suh that M1
‚àó
‚Üí
CaseCase
M3 and M2 ‚áíM3. And analogously for ase bindings. In other words, the fol lowing diagrams
hold:
M
CC
//
¬Æ¬∂
M2
¬Æ¬∂
M1 CC
// // M3
Œ∏
CC
//
¬Æ¬∂
Œ∏2
¬Æ¬∂
Œ∏1 CC
// // Œ∏3
Proof: We reason by indution on the derivation M ‚áíM1. We have the following ases:
1. (pRef ) was applied, with M = M1, take M3 = M2.
186
7.6 The Churh-Rosser prop erty
2. (pAppLam) was applied, with M = (Œªx.P )Q, M1 = P
‚Ä≤{x := Q‚Ä≤}, P ‚áí P ‚Ä≤,Q‚áí Q‚Ä≤, so by
Prop osition 7.6.13 (2) and (1) we have that either
‚Ä¢ M2 = (Œªx.P
‚Ä≤‚Ä≤)Q with P ‚Üí
CaseCase
P ‚Ä≤‚Ä≤, that is
(Œªx.P )Q
CC
//
¬Æ¬∂
(Œªx.P ‚Ä≤‚Ä≤)Q
P ‚Ä≤{x := Q‚Ä≤}
By IH the following diagram holds for some P ‚Ä≤‚Ä≤‚Ä≤:
P
CC
//
¬Æ¬∂
P ‚Ä≤‚Ä≤
¬Æ¬∂
P ‚Ä≤
CC
// // P ‚Ä≤‚Ä≤‚Ä≤
By Corollary 7.6.3, P ‚Ä≤{x := Q‚Ä≤}
‚àó
‚Üí
CaseCase
P ‚Ä≤‚Ä≤‚Ä≤{x := Q‚Ä≤}, and sine P ‚Ä≤‚Ä≤ ‚áí P ‚Ä≤‚Ä≤‚Ä≤ and
Q ‚áí Q‚Ä≤, (Œªx.P ‚Ä≤‚Ä≤)Q ‚áí P ‚Ä≤‚Ä≤‚Ä≤{x := Q‚Ä≤} so the diagram is losed taking M3 = P
‚Ä≤‚Ä≤‚Ä≤{x :=
Q‚Ä≤}.
‚Ä¢ or M2 = (Œªx.P )Q
‚Ä≤‚Ä≤
with Q‚Üí
CaseCase
Q‚Ä≤‚Ä≤, in whih ase
(Œªx.P )Q
CC
//
¬Æ¬∂
(Œªx.P )Q‚Ä≤‚Ä≤
P ‚Ä≤{x := Q‚Ä≤}
By IH the following diagram holds for some Q‚Ä≤‚Ä≤‚Ä≤:
Q
CC
//
¬Æ¬∂
Q‚Ä≤‚Ä≤
¬Æ¬∂
Q‚Ä≤
CC
// // Q‚Ä≤‚Ä≤‚Ä≤
By Corollary 7.6.3, P ‚Ä≤{x := Q‚Ä≤}
‚àó
‚Üí
CaseCase
P ‚Ä≤{x := Q‚Ä≤‚Ä≤‚Ä≤}, and sine P ‚áí P ‚Ä≤ and
Q‚Ä≤‚Ä≤ ‚áí Q‚Ä≤‚Ä≤‚Ä≤, (Œªx.P )Q‚Ä≤‚Ä≤ ‚áí P ‚Ä≤{x := Q‚Ä≤‚Ä≤‚Ä≤} so the diagram is losed taking M3 = P
‚Ä≤{x :=
Q‚Ä≤‚Ä≤‚Ä≤}.
3. (pLam) was applied, with M = Œªx.P , M1 = Œªx.P
‚Ä≤‚Ä≤
and P ‚áí P ‚Ä≤‚Ä≤, in whih ase by
Prop osition 7.6.13 (1) there exists P ‚Ä≤ suh that
Œªx.P
CC
//
¬Æ¬∂
Œªx.P ‚Ä≤
Œªx.P ‚Ä≤‚Ä≤
187
7.6 The Churh-Rosser prop erty
with P ‚Üí
CaseCase
P ‚Ä≤. By IH we have
P
CC
//
¬Æ¬∂
P ‚Ä≤
¬Æ¬∂
P ‚Ä≤‚Ä≤
CC
// // P ‚Ä≤‚Ä≤‚Ä≤
then Œªx.P ‚Ä≤
¬Æ¬∂
Œªx.P ‚Ä≤‚Ä≤
CC
// // Œªx.P ‚Ä≤‚Ä≤‚Ä≤
4. (pCB) was applied, with Œ∏ = {ci 7‚Üí Ni}i=1,...,n, Œ∏
‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤
i }i=1,...,n, Ni ‚áí N
‚Ä≤‚Ä≤
i for
1 ‚â§ i ‚â§ n, in whih ase by Prop osition 7.6.13 (3)
Œ∏
CC
//
¬Æ¬∂
Œ∏‚Ä≤
Œ∏‚Ä≤‚Ä≤
so for some j we have by IH the diagram
Nj
CC
//
¬Æ¬∂
N ‚Ä≤j
¬Æ¬∂
N ‚Ä≤‚Ä≤j CC
// // N ‚Ä≤‚Ä≤‚Ä≤j
then taking Œ∏‚Ä≤‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤‚Ä≤
i }i=1,...,n with N
‚Ä≤‚Ä≤‚Ä≤
i = N
‚Ä≤‚Ä≤
i if i 6= j
Œ∏‚Ä≤
¬Æ¬∂
Œ∏‚Ä≤‚Ä≤
CC
// // Œ∏‚Ä≤‚Ä≤‚Ä≤
5. (pApp) was applied, with M = PQ, M1 = P
‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤, so by Prop osition 7.6.13 (2) we have
that either
‚Ä¢ M2 = P
‚Ä≤Q with P ‚Üí
CaseCase
P ‚Ä≤, in whih ase
PQ
CC
//
¬Æ¬∂
P ‚Ä≤Q
P ‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤
with Q‚áí Q‚Ä≤‚Ä≤ and P ‚áí P ‚Ä≤‚Ä≤, and by IH we have the diagram
P
CC
//
¬Æ¬∂
P ‚Ä≤
¬Æ¬∂
P ‚Ä≤‚Ä≤
CC
// // P ‚Ä≤‚Ä≤‚Ä≤
then P ‚Ä≤Q
¬Æ¬∂
P ‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤
CC
// // P ‚Ä≤‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤
‚Ä¢ or M2 = PQ
‚Ä≤
with Q‚Üí
CaseCase
Q‚Ä≤, in whih ase the diagram is losed analogously.
188
7.6 The Churh-Rosser prop erty
6. (pCase) was applied, with M = {|Œ∏|}. Q, M1 = {|Œ∏
‚Ä≤|}. Q‚Ä≤, Œ∏ ‚áí Œ∏‚Ä≤ and Q ‚áí Q‚Ä≤, so by
Prop osition 7.6.13 (4) we have that either
‚Ä¢ CaseCase was applied at the ro ot, i.e. Q = {|œÜ|}. P , so by Prop osition 7.6.13 (5)
Q‚Ä≤ = {|œÜ‚Ä≤|}. P ‚Ä≤ with œÜ‚áí œÜ‚Ä≤, P ‚áí P ‚Ä≤ and we have
{|Œ∏|}. {|œÜ|}. P
CC
//
¬Æ¬∂
{|Œ∏ ‚ó¶ œÜ|}. P
{|Œ∏‚Ä≤|}. {|œÜ‚Ä≤|}. P ‚Ä≤
By Lemma 7.6.16, Œ∏‚ó¶œÜ‚áí Œ∏‚Ä≤‚ó¶œÜ‚Ä≤, thus {|Œ∏‚ó¶œÜ|}. P ‚áí {|Œ∏‚Ä≤‚ó¶œÜ‚Ä≤|}. P ‚Ä≤. Sine {|Œ∏‚Ä≤|}. {|œÜ‚Ä≤|}. P ‚Ä≤ ‚Üí
CaseCase
{|Œ∏‚Ä≤ ‚ó¶ œÜ‚Ä≤|}. P ‚Ä≤, the diagram is losed.
‚Ä¢ or an internal CaseCase was applied, then either
 Œ∏ ‚Üí
CaseCase
Œ∏‚Ä≤‚Ä≤, so we have
{|Œ∏|}. Q
CC
//
¬Æ¬∂
{|Œ∏‚Ä≤‚Ä≤|}. Q
{|Œ∏‚Ä≤|}. Q‚Ä≤
and by IH we have
Œ∏
CC
//
¬Æ¬∂
Œ∏‚Ä≤‚Ä≤
¬Æ¬∂
Œ∏‚Ä≤
CC
// // Œ∏‚Ä≤‚Ä≤‚Ä≤
then {|Œ∏‚Ä≤‚Ä≤|}. Q
¬Æ¬∂
{|Œ∏‚Ä≤|}. Q‚Ä≤
CC
// // {|Œ∏‚Ä≤‚Ä≤‚Ä≤|}. Q‚Ä≤
 or Q‚Üí
CaseCase
Q‚Ä≤‚Ä≤, and the diagram is losed analogously.
‚ú∑
As a generalization of the results in Corollary 7.6.3 for AppLam we have:
Corollary 7.6.18 For al l terms and ase bindings M,N , for al l terms P,Q and variable y, if
M
‚àó
‚Üí
AppLam
N and P
‚àó
‚Üí
AppLam
Q, then M{y := P}
‚àó
‚Üí
AppLam
N{y := Q}
Proof: Sine M
‚àó
‚Üí
AppLam
N , by Corollary 7.6.3 (1) we have that
M{y := P}
‚àó
‚Üí
AppLam
N{y := P}, then by Corollary 7.6.3 (2)
M{y := P}
‚àó
‚Üí
AppLam
N{y := Q}. ‚ú∑
Lemma 7.6.19
‚àó
‚Üí
AppLam
=
‚àó
‚áí
Proof: We rst show that ‚Üí
AppLam
‚äÜ ‚áí (it essentially uses the reexivity rule). For this
we show that M ‚Üí
AppLam
N implies M ‚áí N by indution on M .
189
7.6 The Churh-Rosser prop erty
‚Ä¢ If M = x, c,z, the result holds vauously.
‚Ä¢ If the redution takes plae at the ro ot, say (Œªx.P )Q ‚Üí
AppLam
P{x := Q}, then
(Œªx.P )Q‚áí P{x := Q} using P ‚áí P and Q‚áí Q (pRef ).
‚Ä¢ If M = PQ‚Üí
AppLam
P ‚Ä≤Q = N , by IH P ‚áí P ‚Ä≤ so M ‚áí N by (pApp).
‚Ä¢ If M = PQ‚Üí
AppLam
PQ‚Ä≤ = N , analogous.
‚Ä¢ If M = Œªx.P ‚Üí
AppLam
Œªx.P ‚Ä≤ = N , by IH P ‚áí P ‚Ä≤ so M ‚áí N by (pLam).
‚Ä¢ If M = Œ∏ ‚Üí
AppLam
Œ∏‚Ä≤, let Œ∏ = {ci 7‚Üí Mi}i=1,...,n with Mj ‚Üí
AppLam
M ‚Ä≤j for some
1 ‚â§ j ‚â§ n and Œ∏‚Ä≤ = {ci 7‚ÜíM
‚Ä≤
i}i=1,...,n where M
‚Ä≤
i = Mi for i 6= j, then by IH Mj ‚áíM
‚Ä≤
j thus
Œ∏ ‚áí Œ∏‚Ä≤ by (pCB).
‚Ä¢ If M = {|Œ∏|}.M1 ‚Üí
AppLam
{|Œ∏‚Ä≤|}.M1 = N , by IH Œ∏ ‚áí Œ∏
‚Ä≤
so M ‚áí N by (pCase).
‚Ä¢ If M = {|Œ∏|}.M1 ‚Üí
AppLam
{|Œ∏|}.M ‚Ä≤1 = N , by IH M1 ‚áíM
‚Ä≤
1 so M ‚áí N by (pCase).
Sine ‚Üí
AppLam
‚äÜ ‚áí, it follows that
‚àó
‚Üí
AppLam
‚äÜ
‚àó
‚áí.
Now we verify that ‚áí‚äÜ
‚àó
‚Üí
AppLam
(so
‚àó
‚áí‚äÜ
‚àó
‚Üí
AppLam
will follow). We prove that P
‚àó
‚Üí
AppLam
Q by indution on the derivation of P ‚áí Q:
‚Ä¢ if (pRef ) was applied, trivial
‚Ä¢ for (pAppLam), P = (Œªx.M)N ‚Üí
AppLam
M{x := N}
‚àó
‚Üí
AppLam
M ‚Ä≤{x := N ‚Ä≤} = Q,
where the latter derivation uses Corollary 7.6.18, sine by IH M
‚àó
‚Üí
AppLam
M ‚Ä≤ and
N
‚àó
‚Üí
AppLam
N ‚Ä≤
‚Ä¢ for (pApp), P = MN
‚àó
‚Üí
AppLam
M ‚Ä≤N ‚Ä≤ = Q sine by IH M
‚àó
‚Üí
AppLam
M ‚Ä≤ and
N
‚àó
‚Üí
AppLam
N ‚Ä≤
‚Ä¢ for (pLam), P = Œªx.M
‚àó
‚Üí
AppLam
Œªx.M ‚Ä≤ = Q sine by IH M
‚àó
‚Üí
AppLam
M ‚Ä≤
‚Ä¢ for (pCB), P = {ci 7‚ÜíMi}i=1,...,n
‚àó
‚Üí
AppLam
{ci 7‚ÜíM
‚Ä≤
i}i=1,...,n = Q sine by IH Mi
‚àó
‚Üí
AppLam
M ‚Ä≤i for 1 ‚â§ i ‚â§ n
‚Ä¢ for (pCase), P = {|Œ∏|}.M
‚àó
‚Üí
AppLam
{|Œ∏‚Ä≤|}.M ‚Ä≤ = Q sine by IH Œ∏
‚àó
‚Üí
AppLam
Œ∏‚Ä≤ and
M
‚àó
‚Üí
AppLam
M ‚Ä≤
‚ú∑
Now we get
Corollary 7.6.20 (AppLam and CaseCase ommutation) For al l terms and ase bind-
ings M,M1,M2, if M
‚àó
‚Üí
AppLam
M1 and M
‚àó
‚Üí
CaseCase
M2, then there exists M3 suh that
190
7.6 The Churh-Rosser prop erty
M1
‚àó
‚Üí
CaseCase
M3 and M2
‚àó
‚Üí
AppLam
M3. In other words, the fol lowing diagram holds:
M
CC
// //
AL
¬≤¬≤¬≤¬≤
M2
AL
¬≤¬≤¬≤¬≤
M1 CC
// // M3
Proof: Using Commutation Lemma and Lemma 7.6.17 we get that ‚áí ommutes with ‚Üí
CaseCase
,
therefore by Lemma 7.6.19 we onlude. ‚ú∑
7.6.5 Commutation of AL with AL
We an extend the onuene of Œ≤-redution on Œõ to the onuene of AppLam on ŒõC + B.
Lemma 7.6.21 ‚áí satises the diamond property
Proof: We prove that the following diagrams hold (resp etively for terms and ase bindings):
M +3
¬Æ¬∂
M2
¬Æ¬∂
M1 +3 M3
Œ∏ +3
¬Æ¬∂
Œ∏2
¬Æ¬∂
Œ∏1 +3 Œ∏3
by indution on the derivation of M ‚áíM1 (resp etively Œ∏ ‚áí Œ∏1). We have the following ases:
1. (pRef ) was applied, with M = M1, take M3 = M2.
2. (pAppLam) was applied, with M = (Œªx.P )Q, M1 = P
‚Ä≤{x := Q‚Ä≤} with P ‚áí P ‚Ä≤, Q ‚áí Q‚Ä≤,
so by Prop osition 7.6.13 (5) and (6) we have that
‚Ä¢ either M2 = (Œªx.P
‚Ä≤‚Ä≤)Q‚Ä≤‚Ä≤ with P ‚áí P ‚Ä≤‚Ä≤, Q‚áí Q‚Ä≤‚Ä≤, in whih ase
(Œªx.P )Q +3
¬Æ¬∂
(Œªx.P ‚Ä≤‚Ä≤)Q‚Ä≤‚Ä≤
P ‚Ä≤{x := Q‚Ä≤}
By IH the following diagrams lose for some P ‚Ä≤‚Ä≤‚Ä≤, Q‚Ä≤‚Ä≤‚Ä≤:
P +3
¬Æ¬∂
P ‚Ä≤‚Ä≤
¬Æ¬∂
P ‚Ä≤ +3 P ‚Ä≤‚Ä≤‚Ä≤
Q +3
¬Æ¬∂
Q‚Ä≤‚Ä≤
¬Æ¬∂
Q‚Ä≤ +3 Q‚Ä≤‚Ä≤‚Ä≤
By Lemma 7.6.15, the original diagram is losed taking M3 = P
‚Ä≤‚Ä≤‚Ä≤{x := Q‚Ä≤‚Ä≤‚Ä≤}.
191
7.6 The Churh-Rosser prop erty
‚Ä¢ or M2 = P
‚Ä≤‚Ä≤{x := Q‚Ä≤‚Ä≤} with P ‚áí P ‚Ä≤‚Ä≤, Q‚áí Q‚Ä≤‚Ä≤, in whih ase
(Œªx.P )Q +3
¬Æ¬∂
P ‚Ä≤‚Ä≤{x := Q‚Ä≤‚Ä≤}
P ‚Ä≤{x := Q‚Ä≤}
By IH the following two diagrams lose for some P ‚Ä≤‚Ä≤‚Ä≤, Q‚Ä≤‚Ä≤‚Ä≤:
P +3
¬Æ¬∂
P ‚Ä≤‚Ä≤
¬Æ¬∂
P ‚Ä≤ +3 P ‚Ä≤‚Ä≤‚Ä≤
Q +3
¬Æ¬∂
Q‚Ä≤‚Ä≤
¬Æ¬∂
Q‚Ä≤ +3 Q‚Ä≤‚Ä≤‚Ä≤
By Lemma 7.6.15, the original diagram is losed taking M3 = P
‚Ä≤‚Ä≤‚Ä≤{x := Q‚Ä≤‚Ä≤‚Ä≤}.
3. (pLam) was applied, with M = Œªx.P , M1 = Œªx.P
‚Ä≤
, P ‚áí P ‚Ä≤‚Ä≤, and by Prop osition 7.6.13
(5) M2 = Œªx.P
‚Ä≤
with P ‚áí P ‚Ä≤, in whih ase
Œªx.P +3
¬Æ¬∂
Œªx.P ‚Ä≤
Œªx.P ‚Ä≤‚Ä≤
By IH we have
P +3
¬Æ¬∂
P ‚Ä≤
¬Æ¬∂
P ‚Ä≤‚Ä≤ +3 P ‚Ä≤‚Ä≤‚Ä≤
then Œªx.P ‚Ä≤
¬Æ¬∂
Œªx.P ‚Ä≤‚Ä≤ +3 Œªx.P ‚Ä≤‚Ä≤‚Ä≤
4. (pCB) was applied, with Œ∏ = {ci 7‚Üí Ni}i=1,...,n, Œ∏
‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤
i }i=1,...,n with Ni ‚áí N
‚Ä≤‚Ä≤
i for
1 ‚â§ i ‚â§ n and by Prop osition 7.6.13 (7) Œ∏‚Ä≤ = {ci 7‚Üí N
‚Ä≤
i}i=1,...,n with Ni ‚áí N
‚Ä≤
i for 1 ‚â§ i ‚â§ n,
in whih ase
Œ∏ +3
¬Æ¬∂
Œ∏‚Ä≤
Œ∏‚Ä≤‚Ä≤
so for every 1 ‚â§ i ‚â§ n we have by IH the diagram
Ni +3
¬Æ¬∂
N ‚Ä≤i
¬Æ¬∂
N ‚Ä≤‚Ä≤i +3 N
‚Ä≤‚Ä≤‚Ä≤
i
then taking Œ∏‚Ä≤‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤‚Ä≤
i }i=1,...,n
192
7.6 The Churh-Rosser prop erty
Œ∏‚Ä≤
¬Æ¬∂
Œ∏‚Ä≤‚Ä≤ +3 Œ∏‚Ä≤‚Ä≤‚Ä≤
5. (pApp) was applied, with M = PQ, M1 = P
‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤ with P ‚áí P ‚Ä≤‚Ä≤, Q‚áí Q‚Ä≤‚Ä≤, so by Prop osition
7.6.13 (6) we have that
‚Ä¢ either M2 = P
‚Ä≤Q‚Ä≤ with P ‚áí P ‚Ä≤, Q‚áí Q‚Ä≤, in whih ase
PQ +3
¬Æ¬∂
P ‚Ä≤Q‚Ä≤
P ‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤
and by IH we have the diagrams
P +3
¬Æ¬∂
P ‚Ä≤
¬Æ¬∂
P ‚Ä≤‚Ä≤ +3 P ‚Ä≤‚Ä≤‚Ä≤
Q +3
¬Æ¬∂
Q‚Ä≤
¬Æ¬∂
Q‚Ä≤‚Ä≤ +3 Q‚Ä≤‚Ä≤‚Ä≤
then P ‚Ä≤Q‚Ä≤
¬Æ¬∂
P ‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤ +3 P ‚Ä≤‚Ä≤‚Ä≤Q‚Ä≤‚Ä≤‚Ä≤
‚Ä¢ or M2 = N
‚Ä≤{x := Q‚Ä≤} with P = Œªx.N , N ‚áí N ‚Ä≤ and Q ‚áí Q‚Ä≤, in whih ase by
Prop osition 7.6.13 (5) P ‚Ä≤‚Ä≤ = Œªx.N ‚Ä≤‚Ä≤ with N ‚áí N ‚Ä≤‚Ä≤. This ase is symmetrial with the
rst item of ase 2, so the diagram is losed analogously.
6. (pCase) was applied, with M = {|Œ∏|}. Q, M1 = {|Œ∏
‚Ä≤‚Ä≤|}. Q‚Ä≤‚Ä≤, so by Prop osition 7.6.13 (8) we
have that M2 = {|Œ∏
‚Ä≤|}. P ‚Ä≤ with Œ∏ ‚áí Œ∏‚Ä≤, P ‚áí P ‚Ä≤ and
{|Œ∏|}. P +3
¬Æ¬∂
{|Œ∏‚Ä≤|}. P ‚Ä≤
{|Œ∏‚Ä≤‚Ä≤|}. P ‚Ä≤‚Ä≤
and by IH we have
Q +3
¬Æ¬∂
Q‚Ä≤
¬Æ¬∂
Q‚Ä≤‚Ä≤ +3 Q‚Ä≤‚Ä≤‚Ä≤
Œ∏ +3
¬Æ¬∂
Œ∏‚Ä≤
¬Æ¬∂
Œ∏‚Ä≤‚Ä≤ +3 Œ∏‚Ä≤‚Ä≤‚Ä≤
then {|Œ∏‚Ä≤|}. Q
¬Æ¬∂
{|Œ∏‚Ä≤‚Ä≤|}. Q‚Ä≤‚Ä≤ +3 {|Œ∏‚Ä≤‚Ä≤‚Ä≤|}. Q‚Ä≤‚Ä≤
‚ú∑
Corollary 7.6.22 (Conuene of AppLam) AppLam is onuent.
Proof: By previous lemma ‚áí satises the diamond prop erty and hee it is onuent. We
onlude by Lemma 7.6.19 that AppLam is onuent. ‚ú∑
193
7.6 The Churh-Rosser prop erty
7.6.6 Commutation of AL+ AD with LD
Lemma 7.6.23 The fol lowing diagram holds for terms and ase bindings:
M
LD
//
AL
¬≤¬≤
‚Ä¢
AL+AD
¬≤¬≤
‚Ä¢
LD
// // ‚Ä¢
Proof: By indution on M . There is only one ritial pair, whih loses (Figure 7.3). It uses
Corollary 7.6.3 (1) and (2). Note that AppLam may erase or dupliate redexes , thus the
‚àó
‚Üí
arrow. ‚ú∑
Lemma 7.6.24 The fol lowing diagram holds for terms and ase bindings:
M
LD
//
AD
¬≤¬≤
‚Ä¢
AD
¬≤¬≤
‚Ä¢
=LD
// ‚Ä¢
Proof: By indution on M . There are no ritial pairs, thus it loses. Note that AppDai may
erase redexes , thus the = subsript. ‚ú∑
Lemma 7.6.25 AppLam + AppDai//LamDai
Proof: By indution on M . Use lemmas 7.6.23 and 7.6.24 to onlude that AppLam + AppDai
strongly ommutes with LamDai , therefore they ommute. ‚ú∑
7.6.7 Commutation of AL with LA
Just as in the lassial Œª-alulus, Œ≤ (here AppLam) ommutes with Œ∑ (here LamApp). To
prove strong ommutation b etween b oth rules we will use Lemma 7.6.2 (1) and (2) for LamApp.
Lemma 7.6.26 (AppLam and LamApp strong ommutation) For al l terms and ase bind-
ings M,M1,M2, if M ‚Üí
LamApp
M1 and M ‚Üí
AppLam
M2, then there exists M3 suh that
M1 ‚Üí
AppLam
= M3 and M2
‚àó
‚Üí
LamApp
M3. In other words, the fol lowing diagram holds:
M
LA
//
AL
¬≤¬≤
M1
AL=
¬≤¬≤
M2 LA
// // M3
Proof: By indution on M .
‚Ä¢ If M = x, c,z it holds vauously (no redexes ).
194
7.6 The Churh-Rosser prop erty
‚Ä¢ for M an appliation and when the AppLam-redex o urs at the ro ot, we have the ases:
1. internal LamApp at the left
(Œªx.P )Q
LA
//
AL
¬≤¬≤
(Œªx.P ‚Ä≤)Q
P{x := Q}
with P ‚Üí
LamApp
P ‚Ä≤, so by Lemma 7.6.2 (1),
P{x := Q} ‚Üí
LamApp
P ‚Ä≤{x := Q} thus
(Œªx.P ‚Ä≤)Q
AL
¬≤¬≤
P{x := Q}
LA
// // P ‚Ä≤{x := Q}
and the diagram is losed
2. internal LamApp at the right
(Œªx.P )Q
LA
//
AL
¬≤¬≤
(Œªx.P )Q‚Ä≤
P{x := Q}
with Q‚Üí
LamApp
Q‚Ä≤, so by Lemma 7.6.2 (2),
P{x := Q}
‚àó
‚Üí
LamApp
P{x := Q‚Ä≤} thus
(Œªx.P )Q‚Ä≤
AL
¬≤¬≤
P{x := Q}
LA
// // P{x := Q‚Ä≤}
and the diagram is losed
3. the AppLam-redex overlaps with the LamApp-redex, i.e.
(Œªx.Px)Q
LA
//
AL
¬≤¬≤
PQ
(Px){x := Q}
with x /‚àà FV (P ), but then (Px){x := Q} = P{x := Q}x{x := Q} = PQ so the
diagram is losed (in 0 steps).
195
7.6 The Churh-Rosser prop erty
‚Ä¢ For M = PQ and b oth AppLam and LamApp-redutions internal to P
PQ
LA
//
AL
¬≤¬≤
P1Q
P2Q
by IH there exists P3 suh that
P
LA
//
AL
¬≤¬≤
P1
AL=
¬≤¬≤
P2 LA
// // P3
thus taking M3 = P3Q the diagram is losed
‚Ä¢ For M = PQ and b oth AppLam and LamApp-redutions internal to Q
PQ
LA
//
AL
¬≤¬≤
PQ1
PQ2
it is analogous to the previous ase
‚Ä¢ For M = PQ and one of the redutions o urs in P and the other in Q, the diagram is
one of the following two:
PQ
LA
//
AL
¬≤¬≤
PQ1
P1Q
PQ
LA
//
AL
¬≤¬≤
P1Q
PQ1
and b oth lose to P1Q1 in one step
‚Ä¢ For M = Œªx.P and the LamApp-redex is internal, we have
Œªx.P
LA
//
AL
¬≤¬≤
Œªx.P1
Œªx.P2
so by IH there exists P3 suh that
P
LA
//
AL
¬≤¬≤
P1
AL=
¬≤¬≤
P2 LA
// // P3
thus taking M3 = Œªx.P3 the diagram is losed
196
7.6 The Churh-Rosser prop erty
‚Ä¢ For M = Œªx.P and the LamApp redution at the ro ot, we have two ases aording to the
o urrene of the AppLam-redex:
Œªx.Px
LA
//
AL
¬≤¬≤
P
AL
¬≤¬≤
Œªx.P2x LA
// P2
Œªx.(Œªy.M)x
LA
//
AL
¬≤¬≤
Œªy.M
Œªx.M{y := x}
Œ±
ppppppppppppp
ppppppppppp
sine x /‚àà FV (P ), x /‚àà FV (P2), x /‚àà FV (M), x /‚àà FV (Œªy.M).
‚Ä¢ For M = Œ∏ = {ci 7‚Üí Ni}i=1,...,n, with M1 = Œ∏
‚Ä≤ = {ci 7‚Üí N
‚Ä≤
i}, M2 = Œ∏
‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤
i }, then
1. there is a j suh that b oth redexes o ur in Nj, then by IH
Nj
LA
//
AL
¬≤¬≤
N ‚Ä≤j
AL=
¬≤¬≤
N ‚Ä≤‚Ä≤j LA
// // N ‚Ä≤‚Ä≤‚Ä≤j
so take Œ∏‚Ä≤‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤‚Ä≤
i }i=1,...,n where N
‚Ä≤‚Ä≤‚Ä≤
i = Ni for i 6= j and the diagram is losed
2. the AppLam-redex o urs in Nj with redut N
‚Ä≤‚Ä≤
j and the LamApp-redex o urs in
Nk with redut N
‚Ä≤
k, then take Œ∏
‚Ä≤‚Ä≤‚Ä≤ = {ci 7‚Üí N
‚Ä≤‚Ä≤‚Ä≤
i }i=1,...,n where N
‚Ä≤‚Ä≤‚Ä≤
i = Ni for i 6= j, k,
N ‚Ä≤‚Ä≤‚Ä≤j = N
‚Ä≤‚Ä≤
j , N
‚Ä≤‚Ä≤‚Ä≤
k = N
‚Ä≤
k and the diagram is losed
‚Ä¢ For M = {|Œ∏|}. P and
{|Œ∏|}. P
LA
//
AL
¬≤¬≤
{|Œ∏1|}. P
{|Œ∏2|}. P
by IH there exists Œ∏3 suh that
Œ∏
LA
//
AL
¬≤¬≤
Œ∏1
AL=
¬≤¬≤
Œ∏2 LA
// // Œ∏3
thus taking M3 = {|Œ∏3|}. P the diagram is losed
‚Ä¢ For M = {|Œ∏|}. P and
{|Œ∏|}. P
LA
//
AL
¬≤¬≤
{|Œ∏|}. P1
{|Œ∏|}. P2
it is analogous to the previous ase
197
7.6 The Churh-Rosser prop erty
‚Ä¢ For M = {|Œ∏|}. P with the AppLam-redex in P and the LamApp-redex in Œ∏, take M3 =
{|Œ∏1|}. P1 and the next diagram holds:
{|Œ∏|}. P
LA
//
AL
¬≤¬≤
{|Œ∏1|}. P
AL
¬≤¬≤
{|Œ∏|}. P1 LA
// {|Œ∏1|}. P1
‚Ä¢ For M = {|Œ∏|}. P with the AppLam-redex in Œ∏ and the LamApp-redex in P , analogously.
‚ú∑
Now we get
Corollary 7.6.27 (AppLam and LamApp ommutation) For al l terms and ase bindings
M,M1,M2, if M
‚àó
‚Üí
LamApp
M1 and M
‚àó
‚Üí
AppLam
M2, then there exists M3 suh that
M1
‚àó
‚Üí
AppLam
M3 and M2
‚àó
‚Üí
LamApp
M3. In other words, the fol lowing diagram holds:
M
LA
// //
AL
¬≤¬≤¬≤¬≤
M1
AL
¬≤¬≤¬≤¬≤
M2 LA
// // M3
Proof: By the previous lemma they strongly ommute, therefore by the Commutation Lemma
they ommute. ‚ú∑
7.6.8 Commutation of AL+ AD with LA+ LD
Lemma 7.6.28 The fol lowing diagram holds for terms and ase bindings:
M
LA
//
AD
¬≤¬≤
M1
=AD
¬≤¬≤
M2=LA+LD
// M3
Proof: By indution on M . Note that AppDai may eliminate redexes , thus the ‚Üí= derivation.
‚ú∑
Lemma 7.6.29 The fol lowing diagram holds for terms and ase bindings:
M
LA+LD
//
AL+AD
¬≤¬≤
M1
=AL+AD
¬≤¬≤
M2LA+LD
// // M3
Proof: By indution on M , using lemmas 7.6.23, 7.6.24, 7.6.28 and 7.6.26. ‚ú∑
Lemma 7.6.30 AppLam + AppDai//LamApp + LamDai
Proof: Using Lemma 7.6.29, they strongly ommute, therefore by the Commutation Lemma
they ommute. ‚ú∑
198
7.6 The Churh-Rosser prop erty
7.6.9 Commutation of AL+ CL with LA+ CA
We b egin with auxiliary lemmas.
Lemma 7.6.31 The fol lowing diagram holds for terms and ase bindings:
M
CL
¬≤¬≤
LA
// M1
=CL
¬≤¬≤
M2 =CA
//
LA
// M3
Proof: By indution on M . The interesting ases are the overlaps given by
1. an external CaseLam-redution as
{|Œ∏|}. (Œªx.Mx)
CL
¬≤¬≤
LA
// {|Œ∏|}.M
√Ç√Ç
Œªx.({|Œ∏|}. (Mx))
CA
// Œªx.({|Œ∏|}.M)x
LA
// {|Œ∏|}.M
where x /‚àà FV (Œ∏), x /‚àà FV (M), thus x /‚àà FV (Œ∏)‚à™FV (M) = FV ({|Œ∏|}.M) and the diagram
holds.
2. an internal CaseLam-redution M ‚Üí
CaseLam
M ‚Ä≤ as
Œªx.Mx
CL
¬≤¬≤
LA
// M
CL
¬≤¬≤
Œªx.M ‚Ä≤x
LA
// M ‚Ä≤
where x /‚àà FV (M), and sine by Lemma 7.2.1 FV (M ‚Ä≤) ‚äÜ FV (M), x /‚àà FV (M ‚Ä≤) and the
diagram holds.
‚ú∑
Lemma 7.6.32 The fol lowing diagram holds for terms and ase bindings:
M
LA+CA
//
AL+CL
¬≤¬≤
M1
=CL
¬≤¬≤
=AL
¬≤¬≤
M2LA+CA
// // M3
Proof: We redue the pro of to hek the four ases given resp etively by the following dia-
grams:
199
7.6 The Churh-Rosser prop erty
‚Ä¢
CA
//
CL
¬≤¬≤
‚Ä¢
CL
¬≤¬≤
‚Ä¢
CA
// ‚Ä¢
‚Ä¢
LA
//
AL
¬≤¬≤
‚Ä¢
=AL
¬≤¬≤
‚Ä¢
LA
// // ‚Ä¢
‚Ä¢
CA
//
AL
¬≤¬≤
‚Ä¢
=CL
¬≤¬≤
AL
¬≤¬≤
‚Ä¢
CA
// // ‚Ä¢
‚Ä¢
CL
¬≤¬≤
LA
// ‚Ä¢
=CL
¬≤¬≤
‚Ä¢
=CA
//
LA
// ‚Ä¢
The rst diagram holds by Lemma 7.6.8. The seond diagram holds by Lemma 7.6.26. The
third diagram holds by Lemma 7.6.9. The fourth diagram holds by Lemma 7.6.31. ‚ú∑
Remark 7.6.33 The diagrams in the proof of Lemma 7.6.32 show that
1. LamApp+ CaseApp strongly ommutes with CaseLam (and hene they ommute, by the
Commutation Lemma), sine the fol lowing diagram is a diret onsequene of the 1st and
4th diagrams above:
‚Ä¢
LA+CA
//
CL
¬≤¬≤
‚Ä¢
=CL
¬≤¬≤
‚Ä¢
LA+CA
// // ‚Ä¢
2. CaseApp strongly ommutes with CaseLam.
The rst item above wil l be used in the next lemma:
Lemma 7.6.34 The fol lowing diagram holds for terms and ase bindings:
M
LA+CA
// //
AL+CL
¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
=AL
¬≤¬≤
M2LA+CA
// // M3
Proof: The pro of is done by indution on the (LamApp +CaseApp)‚àó derivation, using Lemma
7.6.32, Remark 7.6.33(1) and the Commutation Lemma. We distinguish the following ases:
‚Ä¢ If the derivation M
‚àó
‚ÜíLA+CA M1 has 0 steps, the result is obvious.
‚Ä¢ If it has 1 step, it is Lemma 7.6.32.
‚Ä¢ So let us assume it has ‚â• 2 steps. We pro eed by lexiographi indution on the pair
200
7.6 The Churh-Rosser prop erty
(LA+ CA+ CL-depth of M, length of the LA+ CA-derivation). The piture is
M
LA+CA
// //
AL+CL
¬≤¬≤
M ‚Ä≤1LA+CA
//
CL
¬≤¬≤¬≤¬≤
M1
CL
¬≤¬≤¬≤¬≤
M ‚Ä≤3LA+CA
// //
=AL
¬≤¬≤
‚Ä¢
CL
¬≤¬≤¬≤¬≤
‚Ä¢
=AL
¬≤¬≤
M2LA+CA
// // M ‚Ä≤2LA+CA
// // M3
The left retangle is losed by IH sine the seond omp onent of the pair dereases . The
upp er right square an b e losed by Remark 7.6.33. At M ‚Ä≤3 the lexiographi pair is learly
less than the value at M , sine the length of M
‚àó
‚ÜíLA+CA M
‚Ä≤
1 is ‚â• 1, so the IH allows to
lose the lower right retangle.
‚ú∑
So nally we get
Lemma 7.6.35 AppLam + CaseLam//LamApp + CaseApp
Proof: Conseque n  e of the previous lemma, using indution on the length of the AppLam +
CaseLam -derivation. ‚ú∑
7.6.10 Commutation of AL+AD+CL+CD with LA+LD+CA+CD
For simpliity, let us all
‚Ä¢ S1 = AppLam + AppDai + CaseLam + CaseDai
‚Ä¢ S2 = LamApp + LamDai + CaseApp + CaseDai .
Then we an give the
Lemma 7.6.36 The fol lowing diagram holds for terms and ase bindings:
M
S2
//
S1
¬≤¬≤
M1
=CL+CD
¬≤¬≤
=S1
¬≤¬≤
M2 S2
// // M3
201
7.6 The Churh-Rosser prop erty
Proof: We redue the pro of to hek the dierent ases. In this pro of, when there is no
ritial pair, the diagram an b e losed with a single step, noting that ertain redution steps
an eventually erase the other redex (thus the presene of = subsripts in those ases), and
also an AppLam-redution step may erase or dupliate the other redex (thus the presene of a
‚àó
‚Üí arrow). For the ases where there is a ritial pair, we refer the reader to Figures 7.2 and
7.3. We have sixteen ases given resp etively by the following diagrams:
(1) (2) (3) (4)
‚Ä¢
LA
//
AL
¬≤¬≤
‚Ä¢
=AL
¬≤¬≤
‚Ä¢
LA
// // ‚Ä¢
‚Ä¢
LD
//
AL
¬≤¬≤
‚Ä¢
AL+AD
¬≤¬≤
‚Ä¢
LD
// // ‚Ä¢
‚Ä¢
CA
//
AL
¬≤¬≤
‚Ä¢
=CL
¬≤¬≤
AL
¬≤¬≤
‚Ä¢
CA
// // ‚Ä¢
‚Ä¢
CD
//
AL
¬≤¬≤
‚Ä¢
=AL
¬≤¬≤
‚Ä¢
CD
// // ‚Ä¢
(5) (6) (7) (8)
‚Ä¢
LA
//
AD
¬≤¬≤
‚Ä¢
=AD
¬≤¬≤
‚Ä¢
=LA+LD
// ‚Ä¢
‚Ä¢
LD
//
AD
¬≤¬≤
‚Ä¢
AD
¬≤¬≤
‚Ä¢
=LD
// ‚Ä¢
‚Ä¢
CA
//
AD
¬≤¬≤
‚Ä¢
=CD
¬≤¬≤
AD
¬≤¬≤
‚Ä¢
=CD+CA
// ‚Ä¢
‚Ä¢
CD
//
AD
¬≤¬≤
‚Ä¢
=AD
¬≤¬≤
‚Ä¢
=CD
// ‚Ä¢
(9) (10) (11) (12)
‚Ä¢
CL
¬≤¬≤
LA
// ‚Ä¢
=CL
¬≤¬≤
‚Ä¢
=CA
//
LA
// ‚Ä¢
‚Ä¢
CL
¬≤¬≤
LD
// ‚Ä¢
CL+CD
¬≤¬≤
‚Ä¢
=CD
//
LD
// ‚Ä¢
‚Ä¢
CA
//
CL
¬≤¬≤
‚Ä¢
CL
¬≤¬≤
‚Ä¢
CA
// ‚Ä¢
‚Ä¢
CD
//
CL
¬≤¬≤
‚Ä¢
=CL
¬≤¬≤
‚Ä¢
CD
// ‚Ä¢
(13) (14) (15) (16)
‚Ä¢
LA
//
CD
¬≤¬≤
‚Ä¢
=CD
¬≤¬≤
‚Ä¢
=LA
// ‚Ä¢
‚Ä¢
LD
//
CD
¬≤¬≤
‚Ä¢
CD
¬≤¬≤
‚Ä¢
=LD
// ‚Ä¢
‚Ä¢
CA
//
CD
¬≤¬≤
‚Ä¢
CD
¬≤¬≤
‚Ä¢
=CA
// ‚Ä¢
‚Ä¢
CD
//
CD
¬≤¬≤
‚Ä¢
=CD
¬≤¬≤
‚Ä¢
=CD
// ‚Ä¢
Remarks for the preeding diagrams:
1. use Lemma 7.6.26 to lose, note that AL may erase or dupliate the LA-redex
2. one ritial pair, AL may erase or dupliate the LD-redex
3. one ritial pair, AL may erase or dupliate the CA-redex
4. no ritial pair, AL may erase or dupliate the CD-redex, CD may erase the AL-redex
5. one ritial pair, AD may erase the LA-redex and LA may erase or dupliate the AD-redex
6. no ritial pair, AD may erase the LD-redex
202
7.6 The Churh-Rosser prop erty
7. one ritial pair, AD may erase the CA-redex
8. no ritial pair, AD may erase the CD-redex and CD may erase the AD-redex
9. one ritial pair, LA may erase the CL-redex
10. one ritial pair, these rules do not erase nor dupliate redexes
11. no ritial pair, these rules do not erase nor dupliate redexes
12. no ritial pair, CD may erase the CL-redex
13. no ritial pair, LA may erase the CD-redex and CD may erase the LA-redex
14. no ritial pair, CD may erase the LD-redex
15. no ritial pair, CD may erase the CA-redex
16. no ritial pair, one CD may erase the other CD-redex
‚ú∑
Lemma 7.6.37 The fol lowing diagram holds for terms and ase bindings:
M
S2
// //
S1
¬≤¬≤
M1
S1
¬≤¬≤¬≤¬≤
M2 S2
// // M3
Proof: By well-founded indution on the S2 + CaseLam + CaseDai -depth of M . If the length
of the S2-derivation is 0, trivial. If it is 1, use Lemma 7.6.36. Else, the piture is:
M
S2
//
S1
¬≤¬≤
M ‚Ä≤
S2
// //
=CL+CD
¬≤¬≤
‚Ä¢
S1
¬≤¬≤¬≤¬≤
M ‚Ä≤‚Ä≤
S2
// //
=S1
¬≤¬≤
‚Ä¢
S1
¬≤¬≤¬≤¬≤
‚Ä¢
S2
// // ‚Ä¢
S2
// // ‚Ä¢
where the left retangle an b e losed by Lemma 7.6.36, and the top right and lower right
squares an b e losed by IH sine we have that depth(M ‚Ä≤) < depth(M)
and depth(M ‚Ä≤‚Ä≤) < depth(M). ‚ú∑
Lemma 7.6.38 S1//S2
Proof: By Lemma 7.6.37 and indution on the S1-derivation. ‚ú∑
203
7.6 The Churh-Rosser prop erty
7.6.11 General Commutation and Conuene
As a onseque n  e of the previous lemmata we have the full version of theorem 7.5.4. It states
that all pairs of subsys te ms of ŒªBC whih satisfy the BCC ommute.
Theorem 7.6.39 (General ommutation)  Given two subsystems s1 and s2, the fol low-
ing propositions are equivalent:
1. The pair (s1, s2) full ls the binary losure onditions;
2. The redution relations s1 and s2 weakly ommute;
3. The redution relations s1 and s2 ommute.
Proof: (3)‚áí(2) is obvious. (1)‚áí(2) and (2)‚áí(1) are Theorem 7.5.4. (2)‚áí(3) is a onseque n  e
of database results and the inferenes made by the program. As a sample we inlude the
onuene pro of for the entire 9-rule system:
1. (AL ‚ä¢ CR) by a database lemma (Corollary 7.6.22)
2. (AL // AD) by a database lemma (Lemma 7.6.4)
3. (AL // CO) by a database lemma (Lemma 7.6.5)
4. (AL // CD) by a database lemma (Lemma 7.6.6)
5. (AL // CL) by a database lemma (Lemma 7.6.7)
6. (AL // CD + CL) sine (CD // AL) and (CL // AL)
7. (AL // AD + CD + CL) sine (AD // AL) and (CD + CL // AL)
8. (AL // AL+ AD + CD + CL) sine (AL ‚ä¢ CR) and (AD + CD + CL // AL)
9. (AL // CC) by a database lemma (Corollary 7.6.20)
10. (LA+ LD + CD + CA // AL+ AD + CD + CL) by a database lemma (Lemma 7.6.38)
11. (AL // CL+ CC) sine (CL // AL) and (CC // AL)
12. (AL // CD + CL+ CC) sine (CD // AL) and (CL+ CC // AL)
13. (AL // CO + CD + CL+ CC) sine (CO // AL) and (CD + CL+ CC // AL)
14. (AL // AD+CO+CD+CL+CC) sine (AD // AL) and (CO+CD+CL+CC // AL)
15. (AD +CD +CL //w AD +CO +CD +CL+CC) sine (AD +CD +CL,AD +CO +
CD + CL+ CC) ‚ä¢ BCC
16. (AD+CD+CL // AD+CO+CD+CL+CC) sine (AD+CD+CL //w AD+CO+
CD + CL+ CC) and (AD + CD + CL+ AD + CO + CD + CL+ CC ‚ä¢ SN)
204
7.6 The Churh-Rosser prop erty
17. (AL+AD+CD+CL // AD+CO+CD+CL+CC) sine (AL // AD+CO+CD+CL+CC)
and (AD + CD + CL // AD + CO + CD + CL+ CC)
18. (AL+AD+CD+CL // AD+LA+LD+CO+CD+CA+CL+CC) sine (LA+LD+
CD+CA // AL+AD+CD+CL) and (AD+CO+CD+CL+CC // AL+AD+CD+CL)
19. (AL + AD + CD + CL // AL + AD + LA + LD + CO + CD + CA + CL + CC) sine
(AL // AL+AD+CD+CL) and (AD+LA+LD+CO+CD+CA+CL+CC // AL+
AD + CD + CL)
20. (LA+LD+CO+CD+CA+CL+CC //w AD+LA+LD+CO+CD+CA+CL+CC) sine
(LA+LD+CO+CD+CA+CL+CC,AD+LA+LD+CO+CD+CA+CL+CC) ‚ä¢ BCC
21. (LA+LD+CO+CD+CA+CL+CC // AD+LA+LD+CO+CD+CA+CL+CC) sine
(LA+LD+CO+CD+CA+CL+CC //w AD+LA+LD+CO+CD+CA+CL+CC) and
(LA+LD+CO+CD+CA+CL+CC + AD(+LA+LD+CO+CD+CA+CL+CC) ‚ä¢ SN)
22. (AD+LA+LD+CO+CD+CA+CL+CC // AL+AD+LA+LD+CO+CD+CA+
CL+CC) sine (AL+AD+CD+CL // AD+LA+LD+CO+CD+CA+CL+CC) and
(LA+LD+CO+CD+CA+CL+CC // AD+LA+LD+CO+CD+CA+CL+CC)
23. (AL + AD + LA + LD + CO + CD + CA + CL + CC ‚ä¢ CR) sine (AL + AD + CD +
CL // AL+AD+LA+LD+CO+CD+CA+CL+CC) and (AD+LA+LD+CO+
CD + CA+ CL+ CC // AL+ AD + LA+ LD + CO + CD + CA+ CL+ CC)
‚ú∑
As a onseque n  e of Theorem 7.6.39 we have the onuene of all the subsys te ms of ŒªBC
whih satisfy the CC, inluding itself.
It is interesting that not all the lemmas in the database are used in this pro of, but only
7 of them: 7.6.22 (AL//AL), 7.6.4 (AL//AD), 7.6.5 (AL//CO), 7.6.20 (AL//CC), 7.6.6
(AL//CD), 7.6.7 (AL//CL) and 7.6.38 (LA+LD+CD+CA//AL+AD+CD+CL). This
happ ens b eause the preeding 23-step pro of is a shortest pro of (minimum numb er of steps)
for the onuene of the whole system. For other subsys te ms other lemmas in the database are
needed. We are urrently investigating the existene of alternative pro ofs whih may b eome
preferable with given riteria suh as using a minimum numb er of lemmas in the database.
To give a single example, there is another 52-step pro of of onuene of ŒªBC using the same
database lemmas as ab ove plus Lemma 7.6.11 (CaseApp//AppLam + CaseLam ).
Corollary 7.6.40 (General onuene)  Given a subsystem s, the fol lowing propositions
are equivalent:
1. The subsystem s full ls the losure onditions;
205
7.7 Separation
Counting every ordered pair of systems (s1, s2):
Rules: 9
Subsyste ms: 512 (= 29 inluding ŒªBC and ‚àÖ)
Pairs of subsys te ms: 262144 (= 5122)
SN subsys te ms: 256 (inluding BC and ‚àÖ)
Commuting pairs: 26544 (the same are weakly ommuting)
CR subsys te ms: 248 (the same are weakly onuent)
Counting (s1, s2) and (s2, s1) as a single pair of systems and exluding ‚àÖ:
Pairs(s1, s2) s1 = s2
Subsyste ms 131328 512
SN + ommuting (= ¬¨ AppLam+ BCC) subsys te ms 5612 160
Weakly ommuting (=BCC) 13396 24
Veried by the program 7784 88
Figure 7.5: Statistis for ŒªBC-subsystems
2. The s-redution is loal ly onuent;
3. The s-redution is onuent.
Proof: Immediate using Theorem 7.6.39 and Remark 7.5.3. ‚ú∑
Corollary 7.6.41 ŒªBC is onservative over Œª-alulus, in the sense that:
For al l M,N ‚àà Œõ, if ŒªBC ‚ä¢M = N then Œª ‚ä¢M = N .
Proof: Follows from onuene of ŒªBC and the fat that Œª-alulus is a sub-ARS of ŒªBC
b eause AppLam and LamApp are the only redution rules that may apply to an ordinary
Œª-term in ŒªBC. ‚ú∑
Finally, our results for the dierent subsys te ms of ŒªBC are summarized in Figure 7.5.
7.7 Separati o n
This setion addresses the Separation Theorem for ŒªBC. Sine pro ofs are omitted, we refer the
reader to (8), or to the tehnial rep ort at http://www.d.ub a.ar/p eople/materias/reesritura/lam.ps
whih ontains full pro ofs and details for this setion.
206
7.7 Separation
Figure 7.6: Lamb da alulus with onstrutors: subsys te m ommutation grid
207
7.7 Separation
Denition 7.7.1 (Head term)  We al l a head term (and write H, H1, H
‚Ä≤
, et.) any term
that has one of the fol lowing four forms:
Head term H ::= x | c
| {|Œ∏|}. x | {|Œ∏|}. c (c /‚àà dom(Œ∏))
When a head term H is of one of the rst three forms (variable, onstrutor, ase binding on a
variable), we say that H is dened. When H is of the last form (ase binding on an unbound
onstrutor), we say that H is undened.
Denition 7.7.2 (Quasi-head normal form)  A term M is a said to be in quasi-head
normal form if it has one of the fol lowing two forms
Quasi-hnf M ::= z | Œªx1 ¬∑ ¬∑ ¬∑xn . HN1 ¬∑ ¬∑ ¬∑Nk
where H is an arbitrary head term, al led the head of M , and where N1, . . . , Nk are arbitrary
terms.
Here, the prex `quasi' express e s that suh terms are in head normal form w.r.t. all the
redution rules, but (p ossibly) the rule LamApp (a.k.a. Œ∑). For instane, the term Œªx . cx
is in quasi-head normal form aording to the denition ab ove, but still ontains an Œ∑-redex
at ro ot p osition. In what follows, `quasi' will systematially refer to `all the redution rules
but LamApp '.
As for head terms, we distinguish dened quasi-head normal forms from undened ones, by
saying that a quasi-head normal form M is dened when it has one of the forms
M ::= z | Œªx1 ¬∑ ¬∑ ¬∑xn . HN1 ¬∑ ¬∑ ¬∑Nk (where H is dened)
and that M is undened otherwise, that is, when M has the form
M ::= Œªx1 ¬∑ ¬∑ ¬∑xn . ({|Œ∏|}. c)N1 ¬∑ ¬∑ ¬∑Nk (c /‚àà dom(Œ∏))
More generally, we all a dened term (resp. an undened term) any term that redues to a
quasi-head normal form whih is dened (resp. undened). The lass of dened terms is losed
under arbitrary redution, as for the lass of undened terms. Moreover, the lass of undened
terms is losed under arbitrary substitution.
Denition 7.7.3 (Quasi-normal form)  A term (resp. a ase binding) is said to be in
quasi-normal form when it is in normal form w.r.t. al l the redution rules but LamApp (a.k.a.
Œ∑).
Terms (resp. ase bindings) that are in quasi-normal form are simply alled quasi-normal
terms (resp. quasi-normal ase bindings ). In partiular, we all a quasi-normal head term
any head term H whih is in quasi-normal form. These notions have the following syntati
haraterization:
208
7.7 Separation
Prop osition 7.7.4 Quasi-normal terms, quasi-normal head terms, and quasi-normal ase bind-
ings are (mutual ly) haraterized by the fol lowing grammar:
Q.n.-terms
Q.n.-head-terms
Q.n.-ase bind.
N ::= z | Œªx1 ¬∑ ¬∑ ¬∑xn . HN1 ¬∑ ¬∑ ¬∑Nk
H ::= x | c | {|Œ∏|}. x | {|Œ∏|}. c (c /‚àà dom(Œ∏)
Œ∏ ::= c1 7‚Üí N1; . . . ; cp 7‚Üí Np
The notion of ontext with one hole (notation C[], C ‚Ä≤[], et.) is dened in the Œª-alulus
with onstrutors as exp ete d . The term obtained by lling a ontext with one hole C[] with a
term M is written C[M ], and the omp osition of two ontexts C[] and C ‚Ä≤[] is written C ‚Ä≤[C[]].
In what follows, we will mainly use ontexts of a partiular form, namely, evaluation ontexts :
Evaluation ontexts E[] ::= []N1 ¬∑ ¬∑ ¬∑Nn | {|Œ∏|}. []N1 ¬∑ ¬∑ ¬∑Nn
(The seond form should b e read ({|Œ∏|}. [])N1 ¬∑ ¬∑ ¬∑Nn.)
Notie that the omp osition E ‚Ä≤[E[]] of two evaluation ontexts E[] and E ‚Ä≤[] is not always
an evaluation ontext, but that it always redues to an evaluation ontext using zero, one or
several steps of the CaseApp rule, p ossibly followed by a single step of the CaseCase rule:[
[]N1 ¬∑ ¬∑ ¬∑Nk
]
N ‚Ä≤1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤ = []N1 ¬∑ ¬∑ ¬∑NkN
‚Ä≤
1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤[
{|Œ∏|}. []N1 ¬∑ ¬∑ ¬∑Nk
]
N ‚Ä≤1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤ = {|Œ∏|}. []N1 ¬∑ ¬∑ ¬∑NkN
‚Ä≤
1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤
{|Œ∏‚Ä≤|}.
[
[]N1 ¬∑ ¬∑ ¬∑Nk
]
N ‚Ä≤1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤
‚àó
‚Üí {|Œ∏‚Ä≤|}. []N1 ¬∑ ¬∑ ¬∑NkN
‚Ä≤
1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤
{|Œ∏‚Ä≤|}.
[
{|Œ∏|}. []N1 ¬∑ ¬∑ ¬∑Nk
]
N ‚Ä≤1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤
‚àó
‚Üí {|Œ∏‚Ä≤ ‚ó¶ Œ∏|}. []N1 ¬∑ ¬∑ ¬∑NkN
‚Ä≤
1 ¬∑ ¬∑ ¬∑N
‚Ä≤
k‚Ä≤
Remark 7.7.5 An evaluation ontext E[] an always be regarded as a term (of a partiular
form) that ontains exatly one ourrene of a distinguished variable depited []the hole. In
partiular, sine the unique ourrene of the hole [] in an evaluation ontext E[] is outside the
sope of al l the binders of E[], the operation of replaement E[M ] works just as the ordinary
operation of substitution E{[] := M} of Œª-alulus. (This is of ourse not the ase for the
general notion of ontext with one holethink of C[x] where C[] = Œªx . [].)
The daimon z whih represents immediate termination naturally absorbs all the evaluation
ontexts:
Lemma 7.7.6 In any evaluation ontext E[] one has E[z]
‚àó
‚Üí z.
Symmetrially, eah subterm of the form {|Œ∏|}. c (with c /‚àà dom(Œ∏)) blo ks the omputation
pro ess at head p osition so that undened terms absorb all evaluation ontexts as well:
Lemma 7.7.7 Given an undened term U , the term E[U ] is undened in any evaluation on-
text E[].
The daimon z and undened terms are thus natural andidates to dene the notion of
separation:
209
7.7 Separation
Denition 7.7.8 (Separability) We say that two terms M1 and M2 are:
‚Ä¢ weakly separable if there exists a ontext with one hole C[] suh that either:
 C[M1]
‚àó
‚Üí z and C[M2] is undened, or
 C[M2]
‚àó
‚Üí z and C[M1] is undened;
‚Ä¢ strongly separable if there exists two ontexts C1[] and C2[] suh that
 C1[M1]
‚àó
‚Üí z and C1[M2] is undened, and
 C2[M2]
‚àó
‚Üí z and C2[M1] is undened.
On the other hand, two undened terms annot b e separated eah other (preisely b eause
their heads blo k all omputations), so that we have to exlude them from our study of the
separation prop erty.
Denition 7.7.9 (Completely dened quasi-normal term) A quasi-normal term M is
said to be ompletely dened if it ontains no subterm of the form {|Œ∏|}. c, where c /‚àà dom(Œ∏).
In what follows, we will show that distint ompletely dened normal terms are weakly
separable.
‚Ä¢ First we dene a syntati relation b etween terms, alled disagreement at depth d ‚àà IN,
and we show that any pair of distint normal forms have Œ∑-expansions that disagree at
some depth (this subsetion).
‚Ä¢ Then we show (by indution on the depth of disagreement) that any pair of disagreeing
quasi-normal terms are weakly separable.
Denition 7.7.10 (Skeleton equivalene) We say that two dened head terms H1 and H2
have the same skeleton and write H1 ‚âà H2 if either:
‚Ä¢ H1 = x1 and H2 = x2 for some x1, x2 ‚àà V, and x1 = x2; or
‚Ä¢ H1 = c1 and H2 = c2 for some c1, c2 ‚àà C, and c1 = c2; or
‚Ä¢ H1 = {|Œ∏1|}. x1 and H2 = {|Œ∏2|}. x2 for some ase bindings Œ∏1, Œ∏2 and for some x1, x2 ‚àà V,
and dom(Œ∏1) = dom(Œ∏2) and x1 = x2.
Considering the negation of the former equivalene, it is lear that two dened head terms H1
and H2 have not the same skeleton (H1 6‚âà H2) when either:
‚Ä¢ H1 is a variable, and H2 is a onstrutor (or symmetrially); or
‚Ä¢ H1 is a ase-variable, and H2 is a onstrutor (or symmetrially); or
210
7.7 Separation
‚Ä¢ H1 is a ase-variable, and H2 is a variable (or symmetrially); or
‚Ä¢ H1 and H2 are b oth variables, but not the same variable; or
‚Ä¢ H1 and H2 are b oth onstrutors, but not the same onstrutor; or
‚Ä¢ H1 = {|Œ∏1|}. x1 and H2 = {|Œ∏2|}. x2 for some ase bindings Œ∏1, Œ∏2 and for some x1, x2 ‚àà V,
and either x1 6= x2 or dom(Œ∏1) 6= dom(Œ∏2).
(Notie that we do not onsider the ase of a head term of the form {|Œ∏|}. c where c /‚àà dom(Œ∏),
whih is exluded from our denition.)
Denition 7.7.11 (Disagreement at depth d) For eah numeral d ‚àà IN, we dene a binary
relation on the lass of ompletely dened quasi-normal terms, al led the disagreement relation
at depth d. This relation, written disd(M1,M2) (`M1 and M2 disagree at depth d'), is dened
by indution on d ‚àà IN as fol lows:
‚Ä¢ (Base ase) We write dis0(M1,M2) if either:
 M1 = z and M2 = Œªx1 ¬∑ ¬∑ ¬∑xn . HN1 ¬∑ ¬∑ ¬∑Nk; or
 M1 = Œªx1 ¬∑ ¬∑ ¬∑xn . HN1 ¬∑ ¬∑ ¬∑Nk and M2 = z; or
 M1 = Œªx1 ¬∑ ¬∑ ¬∑xn . H1N1,1 ¬∑ ¬∑ ¬∑N1,k1 and
M2 = Œªx1 ¬∑ ¬∑ ¬∑xn . H2N2,1 ¬∑ ¬∑ ¬∑N2,k2 and
H1 6‚âà H2.
‚Ä¢ (Indutive ase) For al l d ‚àà IN, we write disd+1(M1,M2) if
M1 = Œªx1 ¬∑ ¬∑ ¬∑xn . H1N1,1 ¬∑ ¬∑ ¬∑N1,k1 and
M2 = Œªx1 ¬∑ ¬∑ ¬∑xn . H2N2,1 ¬∑ ¬∑ ¬∑N2,k2 and
H1 ‚âà H2, and if either
 H1 = {|Œ∏1|}. y and H2 = {|Œ∏2|}. y for some ase bindings Œ∏1, Œ∏2 and for some variable y,
and there is a onstrutor c ‚àà dom(Œ∏1) = dom(Œ∏2) suh that disd(Œ∏1(c), Œ∏2(c)); or
 There is a position 1 ‚â§ k ‚â§ min(k1, k2) suh that disd(N1,k, N2,k).
Lemma 7.7.12 (Co oking lemma) If M1 and M2 are two ompletely dened normal terms
(w.r.t. al l the redution rules inluding LamApp = Œ∑) suh that M1 6= M2, then there exist
two ompletely dened quasi-normal terms M ‚Ä≤1 and M
‚Ä≤
2 suh that M
‚Ä≤
1
‚àó
‚ÜíŒ∑ M1, M
‚Ä≤
2
‚àó
‚ÜíŒ∑ M2, and
disd(M
‚Ä≤
1,M
‚Ä≤
2) for some d ‚àà IN.
Theorem 7.7.13 (Separation) Let M1 and M2 be ompletely dened terms in normal form.
If M1 6‚â°M2, then M1 and M2 are weakly separable.
211
7.8 Conlusion and future work
7.8 Conlusio n and future work
We have intro dued a Œª-alulus with onstrutors, ŒªBC, whih mo dels pattern mathing with
a minimal set of onstruts and rewrite rules. We used a set of onstants as ase binders, whih
work as substitution-like onstruts, in order to p erform pattern mathing. This mathing
faility is mo deled with adequate rewrite rules. We have extensively studied ommutation
prop erties for these rules, and, for the alulus obtained by omitting the Œ≤-like and Œ∑-like rules
(whih onstitute a ase-binder alulus instead of a substitution alulus), we have proved
strong normalization. Even with the minimal language we intro dued, the onuene and
separation results we obtained are somewhat involved.
In order to prove onuene for the whole alulus we started by studying ommutation
of pairs of one-rule subsys te ms and designed a program to infer ommutation of other sub-
systems. The  inferene rules of the program are motivated by ommutation lemmas. The
program guided us by suggesting the ommutation lemmas whih were required to omplete
the onuene pro of sequentially. One we proved these lemmas, the program ombined them
with its own inferenes and traed the full sequen e of inferenes for any sp ei pair of om-
muting sub-systems. This kind of progressive pro of is an alternative to lassial ommutation
and onuene pro ofs.
Thus we have an extension of Œª-alulus in whih pattern mathing is implemented via a
mehanism of ase analysis that b ehaves like a head linear substitution over onstrutors.We
have shown that the redution relation of ŒªBC is onuent and onservative over the Œª-alulus,
but also that it is omplete in the sense that it provides suiently many redution rules to
identify all observationally equivalent normalizing terms. Surprisingly, the mehanial prop-
agation rule if A//B and A//C then A//(B + C) (ombined with the primitive knowledge
of all ommutation prop erties b etween subsys te ms that do not involve AppLam) is suient
to redue the pro of of the exp eted 7,784 non-trivial ommutation lemmas to only 12 prim-
itive lemmas, that are established by hand. It would b e interesting to investigate further to
see whether the same metho d an b e used to prove the onuene of other rewrite systems
with many redution rules -typially, systems with expliit substitutions. We started with the
analysis for some of them and it seems far from b eing trivial. With these rewriting systems it
would b e interesting to dene the asso iated (binary) losure onditions, in order to nd out if
they an b e express e d in the same way as we have done for ŒªBC. We do not know yet if the
formulation of the BCC, that is, rule ... rule ‚ä¢ rule is adequate for most of the known Œª-aluli.
We stated and proved a top ologial prop erty -separation- whih is based in syntatial dis-
agreement. The separation theorem we proved suggests that head normal forms of ŒªBC ould
b e the adequate brik to dene a notion of B√∂hm-tree for ŒªBC and more generally, for ML-style
pattern-mathing. However, the fat that it is a weak separation theorem also suggests that
212
7.9 App endix 1. Commutative Union Lemma revisited
the observational ordering is non-trivial on the set of normal forms. Charaterizing observa-
tional ordering on normal forms ould b e the next step to deep en our understanding of b oth
op erational and denotational semantis of ŒªBC.
Whih typ e system for ŒªBC? The redution rules CaseApp and CaseLam whih are the
starting p oint of this work deeply hallenge the traditional intuition of the notion of typ e, for
whih funtions and onstruted values live in dierent worlds. However, the go o d op erational
semantis of the alulus naturally raises the exiting question of nding a suitable typ e system
for ŒªBC.
We are also interested in improving the lemma generation tehnique. For instane, it ould
b e nie to nd an optimal or sub-optimal order for testing the ommutation lemmas, if this
is indeed plausible, with the goal of getting a minimal set of lemmas. We an also study the
formulation of ompleteness results in relation to the inferene the algorithm an p erform. This
is motivated by the fat that we have used just some sp ei lemmas whih entail ommutation
results starting from axioms (an initial database of hand-heked results), but p erhaps other
rules would do as well. This would b e the sub jet of a future researh.
Last, lo oking for new separation theorems ould b e interesting. We an think of two p ossible
lines of work. One is to ask ab out separation with resp et to dierent subsys te ms, not the
whole alulus. The other one is a dierent formulation of separation, namely not to use z but
some onstant or term instead, as a devie to observe and separate normal forms.
7.9 App endix 1. Commutative Union Lemma revisi ted
Inspired in Lemma 7.4.1 from setion 7.4, we give a new simpler pro of of the well-known
Hindley-Rosen's Commutative Union Lemma when onsidering an arbitrary family of redution
relations.
As b efore we denote redution relations with apital letters suh as A,Ai, et.
Atually we will use the following equivalent formulation of Lemma 7.4.1: if A//B1, A//B2,
. . . , A//Bk then A// ‚à™1‚â§i‚â§k Bi, whih easily follows by indution on k.
Lemma 7.9.1 (Hindley-Rosen's Commutative Union Lemma) Let {Ai}i‚ààI be a family
of redution relations over the same set A. If for every i, j ‚àà I Ai//Aj (in partiular every
relation Ai is onuent), then ‚à™i‚ààIAi is onuent.
Proof: Let us denote A = ‚à™i‚ààIAi. Supp ose a
‚àó
‚ÜíA b and a
‚àó
‚ÜíA c. We will show that the
diagram an b e losed. Let A‚Ä≤ b e the union of the relations whih were used in the ab ove two
derivations from a (thus it is a union of nite relations). Without loss of generality and to
simplify notation, supp ose A‚Ä≤ = A1 ‚à™ A2 ‚à™ ¬∑ ¬∑ ¬∑ ‚à™Ak for k ‚â• 1. We show b elow that A
‚Ä≤//A‚Ä≤.
213
7.10 App endix 2. Inremental onuene pro ofs
Take any 1 ‚â§ i ‚â§ k. By hyp othesis Ai//Aj for every 1 ‚â§ j ‚â§ k. By Lemma 7.4.1 (1), Ai//A
‚Ä≤
.
Sine i is arbitrary, use again Lemma 7.4.1 (1) and onlude that A‚Ä≤//A‚Ä≤. Thus the diagram is
losed. ‚ú∑
Note that the ommutation result is not applied diretly to the family of relations. The
reason why at the b eginning of the pro of we to ok a xed divergene starting from an arbitrary
term is that our Lemma 7.4.1, used twie in the ab ove pro of, is not intended to handle arbitrary
unions of relations, just nite ones. This sp eaks ab out the fat that to lose a diagram one
atually an use the same relations whih established it.
This pro of is simpler than the lassial one (e.g. in (11)) b eause in essen e it only tiles
diagrams, and it do es not need to use that the reexive-transitive losure of the union of the
relations satises the diamond prop erty.
Last, an analogous pro edure an b e used to prove the somehow weaker statement: If for
every i, j ‚àà I, Ai//wAj (in partiular every Ai is WCR), then ‚à™i‚ààIAi is WCR.
7.10 App endix 2. Inremental onuene pro ofs
Continuing our investigation on pro ofs of CR for subsys te ms using minimal axioms and
onditions, we show here an alternative view of the database lemmas tehnique for proving
ommutations b etween rewriting subsys te ms given by subsets of rules.
We an desrib e the pro ofs obtained using the metho d develop ed by using pro of trees as-
so iated with inferene rules, in the same way we use pro of trees for derivations when typing
terms, as well as for pro ofs in many logial systems. The inferene rules are the lemmas whih
enabled us to infer dierent ommutation (and onuene) prop erties whih may hold b etween
the subsys te ms.
7.10.1 Conuene pro of trees for CL, ŒªŒ≤Œ∑ and ŒªBC
As an exp erimental appliation of the CR pro of metho d develop ed we seek shortest pro ofs of
ommuting pairs of subsys te ms of S,K, I-Combinatory Logi (11; 12) (in partiular, S+K+ I
and S+K). We measure the pro of size simply as the numb er of tree no des. Shortest pro of trees
app ear on Figures 7.7 and 7.8. As a uriosity, note that this pro of of onuene of S + K + I
do es not use the onuene of S +K!
The metho d an b e applied to prove onuene of the lassial ŒªŒ≤Œ∑-alulus. See Figure 7.9
for a minimal size pro of tree.
We also give here pro of trees for the onuene of a 4-rule subsys te m of the ŒªBC-alulus
(the tree for the entire system should b e muh bigger). Thus a 15-step minimal pro of tree of
onuene of AppLam + AppDai + LamApp + LamDai , using 6 subsys te ms, is given in Figure
214
7.11 Some remarks
Let s1 = S, s2 = K, s3 = S +K.
(DB)
s3//s1
(DB)
s1//s2
(s2, s2) ‚ä¢ BCC
(WC)
s2/s2 s2 + s2 ‚ä¢ SN
(NL)
s2//s2
(Œ£)
s3//s2
(Œ£)
s3//s3
Figure 7.7: Pro of tree for the onuene of S +K-CL
7.10, where s3 = LamApp + LamDai , s4 = AppDai , s8 = AppLam , s11 = LamApp + LamDai +
AppLam , s12 = AppDai + AppLam , s15 = LamApp + LamDai + AppDai + AppLam .
We seek also shortest pro ofs of other pairs of subsys te ms of this alulus, p ossibly using
several riteria. We are interested in onsidering the depth of the tree as well, although we
leave this and other related issues for future work.
The notation employed in these pro ofs is as follows. The inferene rule employed in eah
step dene the lab el to its right. We use (CP ) eah time the ritial pair theorem is applied (if
all ritial pairs lose then weak ommutation holds, or WCR holds in the ase b oth systems
in the premise oinide), (DB) eah time a lemma in the database is used, (NL) eah time
Newman's Lemma or Lemma 7.4.2 are applied, (WC) eah time theorem 7.5.4 is applied in
the sense that the BCC imply weak ommutation (and WCR in the ase b oth systems in the
premise oinide), and (Œ£) eah time Lemma 7.4.1 is applied.
7.11 Some remarks
We have b een exploring the existene of minimal inremental pro ofs of onuent systems,
abstrat and onrete. As a future task, we plan to investigate the problem of existene of
TRSs whih orresp ond to arbitrary losure onditions. The problem an b e formulated as
follows: given a nite set of ordered 3-uples of the form
r11 ‚àà s1, r
1
2 ‚àà s2 ‚ä¢ r
1
i ‚àà sj
. . .
rn1 ‚àà s1, r
n
2 ‚àà s2 ‚ä¢ r
n
i ‚àà sj
where i, j ‚àà {1, 2}, i 6= j, do es there exist a TRS with rules rki , 1 ‚â§ k ‚â§ n, i ‚àà {1, 2} suh
that the binary losure onditions are exatly the preeding ones? We b elieve this is so, thus
the general interest of this problem of pro of synthesis is justied.
We have implemented some riterion for outputting a ombined pro of tree for many (sub)syste ms.
Another riterion omes from using graphs instead of trees, thus eah intermediate no de ap-
215
7.
1
1
S
o
m
e
r
e
m
a
r
k
s
Let s1 = S, s2 = K, s4 = I, s5 = S + I, s6 = K + I, s7 = S +K + I.
(DB)
s2//s1
(DB)
s5//s1
(Œ£)
s7//s1
(DB)
s1//s2
(DB)
s1//s4
(Œ£)
s1//s6
(s6, s6) ‚ä¢ BCC
(WC)
s6/s6 s6 ‚ä¢ SN
(NL)
s6//s6
(Œ£)
s7//s6
(Œ£)
s7//s7
Figure 7.8: Pro of tree for the onuene of the full S +K + I-CL
2
1
6
7.11 Some remarks
(DB)
Œ≤ ‚ä¢ CR
(DB)
Œ∑//Œ≤
(Œ£)
Œ≤ + Œ∑//Œ≤
(DB)
Œ≤//Œ∑
(CP )
Œ∑ ‚ä¢ WCR Œ∑ ‚ä¢ SN
(NL)
Œ∑ ‚ä¢ CR
(Œ£)
Œ≤ + Œ∑//Œ∑
(Œ£)
Œ≤ + Œ∑ ‚ä¢ CR
Figure 7.9: Pro of tree for the onuene of ŒªŒ≤Œ∑
p ears only one. We ould also lab el some of the trees in order to avoid their rep etition inside
another tree.
217
7.
1
1
S
o
m
e
r
e
m
a
r
k
s
(s
3 , s
3 ) ‚ä¢ BCC
(W
C)
s
3 ‚ä¢ W
CR
s
3 ‚ä¢ SN
(NL)
s
3 ‚ä¢ CR
(DB)
s
12//s
3
(Œ£)
s
15//s
3
(CP )
s
4 ‚ä¢ W
CR
s
4 ‚ä¢ SN
(NL)
s
4 ‚ä¢ CR
(DB)
s
4//s
8
(Œ£)
s
4//s
12
(DB)
s
3//s
12
(DB)
s
8//s
4
(DB)
s
8 ‚ä¢ CR
(Œ£)
s
8//s
12
(Œ£)
s
11//s
12
(Œ£)
s
15//s
12
(Œ£)
s
15 ‚ä¢ CR
F
i
g
u
r
e
7
.
1
0
:
P
r
o
o
f
t
r
e
e
f
o
r
t
h
e

o
n

u
e
n

e
o
f
t
h
e
-
s
u
b
s
y
s
t
e
m
2
1
8
7.11 Some remarks
Figure 7.11: S(S(SS)S)S(SSS) after 40 left-most steps
219
7.11 Some remarks
220
Chapter 8
The expansion problem in lamb da aluli
with expliit substitution
Time to duration is as plae to expansion.  J. Lo ke
Siene may set limits to know ledge, but should not set limits to imagination. 
B. Russell
ABSTRACT In the present hapter we study some sp ei subsys te ms of ŒªœÖ and Œªs. We
analyze their resp etive sets of terms having the prop erty of expanding to pure terms, as
minimal sets of terms for these aluli. We prove that, ontrarily to what happ ens in the Œªx-
alulus in whih this set of terms is trivial, for ŒªœÖ and Œªs it is prop er and non-reursive, so it
do es not admit a ontext-free grammar and hene annot b e presented in the usual way.
8.1 Intro dution
This hapter deals with sp ei sub-aluli of some Œª-aluli onerning derivations starting
from pure terms. As we p ointed out on the preliminaries, a sub-alulus of a given alulus
an b e obtained from the original alulus starting with a subset of terms, as well as restriting
the alulus to a subset of its rules, as well as restriting rule appliation. One an have an
advantage in restriting a alulus to a sp ei sub-alulus, suh as the fat that the set of
terms may b eome smaller, i.e. one an disard those terms whih are not needed for some
sp ei purp ose. New aluli an emerge, with p ossibly dierent prop erties than the original.
In this hapter we address expansion problems. More preisely, the question if in a sp ei
Œª-alulus a given term would expand in 0 or more steps to some term in a given set, i.e. if
there is a derivation from a memb er of that set to the given term. In partiular, we sp eially
onsider the problem of expansion in several steps to a pure term, starting from any term from
some sp ei Œª-alulus with expliit substitution. This problem turns out to b e interesting
221
8.1 Intro dution
and shows that dierent expliit substitution systems may have very dierent b ehavior with
resp et to it, as we will see, and some of these problems will result undeidable.
The motivations b ehind expansion to Œª-alulus pure terms are several. The set of pure
terms is always an imp ortant referene set when formulating simulation, pro jetion, preserva-
tion of strong normalization, and other requirements, and in any pratial implementation a
substitution alulus asso iated to a Œª-alulus with expliit substitution is required to b e able
to propagate substitutions when starting from pure terms -atual programs- after a Œ≤-redution
of that alulus, therefore many terms exist only to denote p otential substitutions, and they
will b e unneeded if one restrits the attention to derivations whih start from pure Œª-alulus
terms.
8.1.1 Related work
Expansion in expliit substitution aluli seems to have had very little treatment in the
literature as far as the author knows. Polonovski (72) proves that in some aluli whih enjoy
the PSN prop erty, typable terms are SN. Namely, given a term a, if there exists a pure term b
suh that b‚Üí a, then SN of typable terms follows almost diretly from PSN of the alulus and
SN of simply typ ed Œª-alulus. To ahieve this, the funtion Ateb(‚Ä¢) is dened (its name omes
from reversing Beta), whih transforms every losure in the term into a (Beta)-redex reduing
to it when this is p ossible (as in Œªx). On the other hand, when suh a losure elimination by
reversing (Beta) is diult, or not p ossible (that will b e the ase when suh a pure term do es
not exist), then some funtions are dened to mo dify the indies in the term in suh a way
that the new term an b e expanded to a pure term, but preserving typability, and then the
same argument allows to ahieve SN of typ ed terms. Nevertheless, in (72) the tehnique is used
either when there is no pure term reduing to the term in question, or when it is diult to
nd suh a term. How to prove its non-existene is not disussed. Moreover, Ateb(‚Ä¢) works by
inverting only the (Beta)-rule and nothing is said ab out inverting the other rewriting rules of
the alulus.
Apart from this, expansion problems have had little or no study at all, p erhaps b eause
in some way they reet omputing to the past instead of omputing forward in time. For
instane, Waldmann (84) denes the set of anestors of a given term in the CL(S)-alulus,
i.e. the ombinatory logi restrited to the use of ombinator S only. Then he analyzes the
rationality of the set of CL(S)-terms whih are predees s ors of the set of normal forms, and
states that it is a rational language (i.e. it an b e aepted by a nite tree automata for term
algebras). Moreover, most urrent results ab out deidability of rational languages seem to b e
appropriate only for ground TRSs, and this is not the ase of the expliit substitution aluli
we study.
222
8.2 Expansion in
Our work is presented as follows. We treat the expansion problem in three aluli of expliit
substitution: Œªx, ŒªœÖ and Œªs, where only the rst one results a trivial problem. We show
our main undeidability result for ŒªœÖ, whih we then transfer to Œªs. We nally disuss some
theoretial onseque n  e s , and we onlude and suggest researh diretions.
8.2 Expansion in Œªx
The Œªx alulus is a alulus where all terms expand to pure terms (in zero or more steps)
as shown next.
Prop osition 8.2.1 For al l M ‚àà Œõx, there exists M ‚Ä≤ ‚àà Œõ suh that M ‚Ä≤ ‚Üí
Œªx
M .
Proof: By indution on M . If M = x is a variable, the result is trivial. If M = PQ, then by
indutive hyp othesis (IH) there exists P ‚Ä≤ ‚àà Œõ suh that P ‚Ä≤ ‚Üí
Œªx
P , and there exists Q‚Ä≤ ‚àà Œõ suh
that Q‚Ä≤ ‚Üí
Œªx
Q. Take M ‚Ä≤ = P ‚Ä≤Q‚Ä≤ ‚Üí
Œªx
M . If M = Œªx.P , then by IH there exists P ‚Ä≤ ‚àà Œõ suh that
P ‚Ä≤ ‚Üí
Œªx
P . Take M ‚Ä≤ = Œªx.P ‚Ä≤ ‚Üí
Œªx
M . If M = P „Äàx := Q„Äâ, then by IH there exists P ‚Ä≤ ‚àà Œõ suh
that P ‚Ä≤ ‚Üí
Œªx
P , and there exists Q‚Ä≤ ‚àà Œõ suh that Q‚Ä≤ ‚Üí
Œªx
Q. Take M ‚Ä≤ = (Œªx.P ‚Ä≤)Q‚Ä≤ ‚Üí
Œªx
M . ‚ú∑
Remark 8.2.2 Note that the (Beta)-rule beomes neessary in the above result when the term
M is not pure. Moreover, no other rule is used. The same holds for the Œªx‚àíalulus.
8.3 Expansion in ŒªœÖ
In order to treat the minimality of the ŒªœÖ-terms set and related problems, a study of the
expansion should b e done. Expansion p ermits to know the past of a term. In partiular we
are interested in terms with a pure past, i.e. those expanding to a lassial de Bruijn term.
The purp ose of this setion is to show that not all terms have this prop erty, and to apture
them, as well as to present a suitable alulus having the same go o d prop erties of ŒªœÖ where all
terms expand to pure terms.
We will see that the ab ove mentioned set of terms is a prop er subset of ŒõtœÖ, by the exhibition
of families of examples of ŒªœÖ-terms whih are not in this set. Next we will give the desription
we found for these terms, and we will treat the problem of deiding whether suh an expansion
exists.
Remark that the (Beta)-rule b eomes neess ary to reover pure terms from losures when
doing expansion. This is b eause all left-hand sides of the œÖ-rules inlude some losure thus
they are not pure terms. The same holds in Œªx, Œªs and most expliit substitution aluli. This
motivates the inlusion of the (Beta)-rule in the study of expansion from now onwards, that is,
to onsider not œÖ but ŒªœÖ.
Due to these onsiderations, we nd interesting to treat expansion in the full alulus.
223
8.3 Expansion in
Denition 8.3.1 (ŒªœÖ-terms with pure expansion) Given M ‚àà ŒõtœÖ we say that M has a
pure expansion if there exists N ‚àà Œõ suh that N ‚Üí
ŒªœÖ
M . Let ŒõpœÖ = S(Œõ) = {M ‚àà Œõ
t
œÖ |M has a
pure expansion}.
8.3.1 Terms with pure expansion
The next setions of this hapter an b e read indep endently of the following part of this
setion. So it is p ossible to skip the subseq u e nt denitions and results in this setion and go
diretly to setion 8.4.
Next we aim to prove that in ŒªœÖ there are (big families of ) terms whih do not expand to pure
terms. For this we intro due a notion of  go o d ontext in this alulus. From now onwards
unless expliitly stated, all ontexts will b e term ontexts.
Denition 8.3.2 A ontext C = C{‚ú∑} is of Œª-type if C{‚ú∑} = D{ŒªD‚Ä≤{‚ú∑}} with D,D‚Ä≤ on-
texts.
Denition 8.3.3 A ontext C = C{‚ú∑} is of /-type if C{‚ú∑} = D{(D‚Ä≤{‚ú∑})[Q/]} with D,D‚Ä≤
ontexts and Q ‚àà ŒõtœÖ.
Denition 8.3.4 A ontext wil l be al led go o d if it is not of Œª-type nor of /-type.
In other terms, the hole is not under the sop e of a Œª nor inside the head of a losure of /-typ e.
Remark that a sub-ontext of a go o d ontext is also go o d.
Denition 8.3.5 For a ‚àà ŒõtœÖ we dene the number of lifts in a, written n‚áë(a), in the expeted
way:
n‚áë(n) = 0 n‚áë(a/) = n‚áë(a)
n‚áë(ab) = n‚áë(a) + n‚áë(b) n‚áë(Œªa) = n‚áë(a)
n‚áë(a[s]) = n‚áë(a) + n‚áë(s) n‚áë(‚Üë) = 0
n‚áë(‚áë (s)) = n‚áë(s) + 1
or equivalently
n‚áë(n) = 0
n‚áë(ab) = n‚áë(a) + n‚áë(b) n‚áë(Œªa) = n‚áë(a)
n‚áë(a[‚áë
k (b/)]) = n‚áë(a) + n‚áë(b) + k n‚áë(a[‚áë
k (‚Üë)]) = n‚áë(a) + k
For a ‚àà ŒõtœÖ we dene the number of shifts in a, written n‚Üë(a), in the expeted way:
n‚Üë(n) = 0 n‚Üë(a/) = n‚Üë(a)
n‚Üë(ab) = n‚Üë(a) + n‚Üë(b) n‚Üë(Œªa) = n‚Üë(a)
n‚Üë(a[s]) = n‚Üë(a) + n‚Üë(s) n‚Üë(‚Üë) = 1
n‚Üë(‚áë (s)) = n‚Üë(s)
224
8.3 Expansion in
or equivalently
n‚Üë(n) = 0
n‚Üë(ab) = n‚Üë(a) + n‚Üë(b) n‚Üë(Œªa) = n‚Üë(a)
n‚Üë(a[‚áë
k (b/)]) = n‚Üë(a) + n‚Üë(b) n‚Üë(a[‚áë
k (‚Üë)]) = n‚Üë(a) + 1
The idea b ehind go o d ontexts is that they are p otentially impure, i.e. when they expand
they somehow annot redue the numb er of ‚áë in a term.
In the following pro ofs, for any term M , when a ontext C is lear from the ontext, by
abuse of notation we will freely write statements like ‚ú∑ ‚àà M  whih will mean that within
the ontext C the p osition of the hole is lo ated b elow the p osition of the sub-term M . For
example, if for some term e, C{e} = a[s], when we sp eak ab out the p osition of C's hole, unless
C{‚ú∑} = ‚ú∑, we will onsider it to b e in a (resp. in s), and we will write ‚ú∑ ‚àà a (resp. ‚ú∑ ‚àà s),
if that p osition has the form 1.q (resp. 2.q).
The reason of identifying go o d ontexts is the following
Lemma 8.3.6 (invariane of ‚áë ‚àí/ in go o d ontexts) Let C be a good ontext, B,M,N ‚àà
ŒõtœÖ, k ‚â• 1, suh that B ‚àí‚Üí
ŒªœÖ
C{M [‚áëk (N/)]}. Then there exists a good ontext C ‚Ä≤, there exist
M ‚Ä≤, N ‚Ä≤ ‚àà ŒõtœÖ, and k
‚Ä≤ ‚â• 1 suh that B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]} (atual ly k‚Ä≤ = k or k‚Ä≤ = k + 1).
Proof: By indution on the ontext C. Let us all e = M [‚áëk (N/)]. We will not give M ‚Ä≤, N ‚Ä≤,
k‚Ä≤ when the hoie is lear one C ‚Ä≤ has b een hosen.
‚Ä¢ If C{‚ú∑} = ‚ú∑ with B ‚àí‚Üí
ŒªœÖ
e.
 if the redution is at the ro ot of B:
‚àó if the redution is B = (Œªa)b‚Üí a[b/] = e a (Beta)-step, it would imply k = 0 but
this is not p ossible by the hyp othesis k ‚â• 1.
‚àó B = (ab)[s] ‚Üí a[s]b[s] = e annot happ en sine e do es not math an appliation.
‚àó B = (Œªa)[s] ‚Üí Œª(a[‚áë (s)]) = e annot happ en sine e do es not math an abstra-
tion.
‚àó B = 1[‚áë (s)] ‚Üí 1 = e annot happ en sine e do es not math the redut.
‚àó B = (n+1)[‚áë (s)] ‚Üí n[s][‚Üë] = e annot happ en sine e do es not math the redut.
‚àó B = n[‚Üë] ‚Üí n+ 1 = e annot happ en sine e do es not math the redut.
‚àó B = 1[a/] ‚Üí a = e, take C ‚Ä≤{‚ú∑} = 1[‚ú∑/] whih is a go o d ontext, M ‚Ä≤ = M and
k‚Ä≤ = k.
‚àó B = (n+ 1)[a/] ‚Üí n = e annot happ en sine e do es not math the redut.
 if the redution is internal in B:
‚àó a‚Ä≤b‚Üí ab = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math the redut.
225
8.3 Expansion in
‚àó ab‚Ä≤ ‚Üí ab = e with b‚Ä≤ ‚Üí b, it annot happ en sine e do es not math the redut.
‚àó Œªa‚Ä≤ ‚Üí Œªa = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math the redut.
‚àó M ‚Ä≤[‚áëk (N/)] ‚Üí M [‚áëk (N/)] = e with M ‚Ä≤ ‚Üí M , immediate taking C ‚Ä≤{‚ú∑} = ‚ú∑
whih is a go o d ontext.
‚àó M [‚áëk (N ‚Ä≤/)] ‚Üí M [‚áëk (N/)] = e with N ‚Ä≤ ‚Üí N , immediate taking C ‚Ä≤{‚ú∑} = ‚ú∑
whih is a go o d ontext.
‚Ä¢ If C 6= ‚ú∑:
1. if the redution is at the ro ot of B:
(a) B = (Œªa)b‚Üí a[b/] = C{e}.
‚ú∑ ‚àà a, it annot happ en sine C is a go o d ontext
‚ú∑ ‚àà b then take C ‚Ä≤{‚ú∑} = (Œªa)D{‚ú∑}, where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d.
(b) B = (ab)[s] ‚Üí a[s]b[s], we have the following ases:
 if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = (D{‚ú∑}b)[s] where a = D{e} with D go o d, thus C ‚Ä≤ is
go o d.
 if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = (aD{‚ú∑})[s] where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d.
 if ‚ú∑ ‚àà s at the left (i.e. its p osition is of the form 1.2.q for some q), then
s =‚áëk (P/) for some k ‚â• 0 and P , take C ‚Ä≤{‚ú∑} = a[‚áëk (D{‚ú∑}/)]b[s] where
P = D{e} with D go o d, thus C ‚Ä≤ is go o d.
 if ‚ú∑ ‚àà s at the right (i.e. its p osition is of the form 2.2.q for some q), then again
s =‚áëk (P/) for some k ‚â• 0 and P , take C ‚Ä≤{‚ú∑} = a[s]b[‚áëk (D{‚ú∑}/)] where
P = D{e} with D go o d, thus C ‚Ä≤ is go o d.
 if ‚ú∑ o urs at the ro ot of a[s] = e, take C ‚Ä≤{‚ú∑} = ‚ú∑b[s] whih is go o d.
 if ‚ú∑ o urs at the ro ot of b[s] = e, take C ‚Ä≤{‚ú∑} = a[s]‚ú∑ whih is go o d.
() B = (Œªa)[s] ‚Üí Œª(a[‚áë (s)]) = C{e}, it annot happ en by hyp othesis b eause C
must not b egin with Œª.
(d) B = 1[a/] ‚Üí a = C{e}, take C ‚Ä≤{‚ú∑} = 1[C{‚ú∑}/] whih is go o d.
(e) B = (n+ 1)[a/] ‚Üí n, it annot happ en, sine n 6= C{e} for any ontext C.
(f ) B = 1[‚áë (s)] ‚Üí 1, it annot happ en, sine 1 6= C{e} for any ontext C.
(g) B = (n + 1)[‚áë (s)] ‚Üí n[s][‚Üë] = C{e}, the hole annot o ur at the ro ot sine e
do es not math n[s][‚Üë], then
 if ‚ú∑ ‚àà s, take C ‚Ä≤{‚ú∑} = (n+ 1)[‚áë (D{‚ú∑})], where s = D{e}/, thus C ‚Ä≤ is go o d.
226
8.3 Expansion in
 if n[s] o urs at the p osition of ‚ú∑, i.e. n[s] = M [‚áëk (N/)], then s =‚áëk (N/),
then B = (n+ 1)[‚áëk+1 (N/)], take k‚Ä≤ = k+ 1, M ‚Ä≤ = n+ 1, N ‚Ä≤ = N and C ‚Ä≤ = ‚ú∑
whih is go o d.
(h) B = n[‚Üë] ‚Üí n+ 1, it annot happ en, sine n+ 1 6= C{e}.
2. if the redution is internal in B:
(a) if B = a‚Ä≤b‚Üí ab = C{e} with a‚Ä≤ ‚Üí a we have:
 if ‚ú∑ ‚àà b, straightforward: take C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} where b = D{e} with D go o d,
thus C ‚Ä≤ is go o d
 if ‚ú∑ ‚àà a, by IH a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]} with D‚Ä≤ go o d, take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}b
whih is go o d.
(b) if B = ab‚Ä≤ ‚Üí ab with b‚Ä≤ ‚Üí b, it is analogous to the previous ase. We have:
 if ‚ú∑ ‚àà b, by IH b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]} with D‚Ä≤ go o d, take C ‚Ä≤{‚ú∑} = aD‚Ä≤{‚ú∑}
whih is go o d.
 if ‚ú∑ ‚àà a, straightforward: take C ‚Ä≤{‚ú∑} = D{‚ú∑}b‚Ä≤ where a = D{e} with D go o d,
thus C ‚Ä≤ is go o d.
() if B = Œªa‚Ä≤ ‚Üí Œªa = C{e} thus ‚ú∑ ‚àà a, but C ‚Ä≤ is go o d so this annot happ en.
(d) if B = a‚Ä≤[‚áër (b/)] ‚Üí a[‚áër (b/)] with a‚Ä≤ ‚Üí a and r > 0, then
 if ‚ú∑ ‚àà a, use IH and take C ‚Ä≤ = D‚Ä≤{‚ú∑}[‚áër (b/)] where a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d.
 if ‚ú∑ ‚àà b, take C ‚Ä≤ = a‚Ä≤[‚áër (D{‚ú∑}/)] where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d.
 ‚ú∑ annot b e at the p osition of ‚áëm (b/) for some 0 ‚â§ m ‚â§ r sine C is a term
ontext.
(e) if B = a[‚áër (b‚Ä≤/)] ‚Üí a[‚áër (b/)] with b‚Ä≤ ‚Üí b and r > 0, then
 if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = D{‚ú∑}[‚áër (b‚Ä≤/)] where a = D{e} with D go o d, thus C ‚Ä≤
is go o d.
 if ‚ú∑ ‚àà b, use IH and take C ‚Ä≤ = a[‚áër (D‚Ä≤{‚ú∑}/)] where b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d.
 as b efore ‚ú∑ annot b e at the p osition of ‚áëm (b/) for some 0 ‚â§ m ‚â§ r sine C is
a term ontext.
(f ) if B = a‚Ä≤[b/] ‚Üí a[b/] with a‚Ä≤ ‚Üí a (i.e. B ‚Üí a[‚áër (b/)] with r = 0) we have:
 if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤[D{‚ú∑}/] where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d
 if ‚ú∑ ‚àà a, it annot happ en b eause C is go o d.
227
8.3 Expansion in
 rememb er that ‚ú∑ annot b e at the ro ot of a[b/] b eause we are onsidering the
ase C 6= ‚ú∑.
(g) if B = a[b‚Ä≤/] ‚Üí a[b/] with b‚Ä≤ ‚Üí b we have:
 if ‚ú∑ ‚àà a, it annot happ en b eause C is go o d.
 if ‚ú∑ ‚àà b, then use IH and take C ‚Ä≤{‚ú∑} = a[D‚Ä≤{‚ú∑}/] where b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d.
 again, ‚ú∑ annot b e at the ro ot of a[b/] b eause C 6= ‚ú∑.
(h) if B = a‚Ä≤[‚áër (‚Üë)] ‚Üí a[‚áër (‚Üë)] with a‚Ä≤ ‚Üí a and r ‚â• 0, then ‚ú∑ annot o ur at the
ro ot, so we have that:
 ‚ú∑ ‚àà a, use IH and take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}[‚áër (‚Üë)] where a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]}
with D‚Ä≤ go o d, then C ‚Ä≤ is go o d.
‚ú∑
Lemma 8.3.7 (invariane of ‚áë ‚àí ‚Üë in go o d ontexts) Let C be a good ontext, B,M ‚àà
ŒõtœÖ, k ‚â• 0, suh that B ‚àí‚Üí
ŒªœÖ
C{M [‚áëk (‚Üë)]}. Then there exist a good ontext C ‚Ä≤, M ‚Ä≤ ‚àà ŒõtœÖ,
s‚Ä≤ ‚àà ŒõsœÖ and k
‚Ä≤ ‚â• 0 suh that B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}, with:
1. either k‚Ä≤ ‚â• 0 and s‚Ä≤ =‚Üë
2. or k‚Ä≤ ‚â• 1 and s‚Ä≤ = N/ for some N ‚àà ŒõtœÖ.
Proof: By indution on the ontext C. Let us all e = M [‚áëk (‚Üë)]. As b efore, we will not give
M ‚Ä≤, s‚Ä≤, k‚Ä≤ when the hoie is lear one C ‚Ä≤ has b een hosen.
‚Ä¢ If C{‚ú∑} = ‚ú∑ then B ‚àí‚Üí
ŒªœÖ
e.
 if the redution is at the ro ot of B:
‚àó if the redution is B = (Œªa)b‚Üí a[b/] = e a (Beta)-step, it would imply ‚áëk (‚Üë) = b/
whih is not p ossible.
‚àó B = (ab)[s] ‚Üí a[s]b[s] = e annot b e sine e do es not math an appliation.
‚àó B = (Œªa)[s] ‚Üí Œª(a[‚áë (s)]) = e annot b e sine e do es not math an abstration.
‚àó B = 1[‚áë (s)] ‚Üí 1 annot happ en sine e do es not math the redut.
‚àó B = (n + 1)[‚áë (s)] ‚Üí n[s][‚Üë] then the left term has the desired form for any
substitution s, taking C ‚Ä≤{‚ú∑} = ‚ú∑ whih is go o d, where k‚Ä≤ ‚â• 1.
‚àó B = n[‚Üë] ‚Üí n+ 1 = e, it annot happ en sine e do es not math the redut.
‚àó B = 1[a/] ‚Üí a = e, take C ‚Ä≤{‚ú∑} = 1[‚ú∑/] whih is go o d.
‚àó B = (n+ 1)[a/] ‚Üí n = e, it annot happ en sine e do es not math the redut.
 if the redution is internal in B, the only p ossibility is
228
8.3 Expansion in
‚àó M ‚Ä≤[‚áëk (‚Üë)] ‚ÜíM [‚áëk (‚Üë)] with M ‚Ä≤ ‚ÜíM , thus take C ‚Ä≤ = ‚ú∑ whih is go o d.
‚Ä¢ If C{‚ú∑} 6= ‚ú∑:
1. if the redution is at the ro ot of B:
(a) B = (Œªa)b‚Üí a[b/] = C{e}.
‚ú∑ ‚àà a, it annot happ en sine C is go o d
‚ú∑ ‚àà b then take C ‚Ä≤{‚ú∑} = (Œªa)D{‚ú∑}, where b = D{e}, thus C ‚Ä≤ is go o d.
(b) B = (ab)[s] ‚Üí a[s]b[s], we have the following ases:
 if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = (D{‚ú∑}b)[s] where a = D{e}, thus C ‚Ä≤ is go o d.
 if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = (aD{‚ú∑})[s] where b = D{e}, thus C ‚Ä≤ is go o d.
 if ‚ú∑ ‚àà s at the left (i.e. its p osition is of the form 1.2.q for some q), then
s =‚áëk (P/) for some k ‚â• 0 and P , take C ‚Ä≤{‚ú∑} = a[‚áëk (D{‚ú∑}/)]b[s] where
P = D{e}, thus C ‚Ä≤ is go o d b eause D is go o d.
 if ‚ú∑ ‚àà s at the right (i.e. its p osition is of the form 2.2.q for some q), then again
s =‚áëk (P/) for some k ‚â• 0 and P , take C ‚Ä≤{‚ú∑} = a[s]b[‚áëk (D{‚ú∑}/)] where
P = D{e}, thus C ‚Ä≤ is go o d b eause D is go o d.
 if ‚ú∑ o urs at the ro ot of a[s] = e, take C ‚Ä≤{‚ú∑} = ‚ú∑b[s] whih is go o d.
 if ‚ú∑ o urs at the ro ot of b[s] = e, take C ‚Ä≤{‚ú∑} = a[s]‚ú∑ whih is go o d.
() B = (Œªa)[s] ‚Üí Œª(a[‚áë (s)]) = C{e}, it annot happ en by hyp othesis b eause C is
go o d.
(d) B = 1[a/] ‚Üí a = C{e}, take C ‚Ä≤{‚ú∑} = 1[C{‚ú∑}/] whih is go o d.
(e) B = (n+ 1)[a/] ‚Üí n, it annot happ en, sine n 6= C{e} for any ontext C.
(f ) B = 1[‚áë (s)] ‚Üí 1, it annot happ en, sine 1 6= C{e} for any ontext C.
(g) B = (n + 1)[‚áë (s)] ‚Üí n[s][‚Üë] = C{e}, the hole annot o ur at the ro ot so there
are three ases:
 if ‚ú∑ ‚àà s, take C ‚Ä≤{‚ú∑} = (n+ 1)[‚áëk+1 (D{‚ú∑}/)] where s =‚áëk (D{e}/).
 if n o urs at the p osition of ‚ú∑, i.e. n = e = M [‚áëk (‚Üë)], whih is not p ossible.
 if n[s] o urs at the p osition of ‚ú∑, i.e. n[s] = e = M [‚áëk (‚Üë)], then s =‚áëk (‚Üë)
thus B = (n + 1)[‚áëk+1 (‚Üë)], take k‚Ä≤ = k + 1, M ‚Ä≤ = n + 1 and C ‚Ä≤ = ‚ú∑ whih is
go o d.
(h) B = n[‚Üë] ‚Üí n+ 1, it annot happ en, sine n+ 1 6= C{e}.
2. if the redution is internal in B:
(a) if B = a‚Ä≤b‚Üí ab = C{e} with a‚Ä≤ ‚Üí a we have:
 if ‚ú∑ ‚àà b, straightforward: take C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} where b = D{e} with D go o d,
thus C ‚Ä≤ is go o d.
229
8.3 Expansion in
 if ‚ú∑ ‚àà a, by IH a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]} with D‚Ä≤ go o d, take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}b
whih is go o d and the other onditions hold.
(b) if B = ab‚Ä≤ ‚Üí ab with b‚Ä≤ ‚Üí b, it is analogous to the previous ase. We have:
 if ‚ú∑ ‚àà b, by IH b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]} with D‚Ä≤ go o d, take C ‚Ä≤{‚ú∑} = aD‚Ä≤{‚ú∑}
whih is go o d and the other onditions hold.
 if ‚ú∑ ‚àà a, straightforward: take C ‚Ä≤{‚ú∑} = D{‚ú∑}b‚Ä≤ where a = D{e} with D go o d,
thus C ‚Ä≤ is go o d.
() if B = Œªa‚Ä≤ ‚Üí Œªa = C{e} thus ‚ú∑ ‚àà a, but C ‚Ä≤ is go o d so this annot b e the ase.
(d) if B = a‚Ä≤[‚áër (b/)] ‚Üí a[‚áër (b/)] with a‚Ä≤ ‚Üí a and r > 0, then
 if ‚ú∑ ‚àà a, use IH and take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}[‚áër (b/)] where a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d and the other onditions hold.
 if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a[‚áër (D{‚ú∑}/)] where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d.
(e) if B = a[‚áër (b‚Ä≤/)] ‚Üí a[‚áër (b/)] with b‚Ä≤ ‚Üí b and r > 0, then
 if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = D{‚ú∑}[‚áër (b‚Ä≤/)] where a = D{e} with D go o d, thus C ‚Ä≤
is go o d.
 if ‚ú∑ ‚àà b, use IH and take C ‚Ä≤{‚ú∑} = a[‚áër (D‚Ä≤{‚ú∑}/)] where b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d and the other onditions hold.
(f ) if B = a‚Ä≤[b/] ‚Üí a[b/] with a‚Ä≤ ‚Üí a (i.e. B ‚Üí a[‚áër (b/)] with r = 0) we have:
 if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤[D{‚ú∑}/] where b = D{e} with D go o d, thus C ‚Ä≤ is
go o d
 if ‚ú∑ ‚àà a, it annot happ en b eause C is go o d.
 ‚ú∑ annot b e at the ro ot of a[b/] b eause we are onsidering the ase C 6= ‚ú∑.
(g) if B = a[b‚Ä≤/] ‚Üí a[b/] with b‚Ä≤ ‚Üí b we have:
 if ‚ú∑ ‚àà a, it annot happ en b eause C is go o d.
 if ‚ú∑ ‚àà b, then use IH and take C ‚Ä≤{‚ú∑} = a[D‚Ä≤{‚ú∑}/] where b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}
with D‚Ä≤ go o d, thus C ‚Ä≤ is go o d and the other onditions hold.
 again, ‚ú∑ annot b e at the ro ot of a[b/] b eause C 6= ‚ú∑.
(h) if B = a‚Ä≤[‚áër (‚Üë)] ‚Üí a[‚áër (‚Üë)] with a‚Ä≤ ‚Üí a and r ‚â• 0, then the hole annot o ur
at the ro ot, so we have that:
 ‚ú∑ ‚àà a, use IH and take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}[‚áër (‚Üë)] where a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}
with D‚Ä≤ go o d, then C ‚Ä≤ is go o d and the other onditions hold.
‚ú∑
As a onseque n  e of the previous two lemmas we have the following
230
8.3 Expansion in
Prop osition 8.3.8 1. If B ‚àí‚Üí‚àí C{M [‚áëk (N/)]} with C a good ontext and k ‚â• 1, then
there exists C ‚Ä≤ a good ontext, there exist M ‚Ä≤, N ‚Ä≤, k‚Ä≤ ‚â• 1 suh that B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(N ‚Ä≤/)]}.
2. If B ‚àí‚Üí‚àí C{M [‚áëk (‚Üë)]} with C a good ontext and k ‚â• 0, then there exists C ‚Ä≤ a good
ontext, there exist M ‚Ä≤, N ‚Ä≤, k‚Ä≤ ‚â• 0 and s‚Ä≤ ‚àà ŒõsœÖ suh that B = C
‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]} and
(a) either k‚Ä≤ ‚â• 0 and s‚Ä≤ =‚Üë
(b) or k‚Ä≤ ‚â• 1 and s‚Ä≤ = N/ for some N ‚àà ŒõtœÖ.
Proof: Both items are proved by indution on the length of the derivation, using lemmas
8.3.6 and 8.3.7. ‚ú∑
Let us remark that if one states b oth items at one, e.g., if B ‚àí‚Üí‚àí C{M [‚áëk (s)]} with C
a go o d ontext and k ‚â• 0 then there exists C ‚Ä≤ a go o d ontext, M ‚Ä≤, k‚Ä≤ ‚â• 0 and s‚Ä≤ ‚àà ŒõsœÖ suh
that B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}, then one loses the prop erty sine the last losure would not have
a uniform struture. The (FVarLift)-rule is the only reason for the double ondition at the
onlusion of Lemma 8.3.7.
In partiular we have the following Corollary, yielding two families of innite terms not
expanding to pure terms.
Corollary 8.3.9 In ŒªœÖ, the terms of the form M [‚áëk (N/)] with k ‚â• 1 and the terms of the
form M [‚áëk (‚Üë)] with k ‚â• 0 do not expand to pure terms.
Proof: By Prop osition 8.3.8, any expansion of suh a term will have the form B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(s‚Ä≤)]}, then n‚áë(B) ‚â• k
‚Ä≤ ‚â• 1 or n‚Üë(B) ‚â• 1, in either ase B /‚àà Œõ. ‚ú∑
These families of terms are not exhaustive, as we will see in the following setion. Now we
an state the following
Corollary 8.3.10 (ŒõpœÖ,‚ÜíŒªœÖ|ŒõpœÖ), where ‚ÜíŒªœÖ|ŒõpœÖ is the restrition of ‚ÜíŒªœÖ to Œõ
p
œÖ, is a proper
sub-ARS of ŒªœÖ, with set of terms ŒõpœÖ = S(Œõ).
Proof: We have proved that the set of terms is prop er. We now show that, if M ‚àà ŒõpœÖ and
M ‚ÜíŒªœÖ N , then N ‚àà Œõ
p
œÖ. Sine M ‚àà Œõ
p
œÖ, there exists M
‚Ä≤
in Œõ suh that M ‚Ä≤ ‚Üí
ŒªœÖ
M . Then
M ‚Ä≤ ‚Üí
ŒªœÖ
N , so N expands to a (the same) pure term, thus N ‚àà ŒõpœÖ. It is immediate that
ŒõpœÖ = S(Œõ). ‚ú∑
Let us all ŒªœÖp the newly dened sub-alulus of ŒªœÖ.
One onseque n  e of the previous analysis is that ŒªœÖp has a set of terms whih is stritly
inluded in the set ŒõtœÖ. Something analogous will happ en with other aluli, and we leave this
for setion 8.5 (as well as for future work).
231
8.3 Expansion in
8.3.2 Some appliations on mappings b etween aluli
In this last part of the setion we show an appliation of Corollary 8.3.9 dealing with the
existene of appropriate mappings b etween the aluli. For the sole purp ose of this subsetion a
go o d mapping will b e a funtion with minimal preservation prop erties as given by the following
denition. Note in this subsetion we will not distinguish lassial Œª-terms with names and Œª-
terms with de Bruijn indies, so for instane when we write the set Œõ we will mean the lassial
set of Œª-terms or the set of de Bruijn terms, whih will b e given by the ontext.
Denition 8.3.11 (go o d mapping) Suppose we have a mapping from the term set of a al-
ulus ŒªŒ∂1 to the term set of another alulus ŒªŒ∂2, given by a funtion t : ŒõŒ∂1 ‚Üí ŒõŒ∂2, where ŒõŒ∂1
and ŒõŒ∂2 are their respetive sets of terms. Let us assume that Œõ ‚äÇ ŒõŒ∂i for i = 1, 2, that is,
these aluli inlude as terms the pure Œª-terms (either lassial or de Bruijn) as usual. We wil l
al l t a go o d mapping (or a homomorph ism) from ŒªŒ∂1 to ŒªŒ∂2 i the fol lowing two (expeted)
onditions are met:
1. t|Œõ = idŒõ, i.e. t on any pure term yields the same term
2. if M ‚ÜíŒªŒ∂1 N then t(M) ‚Üí
ŒªŒ∂2
t(N), i.e. t preserves redution in a weak sense
Remark that ondition (2) in Denition 8.3.11 is very weak (eg. weaker than the usual
Simulation) b eause we do not distinguish b etween rewriting rules of any alulus and the only
requirement is that every rewriting step of one alulus is just mapp ed into (0 or more) rewriting
steps of any nature in the seond alulus. A trivial example for ondition (2) is a onstant
funtion. But suh a funtion is not a go o d mapping sine it do es not satisfy ondition (1) 
all pure terms must b e mapp ed to themselves (or to their de Bruijn translations) and not to
a unique term. Thus b oth onditions seem natural. Condition (1) is often valid on mappings
used in the literature.
Furthermore, the requirement for a go o d mapping to b e surjetive, or injetive, an b e
reasonable in the ontext of expliit substitution aluli, for the following reason. Without this
requirement, in the presene of aluli satisfying SN of the asso iated substitution alulus,
Pro jetion and Simulation, the funtion given by taking the substitution alulus normal form
is always a go o d mapping. More preisely:
Example 8.3.12 Real l the funtion x : Œõx ‚Üí Œõ dened as the x-normal form of terms, but
onsidered as a funtion x : Œõx‚Üí ŒõtœÖ. This appliation is a good mapping from Œªx to ŒªœÖ.
Proof: Condition (1) learly holds sine x(M) = M for every M ‚àà Œõ. To verify ondition
(2), let M ‚ÜíŒªx N . Then by Pro jetion of Œªx, x(M) ‚Üí
Œ≤
x(N). Sine b oth are pure terms, and
ŒªœÖ satises Simulation of the Œ≤-redution, x(M) ‚Üí
ŒªœÖ
x(N). ‚ú∑
232
8.4 Undeidability results for
Thus it seems appropriate to require go o d mappings to b e onto. As an example of a surjetive
go o d mapping from Œªs to ŒªœÖ take the funtion T whih app ears in setion 8.6. But learly the
mapping x : Œõx ‚Üí ŒõtœÖ of Example 8.3.12 is not surjetive nor injetive. We p ose the question
whether, given a pair of aluli, surjetive and/or injetive go o d mappings exist from one of
them to the other one. As a partial answer we give this
Prop osition 8.3.13 There are no surjetive good mappings from Œªx to ŒªœÖ.
Proof: Supp ose t : Œõx ‚Üí ŒõtœÖ is a surjetive go o d mapping. Take any a ‚àà Œõ
t
œÖ. Sine t is
surjetive, there exists M ‚àà Œõx suh that t(M) = a. By Prop osition 8.2.1 there exists P ‚àà Œõ
suh that P ‚Üí
Œªx
M . By ondition (2), t(P ) ‚Üí
ŒªœÖ
t(M), but by ondition (1) t(P ) = P . Sine
a was an arbitrary ŒªœÖ-term, we have that for every a ‚àà ŒõtœÖ there exists P ‚àà ŒõdB suh that
P ‚Üí
ŒªœÖ
a, whih ontradits Corollary 8.3.9. ‚ú∑
8.4 Undeidabil i ty results for ŒªœÖ
We now prepare for the pro of of our main result, whih states that the set ŒõpœÖ is non-reursive.
We reall ŒõdB the set of de Bruijn terms and the Œ≤dB-redution in the usual way. In what follows
we just use Œõ and Œ≤ for short, when their meanings are lear from the ontext.
We b egin with the following well-known theorem of D. Sott allowing to identify some non-
reursive (i.e. undeidable) sets of terms in Œª-alulus.
Prop osition 8.4.1 (Sott's theorem) Let C ‚äÜ Œõ a proper subset of Œª-terms (i.e. not empty
and not al l Œõ). If C is losed under the =Œ≤ relation (i.e., if M ‚àà C, N ‚àà Œõ and M =Œ≤ N then
N ‚àà C), then C is non-reursive.
Proof: See (12) for a pro of for lassial Œª-alulus. For the Œª-alulus in the de Bruijn setting,
the same holds due to the isomorphism (see the preliminaries) whih is a omputable funtion.
‚ú∑
Remark that Sott's theorem is analogous to Rie Theorem for sets of omputable funtions.
As an imp ortant onseque n  e , we have:
Lemma 8.4.2 Let N ‚àà Œõ be a xed term. Let C = {M ‚àà Œõ | M =Œ≤ N} i.e. the set of al l
terms Œ≤-equivalent to N . Then C is non-reursive.
Proof: Using Sott's theorem sine this set is learly non-trivial and losed under =Œ≤. ‚ú∑
Although it is well-known, we state the following
Corollary 8.4.3 The =Œ≤ relation is undeidable.
233
8.4 Undeidability results for
Proof: Supp ose it is deidable, thus there exists an algorithm for testing M =Œ≤ N for every
pair of terms M,N ‚àà Œõ. Then the set {M ‚àà Œõ | M =Œ≤ 1} would b e reursive sine we ould
use the algorithm for the pair M, 1, whih is absurd by the previous Lemma taking N = 1. ‚ú∑
Also we have:
Corollary 8.4.4 The ‚Üí
Œ≤
relation is undeidable.
Proof: Supp ose it is deidable, thus there exists an algorithm for testing M ‚Üí
Œ≤
N for every
pair of terms M,N ‚àà Œõ. Take the set C = {M ‚àà Œõ | M ‚Üí
Œ≤
1}. Then C would b e reursive
sine we ould use the algorithm for the pair M, 1. But learly C = {M ‚àà Œõ | M =Œ≤ 1} sine
1 is a Œ≤-normal form. This is absurd by Lemma 8.4.2. ‚ú∑
Sine our aim is to study expansion, we add the following onseque n  e (not mentioned at
least in the lassial literature of Œª-alulus):
Corollary 8.4.5 In Œª-alulus the ommon expansion problem is undeidable. I.e., given
M,N ‚àà Œõ, the problem of deiding if there exists P ‚àà Œõ suh that P ‚Üí
Œ≤
M and P ‚Üí
Œ≤
N
is undeidable.
Proof: Supp ose it is deidable. Take the set C = {M ‚àà Œõ | ‚àÉP ‚àà Œõ P ‚Üí
Œ≤
M, P ‚Üí
Œ≤
1}. The
statement ‚àÉP ‚àà Œõ P ‚Üí
Œ≤
M, P ‚Üí
Œ≤
1 is equivalent to the statement M ‚Üí
Œ≤
1 (the impliation
holds by onuene and the fat that 1 is a Œ≤-normal form, and for the onverse take P = M).
Then C = {M ‚àà Œõ | M ‚Üí
Œ≤
1} would b e reursive sine we ould use the algorithm for the pair
M, 1. As b efore, C = {M ‚àà Œõ | M =Œ≤ 1}, whih is non-reursive by Lemma 8.4.2. This is a
ontradition. ‚ú∑
Now we move to the ŒªœÖ alulus, to whih we transfer the same results. For this we reall
the soundness and simulation prop erties of ŒªœÖ (60).
Corollary 8.4.6 The ‚Üí
ŒªœÖ
relation is undeidable.
Proof: Supp ose it is deidable, then using the soundness prop erty there exists an algorithm
for testing M ‚Üí
Œ≤
N for every pair of terms M,N ‚àà Œõ. This is absurd by Corollary 8.4.4. ‚ú∑
To state the undeidability of =ŒªœÖ we rst need this
Lemma 8.4.7 Let M,N ‚àà Œõ. Then M =ŒªœÖ N i M =Œ≤ N
234
8.4 Undeidability results for
Proof: If M =Œ≤ N , then by onuene of Œª-alulus there exists a term U ‚àà Œõ suh that
M ‚Üí
Œ≤
U and N ‚Üí
Œ≤
U . Then by simulation, M ‚Üí
ŒªœÖ
U and N ‚Üí
ŒªœÖ
U , thus M =ŒªœÖ N . For the
other impliation, if M =ŒªœÖ N , then by onuene of ŒªœÖ there exists a term U
‚Ä≤ ‚àà ŒõtœÖ suh that
M ‚Üí
ŒªœÖ
U ‚Ä≤ and N ‚Üí
ŒªœÖ
U ‚Ä≤. U ‚Ä≤ might b e non pure, thus take U = œÖ(U ‚Ä≤) the œÖ-normal form of U ‚Ä≤,
then we have M ‚Üí
ŒªœÖ
U and N ‚Üí
ŒªœÖ
U and then by soundness M ‚Üí
Œ≤
U and N ‚Üí
Œ≤
U thus M =Œ≤ N .
‚ú∑
As an appliation of the ab ove we have
Corollary 8.4.8 The =ŒªœÖ relation is undeidable.
Proof: Supp ose it is deidable, then by the previous Lemma there would exist an algorithm
for testing M =Œ≤ N for every pair M,N ‚àà Œõ, whih is absurd by Corollary 8.4.3. ‚ú∑
We also have:
Corollary 8.4.9 Given M,N ‚àà Œõ, the problem of deiding if there exists P ‚àà Œõ suh that
P ‚Üí
ŒªœÖ
M and P ‚Üí
ŒªœÖ
N is undeidable.
Proof: ŒªœÖ satises soundness and simulation of the Œ≤-redution (13), then if this problem
were deidable, it would ontradit Corollary 8.4.5. ‚ú∑
We give b elow a variation of the ab ove Corollary to deal in ŒªœÖ with the existene of a ommon
expansion to a pure term given two arbitrary ŒõtœÖ terms:
Corollary 8.4.10 Given M,N ‚àà ŒõtœÖ, the problem of deiding if there exists P ‚àà Œõ suh that
P ‚Üí
ŒªœÖ
M and P ‚Üí
ŒªœÖ
N is undeidable.
Proof: We redue this problem to the one of Corollary 8.4.9. If there were an algorithm for
deiding the existene of suh a term, it ould b e used to deide the former sine Œõ ‚äÜ ŒõtœÖ. ‚ú∑
We prepare for the key prop erty of this setion, whih is Lemma 8.4.18, stating an invariane
stronger than the one handled with go o d ontexts, and then onneting it with an undeidable
problem. The goal an b e seen as the neess ity of taking M = N in Corollary 8.4.10 and still
ask if the problem remains undeidable. I.e., given a term, whether there exists a pure term
reduing to it.
The following tehnial lemmata will b e needed, where we will refer to redutions at given
ontext p ositions in the usual sense.
We rst show this subtle lemma relating expansion in ŒªœÖ with expansion in Œª-alulus.
Lemma 8.4.11 Let M,N ‚àà Œõ. Then there exists P ‚àà ŒõtœÖ suh that P ‚Üí
ŒªœÖ
M and P ‚Üí
ŒªœÖ
N i
there exists P ‚àà Œõ suh that P ‚Üí
Œ≤
M and P ‚Üí
Œ≤
N
235
8.4 Undeidability results for
Proof: The (‚áê) impliation is obvious by the simulation of Œ≤-redution and b eause Œõ ‚äÜ ŒõtœÖ.
To hek the (‚áí) impliation, we use the Pro jetion Lemma (60). Supp ose P ‚Ä≤ ‚àà ŒõtœÖ, P
‚Ä≤ ‚Üí
ŒªœÖ
M
and P ‚Ä≤ ‚Üí
ŒªœÖ
N . Then take P = œÖ(P ‚Ä≤), thus by the Pro jetion Lemma P ‚Üí
Œ≤
œÖ(M) = M and
P ‚Üí
Œ≤
œÖ(N) = N . ‚ú∑
Here we strengthen the notion of go o d ontext.
Denition 8.4.12 A ontext C = C{‚ú∑} is of losure-typ e if C{‚ú∑} = D{(D‚Ä≤{‚ú∑})[s]} with
D,D‚Ä≤ ontexts and s ‚àà ŒõsœÖ.
A ontext C = C{‚ú∑} is of appliation-typ e if C{‚ú∑} = D{(D‚Ä≤{‚ú∑})M} with D,D‚Ä≤ ontexts
and M ‚àà ŒõtœÖ.
A ontext C = C{‚ú∑} is of ‚áë-typ e if C{‚ú∑} = D{M [‚áë (D‚Ä≤{‚ú∑})]} with D a term ontext,
D‚Ä≤ any ontext and M ‚àà ŒõtœÖ. Equivalently, if there exists k ‚â• 1 suh that C{‚ú∑} = D{M [‚áë
k
(D‚Ä≤{‚ú∑}/)]} with D,D‚Ä≤ term ontexts and M ‚àà ŒõtœÖ.
A ontext wil l be al led right if
1. it is not of Œª-type,
2. it is not of ‚áë-type,
3. it is not of appliation-type, and
4. it is not of losure-type.
In other terms, the hole is not under the sop e of a Œª nor ‚áë, nor inside the head of a losure,
nor inside the left-hand side of an appliation.
Remark 8.4.13 Let C{‚ú∑} be a right ontext and a ‚àà ŒõtœÖ, then:
‚Ä¢ aC{‚ú∑} is a right ontext
‚Ä¢ a[C{‚ú∑}/] is a right ontext
Denition 8.4.14 We wil l say that in a term M ‚àà ŒõtœÖ a position q ‚àà Pos(M) is to the right
of a position p ‚àà Pos(M) if and only if
‚Ä¢ either there is a sub-term of M whih has the form PQ, and p is a position of M inside
P and q is a position of M inside Q
‚Ä¢ or there is a sub-term of M whih has the form P [s], and p is a position of M inside P
and q is a position of M inside s.
Lemma 8.4.15 Let M ‚àà ŒõtœÖ, let p be the position of a sub-term P of M and let q be the
position of a sub-term Q of M . Then one and only one of the fol lowing statements holds:
236
8.4 Undeidability results for
1. p = q
2. q is to the right of p (equivalently, p = Œ±.1.Œ≤ and q = Œ±.2.Œ≥ for some strings Œ±,Œ≤,Œ≥)
3. p is to the right of q (equivalently, p = Œ±.2.Œ≤ and q = Œ±.1.Œ≥ for some strings Œ±,Œ≤,Œ≥)
4. p is a proper prex of q (equivalently, q = p.Œ± for some non-empty string Œ±)
5. q is a proper prex of p (equivalently, p = q.Œ± for some non-empty string Œ±)
Proof: By a simple ase analysis on strings. ‚ú∑
In the ase that item 2 or 3 holds, we say that p and q are disjoint.
For M ‚àà ŒõtœÖ, we all term positions those p ositions from Pos(M) holding sub-terms of sort
term (but not of sort substitution). For instane, for a term mathing M [‚áë (N/)], 1 and 2.1.1
are term p ositions (the sub-terms are M and N resp etively), but 2 and 2.1 are not. Note that
a ontext will b e a term ontext i the hole is in a term p osition.
Lemma 8.4.16 If in the ontext C the hole has some term position to the right, then C is not
right.
Proof: By indution on the ontext C.
‚Ä¢ If C{‚ú∑} = ‚ú∑, the lemma holds vauously.
‚Ä¢ If C{‚ú∑} = C ‚Ä≤{‚ú∑}b, learly C is not right.
‚Ä¢ If C{‚ú∑} = aC ‚Ä≤{‚ú∑}, by IH C ‚Ä≤ is not right (b eause in C ‚Ä≤ the hole also has some term
p osition to the right), thus C is not right.
‚Ä¢ If C{‚ú∑} = ŒªC ‚Ä≤{‚ú∑}, learly C is not right.
‚Ä¢ If C{‚ú∑} = C ‚Ä≤{‚ú∑}[s], learly C is not right.
‚Ä¢ If C{‚ú∑} = a[C ‚Ä≤{‚ú∑}], by IH C ‚Ä≤ is not right (b eause in C ‚Ä≤ the hole also has some term
p osition to the right), thus C is not right.
‚ú∑
Now the tehnial results:
Lemma 8.4.17 (invariane of ‚áë ‚àí/ in a right ontext) Let C be a right ontext, B,M,P ‚àà
ŒõtœÖ, and k ‚â• 1, suh that B ‚ÜíŒªœÖ C{M [‚áë
k (P/)]}.
Then there exist a right ontext C ‚Ä≤ terms M ‚Ä≤, P ‚Ä≤ ‚àà ŒõtœÖ and k
‚Ä≤ ‚â• 1 suh that
B = C ‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]}, and suh that P ‚Ä≤ ‚Üí
ŒªœÖ
P 1 .
1
Atually one an ensure that P ‚Ä≤ ‚Üí=ŒªœÖ P i.e. no more than 1 step.
237
8.4 Undeidability results for
Proof: By indution on the ontext C. Let us all e = M [‚áëk (P/)]. We will not sp eify whih
M ‚Ä≤, P ‚Ä≤, k‚Ä≤ would b e taken when the hoie is obvious having hosen C ‚Ä≤.
‚Ä¢ If C{‚ú∑} = ‚ú∑, then
 If the redution is at the ro ot of B, then we analyze eah ŒªœÖ-rule:
‚àó (Beta), it is imp ossible sine a[b/] do es not math e b eause k ‚â• 1.
‚àó (App), it is imp ossible sine a[s]b[s] do es not math e.
‚àó (Lam), it is imp ossible sine Œª(a[‚áë (s)]) do es not math e.
‚àó (Fvar), then take C ‚Ä≤{‚ú∑} = 1[‚ú∑/] whih is a right ontext by Remark 8.4.13, and
the result follows.
‚àó (Rvar), it is imp ossible sine n do es not math e.
‚àó (FvarLift), it is imp ossible sine 1 do es not math e.
‚àó (RvarLift), it is imp ossible sine n[s][‚Üë] do es not math e.
‚àó (VarShift), it is imp ossible sine n+ 1 do es not math e.
 If the redution is internal in B:
‚àó B = a‚Ä≤b ‚Üí ab = e with a‚Ä≤ ‚Üí a, it annot happ en sine ab do es not math a
losure.
‚àó B = ab‚Ä≤ ‚Üí ab = e with b‚Ä≤ ‚Üí b, it annot happ en either for the same reason.
‚àó B = Œªa‚Ä≤ ‚Üí Œªa = e with a‚Ä≤ ‚Üí a, it annot happ en sine Œªa do es not math a
losure.
‚àó B = a‚Ä≤[s] ‚Üí a[s] = e with a‚Ä≤ ‚Üí a, then a = M and s =‚áëk (P/), so take
C ‚Ä≤{‚ú∑} = ‚ú∑ whih is right.
‚àó B = a[s‚Ä≤] ‚Üí a[s] = e with s‚Ä≤ ‚Üí s, then a = M and s‚Ä≤ =‚áëk (P ‚Ä≤/) with P ‚Ä≤ ‚Üí P , so
take again C ‚Ä≤{‚ú∑} = ‚ú∑ whih is right.
‚Ä¢ If C{‚ú∑} 6= ‚ú∑, then
 If the redution is at the ro ot of B, then we analyze eah ŒªœÖ-rule:
‚àó for rule (Œªa)b‚ÜíBeta a[b/], the hole should b e in b sine C is right, thus b = D{e},
for D a right ontext; take C ‚Ä≤{‚ú∑} = (Œªa)D{‚ú∑} whih is right by Remark 8.4.13
and the result follows.
‚àó for rule (ab)[s] ‚ÜíApp a[s]b[s], the hole should b e in the rightmost s (otherwise the
ontext would not b e right), and then the only p ossibility is that there exists N
suh that s = N/ with the hole in N (otherwise, if s =‚áëd (N/) with d ‚â• 1, C{‚ú∑}
would not b e right), so take C ‚Ä≤{‚ú∑} = (ab)[D{‚ú∑}/] where D is a right ontext
suh that N = D{e}, then C ‚Ä≤ is right by Remark 8.4.13 and the result follows.
238
8.4 Undeidability results for
‚àó for rule (Œªa)[s] ‚ÜíLam Œª(a[‚áë (s)]), whatever p osition has the hole, C would not b e
right so this ase is disarded
‚àó for rule 1[a/] ‚ÜíFvar a, take C
‚Ä≤{‚ú∑} = 1[C{‚ú∑}/] whih is right by Remark 8.4.13.
‚àó for rule (n + 1)[a/] ‚ÜíRvar n, the result holds vauously sine n do es not math
C{e}.
‚àó for rule 1[‚áë (s)] ‚ÜíRvar 1, the result holds vauously sine 1 do es not math C{e}.
‚àó for rule (n + 1)[‚áë (s)] ‚ÜíRvar n[s][‚Üë], the hole annot b e lo ated in n sine n do es
not math C{e}, nor in s for C would not b e right, neither the hole an b e at the
p osition of n[s] sine again C would not b e right, thus this ase is disarded.
‚àó for rule n[‚Üë] ‚ÜíVarShift n+1, the result holds vauously sine n+1 do es not math
C{e}.
 If the redution is internal in B:
‚àó for B = a‚Ä≤b ‚ÜíŒªœÖ ab = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, then the hole must b e lo ated in
b (otherwise C would not b e right). Then there is a right ontext D suh that
b = D{e}. Take C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} whih is right by Remark 8.4.13, and the result
follows.
‚àó for B = ab‚Ä≤ ‚ÜíŒªœÖ ab = C{e} where b
‚Ä≤ ‚ÜíŒªœÖ b, then as b efore the hole must b e
lo ated in b (otherwise C would not b e right). Then there is a right ontext D suh
that b = D{e}. By IH, there exists a right ontext D‚Ä≤ suh that b‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]} for M ‚Ä≤, P ‚Ä≤ ‚àà ŒõtœÖ and k
‚Ä≤ ‚â• 1 with P ‚Ä≤ ‚Üí
ŒªœÖ
P . Take C ‚Ä≤{‚ú∑} = aD‚Ä≤{‚ú∑} whih
is right by Remark 8.4.13 and the result follows.
‚àó for B = Œªa‚Ä≤ ‚ÜíŒªœÖ Œªa = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, it annot happ en b eause C would
not b e right.
‚àó for B = a‚Ä≤[s] ‚ÜíŒªœÖ a[s] = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, then the hole must b e lo ated in
s (otherwise C would not b e right). Then s annot b e ‚áë (s‚Ä≤) for any substitution
s‚Ä≤ sine C is right, thus s = R/ for some term R thus R = D{e} for some right
ontext D. Take C ‚Ä≤{‚ú∑} = a‚Ä≤[D{‚ú∑}/] whih is right by Remark 8.4.13 and the
result follows.
‚àó for B = a[s‚Ä≤] ‚ÜíŒªœÖ a[s] = C{e} where s
‚Ä≤ ‚ÜíŒªœÖ s, then as b efore the hole must b e
lo ated in s (otherwise C would not b e right), and s annot b e ‚áë (s‚Ä≤‚Ä≤) for any
substitution s‚Ä≤‚Ä≤ sine the hole is in s and C is right, thus s = R/ for some term R,
and sine s‚Ä≤ ‚ÜíŒªœÖ s, there exists R
‚Ä≤
suh that s‚Ä≤ = R‚Ä≤/ with R‚Ä≤ ‚ÜíŒªœÖ R, thus by IH
R‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]} with D‚Ä≤ right and P ‚Ä≤ ‚Üí
ŒªœÖ
P , so take C ‚Ä≤{‚ú∑} = a[D‚Ä≤{‚ú∑}/]
whih is right by Remark 8.4.13 and the result follows.
‚ú∑
239
8.4 Undeidability results for
Lemma 8.4.18 (invariane of ‚áë ‚àí/ in an appliation of right ontexts) Let C be a any
ontext, and let C1, C2 be right ontexts, B,M,N, P,Q ‚àà Œõ
t
œÖ, and k, r ‚â• 1, suh that B ‚ÜíŒªœÖ
C{C1{M [‚áë
k (P/)]}C2{N [‚áë
r (Q/)]}}, where the redution is not an (App)-step at the position
of ‚ú∑ in C{‚ú∑}.
In other words, we assume it is not the ase that B = C{(ab)[s]} for some terms a, b and
substitution s suh that (ab)[s] ‚ÜíApp C1{M [‚áë
k (P/)]}C2{N [‚áë
r (Q/)]} this being a redution at
the root.
Then there exist a ontext C ‚Ä≤, right ontexts C ‚Ä≤1, C
‚Ä≤
2, terms M
‚Ä≤, N ‚Ä≤, P ‚Ä≤, Q‚Ä≤ ‚àà ŒõtœÖ and k
‚Ä≤, r‚Ä≤ ‚â• 1
suh that B = C ‚Ä≤{C ‚Ä≤1{M
‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]}C ‚Ä≤2{N
‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]}}, and suh that P ‚Ä≤ ‚Üí
ŒªœÖ
P and Q‚Ä≤ ‚Üí
ŒªœÖ
Q1 .
Proof: By indution on the ontext C. Call e = C1{M [‚áë
k (P/)]}C2{N [‚áë
r (Q/)]}. As in the
previous lemma, we will not give M ‚Ä≤, N ‚Ä≤, P ‚Ä≤, Q‚Ä≤, k‚Ä≤, r‚Ä≤, C ‚Ä≤1, C
‚Ä≤
2 when the hoie is lear one C
‚Ä≤
has b een hosen.
‚Ä¢ If C{‚ú∑} = ‚ú∑, then
 If the redution takes plae at the ro ot of B, then we analyze eah ŒªœÖ-rule:
‚àó (Beta), it is imp ossible sine a[b/] do es not math an appliation.
‚àó (App), it is imp ossible by hyp othesis: an (App)-step is not done at the ro ot, whih
is the p osition of the hole of C.
‚àó (Lam), it is imp ossible sine Œª(a[‚áë (s)]) do es not math an appliation.
‚àó (Fvar), then take C ‚Ä≤{‚ú∑} = 1[C{‚ú∑]/} and the result follows.
‚àó (Rvar), it is imp ossible sine n do es not math an appliation.
‚àó (FvarLift), it is imp ossible sine 1 do es not math an appliation.
‚àó (RvarLift), it is imp ossible sine n[s][‚Üë] do es not math an appliation.
‚àó (VarShift), it is imp ossible sine n+ 1 do es not math an appliation.
 If the redution is internal in B:
‚àó ase B = a‚Ä≤b ‚ÜíŒªœÖ ab, with a
‚Ä≤ ‚ÜíŒªœÖ a, then ab = e thus a = C1{M [‚áë
k (P/)]} and
b = C2{N [‚áë
r (Q/)]}. By Lemma 8.4.17, there exists C ‚Ä≤1 a right ontext, M
‚Ä≤
, k‚Ä≤ ‚â• 1
and P ‚Ä≤ suh that a‚Ä≤ = C ‚Ä≤1{M
‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]} and P ‚Ä≤ ‚Üí
ŒªœÖ
P , thus take C ‚Ä≤{‚ú∑} = ‚ú∑.
‚àó ase B = ab‚Ä≤ ‚ÜíŒªœÖ ab, with b
‚Ä≤ ‚ÜíŒªœÖ b, then analogously ab = e thus
a = C1{M [‚áë
k (P/)]} and b = C2{N [‚áë
r (Q/)]}. By Lemma 8.4.17, there exists C ‚Ä≤2
a right ontext, N ‚Ä≤, r‚Ä≤ ‚â• 1 and Q‚Ä≤ suh that b‚Ä≤ = C ‚Ä≤2{N
‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]} and Q‚Ä≤ ‚Üí
ŒªœÖ
Q,
thus take C ‚Ä≤{‚ú∑} = ‚ú∑.
‚àó ase B = Œªa‚Ä≤ ‚ÜíŒªœÖ Œªa with a
‚Ä≤ ‚ÜíŒªœÖ a is disarded sine Œªa do es not math an
appliation.
1
Atually one an ensure that P ‚Ä≤ ‚Üí=ŒªœÖ P and Q
‚Ä≤ ‚Üí=ŒªœÖ Q, i.e. 0 or 1 step for b oth redutions.
240
8.4 Undeidability results for
‚àó ase B = a‚Ä≤[s] ‚ÜíŒªœÖ a[s] with a
‚Ä≤ ‚ÜíŒªœÖ a is disarded sine a[s] do es not math an
appliation.
‚àó ase B = a[s‚Ä≤] ‚ÜíŒªœÖ a[s] with s
‚Ä≤ ‚ÜíŒªœÖ s is disarded sine a[s] do es not math an
appliation.
‚Ä¢ If C{‚ú∑} 6= ‚ú∑, then
 If the redution is at the ro ot of B, then we analyze eah ŒªœÖ-rule:
‚àó for rule (Œªa)b ‚ÜíBeta a[b/], then whereve r the hole is lo ated, the result follows.
For example, if the hole is in b, then b = D{e}, for D a ontext; take C ‚Ä≤{‚ú∑} =
(Œªa)D{‚ú∑} and the result follows.
‚àó for rule (ab)[s] ‚ÜíApp a[s]b[s], whereve r the hole is lo ated, the result follows for
an appropriate ontext C ‚Ä≤, namely:
1. if the hole is in the rst s, take C ‚Ä≤{‚ú∑} = (ab)[D{‚ú∑}] where s = D{e}
2. if the hole is in the seond s, take C ‚Ä≤ as ab ove
3. if the hole is in a, take C ‚Ä≤{‚ú∑} = (D{‚ú∑}b)[s] where a = D{e}
4. if the hole is in b, take C ‚Ä≤{‚ú∑} = (aD{‚ú∑})[s] where b = D{e}
5. the hole annot b e at the p osition of a[s] sine a[s] do es not math an appliation
6. the hole annot b e at the p osition of b[s] sine b[s] do es not math an appliation
either
7. the hole annot b e at the p osition of a[s]b[s] otherwise C{‚ú∑} = ‚ú∑ whih orre-
sp onds to a previously analyzed ase
‚àó for rule (Œªa)[s] ‚ÜíLam Œª(a[‚áë (s)]), again whereve r the hole is lo ated, the result
follows for an appropriate ontext C ‚Ä≤.
‚àó for rule 1[a/] ‚ÜíFvar a, take C
‚Ä≤{‚ú∑} = 1[C{‚ú∑}/].
‚àó for rule (n + 1)[a/] ‚ÜíRvar n, the result holds vauously sine n do es not math
C{e}.
‚àó for rule 1[‚áë (s)] ‚ÜíFvarLift 1, the result holds vauously sine 1 do es not math
C{e}.
‚àó for rule (n+1)[‚áë (s)] ‚ÜíRvarLift n[s][‚Üë], then whereve r the hole is lo ated, the result
follows for an appropriate ontext C ‚Ä≤.
‚àó for rule n[‚Üë] ‚ÜíVarShift n+1, the result holds vauously sine n+1 do es not math
C{e}.
 If the redution is internal in B:
‚àó for B = a‚Ä≤b‚ÜíŒªœÖ ab = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, then we have:
1. if the hole is lo ated in b then there is a ontext D suh that b = D{e}. Take
C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} and the result follows.
241
8.4 Undeidability results for
2. if the hole is in a then there is a ontext D suh that a = D{e}. By IH, there
exists a ontext D‚Ä≤, right ontexts C ‚Ä≤1 and C
‚Ä≤
2, terms M
‚Ä≤, N ‚Ä≤, P ‚Ä≤, Q‚Ä≤ and k‚Ä≤, r‚Ä≤ ‚â• 1
suh that a‚Ä≤ = D‚Ä≤{C ‚Ä≤1{M
‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]}C ‚Ä≤2{N
‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]}}, P ‚Ä≤ ‚Üí
ŒªœÖ
P and Q‚Ä≤ ‚Üí
ŒªœÖ
Q.
Take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}b and the result follows.
‚àó for B = ab‚Ä≤ ‚ÜíŒªœÖ ab = C{e} where b
‚Ä≤ ‚ÜíŒªœÖ b, it is analogous to the previous ase.
‚àó for B = Œªa‚Ä≤ ‚ÜíŒªœÖ Œªa = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, then ‚ú∑ ‚àà a and by IH there exists a
ontext D suh that a‚Ä≤ = D‚Ä≤{M ‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]N ‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]} for M ‚Ä≤, N ‚Ä≤, P ‚Ä≤, Q‚Ä≤ ‚àà ŒõtœÖ
and k‚Ä≤, r‚Ä≤ ‚â• 1 with P ‚Ä≤ ‚Üí
ŒªœÖ
P and Q‚Ä≤ ‚Üí
ŒªœÖ
Q. Take C ‚Ä≤{‚ú∑} = ŒªD‚Ä≤{‚ú∑} and the result
follows.
‚àó for B = a‚Ä≤[s] ‚ÜíŒªœÖ a[s] = C{e} where a
‚Ä≤ ‚ÜíŒªœÖ a, then we have:
1. if the hole is lo ated in s then s annot b e ‚áën (‚Üë) for some n ‚â• 0, so s =‚áën
(R/) for some term R and n ‚â• 0, thus R = D{e} for some ontext D. Take
C ‚Ä≤{‚ú∑} = a‚Ä≤[‚áën (D{‚ú∑}/)] and the result follows.
2. if the hole is lo ated in a then a = D{e} for some ontext D. By IH there
exist a ontext D‚Ä≤, right ontexts C ‚Ä≤1 and C
‚Ä≤
2, terms M
‚Ä≤, N ‚Ä≤, P ‚Ä≤, Q‚Ä≤ and k‚Ä≤, r‚Ä≤ ‚â• 1
suh that a‚Ä≤ = D‚Ä≤{C ‚Ä≤1{M
‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]}C ‚Ä≤2{N
‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]}}, P ‚Ä≤ ‚Üí
ŒªœÖ
P and Q‚Ä≤ ‚Üí
ŒªœÖ
Q.
Take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}[s] and the result follows.
‚àó for B = a[s‚Ä≤] ‚ÜíŒªœÖ a[s] = C{e} where s
‚Ä≤ ‚ÜíŒªœÖ s, then s annot b e ‚áë
n (‚Üë) for some
n ‚â• 0, so s =‚áën (R/) for some term R and n ‚â• 0, and sine s‚Ä≤ ‚ÜíŒªœÖ s then there
exists R‚Ä≤ suh that s‚Ä≤ =‚áën (R‚Ä≤/) with R‚Ä≤ ‚ÜíŒªœÖ R, thus:
1. if the hole is lo ated in s then, sine it is in a term p osition, it should b e lo ated
in R, then by IH R‚Ä≤ = D‚Ä≤{C ‚Ä≤1{M
‚Ä≤[‚áëk
‚Ä≤
(P ‚Ä≤/)]}C ‚Ä≤2{N
‚Ä≤[‚áër
‚Ä≤
(Q‚Ä≤/)]}} with C ‚Ä≤1 and
C ‚Ä≤2 right ontexts, P
‚Ä≤ ‚Üí
ŒªœÖ
P and Q‚Ä≤ ‚Üí
ŒªœÖ
Q, so take C ‚Ä≤{‚ú∑} = a[‚áën (D‚Ä≤{‚ú∑}/)] and
the result follows.
2. if the hole is lo ated in a then there is a ontext D suh that a = D{e}. Take
C ‚Ä≤{‚ú∑} = D{‚ú∑}[s‚Ä≤] and the result follows.
‚ú∑
Note that the only ŒªœÖ-redution whih annot take plae is an (App)-step in the hole of the
ontext C (but (App)-steps at other p ositions as well as other rules everywh e re are allowed).
Atually Lemmas 8.4.17 and 8.4.18 an b e stated to hold for k = r = k‚Ä≤ = r‚Ä≤ = 1 but the
pro of is almost the same. The ase k = 1 is enough to prove Prop osition 8.4.19 b elow.
We an state now a key prop erty whih relates the ommon expansion problem with the
problem of expansion to a pure term:
Prop osition 8.4.19 Let P,Q ‚àà Œõ. Then the term Œª(1[‚áë (P/)]1[‚áë (Q/)]) expands to a pure
term i ‚àÉR ‚àà Œõ R‚Üí
Œ≤
P and R‚Üí
Œ≤
Q.
242
8.4 Undeidability results for
Proof:
‚Ä¢ (‚áê) Supp ose there exists suh a term R. Then by simulation of ŒªœÖ we have that R‚Üí
ŒªœÖ
P
and R‚Üí
ŒªœÖ
Q, therefore
Œª(1[‚áë (P/)]1[‚áë (Q/)])
‚Üë ‚àó ŒªœÖ
Œª(1[‚áë (R/)]1[‚áë (R/)])
‚Üë (App)
Œª((11)[‚áë (R/)])
‚Üë (Lam)
(Œª11)[R/]
‚Üë (Beta)
(ŒªŒª11)R
whih is learly a pure term.
‚Ä¢ (‚áí) Let t = Œª(1[‚áë (P/)]1[‚áë (Q/)]). This term learly satises the onditions of Lemma
8.4.18, i.e. t = C{C1{M [‚áë
k (P )]}C2{N [‚áë
r (Q)]}} where C1{‚ú∑} = C2{‚ú∑} = ‚ú∑, C{‚ú∑} =
Œª‚ú∑ and k = r = 1, then C1 and C2 are learly right ontexts.
By hyp othesis there exists a pure term B suh that B ‚Üí
ŒªœÖ
t, thus there exist t1 ‚àà Œõ,
t2, . . . , tm ‚àà Œõ
t
œÖ suh that B = t1 ‚ÜíŒªœÖ t2 ‚ÜíŒªœÖ . . .‚ÜíŒªœÖ tm = t.
But sine B is pure, n‚áë(B) = 0 thus, iterating Lemma 8.4.18 it should exist 1 ‚â§ i <
m suh that ti ‚ÜíApp ti+1 where this redution is at the p osition of ‚ú∑ in C
(i){‚ú∑} the
ontext orresp onding to term ti (otherwise the onlusion of the Lemma would imply
that n‚áë(B) > 0). Take i = the maximum of suh values, that is the rst i satisfying this
ondition ounting from the rightmost term in the derivation (i.e. t).
This means that (within this derivation) there exist terms U, V , right ontexts D,E and
terms R‚Ä≤, R‚Ä≤‚Ä≤ suh that
ti+1 = C
(i+1){D{U [‚áëk (R‚Ä≤/)]}E{V [‚áër (R‚Ä≤‚Ä≤/)]}}
where R‚Ä≤ ‚Üí
ŒªœÖ
P and R‚Ä≤‚Ä≤ ‚Üí
ŒªœÖ
Q, and C(i+1) = C(i) is the same ontext of the term ti =
C(i){(ab)[s]}.
Mathing the (App)-rule pattern, there are terms a, b and a substitution s suh that
a[s] = D{U [‚áëk (R‚Ä≤/)]} and b[s] = E{V [‚áër (R‚Ä≤‚Ä≤/)]}.
We will show that R‚Ä≤ = R‚Ä≤‚Ä≤. We reason aording to D and E and, in some ases, the
p osition of the holes with resp et to the terms a[s] and b[s]:
 D = ‚ú∑ and E = ‚ú∑: then ‚áëk (R‚Ä≤/) = s =‚áër (R‚Ä≤‚Ä≤/) thus U = V , k = r and R‚Ä≤ = R‚Ä≤‚Ä≤.
243
8.4 Undeidability results for
 D = ‚ú∑ and E 6= ‚ú∑: a[s] = U [‚áëk (R‚Ä≤/)], then a = U and s =‚áëk (R‚Ä≤/). Sine the hole
of E is in b[s] = E{V [‚áër (R‚Ä≤‚Ä≤/)]}, this hole annot b e lo ated in b (sine E is right),
therefore it should b e in s =‚áëk (R‚Ä≤/) and then in R‚Ä≤. Sine k ‚â• 1, this ontradits
the fat that E is right. So this will not b e the ase.
 D 6= ‚ú∑ and E = ‚ú∑ is analogous to the previous ase: b[s] = V [‚áër (R‚Ä≤‚Ä≤/)], then b = V
and s =‚áër (R‚Ä≤‚Ä≤/). Sine the hole of D is in a[s] = D{U [‚áëk (R‚Ä≤/)]}, this hole annot
b e lo ated in a (sine D is right), therefore it should b e in s =‚áër (R‚Ä≤‚Ä≤/) and then in
R‚Ä≤‚Ä≤. Sine r ‚â• 1, this ontradits the fat that D is right. So this will not b e the ase
either.
 D 6= ‚ú∑ and E 6= ‚ú∑, and either the hole of D is lo ated inside a or the hole of E is
lo ated inside b, but this annot happ en b eause b oth D and E are right ontexts, so
this ase is also disarded.
 D 6= ‚ú∑ and E 6= ‚ú∑, and the hole of D is lo ated inside the losure of a[s] and the hole
of E is lo ated inside the losure of b[s], in other words b oth holes are lo ated inside
the substitution s. Reall a[s] = D{U [‚áëk (R‚Ä≤/)]} and b[s] = E{V [‚áër (R‚Ä≤‚Ä≤/)]}. We will
show that the p osition of these two holes need to b e the same. Aording to Lemma
8.4.15 the following ases an o ur:
‚àó either b oth holes are in exatly the same p osition in s, then we are done
‚àó or b oth holes are in disjoint p ositions in s, then the p osition of one of the holes has
a term p osition to the right (the p osition of the other hole), therefore by Lemma
8.4.16 the orresp onding ontext would not b e right, whih is absurd.
‚àó or the p osition of E's hole is a prop er prex of the p osition of D's hole, i.e. D's
hole is lo ated inside E's hole p osition. This means that D's hole is inside the
sub-term V [‚áër (R‚Ä≤‚Ä≤/)], then there are three ases to hek:
1. the p osition of D's hole is the p osition of V [‚áër (R‚Ä≤‚Ä≤/)], but this will not b e
the ase sine the prex was supp osed to b e prop er (in other terms, this ase
orresp onds to a previously analyzed one in whih b oth holes' p ositions oinide)
2. the p osition of D's hole is inside V , but this is a losured term and then D
would not b e right, so this annot happ en
3. the p osition of D's hole is inside ‚áër (R‚Ä≤‚Ä≤/). Sine D is a term ontext, the hole's
p osition needs to b e in R‚Ä≤‚Ä≤. This p osition is under the sop e of a ‚áë (sine r ‚â• 1),
whih is absurd sine D is right.
‚àó or the p osition of D's hole is a prop er prex of the p osition of E's hole, i.e. E's
hole is lo ated inside D's hole p osition. This ase is analogous to the previous one
exhanging the roles of D and E.
244
8.4 Undeidability results for
Then the only p ossibility is that the two holes have the same p osition in s. This
entails U = V , k = r and R‚Ä≤ = R‚Ä≤‚Ä≤.
Now we have that R‚Ä≤ = R‚Ä≤‚Ä≤, R‚Ä≤ ‚Üí
ŒªœÖ
P and R‚Ä≤ ‚Üí
ŒªœÖ
Q. Then, sine P and Q are pure, by
Lemma 8.4.11 there exists a pure term R suh that R‚Üí
Œ≤
P and R‚Üí
Œ≤
Q.
‚ú∑
Remark that the ontext C in Lemma 8.4.18 is just any ontext and do es not need to have
any sp eial requirement. One of the triks of this pro of is initially taking P and Q not arbitrary
terms but pure terms. Then, regardless if some of their expansions within the derivation (i.e.
some previous terms Rj in the losures ‚áë
kj (Rj/)) are not pure, the impliation still holds.
Another triky part is the fat that in eah step the ontexts are right, so this allows to keep
trak of the  terms under slash inside the losures from one term to the previous one, and this
enables to build a derivation from the pure term R to the two arbitrary terms P and Q initially
taken.
We now state the main result of this setion:
Corollary 8.4.20 The set ŒõpœÖ is reursively enumerable but non-reursive. Thus, there is no
algorithm for deiding, given a term M ‚àà ŒõtœÖ, whether it expands to a pure term.
Proof: It is learly reursively enumerable sine a non-terminating algorithm ould, from
syntax, enumerate all pure terms and their reduts by systematially applying all redution
steps from these terms.
If it were reursive, by Prop osition 8.4.19 we ould test, given terms M,N ‚àà Œõ, whether there
exists P ‚àà Œõ suh that P ‚Üí
Œ≤
M and P ‚Üí
Œ≤
N , whih is undeidable by Corollary 8.4.5. ‚ú∑
One of our initial goals when studying terms with pure expansion was to provide inferene
rules whih allow to haraterize the syntax of these terms, sp eially ontext-free rules in the
usual way. In other terms, to have a syntax for ŒõpœÖ, the ŒªœÖ
p
term set, in the same way that we
have a syntax for ŒªœÖ-terms. We now prove that this is not p ossible.
Corollary 8.4.21 The set ŒõpœÖ is not a ontext-sensitive (type 1) language (in partiular, not a
ontext-free language), i.e. there is no ontext-sensitive grammar generating those terms.
Proof: All ontext-sensitive languages are reursive, hene by Corollary 8.4.20 ŒõpœÖ is not
ontext-sensitive. ‚ú∑
245
8.4 Undeidability results for
8.4.1 Disussion
We p oint that the pro of annot b e simplied by using the argument of Sott's theorem
applied to ŒªœÖ. In other words, even if one ould prove a version of this theorem for ŒªœÖ (and
for most other go o d aluli), it is not plausible to use it for showing that ŒõpœÖ is non-reursive,
as justied next. Sott's theorem for ŒªœÖ an b e niely formulated as follows:
Prop osition 8.4.22 Let C ‚äÜ ŒõtœÖ suh that ‚àÖ 6= C ‚à© Œõ 6= Œõ and C is losed under =ŒªœÖ. Then
C is non-reursive. (Note: the ondition C ‚à©Œõ 6= Œõ an be replaed by C 6= ŒõtœÖ, whih with the
other onditions implies the former)
Proof: Take D = C ‚à©Œõ. We prove that D is losed under =Œ≤. Let a ‚àà D and a =Œ≤ b, then by
Lemma 8.4.7 a =ŒªœÖ b, thus, sine C is losed under =ŒªœÖ, b ‚àà C, and sine b ‚àà Œõ, b ‚àà D. Now
that D is losed under =Œ≤, the hyp othesis of the lassial Sott's theorem is fullled, therefore
D is non-reursive.
Last, if C were reursive, sine Œõ is reursive their intersetion D would b e reursive, ontra-
diting the ab ove statement. Therefore, C is non-reursive.1 ‚ú∑
But then the set ŒõpœÖ do es not fulll the ondition of b eing losed under =ŒªœÖ required by
Prop osition 8.4.22, as the following extremely simple example indiates: 1[‚Üë] ‚ÜíŒªœÖ 2 thus 1[‚Üë
] =ŒªœÖ 2, learly 2 ‚àà Œõ
p
œÖ but 1[‚Üë] /‚àà Œõ
p
œÖ by Corollary 8.3.9.
Therefore it is not p ossible to show the non-reursiveness of ŒõpœÖ diretly from Prop osition
8.4.22. This justies the previous analysis.
8.4.2 Prop erties of ŒªœÖp
We now give a straightforward haraterization of the terms ŒõpœÖ. By the results of the previous
subsetions we an only prop ose a pseudo-syntax for the set ŒõpœÖ sine it is imp ossible to give
a ontext-sensitive (let alone a ontext-free) syntax. We will just give a nite set of inferene
rules based on the alulus syntax and rules altogether, desribing the set of terms ŒõpœÖ.
For every rule l‚Üí r in ŒªœÖ, we write it as the rule
l
r
onforming, together with ompatibility rules, an inferene system as follows:
1
Note that if instead of ‚àÖ 6= C ‚à©Œõ 6= Œõ one requires œÖ(C) to b e a prop er subset of ŒõtœÖ , with C losed under
=ŒªœÖ , the argument fails when trying to prove that œÖ(C) is reursive if C were reursive.
246
8.4 Undeidability results for
Denition 8.4.23 (Rules desribing ŒõpœÖ) Let P ‚äÜ Œõ
t
œÖ be the smal lest set of ŒªœÖ-terms losed
under the fol lowing rules in whih C denotes any ŒªœÖ-ontext:
m ‚â• 1
(var)
m ‚àà P
a ‚àà P
(abs)
Œªa ‚àà P
a ‚àà P b ‚àà P
(app)
ab ‚àà P
a ‚àà P a‚ÜíŒªœÖ b
(MP )
b ‚àà P
So with a modus ponens-like (MP) rule and appropriate ontext handling rules the set ŒõpœÖ an
b e generated. There is an analogy with logi pro ofs taking as an axiom shema the (var)-rule
and, as inferene rule shemas, rules (abs), (app) and (MP). This is an almost straightforward
inferene system for ŒõpœÖ, in the sense that for every term t ‚àà Œõ
p
œÖ there exists a derivation tree
of t.
Prop osition 8.4.24 P = ŒõpœÖ.
Proof: P ‚äÜ ŒõpœÖ is proved by indution on the derivation of M ‚àà P.
ŒõpœÖ ‚äÜ P is proved by indution on the length of the derivation of N ‚Üí
ŒªœÖ
M with N ‚àà Œõ. ‚ú∑
Corollary 8.4.25 states that ŒªœÖp with less terms enjoys the same go o d prop erties of its parent
alulus ŒªœÖ.
Corollary 8.4.25 (Preservation of ŒªœÖ prop erties) The ŒªœÖp alulus satises the fol lowing
properties:
1. Simulation of the Œ≤-redution
2. Soundness
3. Conuene
4. PSN
5. Subjet redution
6. Expansion to pure terms
7. SN of typable terms
Proof:
1. If A‚ÜíŒ≤ B with A,B ‚àà Œõ, then A‚Üí
ŒªœÖ
B. Then B ‚àà ŒõpœÖ, so A‚Üí
ŒªœÖp
B and we are done.
2. Trivial sine ŒªœÖp is a sub-ARS of ŒªœÖ, whih is sound.
247
8.5 Expansion in
3. If A‚Üí
ŒªœÖp
B and A‚Üí
ŒªœÖp
C then by onuene of ŒªœÖ there exists a D ‚àà ŒõtœÖ suh that B ‚Üí
ŒªœÖ
D
and C ‚Üí
ŒªœÖ
D. Sie A ‚àà ŒõpœÖ, then B ‚àà Œõ
p
œÖ and thus D ‚àà Œõ
p
œÖ. In other words, ŒªœÖ
p
is CR for
b eing a subsys te m of ŒªœÖ.
4. From the fat that ŒªœÖ satises PSN.
5. This is an immediate onseque n  e of ŒªœÖp ‚äÇ ŒªœÖ.
6. Immediate by denition.
7. ŒªœÖp admits simply-typing with the same typing rules of ŒªœÖ (60). If M ‚àà ŒõpœÖ is a simply-
typ ed term then it is also simply-typ ed in ŒõtœÖ, thus M ‚àà SNŒªœÖ, and therefore sine
ŒªœÖp ‚äÇ ŒªœÖ, M ‚àà SNŒªœÖp .
‚ú∑
As it an b e seen, most prop erties are diretly inherited from ŒªœÖ using the fat that ŒªœÖp is
a sub-alulus.
It is obvious that the ŒªœÖp terms set annot b e extended with any other ŒªœÖ-term without
losing the expansion prop erty. Also, for b eing a sub-alulus, this set annot b e shortened.
One of the disadvantages of this new alulus is that the term set is not losed under the sub-
term relation. In other words, it is easy to nd a ŒªœÖ-term M suh that for some sub-term N
of M , N /‚àà ŒõpœÖ. Take for example N = 1[‚áë (1/)] and M = ŒªN .
8.5 Expansion in Œªs
In this setion we study the expansion problem for Œªs. Although in the following setion we
transfer the previous deidability results from ŒªœÖ to Œªs (and the reader may jump to it sine
it is indep endent of this setion), the same tehnique as b efore an b e used, with a notion of
go o d ontext in Œªs, to show diretly that in this alulus there are terms whih do not expand
to pure terms. This is done b elow, and the interested reader an nd the tehnial pro ofs in
the App endix at the end of this hapter.
Denition 8.5.1 (Œªs-terms with pure expansion) Given M ‚àà Œõs we say that M has a
pure expansion if there exists N ‚àà Œõ suh that N ‚Üí
Œªs
M . Let Œõps = {M ‚àà Œõs | M has a pure
expansion}.
As b efore, these terms form a sub-alulus of Œªs. So we will see that this sub-ARS is also
prop er.
248
8.5 Expansion in
Denition 8.5.2 For a a term in Œªs we dene the number of œÉ's in a, written nœÉ(a), in the
expeted way:
nœÉ(n) = 0
nœÉ(ab) = nœÉ(a) + nœÉ(b) nœÉ(Œªa) = nœÉ(a)
nœÉ(aœÉ
kb) = nœÉ(a) + nœÉ(b) + 1 nœÉ(œï
i
k(a)) = nœÉ(a)
For a a term in Œªs we dene the number of œï's in a, written nœï(a), in the expeted way:
nœï(n) = 0
nœï(ab) = nœï(a) + nœï(b) nœï(Œªa) = nœï(a)
nœï(aœÉ
kb) = nœï(a) + nœï(b) = nœï(œï
i
k(a)) = nœï(a) + 1
Denition 8.5.3 A ontext C{‚ú∑} in Œªs wil l be al led go o d if it is not of the form C{‚ú∑} =
D{ŒªD‚Ä≤{‚ú∑}} nor of the form C{‚ú∑} = D{(D‚Ä≤{‚ú∑})œÉ1b} with b ‚àà Œõs, D,D
‚Ä≤
ontexts.
As with ŒªœÖ, the reason of identifying these ontexts is the following
Lemma 8.5.4 (invariane of œÉ in go o d ontexts) Let C be a good ontext, B, a, b ‚àà Œõs, k ‚â•
2, suh that B ‚àí‚Üí
Œªs
C{aœÉkb}. Then there exists a good ontext C ‚Ä≤, there exist a‚Ä≤, b‚Ä≤ ‚àà Œõs, and
k‚Ä≤ ‚â• 1 suh that B = C ‚Ä≤{a‚Ä≤œÉk
‚Ä≤
b‚Ä≤} (atual ly k‚Ä≤ = k or k‚Ä≤ = k + 1).
Proof: See the App endix. ‚ú∑
Lemma 8.5.5 (invariane of œï in go o d ontexts) Let C be a good ontext, B, a ‚àà Œõs, i ‚â•
2, k ‚â• 0, suh that B ‚àí‚Üí
Œªs
C{œïik(a)}. Then there exists a good ontext C
‚Ä≤
, there exist a‚Ä≤ ‚àà Œõs
and i‚Ä≤ ‚â• 2 suh that
1. either B = C ‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤)} for some k‚Ä≤ ‚â• 0
2. or B = C ‚Ä≤{a‚Ä≤œÉi
‚Ä≤
b‚Ä≤} for some b‚Ä≤ ‚àà Œõs
Proof: See the App endix. ‚ú∑
As a onseque n  e of the previous two lemmas we have the following
Prop osition 8.5.6 1. If B ‚Üí
Œªs
C{aœÉnb} with n ‚â• 2 and C a good ontext, then there exists
C ‚Ä≤ a good ontext, and there exist a‚Ä≤, b‚Ä≤ ‚àà Œõs and n
‚Ä≤ ‚â• 2 suh that B = C ‚Ä≤{a‚Ä≤œÉn
‚Ä≤
b‚Ä≤}.
2. If B ‚Üí
Œªs
C{œïik(a)} with i ‚â• 2, k ‚â• 0 and C a good ontext, then there exists C
‚Ä≤
a good
ontext, and there exist a‚Ä≤ ‚àà Œõs and i
‚Ä≤ ‚â• 2 suh that
(a) either B = C ‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤)} for some k‚Ä≤ ‚â• 0
(b) or B = C ‚Ä≤{a‚Ä≤œÉi
‚Ä≤
b‚Ä≤} for some b‚Ä≤ ‚àà Œõs.
249
8.6 Undeidability results for
Proof: Both items are proved by indution on the length of the derivation B ‚Üí
Œªs
C{aœÉnb}
using lemmas 8.5.4 and 8.5.5. ‚ú∑
Corollary 8.5.7 In Œªs the terms of the form aœÉnb with n ‚â• 2 and the terms of the form œïik(a)
with i ‚â• 2 and k ‚â• 0 do not expand to pure terms.
Proof: In Prop osition 8.5.6, any expansion of suh a term will have the form B = C ‚Ä≤{a‚Ä≤œÉn
‚Ä≤
b‚Ä≤}
with n‚Ä≤ ‚â• 2 (then nœÉ(B) ‚â• k
‚Ä≤ ‚â• 1), or the form B = C ‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤)} (then nœï(B) ‚â• 1), in either
ase B /‚àà Œõ. ‚ú∑
Reall Denition 8.3.11 in subsetion 8.3.2. As with ŒªœÖ, we have
Prop osition 8.5.8 There is no surjetive good mapping from Œªx to Œªs.
Proof: Analogous to Prop osition 8.3.13. ‚ú∑
8.6 Undeidabil i ty results for Œªs
We now will use the translations T and S b etween ŒªœÖ and Œªs, whih app ear in (47) and p ose
the problem whether they preserve the orresp onding sets of terms with pure expansion.
Denition 8.6.1 We dene the fol lowing translation T : Œõs ‚Üí Œõ
t
œÖ.
T (n) = n
T (ab) = T (a)T (b)
T (Œªa) = ŒªT (a)
T (aœÉnb) = T (a)[‚áën‚àí1 (T (b)/)]
T (œïik(a)) = T (a)[‚áë
k (‚Üë)] . . . [‚áëk (‚Üë)]Ô∏∏ Ô∏∑Ô∏∑ Ô∏∏
i‚àí1
i ‚â• 1, k ‚â• 0
Denition 8.6.2 We dene the fol lowing translation S : ŒõtœÖ ‚Üí Œõs.
S(n) = n
S(ab) = S(a)S(b)
S(Œªa) = ŒªS(a) n ‚â• 0
S(a[‚áën (b/)]) = (S(a))œÉn+1(S(b)) n ‚â• 0
S(a[‚áën (‚Üë)]) = œï2n(S(a)) n ‚â• 0
The following Lemma states that these translations are morphisms b etween the aluli:
Lemma 8.6.3 1. For a, b ‚àà Œõs, if a ‚àí‚Üí
Œªs
b then T (a) ‚Üí
ŒªœÖ
T (b).
250
8.6 Undeidability results for
2. For a, b ‚àà ŒõtœÖ, if a ‚àí‚Üí
ŒªœÖ
b then S(a) ‚Üí
Œªs
S(b).
3. For a, b ‚àà Œõs, if a‚Üí
Œªs
b then T (a) ‚Üí
ŒªœÖ
T (b).
4. For a, b ‚àà ŒõtœÖ, if a‚Üí
ŒªœÖ
b then S(a) ‚Üí
Œªs
S(b).
Proof: Items (1) and (2) are proved by indution on a. Items (3) and (4) are proved by
indution on the length of the derivations using items (1) and (2), resp etively. For details see
(47). ‚ú∑
Lemma 8.6.4 1. For M ‚àà ŒõtœÖ, T (S(M)) = M .
2. For N ‚àà Œõs, S(T (N)) =s N .
Proof:
1. By indution on M .
‚Ä¢ T (S(n)) = T (n) = n
‚Ä¢ T (S(ab)) = T (S(a)S(b)) = T (S(a))T (S(b)) =IH ab
‚Ä¢ T (S(Œªa)) = T (ŒªS(a)) = ŒªT (S(a)) =IH Œªa
‚Ä¢ T (S(a[‚áën (b/)])) = T (S(a)œÉn+1S(b))
= T (S(a))[‚áën+1‚àí1 (T (S(b))/)] =IH a[‚áë
n (b/)]
‚Ä¢ T (S(a[‚áën (‚Üë)])) = T (œï2n(S(a)))
= T (S(a))[‚áën (‚Üë)] =IH a[‚áë
n (‚Üë)]
2. By indution on N (we omit it sine we will not use it).
‚ú∑
So S and T are not inverses of eah other, but T is a pseudo-inverse of S in the sense that
for all a ‚àà Œõs S(T (a)) =s a but not neess arily S(T (a)) = a. Nevertheless this is all what we
need to relate b oth aluli in the ontext of the present goal.
These morphisms b etween ŒªœÖ and Œªs will help to state the orresp onding deidability result
for Œªs-terms by translating Œªs-terms to ŒªœÖ and using the result from setion 8.4. We must say
that using this translation do es not provide a translation of Lemmas 8.3.6 and 8.3.7, hene the
need of Lemmas 8.5.4 and 8.5.5 for Œªs to explore terms not in Œõps. On the other hand, it is
p ossible to translate Corollary 8.4.20 to Œªs as we will see next.
Lemma 8.6.5 The fol lowing statements are equivalent:
1. M ‚àà Œõ
2. M ‚àà Œõs and T (M) = M
251
8.6 Undeidability results for
3. M ‚àà ŒõtœÖ and S(M) = M
4. M ‚àà Œõs and T (M) ‚àà Œõ
5. M ‚àà ŒõtœÖ and S(M) ‚àà Œõ
Proof: Easy. (1)‚áí(2) and (1)‚áí(3) are proved by indution on M . ‚ú∑
Atually we will only need (1)‚áí(2) and (1)‚áí(3).
Lemmas 8.6.3 and 8.6.5 indiate that T and S are go o d mappings b etween b oth aluli. Now
we relate the sets ŒõpœÖ and Œõ
p
s.
Lemma 8.6.6 Let M ‚àà ŒõtœÖ. Then M ŒªœÖ-expands to a pure term i S(M) Œªs-expands to a
pure term. In other words, S(ŒõpœÖ) ‚äÜ Œõ
p
s.
Proof: Supp ose there exists P ‚àà Œõ suh that P ‚Üí
ŒªœÖ
M . Apply Lemma 8.6.3 (2): S(P ) ‚Üí
Œªs
S(M). But by Lemma 8.6.5 ((1)‚áí(3)), S(P ) = P and we are done.
Now supp ose there exists P ‚àà Œõ suh that P ‚Üí
Œªs
S(M). Apply Lemma 8.6.3 (1): T (P ) ‚Üí
ŒªœÖ
T (S(M)). By Lemma 8.6.5 ((1)‚áí(2)) T (P ) = P , and by Lemma 8.6.4 (1) T (S(M)) = M , so
P ‚Üí
ŒªœÖ
M and we are done. ‚ú∑
Then we have the following
Corollary 8.6.7 The set Œõps is reursively enumerable but non-reursive.
Proof: It is reursively enumerable by the same argument used in Corollary 8.4.20 now applied
to Œªs.
Supp ose there is an algorithm to deide, given N ‚àà Œõs, whether N ‚àà Œõ
p
s. We show that we
ould deide, given M ‚àà ŒõtœÖ, whether M ‚àà Œõ
p
œÖ. Take N = S(M). Deide if ‚àÉP ‚àà Œõ P ‚Üí
Œªs
S(M).
If so, return yes. Else return no. By Lemma 8.6.6, this deides if ‚àÉP ‚àà Œõ P ‚Üí
ŒªœÖ
M , whih is a
ontradition by Corollary 8.4.20. ‚ú∑
Corollary 8.6.8 The set Œõps is not a ontext-sensitive language.
Proof: Same argument of Corollary 8.4.21. ‚ú∑
A desription of Œõps an b e given in an analogous way to Denition 8.4.23 just replaing ŒªœÖ
by Œªs.
252
8.7 Conlusion
8.7 Conlusio n
In this hapter we have intro dued the study of expansion in expliit substitution aluli
p ointing out its relevane. This is inspired in the onveniene of dealing with a alulus with
a minimal set of terms, leaving out the unneeded ones. As far as (Beta)-expansion and nor-
malization is onerned, the only needed terms in a alulus are those whih expand to pure
terms. This leads to a smaller alulus. As an appliation, we showed the non-existene of
ertain go o d mappings b etween aluli.
It turns out that the set of terms whih expand to pure terms b ehaves very dierently in
some alulus with resp et to another. We get for ŒªœÖ and Œªs undeidability results ab out this
set, ontrarily to what happ ens in Œªx, a alulus in whih not only this set is reursive but it
is total, i.e. every term in Œªx has a pure expansion.
What is also interesting is the fat that we had to use expliit substitutions to ode in a
term the problem of deiding ommon expansion, whih also resulted undeidable and was the
onnetion with expansion to pure terms in virtue of the (App)-rule eet.
For transferring undeidability from ŒªœÖ to Œªs we used the fat that T (S(M)) = M (T is
surjetive). If we had done it the opp osite way, from Œªs to ŒªœÖ, we would have had a problem
sine S is not surjetive.
Until now all standard variations of Œª-alulus were intro dued by using sets of terms that
an b e generated by ontext-free grammars or near formalisms. We have shown that not always
this should b e the ase sometimes, and the sets of terms need to b e desrib ed by other means.
We have found two kinds of ontexts when lo oking for invariants: go o d ontexts and right
ontexts, the latter b eing a partiular ase of the former. But using the former it was p ossible
to prove that not every term has a pure expansion in ŒªœÖ and Œªs.
One useful onseque n  e of the results in this hapter is the fat that in ŒªœÖ the standard
set of terms ŒõtœÖ seems to have the following two prop erties: 1) b eing minimal with resp et to
b eing losed under redution rules, and 2) reursive. Prop erty (1) was p erhaps one of the main
motivations for ŒªœÖ to b e prop osed. Prop erty (2) seems a reasonable prop erty. We gained more
evidene of the minimality of ŒªœÖ. In other terms, if the set of terms is shortened, one would
have the (somehow unpleasant) fat that this set is non-reursive. The same happ ens with Œªs.
It remains an op en problem to give a metho d for alulating in ertain situations those pure
expansions when they exist. Even when there might b e a semi-algorithm to solve this, it
is not lear how to do it optimally, nor how preferable an one pure term b e with resp et to
another.
As another faet of researh, we exp et to nd a more aurate inferene system for ŒõpœÖ and
Œõps, p ossibly based on sequents . Beause all these rules would b e of indution nature (premises
-p ossibly empty- and onlusion), suh a desription would b e useful for proving prop erties
253
8.8 App endix. Pro ofs for .
indutively for this set of terms, as done in (4; 82) as well as in hapter 4 for the sets of
strongly normalizing terms.
In the future we exp et to analyze the situation in ŒªœÉ, Œªws, Œªse and Œªœâe. All of them seem
non-trivial. The solution of these problems ould lead to dierent presentations of the aluli.
We did not investigate the existene of an expliit substitution alulus with de Bruijn indies
with the go o d prop erties of ŒªœÖ and suh that all terms whih expand to pure terms form a
reursive set, or b etter, a ontext-free set. This is also left for future researh.
8.8 App endix. Pro ofs for Œªs.
We give here detailed pro ofs of the invariane of œÉ and œï in go o d ontexts for Œªs.
Proof: (of Lemma 8.5.4) By indution on the ontext C. Call e = aœÉkb. We will not give
a‚Ä≤, b‚Ä≤, k‚Ä≤ when the hoie is lear one C ‚Ä≤ has b een hosen.
‚Ä¢ if C{‚ú∑} = ‚ú∑, then we have:
 if the redution is at the ro ot of B:
‚àó if the redution is a (œÉ ‚àí gen)-step, it would imply k = 1 but this is not p ossible
by hyp othesis.
‚àó it annot b e a (œÉ ‚àí app)-step sine e do es not math an appliation.
‚àó it annot b e a (œÉ ‚àí Œª)-step sine e do es not math an abstration.
‚àó for the (œÉ ‚àí des)-step mœÉnb‚Üí m with m < n, it annot happ en sine e do es not
math the redut.
‚àó for the (œÉ ‚àí des)-step mœÉnb ‚Üí œïn0 (b) with m = n, it annot happ en sine e do es
not math the redut.
‚àó for a (œÉ ‚àí des)-step mœÉnb ‚Üí m ‚àí 1 with m > n, it annot happ en sine e do es
not math the redut.
‚àó for a (œï‚àíapp)-step œïij(ab) ‚Üí œï
i
j(a)œï
i
j(b), it annot happ en sine e do es not math
the redut.
‚àó it annot b e a (œï‚àí Œª)-step sine e do es not math an abstration.
‚àó it annot b e a (œï‚àí des)-step sine e do es not math an index.
 if the redution is internal in B:
‚àó a‚Ä≤b‚Üí ab = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math an appliation.
‚àó ab‚Ä≤ ‚Üí ab = e with b‚Ä≤ ‚Üí b, it annot happ en sine e do es not math an appliation.
‚àó Œªa‚Ä≤ ‚Üí Œªa = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math an abstration.
254
8.8 App endix. Pro ofs for .
‚àó a‚Ä≤œÉkb ‚Üí aœÉkb = e with a‚Ä≤ ‚Üí a, immediate taking C ‚Ä≤{‚ú∑} = ‚ú∑ whih is a go o d
ontext.
‚àó aœÉkb‚Ä≤ ‚Üí aœÉkb = e with b‚Ä≤ ‚Üí b, immediate taking C ‚Ä≤{‚ú∑} = ‚ú∑ whih is a go o d
ontext.
‚àó œïik(a
‚Ä≤) ‚Üí œïik(a) = e with a
‚Ä≤ ‚Üí a, it annot happ en sine e do es not math the
redut.
‚Ä¢ if C 6= ‚ú∑ then:
 if the redution is at the ro ot of B:
‚àó B = (Œªa)b‚Üí aœÉ1b
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = (Œªa)D{‚ú∑} where b = D{e}, then C ‚Ä≤ is go o d b eause D
is go o d.
¬∑ if ‚ú∑ ‚àà a, it annot happ en sine C is go o d.
‚àó B = (ab)œÉnc‚Üí (aœÉnc)(bœÉnc), we have the following ases:
¬∑ if ‚ú∑ ‚àà a with n ‚â• 2, take C ‚Ä≤{‚ú∑} = (D{‚ú∑}b)œÉnc where a = D{e} with D go o d,
thus C ‚Ä≤ is go o d.
¬∑ if ‚ú∑ ‚àà b with n ‚â• 2, take C ‚Ä≤{‚ú∑} = (aD{‚ú∑})œÉnc where b = D{e} with D go o d,
thus C ‚Ä≤ is go o d.
¬∑ if ‚ú∑ ‚àà c at the left (i.e. its p osition is of the form 1.2.q for some q), then take
C ‚Ä≤{‚ú∑} = (aœÉn(D{‚ú∑}))(bœÉnc) where c = D{e} with D go o d, thus C ‚Ä≤ is go o d.
¬∑ if ‚ú∑ ‚àà c at the right (i.e. its p osition is of the form 2.2.q for some q), then take
C ‚Ä≤{‚ú∑} = (aœÉnc)(bœÉn(D{‚ú∑})) where c = D{e} with D go o d, thus C ‚Ä≤ is go o d.
¬∑ if ‚ú∑ o urs at the ro ot of aœÉnc = e, take C ‚Ä≤{‚ú∑} = D{‚ú∑(bœÉnc)} whih is go o d
b eause D is go o d.
¬∑ if ‚ú∑ o urs at the ro ot of bœÉnc = e, take C ‚Ä≤{‚ú∑} = D{(aœÉnc)‚ú∑} whih is go o d
b eause D is go o d.
‚àó B = (Œªa)œÉnc‚Üí Œª(aœÉn+1c)
¬∑ then ‚ú∑ ‚àà aœÉn+1c, but this is absurd b eause by hyp othesis C is go o d.
‚àó B = mœÉnb‚Üí m‚àí 1 with m > n, it annot happ en sine m‚àí 1 6= C{e}.
‚àó B = mœÉnb‚Üí œïn0 (b) with m = n, then ‚ú∑ ‚àà b thus take C
‚Ä≤{‚ú∑} = mœÉnD{‚ú∑} where
b = D{e} and the result holds
‚àó B = mœÉnb‚Üí m with m < n, it annot happ en sine m 6= C{e}.
‚àó B = œïij(ab) ‚Üí œï
i
j(a)œï
i
j(b)
¬∑ if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = œïij(D{‚ú∑}b) where a = D{e} thus C
‚Ä≤
is go o d b eause D
is go o d.
255
8.8 App endix. Pro ofs for .
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = œïij(aD{‚ú∑}) where b = D{e} thus C
‚Ä≤
is go o d b eause D
is go o d.
¬∑ if ‚ú∑ o urs at the ro ot of œïij(a), absurd sine e do es not math œï
i
j(a).
¬∑ if ‚ú∑ o urs at the ro ot of œïij(b), absurd sine e do es not math œï
i
j(b).
‚àó B = œïij(Œªa) ‚Üí Œªœï
i
j+1(a)
¬∑ then ‚ú∑ ‚àà œïij+1(a), absurd sine C is go o d.
‚àó B = œïij(m) ‚Üí m, it annot happ en sine C{e} is not an index.
‚àó B = œïij(m) ‚Üí m+ i‚àí 1, it annot happ en C{e} is not an index.
 If the redution is internal in B:
‚àó B = a‚Ä≤b‚Üí ab with a‚Ä≤ ‚Üí a.
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} whih is go o d, where b = D{e}.
¬∑ if ‚ú∑ ‚àà a, by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤œÉk
‚Ä≤
b‚Ä≤} with D‚Ä≤ go o d, take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}b whih is
go o d.
‚àó B = ab‚Ä≤ ‚Üí ab with b‚Ä≤ ‚Üí b, it is analogous to the previous ase.
‚àó B = Œªa‚Ä≤ ‚Üí Œªa = C{e}, it annot happ en b eause C is go o d.
‚àó B = a‚Ä≤œÉnb‚Üí aœÉnb with a‚Ä≤ ‚Üí a.
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤œÉnD{‚ú∑} where b = D{e}, then C ‚Ä≤ is go o d b eause D
is go o d.
¬∑ if ‚ú∑ ‚àà a and n = 1 we have an absurd b eause C is go o d.
¬∑ if ‚ú∑ ‚àà a and n ‚â• 2, then sine a‚Ä≤ ‚Üí a, by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉn
‚Ä≤
b‚Ä≤} with D‚Ä≤ go o d
and n‚Ä≤ ‚â• 2, thus take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}œÉnb whih is go o d.
‚àó B = aœÉnb‚Ä≤ ‚Üí aœÉnb with b‚Ä≤ ‚Üí b.
¬∑ if ‚ú∑ ‚àà b, by IH b‚Ä≤ = D‚Ä≤{a‚Ä≤œÉn
‚Ä≤
b‚Ä≤‚Ä≤} with D‚Ä≤ go o d and n‚Ä≤ ‚â• 2, thus take C ‚Ä≤{‚ú∑} =
aœÉnD‚Ä≤{‚ú∑} whih is go o d.
¬∑ if ‚ú∑ ‚àà a and n = 1 we have an absurd b eause C is go o d.
¬∑ if ‚ú∑ ‚àà a and n ‚â• 2, take C ‚Ä≤{‚ú∑} = D{‚ú∑}œÉnb‚Ä≤ where a = D{e}, then C ‚Ä≤ is go o d
b eause D is go o d.
‚àó B = œïij(a
‚Ä≤) ‚Üí œïij(a) with a
‚Ä≤ ‚Üí a and ‚ú∑ ‚àà a, then by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉn
‚Ä≤
b‚Ä≤} with D‚Ä≤
go o d, thus take C ‚Ä≤{‚ú∑} = œïij(D
‚Ä≤{‚ú∑}) whih is go o d.
‚ú∑
Proof: (of Lemma 8.5.5) By indution on the ontext C. Call e = œïik(a). Again, we will not
give a‚Ä≤, i‚Ä≤, k‚Ä≤, b‚Ä≤ when the hoie is lear one C ‚Ä≤ has b een hosen.
‚Ä¢ if C{‚ú∑} = ‚ú∑, then we have:
256
8.8 App endix. Pro ofs for .
 if the redution is at the ro ot of B:
‚àó if the redution is a (œÉ ‚àí gen)-step, it would imply e = aœÉ1b for some terms a, b,
whih is not p ossible.
‚àó it annot b e a (œÉ ‚àí app)-step sine e is not an appliation.
‚àó it annot b e a (œÉ ‚àí Œª)-step sine e is not abstration.
‚àó it annot b e a (œÉ ‚àí des)-step mœÉnb‚Üí m with m < n sine e is not an index.
‚àó if it is a (œÉ ‚àí des)-step mœÉnb ‚Üí œïn0 (b) with m = n, it would imply that n ‚â• 2,
thus the result follows taking C{‚ú∑} = ‚ú∑ whih is go o d.
‚àó it annot b e a (œÉ ‚àí des)-step mœÉnb‚Üí m‚àí 1 with m > n sine e is not an index.
‚àó it annot b e a (œï‚àí app)-step œïlj(ab) ‚Üí œï
l
j(a)œï
l
j(b) sine e is not an appliation.
‚àó it annot b e a (œï‚àí Œª)-step sine e do es not math an abstration.
‚àó it annot b e a (œï‚àí des)-step sine e is not an index.
 if the redution is internal in B:
‚àó a‚Ä≤b‚Üí ab = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math an appliation.
‚àó ab‚Ä≤ ‚Üí ab = e with b‚Ä≤ ‚Üí b, it annot happ en sine e do es not math an appliation.
‚àó Œªa‚Ä≤ ‚Üí Œªa = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math an abstration.
‚àó a‚Ä≤œÉkb ‚Üí aœÉkb = e with a‚Ä≤ ‚Üí a, it annot happ en sine e do es not math the
redut.
‚àó aœÉkb‚Ä≤ ‚Üí aœÉkb = e with b‚Ä≤ ‚Üí b, it annot happ en sine e do es not math the
redut.
‚àó œïlj(a
‚Ä≤) ‚Üí œïlj(a) = e with a
‚Ä≤ ‚Üí a, then by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉi
‚Ä≤
b‚Ä≤} or a‚Ä≤ = D‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤‚Ä≤)}
where D‚Ä≤ is go o d, then take C ‚Ä≤{‚ú∑} = œïlj(D
‚Ä≤{‚ú∑}) whih is go o d and the other
onditions hold.
‚Ä¢ if C 6= ‚ú∑ then
 if the redution is at the ro ot of B:
‚àó B = (Œªa)b‚Üí aœÉ1b
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = (Œªa)D{‚ú∑} where b = D{e}, then C ‚Ä≤ is go o d b eause D
is go o d.
¬∑ if ‚ú∑ ‚àà a, it annot happ en sine C is go o d.
‚àó B = (ab)œÉnc‚Üí (aœÉnc)(bœÉnc)
¬∑ the hole annot o ur at the ro ot of (aœÉnc) nor at the ro ot of (bœÉnc) sine e
do es not math neither of them.
¬∑ if ‚ú∑ ‚àà a then n ‚â• 2 (or else C would not b e go o d), thus take C ‚Ä≤{‚ú∑} =
(D{‚ú∑}b)œÉnc where a = D{e}, then C ‚Ä≤ is go o d b eause D is go o d.
257
8.8 App endix. Pro ofs for .
¬∑ if ‚ú∑ ‚àà b then analogously n ‚â• 2 (or else C would not b e go o d), thus take
C ‚Ä≤{‚ú∑} = (aD{‚ú∑})œÉnc where b = D{e}, then C ‚Ä≤ is go o d b eause D is go o d.
¬∑ if ‚ú∑ ‚àà c (either in the left-hand side or in the right-hand side of the appliation),
take C ‚Ä≤{‚ú∑} = (ab)œÉnD{‚ú∑} where c = D{e}, then C ‚Ä≤ is go o d b eause D is go o d.
‚àó B = (Œªa)œÉnc‚Üí Œª(aœÉn+1c)
¬∑ then ‚ú∑ ‚àà aœÉn+1c, absurd b eause by hyp othesis C is go o d.
‚àó B = mœÉnb‚Üí m‚àí 1 with m > n, it annot happ en sine C{e} is not an index.
‚àó B = mœÉnb ‚Üí œïn0 (b) with m = n, then ‚ú∑ ‚àà b thus take C
‚Ä≤{‚ú∑} = mœÉn(D{‚ú∑})
where b = D{e}, then C ‚Ä≤ is go o d b eause D is go o d.
‚àó B = mœÉnb‚Üí m with m < n, it annot happ en sine C{e} is not an index.
‚àó B = œïlj(ab) ‚Üí œï
l
j(a)œï
l
j(b)
¬∑ if ‚ú∑ ‚àà a, take C ‚Ä≤{‚ú∑} = œïlj(D{‚ú∑}b) where a = D{e} thus C
‚Ä≤
is go o d b eause D
is go o d.
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = œïlj(aD{‚ú∑}) where b = D{e} thus C
‚Ä≤
is go o d b eause D
is go o d.
¬∑ if ‚ú∑ o urs at the ro ot of œïlj(a), take C
‚Ä≤{‚ú∑} = ‚ú∑ whih is go o d.
¬∑ if ‚ú∑ o urs at the ro ot of œïlj(b), take C
‚Ä≤{‚ú∑} = ‚ú∑ whih is go o d.
‚àó B = œïlj(Œªa) ‚Üí Œªœï
l
j+1(a)
¬∑ then ‚ú∑ ‚àà œïlj+1(a), but this is absurd sine C is go o d.
‚àó B = œïlj(m) ‚Üí m, it annot happ en sine C{e} is not an index.
‚àó B = œïlj(m) ‚Üí m+ i‚àí 1, it annot happ en sine C{e} is not an index.
 If the redution is internal in B:
‚àó B = a‚Ä≤b‚Üí ab with a‚Ä≤ ‚Üí a:
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤D{‚ú∑} where b = D{e}, then C ‚Ä≤ is go o d b eause D is
go o d.
¬∑ if ‚ú∑ ‚àà a, then by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉi
‚Ä≤
b‚Ä≤} or a‚Ä≤ = D‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤‚Ä≤)} where D‚Ä≤ is go o d,
thus take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}b whih is go o d and the other onditions hold.
‚àó B = ab‚Ä≤ ‚Üí ab with b‚Ä≤ ‚Üí b, it is analogous to the previous ase.
‚àó B = Œªa‚Ä≤ ‚Üí Œªa = C{e}, it annot happ en b eause C is go o d.
‚àó B = a‚Ä≤œÉnb‚Üí aœÉnb with a‚Ä≤ ‚Üí a.
¬∑ if ‚ú∑ ‚àà b, take C ‚Ä≤{‚ú∑} = a‚Ä≤œÉnD{‚ú∑} where b = D{e}, then C ‚Ä≤ is go o d b eause D
is go o d.
¬∑ if ‚ú∑ ‚àà a and n = 1 we have an absurd b eause C is go o d.
258
8.8 App endix. Pro ofs for .
¬∑ if ‚ú∑ ‚àà a and n ‚â• 2, then sine a‚Ä≤ ‚Üí a, by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉi
‚Ä≤
b‚Ä≤} or a‚Ä≤ =
D‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤‚Ä≤)} where D‚Ä≤ is go o d, thus take C ‚Ä≤{‚ú∑} = D‚Ä≤{‚ú∑}œÉnb whih is go o d and
the other onditions hold.
‚àó B = aœÉnb‚Ä≤ ‚Üí aœÉnb with b‚Ä≤ ‚Üí b.
¬∑ if ‚ú∑ ‚àà b, then by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉi
‚Ä≤
b‚Ä≤} or a‚Ä≤ = D‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤‚Ä≤)} where D‚Ä≤ is go o d,
thus take C ‚Ä≤{‚ú∑} = aœÉn(D‚Ä≤{‚ú∑}) whih is go o d and the other onditions hold.
¬∑ if ‚ú∑ ‚àà a and n = 1 we have an absurd b eause C is go o d.
¬∑ if ‚ú∑ ‚àà a and n ‚â• 2, take C ‚Ä≤{‚ú∑} = D{a}œÉnb‚Ä≤, then C ‚Ä≤ is go o d b eause D is
go o d.
‚àó B = œïlj(a
‚Ä≤) ‚Üí œïlj(a) with a
‚Ä≤ ‚Üí a and ‚ú∑ ‚àà a, then by IH a‚Ä≤ = D‚Ä≤{a‚Ä≤‚Ä≤œÉi
‚Ä≤
b‚Ä≤} or
a‚Ä≤ = D‚Ä≤{œïi
‚Ä≤
k‚Ä≤(a
‚Ä≤‚Ä≤)} where D‚Ä≤ is go o d, thus take C ‚Ä≤{‚ú∑} = œïlj(D
‚Ä≤{‚ú∑}) whih is go o d
and the other onditions hold.
‚ú∑
259
8.8 App endix. Pro ofs for .
Figure 8.1: L(LX)(L(LX)(LL)) after 23 left-most steps
260
8.8 App endix. Pro ofs for .
Figure 8.2: SSSSSSSSSSSSSSS(SSSSSSSSSSSSSSSSS) after 100 left-most steps
261
Chapter 9
Conlusion
False onvitions are muh more dangerous than lies.  F. Nietzshe
Being aware of one's ignorane is a big step to wisdom.  Disraeli
Trivial problems are quikly eliminated. Important problems are never solved. 
Murphy
Rewriting is a meta-level approah of omputing. As we observed at the b eginning of this
thesis, rewriting an b e seen as a formulation of, but not preisely a paradigm for, omputing. It
an b e used in other theories, it an help to implement interpreters, ompilers and translators, it
an give an abstrat fundament of formal language theory. It serves as a generalization of these
study elds. Even other elds whih seem to b e so distant ould b enet from rewriting, suh as
natural language pro essing, omputational biology, image pro essing and artiial intelligene
in general, due to the fat that rewriting ideas are general and basi enough.
Substitution was a onept studied in a limited way until the emergene of expliit substi-
tution. We have notied that dierent forms of minimality to the syntax an b e attempted
for some aluli, for example the numb er of rules, the term set, and the numb er of syntatial
op erators.
In this thesis we have traveled over a bunh of asp ets and motivations of rewriting theory,
aording to the onepts from the literature. Our goal was to onsider problems whih relate
to rewriting systems and some of their subsys te ms. Subsyste ms app ear in dierent forms:
onsidering subsets of terms, onsidering subsets of rules - in general, onsidering sp eial (usual)
rewriting-related prop erties, and restriting the rule appliations.
We disussed well-known issues of rewriting and the relationship with other theories (hapter
2), aording to the urrent state of the art of sp ei theories of rewriting. We have notied that
a TRS with a nite numb er of rules is not neess arily equivalent to other rewriting paradigms.
We have heke d express iven e s s dierenes for ARSs, TRSs, STSs and PCSs. Moreover, a
262
more general and omprehensive study b eomes interesting and neess ary to treat them in
more detail. This study involves express iven e s s and omplexity.
We have studied a motivating and simple alulus over names, Œª‚àÖ, based only on the set of
pure terms of lassial Œª-alulus (hapter 3). It an b e seen as a go o d motivation for other
aluli, and it results an interesting and p edagogial ase study, inluding its de Bruijn versions.
What is a haraterization? Roughly, a study or desription of ertain elements satisfying
some prop erty, for example b eing memb ers of some set. In mathematis, a haraterization is
often understo o d as a go o d desription, i.e. a desription of something whih aptures its main
prop erties or struture. A manner of denoting some ob jet whih would not denote another
ob jet. We have studied p erp etual redution strategies in ŒªœÖ (hapter 4) from whih we stated
a haraterization of the SN terms set. Suh a haraterization may entail indutive pro ofs
for SN terms. Even when suh a haraterization exists, the set needs not to b e deidable,
as it happ ens with the SN terms set in all formulations of Œª-alulus. But suh an indutive
pro of pro eeds anyway, allowing to syntatially browse all its terms for proving prop erties.
A set ould admit dierent haraterizations. One may onsider the numb er of haraterizing
elements (suh as numb er of rules, their size), and p erhaps the omplexity of reognizing a
memb er of the set. A relation with omputational omplexity issues is p erhaps one of the
b etter and more hallenging asp ets to pursue.
We have studied and established the weak onuene on op en terms of a ŒªœÖ-alulus with
substitution interation rules (hapter 5), whih is also suitable to the more general CINNI.
This makes a alulus in a dierent style than Œªs, but starting from a alulus having itself
minimal rules, and leading to rule shemas. For these rule shemas ritial pairs were generially
analyzed.
We proved the weak normalization for simply typ ed Œªse on op en terms (hapter 6), and gave
a strategy for reahing their normal forms as well. We found another relevant dierene b etween
the styles, whih is enough to deserve dierent treatment. For Œªœâe and Œªœâ
‚Ä≤
e, for example, the
situation is slightly dierent that for the almost isomorphi Œªse due to the two-sorted harater.
Œªœâ‚Ä≤e is a go o d example whih shows that a alulus may not need more than a single index,
when having adequate omp osition rules. Thus suh a new alulus has a smaller set of terms
when ompared to its parent, but it is a subsys te m as go o d as the whole system.
We have intro dued a Œª-alulus with onstrutors for mo deling the pattern mathing feature
of funtional programming (hapter 7). We have extensively studied ommutation prop erties
and onuene, with interest in not only the alulus but also in its subsys te ms, whih justies
the divide-and-onquer metho d for assisting onuene pro ofs.
We have intro dued the study of expansion in expliit substitution aluli (hapter 8), a
p oint whih had pratially no attention in the literature. In a pratial sense, the set of terms
may have meaningless terms sine when derivations starting from pure terms only matter. It
263
turns out that, for some de Bruijn aluli, if one ignores all terms whih are not reahable from
pure terms, then the set of terms results nonreursive. We used expliit substitutions to o de
in a term the problem of deiding the existene of a ommon expansion b etween two terms,
whih was also proved to b e undeidable. We think that the existene of a de Bruijn alulus
(mayb e as part of an abstrat formulation) whih has all the desirable prop erties, and where
all terms whih expand to pure terms form a reursive set (b etter yet, a ontext-free set), is a
signiant problem. Two de Bruijn formulations of the Œª‚àÖ-alulus have the nie prop erty that
all the terms are pure, but these aluli are not PSN (hapter 3).
It is hard to imagine the future of rewriting formulations and theories. It is also easy to know
that there is a future indeed, sine there are many researh tasks alive and others will emerge.
We leave some problems op en in this thesis to o. Like substitution, we exp et to formulate
expliitly other asp ets of rewriting, for the lessons learned showed that it is often interesting
to make a hange of paradigm every now and then.
We have stated lines of future work in the onlusion of eah hapter. There are some researh
p ossibilities of sp eial interest whih we will mention b elow.
An interesting line of researh is the study of other typing systems for the aluli treated in
the previous hapters, suh as intersetion and higher-order typing.
When working with ommuting diagrams within the divide-and-onquer metho d for proving
onuene (hapter 7), it ould b e nie to formulate ompleteness results in relation to the
 inferenes a program an p erform. This is motivated by the fat that we have used just some
sp ei lemmas whih entail ommutation results starting from axioms (as an initial table of
hand-heked results), and p erhaps other rules would do as well. Of sp eial interest would b e
to apply this tehnique to expliit substitution aluli.
Another hallenging task will b e to analyze the expansion problem (hapter 8) for other
aluli, in partiular ŒªœÉ and its variations. It ould b e interesting to nd a relation with
Kolmogorov omplexity, that is to measure the minimal (pure, or other) terms whih redue
in several steps to a given term.
We also b elieve that randomized rewriting formulations deserve attention - this means for
example to relate randomness with the probability of a term b eing WN (or SN), as well as the
probability of ertain non-normalizing strategies to ahieve a normal form when it exists.
264
Figure 9.1: (((S((S(SS))S))S)((((SS)S)(((SS)S)S))(SX))) after 60 left-most steps
265
266
Referenes
[1‚ÑÑ M. Abadi, L. Cardelli, P.-L. Curien and J.-J. L√©vy. Expliit Substitutions. Journal of
Funtional Programming, 1(4):375416, 1991. 7, 31
[2‚ÑÑ H. Ab elson and G. J. Sussman. Struture and Interpretation of Computer Programs.
MIT Press, 1984. 7
[3‚ÑÑ P. Azel. An intro dution to indutive denitions. In J. Barwise, editor, Handbook of
Mathematial Logi, 739782. North Holland, 1977. 78
[4‚ÑÑ A. Arbiser, E. Bonelli and A. R√≠os. Perp etuality in a Lamb da Calulus with Expliit
Substitution and Comp osition. Pro. WAIT 2002, 31 JAIIO, Santa Fe, 2002. 4, 98, 102,
254
[5‚ÑÑ A. Arbiser. On the express ive p ower of aluli with expliit substitution. UNILOG 2005,
Montreux, 2005. 105
[6‚ÑÑ A. Arbiser. Abstrat redution systems and subsys te ms: understanding sub-aluli and
strategies. 9th. Asian Logi Conferene 2005, Novosibirsk, 2005.
[7‚ÑÑ A. Arbiser, F. Kamareddine and A. R√≠os. The Weak Normalization of the Simply-Typ ed
Œªse. J. of the IGPL. To app ear (2005). 134
[8‚ÑÑ A. Arbiser, A. Miquel and A. R√≠os. A Lamb da Calulus with Construtors. Pro. RTA
'2006 (to app ear). 165, 206
[9‚ÑÑ F. Baader and T. Nipkow. Rewriting and All That. Cambridge Univ Press, 1999. 12, 13,
14, 15, 42, 45, 62, 77
[10‚ÑÑ H. P. Barendregt, J. A. Bergstra, J. W. Klop and H. Volken. Degress, redutions and
representability in the lamb da alulus. Tehnial Rep ort 22, Utreht University, 1976.
[11‚ÑÑ H. P. Barendregt. The Lambda Calulus: its Syntax and Semantis. Studies in Logi and
the Foundations of Mathematis 103. North-Holland, Amsterdam, revised edition, 1984.
4, 7, 16, 17, 18, 21, 32, 40, 53, 70, 78, 164, 165, 214, 279, 280
267
REFERENCES
[12‚ÑÑ H. P. Barendregt. Lambda Caluli with Types. In: Handb o ok of Logi in Computer
Siene. North-Holland, 1999. 4, 32, 68, 70, 214, 233
[13‚ÑÑ Z. Benaissa, D. Briaud, P. Lesanne and J. Rouyer-Degli. ŒªœÖ, a alulus of expliit
substitutions whih preserves strong normalisation. Funtional Programming, 6(5), 1996.
7, 23, 25, 28, 77, 79, 80, 81, 82, 85, 106, 111, 130, 235
[14‚ÑÑ M. Bezem, J.W. Klop and R. de Vrijer (eds.) Term Rewriting Systems (TeReSe). Cam-
bridge University Press, 2003. 4, 12, 13, 14, 15, 39, 44, 47, 55, 62, 77, 279
[15‚ÑÑ R. Blo o. Preservation of Termination for Expliit Substitutions. PhD thesis, Eindhoven
University, 1997. 7, 22, 23, 27, 32, 56, 77, 105
[16‚ÑÑ C. B√∂hm, M. Dezani-Cianaglini, P. Peretti, and S. Ronhi Della Ro ha. A disrimina-
tion algorithm inside lamb da-b eta-alulus. Theoretial Computer Siene, 8(3):265291,
1979. 164, 165
[17‚ÑÑ E. Bonelli. Perp etuality in a Named Lamb da Calulus with Expliit Substitutions. MSCS,
11(1), 2001. 78, 79, 81, 85, 89, 98
[18‚ÑÑ S. Cerrito and D. Kesner. Pattern mathing as ut elimination. Logis In Computer
Siene (LICS'99), 98108, 1999. 6, 164
[19‚ÑÑ A. Churh and J.B. Rosser. Some prop erties of onversion. Transations of the Amerian
Mathematial Soiety, 39, 1936. 4, 10, 18, 164
[20‚ÑÑ A. Churh. The aluli of lambda-onversion, volume 6 of Annals of Mathematial Studies.
Prineton, 1941. 4, 10, 18
[21‚ÑÑ H. Cirstea and C. Kirhner. Rho-alulus, the rewriting alulus. 5th International
Workshop on Constraints in Computational Logis, 1998. 6, 164
[22‚ÑÑ H. Cirstea and C. Kirhner. The rewriting alulus - Part I. L. J. of the IGPL, 9(3),
2001. 6
[23‚ÑÑ E. Contejean and C. Marh√©. CiME: Completion Mo dulo E. In H. Ganzinger, ed. Pro.
RTA '96, LNCS 1103, 416419. Springer Verlag, 1996. Available at http:// i m e . l r i . f r .
122
[24‚ÑÑ P.-L. Curien. Categorial Combinators, Sequential Algorithms and Funtional Program-
ming. Pitman, 1986. Revised edition, Birkh√§user (1993). 7, 31
[25‚ÑÑ P.-L. Curien, T. Hardin and J.-J. L√©vy. Conuene prop erties of weak and strong aluli
of expliit substitutions. Tehnial Rep ort RR 1617, INRIA, Ro quenourt, 1992. 31
268
REFERENCES
[26‚ÑÑ R. David and B. Guillaume. A Œª-alulus with expliit weakening and expliit substitu-
tions. MSCS, 11(1), 2001. 102
[27‚ÑÑ N. de Bruijn. Lamb da-Calulus notation with nameless dummies, a to ol for automati
formula manipulation, with appliation to the Churh-Rosser Theorem. Indag. Mat.,
34(5):381392, 1972. 5, 19, 51
[28‚ÑÑ N. Dershowitz. Termination of Rewriting. Journal of Symb oli Computation, 3(1 and 2),
69116, 1987.
[29‚ÑÑ R. Di Cosmo, D. Kesner and E. Polonovsky. Pro of nets and expliit substitutions. FOS-
SACS'2000, LNCS 1784, Springer-Verlag, 2000.
[30‚ÑÑ D. Dougherty and P. Lesanne. Redutions, intersetion typ es and expliit substitutions.
Pro. of TLCA, LNCS 2044, Springer-Verlag, 2001. 23
[31‚ÑÑ M. Ferreira, D. Kesner and L. Puel. Lamb da-aluli with expliit substitutions and om-
p osition whih preserve b eta-strong normalization. Pro . 5th International Conferene
on Algebrai and Logi Programming, Aahen, Germany, Septemb er 1996. LNCS 1139:
284298, Springer-Verlag, 1996. 106
[32‚ÑÑ M. Ferreira, D. Kesner and L. Puel. Lamb da-aluli with Expliit Substitutions and
Weak Comp osition Preserving Strong Normalization. Appliable Algebra in Engineering,
Communiation and Computing 9(4), 333371, 1999. 106
[33‚ÑÑ J. H. Gallier. On Girard's andidats de reduibilit√©. In P. Odifreddi, editor, Logi in
Computer Siene, numb er 31 in APIC, 123203. Aademi Press, 1990.
[34‚ÑÑ J.-Y. Girard. Lo us solum: From the rules of logi to the logi of rules. Mathematial
Strutures in Computer Siene, 11(3):301506, 2001. 165
[35‚ÑÑ B. Guillaume. Un alul des substitutions ave √©tiquettes. PhD thesis, Universit√© de
Savoie, Chamb √©ry, 1999. 77, 102
[36‚ÑÑ B. Gramlih. Termination and Conuene Properties of Strutured Rewrite Systems.
PhD thesis, Fahb ereih Informatik der Universit√§t Kaiserslautern, 1996.
[37‚ÑÑ J. Goubault-Larreq. A pro of of weak termination of the simply typ ed ŒªœÉ-alulus. Pro .
Int. Workshop on Typ es for Pro ofs and Programs (TYPES'96). LNCS 1512, 134151,
Springer-Verlag, 1998. 134, 144, 151, 160
[38‚ÑÑ Th. Hardin and J.-J. Levy. A onuent alulus of substitutions. Frane-Japan Artiial
Intelligene and Computer Siene Symp osium, 1989.
269
REFERENCES
[39‚ÑÑ J. Hindley and J. Seldin, editors. To H.B. Curry: Essays on Combinatory Logi. Aademi
Press, 1980. 279
[40‚ÑÑ P. Hudak, S. Peyton-Jones, and P. Wadler. Rep ort on the programming language Haskell,
a non-strit, purely funtional language (Version 1.2). Sigplan Noties, 1992. 6, 164
[41‚ÑÑ C. Barry Jay. The pattern alulus. ACM Transations on Programming Languages and
Systems, 26(6):911937, 2004. 6, 164
[42‚ÑÑ W. Kahl. Basi pattern mathing aluli: Syntax, redution, onuene, and normalisa-
tion. Tehnial Rep ort 16, Software Quality Researh Lab oratory, MMaster Univ., 2003.
6, 164
[43‚ÑÑ F. Kamareddine and A. R√≠os. A Œª-alulus √† la de Bruijn with expliit substitutions.
Pro eedings of PLILP'95. LNCS 982, 4562, Springer-Verlag, 1995. 20, 25, 27, 60, 77
[44‚ÑÑ F. Kamareddine and A. R√≠os. Bridging de Bruijn indies and variable names in expliit
substitution aluli. Tehnial Rep ort, University of Glasgow, 1996. 20
[45‚ÑÑ F. Kamareddine and A. R√≠os. Extending a Œª-alulus with expliit substitution whih
preserves strong normalisation into a onuent alulus on op en terms. Tehnial Rep ort,
University of Glasgow, 1996. 27, 106
[46‚ÑÑ F. Kamareddine and A. R√≠os. Extending a Œª-alulus with expliit substitution whih pre-
serves strong normalisation into a onuent alulus on op en terms. Journal of Funtional
Programming, 7(4):395420, 1997. 7, 27, 30, 106, 134, 142, 143, 155
[47‚ÑÑ F. Kamareddine and A. R√≠os. Relating the ŒªœÉ- and Œªs-Styles of Expliit Substitutions.
Journal of Logi and Computation, 10(3):349380, 2000. 7, 21, 28, 30, 105, 133, 134, 138,
142, 250, 251
[48‚ÑÑ D. Kesner. Conuene of Extensional and Non-Extensional lamb da-aluli with Expliit
Substitutions. TCS, 238 1-2, 183220, 2000. 106
[49‚ÑÑ Z. Khasidashvili. The Longest Perp etual Redutions in Orthogonal Express ion Redution
Systems. Pro. of the 3rd. International Conferene LFCS, LNCS 813, Springer-Verlag,
1994. 77
[50‚ÑÑ Z. Khasidashvili. On Longest Perp etual Redutions in Orthogonal Express ion Redution
Systems. TCS, 2001. 77
[51‚ÑÑ Z. Khasidashvili, M. Ogawa and V. van Oostrom. Perp etuality and uniform normalization
in orthogonal rewrite systems. Information and Computation, 164:118151, 2001. 77
270
REFERENCES
[52‚ÑÑ Z. Khasidashvili, M. Ogawa and V. van Oostrom. Uniform Normalization Beyond Or-
thogonality. Pro. RTA 2001, LNCS 2051, Springer-Verlag, 2001. 77
[53‚ÑÑ C. Kirhner, H. Kirhner, and M.Vittek. Designing CLP using Computational Systems.
In P. Van Hentenryk and S. Saraswat, eds., Priniples and Pratie of Constraint Pro-
gramming. The MIT press, 1995. 122
[54‚ÑÑ J. W. Klop. Combinatory Redution Systems. PhD thesis, Mathematial Centre Trats
n.127, CWI, 1980. 8
[55‚ÑÑ D. E. Knuth and P.B. Bendix. Simple Word Problems in Universal Algebras. In J. Leeh,
editor, Computational Problems in Abstrat Algebra, 263297. Pergamon Press, Oxford,
1970.
[56‚ÑÑ K. Kuratowski. General Topology. Aademi Press, 1966. 38
[57‚ÑÑ D. S. Lankford. On Proving Term Rewriting Systems are No etherian. Tehnial Rep ort,
Louisiana Teh. University, Mathematis Dept., Ruston LA, 1979.
[58‚ÑÑ P. Lesanne. Implementation of Completion by Transition Rules + Control: ORME. In
H. Kirhner and W. Wehler, editors, Pro . 2nd Int. Conferene on Algebrai and Logi
Programming, Nany (Frane), LNCS 463, 262269, Springer-Verlag, 1990.
[59‚ÑÑ P. Lesanne. From Lambda-sigma to Lambda-upsilon: a Journey Through Caluli of
Expliit Substitutions. Pro . POPL 1994. 7
[60‚ÑÑ P. Lesanne and J. Rouyer-Degli. The Calulus of Expliit Substitutions ŒªœÖ. CNRS and
INRIA-Lorraine, 1995. 23, 25, 106, 107, 111, 130, 234, 236, 248
[61‚ÑÑ S. Luas. Reesritura on Restriiones de Reemplazamiento. PhD thesis, Univ. Pol.
Valenia, 1998. 40
[62‚ÑÑ S. Luas. Context-sensitive rewriting, lazy rewriting, and on-demand rewriting. DSIC,
Univ. Pol. Valenia, 2002. 40
[63‚ÑÑ L. Maranget. Optimal derivations in weak lamb da-aluli and in orthogonal TRS. Pro.
of POPL, 1991. 23, 32
[64‚ÑÑ U. Martin and T. Nipkow. Ordered Rewriting and Conuene. In M. E. Stikel, editor,
Pro . 10th Int. Conferene on Automated Dedution, Kaiserslautern (Germany), LNCS
449, 366380, Springer-Verlag, 1990.
[65‚ÑÑ N. Mart√¨-Oliet and J. Meseguer. Rewriting Logi as a Logial and Semantial Framework.
TR SRI-CSL-93-05, August 1993. 6
271
REFERENCES
[66‚ÑÑ P.-A. Melli√®s. Desription Abstraite des Syst√®mes de R√©√©riture. PhD thesis, Universit√©
Paris VI I, 1996. 31, 32, 51, 58, 105
[67‚ÑÑ P.-A. Melli√®s. Axiomati Rewriting Theory I I: The ŒªœÉ-alulus enjoys nite normalisation
ones. Journal of Logi and Computation, 10(3):461487, 2000. 23
[68‚ÑÑ R. Milner, M. Tofte, and R. Harp er. The denition of Standard ML. MIT Press, 1990.
6, 164
[69‚ÑÑ C. Mu√±oz. Un alul de substitutions p our la repr√©sentation de preuves partielles en
th√©orie de typ es. PhD thesis, Universit√© Paris VI I. 1997.
[70‚ÑÑ The Ob jetive Caml language. http://a m l . i n r i a . f r / . 6, 164
[71‚ÑÑ M. J. O'Donnell. Term-Rewriting Implementation of Equational Logi Programming
Pro. RTA '87, LNCS 256, Springer-Verlag, 1987. 6
[72‚ÑÑ E. Polonovski. Substitutions expliites, logique et normalisation. PhD thesis, Universit√©
de Paris 7, 2004. 222
[73‚ÑÑ G. Revesz. Axioms for the Theory of Lamb da-Conversion. SIAM 14(2), SICOMP, 1985.
51
[74‚ÑÑ A. R√≠os and F. Kamareddine. The Œªs-alulus: its typ ed and its extended versions.
Tehnial rep ort, Dept. of Computing Siene, University of Glasgow, 1995. 27
[75‚ÑÑ A. R√≠os. Contribution √† l'√©tude des Œª-aluls ave substitutions expliites. PhD thesis,
Universit√© de Paris 7, 1993. 79, 105, 177
[76‚ÑÑ K.H. Rose. Expliit yli substitutions. Pro. of CTRS, LNCS 656, Springer-Verlag,
1992. 22
[77‚ÑÑ K.H. Rose. Expliit Substitution - Tutorial & Survey. University of Aarhus, 1996.
http://ww w . b r i  s . d k / L S / 9 6 / 3 / B R I C S - L S - 9 6 - 3 / B R I C S - L S - 9 6 - 3 . h t m l . 51, 106
[78‚ÑÑ G. Rozenb erg et al. Handb o ok of Graph-Grammars and Computing by Graph Transfor-
mation. Vol I. World Sienti, 1997. 49
[79‚ÑÑ M.-O. Stehr. Programming, Sp eiation and Interative Theorem Proving. Towards a
Unied Language based on Equational Logi, Rewriting Logi and Typ e Theory. PhD
thesis, Universitat Hamburg, 2002. 8, 106, 112, 125
[80‚ÑÑ V. van Oostrom. Lamb da alulus with patterns. Tehnial Rep ort IR-228, Vrije Univer-
siteit, Amsterdam, 1990. 6, 164
272
REFERENCES
[81‚ÑÑ F. van Raamsdonk. Higher-Order Rewriting Pro. RTA '99, LNCS 256, Springer-Verlag,
1999. 55
[82‚ÑÑ F. van Raamsdonk, P. Severi, M.H. S√∏rensen and H. Xi. Perp etual Redutions in Lamb da
Calulus. Journal of Information and Computation, 149(2), 1999. 77, 78, 89, 98, 102, 254
[83‚ÑÑ F. van Raamsdonk. Conuene and Normalization for Higher-Order Rewriting. PhD
thesis, Amsterdam University, 1996. 8
[84‚ÑÑ J. Waldmann. The Combinator S. PhD thesis, Friedrih-Shiller-Universit√§t Jena, 1998.
49, 222
[85‚ÑÑ H. Zantema. Termination of Term Rewriting: Interpretion and Typ e Elimination. Journal
of Symb oli Computation, 17(1), 2350, January 1994.
[86‚ÑÑ H. Zantema and A. Geser. Non-lo oping Rewriting. TR UU-CS1996-03, Utreh University,
1996.
273
REFERENCES
274
App endix A
Implementation
That al l our know ledge begins with experiene there should be no doubt.  I. Kant
ABSTRACT We give in this app endix a brief desription of the related software to ols pro-
vided with this thesis or used in relation to some of the topis overed in the previous hapters.
We do not provide detailed desriptions nor instrutions, just a minimal aount ab out the
goals and funtionality of these exp erimental to ols. Their purp ose is only to illustrate some
rewriting onepts in a pratial way and to allow exp erimentation with them, as well as to see
by oneself how some terms, typ es and derivations may lo ok like.
A.1 Intro dution
We are also interested in the implementation of various rewriting systems. Even when there
is still no lear or omplete onept of implementation, and that this ould b e attaked from
dierent p oints of view, we remark that expliit substitutions onstitute a way of implementing
lamb da alulus.
Now, sine aluli of expliit substitution with de Bruijn indies are TRSs, we implemented a
o de generator whih (more generally) transforms a given Context-Sensitive Rewriting System
to a Haskell program implementing some sp ei strategy (so eah funtion symb ol an b e eval-
uated in an outermost or innermost way, and also the ontextual rewriting an b e restrited to a
given subset of its arguments). The idea of the implementation is to nd (and exp eriment with)
appropriate strategies for (p ossibly ontext-sensitive) lamb da aluli with expliit substitution,
where the strategy may dep end on eah funtion symb ol.
This hapter just summarizes dierent to ols implemented for helping us in part of our re-
searh.
275
A.2 Commuter
A.2 Commuter
Commuter is a to ol whih allows to sp eify ommutation pairs of subsys te ms of a rewriting
system. Chapter 7 inludes a real ase analysis.
A.2.1 Working with ommuter
The user an mark ommutation pairs (for instane by inputting them from a ommutation
sp eiation le given in Asii format), use the inferene rules arbitrarily and lo ok how the
entire ommutation grid lo oks like at any time. The system generates minimal pro ofs for weak
ommutation and ommutation of pairs of subsys te ms (and weak onuene and onuene of
the subsys te ms).
Alternatively, the system generates a minimal set of pro of trees for the weak onuene (if
valid), for all the systems, using an algorithm whih is linear in the numb er of subsys te ms of
the main system (see the App endix in hapter 7, for onrete examples).
A.2.2 Handling of abstrat losure onditions
Commuter an work with any nite set of (binary) losure onditions.
The pro ofs output ould b e short in a sp ei way. The program uses a riterion on how
to minimize the redundanies of a set of pro ofs for a given system and subsys te ms. We all
redundant a sub-tree whih rep eats itself along the set of trees, i.e. a tree may b e a prop er sub-
tree of a bigger one. For suh a losure ondition set, we generate the pro ofs semi-automatially,
in suh a way that the numb er of redundanies is minimized.
The output ommutation grid for Œªx-alulus app ears in Figure A.1. Sine Œªx has 5 rules,
this makes 25 = 32 subsys te ms. Eah pixel represents a pair of subsys te ms, starting from
the upp er-left (b oth empty subsys te ms) to the b ottom-right (b oth full systems), and its olor
indiates onuene (grey), weak onuene (blak) or neither (white).
The output ommutation grid for the ŒªBC-alulus app ears in Figure 7.6 (hapter 7).
More information and examples of Commuter an b e found at the URL
http://www.d.u b a.ar/p eople/materias/reesritura/ommuter
A.3 From rewriti ng to a funtional program
trs2ode is a o de generator whih transforms a given ontext-sensitive rewriting system to
a Haskell program implementing some of a given numb er of sp ei strategies (so eah funtion
276
A.3 From rewriting to a funtional program
Figure A.1: Œªx-alulus weak ommutation grid
symb ol an b e evaluated in an outermost or innermost way, and also the ontextual rewriting
an b e restrited to a given subset of its arguments). The strategy may dep end on eah funtion
symb ol.
As a simple but signiative example, the ŒªœÖ-alulus, onsidering op en terms, an b e iden-
tied to a sub-ARS of the one-sorted TRS with the following rules:
ap(la(x), y) ‚Üí cl(x, sl(y))
cl(ap(x, y), s) ‚Üí ap(cl(x, s), cl(y, s))
cl(la(x), s) ‚Üí la(cl(x, li(s)))
cl(one, sl(x)) ‚Üí x
cl(suc(n), sl(x)) ‚Üí n
cl(one, li(s)) ‚Üí one
cl(suc(n), li(s)) ‚Üí cl(cl(n, s), sh)
cl(n, sh) ‚Üí suc(n)
where x, y, s, n are variables. These rules serve as a sp eiation for obtaining Haskell o de
implementing leftmost-outermost, leftmost-innermost, and other redution strategies, given by
the usual two-sorted (terms and substitutions) algebra or as a sub-alulus of a one-sorted
algebra. As an example, the following o de is obtained for a leftmost-outermost strategy:
-- type definitio n
data Term = N Nu | Cl Term Subs | Ap Term Term | La Term
data Nu = One | Su Nu
data Subs = Sl Term | Sh | Li Subs
-- syntati equality funtions
277
A.3 From rewriting to a funtional program
eqn One One = True
eqn (Su x) (Su y) = eqn x y
eqn x y = False
eq (N x) (N y) = eqn x y
eq (Cl x s) (Cl y t) = (eq x y) && (eqs s t)
eq (Ap x1 x2) (Ap y1 y2) = (eq x1 y1) && (eq x2 y2)
eq (La x1) (La y1) = (eq x1 y1)
eq x y = False
eqs (Sl x1) (Sl y1) = (eq x1 y1)
eqs Sh Sh = True
eqs (Li s) (Li t) = eqs s t
eqs s t = False
neq x y = not (eq x y)
neqs s t = not (eqs s t)
-- alulus rules
--terms
r (Ap (La x) y) = (Cl x (Sl y))
r (Ap z1 z2) =
let rz1 = r z1 in
if (neq rz1 z1) then
(Ap rz1 z2)
else
let rz2 = r z2 in
if (neq rz2 z2) then
(Ap z1 rz2)
else
(Ap z1 z2)
r (Cl (Ap x y) s) = Ap (Cl x s) (Cl y s)
r (Cl (La x) s) = La (Cl x s)
r (Cl (N one) (Sl x)) = x
r (Cl (N (Su n)) (Sl x)) = N n
r (Cl (N One) (Li s)) = N One
r (Cl (N (Su n)) (Li s)) = Cl (Cl (N n) s) Sh
278
A.3 From rewriting to a funtional program
r (Cl (N n) Sh) = N (Su n)
r (Cl z1 z2) =
let rz1 = r z1 in
if (neq rz1 z1) then
(Cl rz1 z2)
else
let rz2 = rs z2 in
if (neqs rz2 z2) then
(Cl z1 rz2)
else
(Cl z1 z2)
r z = z
--substit u t i o n s
rs (Li s) = Li (rs s)
rs (Sl x) = Sl (r x)
rs s = s
--rewrite a given number of steps
rn(0,z) = z
rn(n,z) = r(rn(n-1, z ) )
--rewrite to normal form if it exists
rnf(z) =
let rz = r z in
if (eq rz z) then z
else rnf(rz)
As a pratial appliation, whih ould b e useful for testing rewriting senarios, we imple-
mented in Haskell some rewriting systems for exp erimentation: lassial Œª-alulus, S,K, I-
ombinatory logi (CL) (11; 14; 39), Œªs/se, ŒªœÖ and Œªws, with data typ es for the sets of terms
and substitutions, some strategies and pretty-printing routines. This implementation is an ex-
tension of the Haskell o de pro dued by trs2ode. In the ase of ŒªœÖ the o de also provides a
way of handling generi losures (i.e. representing expliitly the level of iterated lifts, whih
is ommon notation in previous hapters) as well as meta-variables. More information and
examples of trs2ode and related programs an b e found at the URL
http://www.d.u b a.ar/p eople/materias/reesritura/trs2o de .
279
A.3 From rewriting to a funtional program
A.3.1 Implementing typ es
Simply typ ed ŒªœÖ and other aluli were implemented as well. Given a term or a substitution,
and a typing ontext of zero or more typ es, the system infers its typ e in that ontext or if it
has no typ e.
Every typing rule has b een implemented as a dening lause for a funtion. A b ottom element
is returned when the input term or substitution is not typable. This metho d of implementing
typ e inferene may lead to an extension to handle p olymorphi versions of some aluli.
A.3.2 CL to Œª-alulus
We implemented also the onversion from Œª-alulus to CL (and vieversa), based on the
lassial mehanism (11). The interesting p oint is that the onversion is done by rewriting
rules. The language syntax ombines the one of lassial Œª-alulus with onstant terms. The
rewriting system for onversion from Œª-alulus to CL is formulated b elow.
The syntax is as follows:
M ::= x | Œªx.M | MM | S | K
where S and K are onstants. The rules are:
Œªx.x ‚Üí SKK
Œªx.M ‚Üí KM x /‚àà FV (M)
Œªx.PQ ‚Üí S(Œªx.P )(Œªx.Q) x ‚àà FV (PQ)
Œªx.Px ‚Üí P x /‚àà FV (P )
Do not onfuse this system, for p erforming transformations, with the atual CL-rewriting
system or with Œª-alulus.
We use leftmost/parallel redution, and a onversion funtion rewrites a given term (starting
mixed Œª-alulus and CL) until a normal form is reahed (the CL version).
Although the last rule (Œ∑-redution) is optional, its purp ose is to avoid very long onversions,
b oth in size and in numb er of steps. Without that rule, this rewriting system is anonial, but
adding this rule generates the following ritial pair:
P
Œªx.Px
66nnnnnnnnnnnnnn
''PP
PPP
PPP
PPP
P
S(Œªx.P )(Œªx.x)
Thus it is still SN but not onuent. The pair an b e losed by adding the rule
S(Kx)(SKK) ‚Üí x
280
A.4 Fratal ob jets
We did not inlude atual CL-rewrite steps, suh as Kxy ‚Üí x, in this onversion system. In
that way more eient translations ould b e obtained. This is left for future analysis.
A.4 Fratal ob jets
Every CL-ombinator an b e pitured as a tree, where the appliation op eration denes the
sub-tree relation, and onstants and variables are interpreted as leaves. Between hapters there
are images illustrating samples of CL-terms after many-step leftmost derivations.
frint is a to ol whih an pro due this graphial output from arbitrary TRSs (for example,
CL), as well as for exp erimenting with L-systems, a  parallel variant of the STSs in whih
eah symb ol has a graphial meaning. The idea is taken from the FraTree 1.0 software by M.
Shernau (1993) and the b o ok from Pleitgen and Saup e (eds.), The Siene of Fratal Images,
Springer-Verlag, NY 1988.
The formulation we handle is built on strings, where one starts with an initial express ion
(axiom) and then rewriting rules are applied (in parallel) over that express ion, a ertain numb er
of times. After the iteration, a graphial interpretation is done. This means that the symb ols
of the resulting string are drawn in dierent ways.
At every disrete moment a urrent diretion is dened (an angle ranging from 0 to 2œÄ) as
well as a urrent displaement (a p ositive real numb er). The rules should ontain haraters
whose graphial meanings are desrib ed as follows:
‚Ä¢ F : moves the p en forward to the urrent diretion, drawing a segment, using urrent
displaement value
‚Ä¢ f : moves the p en forward to the urrent diretion but without drawing, using urrent
displaement value
‚Ä¢ +,‚àí : rotates the p en heading 2œÄ
direction
right or left resp etively
‚Ä¢ | : rotates the p en heading œÄ
‚Ä¢ ‚àó : multiplies by 2 the displaement to use
‚Ä¢ / : divides into half the displaement to use
‚Ä¢ [. . . ] : exeutes the given blo k and then restores the p en p osition
Input data are:
‚Ä¢ dir : numb er of diretions (dierent angles), indiating how the irumferene is divided
for rotations
281
A.5 Term generation
‚Ä¢ Ax : axiom, i.e. starting express ion
‚Ä¢ Rules : set of rewriting rules
The informal algorithm is the following:
Proedure to draw the n-th generatio n from an axiom E
repeat for i = 1 to n
for eah rule L -> R
for eah subexpres s i o n S in E mathing with L
ompute S' and R' given the mathing substitut i o n
hange in E all S' by R'
draw E
end
More information and examples of frint an b e found at the URL
http://www.d.u b a.ar/p eople/materias/reesritura/frint.
A.5 Term generati o n
Given a alulus, term generation is useful for testing prop erties or onjetures over families
of terms empirially b efore lo oking for a formal pro of.
Termgen is a to ol that generates terms of several Œª-alulus variants: Œª-alulus a la de
Bruijn, ŒªœÖ, Œªs and ŒªœÉ. After sp eifying the maximum depth and size, the terms are generated
in Haskell, L
A
T
E
X or Asii format.
More information and examples of termgen an b e found at the URL
http://www.d.u b a.ar/p eople/materias/reesritura/termgen.
282
A.5 Term generation
283
App endix B
Glossary
This hapter onsists of an informal glossary whih an b e onsulted for quik referene during
a rst reading of the thesis. It inludes most of the onepts treated in the preeding hapters,
and their denitions are given in an intuitive and informal manner. For formal denitions
of these and other onepts, see the thesis preliminaries hapter as well as the intro dutory
paragraphs and the denitions given in eah single hapter.
‚Ä¢ abstrat rewriting system (ARS): a set and a binary relation over it
‚Ä¢ alpha-onversion (=Œ±): the p ossibility of renaming some b ound variables in a term pre-
serving its semantis
‚Ä¢ algorithm: a mehanial pro edure whih an solve a problem or p erform a given task;
an abstration of a program to implement
‚Ä¢ b eta-redution (‚ÜíŒ≤): a redution rule whih omputes the simultaneous substitution of
a given term for a given variable in a given term
‚Ä¢ b eta-rule: a rule in a alulus of expliit substitution whih plays the role of the Œ≤-
redution, usually reating a losure whih will need to propagate within the term
‚Ä¢ b eta-equivalene (=Œ≤): the least equivalene relation whih inludes the relation ‚ÜíŒ≤;
somehow reeting that two given terms have the same omputational meaning
‚Ä¢ b eta-eta-equivalene (=Œ≤Œ∑): the least equivalene relation whih inludes the relation
‚ÜíŒ≤Œ∑; somehow reeting that two given terms have the same omputational meaning
when onsidering extensionality
‚Ä¢ alulus: a rewriting system based on rules
284
‚Ä¢ alulus of expliit substitution: a rewriting system whih, allows the omputational
p ower of Œª-alulus by inluding the substitution ob jet in the term syntax, and whih
propagate substitutions (one these app ear in terms by means of the orresp onding b eta-
rule)
‚Ä¢ anoniity: normality, something exp eted , typial or standard; also, a rewriting system
is anonial when it is CR and SN
‚Ä¢ haraterization: a manner of desribing a set of ob jets whih allow to (easily) identify
them; a desription of prop erties whih a given set of ob jets satisfy and no other do es
‚Ä¢ Churh-Rosser (CR): the prop erty of onuene
‚Ä¢ losure: a substitution represented in syntax; also a term with suh a substitution p ending
‚Ä¢ ombinator: a term without free variables
‚Ä¢ ombinatory logi: a rewriting system whih handles ombinators from lamb da-alulus,
also presented as a TRS with two onstants (S and K), an appliation and two rewriting
rules
‚Ä¢ ommutation: the p ossibility of, from a single term, joining any pair of divergent redu-
tions, by applying redution rules whih o ur at the opp osite sides in the diagram
‚Ä¢ ommutation, strong: ommutation where one side of the diagram is losed with 0 or 1
step
‚Ä¢ ommutation, weak: ommutation where the diagram starts with two divergent single-
steps instead of arbitrary length
‚Ä¢ omplexity: a branh of Computer Siene studying the omputational diulty of solving
dierent problems, aording to the spae or time that the solution may require
‚Ä¢ omp osition rule: a rule whih allows two substitutions (losures) to interat, p ossibly
ombining them into another substitution (losure)
‚Ä¢ omputable: same as reursive or deidable
‚Ä¢ omputability: a branh of Computer Siene studying and desribing the problems whih
an or annot b e solved by an algorithm, as well as the harateristis whih dierent
omputing formulations and paradigms may turn a problem into solvable
‚Ä¢ onuene: the prop erty whih ensures that every divergent diagram an b e losed
‚Ä¢ onuene, strong: onuene where one side of the diagram is a derivation of 0 or 1 step
285
‚Ä¢ onuene, weak: onuene where the diagram starts with two divergent single steps
‚Ä¢ onstant: in rst order signatures, a funtion symb ol of arity 0
‚Ä¢ onstrutor: a onstant used to represent strutured data when using pattern mathing
‚Ä¢ ontext: same as environment, in typ ed Œª-aluli, a sequen e of typ es or a set of pairs of
the form variable-typ e
‚Ä¢ ontext-sensitive rewriting system (CSRS): a TRS where rewriting is allowed or restrited
under sp ei p ositions/parameters of funtion symb ols
‚Ä¢ de Bruijn index: a natural numb er representing a variable in a Œª-term, whih denotes the
numb er of Œª-binders over it until the binder it abstrats to
‚Ä¢ deidable: the prop erty of existene of an algorithm to solve a given problem
‚Ä¢ derivation: a redution of 0 or more steps, a sequen e of redutions, i.e. rewriting steps
from a given starting ob jet
‚Ä¢ diamond prop erty: the prop erty whih establishes that any divergene diagram with a
single step on eah side an b e losed by another step on eah side
‚Ä¢ divergene: a redution diagram where two derivations b egin with the same term
‚Ä¢ environment: see ontext
‚Ä¢ eta-redution (=Œ∑): a redution rule whih omputes from the term Œªx.Mx the term M
wheneve r x do es not o ur free in M
‚Ä¢ equivalene: a relation whih is reexive, symmetrial and transitive
‚Ä¢ expansion: the reverse of redution; a term expands to another one if and only if the
latter redues into the former
‚Ä¢ extensionality: the prop erty and axiom whih enables to interpret a term like Œªx.Mx
as M , see Œ∑-redution; it orresp onds to the fat that two funtions should b e identied
when they yield the same result when applied to the same values
‚Ä¢ funtion: a relation whih for every element (in the domain) there is one and only one
element related (in the o domain)
‚Ä¢ funtion, omputable: a funtion for whih an algorithm exists to alulating it for every
element in its domain
286
‚Ä¢ grammar: a formal system having as goal the desription of a language, usually given by
a set of non-terminal symb ols, a set of terminal symb ols, a set of rules (pairs of strings)
and a starting symb ol; a given string of terminal symb ols is in the language generated by
the grammar if and only if there exists a derivation from the starting symb ol to the given
string
‚Ä¢ grammar, ontext-free: a grammar where the left-hand side of eah rule onsists of a
single non-terminal symb ol
‚Ä¢ grammar, ontext-sensitive: a grammar where the left-hand side of eah rule onsists of
any string of symb ols of size less or equal than the orresp onding right-hand side
‚Ä¢ graph, direted: a olletion of no des (arbitrary elements of a set) and edges (ordered
pairs of no des)
‚Ä¢ graph, undireted: a olletion of no des (arbitrary elements of a set) and edges (unordered
pairs of no des)
‚Ä¢ interpretation metho d: a tehnique for proving onuene by relating dierent redution
relations, namely by identifying a relation over the normal forms of another relation
‚Ä¢ lab el: a mark or tag whih may b e applied to sub-terms of a given term, in some sp ei
term set, sometimes in order to follow-up or trae redution steps
‚Ä¢ lab eling: a tehnique whih allows to assign lab els (marks) to some sub-terms of sp ei
terms
‚Ä¢ lamb da-alulus (Œª): a rewriting system, intro dued by A. Churh in the 1930's with the
goal of desribing most mathematial theories, in partiular omputing; it inludes the
use of variables, appliations and abstrations, and serves as a basis to the funtional
programming paradigm, and the desription of (some) logial theories
‚Ä¢ lamb da-omega (Œªœâ): a alulus with expliit substitution over de Bruijn indies
‚Ä¢ lamb da-omega-e (Œªœâe): a alulus with expliit substitution over de Bruijn indies and
omp osition rules
‚Ä¢ lamb da-s (Œªs): a alulus with expliit substitution over de Bruijn indies
‚Ä¢ lamb da-se (Œªse): a alulus with expliit substitution over de Bruijn indies and omp o-
sition rules onuent on op en terms
‚Ä¢ lamb da-sigma (ŒªœÉ): a two-sorted alulus with expliit substitution over de Bruijn indies
and a big numb er of rules
287
‚Ä¢ lamb da-upsilon (ŒªœÖ): a two-sorted alulus with expliit substitution over de Bruijn in-
dies
‚Ä¢ lamb da-w (Œªw): a alulus with weakening over de Bruijn indies
‚Ä¢ lamb da-ws (Œªws): a alulus with expliit substitution and weakening over de Bruijn
indies
‚Ä¢ lamb da-x (Œªx): a alulus with expliit substitution with names
‚Ä¢ lamb da-x (Œªxc): a alulus with expliit substitution with names and a omp osition rule
‚Ä¢ language: a set of strings from a given alphab et
‚Ä¢ language, ontext-free: a language whih ould b e desrib ed by a ontext-free grammar
‚Ä¢ language, ontext-sensitive a language whih ould b e desrib ed by a ontext-sensitive
grammar
‚Ä¢ logi: a branh of Mathematis studying, desribing, mo deling, axiomatizing and dis-
ussing the onept of truth and onseque n  e
‚Ä¢ mo del: a struture whih satises a given set of logial formulas; also used in a very
ample manner as an example or way of studying or abstrating some onept or question;
a onrete realization of some given idea
‚Ä¢ normal form: a term or ob jet whih annot b e redued anymore
‚Ä¢ normalization, strong (SN): the non existene of innite derivations; it applies to an ob jet
as well as to a set of ob jets
‚Ä¢ normalization, weak (WN): the existene of a derivation leading to a normal form; it
applies to an ob jet as well as to a set of ob jets
‚Ä¢ order: a relation satisfying reexivity, symmetry and transitivity
‚Ä¢ order, total: an order whih additionally satises that given any pair of elements, they
are related in one way or the other
‚Ä¢ orthogonal: for a TRS, the prop erty of not having ritial pairs and b eing left-linear
‚Ä¢ parallelization: a tehnique to proving onuene onsisting in onsidering a rule whih
rewrites in a single step all p ossible redexes whih are parallel, i.e. they do not overlap
or interfere with eah other
288
‚Ä¢ pattern: a term (or syntatial desription) whih may allow dierent terms to math;
also used as a skeleton or struture desription
‚Ä¢ pattern mathing: a tehnique whih allows to desrib e a funtion using patterns; the p os-
sibility for a term to b e an instane of a pattern, i.e. to b e the result of some substitution
applied to that pattern
‚Ä¢ p erp etuality: the p ossibility of following an innite redution
‚Ä¢ p osition: a string (usually onsisting of natural numb ers) indiating the lo ation (as a
branh) of a given sub-term within a given term
‚Ä¢ Post anonial system (PCS): an ARS where terms are the strings for a given (nite)
alphab et and rules are pairs of strings, p ossibly using variables whih denote strings
‚Ä¢ problem, deidable: a problem for whih an algorithm exists for solving every instane of
it
‚Ä¢ problem, undeidable: a problem whih is not deidable, i.e. there do es not exist any
algorithm for solving every instane of it
‚Ä¢ program: an implemented algorithm, an algorithm sp eied using a programming lan-
guage in suh a way that an b e exeuted by a omputer
‚Ä¢ redex: a term whih an b e rewritten, or a term with a p osition indiating the orre-
sp onding sub-term whih will b e rewritten
‚Ä¢ redut: a term whih omes from another term whih has b een rewritten; the result of a
redution applied to a given term
‚Ä¢ redution: in rewriting, the transformation of an ob jet into another by using a rewriting
relation
‚Ä¢ reexive relation: a relation whih satises that every element is related with itself
‚Ä¢ relation: a set of pairs of ob jets from a given set; a way or pro edure for lassifying pairs
of ob jets
‚Ä¢ rewriting: a mathematial theory whih studies and desrib es transformations b etween
syntatial ob jets over general or sp ei languages
‚Ä¢ rule, parallel: a rule whih redues many redexes in a single step, namely all whih an
b e redued without overlap or interferene
‚Ä¢ rule, rewrite: a p ortion of information on how to rewrite
289
‚Ä¢ semantis: the theory whih studies and desrib es the meaning of the language strutures
‚Ä¢ semi-Thue rewriting system (STS): an ARS where terms are the strings for a given (nite)
alphab et and rules are pairs of strings
‚Ä¢ set theory: a mathematial theory whih tries to mo del, axiomatize and prove questions
ab out memb ership into sets (lasses, olletions)
‚Ä¢ simulation: a derivation whih alulates the same term that another one; a prop erty
whih guarantees that, starting from any term, there exists a derivation with the same
nal redut than another, the one whih is simulated
‚Ä¢ skeleton: a struture denoting a term, p erhaps a term with some of its information
deleted; a skeleton may indiate whih lass the term is or whih struture it may have,
but without sp ei ontents
‚Ä¢ soundness : orretness , onsisteny with a given alulus or theory, preservation of las-
sial redutions
‚Ä¢ sort: a typ e, a family of terms; it is ommonly used for an n-sorted algebra, for instane
a two-sorted alulus (like ŒªœÉ)
‚Ä¢ standard: sometimes, a normal form; a strategy whih reahes normal forms
‚Ä¢ standardization: a tehnique or pro edure to ahieve, for any given element, a normal
form
‚Ä¢ step, rewriting: an ordered pair of elements from a rewriting system where the rst one
rewrites to the seond
‚Ä¢ strategy, rewriting: a riterion on how to rewrite every p ossible term admitting rewrite;
a deterministi subsys te m of a given ARS (sometimes, any sub-ARS)
‚Ä¢ strategy, eetive: a strategy whih is algorithmi, i.e. there is a pro edure whih alu-
lates the redut of any given term admitting redution
‚Ä¢ strategy, p erp etual: a strategy that always redues along an innite derivation if it exists
‚Ä¢ string: a sequen e (ordered set) of haraters
‚Ä¢ string rewriting system: a rewriting system whose ob jets are strings and its rules are
pairs of strings
‚Ä¢ sub jet redution: the preservation of typing after redution
290
‚Ä¢ substitution: a funtion (or pro edure) intended to substitute, inside a given term, every
o urrene of a given variable by another given term
‚Ä¢ substitution, losed/ground: an expliit substitution whih do not ontain (meta-)variables
‚Ä¢ substitution, expliit: a syntatial element (as a part of a given term) denoting a sub-
stitution; also, the tehniques and study of aluli whih allow the use of these elements
‚Ä¢ substitution, impliit: a funtion denoting a substitution to do in a given term
‚Ä¢ substitution, op en: an expliit substitution whih may ontain (meta-)variables (whih
may denote terms or substitutions)
‚Ä¢ sub-string: a string whih o urs inside another string
‚Ä¢ sub-term: a term as part of another term; a term o urring inside another term in a given
p osition
‚Ä¢ sub-tree: a tree whih o urs inside another tree, for example a branh
‚Ä¢ symmetrial relation: a relation whih satises that if a is related to b then b is related
to a
‚Ä¢ syntax: the theory whih studies and desrib es the sup erial struture of the languages
‚Ä¢ term: a syntatial ob jet or onstrution oming from a signature, to whih rewrite rules
may b e applied
‚Ä¢ term, losed/ground: a term whih annot ontain (meta-)variables
‚Ä¢ term, op en: a term whih an ontain (meta-)variables
‚Ä¢ term, semi-op en: a term whih may ontain (meta-)variables of sort term but not of sort
substitution
‚Ä¢ termination: normalization, the halting of a pro ess or alulation
‚Ä¢ term rewriting system (TRS): an ARS where the terms are rst order terms of a signature,
and rules satisfy some prop erties: left- hand sides should not b e variables, and right-hand
side variables should also app ear in the orresp onding left-hand sides
‚Ä¢ theory: a set of mathematial (usually logial) formulas whih is losed under inferene
rules; in Œª-alulus a theory usually onsists of a set of equalities whih are losed under
Œ≤-equivalene
291
‚Ä¢ transitive relation: a relation whih satises that if a related to b and b related to c then
a is related to c
‚Ä¢ translation: a mapping from one universe to another, for example mapping the the syntax
of a alulus into another one
‚Ä¢ tree: a hierarhial struture of information, an ayli onneted direted graph
‚Ä¢ typ e: in Œª-aluli, a way of lassifying some terms, usually aording to the arguments to
whih they an b e applied and to the return values
‚Ä¢ typing: the p ossibility of assigning a typ e to a given term
‚Ä¢ undeidability: the non-existene of an algorithm to solve a given problem
‚Ä¢ uniation: the p ossibility that two terms (or patterns) ould b eome equal by applying
to them some substitution
‚Ä¢ variable: a term whih annot b e deomp osed into sub-terms dierent than itself, and
it is not a onstant; a syntatial ob jet intended to b e replaed by some other p ossible
ob jets
‚Ä¢ variable, b ound: a variable inside a term whih is related to a variable whih is marked,
for example, by an abstrator
‚Ä¢ variable, free: a variable inside a term whih is not b ound
‚Ä¢ zo om-in: a strategy whih lo oks inside a term for another sub-term whih veries some
prop erty
292
293
App endix C
Some information ab out this do ument
La ni√±ez y el genio tienen en om√∫n el mismo √≥rgano motor: la uriosidad. 
F. Baon
Nuna sabes qui√©n tiene raz√≥n, pero siempre sabes qui√©n manda.  An√≥nimo
This thesis ollets the rst formal inursion by the author in the territories of rewriting
theory, namely in expliit substitution. We provide here some minimal data related to this
thesis: the information ontained herein, aessibility, some software to ols employed, p ossible
errata and other issues.
C.1 Home page
The internet web page whih aompanies this do ument is lo ated at the URL
http://www.d.u ba.ar/p eople/materias/reesritura/Ariel/PhDthesis. In this page, additional
data, exerises, software, omments, p ossible errata and addenda eventually app ear for refer-
ene.
C.2 Software
This PhD thesis was written using among other the following PC software pakages:
‚Ä¢ the implementation MikTex 2.4 of the LAT
E
X mathematial text pro essor
‚Ä¢ the WinEdit 5.4 LAT
E
X editor
‚Ä¢ parsing utilities by the author in order to prepro ess maros, les and indies.
294
C.3 Copyright questions
C.3 Copyright questions
This do ument, exept when expliitly indiated, has b een entirely pro dued and written
by the author. The intelletual prop erty of eah artile orresp onds to him (and p ossibly to
oauthors where indiated) and to the University of Buenos Aires, aording to urrent rules
and regulations for thesis. Any repro dution (rewriting?) of all or parts of the do ument is
prohibited, unless the author is ontated for authorization. Nevertheless all the information
an b e used in further work or researh, if ited prop erly.
C.4 The author
Some brief information ab out the author an b e found at the internet URL address
http://www.d.u b a.ar/p eople/materias/reesritura/Ariel (although it might b e outdated).
Areas of interest within Computer Siene are: logi, rewriting, lamb da alulus, ompiler
design, game theory.
Is it raining outside?
295
Index
abstrat rewriting system, 813, 16, 3649,
89, 122, 170, 206, 231, 247, 248, 262,
277, 284, 289291
abstration, 22, 55, 58, 73, 93, 145, 150, 164,
225, 228, 254, 257, 284
appliation, 5, 22, 55, 57, 58, 73, 78, 89, 93,
102, 105, 109, 110, 123, 124, 126,
128, 141, 145, 150, 165, 195, 214,
221, 225, 228, 232, 235, 236, 240,
241, 253, 254, 257, 258, 279, 281,
285
arity, 13, 14, 45, 46, 48, 125, 126, 165, 286
axiom, 36, 43, 213, 214, 247, 264, 281, 282,
286
base, 36, 211
basis, 4143, 49, 164, 287
alulus, 28, 10, 1625, 27, 28, 3032, 35
37, 3943, 48, 49, 5159, 62, 63, 67,
7074, 7779, 88, 89, 97, 98, 102,
105110, 114, 122, 123, 125130, 133
138, 140, 142145, 151153, 156, 159,
160, 164171, 175, 177, 184, 194, 206,
209, 212215, 221224, 231235, 246
248, 250254, 262264, 275277, 279,
280, 282, 284288, 290292
de Bruijn, 58
anoniity, 15, 37, 4547, 106, 152, 159, 164,
280, 285
ase binding, 166, 185, 208
haraterization, 49, 78, 89, 97, 98, 101, 102,
105, 160, 208, 246, 263, 285
Churh-Rosser, 168, 175, 285
losure, 9, 19, 28, 31, 32, 38, 53, 58, 70, 72,
73, 75, 78, 80, 82, 8588, 93, 106,
107, 112114, 125, 126, 128, 136, 137,
148, 150, 151, 155, 157, 158, 168,
171, 174, 175, 204, 205, 212, 214,
215, 222224, 231, 236, 238, 244, 245,
276, 279, 284, 285
traing, 79, 81, 86, 87
losure ondition, 171, 183, 204, 205
binary, 171, 174, 204, 205, 212, 215
o de, 264, 275277, 279
ombinator, 7, 169, 222, 281, 285
ommutation, 1012, 81, 82, 170, 174, 175,
177, 180183, 186, 190, 191, 194, 198
201, 204, 212215, 263, 264, 276, 277,
285
diagram, 170, 177
strong, 11, 186, 194
weak, 174, 175, 215, 276, 277
ompiler, 262
ompleteness, 213, 264
ompletion, 126
omplexity, 263, 285
omp osition, 32, 89, 106, 107, 113, 114, 125,
128, 166, 177, 209
omputability, 7, 285
omputable, 71, 233, 285, 286
omputation, 23, 99, 209
onuene, 3, 1012, 27, 36, 49, 52, 54, 55,
61, 63, 67, 70, 73, 75, 79, 106, 111,
113, 114, 125, 127, 130, 155, 170,
296
INDEX
171, 174, 175, 177, 183, 191, 193,
204206, 212, 214218, 234, 235, 247,
248, 263, 264, 276, 285288
weak, 11, 12, 113, 114, 125, 127, 174,
263, 276
onsisteny, 151, 290
onstant, 14, 4446, 48, 56, 107, 165, 212,
213, 232, 280, 281, 285, 286, 292
onstrutor, 73, 126, 164167, 169, 171, 184,
185, 208212, 263, 286
ontext, 4, 9, 1319, 21, 24, 36, 39, 59, 79,
8183, 8587, 98100, 110, 112, 136,
137, 139, 143, 148, 160, 209, 210,
224229, 231233, 235249, 251, 253
256, 264, 275, 280, 286288
evaluation, 209
go o d, 224226, 228, 231, 235, 236, 248,
249, 253255
right, 236240, 242244, 253
substitution, 79, 110
term, 79, 224, 227, 236, 237, 244
onversion, 5, 8, 17, 19, 20, 58, 166, 167,
280, 281, 284
o oking, 211
ritial pair, 55, 63, 115, 121, 122, 127, 171,
174, 181, 182, 194, 202, 203, 215,
263, 280, 288
de Bruijn, 5, 1921, 23, 25, 27, 31, 32, 40,
43, 48, 52, 58, 59, 67, 7074, 78, 102,
106, 123, 133, 143, 223, 232, 233,
254, 263, 264, 282
index, 21, 52, 106, 109, 110, 125, 133,
134, 152, 154, 160, 232, 275, 286
288
deidability, 36, 222, 248, 251
deidable, 4, 9, 36, 78, 99, 234, 235, 263,
285, 286, 289
degree, 46
depth, 201, 203, 210, 211, 215, 282
disagreement, 211
derivation, 9, 10, 12, 23, 25, 32, 39, 49, 52,
54, 57, 58, 61, 64, 68, 72, 75, 7779,
81, 82, 8590, 9296, 100, 102, 122,
129, 130, 142, 155, 159, 169, 170,
180183, 186, 190, 191, 198, 200, 201,
203, 213, 214, 221, 222, 231, 243,
245, 247, 250, 251, 263, 281, 285
288, 290
innite, 10, 32, 39, 57, 58, 77, 81, 82,
8589, 92, 102, 122, 288, 290
minimal, 85, 9496
diamond prop erty, 11, 12, 191, 193, 214, 286
divergene, 170, 214, 286
divide-and-onquer, 263, 264
edge, 16, 287
eieny, 7, 127, 128, 281
empty set, 13
equality, 4, 18, 20, 59, 150, 168, 169
equivalene, 9, 19, 39, 43, 49, 59, 70, 72, 73,
210, 284, 286, 291
exhange, 58, 59, 73
expansion, 3, 7, 32, 82, 221224, 231, 234,
235, 242, 245, 247, 248, 250, 253,
263, 264, 286
extensionality, 284, 286
formalism, 4, 8, 36, 37, 44, 48, 49, 78, 164,
165, 253
fratal, 46, 281
funtion, 5, 6, 10, 13, 14, 1820, 40, 44, 48,
49, 56, 59, 71, 73, 98, 106109, 113,
114, 125, 129, 130, 138, 139, 144,
151, 164, 165, 213, 222, 232, 233,
275, 276, 280, 286, 289, 291
297
INDEX
bijetive, see bijetive funtion
omputable, 233
symb ol, 14, 48, 126, 275, 277, 286
funtional programming, 6, 40, 164, 263, 287
garbage, 22, 73, 83, 8689
globally nite, 39
grammar, 40, 156158, 160, 209, 245, 253,
287, 288
ontext-free, 253, 288
ontext-sensitive, 245, 288
graph, 16, 36, 37, 44, 46, 47, 49, 215, 287,
292
direted, 36, 292
halt, 10, 291
head, 14, 165, 208212, 236
higher-order, 3, 7, 8, 18, 40, 55, 71, 264
hole, 14, 16, 17, 24, 81, 83, 110, 164, 209,
210, 224226, 229, 230, 236245, 257
homomorphism, 56, 232
implementation, 5, 7, 22, 52, 73, 222, 275,
279
inonsisteny, 8
inremental, 214, 215
indutive, 14, 15, 17, 70, 78, 89, 97, 113, 124,
138, 140, 149, 166, 211, 223, 254, 263
inferene, 36, 69, 72, 80, 91, 93, 204, 212,
213, 215, 246, 247, 253, 264, 280
integer, 108
interpretation, 7, 281
interpretation metho d, 175, 287
interpreter, 262
invariane, 145, 155, 225, 228, 235, 237, 240,
249, 254
isomorphism, 12, 16, 20, 43, 47, 49, 59, 61,
72, 138, 140, 152, 233
lab el, 215, 217, 287
lab eling, 287
lamb da-B-C, 167170, 175, 177, 180, 204
206, 212214, 218, 276
lamb da-alulus, 164, 285, 287
with onstrutors, 164, 165, 167, 171,
212, 263
lamb da-empty, 32, 5259, 62, 70, 72, 73,
263, 264
lamb da-empty-dB, 59, 61, 67, 70, 7275
lamb da-empty-dBg, 74, 75
lamb da-empty-S, 62, 63, 67, 68, 7073
lamb da-omega, 22, 2830, 136, 138, 142, 254,
287
lamb da-omega-e, 22, 2830, 136, 138, 139,
151, 153157, 159, 160, 254, 263, 287
lamb da-s, 22, 2527, 30, 105107, 122, 125,
134138, 140, 141, 143, 223, 233, 248
254, 263, 282, 287
lamb da-se, 22, 28, 32, 114, 122, 125, 134
136, 138, 140144, 160, 254, 263, 287
lamb da-sigma, 7, 28, 31, 32, 89, 105, 106,
109, 123, 125, 134, 151, 152, 160,
254, 264, 282, 287, 290
lamb da-upsilon, 7, 2225, 49, 7779, 81, 82,
89, 98, 100, 102, 105, 106, 109, 110,
112114, 121, 122, 124130, 223, 224,
231235, 238, 240243, 245254, 263,
277, 279, 280, 282, 288
lamb da-w, 60, 288
lamb da-ws, 102, 279, 288
lamb da-x, 22, 23, 32, 40, 41, 43, 5258, 60,
72, 73, 75, 78, 83, 89, 98, 102, 110,
127, 169, 178180, 184188, 190193,
196, 197, 222, 223, 232, 233, 250,
253, 276, 277, 280, 286, 288
lamb da-x, 288
298
INDEX
language, 4, 68, 49, 125, 126, 143, 152, 164,
169, 212, 222, 245, 252, 262, 280,
287291
ontext-free, 245
ontext-sensitive, 245, 252
level, 3, 7, 18, 20, 22, 65, 126, 262, 279
lexiographi indution, see lexiographi or-
der
linearity, 44, 47, 49, 54, 55, 165, 212, 276,
288
left, 47, 49, 54, 55, 288
right, 47, 49
logi, 6, 8, 14, 16, 36, 53, 55, 78, 164, 165,
214, 247, 279, 285, 288
ombinatory, 53, 55, 214, 279, 285
map, 6, 12, 31, 38, 40, 56, 59, 71, 72, 105
107, 109, 110, 144, 165, 232, 233,
252, 253, 292
replaement, 40
mathing, 6, 14, 16, 37, 41, 164, 165, 212,
237, 243, 263, 286, 289
meta-variable, 28, 41, 58, 114, 123, 126, 134,
136, 137, 143, 157, 158, 279
mo del, 6, 7, 212, 288, 290
morphism, 250, 251
multi-graph, 36
name, 5, 8, 16, 51, 52, 59, 70, 72, 89, 91,
125, 139, 165, 222, 232, 263, 288
natural numb ers, 23, 28, 32, 122, 289
no de, 16, 36, 46, 214, 215, 287
normal form, 4, 8, 10, 12, 18, 22, 24, 27,
31, 41, 43, 52, 55, 56, 58, 59, 6164,
70, 71, 96, 99, 107, 109, 123, 134,
142144, 149, 151, 152, 154, 156
160, 164, 165, 169, 208, 210213, 222,
232, 234, 235, 263, 264, 280, 287,
288, 290
head
quasi, 208
quasi, 41, 208211
dened, 41, 210, 211
normalization, 3, 4, 7, 8, 10, 12, 21, 36, 52,
58, 68, 70, 77, 106, 107, 130, 133,
134, 142, 144, 156, 159, 160, 170,
212, 222, 253, 263, 288, 291
strong, 7, 10, 21, 36, 52, 77, 106, 130,
170, 212, 222
preservation, 7, 23, 25, 27, 28, 30, 32,
52, 57, 58, 7073, 79, 106, 125, 130,
222, 247, 248, 264
weak, 70, 133, 134, 142, 144, 156, 159,
160, 263
one-sorted, 45, 160, 277
op erator, 7, 8, 13, 17, 1924, 28, 31, 32, 38,
51, 53, 59, 62, 63, 67, 72, 73, 77, 106,
107, 134, 136, 262
order, 24, 7, 8, 12, 13, 16, 18, 23, 27, 28,
40, 44, 49, 55, 62, 67, 71, 78, 85, 102,
106, 115, 123, 125, 128, 144, 148,
151, 152, 156, 171, 175, 177, 212,
213, 217, 223, 264, 286288, 291
lexiographi, 85
reursive path, 62
total, 85
well-founded, 86, 87, 171, 203
orthogonality, 39, 54, 55, 77, 288
paradigm, 3, 4, 8, 9, 3537, 40, 44, 48, 49,
73, 262, 264, 285, 287
parallelization, 5, 65, 183, 185, 186, 280,
281, 288, 289
pattern, 6, 41, 73, 164, 165, 212, 243, 263,
286, 289, 292
p erp etuality, 7779, 88, 89, 94, 95, 102, 289
299
INDEX
p osition, 21, 24, 37, 53, 54, 57, 58, 60, 64
66, 74, 81, 83, 86, 111, 143, 144, 149,
159, 208, 209, 211, 225227, 229, 235
237, 239245, 255, 281, 286, 289, 291
Post anonial system, 15, 16, 37, 44, 4749,
262, 289
problem, 35, 8, 9, 14, 22, 32, 35, 36, 42, 49,
58, 70, 82, 99, 107, 113, 114, 124,
134, 142, 151, 152, 164, 215, 221
223, 234, 235, 242, 248, 250, 253,
254, 262, 264, 284286, 289, 292
deidable, 8
undeidable, 8, 36, 42, 97, 222, 233235,
245, 253, 264, 289
program, 4, 165, 175, 204, 212, 222, 264,
275, 276, 279, 284, 289
redex, 3, 8, 15, 44, 45, 47, 5355, 57, 60,
6466, 74, 81, 83, 84, 86, 87, 92,
94, 98100, 111, 115, 124, 130, 149,
151, 152, 157159, 181, 182, 194
198, 202, 203, 208, 222, 288, 289
redut, 12, 54, 72, 83, 112, 113, 197, 225,
226, 228, 245, 254, 255, 257, 289,
290
redution, 59, 13, 14, 1619, 21, 22, 25, 27,
30, 32, 36, 37, 39, 40, 44, 4649, 51
54, 5658, 60, 61, 6466, 6870, 72
75, 78, 8089, 98100, 102, 114, 115,
123, 135, 136, 139145, 149, 151, 152,
154, 155, 159, 165168, 171, 174, 178,
180, 181, 183, 185, 190, 191, 196,
197, 199, 202, 204, 206, 208, 211
213, 222, 225229, 232, 233, 235, 236,
238243, 245, 247, 253258, 263, 277,
280, 284287, 289, 290
inner-most, 102, 142, 152, 159, 275, 277
internal, 80, 154, 155
left-most, 8, 18, 58, 86, 98100, 102, 152,
159, 277, 280, 281
outer-most, 8, 275, 277
right-most, 102, 238, 243
ro ot, 69, 70
redundany, 41, 276
relation, 5, 813, 1517, 19, 32, 3639, 41,
44, 47, 49, 52, 56, 68, 70, 72, 75, 80,
83, 107, 115, 125, 135, 137, 168, 170,
171, 174, 204, 210214, 233, 234, 248,
262264, 281, 284, 286289, 291, 292
ompatible, 4, 15, 78, 83, 135, 137, 150,
246
reexive, 38, 185, 189, 288, 289
symmetrial, 11, 288, 291
transitive, 9, 12, 38, 288, 292
residual, 3
rewriting
ontext-sensitive, 37, 40, 275, 276, 286
step, 12, 16, 232, 286
rewriting theory, 3, 4, 12, 35, 36, 262
ro ot, 53, 54, 57, 60, 6466, 74, 84, 85, 139,
140, 145, 149, 154, 178, 189, 190,
195, 197, 208, 225, 226, 228230, 238,
240, 241, 254258
rule, 3, 4, 6, 7, 1316, 18, 19, 2131, 36, 37,
40, 41, 4449, 5154, 57, 58, 62, 63,
6770, 7275, 7779, 83, 85, 8891,
9397, 100102, 106, 111115, 122
130, 135141, 143, 145147, 151157,
159, 160, 165168, 171, 174, 175, 177,
178, 180, 189, 194, 203, 204, 206,
208, 209, 211215, 221223, 231, 232,
238243, 245248, 253, 262264, 276,
277, 280282, 284291
omp osition, 73, 89, 106, 114, 115, 122
125, 127, 128, 152, 160, 263, 285,
300
INDEX
287, 288
inferene, 78, 90, 102, 212, 214, 245247,
276, 291
rewrite, 4, 15, 18, 19, 2224, 26, 27, 29,
31, 36, 126, 135139, 153, 212, 222,
232, 280282, 285, 291
typing, 21, 26, 27, 30, 67, 68, 70, 135
138, 143, 156, 248, 280
semantis, 3, 164, 165, 213, 284, 290
semi-Thue rewriting system, 15, 16, 36, 37,
4449, 262, 281, 290
separation, 41, 164, 165, 169, 206, 209213
weak, 165, 212
sequent, 67, 253
set
reursive, 254, 264
set theory, 8, 290
signature, 13, 14, 40, 4446, 286, 291
simulation, 7, 49, 52, 53, 56, 59, 61, 63,
64, 67, 70, 73, 75, 110, 123, 143,
144, 154, 155, 159, 222, 232, 234
236, 243, 247, 290
size, 25, 130, 214, 263, 280, 282, 287
skeleton, 79, 80, 210, 289, 290
equivalene, 210
sort, 7, 28, 32, 102, 137, 181, 237, 290, 291
soundness , 7, 52, 54, 55, 59, 61, 70, 72, 73,
75, 128, 143, 234, 235, 247, 290
standard, 12, 32, 58, 62, 81, 122, 253, 285,
290
standardization, 8, 290
stop, 10, 169
strategy, 4, 8, 18, 23, 58, 77, 78, 98100,
102, 134, 142, 152, 159, 160, 263,
264, 275277, 279, 290, 292
p erp etual, 77, 78, 102
rewriting, 4, 77
string, 1316, 44, 47, 48, 237, 281, 287291
string rewriting system, see Post anonial
system
struture, 5, 6, 9, 13, 16, 35, 36, 49, 106, 125,
140142, 145, 164, 177, 184, 231, 263,
288292
sub-alulus, 22, 3941, 72, 122, 123, 126,
165, 221, 231, 248, 277
sub-string, 291
sub-term, 24, 31, 78, 79, 83, 92, 225, 236,
237, 244, 248, 287, 289, 291, 292
sub-tree, 276, 281, 291
sub jet redution, 7, 8, 21, 30, 39, 68, 140,
141, 247, 290
subset, 10, 13, 18, 3742, 45, 46, 72, 86, 92,
124, 137, 171, 175, 214, 221, 223,
246, 262, 275, 277
substitution, 3, 58, 1425, 28, 31, 32, 35,
40, 41, 43, 48, 49, 5153, 58, 59, 62,
70, 72, 73, 7783, 86, 87, 89, 90, 92
95, 9799, 101, 102, 105110, 112
115, 122, 123, 125129, 133, 136, 137,
142, 144, 145, 151, 153, 154, 165,
167170, 177, 185, 208, 209, 212, 221
223, 228, 232, 237, 239, 240, 243,
244, 253, 254, 262264, 275, 277, 279,
280, 284, 285, 287289, 291, 292
expliit, 3, 7, 8, 22, 23, 31, 35, 41, 43, 48,
49, 5153, 58, 59, 70, 73, 77, 78, 102,
106, 107, 109, 123, 133, 165, 212,
221223, 253, 254, 262264, 275, 284,
285, 287, 288, 291
alulus, 22, 41, 49, 5153, 77, 223,
275, 284, 285
op en, 28, 115, 123, 137
subsumption, 151, 153
301
INDEX
subsys te m, 3, 6, 8, 13, 3538, 40, 41, 4345,
49, 78, 88, 167, 169171, 174, 175,
177, 204206, 212215, 218, 248, 262,
263, 276, 290
sues s or, 9, 10, 12, 44
syntax, 47, 17, 19, 21, 22, 24, 31, 37, 40, 41,
52, 58, 59, 62, 67, 73, 105, 106, 114,
122, 123, 125127, 133, 137, 156, 157,
165, 245, 246, 262, 280, 285, 291, 292
term, 38, 1125, 27, 28, 3032, 3749, 51
53, 5668, 7074, 7783, 8590, 92
94, 9699, 102, 106, 107, 109115,
122130, 133139, 142144, 148160,
164170, 174, 175, 177, 178, 180
182, 185, 189, 191, 194, 198201, 203,
206, 208214, 221225, 228, 231237,
239, 240, 242254, 257, 262264, 277,
279282, 284292
losed, 61, 106, 122, 124
dened, 41, 208
ground, 15, 44, 46, 47, 139
head
dened, 210
quasi, 208
op en, 27, 28, 30, 41, 73, 106, 113115,
122125, 127, 134, 137, 142, 143, 149,
151157, 159, 160, 263, 277, 287
pure, 7, 22, 31, 32, 51, 56, 63, 64, 81,
82, 109, 110, 112, 113, 122, 128, 137,
221224, 231, 232, 235, 242, 243, 245,
247, 248, 252254, 263, 264
semi-op en, 41, 142, 143, 149, 152, 153,
155, 159, 160
undened, 41, 208210
term rewriting system, 13, 15, 16, 36, 37, 39,
40, 42, 4449, 7779, 98, 102, 215,
222, 262, 275, 277, 281, 285, 286,
288, 291
termination, see normalization
theory, 3, 4, 69, 12, 17, 18, 22, 35, 36, 44,
125, 262, 264, 287, 289291
translation, 6, 7, 20, 122124, 141, 142, 144,
151, 154, 155, 232, 250, 251, 281, 292
go o d, 6
tree, 46, 93, 212, 214218, 222, 247, 276,
281, 291, 292
two-sorted, 25, 98, 106, 107, 263, 277, 287,
288, 290
typ e, 8, 21, 28, 32, 39, 67, 68, 133138, 140,
142144, 148, 213, 224, 236, 245, 279,
280, 286, 290, 292
preservation, 68
system, 213
typing, 3, 5, 8, 21, 28, 30, 39, 49, 52, 57,
58, 67, 68, 70, 73, 125, 133137, 152,
214, 222, 247, 248, 264, 280, 290, 292
simple, 21, 26, 30, 52, 58, 67, 70, 127,
133136, 138, 139, 151, 153, 159, 160,
222, 248, 263, 280
undeidability, 223, 233, 234, 250, 253, 292
uniation, 6, 14, 292
variable, 4, 5, 1420, 22, 27, 28, 3948, 51,
55, 58, 59, 78, 114, 122, 123, 126,
134, 136, 137, 143145, 148151, 153,
157, 158, 165168, 174, 178, 180, 184
186, 189, 208211, 223, 277, 279, 281,
284287, 289, 291, 292
b ound, 17, 18, 167, 284
onvention, 18, 53, 178, 179
free, 1719, 43, 59, 145, 166, 174, 185,
186, 285
weakening, 102, 288
302
INDEX
zo om-in, 4, 292
303
INDEX
Final quotations, anyone?
No hay armai√≥n tan absurda que un l√≥sofo no sea apaz de haer.  M. T.
Cier√≥n
Para tener verdadera libertad hay que ser eslavo de la losof√≠a.  Epiuro
El progreso de la ienia es inversamente proporional a la antidad de mono-
graf√≠as que se publian.  Murphy
Toda solui√≥n genera nuevos problemas.  Murphy
Los buenos esritores tienen estas dos osas en om√∫n: preeren ser ompren-
didos a ser admirados, y no esriben para el letor demasiado astuto y demasiado
r√≠tio.  F. Nietzshe
Nada esribe aqu√©l uyos esritos no se leen.  Marial
I've travel led every ountry,
I've travel led in my mind
It seems we're on a journey,
A trip through spae and time
And somewhere lies the answer
To al l the questions why
What real ly makes the dierene
Between al l dead and living things,
The wil l to stay alive.
 ABBA, Move On
304
