SORTING BY TRANSPOSITIONS∗
VINEET BAFNA† AND PAVEL A. PEVZNER‡
SIAM J. DISCRETE MATH. c© 1998 Society for Industrial and Applied Mathematics
Vol. 11, No. 2, pp. 224–240, May 1998 004
Abstract. Sequence comparison in computational molecular biology is a powerful tool for
deriving evolutionary and functional relationships between genes. However, classical alignment al-
gorithms handle only local mutations (i.e., insertions, deletions, and substitutions of nucleotides)
and ignore global rearrangements (i.e., inversions and transpositions of long fragments). As a result,
the applications of sequence alignment to analyze highly rearranged genomes (i.e., herpes viruses or
plant mitochondrial DNA) are rather limited. The paper addresses the problem of genome compari-
son versus classical gene comparison and presents algorithms to analyze rearrangements in genomes
evolving by transpositions. In the simplest form the problem corresponds to sorting by transposi-
tions, i.e., sorting of an array using transpositions of arbitrary fragments. We derive lower bounds
on transposition distance between permutations and present approximation algorithms for sorting by
transpositions. The algorithms also imply a nontrivial upper bound on the transposition diameter of
the symmetric group. Finally, we formulate two biological problems in genome rearrangements and
describe the first algorithmic steps toward their solution.
Key words. computational molecular biology, genome rearrangements, transpositions, the
symmetric group, approximation algorithm
AMS subject classifications. 15A15, 15A09, 15A23
PII. S089548019528280X
1. Introduction. Studies of molecular evolution of herpes viruses raised many
more questions than they answered. Genomes of herpes viruses evolve so rapidly that
the extremes of present-day phenotypes may appear quite unrelated. As a result,
the similarity between many genes in herpes viruses is so low that it is frequently
indistinguishable from the background noise (Karlin, Mocarski, and Schachtel [16]).
In particular, there is little or no cross-hybridization between DNAs of Epstein–Barr
virus EBV and Herpes simplex virus HSV-1 and until recently there was no unam-
biguous evidence that these herpes viruses actually had a common evolutionary origin
(McGeoch [20]). As a result the classical methods of sequence comparison are not very
useful for such highly diverged genomes and the ventures into the quagmire of molec-
ular phylogeny of herpes viruses may lead to contradictions, since different genes give
rise to different evolutionary trees (Griffin and Boursnell [11]). However, recently a
new approach to analyze highly diverged genomes was proposed, based on compar-
ison of gene orders versus traditional comparison of DNA sequences (Sankoff et al.
[24]). Since it is often found that the order of genes is much more conserved than the
DNA sequence (Franklin [9]) this approach seems to be a method of choice for many
“hard-to-analyze” genomes.
∗Received by the editors March 10, 1995; accepted for publication (in revised form) June 2,
1997. A preliminary version of this paper appeared in Proc. 6th Annual ACM-SIAM Symposium on
Discrete Algorithms, San Francisco, CA, SIAM, Philadelphia, PA, 1995, pp. 614–623.
http://www.siam.org/journals/sidma/11-2/28280.html
†Bioinformatics, SmithKline Beecham, 709 Swedeland Road, King of Prussia, PA 19406 (baf-
nav1@mh.us.sbphrd.com). Most of this author’s research was carried out while he was at the Penn-
sylvania State University, University Park, PA and at DIMACS, Piscataway, NJ.
‡Departments of Mathematics and Computer Science, University of Southern California, DRB
155, Los Angeles, CA 90089-1113 (ppevzner@hto-a.usc.edu). The research of this author was sup-
ported by NIH grant 1R01 HG00987-01, by an NSF Young Investigator Award, and by NSF grant
CCR-9308567.
224
SORTING BY TRANSPOSITIONS 225
Analysis of genomes of EBV and HSV-1 reveals that evolution of these herpes
viruses involved a number of inversions and transpositions of large fragments; in
particular, an analogue of the gene UL52-BSLF1 (required for DNA replication) in
common herpes virus precursor “jumped” from one location in the genome to another
(biologists call this event a transposition). The analysis of such rearrangements at the
genome level might be more conclusive than the analysis at the gene level traditionally
used in molecular evolution. However, there are almost no computer science results
allowing a biologist to analyze genome rearrangements.
Genomes evolve by inversions and transpositions as well as by more simple opera-
tions of deletion, insertion, and duplication of fragments. Inversions seem to be a very
common rearrangement; in fact, some genomes (for example, many plant mitochon-
drial DNA) are believed to evolve almost solely by inversions (Palmer and Herbon
[23]). A combinatorial problem of sorting by reversals (corresponding to genome rear-
rangements by inversions) has been studied intensively in recent years, and currently
there are two software programs which prove to be useful for analyzing rearrangements
in animal (Sankoff et al. [24]) and plant (Bafna and Pevzner [3]) organelle DNA. In
1992 Kececiouglu and Sankoff suggested the first performance guarantee algorithm
for sorting by reversal (see [17]). Later Bafna and Pevzner [2] devised a 1.75 perfor-
mance guarantee algorithm for sorting by reversals and proved Gollan’s conjecture
on the reversal diameter of the symmetric group. See also Kececioglu and Ravi [18]
and Hannenhalli and Pevzner [13] for recent progress on genome rearrangements. An
interesting problem related to sorting by reversals is the problem of sorting by pre-
fix reversals, also known as the pancake flipping problem (Gates and Papadimitriou
[10]). Improved bounds for sorting by prefix reversals have been obtained recently
(see Cohen and Blum [4]; Heydari and Sudborough [14]).
In a study of herpes viruses, Hannenhalli et al. [12] faced the problem of analyzing
an entire spectrum of genome rearrangements—in particular, transpositions. As a
first approximation, transpositions in genome rearrangements can be modeled in a
straightforward but limited manner by sorting by transpositions, described below.
We assume that the order of genes in a genome is represented by a permutation
pi = pi1pi2, . . . , pin. Extend the permutation to include pi0 = 0 and pin+1 = n+ 1. For
a permutation pi, a transposition ρ(i, j, k) (defined for all 1 ≤ i < j ≤ n + 1 and all
1 ≤ k ≤ n + 1 such that k 6∈ [i, j]) “inserts” an interval [i, j − 1] of pi between pik−1
and pik (Fig. 1.1), i.e., ρ(i, j, k) corresponds to a permutation 1 . . . i− 1 i i+1 . . . . . . . . . j-2 j-1 j . . . k-1 k . . . n
1 . . . i− 1 j . . . k-1 i i+1 . . . . . . . . . j-2 j-1 k . . . n
 .
Clearly, pi ·ρ(i, j, k) has the effect of moving genes pii, pii+1, . . . , pij−1 to a new location
in a genome. Also, note that for i < j < k, ρ(i, j, k) has the effect of exchanging
blocks pii, . . . , pij−1 and pij , . . . , pik−1, and ρ(i, j, k) = ρ(j, k, i).
Given permutations pi and σ, the transposition distance problem is to find a series
of transpositions ρ1, ρ2, . . . , ρt such that pi · ρ1 · ρ2, . . . , ρt = σ and t is minimum. We
call t the transposition distance between pi and σ. Note that transposition distance
between pi and σ equals the transposition distance between σ−1pi and the identity
permutation ı. Sorting pi by transpositions is the problem of finding transposition
distance d(pi) between pi and ı. Note that the “biological” definition of transpositions
used in this paper is different from the usual “algebraic” definition.
Transpositions generate the symmetric group Sn, and we seek a shortest prod-
uct of generators ρ1 · ρ2, . . . , ρt that equals pi²Sn. Even and Goldreich [8] show that,
226 VINEET BAFNA AND PAVEL PEVZNER
0 8 5 1 4 3 2 7 6 9
0 6 91 4 3 2 7 8 5
FIG. 1.1. Transposition ρ(1, 3, 8) on pi transforms cycle graph G(pi) into G(piρ).
given a set of generators of a permutation group, determining the shortest product
of generators that equals pi is NP-hard. In our problem, the generator set is fixed
and the complexity status of sorting by transpositions is unknown. The only known
polynomially solvable variant of sorting by transpositions is sorting by transpositions
ρ(i, i + 1, i + 2), where the operation is an exchange of adjacent elements. For this
problem, polynomial algorithms exist for both linear and circular permutations (Jer-
rum [15]). Aigner and West [1] found a simple algorithm for sorting by transpositions
ρ(1, 2, i) when the operation is reinsertion of the first element.
Sorting by transpositions is a somewhat harder combinatorial problem than the
previously studied sorting by reversals; in particular, the transposition diameter of
the symmetric group is still unknown. To devise a performance guarantee algorithm
for sorting by transpositions, we establish lower bounds for transposition distance
based on the notion of the cycle graph of a permutation. In section 2 we show that
the number of alternating cycles in this edge-colored graph is a bottleneck for sorting
by transposition. In section 3 we derive upper bounds for sorting by transposition
based on the analysis of crossing cycles in the cycle graph. More involved analysis
in section 4 provides even better upper bounds in the case where the cycle graph
contains long cycles. However, this construction breaks for short cycles. Somewhat
surprisingly, the analysis of parity of cycles in the cycle graph provides a compromise
and leads to a 1.75 performance guarantee algorithm (section 5). Finally, in section
6 we devise a 1.5 performance guarantee algorithm for sorting by transpositions by
exploiting both the structure and parity of crossing cycles in the cycle graph. As
an application, we derive a nontrivial upper bound on the transposition diameter of
the symmetric group. Algorithms for sorting by reversals and transpositions present
the first steps toward the solutions of two open biological problems described in the
last section.
2. Lower bounds for sorting by transpositions. For all 0 ≤ i ≤ n, the pair
(pii, pii+1) is a breakpoint if pii+1 6= pii + 1. Observe that the identity permutation
is the only permutation with 0 breakpoints, and therefore, sorting a permutation
corresponds to decreasing the number of breakpoints. However, this correspondence
SORTING BY TRANSPOSITIONS 227
i-1 i j-1 j k-1 k
(a)
ii-1 j-1 j k-1 k
(b)
ii-1 j-1 j k-1 k (c) ii-1 j-1 j k-1 k (d)
FIG. 2.1. Transpositions change number of cycles in cycle graphs.
is not tight in that a permutation with few breakpoints may be more distant from
the identity permutation than one with more breakpoints. Also, it is easy to see
that a transposition can decrease the number of breakpoints by at most 3, implying
a trivial lower bound of d(pi) ≥ #breakpoints(pi)3 . However, not all permutations allow
transpositions that reduce the number of breakpoints by 3, so the bound is not tight.
We introduce the notion of a cycle graph of a permutation and use it to obtain
improved lower bounds.
A directed edge-colored cycle graph of pi, denoted by G(pi), is the graph with
vertex set {0, 1, . . . , n+ 1} and edge set defined as follows. For all 1 ≤ i ≤ n+ 1, gray
edges are directed from i− 1 to i and black edges from pii to pii−1 (In Fig. 1.1, black
edges are shown by thick lines and gray edges are shown by thin lines).
An alternating cycle of G(pi) is a directed cycle in which the edges alternate colors.
Observe that for each vertex in G(pi) every incoming edge is uniquely paired with an
outgoing edge of different color. This implies that there is a unique decomposition of
the edge set of G(pi) into alternating cycles. In what follows, we will use cycle to refer
to an alternating cycle and use k-cycle to refer to an alternating cycle of length 2k.
Also, we call a k-cycle long if k > 2, and short otherwise.
There are a total of 2(n+1) edges and at most (n+1) cycles in G(pi) (the identity
permutation is the only permutation with n+ 1 cycles). For a permutation pi, denote
the number of cycles in G(pi) as c(pi). Then the sequence of transpositions that sort
pi must increase the number of cycles from c(pi) to n+ 1. For a permutation pi and a
transposition ρ, denote ∆c(ρ) = c(piρ) − c(pi) as the change in number of cycles due
to transposition ρ.
LEMMA 2.1. ∆c(ρ) ∈ {2, 0,−2}.
Proof. A transposition ρ(i, j, k) involves six vertices of graph G(pi) (pii−1, pii, pij−1,
pij , pik−1, pik) and leads to removing three black edges ((pii, pii−1), (pij , pij−1), and
(pik, pik−1)) and adding three new black edges ((pij , pii−1), (pii, pik−1), and (pik, pij−1)).
Three removed edges belong to either three, two, or one cycles in the cycle decom-
position of G(pi). In the case where the removed edges belong to three cycles, c(piρ) =
c(pi)− 3 + 1, since these three cycles correspond to one cycle in G(piρ) (Fig. 2.1a). In
the case where the removed edges belong to two cycles, c(piρ) = c(pi) − 2 + 2, since
these two cycles correspond to two cycles in G(piρ) (Fig. 2.1b). In the case where
the removed edges belong to a single cycle C, there are two subcases (Figs. 2.1c and
2.1d). In the subcase shown in Fig. 2.1c, c(piρ) = c(pi) − 1 + 1, since C corresponds
to one cycle in G(piρ). In the subcase shown in Fig. 2.1d, c(piρ) = c(pi)− 1 + 3, since
C corresponds to three cycles in G(piρ).
Lemma 2.1 immediately gives a lower bound on d(pi).
THEOREM 2.2. d(pi) ≥ n+1−c(pi)2 .
228 VINEET BAFNA AND PAVEL PEVZNER
A cycle in G(pi) is odd if it has an odd number of black edges and even otherwise.
To establish a better lower bound we analyze odd and even cycles separately. Define
codd(pi) (ceven(pi)) as the number of odd (even) cycles in pi. For a permutation pi, and
a transposition ρ, denote ∆codd(ρ) = codd(piρ) − codd(pi) as the change in number of
odd cycles due to transposition ρ.
LEMMA 2.3. ∆codd(ρ) ∈ {2, 0,−2}.
Proof. The proof of Lemma 2.1 implies that the only case when a transposition ρ
leads to creating more than two new cycles in G(piρ) is the case presented in Fig. 2.1d.
In this case, three cycles are added to G(pi) and one cycle is removed from G(pi). If
all three added cycles are odd, then the removed cycle is also odd, and codd(piρ) =
codd(pi) − 1 + 3. Therefore ∆codd(ρ) ≤ 2. This condition, Lemma 2.1, and parity
considerations imply ∆codd(ρ) ∈ {2, 0,−2}.
As the identity permutation has n + 1 odd cycles, Lemma 2.3 implies a better
bound.
THEOREM 2.4. d(pi) ≥ n+1−codd(pi)2 .
Define d(n) = maxpi∈Sn d(pi) to be the transposition diameter of the symmetric
group of order n. Observing that for pi = n n − 1, . . . , 2 1, codd(pi) = 1 if n is
even and codd(pi) ≤ 2 if n is odd, the transposition diameter of the symmetric group
Sn is at least bn2 c. One can verify that d(n n − 1, . . . , 1) ≤ bn2 c + 1 for all n and
d(n) = d(n n− 1, . . . , 1) = bn2 c+ 1 for 3 ≤ n ≤ 10.
3. Upper bounds for sorting by transpositions. For x ∈ {2, 0,−2}, define
an x-move on pi as a transposition ρ such that ∆c(ρ) = x. In order to sort faster, we
would like to use as many 2-moves as possible. In this section, we study the structure of
cycles which allow 2-moves and use that to devise a performance guarantee algorithm
for sorting by transpositions.
We number the black edges of the cycle graph G(pi) from 1 to n+ 1 by assigning
label i to a black edge from pii to pii−1. We say that transposition ρ(i, j, k) acts on
edges i, j, and k. We also say that a transposition ρ(i, j, k) acts on a cycle C if all three
black edges i, j, and k belong to C. The proof of Lemma 2.1 implies the following
simple observations.
LEMMA 3.1. If a transposition ρ acts on a cycle and creates more than one new
cycle in G(piρ), then ρ is a 2-move.
LEMMA 3.2. If a transposition ρ acts on edges belonging to exactly two different
cycles, then ρ is a 0-move.
Figure 2.1 presents two different kinds of cycles—nonoriented for which no 2-
moves are possible (Fig. 2.1c) and oriented for which a 2-move is possible (Fig. 2.1d).
Below we give a formal definition of oriented and nonoriented cycles.
Consider a k-cycle C visiting (in order) the black edges i1, . . . , ik. A cycle C can
be written in k possible ways depending on the choice of the first black edge. Below
we assume that the initial black edge i1 of cycle C starts at its “rightmost” vertex in
pi, i.e., i1 = max1≤t≤k it.
For all k > 1, a cycle C = (i1, . . . , ik) is nonoriented if i1, . . . , ik is a decreasing
sequence; otherwise C is an oriented cycle. We will also use a characterization of
nonoriented cycles in the terms of edge directions. A gray edge joining pit = i−1 with
pis = i in G(pi) is directed left if t > s and is directed right otherwise. Clearly, a cycle
C = (i1, . . . , ik) is nonoriented iff k > 1 and C has exactly one right edge (a gray edge
between black edges ik and i1).
LEMMA 3.3. If C is an oriented cycle, then there exists a 2-move acting on C. If
C is a nonoriented cycle, then there exist no 2-moves acting on C.
SORTING BY TRANSPOSITIONS 229
i 1 sri 2
C C’
FIG. 3.1. A 0-move creating an oriented cycle.
Proof. Let C = (i1, . . . , ik) be an oriented cycle and let 3 ≤ t ≤ k be an index such
that it > it−1. Consider a transposition ρ(it−1, it, i1) acting on C. This transposition
creates a 1-cycle (on vertices piit−1−1 and piit) and some other cycles. Therefore, by
Lemma 3.1, ρ is a 2-move.
Lemmas 3.2 and 3.3 imply the following theorem.
THEOREM 3.4. For an arbitrary (unsorted) permutation pi, there exists either a
2-move or a 0-move followed by a 2-move.
Proof. If G(pi) has an oriented cycle then, by Lemma 3.3, a 2-move is possible.
Otherwise, consider a nonoriented cycle C = (i1, . . . , ik) and let r be a position of the
maximal element of pi in the interval [i2, i1 − 1]. Let s be a position of pir + 1 in pi
(Fig. 3.1). Clearly s 6∈ [i2, i1]. Without loss of generality, assume that s > i1, and
consider a transposition ρ(r + 1, s, i2) (Fig. 3.1). The transposition ρ acts on edges
of two different cycles; therefore by Lemma 3.2 ρ is a 0-move. Since ρ changes the
direction of the left edge (pii1−1, pii2), and does not change direction of the right edge
(piik−1, pii1), the cycle C
′ containing these edges in G(piρ) has at least two right edges.
Therefore C ′ is an oriented cycle allowing a 2-move (Lemma 3.3).
Theorem 3.4 provides an increase of c(pi) by at least 2 in two consecutive moves
and implies the following upper bound for sorting by transpositions.
THEOREM 3.5. Any permutation pi can be sorted in n+ 1− c(pi) transpositions.
Theorems 2.2 and 3.5 imply an approximation algorithm for sorting by transposi-
tions with performance guarantee 2. In the following sections, we give a better upper
bound by disallowing −2-moves and forcing at least two consecutive 2-moves between
any two 0-moves. In our approximation algorithm, we will use only 0- and 2-moves,
although we do not have proof that an optimal sequence of transpositions exists which
does not use −2-moves.
4. Crossing cycles. Theorem 3.4 shows that the number of 2-moves can be
made greater than or equal to the number of 0-moves. In order to improve the
performance ratio for sorting by transposition, we need to further increase the number
of 2-moves. Theorem 4.7 provides the first step toward such an improvement, but first
we need to prove a series of technical lemmas.
Consider a triple of black edges x, y, z belonging to the same cycle C in G(pi).
C induces a cyclic order on x, y, z, and among three possible representations of this
order we choose the one starting from the rightmost black edge max{x, y, z} as the
canonical representation for a triple (x, y, z). A triple (in a canonical order) is called
nonoriented if x > y > z and oriented otherwise. For example, a triple (k, j, i) in
Fig. 2.1c is nonoriented while triple (k, i, j) in Fig. 2.1d is oriented. All triples of a
nonoriented cycle are nonoriented. On the other hand, every oriented cycle has at
least one oriented triple.
Ordered sequences of integers {v1 < · · · < vk} and {w1 < · · · < wk} are interleav-
ing if either v1 < w1 < v2 < w2 < · · · < vk < wk or w1 < v1 < w2 < v2 · · · < wk < vk.
Sets of integers V and W are interleaving if orderings of V and W are interleaving.
230 VINEET BAFNA AND PAVEL PEVZNER
z’ z y’ x’ xy
(a) (b)
z’ z y’ y x x’
FIG. 4.1. Crossing and noninterfering cycles.
Let (x, y, z) be a nonoriented triple, i.e., x > y > z. A transposition ρ(i, j, k) is a
shuffling transposition with respect to a triple (x, y, z) if the sets {i, j, k} and {x, y, z}
interleave.
LEMMA 4.1. Let (x, y, z) be a triple in a cycle C, and let i, j, k 6∈ C be black edges
in G(pi). Then ρ(i, j, k) changes the orientation of triple (x, y, z) (i.e., it transforms
oriented triple into non-oriented and vice versa) iff ρ is a shuffling transposition for
(x, y, z).
LEMMA 4.2. If C is nonoriented, then for all triples (x, y, z) ∈ C, transposition
ρ(z, y, x) = ρ(y, x, z) transforms C into a nonoriented cycle in G(piρ).
We will also need the following lemma specifying some 2-moves acting on oriented
cycles.
LEMMA 4.3. If (x, y, z) is an oriented triple, then ρ(y, z, x) = ρ(z, x, y) is a
2-move.
Cycles C and C ′ are crossing if there exists an oriented triple in C and a non-
oriented triple in C ′ that are interleaving (Fig. 4.1a). Cycles C and C ′ are
non-interfering if there exist oriented triples in C and C ′ that are not interleaving
(Fig. 4.1b).
LEMMA 4.4. If permutation pi has crossing or noninterfering cycles, then there
exist two consecutive 2-moves in pi.
Proof. If cycles C and C ′ in G(pi) are crossing, there exist an oriented triple
(x, z, y) ∈ C and a nonoriented triple (x′, y′, z′) ∈ C ′ which are interleaving (Fig. 4.1a).
By Lemma 4.3, a transposition ρ(z, y, x) defines a 2-move on C. On the other hand,
since (x, y, z) and (x′, y′, z′) are interleaving, ρ(z, y, x) is a shuffling transposition with
respect to (x′, y′, z′). Thus, by Lemma 4.1 ρ transforms C ′ into an oriented cycle in
G(piρ) and by Lemma 3.3 provides a second 2-move.
Alternatively, if C and C ′ are noninterfering, then there exist oriented triples
(x, z, y) ∈ C and (x′, z′, y′) ∈ C ′ which are noninterleaving (Fig. 4.1b). By Lemma 4.3,
a transposition ρ(z, y, x) defines a 2-move on C. Furthermore, (x′, z′, y′) remains an
oriented triple (Lemma 4.1) of C ′ in G(piρ), which provides a second 2-move.
We say that a transposition acts on two cycles C and C ′ in G(pi) if it acts on
black edges of both C and C ′. To prove Theorem 4.7 below, we will need the following
observation about transpositions acting on two cycles.
LEMMA 4.5. Let C be a cycle containing black edges x and y and let D be a cycle
containing black edges x′ and y′. Let ρ be a transposition acting on three of four black
edges x, y, x′, y′.
• If {x, y} does not interleave with {x′, y′}, then ρ creates a cycle with a non-
oriented triple.
• If {x, y} interleaves with {x′, y′}, then ρ creates a cycle with an oriented
triple.
Proof. See Fig. 4.2. All other cases are symmetric.
We say that cycle C = (i1, . . . , ik) spans cycle D = (j1, . . . , jl), if ik < jl < j1 < i1.
The following lemma illustrates an important property of nonoriented cycles.
SORTING BY TRANSPOSITIONS 231
xy y’ x’
y x y’ x’
xyy’ x’
C D
C
C
D
D
xy y’ x’
y x y’ x’
xyy’ x’
C
C
C
D
D
D
FIG. 4.2. Transpositions acting on two cycles.
LEMMA 4.6. For every nonoriented cycle C = (. . . a, . . . , b . . .), with arbitrary
edges a, b, there exists a cycle D(. . . , c . . . , d . . .) such that (a, b) and (c, d) interleave.
Proof. Let pic = maxi∈[b,a−1] pii and pid = pic + 1. Choice of c implies that
d 6∈ [b, a− 1], as C is nonoriented d 6= a, implying that d 6∈ [b, a]. Therefore, (c, d) and
(a, b) interleave.
THEOREM 4.7. If there exists a long cycle in G(pi), then either a 2-move or a
0-move followed by two consecutive 2-moves is possible in pi.
Proof. If G(pi) has an oriented cycle, then by Lemma 3.3 a 2-move is possible.
Also, if there exist nonoriented long cycles C and D with interleaving triples (r, s, t) ∈
C and (x, y, z) ∈ D, then a 0-move ρ acting on edges z, y, x is a shuffling transposition
for C. By Lemma 4.1, ρ transforms C into an oriented cycle C ′. By Lemma 4.2 ρ
transforms D into a nonoriented cycle D′. It is easy to see that C ′ and D′ are crossing;
therefore, by Lemma 4.4 there exist two consecutive 2-moves in G(piρ).
Therefore, assume that no two cycles have interleaving triples. Pick a nonoriented
long cycle C = (i1, . . . , ik), such that C is not spanned by any long cycle. Find
a cycle D = (x, . . . , c, . . . , d, . . . , y) such that the pairs (c, d) and (i1, ik) interleave
(Lemma 4.6). Note that if y < ik, then x < i1; otherwise D would span C. On the
other hand, if y > ik, then x > i1; otherwise (c, d) and (i1, ik) would not interleave.
Therefore, either y < ik < x < i1 or ik < y < i1 < x. Without loss of generality,
we assume the latter. Let s be the rightmost edge in C to the left of y, i.e., s =
maxi∈C,i<y i. Two cases arise.
s > ik: Find cycle E = (v, . . . , c, . . . , d, . . . , u) such that the pairs (c, d) and (ik, s)
interleave (Lemma 4.6). If u < ik, then v < s because, otherwise, E either
spans C (v > i1) or has an interleaving triple with (ik, s, i1) ∈ C (s < v < i1).
If u > ik (Fig. 4.3a), then four cases arise depending on v lying in one of
the intervals [s, y], [y, i1], [i1, x] or [x, n+ 1] (Fig. 4.3b-e). The transpositions
ρ(x, y, v) in Fig. 4.3a and ρ(x, y, u) in Figs. 4.3b-4.3e are shuffling w.r.t. the
triple (i1, s, ik) of C, and by Lemma 4.1 transform C into an oriented cycle C ′
in G(piρ). ρ also transforms D and E into D′ and a 1-cycle in G(piρ). From
Lemma 4.5, D′ is oriented in Fig. 4.3a. In the remaining cases, D′ is oriented
when v ∈ [y, x − 1] and nonoriented otherwise (Lemma 4.5). Observe that
in the first case C ′ and D′ are crossing (Figs. 4.3b, 4.3e); otherwise they are
noninterfering (Figs. 4.3c, 4.3d). In either case, two 2-moves are possible in
G(piρ)(Lemma 4.4).
232 VINEET BAFNA AND PAVEL PEVZNER
ik i1y xu
C
DE
t
C’D’
v (a) ik i1s
C
C’
D’
u v y x
E
D
(b)
ik i1s y x vu
D
E
C
(e)
D’
C’
i1ik y vu x
DE
C
D’ C’
t (f)
ik i1
D’
C’
ik i1
y
D
C
E
u v x
C’
D’
s
C
xyu vs
E
D
(c) (d)
FIG. 4.3. 0-move leading to two 2-moves.
Algorithm Tsort(pi)
1. While G(pi) has a long cycle, perform either a 2-move or a 0, 2, 2-move
(Theorem 4.7).
2. If G(pi) has only short cycles, perform a 0-move followed by a 2-move
(Theorem 3.4).
FIG. 5.1. Algorithm Tsort for sorting by transpositions.
s = ik: Let t be the leftmost black edge in C to the right of y, i.e., t = mini∈C,i>y i. As
C is a long cycle, t < i1. Find E = (v, . . . , c, . . . , d, . . . , u) such that the pairs
(c, d) and (t, i1) interleave (Lemma 4.6). Cycle E is different from cycle D
because, otherwise, E and C would have interleaving triples. If v > i1, then
u > t because, otherwise, E either spans C (u < i1) or has an interleaving
triple with (i1, t, ik) ∈ C (i1 < u < t). This case is similar to the cases shown
in Figs. 4.3d, 4.3e. If v < i1, then three cases arise depending on which
of the intervals [0, ik], [ik, y], or [y, t] contains u. The first of these cases is
shown in Fig. 4.3f, while the other two are symmetric to cases in Fig. 4.3c
and 4.3e, respectively. In Fig. 4.3f, the transposition ρ(x, y, u) transforms C
into a nonoriented cycle C ′ (Lemma 4.1), and transforms cycles D,E into an
oriented cycle D′ and a 1-cycle in G(piρ) (Lemma 4.5). Further, C ′ and D′
are crossing, and therefore two 2-moves are possible in G(piρ).
5. Mixing odd and even cycles. Theorem 4.7 guarantees creating at least
four cycles in three moves, thus providing ∆c(ρ) = 43 on average, which is better
than ∆c(ρ) = 1, given by Theorem 3.4. However, it can be applied only when G(pi)
has long cycles. In case G(pi) only has short cycles, the best we can guarantee is a
0-move followed by a 2-move creating four 1-cycles from two 2-cycles (Theorem 3.4).
Theorems 3.4 and 4.7 motivate the algorithm Tsort (Fig. 5.1).
Does Tsort achieve a performance ratio of better than 2? Unfortunately, in the
case that G(pi) has only short cycles, the 0-move followed by a 2-move provides only
∆c(ρ) = 4−22 = 1 on average. However, for these two moves, ∆codd(ρ) =
4−0
2 = 2, thus
achieving a maximal rate of creating odd cycles from the perspective of Theorem 2.4.
On the other hand, Theorem 4.7 does not guarantee yet that ∆codd(ρ) = 2 for every
2-move. Therefore, if we use either the number of cycles or the number of odd cycles
SORTING BY TRANSPOSITIONS 233
as our objective function, we cannot guarantee a performance ratio better than 2.
Somewhat surprisingly, we show that a mixed objective function which gives different
weights to odd and even cycles leads to an improved performance guarantee.
THEOREM 5.1. Tsort provides a performance guarantee of 1.75 for sorting by
transpositions.
Proof. For arbitrary x ≥ 1, define the objective function f(pi) = xcodd(pi) +
ceven(pi), where codd(pi) and ceven(pi) are the number of odd and even cycles in G(pi),
respectively. Clearly, for this range of x, f(pi) is uniquely maximized by the identity
permutation, and sorting a permutation corresponds to maximizing f . Observe that
the maximum gain any transposition ρ can achieve is ∆f(ρ) = f(piρ) − f(pi) = 2x.
We now evaluate the maximum ∆f guaranteed by Theorems 3.4 and 4.7.
In the case that G(pi) only has short cycles, Theorem 3.4 guarantees that in two
moves, four 1-cycles are created from two 2-cycles, implying a gain of 4x− 2 over two
moves, or an average gain of 2x − 1 in one transposition. In any 2-move, two new
cycles are created and, in the worst case (if both are even) we can still guarantee a
gain of 2. By construction, a 0-move in Theorem 4.7 either creates a 1-cycle or does
not change the number of black edges in any cycle. Therefore ∆f ≥ 0 for any 0-move.
Moreover, Theorem 4.7 guarantees that any such 0-move is followed by two 2-moves,
implying an average gain of 43 . It follows that ∆f ≥ min{43 , 2x − 1} on the average.
Comparing the best possible gain of 2x against the gain provided by Tsort, we get a
performance guarantee of
2x
min{ 43 , 2x− 1}
.
The best performance is achieved for x = 76 , resulting in the approximation ratio
1.75.
6. A 1.5 approximation algorithm for sorting by transposition. In order
to improve performance still further, we need to strengthen Theorem 4.7. Note that
Theorem 4.7 only guarantees an increase in the number of cycles. However, the
identity permutation has n + 1 cycles, all of length one, indicating that we need to
increase the number of odd cycles. By choosing appropriate 2-moves, we shall ensure
that the number of odd cycles increases by at least two in every 2-move.
We call a transposition ρ valid if ∆c(ρ) = ∆codd(ρ). For a cycle C containing
edges i and j, define d(i, j) as the number of black edges between vertices pii and pij
in C (in particular, d(i, j) = 1 for consecutive black edges i and j).
LEMMA 6.1. If there exists an oriented cycle in G(pi), then either a valid 2-move
or a valid 0-move followed by two consecutive valid 2-moves is possible in pi.
Proof. Suppose there is no valid 2-move in pi. For an arbitrary oriented cycle C
in G(pi), consider the following set S of oriented triples of C such that the distance
between the first and second elements of the triple is odd:
S = {(x, y, z) : x, y, z ∈ C and d(x, y) is odd}.
The observation that every oriented cycle C has an oriented triple (x, y, z) such
that x and y are the consecutive black edges in C implies that S is nonempty. Let
(x, y, z) be a triple in S with maximal x.
A transposition ρ acting on edges y, z, and x transforms C into three cycles C1, C2,
and C3 consisting of d(x, y), d(y, z), and d(z, x) black edges. As (x, y, z) ∈ S, cycle
C1 is odd. If either C2 or C3 is odd, then ∆codd(ρ) = 2 and ρ is a valid 2-move,
contradicting the assumption that there are no valid 2-moves in pi. Therefore both
234 VINEET BAFNA AND PAVEL PEVZNER
a y z xb
d(x,y)
d(b,x) d(b,x)
d(y,a)
d(y,a)
d(x,y)
d(y,a)
d(b,x)
d(x,y) d(y,a) d(b,x)d(x,y)
(c)
b a y z x
d(b,x)
d(y,a)
d(x,y) d(x,y)
d(y,a)=
d(y,z)-1
d(b,x) = d(z,x)-1
(a) (b)
y xz
b a
d(y,x)
d(x,y)
d(z,x) d(y,x) d(x,y) d(z,x)
FIG. 6.1. Valid 2-moves and 0, 2, 2-moves on an oriented cycle.
d(y, z) and d(z, x) are even. As both d(y, z) and d(z, x) are even, the fragments of
C from y to z and from z to x contain at least two edges. Let a be a black edge
preceding z in C and b be a black edge following z in C (Fig. 6.1a).
If y < a < x, then transposition ρ acting on edges y, a, and x creates cycles of
length d(y, z) − 1 and d(x, y). Both these numbers are odd and, therefore, ρ is a
valid 2-move, thus contradicting the assumption. Therefore a 6∈ [y, x]. Symmetric
arguments demonstrate that b 6∈ [y, x].
If a > x, then (a, z, x) is an oriented triple with odd d(a, z) = 1, thus contradicting
the choice of (x, y, z). Therefore a < y. If b > x, then (b, a, z) is an oriented triple
with odd d(b, a) = d(b, x) + d(x, y) + d(y, a) = (d(z, x) − 1) + d(x, y) + (d(y, z) − 1),
thus contradicting the choice of (x, y, z). Therefore a, b < y.
The situations described by conditions b < a and a < b are presented in Figs. 6.1b
and 6.1c. If b < a, then ρ(b, a, z) is a valid 2-move (Fig. 6.1b). If a < b, then there
exist 2-moves but no valid 2-moves in pi. However, there exists a valid 0-move followed
by two consecutive valid 2-moves (Fig. 6.1c).
Fig. 6.1c presents an example of an oriented cycle which does not allow valid
2-moves. This cycle has a complicated “self-interleaving” structure and, in the fol-
lowing, we try to avoid creating such cycles. In order to achieve this goal, we define
strongly oriented cycles, which have the simplest “self-interleaving” structure among
all oriented cycles.
Let C = (i1, . . . , ik) be a cycle in G(pi) and let C∗ = (i1 = j1 > · · · > jk) be
a sequence of black edges of C in decreasing order. Sequences C and C∗ coincide
for a nonoriented cycle and are different otherwise. Define strongly oriented cycles
as oriented cycles for which C∗ can be transformed into C by a single transposition,
i.e., C can be partitioned into strips C1 = (i1, . . . , ia), C2 = (ia+1, . . . , ib), C3 =
(ib+1, . . . , ic), and C4 = (ic+1, . . . , ik) such that C = C1C2C3C4 and C∗ = C1C3C2C4
(C4 might be empty). For example, Fig. 6.1b gives an example of a strongly oriented
cycle, as C = xyabz is transformed into C∗ = xzyab by a single transposition. Clearly,
every strongly oriented cycle has exactly two right edges. On the other hand, not every
oriented cycle with two right edges is strongly oriented (Fig. 6.1c).
LEMMA 6.2. A strongly oriented cycle allows a valid 2-move.
Proof. Depending on whether or not C4 is empty, there are two kinds of cycles, as
shown in Fig. 6.2, with left+mid+right black edges (in Fig. 6.2c, mid = mid′+mid′′).
Dashed lines in the figure represent alternating paths of zero or more edges. In the
following, we shall abuse notation by referring to both the sets of edges and their
numbers as left,mid, and right.
In Fig. 6.2a, consider transpositions of the form ρ(i, j, k), where i is the leftmost
mid edge, j is the rightmost right edge, and k is a left edge. As all such triples
(i, j, k) are oriented; ρ(i, j, k) is a 2-move.
SORTING BY TRANSPOSITIONS 235
i1
-mid- -right--left > 1-
i1
I1
-mid- -right-
s trr’ t’
-left = 1-
I I2 3
i1
s trr’ t’
(a) (b)
t’tsr s’ a a’
-mid’- -mid’’--left- -right-
mid’’+left-1
mid’’+left
mid’+right-1
mid’+right
(c)
FIG. 6.2. Strongly oriented cycles: (a), (b) First kind. (c) Second kind.
E3D D1 1EEE 23 2
E
D
1E D2 E2 D1
FIG. 6.3. Transforming two nonoriented cycles into a strongly oriented cycle.
Figure 6.2a corresponds to the case left > 1 and presents two such transpositions,
say, ρ1(i, j, k1) and ρ2(i, j, k2), in which k1 and k2 are the two leftmost left edges. Both
ρ1 and ρ2 are 2-moves and create three cycles. One of these cycles is a 1-cycle. If
left > 1, then an appropriate choice of either ρ1 or ρ2 provides at least one more odd
cycle, thus indicating that the chosen transposition is a valid 2-move. If left = 1, then
the transposition ρ shown in Fig. 6.2b creates at least two 1-cycles, thus indicating
that ρ is a valid 2-move.
In Fig. 6.2c, the transposition ρ inserting a “middle interval” into the leftmost
edge creates cycles of length 1,mid′′ + left− 1 and mid′ + right. On the other hand,
a transposition % inserting a middle interval into the rightmost edge creates cycles of
length 1,mid′′ + left and mid′ + right − 1. Therefore, either ρ or % creates at least
two odd cycles, thus ensuring a valid 2-move in pi.
Next, we present two lemmas which show how strongly oriented cycles arise from
nonoriented cycles.
LEMMA 6.3. If ρ is a shuffling transposition on a nonoriented cycle C, then ρ
transforms C into a strongly oriented cycle in G(piρ).
Proof. The proof follows from the definition.
LEMMA 6.4. Let D(x, . . . , y) and E(x′, . . . , y′) be two nonoriented cycles in G(pi)
with no interleaving triples, and let ρ be a transposition acting on three of four black
edges x, y, x′, y′. Then ρ creates a strongly oriented cycle iff D and E have interleaving
pairs of edges.
Proof. Figure 6.3 presents cycles D and E with interleaving pairs of edges, but no
interleaving triple. Assume w.l.o.g that the edges of D partition E into three strips
E = E1E2E3 (E3 is possibly empty), while the edges of E partition the edges of D into
two D = D1D2. The transposition ρ transforms D and E into a 1-cycle and a cycle
F visiting (in order) edges D1D2E1E2E3. On the other hand, F ∗ = D1E2D2E1E3
which can clearly be transformed into F by a transposition.
236 VINEET BAFNA AND PAVEL PEVZNER
If D and E have no interleaving pairs of edges, then it is easy to verify that ρ
transforms D and E into a 1-cycle and a nonoriented cycle F .
Every strongly oriented cycle has exactly two right edges, one of which is of the
form (r, i1). Label the other as (s, t). For strongly oriented cycles of the first kind
(Fig. 6.2a), define
r′ = max
i∈left
i and t′ = min
i∈right
i,
and consider three intervals I1(C) = [r′, r], I2(C) = [t, t′], and I3 = [0, s] ∪ [i1, n+ 1].
For strongly oriented cycles of the second kind (Fig. 6.2c), define
s′ = max
i∈left
i , t′ = min
i∈right
i , a = max
i∈mid′
i and a′ = min
i∈mid′′
i,
and consider intervals I1(C) = [s′, s], I2(C) = [t, t′], and I3(C) = [a, a′].
A strongly oriented cycle C and a nonoriented cycle C ′ = (i1, . . . , ik) are strongly
crossing if there exists a black edge x in C ′ such that each of the sets I1(C), I2(C),
and I3(C) contains exactly one element of the triple (i1, x, ik). Note that 2-moves for
C described in the proof of Lemma 6.2 form shuffling transpositions w.r.t. (i1, x, ik).
This observation and Lemma 6.2 imply the following.
LEMMA 6.5. If G(pi) has strongly crossing cycles, then there exist two consecutive
valid 2-moves in G(pi).
Next, we modify the concept of “noninterfering” cycles after which we shall have
all the tools needed to strengthen Theorem 4.7. A transposition ρ is safe, with respect
to a strongly oriented cycle C ∈ G(pi), if it transforms C into a strongly oriented cycle
in G(piρ). The following lemma gives a sufficient condition for a transposition to be
safe.
LEMMA 6.6. Let C be a strongly oriented cycle, and let (x, y, z) 6∈ C be a triple
such that no edge of C lies in the region between x and y. Then, a transposition acting
on (x, y, z) is safe w.r.t. C.
Let cycles C and C ′ be strongly oriented. C is strongly noninterfering w.r.t. C ′
if it has a right edge (a, b) such that no black edge of C ′ lies in the interval [a, b].
LEMMA 6.7. If G(pi) has strongly noninterfering cycles, then there exist two
consecutive valid 2-moves in G(pi).
Proof. Let C be strongly noninterfering w.r.t. C ′. Consider a valid 2-move
ρ(x, y, z) on C described in the proof of Lemma 6.2. Observe that one of the right
edges in C is of the form (x, y) and therefore includes the region [x, y], and the other
right edge includes the interval [y, z]. Therefore, if C is strongly noninterfering w.r.t.
C ′, then either no black edge of C ′ lies in [x, y] or no black edge of C ′ lies in [y, z]. In
either case, ρ(x, y, z) is safe w.r.t. C ′ (Lemma 6.6). This implies that a valid 2-move
on C ′ follows a valid 2-move on C ′.
Finally, we can prove a stronger version of Theorem 4.7.
THEOREM 6.8. If there exists a long cycle in G(pi), then either a valid 2-move or
a valid 0-move followed by two consecutive valid 2-moves is possible in pi.
Proof. We mimic the proof of Theorem 4.7, ensuring that all moves are valid ones.
If G(pi) has an oriented cycle, then from Lemma 6.1, a valid 2-move or a valid
0-move followed by two valid 2-moves is always possible.
Next, consider the case when G(pi) has nonoriented cycles C and D with interleav-
ing triples (r, s, t) ∈ C and (x, y, z) ∈ D. Then, ρ(x, y, z) transforms C into a strongly
oriented cycle C ′ in G(piρ) (Lemma 6.2) and transforms D into a nonoriented cycle
D′ in G(piρ) (Lemma 4.1). Further observe that each of the intervals I1(C ′), I2(C ′),
SORTING BY TRANSPOSITIONS 237
C
C’
D’
(a)
i u vy xis
E
D
1k
FIG. 6.4. Transforming C,D, and E into strongly noninterfering cycles.
and I3(C ′) contains exactly one element of a (nonoriented) triple in D′. Therefore,
C ′ and D′ are strongly crossing, and from Lemma 6.5, two valid 2-moves are possible
in G(piρ).
Therefore, we can assume that G(pi) has no oriented cycles or cycles with inter-
leaving triples. The proof of theorem holds and we consider them in the following
case by case fashion:
Fig. 4.3a. The valid 0-move ρ(y, x, v) transforms D and E into a nonoriented cy-
cle D′ (Lemma 6.4) and transforms C into a strongly oriented cycle C ′
(Lemma 6.2) in G(piρ). Further observe that vertices pix, piv, piy all belong
to D′ and piy ∈ I1(C ′), piv ∈ I2(C ′), pix ∈ I3(C ′), thereby implying that
C ′ and D′ are strongly crossing. From Lemma 6.5, two valid 2-moves are
possible in G(piρ).
Fig. 4.3b. The valid 0-move ρ(y, x, u) transforms D and E into a nonoriented cycle D′
(Lemma 6.4), and transforms C into a strongly oriented cycle C ′ (Lemma 6.2)
in G(piρ). Observe that piy ∈ I1(C ′) and piu ∈ I2(C ′). Moreover, the choice
of s as the rightmost edge to the left of y ensures that there is no edge of C
between v and y, and therefore piv ∈ I3(C ′). As vertices pix, piv, piy all belong
to D′, cycles C ′ and D′ are strongly crossing. From Lemma 6.5, two valid
2-moves are possible in G(piρ).
Fig. 4.3c. In this case, we consider the valid 0-move ρ(u, v, x) (Fig. 6.4) instead of
ρ(y, x, u). ρ transforms C into a strongly oriented cycle C ′ (Lemma 6.2),
and transforms D and E into strongly oriented cycle D′ (as D and E have
no interleaving triples, Lemma 6.4 applies). Define a as the rightmost edge
in D to the left of i1, i.e., a = maxi∈D,i<i1 i, and define b as the leftmost
edge in C to the right of y, i.e., b = mini∈C,i>y i. Note that a < b because,
otherwise, (ik, b, i1) ∈ C and (y, a, x) ∈ D are interleaving triples. If b > v,
then there is no edge of C in the interval [y, v], and it follows that C ′ has no
black edge in the region covered by the right edge (piy−1, pix) ∈ D′. Therefore
D′ is strongly noninterfering w.r.t. C ′. If a < b < v, then there is no black
edge of D in the interval [v, i1], and correspondingly, D′ has no black edge
in the region covered by the right edge (piik−1, pii1) ∈ C ′. Therefore, C ′ is
strongly noninterfering w.r.t. D′. In either case, Lemma 6.7 implies that two
valid 2-moves are possible in G(piρ).
Fig. 4.3d. The valid 0-move ρ(x, y, u) transforms D and E into strongly oriented
cycle D′ (as D and E have no interleaving triples, Lemma 6.4 applies) and
also transforms C into strongly oriented cycle C ′ (Lemma 6.2). Let a be the
rightmost edge of E to the left of s, and let b the leftmost edge of E to the right
of i1. Note that C has no edge in the region between edges b ∈ E and x ∈ D
in G(pi) as i1 < b < x. Also, C has no edge e in the region [u, a] because,
otherwise, (u, a, v) ∈ E would interleave (e, s, i1) ∈ C. Correspondingly in
G(piρ), C ′ does not have any black edge in the region covered by the right
edge (pib−1, pia) ∈ D′, implying that D′ is strongly noninterfering w.r.t. C ′.
From Lemma 6.7, two consecutive valid 2-moves are possible in G(piρ).
238 VINEET BAFNA AND PAVEL PEVZNER
Algorithm TransSort(pi)
1. While G(pi) has a long cycle, perform a valid 2-move or a valid 0, 2, 2-move
(Theorem 6.8).
2. If G(pi) has only short cycles, perform a good 0-move followed by a valid 2-move
(Theorem 6.9).
FIG. 6.5. Algorithm TransSort for sorting by transpositions.
Fig. 4.3e. The valid 0-move ρ(x, y, u) transforms C into a strongly oriented cycle C ′
(Lemma 6.2), and cycles D and E into D′. From Lemma 6.4, D′ is strongly
oriented if D and E have interleaving pairs; otherwise it is nonoriented. In
the first case, we use an argument similar to the case in Fig. 4.3d. If D′ is
nonoriented, then observe that piy, piu, piv all belong to D′ and piy ∈ I1(C ′),
piu ∈ I2(C ′), and piv ∈ I3(C ′), implying that D′ and C ′ are strongly crossing.
From Lemma 6.5, two valid 2-moves are possible in G(piρ).
Fig. 4.3f. The valid 0-move ρ(x, y, u) transforms D and E into strongly oriented cycle
D′ (as D and E have no interleaving triples, Lemma 6.4 applies) and trans-
forms C into nonoriented C ′ (Lemma 4.1). Furthermore, pii1 , pit, piik ∈ C ′ lie
in the regions I2(D′), I1(D′), and I3(D′), respectively. Therefore, C ′ and D′
are strongly crossing. From Lemma 6.5, two valid 2-moves are possible in
G(piρ).
Theorem 6.8 describes how we can handle the case when G(pi) has long cycles.
For short cycles, we need to formalize the intuitive idea described earlier. Define a
0-move as good if it increases the number of odd cycles by two.
THEOREM 6.9. If G(pi) has only short cycles, a good 0-move followed by a valid
2-move is possible.
Proof. We mimic the proof of Theorem 3.4. The 0-move takes two cycles of length
2 and creates an oriented cycle of length 3 and a cycle of length 1. A valid 2-move is
now possible.
Our proofs are constructive and immediately imply an O(n2) algorithm TransSort
for sorting by transpositions. Finally, Theorems 2.4, 6.8, and 6.9 imply the following.
COROLLARY 6.10. Algorithm TransSort sorts permutation pi in no more than
3
4 · (n+ 1− codd(pi)) transpositions, thereby ensuring a performance guarantee of 1.5.
COROLLARY 6.11. The transposition diameter of the symmetric group Sn is at
most 34n.
7. Open problems. Recent advances in large-scale comparative genetic map-
ping offer exciting prospects for understanding mammalian genome evolution. The
large number of conserved segments in the maps of man and mouse suggest that
multiple chromosomal rearrangements have occurred since the divergence of lineages
leading to humans and mice. In their pioneering paper, Nadeau and Taylor [21] es-
timated that just 178± 39 rearrangements have occurred since this divergence. This
estimate survived a ten-fold increase in the amount of the comparative man/mouse
mapping information; the new estimate, based on the latest data (Copeland et al. [5]),
almost did not change compared to Nadeau and Taylor [21]. However, the arguments
used by Nadeau and Taylor [21] are nonconstructive and do not provide any solution
to an open biological problem of reconstructing an evolutionary scenario explaining
man and mouse genome rearrangements.
SORTING BY TRANSPOSITIONS 239
Chromosomal rearrangements include not only inversions and transpositions but
translocations, fussions, fissions, insertions, and deletions as well. A combinatorial
analysis of all such rearrangements to derive a scenario of mammalian evolution is far
beyond the possibilities of current algorithms. However, some limited applications of
algorithms for inversions and transpositions to study chromosome evolutions are al-
ready possible. In particular, extreme conservation of genes on X chromosome across
mammalian species provides an opportunity to study evolutionary history of X chro-
mosome independently of the rest of the genomes, thus reducing the computational
complexity of the problem. According to Ohno’s law (Ohno [22]), gene content of X
chromosome is assumed to have remained the same throughout mammalian develop-
ment for the last 125 million years. However, the order of genes on X chromosome
has been disrupted several times. The conservative gene content of X chromosome
implies that the only translocations which affected the gene order in X chromosome
were translocations between two copies of X chromosome and thus might be ignored
for our purposes. A recently discovered violation of the Ohno law by the Csfgmra
gene (Disteche et al. [7]) does not affect this conclusion, since this gene is located
at the very end of the human X chromosome. Davisson [6] and Lyon [19] suggested
two conflicting scenarios of rearrangements in X chromosome under the assumption
that X chromosome was not involved in translocations. Based on the analysis of the
latest data on comparative man/mouse mapping, Bafna and Pevzner [3] found the
most parsimonious scenario for evolutionary history of X chromosome and corrected
the previously suggested scenarios.
Another open problem on genome rearrangements is related to viral evolution. As
was mentioned in the introduction, herpes viruses present a particularly hard case for
classical sequence comparison. On the other hand, they present a particularly suitable
test case for the study of genome rearrangements, since complete sequences of seven
diverse herpes viruses are known. Herpes virus genomes contain from 70 to about
200 genes. Detailed comparison of amino acid sequences of viral proteins resulted
in an “alphabet” of about 30 conserved genes which were rearranged in different
herpes viruses (Hannenhalli et al. [12]). Three types of arrangements of conserved
genes exist, corresponding to the α, β, and γ divisions of herpes viruses. Derived
lower bounds for the pairwise genome rearrangements of viral genomes allowed us to
construct the most parsimonious scenarios for herpes virus evolution. Moreover, there
are only three alternative, equally parsimonious, scenarios of genome rearrangements
in herpes viruses with three different Steiner points (Hannenhalli et al. [12]). It is
impossible to delineate the true scenario among these three based on the currently
available data. However, ongoing efforts to map and sequence different herpes virus
genomes provide a warrant that a true evolutionary scenario will be found in the
future.
REFERENCES
[1] M. AIGNER AND D. B. WEST, Sorting by insertion of leading element, J. Combin. Theory, 45
(1987), pp. 306–309.
[2] V. BAFNA AND P. PEVZNER, Genome rearrangements and sorting by reversals, SIAM J. Com-
put., 25 (1996), pp. 272–289.
[3] V. BAFNA AND P. PEVZNER, Sorting by reversals: Genome rearrangements in plant organelles
and evolutionary history of X chromosome, Molecular Biology and Evolution, 12 (1995),
pp. 239–246.
[4] D. COHEN AND M. BLUM, Improved bounds for sorting pancakes under a conjecture,
manuscript, 1993.
240 VINEET BAFNA AND PAVEL PEVZNER
[5] N. G. COPELAND, N. A. JENKINS, D. J. GILBERT, J. T. EPPIG, L. J. MALTALS, J. C. MILLER,
W. F. DIETRICH, A. WEAVER, S. E. LINCOLN, R. G. STEEN, L. D. STEEN, J. H. NADEAU,
AND E. S. LANDER, A genetic linkage map of the mouse: Current applications and future
prospects, Science, 262 (1993), pp. 57–65.
[6] M. DAVISSON, X-linked genetic homologies between mouse and man, Genomics, 1 (1987),
pp. 213–227.
[7] C. M. DISTECHE, C. I. BRANNAN, A. LARSEN, D. A. ADLER, D. F. SCHORDERET, D. GEARING,
N. G. COPELAND, N. A. JENKINS, AND L. S. PARK, The human pesuodoautosomal GM-
CSF receptor α subunit gene is autosomal in mouse, Nature Genetics, 1 (1992), pp. 333–
336.
[8] S. EVEN AND O. GOLDREICH, The minimum-length generator sequence problem is NP-hard,
J. Algorithms, 2 (1981), pp. 311–313.
[9] N. FRANKLIN, Conservation of genome form but not sequence in the transcription antitermi-
nation determinants of bacteriophages λ, φ21 and P22, J. Molecular Evolution, 181 (1985),
pp. 75–84.
[10] W. H. GATES AND C. H. PAPADIMITRIOU, Bounds for sorting by prefix reversals, Discrete
Math., 27 (1979), pp. 47–57.
[11] A. M. GRIFFIN AND M. E. G. BOURSNELL, Analysis of the nucleotide sequence of DNA from
the region of the thymidine kinase gene of infectious laryngotracheitis virus: potential
evolutionary relationships between the herpesvirus subfamilies, J. General Virology, 71
(1990), pp. 841–850.
[12] S. HANNENHALLI, C. CHAPPEY, E. KOONIN, AND P. PEVZNER, Genome sequence comparison
and scenarios for genome rearrangements: A test case, Genomics, 30 (1995), pp. 299–311.
[13] S. HANNENHALLI AND P. PEVZNER, Transforming cabbage into turnip, in Proc. 27th Annual
ACM Symposium on Theory of Computing, ACM, New York, 1995, pp. 178–179.
[14] M. HEYDARI AND I. H. SUDBOROUGH, On sorting by prefix reversals and the diameter of
pancake networks, manuscript, 1993.
[15] M. JERRUM, The complexity of finding minimum-length generator sequences, Theoret. Comput.
Sci., 36 (1985), pp. 265–289.
[16] S. KARLIN, E. S. MOCARSKI, AND G. A. SCHACHTEL, Molecular evolution of herpesviruses:
Genomic and protein sequence comparisons, J. Virology, 68 (1994), pp. 1886–1902.
[17] J. KECECIOGLU AND D. SANKOFF, Exact and approximation algorithms for the inversion
distance between two permutations, Algorithmica, 13 (1995), pp. 180–210.
[18] J D. KECECIOGLU AND R. RAVI, Of mice and men: Evolutionary distances between genomes
under translocations, in Proc. Sixth Annual ACM-SIAM Symposium on Discrete Algo-
rithms, San Francisco, California, SIAM, Philadelphia, PA, 1995, pp. 604–613.
[19] M. F. LYON, X-Chromosome inactivation and the location and expression of X-linked genes,
Amer. J. Hum. Genet., 42 (1988), pp. 8–16.
[20] D. J. MCGEOCH, Molecular evolution of large DNA viruses of eukaryotes, Seminars in Virology,
3 (1992), pp. 399–408.
[21] J. H. NADEAU AND B. A. TAYLOR, Lengths of chromosomal segments conserved since diver-
gence of man and mouse, Proc. Nat. Acad. Sci. USA, 81 (1984), pp. 814–818.
[22] S. OHNO, Sex Chromosomes and Sex-Linked Genes, Springer-Verlag, Heidelberg, 1967.
[23] J. D. PALMER AND L. A. HERBON, Plant mitochondrial DNA evolves rapidly in structure, but
slowly in sequence, J. Molecular Evolution, 27 (1988), pp. 87–97.
[24] D. SANKOFF, G. LEDUC, N. ANTOINE, B. PAQUIN, B. F. LANG, AND R. CEDERGREN, Gene
order comparisons for phylogenetic inference: Evolution of the mitochondrial genome,
Proc. Nat. Acad. Sci. USA, 89 (1992), pp. 6575–6579.
