J. Symbolic Computation (1991) 11, 51-81 
A Completion Procedure for Conditional Equations~ 
HARALD GANZINGER~ 
Max.Planck-Institut fiir Informatik, Im Stadtwald, D-6600 Saarbriicken, Germany 
(Received 15 September 1987) 
The paper presents a new completion procedure for conditional equations. The work is based 
on the notion of reductive conditional rewriting and the procedure has been designed tohandle 
in particular non-reductive equations that are generated during completion. The paper also 
describes techniques for simplification fconditional equations and rules, so that he procedure 
terminates on more specifications. The correctness proofs which form a substantial part of 
this paper employ recursive path orderings on the proof trees of conditional equational logic, 
an extension ofthe ideas of Bachmair, Dershowitz & Hsiang to the conditional case. 
1. Introduction 
In this paper we present a completion procedure for conditional equations. Emphasis is 
laid upon a rigorous proof of the correctness of the procedure as well as on developing 
techniques that make the procedure useful in practice. The completion procedure is, 
adopting the ideas of Bachmair, Dershowitz & Hsiang (1986) and Bachmair (1987) 
presented as a set of inference rules. It is shown that any application of an inference rule 
leads to less complex proofs of equational theorems. If the inference rules are applied 
according to a fair strategy--which, owever, need not exist in all cases--the final system 
of conditional rules will be reductive, canonical, and will generate the same congruence 
as the initially given set of conditional equations. 
Proofs will be represented as terms in a signature of proofs. A recursive path ordering 
on proof terms will allow to order proofs according to their complexity. The proof  of 
correctness of the completion procedure is based on the idea that proofs for equational 
theorems which are not rewrite proofs can be transformed into simpler proofs at some 
stage of the completion process. As the ordering of proofs is well-founded, a rewrite 
proof must be obtained eventually. Proof terms may contain variables and hence represent 
proofs of equations under hypotheses, i.e. contexts in which other equations can be 
assumed to hold true. 
The concept of conditional rewriting which we use is the one proposed by Kaplan 
(1984a, b), and further developed by Jouannaud & Waldmann (1986). Conditions in rules 
are not restricted to formulas of a lower level in the specification hierarchy as in Remy 
& Zhang (1984) and Zhang & Remy (1985). It is only required that terms in conditions 
be smaller, according to some given reduction ordering, than the left side of the rule. 
Then, the recursive calls of the rewrite relation for testing the applicability of a rule 
always terminate and the rewrite relation becomes decidable. 
t A preliminary version of this paper has appeared in the Proceedings ofthe First International Workshop 
on Conditional Term Rewriting, Orsay, June 1987, Springer Lecture Notes in Computer Science, 1988. 
~t This work was partially supported by the ESPRIT-project PROSPECTRA, ref. no. 390, at the University 
of Dortmund, Germany. 
0747-7171/91/010051 + 3  $03.00/0 9 1991 Academic Press Limited 
52 H. Ganzinger 
The restriction to reductive rules is sufficiently strong to allow for efficient rewriting 
(Kaplan, 1987). On the other hand it is usually the case that non-reduetive equations are 
generated during completion as critical pairs between reductive rules. This problem has 
been reported by many authors, Kaplan (1984a), Jouannaud & Waldmann (1986), 
Ganzinger (1987), Kaplan & Remy (1987), Kounalis & Rusinowitch (1987) and Orejas 
(1987) among others. For a completion procedure to be useful in practice it is of principal 
importance that it has strong enough techniques to handle these critical pairs. In this 
paper we describe two concepts for such techniques. 
The first concept is devoted to the elimination of equations and rules. The idea is that 
an equation C ~ s = t can be discarded if there is also another proof of the same 
conditional equation, different from the one which led to the construction ofthe equation. 
In addition this proof has to be simpler with respect to the complexity measure on proofs. 
To that end, proofs of equations s = t under hypotheses C are represented asterms with 
variables (representing the "unknown" proofs for the equations in C) in our algebra of 
proofs. Particularly useful techniques for obtaining such simpler proofs are certain efficient 
variations of rewriting s = t modulo the (skolemized) conditions in C of an equation, 
and subsumption. It will be demonstrated by means of examples that practical procedures 
must provide adequate combinations of these principal techniques. 
The second concept is that of superposing rules on conditions of non-reductive conditional 
equations. Hereby, the set of solutions of the condition is enumerated. For particular 
classes of solutions specific instances of the equation will be generated. Any of the 
instances can then be treated specifically. Some instance may become a reductive rule, 
for other instances the previously mentioned elimination techniques may be applicable, 
for still other instances one may have to investigate he corresponding class of solutions 
further by again superposing rules on its condition. If this narrowing-like process comes 
to an end, the original equation eed not be considered any more when enumerating the 
equational theory of the specification. A main difficulty in practice is, however, to detect 
loops in this process when it does not terminate. It is well-known (R6ty, 1988) that naive 
approaches to (conditional) narrowing almost never terminate. 
With these two concepts, the procedure presented in this paper is a considerable 
improvement over the ones given by Kaplan (1984b), Jouannaud & Waldmann (1986) 
and Kaplan & Remy (1987). Another improvement over previous work is that our 
procedure can be used to process modules of a complex specification separately. Upon 
combination of two preprocessed and hence canonical systems of rewrite rules only the 
inferences between axioms in different modules need tobe computed. The situation here 
is thus the same as in the unconditional case. Another similarity to the unconditional 
case is a technique in which rules are numbered to achieve fair computation of critical 
pairs and to avoid recomputation f critical pairs for those rules that are simplified on 
their condition and right-hand side at a later stage in the completion process. This 
technique has been proven correct by Huet (1981) for the unconditional case and 
implemented in most existing completion procedures. 
The approach taken in this paper shows, in its treatment of non-reductive equations, 
quite some similarities with recent work by Kounalis & Rusinowitch (1987). In fact, the 
idea of superposing rules on non-reductive conditions of equations has been taken from 
their work. One difference between both approaches i  that our procedure will fail when 
it encounters a non-orientable unconditional equation which it cannot eliminate. On the 
other hand, if our procedure terminates it will have constructed a reductive set of 
conditional rewrite rules which is confluent on all terms, and not just ground-confluent 
A Completion Procedure 53 
as in the case in Kounalis & Rusinowitch (1987). In the latter approach rewriting in the 
completed system is less efficient as it can require reductivity proofs for the substitution 
instances of an equation during rewriting. An unfailing variant of our procedure (which 
can be designed and proven correct according to the ideas described in Hsiang & 
Rusinowitch (1987) and Bachmair (1987) for the unconditional case) would combine the 
advantages of both approaches in the Horn clauses case. 
Conditional equations are a particular case of first-order clauses with equality. In fact, 
the work of Kounalis & Rusinowitch (1987) is just a restriction to Horn clauses of the 
first-order theorem prover described by Rusinowiteh (1987). More recent work on this 
subject is by Bachmair & Ganzinger (1990, 1991) who further optimize the inference 
system, provide a general concept of redundancy as a basis for simplification and 
elimination of clauses, and extend the idea of Knuth-Bendix-completion t  full first-order 
clauses. This latter work subsumes most of the results of the present paper. Nevertheless, 
the treatment here is of interest due to the use of proof transformations and a more 
elaborate ordering on clauses. Proof transformations for the related case of refutation 
theorem proving in first-order logic which are based on a different proof algebra are 
studied by Bachmair (1989). Other related relevant work in this area is by Nieuwenhuis 
& Orejas (1991). 
The procedure described in this paper has been implemented in the CEC system 
(Ganzinger & Sch~fers, 1990) and been successfully applied in practice. Some examples 
will be shown in section 6. 
2. Basic Notions and Notations 
We consider terms over many-sorted signatures. A signature 2 = (S, 12) consists of a 
set of  sorts S and a family fl of sets of operator symbols with arity in S*. Tx denotes 
the set of all E-terms, (Tx)~ is the set of terms of sort s ~ S. By X we denote a fixed set 
of sorted variables containing denumerably infinitely many variables for each sort. Tr.(X) 
is the set of all terms that may contain variables from X. Given a term or formula t, 
var ( t )  denotes the set of variables occurring in t. 
Substitutions are denoted by o', o-', etc. and their application to a term t by to-. 
Substitutions o- with domain xt . . . .  , x~ are also written as [x~o-/x~ . . . .  , x,,o-/xn]. The 
identity substitution (with empty domain) is denoted by A. If o is an occurrence in t, 
then t /o  denotes the subterm of t at o and t i c  ~ t'] denotes the result of subterm 
replacement a o using t'. t[o~ <--- t l ,  9 9 on ~-- t,~], for independent occurrences ol in t, is 
a shorthand for tic1 ~ h] . . .  [o~ <--- t,,]. 
i f  t s Tx(X), by ~" we denote the term obtained from t by considering the variables as 
new constants. 
We assume a reduction ordering > on T~(X)  to be given. A reduction ordering is a 
well-founded ordering which is compatible with operators and stable under substitutions. 
If  > is a reduction ordering and st is the strict subterm ordering, then the transitive 
closure >~, of (>U st) is a Noetherian order on T~(X)  which is stable under substitutions 
and satisfies the subterm property, i.e. terms are greater than any of their proper subterms. 
We also assume that (for each sort) we have an auxiliary constant [ ] in Z such that 
[ ] is smaller than any other non-variable term in Tx(X) wrt. the given reduction ordering. 
54 H. Ganzinger 
A context N is a term with exactly one occurrence of [ ], indicating a hole into which 
other terms can be inserted. N[s]  denotes the replacement of the hole in N by s. The 
distance of  the hole from the root is called the depth of a context. Contexts of depth 0 
simply consist of  a hole. These are also called empty contexts. 
A conditional equation over ~. is a formula of form 
ta=t~A' ' '^  t. = t '~to=t~,  
where n ~ 0 and t~, t~ ~ T~(X)s,. A conditional equation in which the order of terms in 
the conclusion is relevant is called a conditional rewrite rule. We will use the arrow 
to explicitly distinguish rules from equations. For conditional rewrite rules, an additional 
requirement is var( t~) c_ var( to) and, for i > 0, var( tl) ~ var( to) and var( t~) ~ var( to), i.e. 
each variable that occurs in the rule must already occur in the left side of the conclusion. 
In this paper, we assume the reader to be familiar with the basic properties of reduction 
orderings and in particular the recursive path ordering. A recursive path ordering of terms 
is obtained by lifting a well-founded ordering > on the (possibly infinite) set of operators 
of the given signature to paths in terms. The reader may consult Dershowitz & Manna 
(1979), Huet & Oppen (1986) and Dershowitz (1987) for definitions and basic results. 
We briefly repeat some of the basic properties needed below. 
Recursive path orderings > are simplification orderings. That is they are compatible 
with operators, table under substitutions, and satisfy the subterm property. Such orderings 
are in particular well-founded. In this paper we will make use of the following fact about 
recursive path orderings. Suppose two terms s and t are given such that there is a subterm 
s' of  s for which vat(t )  c_ var(s') and s'(e) > t(o),  for each non-variable occurrence 
o in t. Then, s > t. (s'(e) is the root operator in s', t(o) is the operator at o in t.) 
This property about operator precedences is not preserved under substitutions. 
Nevertheless, t r> to" will follow from the stability of the recursive path ordering under 
substitutions. 
The operators in proof terms will be ordered by making use of multiset orderings, cf. 
Dershowitz & Manna (1979) for details. For multisets we have M > N, if N can be 
obtained by replacing one or more elements in M by any finite number of smaller elements. 
The multiset ordering is Noetherian on finite multisets, provided the ordering on elements 
is. 
Kaplan's concept of conditional rewriting introduces the notion of a simplifying rewrite 
rule. It has been generalized to the notion of reductive rewrite rules by Jouannaud & 
Waldmann (1986). A rule is reductive, if to > t~ and, for i > 0, to > tf and to > t'~, i.e. if 
the term on the right side and each term that occurs in the condition is to be smaller 
than the left side of the equation. 
Let R be a set of E-rules and t, t' ~ Tx(X) .  The rewrite relation t---~R t' is given as the 
least fixpoint of the following recursive definition: t--~s t' iff there exists a rule 
t l=t~^' ' '^  t~= t~ l - -~r  
in R, an occurrence o in t, a substitution or : X --~ T~( X)  suchthat /  o = Io., t' = t[ o ,,-- to.], 
and for each i_< n there exists a term s, such that tlo'---~* st and t~o.--~* si. (We will 
subsequently write t,o- Sn tlo. to denote this converging of t~ and tl under R.) 
In Kaplan (1984b) and Jouannaud & Waldmann (1986) it is shown that, in the case 
of finite and reductive R, "-~n is decidable and finitely terminating. (This is proved mainly 
A Completion Procedure 55 
by the observation that N[ lo . ]  > , t  t~tr and N[lo-]  >, t  t~cr, for any context N and substitution 
m) For terminating R, local confluence is equivalent o global confluence and then 
--=R = $~. In this paper, conditional rewrite rules are always assumed to be reductive. A
conditional equation, however, may have conditions of arbitrary complexity. 
3. Proof Terms for Conditional Equational Logic 
3.1. THE S IGNATURE OF  PROOFS 
Proofs are terms in which the operators represent applications of logical inference 
rules. By the "propositions-as-types" paradigm, the sort of a proof term is the proved 
theorem. Hence, for equational logic, the sorts of proof terms are unconditional E- 
equations u=v,  for u, v ~ Tr . (X ) , ,  s ~ S. 
Given sets E and R of conditional equations and conditional rewrite rules respectively, 
the following set of operators (inference rules) is complete for ~ :  
( a)  Subst i tut ion instances o f  rules and equat ions:  
applyn.~ : cffr X ' . 9 • ckcr ~ (s~ = t~r), 
and 
app lyR~,~ : clcr x . .  9 x cko."> ( t~r = so'), 
for r /~ C~s~t~R or 7/-= C~s= t~E,  where C=-ct^. . .  ^ Ck, k>---O. Hence, 
apply,.~ and applyRn.,~ are k-ary operators that map proofs for the condition instances 
cio- to a proof for so- = to. and tcr = so', respectively. The signature of proof terms has a 
particular operator for each (head)  appl icat ion and reverse appl icat ion of a rule or equation. 
The signature of proof terms is therefore infinite, even if the set of rules and equations 
is finite. We will also use the notation 
e l  9 9 9 Pk  
so" --~ to" 
for app lyc~,~t , r  P l ,  . . . , Pk) ,  
P1. . .Pk  
tcr ~-- scr 
for app lyRc~s_ , .~ , (P~, . .  . , Pk) ,  
P~ . . . ek  
so- ~--> to- 
for app lyc~s=, ,~(P l , . . . ,  Pk),  and 
P l . . . Pk  
to" ~ so;, 
for app lyRc~=t ,~(  P , ,  . . . , Pk).  
This notation obviously abstracts from the details about the used rule or equation and 
substitution, and hence wilt not always be sufficiently precise. Where needed we wilt 
provide additional information separately, e.g. attach the rules or equations as subscripts. 
In the case of an empty condition we will simply write so-p t~r, for p E (---,, ,---, ~}.  
56 H. Ganzinger 
( b ) Ref lex iv i ty  and  Transit ivity:  
_ ;  . . . . .  ; _ : ( so  = s , )  x ( s ,  = s2) x . .  9 x ( s . _ ,  = s , )~ (so = s . ) ,  n -> 2, o r  n = 0. 
This operator allows to form sequences of proofs. We have chosen a variadic operator 
to abstract from the obvious associativity property of the binary " ;" .  The case n = 0 
represents the reflexivity axioms So = so. We will also use the notation 
for 
P I1  9 9 . VlklP21 . . .  P2k2 . . . . . .  Ph i * . .  Pnkrl 
SoPoS lP lS2  9 . . Sn - lPn - lSn  
S0P0S1 S lP lS2  Sn-lPn-lSn 
where pt ~ {~, ~, *-~}. Another notation is 
Q1. . .  Qk Q I . . .  Qk for 
sop * Sn Sopslp 9 9 ps,  ' 
n ~ O, p ~ {--*, (--, '(--)'}. 
(c) Compat ib i l i ty  with contexts:  
Contexts N of depth 1 take proofs for s = t into proofs of N[s]  = N[t] :  
N[_ ] : (s  = t )~ (Nrs]  = Nit]) .  
We will write 
P, . . . Pk for N[  P-L": :-P-~k q 
N[s l ]p lN[s2]p2  . . . P , - ,  N [s , ]  L slpls2p2 . . . Pn-1 s, J" 
Formally, contexts of depth > 1 have to be viewed as nested applications of contexts of  
depth 1. 
(d)  Symmetry :  
is., :(s = t) ---* (t = s). 
The subscripts , t will usually be omitted. 
Given E and R, we will denote by ~(E, R) this signature of proof rules of the equational 
calculus. 
As we have operators for applying rules and equations both ways, the operator for the 
symmetry of  equality is redundant. It will be used as an auxiliary operator for defining 
transformations of proof terms. We also could have avoided the introduction of context 
operators if  we had extended the notion of rule and equation application to applications 
in context. This is done in Bachmair et al. (1986), Bachmair (1987) and KiJchlin (1986). 
In these papers, moreover, proofs P and inverse proofs is.,(P) are identified. Hence, there 
is no need for the /-operators at all. We have felt that our slightly more complex notion 
of proof  orderings to be developed later justifies our slightly more redundant signature 
of proof terms. The redundancies will be removed by proof normalization rules to be 
given below. 
A Completion Procedure 57 
For an example, suppose we have the following set E of equations 
1 (O < sO) ----- tt 
2 
3 (sx<y)=(x<py)  
4 (nx < y) = (x < sv) 
5 (O<x)=f f==>(O<px)=f f  
and the set R of rules 
6 (0 < x) = tt ~ (0 < sx) ---> tt 
7 spx---> x
8 psx--* x 
In this case, 
(0 < sO) ~1 tt 
(0 < ssO) -->6 tt 
(pO < ssspO) --*7 (pO < ssO) ~4 (0 < sssO) ~ tt 
is a proof for (p0 < ssspO) = tt, in which we have explicitly indicated the used equations 
and rules. The inference notation of proof terms also abstracts from the precise interleaving 
between the context operators and the other proof operators. For normalized proof  terms 
there is always one unique way of inferring this interleaving: 
DEFINITION 2.1. A proof  term is said to be normalized if it is in normal form with respect 
to the following proof transformations (we use the arrow ~ to distinguish the rewriting 
of proof terms for the rewriting---> of object terms; 1r and ~r~ are variables for proofs): 
i (K r ~r])-----> K[ i (~) ]  
K['qrl, "/r2, . . . ; '/rn ] "K[ I r l ] ;K [1r2] ; . . . ;K [~r , ]  
i(r ; ~-2;... ; 7r,) ~ i (~ , ) ; . . .  ; i(~'2); i(qrl) 
i (app ly (~r l , . . . ,  ~r,)) > app lyR(~r l , . . . ,  rr,) 
i( applyR( ~rl, . . . , ~r,) )-----* apply( ~r~, . . . , ~r,) 
i( i('n') ) ~, "rr 
Normalization removes patterns of form i(P), for a non-variable term P, and distributes 
contexts over sequences of rule and equation applications. The proof normalization rules 
are confluent and terminating. 
DEFINITION 3.2. A (normalized) proof term is called a rewrite proof  if it has the form 
P~.. .  P, 
s--~* u *--* t '  
with rewrite proofs Pi, 1 -< i - n, n ~ 0. 
Hence, rewrite proofs contain no applications of equations and no peaks *-----> in rewrite 
rule applications. I f  s ---~R t, this step of conditional rewriting is represented by a proof  
58 I-I. Ganzinger 
Plo~ M term of form over g(E, R), with a tuple P~ of rewrite proofs for the appropriately 
S'--> t 
substituted conditions of the used rule. 
3.2. COMPLEXITY OF PROOFS 
In order to define a well-founded ordering on proof terms, we will now introduce a 
complexity measure c on the proof operators. We will then, for any two proof operators 
F and G, define F >Gi t t  c(F) > c(G). This precedence of operators will be well- 
founded. Therefore, the lifting of > on operators to a recursive path ordering >~ on the 
proof  terms will yield a simplification ordering on proof terms with variables, i.e. on 
T~(X).-r 
We have assumed to be given a reduction ordering > on T~(X). Moreover, let min be 
an element smaller than any term in T~(X) (including contexts). If C is a set of  
unconditional equations, by ~(C)  we denote the multiset of terms on the left and right 
sides of the equations in C. By u we denote the union of multisets. 
DEFINITION 3.3. We define 
c(applyc~s--t.~) = c( apply Rc~, ,~)  = ({so-}, {s}, ~-(C) u {t}), 
c(applyc~,=,.~) = c( apply Rc~=,.~) = (:Y-(Co') u {scr, to'}, ~(C)  ~ {s, t}, ~),  
c(K[_]) = (~, ~, {r}), 
c(_;. . .  ;_) = (~, ~, ~), 
c(i,,,) = ({min}, ~,  ~).  
These triples are compared lexicographically, using the lifting of  >,t to multisets of 
Tx(X)-terms for the first component, he lifting of the subsumption ordering >> on terms 
to multisets of terms for the second component and the ordering on multisets of terms 
induced by >,, for the third component. 
For an equation, the multiset of all substituted terms of the equation is the dominating 
component of the complexity of any application of the equation in a proof. For a rule, 
the substituted left side of the rule is the major complexity measure for its application. 
Because of  the reductivity of rules, the left side dominates any other term in the rule 
anyway. Hence, the actual substitution plays a major role in the complexity of an 
application. In the following, if 7/ is a conditional equation or rule, c('0) will always 
denote the complexity c(apply,.a) of an application of ~7 under the identity substitution A. 
Note that normalization of proof terms implifies these wrt. > ~. Any of the normalization 
rules L--+ R satisfies L >~ R. 
3.3. PROOFS OF CONDITIONAL EQUATIONS 
Proofs of  conditional equations can be written as proof terms with variables to represent 
the "assumed proofs" for the conditions. We denote by Xc, for any given multiset C of  
unconditional equations, a C-sorted family of sets of proof variables. Proof variables rr 
of sort s = t are also written as 7r : s = t. This representation of proofs for conditional 
"~ More precisely, we compare quivalence classes of proof terms where two terms are equivalent if correspond- 
ing operators have the same complexity. This detail is relevant to show the reductivity of  the proof normalization 
rules for the removal of  i~,,-operators and is needed nowhere else, 
A Completion Procedure 59 
equations is complete as C ~ s = t is valid in all models of E u R iff .~------e~R.o r.
(Remember, g and C denotes the replacement of variables by constants in s and C, 
respectively.) For proof  terms P e T~(~,~)({cr~: e~, . . . ,  or, : e,})~ we will also use the 
sequent-like notation 
~'l : el , 9 . . ,  'rn : enF-E, R P :  e 
to indicate the variables occurring in P, and abbreviate or;: et simply by e;, where the 
names of the variables do not matter. As an example, 
(0 < sx)  = tt f- (pO < x)  xr 4 (O'~sX) = tt 
represents a proof of (0 < sx) = t t~ (pO < x)  = tt. The last step of the proof uses the 
hypothesis. 
We will later have to transform proofs for conditional equations into proofs for 
substituted equations. Let o- be a X-substitution. I f Q is a proof, by g (Q)  we denote the 
proof obtained from P by the following rules: 
O-(N[P]) 
o-( apply[ R ] D~t,~.~'( P, , . . . , Pk) ) 
o-(is, t (P ) )  
o"( Pl ; . . .  ; Pk) 
o"(,rr : s = t) 
= Ncr[o'(P)] 
= apply[R]o~tp~, ,~,~(o' (Pt ) , . . . ,  g (Pk) )  
= is~,t~,(o'(P)) 
= o- (P~) ; . . .  ; ~r(Pk) 
= ~r : so" = to-, for any proof variable ~r. 
Hence, if Q is a proof  of C ~ s = t, o'(Q) represents a proof  of Co- ~ so" = to'. o'(Q) 
can be viewed as the result of applying an ~g(E, R)-signature morphism induced by o- to 
Q. It should not be mixed up with applications of substitutions ~" of proofs for proof 
variables to a proof P. The latter would be written as Pc. 
When, during completion, one wants to eliminate a conditional equation, one is obliged 
to construct a proof of the equation which has a bounded complexity. 
A proof P e T~(n,n)(Xc)s=t is said to be 3,-bounded, 3' an operator in our algebra of 
proofs, if for any operator F in P it is c(3,) > c(F ) .  P is said to be ~?-bounded, 77 a 
conditional equation or rule, if P is applyn.A-bounded. Hence, a proof for C ~ s = t 
which is bounded by C ~ s = t is in particular simpler than the proof that just applies 
C ~ s = t under the identity substitution. The complexities are generally such that 
rewriting a term in an equation C ~ s = t is always a proof that is C ~ s = t-bounded. 
The order used to compare of the first component of our complexity triples is stable 
under substitutions. The two last components do not depend on the substitution with 
which an equation or rule is applied. Therefore, if C I--E.R Q : s = t is bounded by ~7 then, 
for any o-, o-(Q) is bounded by applyn.~,. 
4. Inference Rules for Conditional Equational Completion 
Below we list the inference rules for conditional completion c~cs 
(0 )  Orienting an equation 
Ew{C~s=t} ,R  
if {s} > {t} u i f (C) .  
t ? ,R  ~ {C ~ s~ t}'  
We may orient an equation, if the left side is greater than each term in the condition as 
well as the term on the right side wrt. the given reduction ordering. 
60 H. Ganzinger 
( A ) Adding a conditional equational consequence 
E,R 
i f3Ct -~,RP:S  = t. 
Eu{C~s=t} ,R '  
Hence we may add an arbitrary conditional equational consequence to the set of equations. 
Concrete completion procedures will only make restricted use of this inference rule and 
add certain superposition i stances of rules on rules and of rules on equations, cf. below. 
( SE ) Simplifying an equation 
Ew{C~s= t} ,R  
if 3C ~--E.R P :s  = u bounded by C ~s  = t, and s > u. 
Eu{C~u= t} ,R '  
We may simplify the conclusion of a conditional equation, if the complexity of the 
equation is thereby decreased and if there is a proof of C ~ s = u which is less complex 
than applications of  the unsimplified equation. Of course it is assumed that the symmetric 
case in which t is simplified is also covered by this rule. 
( D) Deleting a trivial equation 
Ew{C~s=t} ,R  
E, R , if 3C  t-E, R P : s = t bounded by COs= t. 
an equation may be deleted, if there is a simpler proof for it than an application of the 
equation itself. 
( SC) Simplifying a condition 
E u{C^ u = v~s= t} ,R 
i f3Ct -e .RP :u  = w 
Ew{C ^ w=v~s=t} ,R '  
bounded by C^u=v~s= tand  u>w.  
E, Ru{C ^ u = u~s---> t} 
i f3C~-~,eP :u  = w 
E, Rw{C ^ w=v~s- -~t} '  
bounded by C^ u=v~t=tand u>w.  
A condition may be simplified under the assumption that the other condition equations 
hold true. The symmetric ase, in which v is rewritten, is assumed to be also covered by 
these rules. The difference in complexity bounds for equations and rules is due to the 
fact that we do not want to recompute superpositions from rules that have been simplified 
on their conditions. 
( DC)  Deleting a trivial condition 
E u{C ^ u=v~s= t},R 
Eu{C~s=t} ,R  , i f3C~-~.RP:u=v.  
E ,R  u{C ^ u = v~s- -> t} 
i f3C~-e,  RP :u=vboundedby  C^ u=v~t=t .  
E, Ru{C~s- -~t}  ' 
A condition which is subsumed by the other conditions may always be deleted. The proof 
for C ~ u = v may be arbitrarily complex in the case of equations. In the case of rules 
we require a complexity bound to not have to recompute superpositions with the simplified 
rule. 
A Completion Procedure 61 
(SRL) Simplifying the left side of a rule 
E, Ru{C~s- -> t} 
if 3C  k-~.RP:s = u bounded by C ~s~ t, and s > u. 
Eu{C~u=t} ,R '  
(SRR) Simplifying the right side of a rule 
E, Ru{C~s- - *  t} 
if 3C  ~'E.RP:t = U bounded by C~ t~ t, and t > u. 
E,R u {C ~ s-- ,  u}' 
The bound C ~ t --* t for P will allow to avoid the recomputation of superpositions with 
the simplified rules. 
It is obvious that any of the above inference rules leaves the congruence ~- ~R invariant. 
We now demonstrate that proof terms become less complex in proof signatures that are 
obtained by inference rule application. 
LEMMA 4.1. The ordering > ~ is a proof ordering for conditional completion, Le. for any 
inference (E ,R)  F-ee (E ' ,R ' )  and any proof term P e (T~(~,R)).=. we have P e 
(T~(E',R')).=v, i.e. P is also a proof of u = v in the new system, or there exists a proof 
P' e ( T~(E'.R')).=~ of u = V in the new system which is less complex, i.e. P > ~ P'. 
PROOF. We demonstrate, for any of the CC-inference rules, how "old" proofs can be 
simulated in the new system. The simulations will be represented as sets of rewrite rules 
L--* R on proof terms such that L >~ R. Hence, by application of these proof rewrite 
rules, proofs become smaller. I f  a proof cannot be rewritten, it is already a valid proof  
in the new system ~(E' ,  R'). The rules are, as usually, meant as rule schemes in which 
arbitrary proof terms (with or without variables) may be substituted for the variables. 
Variables for proofs are denoted by Ir~, The inference rules mostly assume, as a 
side condition, the existence of some bounded proof K~: e~, . . . ,  K, : e, I--~,R P of some 
equation with condition C = {e~, . . . ,  e,}. In these cases, P '  will denote the proof  
o-(P)[cr~/~c;; 1 -< i_< n] and the variables ~rt will be of the required type e~t~. 
ad (o). 
Suppose (E u {C ~ s = t}, R) ~e  (E, R u {C ~ s ---* t}) and s > t. The rules 
~1- . .  ~n ~1 ' ' "  ~n ) 
So- "6~ C_-.-r t to" SO. ~ C=>s~t  to" 
and 
r . . .  % crl . . .  ~n ). 
to- ~'~C~s=t So- tO" <- -C~s~t  so- 
replace any application of the equation by an application of the rule. It is 
c(applyc~s=,,~) = (J'(Co.) • {so-, to-}, ~r (C) .  {s, t}, 0) .  The latter is greater than 
({so-},{s}, ~- (C)u  {t})= c(applyco~t,~.). Hence the proof transformation rules are 
reductive. 
ad (a). 
Nothing needs to be shown, as any old proof term is a valid proof  term in the transformed 
proof  signature. 
62 H. Ganzinger 
ad (SE) .  
In this case, old proofs can be rewritten to new proofs by 
q'/ ' l  " "  "q'/ 'n '77"1 - ' "  q'/'n . . . . . . . . .  > p' ;  
SO" 4r~C=_-~s~tto- 110" ~'->C~u=ttO" 
qT1 9 " 9 q rn  71"1 9 9 9 "B 'n  
, , i (e') .  
to- ~-'~c~s=t so- to" <-~c~,=t ucr 
The reductivity of  these rules follows from the boundedness of P by C ~ s = t, and 
hence the boundedness of P '  by applyc~,=t,~,. Therefore the application of the original 
equation C ~ s = t under substitution o- is more complex than any operator in P' .  
Moreover, c(applyc~,=t.~,) > c(applyc~,=t .~) ,  as s > u. Note also that the operator i(_) 
has a complexity less than any application of a rule or equation. 
ad (D) .  
~l  . . .  ~n  > p ,  
SO" <---> C~s  = t to"  
err 1 . . , "17 n 
> i (P ' )  
to"  <" ->C~s=t  SO"  
achieve the desired transformations. 
ad (SC) .  
We first prove the case in which the condition of an equation is simplified. The following 
rules can be used to construct new proofs using the simplified equation. 7r is assumed to 
be a variable of sort uo- = vo-. 
"rrl . . .  r 7r 7rl . . .  ~,, i (P ' ) ;~ .... ) 
so" ~->c^,=u~=t to" so" * -~c^w=~s=t  to- 
I r l  . . .  ~r, ~ ~rl . . .  ~ ,  i (P ' ) ;T r  
to- ~-->c^,,=o~,=t so- tcr *">c^w=o~,=t so" 
Note that 
c(applyc^,=o~,=t.,~) = (E ' ( (C  A U = V)O-) W {SO', to-}, ,.q'(C A U = V) U {5, t}, ~)  
> ( f f ( (C  ^ w = o)o-) • {so', to'}, ~-(C A W = V) w {s, t}, ~)  
= c(applyc . . . .  ~=,.,,). 
By construction, P '  is less complex than the given application of the original equation. 
In the case of simplifying the condition of a rule, the third component in our operator 
complexities comes into play. We have 
e(applyc^,,=o~,~,.,,) = ({scr}, {s}, J - (C  ^ u = v) u { t})  
> ({so-I, {s}, e r (c  A W = V) U {t}) 
= c(app lyc^w=~,~, , , , ) .  
Hence, the same kind of proof  transformation is reductive also for the case of a simplified 
rewrite rule. 
A Completion Procedure 63 
ad (oc). 
We again prove the case in which the condition of an equation is simplified. Here we 
have the rule 
qT" l  9 9 9 " f in  " f i  q ' / ' l  ~ . * " f in  
so" <-->c^.=u~s=t to- sO" ~c~,=t  o- 
the reductivity of which is obvious. 
ad (SRL). 
Old proofs can be rewritten to new proofs by 
"/1"1 9 9 9 ' T / 'n  "2"/'1 9 9 9 " f in  p'; 
so, -->c=,~,) to, uo- - *c~,=,  tcr 
"7/ '1  9 " '  " f in  " i l l  ' ' '  qT"n  
, i(P') 
to- <'--c~s~t so" to" <-->c~u~t utr 
The reductivity of these rules follows from the fact that both u and t as well as any term 
in the condition C are simpler than s. Also, the boundedness of P and hence P'  is relevant. 
ad (SRR). 
Old proofs can be rewritten to new 
"/1"1 9 . . " f in  
So" --> C~s--*t tO" 
proofs by 
q ' r l  9 9 - " f in  
....... > 
$o" "---> C==>s~u 1.10" 
; i (P')  
"17"I 9 9 9 "f in qr l  9 9 , "f in p'; 
to" ~'-'C=r So" NO" <--C~s-. .u SOt 
As t > u, the reductivity of these rules follows from the third component in the complexity 
measure for rewrite rule applications. 
Note that for this proof we need the ordering >,~ on proofs to be stable under 
substitutions. Some of the above rewrite rules are not right-linear. Therefore it is not 
possible to simply take the multiset of the complexities of operators in a proof term as 
complexity measure. 
A completion procedure, i.e. a mechanism that computes sequences (E0, Ro), (El, R0 ,  9 9 9 
of derivations using the above inference rules for conditional completion, is complete, if 
any proof of an equation can be transformed into a rewrite proof  in some derivate (E;, Ri) 
of the initial specification (E0, Ro). To prove this it is sufficient to show that any 
(normalized) proof P c (T~czj.sj)),=~ which is not a rewrite proof  can be transformed 
into a less complex proof  Q e (T~(~k.Rk)) . . . .  for some k. As >~ is well-founded and a 
proof ordering for conditional completion, after finitely many such transformations a 
rewrite proof must be obtained. 
I f  a normalized proof term is not a rewrite proof, it must contain an application of an 
equation or a subproof of form s *-  u --> w. If  the latter situation cannot be simplified, a 
criticalpair must be added to the set of equations. The following is the notion of critical 
pairs in the conditional case. 
DEFINITION 4.2. Let two conditional rules C ~ M --> N and D ~ G --> H be given and 
assume that their variables have been renamed such that they do not have any common 
variables. Assume moreover that o is a non-variable occurrence in M such that M/o  and 
64 H. Ganzinger 
G can be unified with a mgu o.. Then, (C ^ D)o .~ M[o  ~---H]o- = No- is a (contextual) 
critical pair between the two rules. 
The following lemma is a slight generalization of the lemma by Jouannaud & Waldmann 
(1986) which proves that for reductive rewrite rules local confluence is equivalent to the 
convergence of all critical pairs. 
LEMMA 4.3. Let R be reductive. I f  s ,~-~ w "--~R t, then there is also a simpler proof Q o f  
s = t or there exists a contextual critical pair C ~ c = d between two rules in R such that 
s = N[co-], t = N[do.] and Co" c ~,R. Moreover, Q does not contain any application of  an 
equation. In particular, Q is a rewrite proof in the case of  unconditional rewriting of  w. 
PROOF. We will construct asimpler proof of s = t in those cases in which the two rewritings 
of w do not overlap. In the remaining ease the assertion follows immediately from the 
definition of  contextual critical pairs. 
(a) The rewritings have disjoint redexes 
Then the given proof  of s = t is of form 
P, P~ 
N[  02 ~-- 12o-2][r,~rl] ~-- N[  02 +- 12o-2][llo-1] ' N[  Ol ~-  1,o-1][12o'2] ~ N[  ol <-" lto-~][r2o-2] 
with independent occurrences o-~ and o2 in N. The proof 
/'2 P1 
N[  01 <'-" r, oq][lzo-2] --+ N[  01 *-. r,o-1][r2o-2]' N[  02 *,'-- r2o-2][rlo-1] +-- N[  02 ~'- r2o-2][Ilo-1] 
is less complex as the context erms in the proof algebra which correspond to the reduced 
contexts N[o i  ~-- rltr~] are less complex than those corresponding to the initial contexts 
N[  ol ~-- l~ri], i = 1, 2. 
(b) The rewritings occur one above the other 
Again we assume applications of rules Ci ~ l~ ~ ri, i = 1, 2 with matching substitutions 
o-~. Additionally we may assume the following situation. 
(i) Rule 1 is appl ied at an occurrence o in context K. 
(ii) l~ occurs at occurrence ~ of a variable x in It inside w. (The general case in which 
/2 occurs inside a bigger term at x is not really more complex for what we have 
to prove here.) 
(iii) There are n >-- 1 occurrences ~i of x in 11 and m >-- 0 occurrences ~ of x in rl. 
(iv) C~ consists of exactly one equation, say u = v. u and v both have exactly one 
occurrence to and ~r, respectively, of x. (The general case does only add notational 
clutter in the following proof.) 
(v) P1 is the rewrite proof for uo.1 = vo.a used upon application of rule 1. P2 is the 
tuple of rewrite proofs for the condition C~o-2. 
Then the given proof  P is of form 
P1 
K[&o-1] ~ K[t~o-1]' 
/'2 
K'[  I2O-2] .-o K'[r2o-2]' 
A Completion Procedure 65 
where 
K '  = K[o  ~/16t ] [o .s  ~-'- 12~r2,. 99 o.~, ~ 12~r21 
with ~1 as  o" 1 except hat it substitutes the variable x by a hole [ ]. 
A proof of s = t in which the reverse application of rule 1 follows m applications of 
rule 2 would be the sequence Q1; Q2; Qa of the following proofs: 
Q1 represents m applications/2o'2 ~ r2cr 2 of rule 2 at the occurrences ~ of x in rl which 
are the occurrences o.Ki in 
s --- K [o  e -  rlffh][o.~i ~-  12tr2, 1 <-- i <-- m] .  
This rewrites the latter term into the term 
K[o  <-- r l~l][o.~i <--- r2cr2, 1 <-- i <- m].  
Q2 represents he reverse application of rule 1 at o under a substitution cr~ which is equal 
to 0" 1 and ~1, except that it substitutes x by r~r2. Hereby the proof of the rewritten 
condition instance uo-~ = vcr~ is constructed by (reversely) rewriting o-~ into o'1, then 
applying the given proof P1 of uo'~ -- oct I and finally rewriting ~1 into cr]. (Note that 
u~l[r2~2] = ucr~, udh[12~r2] --- uo" 1 and vc~l[r2o'2] ~ vcr~, vffs[12cr2] ~ wr I .) Formally, 
uS-,[ r2cr2] .s-- u f  ,[12cr2]; P1 ; v~'~[12cr2] ~ vo',[ r2cr2] 
Q2 = K[rlff~] ":-- K[tao"l] 
Qs, finally, represents the n - 1 reverse applications of rule 2 at the occurrences ~, i > 1 
in I1, which are the occurrences o.~, i > 1, in 
K[lto'[] --- K[o  <-- 11~9~][0.~i <-- raOr2 ; 1 ~ i --< n]. 
This takes this term into the term 
t =- K [o  *-- 1,5"1][o.~1 *'- r2cr2, o.~i ~-- 12cr2; 2 <- i ~ n], 
as required. When comparing this second proof with the original one, we can make the 
following observations: 
Pa 
(I) K[ r ,  cr,] <--- K [ l ,  oh] >r O2: 
This is because 11 o'~ > l~ cr~ and because ({l~ ~r~}, {ld, {u, v, t~}) is greater than the complexity 
of any of the applications of rule 2 in the proofs of ucr~ = uoq and wrl = o~r~. This can 
be seen from 11o'1 >,~ 12or2. The reductivity of the rewrite rules is then needed to conclude 
that 12~2 is more complex than any of the redexes in the proofs for C2o-2. 
(2) P1 
K[r l ( r l ]  +-K[ l l cq ]  >~ Qa: 
To justify this claim we note that any rewriting in Qa occurs in terms smaller than l~ o-~. 
Q3 contains only applications of rules and contexts. For the same reason we obtain 
/'1 
(3) kErlcrl] <-- K[I1~ >r QI. 
Altogether, P >~ Q~; Q2; Q3, which was to be shown. 
In the unconditional case Q is a rewrite proof. Hence, Lemma 4.3 is the generalization 
to the case of conditional equations of Bachmair's formulation of the critical pairs lemma 
(Bachmair, 1987). 
66 H. Ganzinger 
The following definition defines fairness of a completion procedure in a way such that 
its completeness for equational logic is induced. By CP~ we denote the set of critical pairs 
between any two rules in R~. 
DEFINITION 4.4. A CC-derivation (/30, R0), (E~, R~), . . .  is called fair, if (1) and (2) are 
satisfied. Hereby, R~ -~ L..J~ f"~i~  Rj denotes the set of final rules of the process. 
1. I f  C ~ c = d ~ ('~j~ Ej for some i, and if for a substitution or there exists a tuple 
P of rewrite proofs in R~ for the equations in Co', then there exists an index k and 
a proof  Q ~ (T~gu~k.Rk))ccr~a~ for co- = do- such that 
P 
co" ~--~C~r do" > ~ Q" 
2. Let C ~ c = d ~ Oi~ ,. CPi, for some i, be obtained by superposing rules A ~ l ~ r, 
B ~ s ~ t ~ Rt with kr' the superposition term. I f  there exists a substitution or, 
o" = o"~', tuples P/, and PB of rewrite proofs in R~ for the conditions Ao- and Bcr, 
then there exists a k and a proof Q ~ T~(Ek, R~ for c~" = d~ such that 
cz ~A~,_~/l~r , - - ,  d~ > ~ Q" 
Note that we do not require that any proof which applies an equation or a peak be 
simplified. It is sufficient, as to be seen in the following lemma, that such a simplification 
exists in cases where the conditions of the corresponding applications of equations and 
rules are proved by rewrite proofs. Note also that we do not require that equations be 
either simplified or oriented eventually. As we shall see later there are other ways of  
simplifying applications of equations in proofs. 
LEMMA 4.5. Let (Eo, Ro), (Et,  R1), 9 9 9 be a fair  CC-derivation andPbe a normalized proof  
in ( T~r some equation u = v. I f  P is not a rewrite proof, then there is, for  some 
k, a proof  P '  ~ (T~Ek.~k)),=~ such that P > ~ P'. 
PROOF. Suppose P to be given. If it is not a rewrite proof it contains an application of 
an equation, i.e. a subterm /3 of form 
Q 
SO" < ' -~C~s=t  tO" 
or a peak, i.e. a subterm of form 
RS 
S ,~--- W-----~ t " 
We may assume that we have selected these subterms uch that they have minimal height, 
that is the R, Q, S are (possibly empty) tuples of rewrite proofs. If any of the equations 
or rewrite rules in these proofs are eliminated in some later step m of the completion 
procedure, from Lemma 4.1 follows the existence of a simpler proof/3, for/3 in ~(E,,, R,,). 
In ease all used rules and equations persist, the application of C ~ s = t can be simplified 
by (1) in the definition of fairness. In the case of a persistent peak we may apply the 
critical pairs Lemma 4.3 and either construct a simpler proof or conclude that the branching 
is caused by a critical pair between two rules in R~. A simpler proof/3, now exists because 
of the second fairness requirement. In any case we have managed to transform the critical 
subterm 13 of  P into a simpler proof/3, in ~(Em, Rm). 
A Completion Procedure 67 
Replacing/3 in P by/3' yields, because of the fact that >~ is compatible with operators, 
a proof P" which is simpler than P. However, it uses rules and equations from both 
~(Em, R~) and ~(E~, R~). To construct a proof P' in ~(Ek, Rk), k = max(i, m),  we can 
apply to P' the transformations given in the proof of Lemma 4.1 according to the inference 
rules used along the derivation of ~(Ek, Rk) from ~(E~, R~), n = rain(i, m). 
Hence, if u ---n v and if the completion procedure does not fai l  for inputs E and >,  that 
is generates a fair CC-derivation, it will generate a pair (Ek, Rk) such that USRk V. In 
particular, the limit RoD = ~_Jj f~j~i Rj is canonical and --=R~ = ------eoURo. In this case, the 
equational theory can be decidei:l by rewriting. Note that the final set of equations need 
not be empty. The final equations however do not contribute to proofs of equations. They 
could in principle be eliminated. However, we rather prefer to keep them, as in the case 
of a subsequent enrichment of the specification they have to be reconsidered wrt. to 
fairness condition (1). An enrichment may increase the set of solutions of the equation's 
condition. This distinguishes the conditional from the uneonditionaI case and this 
approach from the ones of Kaplan (1984b), Jouannaud & Waldmann (1986), Ganzinger 
(1987) and Kaplan & Remy (1987). 
5. Completion Concepts 
In this chapter we present he formal justification of some technical details of the 
completion procedure in CEC (Gazinger & Schiifers, 1990). 
5.1. TECHNIQUES FOR OBTAINING BOUNDED PROOFS 
As we have seen in the last section, simplifying conditions and conclusions of conditional 
equations and rules decreases the complexity of proofs. It also decreases the chances for 
failure of the completion procedure due to non-reductive r write rules. 
The simplification inference rules and the inference rule (D) for the elimination of 
equations are based on bounded proofs of conditional equations. In practice one has to 
have appropriate techniques to be able to establish proofs of this kind. In the following 
we will present hree such proof techniques that have shown to be useful. 
5.1.1. REWRITING WITH EQUATIONS OF CONDITIONS 
The first of our three techniques can be used if condition equations can themselves be 
oriented according to the given reduction ordering. In this case, proofs of conditional 
equations can be attempted by rewriting using the current set R of (reductive) rules and 
the (skolemized) condition equations as additional rewrite rules. 
PROPOSITION 5.1. Assume that any equation in a condition C can be oriented, i.e. it holds, 
w.l.o.g., for any equation u = v ~ C, u > v. 
1. For any two terms s and t, i f  s-'~ R ,e  ~, then there exists a ( C ~ s = min) .bounded 
proof C r-o. R P : s ~ t for  C ~ s = t. Furthermore, this proof is even bounded by 
C ~ s --~ min, /f {s} > W(C)  and if the rule D ~ l --~ r that is applied to rewrite w is 
either a member o f  C, or the rule is not applied at the top o f  ~ or ~ >> I. 
2. For any two terms s and t, i f  s SRue ~, then there exists a Cos  = t-bounded proof  
C~-o ,RP :S= t fo rCes= t. 
68 H. Ganzinger 
PROOF. We prove this lemma by Noetherian induction over the complexity of s 
Ad 1. Let D ~ l ---> r be the ruie that is applied in g = 1Q[o <-- 1~], with ~ the matching 
substitution and o an occurrence of a hole. In case D ~ l --> r is an equation ff = 5 ~ C, 
the rewriting corresponds to the proof term N[~ : u = v], with some context N of context 
operators and a proof  variable ~ : u = v. This proof obviously has the required properties. 
Otherwise, the rule is a member of R. Because of the reductivity of R, any term in D5 
is smaller than ~. Moreover, D6 c Sn~,  otherwise the rule would not be applicable. 
Using the induction hypothesis for (2) we may now assume the existence of C ~ uo- = 
vo--bounded proofs C~-~.~ P,=~ :uo- = vo-, for any equation u = v ~ D. The complexity 
of any operator in P~=o is hence bounded by ( J -(C) w {uo-, vcr}, St(C) u {uo', vo'), ~) ,  
the latter being smaller than (~-(C) w {s}, {s}, St(C) w {rain}) and hence in particular 
smaller than c(C ~ s = rain). Because of the reductivity of rewrite rules, the application 
of D ~ l ~ r is C ~ s = rain-bounded, too. Therefore, 
N[ to'] ~ ~,~I-  ~N[ ro'] 
is C ~ s = rain-bounded. If additionally s is greater than any term in C, we obtain 
( i f (C )  w {s}, {s}, i f (C )  w {min}) > ({/o-}, {I}, ~-(C) u {rain}), if the application is not 
at the top or if s >> Z In this case, the rewriting is C ~ s---> min-bounded. 
Ad2.  As we may apply (1) to any rewrite step in ~ SR~e ?, this assertion is an immediate 
consequence of the reductivity of the rewrite rules. 
For example, ---~nu~-writing is always possible (and then a good choice) in specifications 
in which conditions are restricted to Boolean conditions, i.e. equations of form p = tt or 
p = if, if we assume tt and ff to be smaller than any other Boolean term. More general 
classes of conditional equations of this kind are the ground-normal systems of Bergstra 
& Klop (1982). In general, one may always at least use those equations in C which can 
be oriented. 
The following example shows some of the power of rewriting with condition equations 
as additional rules (list notation as in PROLOG): 
(1) x ~ y = tt==> detete([ylys],  x)--* [u x)] 
(2) has(xs,  x) -- ff ==> delete(xs, x)--~xs 
(3) x ~ y = tt=> has([ylys], x )~ has(ys, x) 
Overlapping (1) and (2) yields the critical pair 
x # y = tt and has([ylys],  x) = if==> [yldelete(yx, s)] --* [ylys]. 
Rule (3) can be applied in has([~l~s], E) as E r ~7 rewrites to tt, this is the first condition 
of  the critical pair. This simplifies the second condition to has(ys, x) = ft. Now, in the 
next simplification step, [fldelete(~s, :~)] can be rewritten under R u /3 ,  where D is the 
simplified condition D = {x r y = tt, has(ys, x) = it}. Having has(~s, ~) ---> ff available 
as auxiliary rule in D allows to apply rule (2). This results in rewriting [~ldelete(~s, Y)] 
to DTbTs]. Now, both sides of the conclusion have become identical. 
A Completion Procedure 69 
5.1.2 CONTEXTUAL REWRITING 
A more general reduction relation, called contextual rewriting in Ganzinger (1987) and 
Zhang & Kapur (1988) is defined as follows: 
DEFINITION 5.2. S "-'~R,C t i f f  S =C K[lo'], s -----,t K[kr],  t = K[rcr] . . . .  u = v . . .  ~ I--> r e 
R, and uo- SR, c vtr. In this case, Sn, c stands for ucr---~*c u', VO'-->*R,C V', and u' = v' e ------o 
(Again, the least fixpoint of this recursive definition is meant.) 
R,c is a restricted form of rewriting modulo C. The restriction is that one may not 
produce larger terms by the -c -steps.  Note that ----c is decidable if the equations in C 
are ground (Ackermann, 1954). This is the case in our application. Rewriting by -->R.C 
also yields bounded proofs: 
PROPOSITION 5.3. 1. For any two terms s and t, if s--~R.e [, then there exists a (COs  = 
min)-bounded proof C t-~. R P: s = t for C ~ s = t. Furthermore, this proof is eoen ( C 
s ~ min)-bounded, i f {s} > i f (C)  and if  the rule D ~ 1---~ r e R that is used to reduce 
into { is not applied at the top of  ~ or ~ >> I. 
2. For any two terms s and t, i f  s SR,~ 7, then there exists a ( C ~ s = t)-bounded proof  
C ~'~,RP:s  = t for COs  = t. 
Proposition 5.3 is a proper generalization of 5.2. In practice one should use an efficient 
reduction relation between --,R~e and ---~R.(, where C is the subset of (skolemized) 
orientable quations in C. 
This leads us to the following important technique of eliminating equations by contex- 
tual reduction: 
PROPOSITION 5.4. An equation C ~ s = t can be eliminated via inference (D), i f  s,~a,c ~. 
5.1.3. SUBSUMPTION 
PROPOSITION 5.5. An equation C ~ s = t can be eliminated via inference (D), i f  D ~ u --- 
v ~ E and (D ~ u = v)cr --- (C ~ s = t), for a substitution cr ~ A. 
PROOF. tr can be a bijective renaming of variables. In this case we can consider D ~ u = v 
and C ~ s = t to be equal and eliminate one of the copies. (The corresponding proof  
terms are equivalent modulo complexities.) Otherwise, the second component in our 
complexity measure for equations makes D~,~ utr = wr to be a (C ~ s = t) -bounded 
proof  of C ~ s = t, By inference rule (D), (D ~ u --- v)tr can be deleted. 
Subsumption is a particular case in which the equations in E are used to construct 
simpler proofs in the course of applying inference (D). In particular if E contains 
non-reductive quations which will never be oriented into a rewrite rule, the use of 
non-reductive equations for the simplification of other equations might be crucial for the 
termination of the completion procedure. In practice, a combination of the above equation 
elimination techniques as established by the Propositions 5.4 and 5.5 will be needed. 
Theoretically, when trying to eliminate an equation ~0, one can enumerate all proofs for 
~7 and check as to whether they are w-bounded. Whereas the complexity test for not too 
big proofs can be reasonably efficiently implemented using the termination proof system 
for rewrite rules, the problem is to efficiently enumerate "sufficiently many" proofs. In 
section 6 we will give some examples to illustrate these situations. 
70 H. Ganzinger 
5.2. TREATMENT OF' NON-REDUCTIVE EQUATIONS 
Condit ion (1) in the definition of fairness asks for the simplification of proofs which 
apply equations. An obvious possibility is to orient the equation into a rewrite rule. 
However this might not be possible due to the fact that there is a term in the condition 
which violates the reductivity constraint of any possible orientation. This problem is 
well-known in the literature (Kaplan, 1984b; Ganzinger, 1987; Kounalis & Rusinowitch, 
1987; Orejas, 1987). 
The approach to be described below uses conditional narrowing on conditions of  
equations, which, in the case of a confluent R, is a complete procedure for computing 
the solutions of the condition equations (Hussmann, 1985; Jouannaud & Waldmann, 
1986). In most cases, however, this technique by itself will not lead to a terminating 
completion process unless it is accompanied by sufficiently strong techniques for eliminat- 
ing equations by bounded proofs, the problem which we have addressed in section 5.1. 
DEFINITION 5.6. Let a conditional equation C A u = v ~ s = t and a conditional rule 
D ~ l --~ r be given and assume that the variables in the rule and the equation have been 
renamed such that no common variables occur. Let o be a non-variable occurrence in 
u = v such that (u = v) /o  and l can be unified with a mgu o-. Moreover, if uo- > vo-, then 
o is inside u, and if vo- > uo-, then o is inside v. With these assumptions, (D A C ^ (u = v) 
[o ~-- r])o- ~ scr = to- is called a superposition instance from superposing D ~ l ~ r on 
u=v in  CA u=v~s=t .  
Let us provide some intuition behind our following formal treatment. Remember we 
have to provide for the simplification of proofs which apply an equation under a 
substitution cr such that the proofs for any of its substituted conditions u = v are rewrite 
proofs. A rewrite proof  for uo- = vo- is either empty (i.e. ucr ---- vo') or it must contain 
some step of  rewriting from uo- or vtr. 
In the first case, the meta-rule x = x--~ true can be superposed on u = v. This will 
delete the condition from the equation. I f  we add to the set of equations this superposition 
instance, using the new equation with one condition less for proving scr = to- is less 
complex. 
In the second case, the first rewrite step can either be inside or or the redex overlaps 
with a non-variable position in, say, u. In the first of  these remaining cases, rewriting first 
cr to o-' and then using the same equation with the reduced substitution o-' to prove 
so- '= to-', fo l lowed by unfolding o-' back into or is less complex. This is mainly because 
the appl ication of an equation using a smaller substitution becomes less complex. The 
last ease, finally, can be simplified if the superposition i stance that corresponds to the 
overlap of the redex of the first rewrite step with u is added to the equations. In this 
instance, u has been narrowed to z, and uo- ~- u~'~' ~ z,r'. Applying the given equation 
under o- can hence be replaced by applying the superposition i stance under substitution 
~". This is less complex, mainly because utr > zr'. 
LEMMA 5.7. Assume E and R to be given sets o f  equations and rules, respectively. Let  
C A U = v ~ s = t be an equation in E. Moreover assume that E contains all instances o f  
the equat ion generated by superposing each rule in R u {x = x ---> true}t on the condition 
t After superposition with x = x --~ true we delete true from the condition. =is assumed not to be an operator 
of the given signature E. 
A Completion Procedure 71 
u = v in the given equation. I f  
p = 
Q 
so" ~-*c^u=o~s=t to"
is a proof in T~(~.R) with Q a tuple of  rewrite proofs for  the condition equations in ( C ^ u = 
v)o', then T~(E,m also contains a proof o f  so. = to" which is simpler than P. 
PROOF. We assume P to be of  the required form. Without loss o f  generality we assume 
C = {c = d}. Q~=d and Q . . . .  are assumed to be the rewrite proofs for co. = do" and 
uty = vo", respectively. There are three cases to consider: 
(1)  utY - -  v~r: 
Then, o- = r~", with ~" = mgu(u, v). From superposition with x = x---~ true we have c~- --- 
d~-~ s~-= t~-e E. The proo f  
Q~ 
SO" ~ '~ c r= dr~s ' r= t~" tO"  
is less complex than P as the used substitution instance of  the new equation has one 
condition less than the corresponding instance of the original one. 
(2) The first step of  rewriting in Q .~ occurs at or below an occurrence p of  a variable x 
in u: 
Then, Q,=o = Q"; Q', with Q" representing this rewrite step uo'/p--~u'. Let o r '=  
o-[x ~-- u']. A simpler proof  takes the form P~ ; ~ ;/)3- P~ reduces sc~ to so'' by app ly ing  
the rewrite step utr/p--~ u' at each occurrence of  x in s. P2 applies the equation with the 
reduced substitution, requiring an adaptation of the proofs of  the original condi t ion  
co. = do. ^  uo. -- vo- to the reduced condit ion instance co"' = do-' ^  uo'' = vo''. More  
precisely, 
P~ = 
co" ~--* co'; Qc=d ; do.-~* do: uty' *-* uo-; Q,=o; vo---~* vo.' 
SO "! ~- - - -~c~d^u=v~S= ! to  "t 
Pa, finally, is the inverse of  the reduction of to" to to-'. The application of  the equat ion  
under the reduced substitution tY' in P2 is less complex than the original appl icat ion under  
o.. (We have uo" > uo.'.) Moreover, any of  the rewrite steps in Q~=~, Qe=d and in or to ty' 
have redexes smaller or equal to a term in ~r(c = d ^ u = v~s  = t)tY. Hence,  Q is 
bounded by the original application of the equation in P. 
(3) The rewrite proof Qu=o is of  form U1 ; U2; V, where U1 = uo. "~R u[p *-- r]r~", U2 = 
u[p ,~-r]~'.r'--~* w and V= w ~--* vty, with uty = u[p *--l]~"r',for p a non-variable occur- 
rence in u: Hereby we also assume ~" = mgu(u/p ,  l) and D ~ I ---> r is the rule for rewrit ing 
u at p. Let S be the tuple of  rewrite proofs for Do. and let z = u[  p *- r]1-. We can  also 
assume that uo. ~ vo-. (Otherwise, we could take as U~ the first step of rewriting f rom v 
and develop the same argument for v which we now develop for u. Note that at least 
one step of  rewriting from vtY must exist in any rewrite proof  of uo. = wr in case utr < vo..) 
Then, Dr ^ ( c = d)z  ^  z = vz ~ s~" = t.c ~ E, according to the assumptions of  the lemma.  
The proof  
S, Qc=a, ( U2 ; V) 
StY  < '~ Dr  ^ cT = d~" ^  z = ur::~s'r ~ t~r to"  
72 H, Oanzinger 
is less complex than P, as the following inequalities can easily be proven: It is {uo.} > 
~-(Dcr) because of the reductivity of D ~ 1 --> r. For the same reason we have uo- > z~". 
Hence, 
{co-, dcr, uo-, vo-, so', to'} > if(Do-) u {co', do', zr', vo', so', to'}. 
From this and the fact that S is a tuple of  rewrite proofs in terms all smaller than so- we 
conclude that this proof  is in fact less complex than P. 
The lemma proves that superposing rules on a condition of an equation is an alternative 
to orienting the equation into a rule. This gives us a particularly interesting refinement 
of the general fairness constraint about completion inferences. 
Let CP~ denote the set of critical pairs between any two rules in Ri. Let SP~ denote the 
set of superposition i stances of an equation in E~ by all rules in Rt u {x = x ---> true} on 
one selected condition of the equation. Moreover, let U~ denote the subset of unconditional 
equations of Et. 
LEMMA 5.8. A c~C~-derioation (Eo, Ro), (El ,  R l ) , . . .  is fair, if 
1. ("~j~, Uj = O, fo r  all i. 
2. I f  C ~ s = t ~ ("~j>_i CP j for  some i, then there exists an index i' such that C ~ s = t 
E F . 
3. I f  C ~ s = t ~ (-~j~_~ SP j fo r  some i, then there exists an index i' such that C ~ s = t 
E i, . 
Hence, a completion procedure is fair if it can either eliminate or orient any unconditional 
equation and if it computes each critical pair between final rules and each superposition 
instance of final rules on one selected condition of each final equation. The proof of this 
lemma is an immediate consequence of the Lemmas 4.3 and 5.7. 
5.3. THE COMPLET ION PROCEDURE 
In this section we describe a specific instance of a completion procedure for conditional 
equations based on the inference rules and techniques described in the previous ections. 
The procedure uses Huet's (1981) labelling scheme to optimize the computation of critical 
pairs. In the following, simplification or elimination of an equation or rule means to 
apply the techniques outlined in section 5.1. 
In our procedure we will label equations as either "possibly reductive" or "non- 
reductive". Equations which are possibly reductive will be considered as candidates for 
orientation. Non-reductive quations will be superposed on one of their conditions by 
rewrite rules in the way indicated in Lemma 5.7. The procedure, when applied to an 
initial set E of  equations, consists of the following steps: 
1. Eo = E, all equations labelled "possibly reductive", Ro -- ~ ,  i = 0, p = 0. 
2. I f  E~ contains an equation labelled as "possibly reductive" then go to 4. 
3. I f  all rules are marked, stop with success. Otherwise, select an unmarked rule in Ri, 
say with label k. Let CP be the set of all contextual critical pairs C ~ c = d between 
rule k and any rule of  R~ of label not greater than k. Let SP be the set of superposition 
instances of the rule on a specific conditiont of  all non-reductive equations in E~. 
"t In this step and in step 6 the same condition must be selected! 
A Completion Procedure 73 
Then, E~+1 = E~ u CP w SP. Any of the new equations is labelled as "possibly 
reductive". Let R~+I be the same as Ri, except hat rule k is now marked. Set i := i + 1 
and go to 2. 
4. Select an equation D ~ c = d in E~ labelled as "possibly reductive". Simplify the 
equation by E~ and R~. This process yields a simplified equation C ~ c' = d'. 
5. I f  E , .uRt  has a (D~c=d) -bounded proof  of C~c '=d ' ,  then E~+I:= 
Et -{D~ c = d}, R~§ := R~,i := i+  1, and go to 2. 
6. I f  c '>  d ~, then let l := c', r := d'. I f  d '>  c', then let l := d', r := c'. In both cases 
verify that each term in C is smaller than L If this is the case, go to 7. 
Otherwise, and if C is empty, stop with failure. In the remaining case, label the 
equation C ~ c' = d' as "non-reductive". Then compute the set SP of all superposi- 
tions of any marked rule in R~ on a particular condition in C ~ c' = d'. The equations 
in SP are labelled as "possibly reduetive". Let E~+~ := E~ u SP, R~+~ := Ri, i := i + 1, 
and go to 2. 
7. Let K be the set of labels k of rules Ck ~ Ik ~ rk ~ R~ such that Ik can be simplified 
by {C~l - - -~  r} to, say, l~. Then, 
E~+~ := (E, -{D~e = d}) u {Ck ~ l~ = rklk c K}, 
all new equations labelled "possibly reductive". Increment p by 1. Let 
R,§ := ( j  : C lj ---, rj t j  : Cj --, rj R,, j K}  w {p: I--, r}, 
where rj and C} are obtained from bounded simplification using Ei and Ri u 
{C ~ l---~ r}. The rules coming from Ri are marked or unmarked as they were in 
Ri. The new rule C ~ l ~ r is unmarked. Increment i by 1 and go to 2. 
Some further remarks about this procedure seem to be in order. In step 3 one might 
perhaps want to immediately drop any critical pair C ~ c = d the condition of which 
cannot be satisfied. The fairness requirement does not ask for consideration of critical 
pairs with unsatisfiable conditions. For the case of a monolithic specification this would 
formally mean that Co q: =- R,, for any substitution trand index i. Jouannaud & Waldmann 
have suggested and proved correct a bounded narrowing technique in which equations 
are kept separately if the satisfiability of their conditions has not yet been proved or 
disproved. The conditions of these equations are further narrowed in each iteration step 
of  the completion procedure. For the case of specification modules or parametric 
specifications uch a "negation as failure" technique cannot prove anything about the 
yet unknown actual parameter. This technique is therefore not modular as one has to 
reconsider any old critical pair upon enrichment of the specification. 
In our case, if an equation C ~ c = d gets deleted by a bounded proof, this proof  is 
independent of any additional signature and axioms. Proof orderings can be extended 
to the proofs in an enriched signature, if the underlying reduction ordering on Tx(X)  
can be extended. The deletion of the equation is therefore also allowed in an enriched 
system. Otherwise, and if the equation cannot be oriented into a reductive rule, our 
procedure keeps them as "non-reductive" equations. They are superposed on one of their 
conditions. If  the procedure terminates, the final system still contains all these non- 
reductive equations. They are useless for proving equations in the current system, but 
they might become relevant when enriching the specification. Then, any new rule must 
also be superposed on these equations. However, neither superpositions by old rules nor 
critical pairs between old bales must be recomputed. Hence, our completion procedure 
74 H. Ganzinger 
allows separate completion of specification modules. Upon combining two such 
specifications only the inferences between axioms of different modules need to be taken 
into consideration. 
In step 6, an equation is oriented into a rule if it is reductive. In practice it sometimes 
turns out to be useful to consider a reductive quation evertheless as "non-reductive" 
and superpose on a condition. This choice may even be crucial to make completion 
terminate. Hence if termination of completion is the major goal, it is not always good to 
select the maximal literal for "extended superposition" as suggested in Rusinowitch 
(1987). One of  the advantages of our method is that we may select any literal for 
superposition. For example, if the condition contains an equation true = false, it should 
be selected for superposition. Either the specification is inconsistent (of course, we intend 
true to be different o false), or there is no superposition possible, and the equation does 
not generate any further equation. If the selected literal is the consequent, we have called 
the superposition "critical pair computation". The selection of the consequent for superpo- 
sition is however estricted to reductive rewrite rules. This causes a failure of our procedure 
if the equation has no condition and cannot be oriented. 
Apart from this possibility of failure, our procedure is hence more efficient and will 
terminate in many more practical examples compared to the procedure in Kounalis & 
Rusinowitch (1987). We do not have to superpose on more than one literal of any clause, 
we have much more freedom in choosing the literal for superposition, and we do not 
have to superpose quations on equations or rules. Moreover, the techniques for eliminat- 
ing equations based on proof  orderings is much more powerful than what Kounalis & 
Rusinowitch were able to prove. 
Our procedure is correct, as established by the following theorem: 
THEOREM 5.9. I f  the completion procedure terminates successfully, the final set of rules R 
is canonical and me = ~-R. 
PROOF. Clearly, the procedure produces a CC-derivation. Hence, the correctness of R 
follows from the obvious correctness of any of the inference rules. 
It remains to be shown that the CC-derivation is fair. The first fairness requirement is 
satisfied as any equation is eventually either deleted, turned into a rule or superposed on 
by any final rule. This is exactly what is required to apply Lemma 5.8. (In fact, rules that 
are later simplified on their condition or on their right side are not superposed again on 
any old non-reductive equation. That this is correct is proved in a way similar to what 
we are not proving for the case of critical pair computation.) 
We now argue that any peak in a E-proof  caused by a critical pair between R-rules 
can be simplified. This is true even though critical pairs between two rules p~ and p~ that 
have been obtained by simplifying rules 01 and P2 using (DC), (SC) and (SRR) are not 
computed, if the critical pairs between the p~ and P2 have been computed previously. To 
indicate the proof of  this fact, let us assume Pl = C~l-- ->r,  C = {e l , . . .  , e,} and 
P2 = D ~ a ~ b and let us take a closer look at the particular case in which the right 
side r of  pl has been simplified to r' in step i of the completion procedure. Then there 
is a C~r~r -bounded proof K~:e~, . . . ,K , :e ,F -~, ,R ,P : r=r ' .  The critical pair 
branching 
PC PD 
r'o'~" ~-" c~t~'  ur ""~D=~a~b M[bcr'r] 
A Completion Procedure 75 
with simplified r', lo" = u = M[ao-] and arbitrary tuples of rewrite proofs PC = 
(P1, 9 9 9 P,) and PD of Co-'r and Do-z, respectively, is more complex than the proo f  o f  form 
cm'(i(P))[Pt/K,;  1 <- i <- n]; 
PC PD 
C"1" <">(C^D)o'--'-->c=d d"l" 
using the critical pair (C ^ D)~r ~ c = d between the unsimplified rules as computed  in 
3 of some step j  < i. It holds {u} > ~-((C ^  D)o-) w {c, d}, c = roo, d = M[bcr] .  Also, the 
operators in any of the proofs P, PC and PD have a complexity less than ({u-r}, {l}, 
gr(C) u {r'}). In the case of PC and PD this property follows from the reduct iv i ty of 
the rules and from the fact that these proofs are assumed to be rewrite proofs,  cf. fairness 
requirement 2.
The proofs of 4.3 and 5.7 exhibit he possibility for further improvements of the complet ion  
procedure. I f  the computation of a critical pair or of a superposit ion instance o f  a 
non-reductive quation is immediately followed by its simplification, we may relax the 
complexity bounds for these simplification proofs compared to what is in general  required 
for the inference rules (SE) ,  (D) ,  (SC)  or (DC) .  
In the case of a critical pair, the proof of 4.3 shows that the superposit ion term u of 
a critical pair is more complex than the complexity of a critical pair appl icat ion 
C r d 
When simplifying the critical pair equation cp = (Co ~ ^  Doo~ c = d) immediate ly  we 
may therefore relax the complexity bound for the simplification proof to c(u ~ rain). In 
other words, cp may be simplified by a u ~ min-bounded proof. As this bound exceeds 
c(cp), the bound which would have to be used in the general case, the simplif ication 
process becomes more powerful. The techniques described in Winkler & Buchberger  
(1983), Kiichlin (1985) and Kiichlin (1986) are based upon related ideas. In Bachmair  
(1987), the concept of critical pair criterion is proposed to serve as a f ramework  for 
describing such techniques. 
In the case of conditional equations, if C ^ u = v ~ s = t gets superposed on u = v 
yielding Doo ^  Co- A z ----- VO- ~ so- = to-, we may simplify this superposit ion instance with 
(St(Co-) u {uo-, vo-, so-, too}, O"( C)  w {u, v, s, t}, 0 )  as upper bound for the operators  in 
the simplification proof. Any simplification of Do- ^  Co- A z = vo- ~ So- = too by such a 
proof also allows for a simpler proof of Co- ^  utr = vo" ~ so- = t~. 
At the moment our inference rules and the notion of proof  ordering is not strong 
enough to support these techniques directly. In Ganzinger (1988) we have descr ibed a 
completion inference system in which the complexities of equation appl ications in proofs  
are not fixed, but rather determined ynamically upon generation of the equation. Some 
of the subsequent examples will require these extended techniques to achieve terminat ion 
of the completion process. 
6. Examples 
The first example is a specification of integers with 0, s, p, < taken from Kap lan  (1984a). 
76 H. Ganzinger 
Initial equations 
1 O<O=fa lse  
2 0 < s(O) =true 
3 s (x}<y=x<p(y)  
4 p(x) < y = x < s{y} 
5 {y < x) =true==>y < s(x) =true 
6 {y < x} =false==>y < p(x)=false 
7 s(p(x)) =x 
8 p(s(x)) = x 
The critical pair 
(y < s(xl)) = false ~ y < x l  = false (9) 
is obtained from superposing rules 4 and 6. It will be recognized as a non-reductive 
equation. The same is true for the critical pair 
(y < p(xl))  = t rue~ y < x l  = true (10) 
from 3 and 5. For Eq. (9) the superpositions by rules on its condition are as follows: 
(y < x) =fa lse ~ y < p(x )  = false (11) 
from superposing s (p (x ) )  ~ x, 
(y l  < xl)  = true and true =fa lse ~ y l  < x l  =fa lse  (12) 
from superposing (y < x) = true ~ y < s(x)  ~ true, 
true = false ~ 0 < 0 = false (13) 
from superposing 0 < s(0) ~ true, 
(x < p(s (x l ) ) )  =fa lse ~x < p(xl)  =false  (14) 
from superposing s (x)  < y ~ x < p(y), and 
(x < s (s (x l ) ) )  = fa l se~ x < s(xl) =false (15) 
from superposing p(x)  < y ~ x < s(y). Equation (11) is reduced by rule (6). Equation 
(12) has an unsatisfiable condition. This will be detected by considering it as a non- 
reductive equation and by observing that there are no superpositions on true = false. 
Similarly, Eq. (13) is trivial. To delete Eq. (14) one first reduces the condition to 
(x  < x 1) = false. Now, rewriting x < p (x 1) = false using Eq. (6) and the simplified condi- 
tion as auxiliary rewrite rule (the variables considered as constants), reduces the conclusion 
to false =false. The Eq. (15) is subsumed by (y < s(xl)) =fa lse ly  < x l  =false, the 
equation, from which (15) has been obtained. In a similar way one can prove the 
convergence of the non-reductive Eq. (10). 
In this example, the procedure converges with R consisting of the originally given Eqs. 
1-8 oriented from left to right and with E consisting of the two Eqs. (9) and (10). These 
have, however, been proven irrelevant for the equational theory. 
A Completion Procedure 77 
The next example is natural numbers with <-- in which a transitivity and totality axion 
have been included as non-reductive equations. The initial specification is then 
1 O---<x=true 
2 s(x)-< 0 =fa lse  
3 s (x ) - s (y )=x-<y 
4 x - x = true 
5 x -< s(x) =t rue  
6 (x-< y) =t rue=>x-  s(y) =t rue  
7 (x -< y) = false ==>y--< x = true 
8 (x-< y) =t rue  and (y ~ z) =t rue  ==>x- z =true .  
In this example, our procedure terminates producing 
Final Rules 
1 0 -< x --~ true 
2 s(x) - 0 -~ false 
3 s(x) --- s(y) --* x -< y 
4 x -< x - - ,  true 
6 (x -< y) --- true => x -< s(y) ~ true 
Final Equations 
7 (x <- y) = false ==> y -< x = true 
8 (x -< y) = true and (y ----- z) = true ==> x <-- z = true 
9 (s(x) ~ y l )  = true ==> x -< y l  = true 
10 (s(y) ~ z )=t rue  and (xl  ----- y) =true==>xl _< z=true  
11 {s(y)-< z) =t rue  and (x-< y) =true==>s(x) <- z =t rue  
Equations (10) and (11) are added upon superposing Eq. (8) by the rules 6 and 3, 
respectively. No further non-trivial equations can be derived from these. Despite the 
simplicity of this example, to make the procedure terminate is not trivial and requires 
applications ofnon-reductive equations for the simplification ofother generated equations. 
For example, the equation 
(s(xl) ---y) = true ~ x l  <- s (y )  = true (17) 
is generated from superposing rule 6 on the condition of Eq. (9). In this case, 
s(xl) -< s (y )  = true ~ x l  <- s (y )  = true (9') 
is the substitution i stance of 9 which constitutes the complexity bound for simplification 
proofs. Equation (17) may be eliminated as the proof 
s(xl) -< y = true 
x 1 <-- y <'->9 true 
s(xl) --< y = true ~- x l  <-- s (y )  ---~6 true 
is a (17)-bounded proof of (17). Both the application of the Eq. (9) and the rewrite rule 
6 are less complex than 17. 
78 H. Ganzinger 
In our actual implementation we first iterativelyt add to the condition C of any 
superposit ion instance (and critical pair) C ~ s = t an equation uo- = vtr, if there exists 
a non-reductive quation D ~ u = v such that there is a bounded proof  of C ~ D~r and 
such that C ^ uo = vtr ~ s = t is still less complex than the substitution instance of the 
equation from which C ~ s = t has been obtained. In the example, we would transform 
17 into 
(s(xl)---< y) = true and (xl -< y) = t rue~x l  <-s (y )  = true (17') 
using Eq. (9) with a trivial proof for the fact that the condition of  9 is implied by the 
condition of 17. The resulting Eq. (17') is less complex than (9'). Now, rewriting the 
conclusion using 6 and the second condition as additional rewrite rule (cf. 5.1.1) reduces 
the equation to the identity. 
For another example consider the superposition of  Eq. (10) on its first condition by 
rule (6). The instance of (10) is 
( s (y l )  <- s(y2)) = true and (xl  <- y l )  = true ~ (x l  <- s(y2)) = true. (10') 
The complexity of (10') is the bound for the simplification proof of the new equation 
(s(y l )  -- y2) = true and true = true and (xl  --- y l )  = true ~ (xl  <- s(y2)) = true. (18) 
This equation may be eliminated as the proof 
s(yl)  -< y2 = true 
x l  <- y l  ---- true, y l  <- y2  <-~9 true 
x l  <-- y2  "~-~8 true 
x l  <-- y l  = true, s (y l )  --< y2 = true ~ x l  <-- s(y2) "-*6 true 
is bounded by (10'). It is however not bounded by (18) as the applications of the Eq. (9) 
is not less complex than (18). This demonstrates that the superposition i stances of rules 
or old equations from which new equations are constructed must be used as complexity 
bounds for alternative proofs to achieve termination in more cases. 
Altogether, the rules 1-6 are canonical and the equational theory is the same as the 
one generated by all rules and Eqs. 1-11. 
The last example is total orderings with maximum function, an example which is used 
in Orejas (1987) to demonstrate the failure of the usual completion procedures. The 
example also appears in Kounalis & Rusinowitch (1987) to demonstrate the power of 
their method. The version of the example which we use here is more complex due to the 
fact that we have also included the transitivity axion. 
Input specif icat ion: 
1 (x ~ y) = true and (y ~ z) = true =~ (x -< z) = true. 
2 (x ~ x) =t rue .  
3 (x ~ y) = true ==~ max(x,  y) = y. 
4 {x ~ y) = false ==~ max(x, y) = x. 
5 (x ~ max(x,y) )  =t rue .  
6 (y ~ max(x,y) )  =t rue .  
t Note that there is a danger of" non-termination. 
A Completion Procedure 79 
System after complet ion :  
Rules 
2 x - -x -~t rue  
3 (x -< y) = true ==~ max(x,  y) --~ y 
4 (x ~ y) = false ==> max(x, y) ~ x 
12 (x2 _.< y) = true ==~ x2 -< max(x,  y) - *  true 
13 (x ~ y2) = true =~ x -< max(y2, y ) - *  true 
Equations 
1 (x~y)=trueand(y -<z)=true==~x-z=true  
7 (xl _<y l )=fa lse==~yl  _<xl =t rue  
10 (max(y2,y)  -< z) =t rue  and (xl -< y2)=true=#xl  _< z =t rue  
11 (max(x, y) -< z) = true and (x l  - y) = true ==~ xl --- z = true 
The totality axiom 7 is obtained as a critical pair. This example is interesting as 
completion transforms the original Eqs. (5) and (6) which are too weak for deciding the 
equational theory by reductive rewriting (in the presence of transitivity) into the more 
general rules 12 and 13. At an intermediate stage, the rules 
xl  ~< max(x, max(x2, x l ) )  -~ true 
xl  ~ max(max(x2,  x l  ), y) - ,  t rue 
x l  ~ max(x, max(x1, y l ) )  --~ true 
x l  ~< max(max(M,  y l  ), y) --~ true 
are generated. These rules generate the non-operational equations 
8 (max(M,  y) -- z) ~- true ==~ xl  --< z = true 
9 (max(x, xl  ) -< z) = true ==~ xl  --< z = true 
Which are later again eliminated upon elimination of the rules from which they have 
been generated. This example also demonstrates that the behaviour of the completion 
process depends very much on the choice of the condition on which a non-operational 
equation is to be superposed on. If one chooses the second condition of the transitivity 
axiom for superposition, the procedure generates the crucial rules 12 and 13 directly 
without producing any of the Eqs. (8)-(11). 
7. Conclusions 
We have shown that the concept of proof orderings by Bachmair, Dershowitz & Hsiang 
extends to the conditional equational case. Recursive path orderings on proof terms 
provide for the required reduction ordering on proofs. We have argued that in the 
conditional case the term structure of proofs must be exploited to obtain sufficiently 
strong arguments about he complexity of proofs. 
A notion of bounded proof terms for conditional equations was introduced as the basis 
to simplify conditional equations and rules during completion. 
We have proved the correctness of superposing rules on an arbitrary condition of an 
equation as an alternative to orienting that equation into a rule. In particular in the case 
of generating a non-reductive critical pair this technique might still allow the completion 
procedure to terminate successfully. We have proved the correctness ofa specific variant 
80 H. Ganzinger 
of a complet ion  procedure in which these techniques have been built- in. We have 
demonst rated  the usefulness of our techniques on some examples. We have argued that 
our procedure  is more efficient and terminates much more often than the one in Kounal is  
& Rus inowi teh  (1987). 
We have ment ioned before that many of the results of this paper can be obtained as 
special cases of the results about complet ion of first-order clauses by Bachmair & 
Ganz inger  (1991). Their  proofs, however, are based on very different echniques and at 
present  no practical implementat ion exists. 
Some of the ideas for the treatment of non-reductive equations as presented in this paper were 
stimulated by discussions at the Workshop on Conditional Term Rewriting, Orsay, July 1987. We 
are grateful to St. Kaplan and J.-P. Jouannaud for their initiative in planning and organizing this 
event. Discussions with A. Boekmayr and St. HSlldobler on the subject of paramodulation a d 
narrowing helped to find a bug in a previous proof of Lemma 5.7. The author is grateful to H. 
Bertling for many discussions on the present concepts, and to R. Sch~ifers, J. Richter, U. Waldrnann 
and U. Wertz for finding many bugs in previous versions of this paper. 
References 
Aekermann, W. (1954). Solvable cases of the decision problem. North-Holland. 
Bachmair, L. (1987). Proof methods for equational theories. PhD Thesis, University of Illinois, Urbana 
Champaign. 
Baehmair, L. (1989). Proof normalization for resolution and paramodulation. I : Proc. 3rd lnt. Conf. Rewriting 
Techniques and Applications. Springer LNCS, 355, 15-28. 
Bachmair, L., Dershowitz, N., Hsiang, J. (1986). Proof orderings for equational proofs. Proc. LICS 86, 346-357. 
Bachmalr, L., Ganzinger, H. (1990). On restrictions of ordered paramodulation with simplification. In: Proc. 
lOth Int. Conf. on Automated Deduction. Springer LNCS, 449, 427-441. 
Bachmair, L., Ganzinger, H. (1991). Completion of first-order clauses with equality by strict superposition. I : 
Proc. Second Int. Workshop on Conditional nd Typed Rewriting Systems. Springer LNCS, to appear. 
Bergstra, J., Klop, J. W. (1982). Conditional rewrite rules: confluence and termination. Report IW198/82, 
Mathematisch Centrum, Amsterdam. 
Dershowitz, N. (1987). Termination of rewriting. J Symbolic Computation 3,69-116. 
Dershowitz, N., Manna, Z. (1979). Proving termination with multiset orderings. CACM 22, 465-476. 
Ganzinger, H. (1987). Ground term confluence in parametric conditional equational specifications. In: Proc. 
STACS 1987, Springer LNCS 247. 
Ganzinger, H. (1988). Completion with history-dependent complexities for generated equations. In: (Sannella, 
Tarlecki, eds.) Proc. Workshop on Abstract Data Types, Gullane, 1987, Springer LNCS. 
Ganzinger, H., Schfifers, R. (1990). System support for modular order-sorted Horn clause specifications. In: 
Proc. IEEE 12th Int. Conf. on Software Engineering, Nice, pp. 150-163. 
Huet, G., Oppen, D. C. (1980). Equations and rewrite rules. A survey. In: (Book, R., ed.), Formal Languages: 
Perspectioes and Open Problems. New York: Academic Press, 349-405. 
Hsiang, J., Rusinowitch, M. (1987). On word problems in equational theories. In: Int. Coll. on Automata 
Languages and Programming, Springer LNCS. 
Huet, G. (1981). A complete proof of the correctness of the Knuth-Bendix completion algorithm. JCSS 23, 11-21. 
Hussmann, H. (1985). Unification in conditional-equational theories. In: Proc. Eurocal 1985, Springer LNCS 
204, 543-553. 
Jouannaud, J. P., Waldmann, B. (1986). Reductive conditional term rewriting systems. In: Proc. 3rd TC2 Working 
Conference on the Formal Description of Prog. Concepts, Ebberup, Denmark, Aug. 1986, North.Holland, 
to appear. 
Kaplan, St. (1984a). Conditional rewrite rules. TCS 33, 175-193. 
Kaplan, St. (1984b). Fair conditional term rewrite systems: unification, termination and confluence. Report 
194, University de Paris-Sud, Centre d'Orsay. 
Kaplan, St. (1987). A compiler for conditional term rewriting. In: Proe. RTA 1987, Springer LNCS 256, 25-41. 
Kaplan, St., Remy, J.-L. (1987). Completion algorithms for conditional rewriting systems. MCC Workshop on 
Resolution of Equations in Algebraic Structures, Austin, May 1987. 
Kounalis, E,, Rusinowitch, M. (1988). On word problems in Horn logic. In: Proe. First Int. Workshop on 
Conditional Term Rewriting, Orsay, June 1987, Springer LNCS, to appear. 
Kiiehlin, W. (1985). A confluence criterion based on the generalised Newman lemma. In: Proc. Eurocal 1985, 
Springer LNCS 204, 390-399. 
A Completion Procedure 81 
Kfichlin, W. (1986). Equational completion by proof" transformation. PhD Thesis, Department of Mathematics, 
ETH Ziirieh. 
Nieuwenhuis, R., Orejas, F. (1991). Clausal Rewriting. In: Proc. Second Int. Workshop on Conditional and Typed 
Rewriting Systems. Springer LNC$, to appear, 
Rrty, P. (1988). Mrthodes d'unification par surrrduction. Thesis, University de Nancy 1. 
Rusinowiteh, M, (1987). Theorem-proving with resolution and superposition: an extension of Knuth and Bendix 
procedure as a complete set of inference rules. Report 87-R-128, CRIN, Nancy. 
Remy, J. L., Zhang, H. (1984). REVEUR 4: A system for validating conditional algebraic specifications of 
abstract data types. In: Proc. 6th ECA1, Pisa 1984, 563-572. 
Winkler, F., Buchberger, B. (1983). A criterion for eliminating unnecessary eductions in the Knuth-Bendix 
algorithm. Coil on Algebra, Combinatorics and Logic in Comp. Sei., Gyrr. 
Zhang, H., Remy, J. L. (1985). Contextual rewriting, Conf. on Rewriting Techniques and Applications, Dijon 
1985, LNCS 202. 
