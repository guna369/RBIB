REVISTA COLOMBIANA DE COMPUTACIÓN Volumen 13, número 1 Págs. 23 - 44

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento
un aporte para el desarrollo de software de investigación
Héctor Antillanca Espina 1 Gerardo Cerda Neumann 2

Fecha de Recibido: 31/10/2011

Fecha de Aprobación: 28/02/2012

Resumen

El software de investigación en un contexto cientíﬁco es una aplicación que tiene por objetivo probar una técnica, simular un comportamiento de interés, apoyar la generación de un paper o lograr una patente. En deﬁnitiva: busca generar conocimiento. En esta situación el equipo de desarrollo lo forman personas de alto nivel profesional, generalmente es multidisciplinario y cabe dentro del concepto de equipos auto dirigidos. Sin embargo estos desarrollos tienen casi las mismas diﬁcultades que la producción de software para contextos comerciales, por ejemplo diﬁcultad para cumplir con la entrega, escasa documentación, problemas para coordinar el Equipo de Trabajo y una gran complejidad para modiﬁcar el código escrito por otros desarrolladores. Este artículo describe un método práctico para mejorar la calidad del software y su documentación considerando las necesidades de los investigadores. Debido a que este método se basa en el descubrimiento de conocimiento, ha sido denominado “Proyecto Guiado por el Descubrimiento del Conocimiento” (PDKD por sus siglas en inglés). En el documento se describen sus bases conceptuales, sus etapas y los resultados obtenidos hasta el momento con su aplicación. Palabras clave: desarrollo de software, software de investigación, método de desarrollo, métodos ágiles, equipos autodirigidos, modelo espiral.

Abstract The research software in a scientiﬁc context is an application that aims to test a technique, to simulate a behavior of interest, support the generation of a paper or get a patent. In short: aims to generate knowledge. The development team are highly professional people, usually multidisciplinary and ﬁts within the concept of selfdirected team. However, these developments have almost the same difﬁculties as the production of software for commercial settings such difﬁculty meeting delivery, poor documentation, a problem to coordinate the Task Force and a lot of complexity to modify the code written by other developers. This paper describes a practical method to improve the quality of the software --and its documentation-- considering the needs of the researchers. As a this method is based on knowledge discovery, hence has been called “Project Driven Knowledge Discovery” (PDKD). The paper describes its conceptual basis, its stages and the results obtained so far with its implementation. Keywords: software development, Research software, development method, agile methods, self-directed teams, spiral model.
1 Departamento de Ingeniería Informática, Universidad de Santiago de Chile, Avenida Ecuador 3659 Santiago de Chile, hector.antillanca@usach.cl
2 Universidad UCINF, Avenida Pedro de Valdivia 450 Santiago de Chile, gcerda@ucinf.cl Se concede autorización para copiar gratuitamente parte o toda el material publicado en la Revista Colombiana de Computación siempre y cuando las copias no sean usadas para ﬁnes comerciales, y que se especiﬁque que la copia se realiza con el consentimiento de la Revista Colombiana de Computación.

23

24 Héctor Antillanca Espina, Gerardo Cerda Neumann
1. Introducción
Las características del desarrollo de software de investigación son muy diferentes a las del desarrollo de software comercial. Típicamente, el software de investigación se realiza en ambientes de investigación cientíﬁca, donde los mismos integrantes del equipo de desarrollo son los que están interesados en los productos y en general son los usuarios ﬁnales de las aplicaciones. Por la misma razón es el mismo equipo de trabajo el que deﬁne los requerimientos. En general, se observa que ellos invierten muy poco esfuerzo en el desarrollo de la interfaz de usuario ya que al ser ellos mismos los futuros usuarios de las aplicaciones consideran que no hay necesidad de una mayor preocupación por un mejor diseño de ella. Ellos asumen la responsabilidad de ocuparlas bien. Se observa que los miembros del equipo participan de una cultura común que los lleva a no documentar lo obvio, aunque esa práctica con el tiempo puede llegar a ser una gran diﬁcultad cuando se produce rotación en el equipo. En ocasiones existe la necesidad de procesar grandes volúmenes de datos lo que obliga a constantes ajustes y mejoras a las aplicaciones desarrolladas. Lo anterior trae como consecuencia que se generen múltiples versiones de las aplicaciones en varios computadores distintos cada uno con sus datos de ejecución. La diﬁcultad aparece al querer saber qué resultado se generó con qué versión y cuáles fueron los datos procesados. Se pueden citar como ejemplos de este tipo de software aquellos que simulan motores de búsqueda, como los que se realizan en los laboratorios de investigación de empresas tales como Yahoo y Google. También pueden ser simuladores de modelos cientíﬁcos donde se busca encontrar algún tipo de mejora u optimización en el funcionamiento, como los que se desarrollan en los laboratorios investigación de muchas universidades del mundo. En general, se puede observar que un software de investigación tiene atributos diferentes de los que se encuentran en uno comercial. Muchos de los atributos que se espera que estén presentes en un alto grado en las aplicaciones comerciales en el software de investigación no son importantes. Por ejemplo, no es importante que el software proteja los datos contra usuarios maliciosos ya que se ejecutan en un ambiente muy protegido. Tampoco son importantes la portabilidad, la usabilidad y la tolerancia a fallos, entre otros. Sin embargo, es deseable que el software sea correcto, eﬁciente y mantenible. En la práctica, no todos los atributos deseables están presentes en un software de investigación, pues también dependen del proceso de desarrollo que se utilice para su producción. Por ejemplo, si el proceso no establece actividades para observar estándares de diseño y documentación, es muy probable que el producto ﬁnal no sea mantenible, es decir, no será fácil de modiﬁcar por otros que quieran hacerlo posteriormente o en otro contexto.

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
Hay varias conclusiones que se pueden obtener de este tipo de proyectos de software. Una primera conclusión es que su desarrollo está guiado por el conocimiento que se va logrando con ellos. En efecto, al iniciarlos no está totalmente deﬁnido ni lo que se obtendrá ni el aprendizaje que se logrará con el mismo, pero claramente sigue un esquema evolutivo [11]. Sin embargo se presentan los mismos problemas que en cualquier desarrollo: diﬁcultad para cumplir los plazos de entrega, escasa documentación, difícil coordinación del equipo de trabajo y tiempo excesivo para modiﬁcar el código escrito por otros desarrolladores. Debido a lo anterior es que se ha desarrollado un método que permitirá aumentar las probabilidades de éxito de este tipo de proyectos. El trabajo descrito en este artículo es una versión mejorada de una propuesta iniciada a principios de 2010 y presentada en el I Encuentro Internacional de Computación e Informática del Norte de Chile (INFONOR-CHILE 2010) realizado en noviembre de ese mismo año en la ciudad de Antofagasta [1]. Para presentar este método el artículo ha sido organizado de la siguiente manera: en la sección que continúa se describe la forma utilizada para conocer el problema y deﬁnir el método, luego se presenta el análisis del problema y posteriormente se presenta el método de desarrollo de software cientíﬁco creado. La presentación del método continúa con una descripción de los conceptos de equipo autodirigido pertinentes para este caso. En las secciones ﬁnales se describen brevemente los proyectos en que se está aplicando y los resultados obtenidos hasta el momento. Se ﬁnaliza con un comentario del alcance y las conclusiones.

25

2. Método Utilizado
En términos generales se distinguen tres etapas: análisis, diseño y aplicación. En la etapa de análisis se entrevistan participantes de proyectos de desarrollo de software de investigación para analizar sus necesidades y requerimientos con el ﬁn de proponer un método que sea práctico para ellos. A partir de estas entrevistas fue posible identiﬁcar todos los pasos necesarios para este tipo de proyectos así como las principales diﬁcultades que se repiten constantemente. Con esta información se pudo analizar la situación actual y diseñar el método. El diseño consistió en el desarrollo de una propuesta metodológica que modela y describe las actividades que se consideraron necesarias para desarrollar software de investigación, este producto se describe en la sección 4.2.

26 Héctor Antillanca Espina, Gerardo Cerda Neumann
Tanto para el análisis como para el diseño se realizó una investigación bibliográﬁca de métodos y procesos de desarrollo de software, lo que permitió fundamentar los diferentes aspectos de la propuesta de solución. Finalmente se aplicó el método en dos proyectos que desarrollan software de investigación y se extraen experiencias y conclusiones. Se utilizó un cuestionario para averiguar los resultados y problemas con el uso de la metodología, dicho documento se incluye en los anexos.
3. Situación de desarrollo actual
3.1. Características
Los proyectos de desarrollo de software de investigación se inician por la necesidad de evaluar una técnica de procesamiento de datos a partir del análisis de un área de conocimiento especíﬁco en estudio. Debido a esto se deﬁne un equipo de trabajo cuyo objetivo es construir un software que implemente el tema en estudio. Esto deﬁne un proyecto que tiene una duración aproximada de un mes. Los hitos genéricos, ordenados cronológicamente, para este tipo de proyectos son: • Deﬁnir el problema que se desea investigar o la técnica que se
desea probar. • Asignar los recursos necesarios al proyecto y deﬁnir quien lo
liderará. • Hacer un estudio inicial de las técnicas que se utilizarán.
Eventualmente generar algunos prototipos para probar dichas técnicas. • Realizar una investigación sobre los conceptos que se van a aplicar. • Deﬁnir el experimento que se va a realizar así como los datos que se utilizarán. • Construir el software que se necesita para realizar el experimento. • Procesar los datos con el software construido y extraer las conclusiones. • Escribir el paper a partir de los resultados obtenidos. • Eventualmente repetir el experimento modiﬁcando el software o los datos utilizados. Dependiendo de los resultados se puede modiﬁcar el paper escrito.

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
• Presentar el paper o informe técnico generado a una instancia de revisión superior a la del equipo de proyecto.
Los resultados del proyecto normalmente se publican en alguna instancia académica relacionada con la temática estudiada. Este tipo de proyectos tienen las siguientes características: • El software es una herramienta para aprender, donde el paradigma
habitual es simular el problema. • El software construido es ocupado solo por usuarios especializados
y no tiene el concepto de “Cliente” que deﬁne y valida los requerimientos. Los mismos integrantes del proyecto deﬁnen y utilizan posteriormente el software generado. • El software construido está orientado al apoyo de la investigación y generación de reportes técnicos o papers. • El software construido posee interfaz humano – computador más bien simple y cuyos usuarios son pocos y especializados. • En general no se dedica mucho tiempo a la documentación lo que diﬁculta la revisión del software construido en el futuro. Generalmente cuando se realiza una modiﬁcación al código debe ser realizada por quien codiﬁcó inicialmente la aplicación ya que signiﬁca mucho tiempo explicarle a otra persona para que lo haga. Se produce entonces el fenómeno del “software de Juan” pasando estos a tener en la práctica verdaderos “dueños”. • Los proyectos al avanzar en su desarrollo dan origen a otros subproyectos donde se analizan y exploran ideas surgidas del trabajo original. Algunos de estos subproyectos son liderados por el mismo equipo original y en otros casos se asignan otros distintos. • Pueden surgir cambios muy bruscos en los requerimientos de las aplicaciones que se han deﬁnido lo que provoca diﬁcultad para reenfocar los recursos y los esfuerzos del equipo de trabajo. • Cada proyecto intenta demostrar una hipótesis especíﬁca pero durante su desarrollo suelen surgir otras más que pueden ser comprobadas o no. La comprobación de cada hipótesis debe ser correctamente documentada para futuras referencias, considerando las versiones de software y de datos utilizadas para ello. Respecto a los desarrolladores se puede decir que: Si bien son muy buenos programadores no tienen las costumbres que propone la Ingeniería de Software en cuanto a seguir un método especíﬁco de desarrollo. Poseen una buena disposición para incorporar mejoras en el proceso de desarrollo de software siempre que sean fáciles y rápidas de usar.

27

28 Héctor Antillanca Espina, Gerardo Cerda Neumann
3.2. Di cultades
Uno de los principales problemas es la diﬁcultad de reproducir los experimentos realizados. La diﬁcultad aumenta en proporción al tiempo transcurrido. Generalmente no se registra qué versión de la aplicación generó los resultados publicados ni los datos utilizados. Es difícil planiﬁcar este tipo de proyectos y deﬁnir sus fechas de término y de entrega de avances. A veces se asignan recursos insuﬁcientes a proyectos de cierta complejidad. En general los errores que se cometen en algunos proyectos se repiten en otros ya que se documenta escasamente lo realizado, impidiendo de esta forma crear una base de conocimiento común. Resulta difícil modiﬁcar las aplicaciones ya construidas debido a que la documentación de las mismas es más bien escasa. En general solo se documenta en el mismo código escrito pero sin tener un estándar deﬁnido y aceptado para eso. En consecuencia depende de quien haga el código la calidad de la documentación generada. Por las mismas razones es complejo modiﬁcar una aplicación desarrollada por otro equipo de proyecto. Por último cabe destacar que resulta difícil manejar múltiples versiones de los papers generados así como hacer el seguimiento entre las distintas versiones generadas y los programas utilizados y los datos procesados. Para superar estas diﬁcultades se presenta a continuación una propuesta de desarrollo.
4. Desarrollo del Método
4.1. Cómo superar las di cultades
La Ingeniería de Software se ocupa de las teorías, métodos y herramientas para el desarrollo del software profesional [11]. Incluye en el software las aplicaciones desarrolladas así como la documentación generada. Se espera que los ingenieros de software usen un enfoque sistemático y organizado en su trabajo. También se espera que utilicen herramientas y técnicas apropiadas dependiendo del problema que se va a resolver, de la restricción del desarrollo y de los recursos disponibles. Como se habla de ingeniería se da por sentado de que es necesario llegar a un equilibrio entre el esfuerzo realizado y la calidad del producto obtenido. En este sentido en los últimos años se han desarrollado dos enfoques diferentes, aunque no contradictorios.

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación

29

Por un lado se ha trabajado en metodologías que deﬁnen de manera exhaustiva el uso de herramientas, documentación y notaciones, como es el caso de RUP (Rational Uniﬁed Process) [5]. Fue desarrollada por los mismos creadores de la notación que ya representa un estándar de facto en la creación de software, el UML [12]. Esta metodología ha sido ampliamente estudiada y documentada, incorporándose como estándar en muchas empresas [7]. RUP ha tenido una gran difusión ya que incorpora varias de las mejores prácticas desarrolladas en la industria: desarrollo iterativo (o en espiral), manejo de los requerimientos, uso de una arquitectura de componentes, modelamiento visual del software, veriﬁcación de la calidad y control de cambios [13].
Por otro lado se han desarrollado metodologías orientadas a la creación del código rápidamente y centradas en la evolución y adaptación, como son las llamadas metodologías ágiles [8], destacándose entre ellas XP y Scrum por lo extendido de su uso [4]. La palabra ágil quiere decir que son metodologías que se adaptan muy bien a los cambios en el entorno de desarrollo [9]. El inicio formal de estos tipos de metodologías ocurrió en febrero de 2001 cuando un grupo de destacados metodólogos en procesos de software crearon un “Maniﬁesto por el Desarrollo de Software Ágil” (http://www.agilemanifesto.org).
Para apreciar la diferencia entre estos enfoques se muestra a continuación una tabla comparativa entre los métodos RUP y Scrum [8].
Principio: también denominado “ﬁlosofía de la metodología”, es la norma o idea fundamental que rige el pensamiento o la conducta, y orienta el análisis, diseño y desarrollo del software. Es el Principio, el que ordena y estructura las herramientas que son aplicables en la metodología, así como los Procedimientos con los que se aplica. Tradicionalmente, se apellida a cada metodología en función del principio que la rige.
Herramientas: son deﬁniciones de mecanismos manuales, semiautomáticos o automáticos que permiten analizar, diseñar o construir el software. Las herramientas quedan estrechamente ligadas al principio rector de la metodología y es muy poco probable que una misma herramienta sea utilizable en más de una metodología. Una herramienta debe tener un objetivo especíﬁco y un método de aplicación. Por lo general, se ha demostrado que las herramientas gráﬁcas (que usan imágenes) son más fáciles de usar y entender que las herramientas que sólo se sustentan en textos escritos. Son ejemplos de herramientas: los DFD Diagramas de Flujo de Datos, MER Modelos Entidad Relación, Lenguaje Estructurado, Diagramas de Componentes, Diagramas de Herencia, etc.
Modelos: el modelo deﬁne las etapas a realizar para alcanzar la solución al problema planteado. Los Modelos, se reﬁeren a la forma de organizar los Procedimientos, de manera de obtener resultados de

30 Héctor Antillanca Espina, Gerardo Cerda Neumann
calidad en el menor tiempo posible. A diferencia de las Herramientas y los Procedimientos, los modelos son relativamente independientes del principio, pudiendo aplicarse sin grandes diﬁcultades, cualquier modelo a cualquier metodología. Pese a lo anterior, el modelo debe quedar deﬁnido claramente antes de iniciar el desarrollo del software. Ejemplos de modelos son: Cascada, Prototipos y Espiral.
Tabla 1. Comparación entre RUP y Scrum Procedimientos: se reﬁere al modo de hacer, con orden, las cosas; es decir, como poner en práctica las herramientas. Los procedimientos corresponden a la deﬁnición que permite unir y ordenar los resultados de cada herramienta y facilitan el desarrollo racional y oportuno de software. Deﬁnen la secuencia en la que se aplican las herramientas, la entrega de los resultados de ellas, los controles que ayudan a asegurar la calidad. También coordinan y controlan los cambios y entregan las directrices que ayudan a los administradores a evaluar el progreso del proyecto. Finalmente cabe destacar que la metodología, para que sirva, debe cumplir con dos condiciones fundamentales [10]: Debe tener Hitos bien deﬁnidos: es decir que el analista/diseñador debe saber claramente cuales son los objetivos de la etapa en la que se encuentra, reconociendo claramente las tareas que debe realizar para alcanzar dichos objetivos. Debe ser Incremental: es decir que el resultado de una etapa, debe ser de utilidad para la persona que va a realizar la etapa siguiente.
4.2. Descripción del Método
El Método deﬁnido lleva por nombre PDKD o Project Driven Knowledge Discovery, es decir Proyecto Guiado por el Descubrimiento del Conocimiento. El Método tiene los siguientes elementos en consecuencia [10]:

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
4.2. 1. Principio Corresponde al hecho de que el proyecto de desarrollo está guiado por el descubrimiento de conocimiento. Por esta razón al ﬁnalizar cada vuelta del ciclo se analiza si se continúa con el proyecto o se genera uno nuevo. Los ciclos continúan hasta que se ha logrado el conocimiento buscado. El principio es poder repetir los experimentos cada vez que sea necesario independiente del tiempo transcurrido y de los participantes en el proyecto. 4.2.2. Herramientas Se deﬁnen las siguientes herramientas de apoyo: • Reuniones diarias de coordinación de 15 minutos “de pie”. Cada
integrante responde las preguntas: ¿qué hice ayer?, ¿qué voy a hacer hoy? y ¿qué diﬁcultades he tenido? • Una Wiki del proyecto para los compromisos establecidos. • Para la documentación se sugieren las siguientes aplicaciones:
o El generador automático Doxygen para el código, actualmente en su versión 1.5.2.
o El sistema de control de versiones SVN (Subversión) para el software y la documentación.
• Una “Matriz de Trazabilidad” donde quede registrada cada versión de software generado, los datos que procesó, los resultados que obtuvo, en qué fecha, en qué computador se encuentra cada versión y qué Proyecto fue el responsable de la creación de la aplicación.
La Matriz de Trazabilidad documenta los siguientes detalles:

31

El nombre del proyecto. El nombre del equipo que realizó el proyecto. La fecha de inicio del mismo.

32 Héctor Antillanca Espina, Gerardo Cerda Neumann
Para cada ciclo se debe registrar: • La aplicación creada identiﬁcada con un nombre único. • El o los desarrolladores responsables. • Los datos de ejecución utilizados, identiﬁcados de forma única. • La fecha de ejecución de la aplicación con esos datos. • Los documentos de registro y análisis resultantes.
Cada Equipo de Trabajo deﬁne la ubicación de sus aplicaciones, datos de ejecución y documentos de resultados. Estas deﬁniciones son conocidas por todos los equipos. 4.2.3. Modelo espiral, tal como se aprecia en la Figura 1.
Figura 1. Modelo propuesto en espiral (adaptado de Sommerville [11])
Cada vuelta, de aproximadamente dos semanas va a permitir analizar el cumplimiento de los requisitos y la posible creación de otro proyecto, derivado del primero. Para cada vuelta de la espiral se puede utilizar la siguiente plantilla adaptada de [11]:

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
• Objetivos: describe la intención del ciclo a realizar. La guía general es incrementar el conocimiento
• Restricciones: factores que limitan las posibilidades de realizar el ciclo y de generar conocimiento
• Alternativas: diferentes maneras de lograr los objetivos • Conocimiento: posibles conocimientos que se pueden obtener
con el ciclo • Descubrimiento del conocimiento: estrategias para generar
el conocimiento • Resultados: el conocimiento generado • Planes: como atacar el siguiente ciclo de ser este necesario • Compromisos: decisiones de cómo continuar De esta manera será posible aumentar la calidad de la interacción dentro del equipo y el apoyo a otros proyectos en desarrollo. Este hito es llamado “Control de Versión” y permitirá evaluar el avance logrado, concluir si el proyecto continúa adelante, se deja en pausa, se cancela o da origen a otros sub proyectos. 4.2.4. Procedimientos Las actividades a desarrollar son las siguientes: Cuadrante 1: 1. Deﬁnición del objetivo para el ciclo. Esta actividad está
liderada por el Jefe de Proyecto pero cuenta con la participación y aporte del Equipo de Trabajo completo. 2. Asignación de tareas para los integrantes del Equipo de Trabajo.
Resultados: • Un breve informe con el objetivo a lograr en el ciclo. • Cada integrante tiene su actividad deﬁnida (uso de la Wiki).
Cuadrante 2: 3. Investigación previa: cada integrante realiza una breve

33

34 Héctor Antillanca Espina, Gerardo Cerda Neumann
investigación (no más de 2 días) para cuantiﬁcar los tiempos que requerirá para completar su tarea. 4. Una vez ﬁnalizadas las primeras actividades se deﬁnen los requerimientos que deberá cumplir la aplicación que se desarrollará. El Equipo de Trabajo deﬁne de común acuerdo el plazo de construcción de la aplicación y los roles especíﬁcos que cumplirá cada uno: Desarrollador-Documentador, Encargado de Datos y Tester (uso de la Wiki). Puede haber más de un integrante en cada rol. Resultados: • Una lista de funcionalidades y características que la aplicación deberá cumplir. • Una asignación de los roles para cada integrante.
Cuadrantes 2 y 3: 5. Reunión de análisis: el Equipo de Trabajo analiza los pasos a seguir acordando las acciones para la siguiente semana. Las acciones se deﬁnen indicando: responsable, plazo para completarla y responsable (uso de la Wiki). 6. Se crea el código de la aplicación (uso de Doxygen y SVN). Cada integrante reporta diariamente sus avances, diﬁcultades y descubrimiento (reunión de coordinación de 15 minutos “de pie”). Resultados: • Una lista actividades asignadas. • Una lista de descubrimientos realizados por los integrantes del equipo.
Cuadrante 3: 7. Creación del diseño, deﬁnición de las pruebas a realizar, codiﬁcación y realización del experimento con los datos seleccionados (“Matriz de Trazabilidad”). Se analizan los resultados. 8. Se repite el paso 7 hasta que el grupo esté satisfecho con los resultados obtenidos (uso de Doxygen y SVN).

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
Resultado: • Un informe de análisis con los resultados obtenidos.
Cuadrante 4: 9. Al cerrar cada ciclo se podrá tomar la decisión de realizar otro conjunto de actividades siendo estas de los siguientes tipos: • Incremento de funcionalidad al software desarrollado. • Preparación de los datos de prueba. 10. Extraer las conclusiones del experimento realizado. 11. Evaluar la generación del paper o informe técnico para que sea revisado por gente externa al grupo de trabajo. A partir de esta revisión pueden ocurrir las siguientes situaciones: • Que sea aceptado para su publicación. • Que se sugieran nuevas pruebas y en consecuencia se realicen nuevos ciclos. • Que surjan nuevas ideas de proyecto y que se deﬁnan nuevos grupos de trabajo. 12. En caso de realizar un nuevo ciclo desarrollar los planes para la siguiente fase del proyecto. Resultado: • La decisión de realizar o no un nuevo ciclo. • Las conclusiones del experimento realizado. • Un paper o informe técnico que presenta el conocimiento generado.
En cada Equipo de Trabajo existen los siguientes roles y responsabilidades:
- Jefe de Proyecto: orientar y liderar el trabajo del equipo. - Desarrollador-Documentador: escribir el código,
documentar la programación. - Encargado de Datos y Tester: preparar los datos a procesar,
ejecutar los programas creados, revisar los resultados.

35

36 Héctor Antillanca Espina, Gerardo Cerda Neumann
A continuación se presentan algunos conceptos que se deben tener en cuenta al utilizar equipos autodirigidos como los que se propone utilizar.
5. Trabajo en Equipos Autodirigidos
Para ﬁnalizar esta presentación metodológica se desarrollarán los conceptos principales de los equipos autodirigidos. En primer lugar se destacarán sus características principales y luego se presentará el modelo de trabajo en equipo de Dickinson y MacIntire ya que deﬁne muy bien la forma de trabajo de este tipo de equipos.
5.1. Características de estos equipos
Obviamente que un equipo de trabajo o de proyecto no existe solo porque alguien lo haya deﬁnido así. Para que realmente sea un equipo de trabajo debe haber cohesión, entendimiento y objetivos claros a lograr. En los equipos de desarrollo de software se cumple la misma situación, de ahí la importancia de que realmente estén bien coordinados internamente. En este sentido un equipo autodirigido es “un número pequeño de personas, que comparten conocimientos, habilidades y experiencias complementarias y que, comprometidos con un propósito común, se establecen metas realistas, retadoras y una manera e ciente de alcanzarlas también compartida, asegurando resultados oportunos, previsibles y de calidad, por los cuales los miembros se hacen mutuamente responsables” [2] sic. En el contexto de este trabajo se entenderá por número pequeño de personas un máximo de 5, cantidad no excedida en los proyectos estudiados. De igual manera el resto de las características de un equipo autodirigido se cumplen ya que los integrantes de los proyectos son personas que poseen los conocimientos necesarios y se complementan para el logro de los objetivos, obteniendo la mayoría de las veces un resultado de calidad. Para que un equipo autodirigido sea exitoso es imprescindible que sus integrantes posean las siguientes características [2]:
• Estén dispuestos a aceptar la responsabilidad por las acciones que realizan y por los resultados que producen
• Se involucren en tareas para fortalecer al equipo, sobre todo en tareas que no son de su responsabilidad.
• Sean personas líderes de sí misma • Sepan pedir ayuda sin complejos cuando la necesitan

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
• Tengan mucha seguridad personal Como se puede concluir las personas que integran los equipos de trabajo de los proyectos analizados cumplen todas estas características, razón por la cual pueden aplicar el modelo de trabajo de Dickinson y McIntire que se describe a continuación. Modelo de trabajo en equipo de Dickinson y McIntire Este modelo de trabajo ha sido probado en proyectos que utilizan Scrum y ha obtenido buenos resultados [3]. Gráﬁcamente se puede ver en la Figura 2:

37

Figura 2. Modelo de trabajo en equipo de Dickinson y McIntire.
Sus elementos más importantes son: Orientación del equipo: se reﬁere a las tareas del equipo y las actitudes que los miembros del equipo tienen para con los demás. Además, reﬂeja la aceptación de las normas del equipo, el nivel de grupo cohesión, y la importancia de los miembros del equipo. Liderazgo de equipo: proporciona la dirección, estructura, y el apoyo a otros miembros del equipo. No se reﬁere necesariamente a una sola persona con autoridad formal sobre los demás. Liderazgo de equipos se puede presentar en varios miembros del equipo. Monitoreo: Se reﬁere a la observación de las actividades y el rendimiento de otros miembros del equipo y reconocer cuando un miembro del equipo lleva a cabo correctamente sus responsabilidades. Esto implica que el equipo tiene miembros individualmente competentes. Feedback (Retroalimentación): consiste en la entrega, la búsqueda, y la recepción de información entre los miembros del equipo. Dar retroalimentación se reﬁere a proporcionar información con respecto al rendimiento de otros miembros. Buscar la retroalimentación se reﬁere

38 Héctor Antillanca Espina, Gerardo Cerda Neumann
a la solicitud de entrada o de orientación con respecto al rendimiento y la aceptación de informaciones positivas y negativas respecto al trabajo realizado. Respaldo: implica estar siempre disponible para ayudar a otros miembros del equipo. Esto implica que los miembros tienen una comprensión de las tareas de otros miembros. También implica que el equipo de miembros está dispuesto y es capaz de ofrecer y buscar ayuda cuando sea necesario. Coordinación: se reﬁere a los miembros del equipo de ejecución de sus actividades de manera oportuna e integrada. Esto implica que la actuación de algunos miembros del equipo inﬂuencia el desempeño de los demás. Esto puede implicar un intercambio de información que, posteriormente, inﬂuye en el desempeño de otro miembro. Coordinación representa la salida del modelo y reﬂeja la ejecución de las actividades del equipo de tal manera que los miembros deben responder en función del comportamiento de los demás. Comunicación: implica el intercambio de información entre dos o más miembros del equipo en la forma prescrita y utilizando la terminología adecuada. A menudo, el propósito de la comunicación es aclarar o acusar recibo de la información. El equipo de trabajo debe ser capaz de apoyarse de manera permanente dejando constancia documentada de los acuerdos tomados ya sea mediante minutas de reunión o grabaciones en video. Las interacciones posibles serán hechas de manera presencial y también en forma virtual a través de videoconferencias e intercambio de correos electrónicos.
6. Aplicación Del Método
El método PDKD fue aplicado en dos proyectos diferentes ﬁnanciados por el Gobierno de Chile a través del Fondef (Fondo de Fomento al Desarrollo Cientíﬁco y Tecnológico):
• “Gestor de la estrategia de recorrido” que tiene como objetivo analizar técnicas que permitan revisar páginas Web de interés más rápidamente.
• “Evaluación de contenidos de páginas Web” que tiene por objetivo analizar las métricas generadas por los Crawler focalizados.
Ambos proyectos cumplen todas las características descritas en este artículo. Sin embargo son desarrollados por un equipo de trabajo más reducido que el descrito en la metodología. Cada equipo está formado

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
por dos personas, una de ellas asume el desarrollo principal y es apoyado por un investigador de Yahoo! Research. Para iniciar el uso del método se realizó una capacitación con los involucrados consistente en la lectura y análisis del paper que lo describe seguido por el apoyo en la aplicación del mismo. Además se realizaron reuniones quincenales de análisis de los avances logrados las que fueron documentadas mediante minutas. Finalmente se aplicó una encuesta respecto a los beneﬁcios y diﬁcultades encontrados al aplicar el método (ver el Anexo 1.). Apoco de empezar el proyecto se concluyó que algunas de las propuestas del método no eran necesarias de aplicar, por ejemplo la documentación de las versiones del software mediante SVN y el uso de Wiki. Una de las mayores diﬁcultades encontradas fue el hecho de que el Grupo de Trabajo es más reducido de lo que deﬁne el Método PDKD ya que este deﬁne al menos tres roles.
7. Resultados
Los participantes de los proyectos han coincidido que la aplicación del Método PDKD les ha permitido “Ordenar la manera de trabajo de este tipo de desarrollos donde prima más el obtener resultados que pensar en que estos mismos resultados, si no se mantiene un orden y respaldo escrito de lo realizado, entorpecen su uso para nuevos proyectos. Acerca al ámbito cientí co un tanto desordenado metodológicamente en el área de las ciencias de la computación con las mejores prácticas del desarrollo de software comercial” sic. Destacan especialmente que han podido “Ordenar el desarrollo de cada hito, plani car metas y objetivos” sic. También opinan que es una diﬁcultad el hecho de “Lo estricto y “poco real” (algunas veces) que resulta la metodología en la práctica en el ámbito investigativo en el sentido que en cualquier cuadrante y en general, en cualquier etapa del desarrollo de la investigación, suelen presentarse una alternación cíclica entre el desarrollo de software y la investigación bibliográ ca. Procesar la información, entenderla y aplicarla demora los plazos y “quiebra” en ese sentido la rigidez de los ciclos espirales.” sic. También comentan que no les parece un buen aporte usar la “Matriz de Trazabilidad” ya que los proyectos son muy pequeños en la cantidad de participantes. Sin embargo concuerdan que es útil en el caso de que otros participantes se agreguen o bien cuando se quiera analizar lo realizado en forma posterior al término del proyecto. Finalmente mencionan que hubiese sido mejor que el método

39

40 Héctor Antillanca Espina, Gerardo Cerda Neumann
mencionara explícitamente el caso de equipos de trabajo de un solo integrante con el apoyo de un investigador, como ha sido la experiencia de ambos.
8. Alcance
La aplicación del Método PDKD no se ha podido hacer en el contexto ideal ya que los desarrolladores de los proyectos son personas con poca experiencia profesional aún. Esta situación ha traído la diﬁcultad de que los plazos propuestos para los cuadrantes no se han podido cumplir en general ya que la etapa de estudio ha sido mucho mayor que la esperada. Sin embargo los participantes han acogido con entusiasmo la mayoría de las indicaciones y sugerencias del método concluyendo que les han sido útiles. Después de trabajar con el método por 4 meses ambos desarrolladores han logrado una gran soltura en el uso del método, especialmente en la aplicación de los cuadrantes de la espiral. Una revisión de la documentación generada por los participantes en los proyectos ha mostrado que se ha logrado un avance constante y consistente en los resultados. Ambos desarrolladores han concluido 8 ciclos de espiral con el consiguiente avance en los objetivos deﬁnidos para cada proyecto. Los tiempos promedio de cada ciclo han sido de 6.9 y 6.5 días. Al momento de escribir el documento los proyectos están a pocas semanas de su ﬁnalización.
9. Conclusiones
Se han deﬁnido y caracterizado los proyectos de desarrollo de software de investigación. El análisis de estas características ha permitido identiﬁcar las principales diﬁcultades que existen para que logren éxito. Se ha presentado y justiﬁcado un marco de trabajo dentro de las metodologías ágiles como propuesta de solución. La aplicación del método no ha podido replicar la situación ideal propuesta ya que los participantes de los proyectos son personas con poca experiencia en este tipo de actividades. Tampoco se ha podido comprobar el éxito de los equipos de trabajo al ser los participantes solo tres para los dos proyectos. Sin embargo las ideas básicas del proyecto de investigación y del método deﬁnido parecen ser correctas: la forma de trabajo en estos desarrollos necesita una lógica distinta y el uso del Modelo Espiral se vislumbra como una solución práctica para aumentar el éxito.

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
Cabe destacar que no solo los resultados de los proyectos han sido consistentes sino que la documentación generada en el desarrollo de los mismos ha permitido tener una idea precisa de lo que se ha desarrollado pudiendo detectar los problemas ocurridos y los logros conseguidos. En el futuro es necesario enriquecer el método para agregar algunos elementos faltantes, por ejemplo un esquema de diseño de los experimentos que se van desarrollando. Dicho esquema podría ser un artefacto de tipo pauta que facilite la realización y documentación de los experimentos realizados.
10. Agradecimientos
Se quiere dejar constancia del aporte de las siguientes personas: Profesor Mauricio Marín Caihuan, investigador Senior de Yahoo! Research, Santiago de Chile. Investigadores Carlos Gómez Pantoja y Óscar Rojas de Yahoo! Research, Santiago de Chile. Alumnos de Ingeniería Civil Informática Usach Mauricio Álvarez y Rodrigo Campos quienes lideraron el Proyecto Fondef asignado por el Gobierno de Chile a la Universidad y donde se aplicó el Método PDKD.

41

Referencias
[1] Antillanca Héctor, Cerda Gerardo, Propuesta metodológica para el desarrollo de software de investigación, I Encuentro Internacional de Computación e Informática del Norte de Chile (INFONORCHILE 2010), Antofagasta, 16 de noviembre de 2010, http:// jcc2010.infonor-chile.cl/doku.php/en:programa_i_conferencia_ internacional_de_computacion_e_informatica_del_norte_de_chile
[2] Ángel C., Alfredo, Trabajo en equipos autodirigidos, agosto de 2005, publicado en De Gerencia .COM, http://www.degerencia. com/articulos.php?artid=782, consultado en Julio 2010.
[3] Brede Moe, Nils, Dingsøyr Torgeir, Dybå Tore, A teamwork model for understanding an agile team: A case study of a Scrum project, The journal of Systems and Software, November 2009.
[4] Chow Tsun, Cao Dac-Buu, A survey study of critical success factors in agile software projects, The journal of Systems and Software, August 2007.

42 Héctor Antillanca Espina, Gerardo Cerda Neumann
[5] Jacobson, Booch y Rumbaugh, El proceso uniﬁcado de desarrollo de software, editorial Addison Wesley, 2000.
[6] Palacio, Juan, El modelo Scrum, publicado en http://www. navegapolis.net, 2006, consultado en junio de 2010.
[7] Pressman, Roger, Ingeniería de Software, un enfoque práctico, editorial Mc Graw Hill, 2005.
[8] Prilo, Sebastián Miguel, Métodos ágiles, una alternativa real y competitiva a los procesos tradicionales de desarrollo, Manuales Users, 2009.
[9] Rizwan M. Jameel Qureshi, Hussain S. A., An adaptative software development process model, Advances in Engineering Software 39, 2008.
[10] Santibáñez, José Miguel, Fundamentos de las Metodologías en la Ingeniería del Software, artículo publicado en la revista Akádemeia, Universidad UCINF.
[11] Sommerville, Ian, Ingeniería del Software, 7ma edición, editorial Pearson – Addison Wesley, 2005.
[12] Stevens, Perdita y Pooley, Rob, Utilización de UML en Ingeniería de Software con objetos y componentes, editorial Pearson – Addison Wesley, 2002
[13] Weitzenfeld, Alfredo, Ingeniería de software orientada a objetos con UML, Java e Internet, México, editorial Thomson, 2005.
Anexo 1.
Cuestionario aplicado. 1. ¿Qué aspectos de la metodología fueron confusos o difíciles de leer? 2. ¿Cuál(es) cree usted que ha(n) sido la(s) mayor(es) diﬁcultad(es) al
aplicar la metodología? 3. ¿Cuál cree usted que ha sido el mayor aporte de la metodología al
aplicarla? 4. ¿Qué beneﬁcios tuvo planiﬁcar las iteraciones usando la Espiral? 5. ¿En qué casos fue beneﬁcioso usar la “Matriz de Trazabilidad”?
¿Cuándo cree que no es necesaria? 6. La metodología propone los hitos genéricos que se describen en el

Desarrollo de Software Guiado por el Descubrimiento del Conocimiento un aporte para el desarrollo de software de investigación
Anexo 1.A. ¿Agregaría o eliminaría algunos? Indique cuáles. ¿Por qué? 7. ¿Fue útil la plantilla propuesta (ver Anexo 1.B.) para guiar el proceso Espiral? ¿Le agregaría o eliminaría algo? Desarrolle su respuesta. 8. ¿Qué otra(s) sugerencia(s) propone para mejorar la metodología?
Anexo 1.A. Hitos genéricos propuestos por la metodología: • Deﬁnir el problema que se desea investigar o la técnica que se desea
probar. • Asignar los recursos necesarios al proyecto y deﬁnir quien lo liderará. • Hacer un estudio inicial de las técnicas que se utilizarán.
Eventualmente generar algunos prototipos para probar dichas técnicas. • Realizar una investigación sobre los conceptos que se van a aplicar. • Deﬁnir el experimento que se va a realizar así como los datos que se utilizarán. • Construir el software que se necesita para realizar el experimento. • Procesar los datos con el software construido y extraer las conclusiones. • Escribir el paper a partir de los resultados obtenidos. • Eventualmente repetir el experimento modiﬁcando el software o los datos utilizados. Dependiendo de los resultados se puede modiﬁcar el paper escrito. • Presentar el paper o informe técnico generado a una instancia de revisión superior a la del equipo de proyecto.
Anexo 1.B. Campos propuestos por la plantilla para guiar el proceso Espiral de la metodología. • Objetivos: describe la intención del ciclo a realizar. La guía general
es incrementar el conocimiento • Restricciones: factores que limitan las posibilidades de realizar el
ciclo y de generar conocimiento • Alternativas: diferentes maneras de lograr los objetivos

43

44 Héctor Antillanca Espina, Gerardo Cerda Neumann
• Conocimiento: posibles conocimientos que se pueden obtener con el ciclo
• Descubrimiento del conocimiento: estrategias para generar el conocimiento
• Resultados: el conocimiento generado • Planes: como atacar el siguiente ciclo de ser este necesario • Compromisos: decisiones de cómo continuar.

