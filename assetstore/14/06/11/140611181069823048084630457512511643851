Decidable Matching for Convergent Systems

Nachum Dershowitz, Subrata Mitra
Department of Computer Science
University of Illinois
Urbana, IL 61801, U.S.A.
fnachum, mitrag@cs.uiuc.edu
G. Sivakumar
Department of Computer Science
Indian Institute of Technology
Bombay, 400076, India
siva@cse.iitb.ernet.in
Abstract
We describe decision procedures for certain classes of semantic matching problems, where
the equational theory with respect to which the semantic matching is performed has a con-
vergent rewrite system. We give counterexamples to show that semantic matching becomes
undecidable (as it generally is) when the conditions we give are weakened.
1 Introduction
Equation solving is the process of nding a substitution which makes two terms equal in a given
theory, while semantic unication is the process that generates a basis set of such uniers. A
simpler version of this problem, semantic matching, restricts the substitution to apply only to the
term on the left, say (the pattern). Semantic matching has potential applications in pattern-
directed languages. For example, if we could match with respect to addition, the function
denition
half(x+ x) = x
half(x+ x+ 1) = x
could be applied to a term like half(17), by nding that the pattern in the second denition
matches the term when x = 8.
It is well-known that any strategy for nding a complete set of uniers (or matchings) for
two terms, with respect to a given theory, may not terminate, even when the theory is presented
as a nite and convergent (terminating and conuent) set of rewrite rules [HH87, Bo87]. But,
for some special classes of theories|associativity and commutativity, for instance|semantic
unication is decidable.
It is, therefore, of interest to nd suitable cases for which a particular equation-solving
procedure is provably terminating, thus implying that the semantic unication or semantic
matching problems in the corresponding theories are decidable. In this paper, we consider only
equational theories for which there is a nite convergent rewrite system. We specialize the
unication procedure given in [DS87, Mit90, JK91] and study the eect of some syntactic and
semantic restrictions on the rewrite system presenting a theory, which result in decidability.
In the remainder of this section, we briey review the relevant basic notions, terminology
and results for equational theories and rewrite systems. For surveys of this area, see [DJ90] and
[JK91].
Terms are constructed from a given set of function symbols and variables. We normally use
l, r, s, and t for arbitrary terms, and x, y, and z for variables. A ground term is one containing

This research was supported in part by the U. S. National Science Foundation under Grants CCR-90-07195
and CCR-90-24271.
no variables (such as, 0+0). A term t is said to be linear in a variable x if x occurs only once in
t. For example, the term x + s(y)  z is linear in all three variables. The size of a ground term
is the number of function symbols it has, whereas its depth is the length of the longest path in
its tree representation. A substitution is a mapping from variables to terms. We use lower case
Greek letters ;  and  to denote substitutions, and write them out as fx
1
7! s
1
; : : : ; x
m
7! s
m
g.
A (ground) term t matches a pattern (term) s in a theory E if E j= s = t for some
substitution . We also say that t is an instance of s in this case. For example, 0+s(0) matches
y + x with the substitution fx 7! 0; y 7! s(0)g in the theory fx+ y = y + xg. A term s unies
with a term t in a theory E if E j= s = t for some substitution . We say that a solution  is
at least as general as a solution  if there exists a substitution  such that  and the composition
of  and  give equal terms (equal, in E), for each variable in the problem. For example, a most
general unier of x + y and u + v is the substitution fx 7! u; y 7! vg. Semantic unication is
the process of nding all such substitutions.
An equation is an unordered pair of terms, written in the form s = t. Either or both of s
and t may contain variables; which are understood as being universally quantied. A rewrite
rule is an oriented equation between terms, written l ! r; a rewrite system is a set of such
rules. A rewrite rule is left linear if its left hand side is linear for all the variables, for example
s(x)  y ! y + (x  y). A rewrite rule is said to be variable-preserving if all the variables in its
left hand side also appear in its right hand side term. A function symbol f is said to be a dened
function with respect to a rewrite system R if there exists a rule in R with f as the top-most
symbol of its left hand side; if there is no such rule, then f is called a constructor. We will use
 for identity of terms, to distinguish it from other forms of equality.
For a given system R, the rewrite relation ! replaces an instance l of a left-hand side l
by the corresponding instance r of the right-hand side r. Unlike equations, replacements are
not allowed in the reverse direction. We write s ! t, if s rewrites to t in one step; s !

t, if t
is derivable from s, that is, if s rewrites to t in zero or more steps; s # t, if s and t join , that
is, if s !

w and t !

w for some term w. A term s is said to be irreducible, or in normal
form, if there is no term t such that s ! t. We write s !
!
t if s !

t and t is in normal form.
All the matching problems we consider are of the form s!
?
N , meaning: nd a substitution
 such that s has normal form N . (We will frequently use N to stand for a term in normal
form.) A solution is irreducible if each of the terms substituted for the variables in the equation
is irreducible.
A rewrite relation is terminating if there is no innite chain of rewrites: t
1
! t
2
!    !
t
k
!   . A rewrite relation is ground conuent if whenever two ground terms, s and t, are
derivable from a term u, then a term v is derivable from both s and t. That is, if u !

s and
u !

t, then s!

v and t !

v for some term v. A rewrite system that is both ground conuent
and terminating is said to be ground convergent; whenever we say \convergent" in this paper, we
mean \ground convergent". Convergent rewrite systems are important for the following reason:
If R is a convergent rewrite system and E is the underlying equational theory (E is R with each
rule taken as an equation), then E j= s = t (for ground terms s and t) i s # t in R.
Example 1.1. The following convergent system has an undecidable semantic unication prob-
lem.
1 + x ! s(x)
s(x) + y ! s(x+ y)
1  x ! x
s(x)  1 ! s(x)
s(x)  s(y) ! s(y + (x  s(y)))
The system denes addition (+) and multiplication () over positive integers, which are repre-
sented in unary notation, using the constant 1 and successor function s.
It can be shown that in general it is undecidable if an equation of has a solution with respect
to the rewrite system given above, since were there a decision procedure for this, then it would
solve Hilbert's undecidable Tenth Problem. We will prove later that the semantic matching
problem is, nevertheless, decidable for this theory. ([Bo87, DJ90] use similar examples to show
that in general semantic matching and unication are undecidable even for convergent systems.)
In the most general case, however, semantic matching can be as dicult as full semantic
unication: For example, adding a new rule eq(x; x) ! true to the above example makes
unifying two terms s and t the same as matching eq(s; t) to true in the augmented theory.
2 The Matching Procedure
We describe a method for semantic matching that is complete for the special cases of matchings
that we will consider in Section 3, and later in Section 4. This is a simplied version of the
generally complete system for unication appearing in [DS87, Mit90, JK91], which is a renement
of narrowing, as studied in [?, Hul80, NRS89, Ret87], and others.
We consider equational theories that are given as nite convergent rewrite systems. Con-
vergent systems allow one to ignore reducible solutions to semantic unication and match-
ing problems. For an equational goal like s(0) + x!
?
s(s(0)), in the theory of addition
(f0 + x = x; s(x) + y = s(x + y)g), the only solution of interest is fx 7! s(0)g. Reducible
solutions, like fx 7! 0 + s(0)g, are redundant if we collect all irreducible ones. We will, there-
fore, be interested only in nding solutions at least as general as all the irreducible ones. In the
decidable cases we describe, there are only nitely many such solutions.
We always begin with a goal of the form s!
?
N , where N is a ground normal form, since
instead of matching s with an arbitrary t, we can take N to be its normal form. The transfor-
mation rules keep track of the current list of subgoals to be solved. A matching is found when
all the subgoals are of the form x 7! N , where x is a variable and N is a normal form, provided
that whenever the same variable appears on the left in more than one subgoal, the identical
term appears on the right. To get a complete set of solutions we need to consider dierent ways
of applying the following (non-deterministic) transformation rules:
Eliminate fx!
?
tg [G
;
fx 7! tg [ Gfx 7! tg
Decompose ff(s
1
; : : : ; s
n
)!
?
f(t
1
; : : : ; t
n
)g [ G
;
fs
1
!
?
t
1
; : : : ; s
n
!
?
t
n
g [G
Mutate ff(s
1
; : : : ; s
n
)!
?
tg [G
;
fs
1
!
?
l
1
; : : : ; s
n
!
?
l
n
; r!
?
tg [G
where f(l
1
; : : : ; l
n
) ! r is a renamed rule in R
We need not try all transformations on all goals, as shown in the proof of the following
completeness result:
Theorem 2.1 (Completeness). Let R be a variable-preserving convergent rewrite system. If the
goal s!
?
N has a solution  (that is, s !
!
N), then there is a derivation of the form
fs
?
!Ng
!
; ;
such that  (viewed as a substitution) is at least as general as .
Proof. The rst observation is that if s  f(s
1
; : : : ; s
n
), and we consider an innermost rewriting
strategy, then
f(s
1
; : : : ; s
n
)!

f(N
1
; : : : ; N
n
);
where s
i
 !
!
N
i
. (If s is a variable, then s 7! N is the solution we're looking for.) Thus, at this
stage there are two possibilities for the topmost position of the right hand side:
 No rule applies at this position, and thus N  f(N
1
; : : : ; N
n
). This situation is simulated
by the Decompose transformation rule, which generates the subgoals corresponding to
s
i
 !
!
N
i
.
 Some rule applies at this position. This is handled by the Mutate transformation rule.
After a nite number of decompositions, the mutation corresponding to the next rewrite step in
the derivation of N from s becomes possible, making progress towards the desired solution.
We show next that, since R is variable-preserving, we need only deal with subgoals which
have ground normal forms on the right. This guarantees that whenever we have a subgoal with
a variable on the left, no further work remains. Clearly, Decompose preserves this property
of right hand sides. Mutate does not, since the l
i
may have variables in them. But, if we
solve r!
?
t rst, then we can apply (using Eliminate) the solutions we get to each of the
variables in the l
i
. (We get ground substitutions for all of them, on account of the system's
being variable-preserving.) Since we need only look at innermost rewriting, the l
i
 must be in
normal form.
Finally, we have to show that the computed answer () is at least as general as the solution
. This can be done by induction on the well-founded multiset extension of!
+
, which compares
multisets of the left hand side terms of a list of goals, with the solution  applied to each such
term, along any suitable derivation sequence.
We can similarly show completeness for the case when the rewrite system is left linear.
The termination proofs in later sections assume particular strategies for selecting subgoals or
discarding subgoals which are instances of the selection strategy used in the above completeness
proof, namely, always nd solutions to the last subgoal of Mutate rst, and eliminate goals
whenever possible. Of course, Decompose and Mutate may both apply to the same subgoal,
and there may be many ways of mutating, one for each rule of the rewrite system with the same
outermost symbol as the left side of the subgoal.
3 Variable-Preserving Rules
In looking for decidable matching problems, we started with the following result (a special case
of Theorem 3.6 which we prove later): If R is a variable-preserving convergent term rewriting
system for which:
 all right hand sides of rules are either variables, or have a constructor at the top-level, and
 there are no nested dened functions in any right hand side,
then the semantic matching problem is decidable for R.
Example 3.1. By this result, the following system has a decidable semantic matching problem.
app(nil; x) ! x
app(cons(a; x); y) ! cons(a; app(x; y))
In [HH87], there is an example of a system with a single dened function in every right hand
side, which has an undecidable semantic matching problem. There, the dened function on the
right hand side of rules does not appear below a constructor, but it obeys the other restrictions.
This shows that dened functions must appear below at least one constructor.
Next, we tried to allow some nested function symbols on the right hand side of the rewrite
rules. We require the following denitions:
Denition 3.2 (Suitable Property). A suitable property is a measure (like depth, size, etc.)
associated with ground terms, along with a well-founded total ordering > which compares values
of P , such that P is strictly larger, under >, for terms than for its subterms.
Denition 3.3 (Non-Decreasing). Let P be a suitable property. A function symbol f is dened
to be non-decreasing (with respect to P ) if whenever f(
b
s
1
; : : : ;
c
s
n
) !
!
N , where each
b
s
i
is in
ground normal form, P (
b
s
i
)  P (N). Any function which does not have this property is said to
be a potentially decreasing function (with respect to P ).
We can similarly dene the notion of strict increasingness of a function.
It is not possible to always decide whether a function dened by a given convergent rewrite
system is non-decreasing with respect to a property P , even for a simple suitable property like
depth.
Lemma 3.4. It is undecidable if a function symbol is depth non-decreasing.
Proof. Consider
g(x) ! h(f(S
1
 $; S
2
 $; x); x)
h(f($; $; $); x) ! $
where f is as detailed in [HH87]. If S
1
and S
2
are respectively the start symbols for two context
free grammars G
1
and G
2
, we have
f(S
1
 $; S
2
 $; x)!
!
f($; $; $) i x 2 G
1
and x 2 G
2
:
By the above construction, g can be depth non-decreasing if and only if
8x:x 62 (G
1
\ G
2
):
Thus, a decision procedure for this problem could be used to decide if the intersection of two
arbitrary context free grammars is empty, which is impossible.
This lemma shows that in general it is not possible to decide if a function is depth (increasing)
non-decreasing, even for convergent systems. However, certain decidable subclasses with the
property are easy to identify. For example, any function which has a variable dropping rule
cannot be depth (increasing) non-decreasing. Again, for each rule l ! r which denes a
function f , if depth(l)  depth(r) then f is depth non-decreasing. We can also have similar
sucient conditions using the depth of each variable in the rule. For example, if every variable
occurs below at least the same number of constructors on the right side, as on the left, then the
corresponding function is depth non-decreasing. We can use the last criterion to show that +,
as dened in Example 1.1, is depth non-decreasing.
Unfortunately, if the right hand sides in rewrite rules have dened functions nested below
a potentially (depth) decreasing function, then the resulting system may have undecidable se-
mantic matching problems. This we show by considering the rules shown below, together with
the denitions of + and  given in Example 1.1.
Example 3.5.
half(s(1)) ! 1
half(s(s(x)) ! s(half(x))
f(1; 1) ! s(1)
f(s(x); s(y)) ! s(half(f(x; y)))
Here half is a potentially (depth) decreasing function. We have the following property for f :
f(x; y) =
(
s(1) if x = y
undened otherwise
Thus, we can now try to solve the goal f(t
1
; t
2
)!
?
s(1), where t
1
and t
2
are terms involving +
and . This goal has a solution  i t
1
 and t
2
 have the same ground normal form (because
of the observation about f). Thus, if this problem has a decision procedure, then we could use
the same for deciding the semantic unication problem mentioned in Example 1.1. Therefore,
no such decision procedure can exist.
Based on the counterexample above, it can be seen that a function denition in terms of
some potentially decreasing functions is not suitable for our purpose, and we therefore restrict
the right hand sides of rules to have potentially decreasing functions only at the lowest level
(that is, no other dened function symbol can be nested below them). We have:
Theorem 3.6. Let R be a convergent variable-preserving term rewriting system, and P be some
suitable property. If
 all right hand sides for rules in R are either variables, or have a constructor at the top-level,
and
 all right hand sides are such that no dened function is nested below any function decreasing
with respect to P ,
then the semantic matching problem is decidable for R.
Proof. Let  be a well-founded ordering on goals such that s
1
!
?
N
1
 s
2
!
?
N
2
i either
P (N
1
) > P (N
2
) or P (N
1
) = P (N
2
) and s
2
is a subterm of s
1
.
We prove that it is possible to nd all solutions (in nite time) to any goal of the form
%!
?
N , where % is a term which has no dened function nested below any decreasing function
and N is a ground normal form. This we do by induction with respect to the ordering .
The interesting case is the one in which %  f(%
1
; : : : ; %
n
), and f is a dened function. It
is therefore possible to use the transformation rule Mutate on this goal, applying some rule
f(l
1
; : : : ; l
n
) ! . The essential steps are:
f%!
?
Ng ;
Mutate
f%
i
!
?
l
i
; !
?
Ng; 1  i  n
;
Decompose
f%
i
!
?
l
i
; 
j
!
?
N
j
g
Since every right hand side, by assumption, has constructors at the top, we have shown the
decomposition step which may be applied to !
?
N .
The subgoals f
j
!
?
N
j
g produced after the decomposition step are smaller than the original
goal, that is, f%!
?
Ng  f
j
!
?
N
j
g, for each j. Thus, by applying the inductive hypothesis we
can assume that all the solutions to each of the goals in f
j
!
?
N
j
g (and therefore also for their
collection, that is, !
?
N) can be found in nite time. Let  be the solution obtained along one
feasible branch for the goal !
?
N . Now, since all the rules are variable-preserving,  contains
all the variables that are in any of the l
i
terms. Furthermore, because of the variable-preserving
nature of all rules, any such  must be a ground solution (if not, we will have a situation where
a non-ground term will rewrite using only variable-preserving rules to a ground term, which is
not possible). Thus, for any such , each l
i
 term must be ground.
There are now two dierent cases to be considered.
 Function f is potentially decreasing . By assumption there is no dened function below
it, that is, no %
i
has a dened function, and therefore all the %
i
!
?
l
i
subgoals can be
decomposed immediately to solved forms (x 7! N
0
), or to unsolvable goals with dierent
constructors at the top. This shows that all the solutions for %!
?
N can be found in nite
time in this case.
 Function f is non-decreasing. The important point to note is that each left hand side in
the list of subgoals has the property that no dened function is nested below a potentially
decreasing function. Let us now consider the ground solution  as described above. Since
f is known to be non-decreasing with respect to P , each of the l
i
 terms must be such
that P (l
i
)  P (N), or else the partial solution  is not feasible for f , and can be ignored.
(In this case, the goal %!
?
N has no solution using this rule for Mutate.)
Thus, for all feasible paths, we have that P (l
i
)  P (N), and therefore, we get
f%
?
!Ng  f%
i
?
! l
i
g;
for each i, since each %
i
is a subterm of %. Thus, by the induction hypothesis, each subgoal
%
i
!
?
l
i
 can be solved, and therefore the goal %!
?
N itself can also be solved.
Using this result, it is easy to show (by induction on the size of the left-sides of goals) that for
any term s (even without the restrictions imposed on %), and ground normal form
b
N , the goal
s!
?
b
N is solvable. The idea is that for every application of Mutate with the goal s!
?
b
N , the
subgoal r!
?
N is solvable (by above argument). Thus, we can replace the multiset of subgoals
generated by Mutate, by a nite number of such multisets (without r!
?
N) corresponding to
each of the solutions of r!
?
N .
A few comments about the restrictions used for the proof are in order:
 Theorem 3.6 uses semantic restrictions on the right hand sides of rewrite rules of the
system, by requiring that certain dened functions can appear only below non-decreasing
functions. Although there can be no decision procedure to check if a function is increasing
in general, certain simple sucient restrictions are easy to check, given the corresponding
set of rewrite rules. For instance, the special case, mentioned at the beginning of this
section and applied in Example 3.1, uses only syntactic restrictions.
 The fact that we do not have dened functions nested below potentially decreasing func-
tion(s) is important because of the counterexample given in Example 3.5.
In certain special cases it is possible to relax the requirement that all right hand sides with
dened functions must have a constructor at the top-level. For example, if we assume that the
top-level function on the right hand side is strictly increasing, and that it eventually generates
a constructor in a nite number of steps, then the above theorem holds.
The following example illustrates this point:
Example 3.7.
1 + x ! s(x)
s(x) + y ! s(x+ y)
fib(1) ! 1
fib(s(1)) ! 1
fib(s(s(x))) ! fib(s(x)) + fib(x)
Here + is a strictly (depth) increasing function, and fib denes the Fibonacci numbers, both
being dened over positive integers. Furthermore, both rules for + have constructors at the top-
level on the right hand side, and the remaining rules have the properties required by Theorem 3.6.
The semantic matching problem is decidable for this system.
The essential idea is that if any sequence of applications ofMutate for increasing functions
generate a constructor eventually, then the matching problem is decidable. Here is an outline
of the proof.
If the top-level symbol (of % in Theorem 3.6) is an increasing function, the applicable trans-
formation rule generates the following derivation.
f%!
?
Ng ;
Mutate
f%
i
1
!
?
l
i
1
; 
1
!
?
Ng
The goal !
?
N is not decreasing as such. However, since we assumed that all such deriva-
tions eventually generate a constructor at the top, we must have at least one step of decompo-
sition if we continue to mutate this goal. The derivation therefore would look like:
f%!
?
Ng ;
Mutate

f%
i
1
!
?
l
i
1
; : : : ; %
i
m
!
?
l
i
m
; 
m
!
?
Ng
;
Decompose
 f%
i
1
!
?
l
i
1
; : : : ; %
i
m
!
?
l
i
m
; 
m
!
?

Ng
We assume that we only mutate the 
m
!
?
N subgoal at every stage.
Now, we can show that the subgoals are decreasing with respect to the ordering , as in
Theorem 3.6.
Also, the system described in Example 1.1 obeys all the restrictions of Theorem 3.6, and
thus has a decidable semantic matching problem.
4 Variable Dropping Rules
In this section we deal with the possibility of incorporating variable dropping rules into the
rewrite system, and we will try to extend Theorem 3.6 suitably to handle such cases. However,
before we do so, we point out some cases which cause problems, by way of counterexamples.
Example 4.1. Consider the rule given below, with the denition of + and  from Example 1.1
eq(x; x) ! true
Here the eq rule is the only one which is variable dropping. For this set of rules, the problem of
feq(s; t)!
?
trueg is not solvable in general, because once again a solution of this problem would
mean a decision procedure for some variation of the Hilbert's Tenth problem.
Example 4.2. This time we consider two rules and the denitions of + and  as before
f(s(x); 0) ! 0
eq(x; x) ! x
Here the only variable dropping rules is the one for f . Consider a goal of the form
ff(eq(t
1
; t
2
); y)!
?
0g, where t
1
and t
2
are terms involving + and . The possible solution
steps for this goal are shown below:
ff(eq(t
1
; t
2
); y)!
?
0g ;
Mutate
feq(t
1
; t
2
)!
?
s(x
1
)g;  = fy 7! 0g
;
Mutate
ft
1
!
?
x; t
2
!
?
xg;  = fy 7! 0; x 7! s(x
1
)g
Thus, if this goal has a solution, then we can also solve t
1
?
= t
2
, with respect to + and ,
which is not possible. This example illustrates the fact that a system with a single (left linear)
variable dropping rule may admit undecidable matching problems.
The above counterexamples show that a single variable dropping rule may make the goal
solving procedure non-terminating. However, it is possible to have variable dropping rules and
still have a decidable semantic matching algorithm. We prove the result in Theorem 4.3.
Theorem 4.3. Let R be a left linear rewrite system and P be a suitable property. If
 all right hand sides for rules in R are either variables, or have a constructor at the top-level,
and
 all right hand sides are such that no dened function is nested below any function decreasing
with respect to P ,
then the semantic matching problem is decidable for R.
We need two lemmata.
Lemma 4.4. Let R be a rewrite system as dened in Theorem 4.3. Then, for the initial goal
fs!
?
Ng, where N is ground, if G[ ft
1
!
?
t
2
g is the list of subgoals generated by the procedure
at some point and x is a variable in t
2
, then t
2
must be linear with respect to x, and, furthermore,
x does not occur in any right hand side in a subgoal in G.
Proof. If  !
?
t is a subgoal generated by the procedure for the initial goal s!
?
N , then the
variables of t must come either from N or from the left hand side of some rule in R. For our
case, N is ground, and R is left linear, thus this variable can not occur in any other right hand
side in the goal list, and again t itself must be linear in this variable.
Lemma 4.5. Let R be a rewrite system as dened in Theorem 4.3. Then, in solving fs!
?
Ng
a subgoal of the form s!
?
x can be ignored if x is one of the dropped variables in some rule used
in the transformation rule Mutate.
Proof. Let G denote the remaining list of subgoals when s!
?
x is encountered. By Lemma 4.4,
x can not appear in any right hand side in G. Furthermore, since x is a dropped variable (and
since every mutation renames variables), x can not be present in any of the left hand sides either
or in the partial answer substitution also. Thus, any such goal is trivially solvable (that is, it
has a solution for any substitution for the variables in s), and can be ignored.
We can now state the proof of the theorem.
Proof. In the proof of Theorem 3.6 we never needed to solve for any subgoal of the form s!
?
t,
where t was non-ground. This is because of the variable-preserving nature of all the rules: after
applying Mutate we could rst solve the r!
?
N subgoal to get ground answers for all the
variables introduced by any rule, and the application of this ground substitution would make
all the corresponding left hand sides of the rule ground.
Since we now have variable dropping rules, this assumption is no longer true. However, due
to Lemma 4.5 we only need to solve for goals of the form s!
?
t, where any variable x in t has
the property that it is linear in t and does not occur in any of the other subgoals. Thus, we can
apply a proof quite similar to that in Theorem 3.6, and show that the procedure is terminating
for this case.
The ordering that we use in this case compares the right hand sides of goals using a suitable
property as before. In general it may not be possible to compare non-ground terms using such
a criterion, but the reason that this still works in this case is because a non-decreasing function
can not have variable dropping rules, and thus we end up comparing two non-ground terms in
which the variables in one term (which has to be smaller with respect to this property) is a
subset of the variables of the other one.
There is another simple class of systems with variable dropping rules that have decidable
semantic matching problems:
Theorem 4.6. Let R be a rewrite system and P a suitable property. If
 all right hand sides for rules in R are either variables, or have a constructor at the top-level,
 all right hand sides are such that no dened function is nested below any decreasing func-
tion,
 all variable dropping rules in R are such that each of the dropped variables appear imme-
diately below the top level symbol on the left hand side, and
 the left hand side is linear in each dropped variable,
then the semantic matching problem is decidable for R.
Proof. Let f(: : : ; x; : : :) ! r be a rule in the system, such that x is a dropped variable. If a
goal of the form f(: : : ; s
i
; : : :)!
?
t is used in an application of the transformation rule Mutate,
then one of the new goals generated (corresponding to the dropped variable x) would look like
s
i
!
?
x (assuming that the variable x was the ith subterm of the left hand side term of the rule).
Now, since we rename variables before applying a rule, x can not occur in any other term in the
remaining multiset of goals. Thus, like in Lemma 4.5, we can ignore this goal, since it will be
trivially solvable for any substitution for the variables of s
i
.
This argument shows that any goal which has a dropped variable on its right hand side can be
ignored. Thus, for the remaining goals we can apply arguments similar to those in Theorem 3.6,
and hence the result.
The following rewrite systems satisfy all the requirements of Theorem 4.3 and therefore have
decidable semantic matching problems. Once again we have used depth as the suitable property.
Example 4.7. In this example + is depth non-decreasing, while  is potentially depth decreas-
ing, and has variable dropping rules.
0 + x ! x
s(x) + y ! s(x+ y)
0  x ! 0
s(x)  0 ! 0
s(x)  s(y) ! s(y + (x  s(y)))
Example 4.8. In this example insert is depth increasing and both rules for it have constructors
at the top-level on the right hand side, while min has variable dropping rules.
min(x; 0) ! 0
min(0; x) ! 0
min(s(x); s(y)) ! s(min(x; y))
max(x; 0) ! x
max(0; x) ! x
max(s(x); s(y)) ! s(max(x; y))
sort(nil) ! nil
sort(cons(x; y)) ! insert(x; sort(y))
insert(x; nil) ! cons(x; nil)
insert(x; cons(y; z)) ! cons(min(x; y); insert(max(x; y); z))
5 Related Results
Some results similar to those given here have been reported in [Hul80, KN87], where they are
interested in the more general problem of semantic unication. Hullot [Hul80] shows that the
narrowing procedure terminates when all right hand sides are either variables or ground terms.
Furthermore, it has been demonstrated by Kapur and Narendran [KN87] that if each right
hand side is either ground or a subterm of the left hand side, the unication problem for the
corresponding theory is NP-complete.
Using techniques similar to those in this paper, and the full set of transformation rules in
[Mit90], it is not hard to show that there is a strategy which is terminating for Hullot's case.
The full system essentially gives additional decomposition rules necessary to handle cases when
the right hand side of a goal s!
?
x happens to be a variable. For the systems that we have
considered so far, such a goal can either be ignored (in some left linear cases), or can be replaced
by a dierent goal which doesn't have this property (for the variable preserving case). However,
in the general case, such simplications are not possible, and thus we require new transformation
rules to handle such cases. Since both sides of a goal may contain variables the orderings we
used in Section 3 do not decrease, having no a priori bound on the measure of the right side of
goals.
It is possible to extend Hullot's systems somewhat:
Theorem 5.1. If all right hand side of rules are either constructor terms or ground terms, then
semantic unication is decidable.
Proof. Consider r in the mutation rule. In the ground case, the goal r!
?
t has a solution
only if the normal form of r syntactically matches t. In the constructor case, r is free of dened
functions, and r!
?
t has a solution only if r and t can be syntactically unied.
However, we can prove the following theorem from [KN87]:
Theorem 5.2. Let R be a rewrite system in which every right hand side is a subterm of the
corresponding left hand side. Then, the unication problem is decidable for R.
Proof. The basic idea is that, since the full set of transformation rules [Mit90] simulates
innermost rewriting in reverse (see [DS87, Mit90] for details), at any stage the right hand side
t of a goal of the form s!
?
t must be irreducible for a solution to be feasible. Thus, if at any
stage we have to mutate at a position which comes from the left hand side of a previous rule
application, then the corresponding solution is reducible and can be ignored (the procedure will
enumerate another solution which is equivalent but irreducible). Now, every right hand side
of a rule in R is a subterm of the corresponding left hand side. Thus, based on the previous
argument, we never need to further mutate the r!
?
t subgoal generated from any application
of Mutate, which implies that the solution tree generated from this subgoal is nite.
6 Future Work
It would be interesting to develop the ideas of the previous section. Further restrictions on the
system, such as having completely dened functions (a function f is said to be completely dened
by a rewrite system R, if the normal form of any ground term containing f is a constructor-only
term), may help because of the following result:
Lemma 6.1. If R consists of only completely dened function symbols, then innermost narrow-
ing is complete with respect to ground solutions.
Proof. Observe that, in the nal normal form, all the dened functions must be removed.
Thus, we can apply rules at any position where a dened function occurs, and, in particular, to
the innermost position.
With this understanding, in certain cases it will be possible to have a decision procedure for
semantic unication. The idea is to apply a minimal substitution to a subset of the variables in
the goal, so that the terms are reducible and compare the top-level constructor generated along
the two sides. If the subterms generated after decomposition happen to be \smaller" than the
original goal terms in a well-founded ordering, then the system will be solvable.
It may also be possible to extend Theorem 4.3 somewhat, by allowing rules which are left
non-linear, like in Theorem 4.6, after demonstrating that these non-linear variables are never
eliminated by the procedure at a later stage, when using a variable dropping rule in Mutate.
It may be possible to give sucient conditions to check such properties by analyzing a graph of
the terms of the rewrite system.
Acknowledgement
We thank Deepak Kapur and the referees for their helpful comments.
References
[Bo87] Alexander Bockmayr. A Note on a Canonical Theory with Undecidable Uni-
cation and Matching Problem. In Journal of Automated Reasoning, Vol 3,
pages 379{381, 1987.
[DS87] Nachum Dershowitz and G. Sivakumar. Solving Goals in Equational Languages.
In Proceedings of the First International Workshop Conditional Term Rewriting
System, Orsay, France, July 1987. Vol. 308, pages 45{55, of Lecture Notes in
Computer Science, Springer Verlag (1987).
[DJ90] Nachum Dershowitz and Jean-Pierre Jouannaud. Rewrite systems. In J.
van Leeuwen, editor, Handbook of Theoretical Computer Science, chapter 6,
pages 243{320, North-Holland, Amsterdam, 1990.
[Fay79] M. Fay. First-order unication in an equational theory. In Proceedings of the
Fourth Workshop on Automated Deduction, pages 161{167, Austin, TX, February
1979.
[Hul80] Jean-Marie Hullot. Canonical forms and unication. In R. Kowalski, edi-
tor, Proceedings of the Fifth International Conference on Automated Deduction,
pages 318{334, Les Arcs, France, July 1980. Vol. 87 of Lecture Notes in Computer
Science, Springer, Berlin.
[HH87] Stephan Heilbrunner and Steen Holldobler. The Undecidability of the Unica-
tion and Matching Problem for Canonical Theories. In Acta Informatica, Vol 24,
pages 157{171, 1987.
[JK91] Jean-Pierre Jouannaud and Claude Kirchner. Solving Equations in Abstract Alge-
bras: A Rule-Based Survey of Unication. In J.-L. Lassez and G. Plotkin, editors,
Computational Logic: Essays in Honor of Alan Robinson, MIT Press, Cambridge,
MA, 1991.
[KN87] Deepak Kapur and Paliath Narendran. Matching, Unication and Complexity.
In ACM SIGSAM Bulletin, (1987) Vol. 21, Number 4, pages 6{9.
[Mit90] Subrata Mitra. Top-Down Equation Solving and Extensions to Associative and
Commutative Theories. Master's thesis, Department of Computer and Informa-
tion Sciences, University of Delaware, Newark, DE, 1990.
[NRS89] Werner Nutt, Pierre Rety and Gert Smolka. Basic Narrowing Revisited. In J. of
Symbolic Computation, (1989) Vol. 7, pages 295{317.
[Ret87] Pierre Rety. Improving basic narrowing techniques. In P. Lescanne, editor, Pro-
ceedings of the Second International Conference on Rewriting Techniques and Ap-
plications, pages 228{241, Bordeaux, France, May 1987. Vol. 256 of Lecture Notes
in Computer Science, Springer, Berlin.
