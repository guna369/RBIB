Principal Typings for Explicit Substitutions
Calculi
Daniel Lima Ventura1?, Mauricio Ayala-Rinco´n1??, and
Fairouz Kamareddine2
1 Grupo de Teoria da Computac¸a˜o, Dep. de Matema´tica Universidade de Bras´ılia,
Bras´ılia D.F., Brasil
2 School of Mathematical and Computer Sciences Heriot-Watt University,
Edinburgh, Scotland UK
{ventura,ayala}@mat.unb.br, fairouz@macs.hw.ac.uk
Abstract. Having principal typings (for short PT) is an important
property of type systems. In simply typed systems, this property guaran-
tees the possibility of a complete and terminating type inference mecha-
nism. It is well-known that the simply typed λ-calculus has this property
but recently J.B. Wells has introduced a system-independent definition
of PT, which allows to prove that some type systems, e.g. the Hind-
ley/Milner type system, do not satisfy PT. Explicit substitutions ad-
dress a major computational drawback of the λ-calculus and allow the
explicit treatment of the substitution operation to formally correspond
to its implementation. Several extensions of the λ-calculus with explicit
substitution have been given but some of which do not preserve basic
properties such as the preservation of strong normalization. We consider
two systems of explicit substitutions (λse and λσ) and show that they
can be accommodated with an adequate notion of PT. Specifically, our
results are as follows:
• We introduce PT notions for the simply typed versions of the λse- and
the λσ-calculi and prove that they agree with Wells’ notion of PT.
• We show that these versions satisfy PT by revisiting previously intro-
duced type inference algorithms.
Key Words: lambda-calculus, explicit substitution, principal typings
1 Introduction
The development of well-behaved calculi of explicit substitutions is of great in-
terest in order to bridge the formal study of the λ-calculus and its real imple-
mentations. Since β contraction depends on the definition of the substitution
operations, which is informally given in the theory of λ-calculus, they are in fact
made explicit, but obscurely developed (that is, in an empirical manner), when
? Corresponding author, supported by a PhD scholarship of the CNPq.
?? Partially supported by the CNPq.
most computational environments based on the λ-calculus are implemented. A
remarkable exception is λProlog, for which its explicit substitutions calculus, the
suspension calculus, has been extracted and formally studied [NaWi98].
In the study of making substitutions explicit, several alternatives rose out
and all of them are directed to guarantee essential properties such as simulating
beta-reduction, confluence, noetherianity (of the associated substitution calcu-
lus), subject reduction, having principal typings (for short PT), preservation of
strong normalization etc. This is a non trivial task; for instance, the λσ-calculus
[ACCL91], which is one of the first proposed calculi of explicit substitutions, was
reported to break the latter property some years after its introduction [Mel95].
This implies that infinite derivations starting from well-typed λ-terms are pos-
sible in this calculus, raising serious questions for any mechanism supposed to
simulate the λ-calculus explicitly. In this paper, the focus is on the PT prop-
erty, which means that for any typable term M , there exists a type judgment
A ` M : τ , representing all possible typings 〈A′, τ ′〉 for M . For a discussion
about the difference between principal type and principal typing see [Jim96]. In
the simply typed λ-calculus this corresponds to the existence of more represen-
tative typings. PT guarantees compositional type inference and plays a crucial
role in helping one to find a complete/terminating type inference algorithm.
In section 2 we present the type-free λ-calculus in de Bruijn notation, the
λse-calculus [KR97] and the λσ-calculus [ACCL91]. In section 3 we present the
relevant backgrounds for the type assignment systems we consider and then we
present simply typed systems for each calculus we study. Then, we discuss the
general notion of principal typings defined in [We2002] and present notions of
principal typings for the λ-calculus in de Bruijn notation, the λσ- and the λse-
calculi and prove that they are adequate. In section 4 we conclude and present
future work. Detailed proofs and examples are included in an extended version
of this work available at www.mat.unb/∼ayala/publications.html.
2 The type free calculi
2.1 The λ-calculus in de Bruijn notation
Definition 1 (Set ΛdB). The syntax of λ-calculus in de Bruijn notation, the
λdB-calculus, is defined inductively as
TermsM ::= n | (M M) |λ.M where n ∈ N∗=Nr{0}
Terms like ((((M1 M2) M3) . . . ) Mn) are written as usual (M1M2 . . . Mn). Let
M be a λ-term. If, in the tree representation ofM , there are exactly n abstractors
in the minimal path from the root position until the position of some subterm
M1, then M1 is said to be n-deep in M . In other words, M1 is in between n
abstractors.
Definition 2. We say that i occurs as free index in a term M if i+ n is
n-deep in M .
The β-contraction definition for ΛdB needs a mechanism which detects and up-
dates free indices. Below, we give an operator similar to the one in [ARKa2001a].
Definition 3. Let M ∈ ΛdB and i ∈ N. The i-lift of M , denoted as M+i, is
defined inductively as
1 . (M1M2)+i = (M+i1 M
+i
2 ) 3 . n
+i =
{
n+ 1 , if n > i
n , if n ≤ i.
2 . (λ.M1)+i = λ.M
+(i+1)
1
The lift of a term M is its 0-lift, denoted as M+. Intuitively, the lift of M
corresponds to an increment by 1 of all free indices occurring inM . For instance,
(λ.( 1 3 ))+ = λ.( 1 4 ). Using the i-lift, we are able to present the definition of
the substitution used by β-contractions, as done in [ARKa2001a].
Definition 4. Let m,n ∈ N∗. The β-substitution for free occurrences of n in
M ∈ ΛdB by term N , denoted as {n /N}M , is defined inductively by
1 . {n /N}(M1 M2) = ({n /N}M1 {n /N}M2) 3 . {n /N}m =
8<:
m− 1 , if m > n
N, if m = n
m , if m < n2 . {n /N}λ.M1 = λ.{n+ 1 /N+}M1
Observe that in item 2 of Def. 4, the lift operator is used to avoid captures of
free indices in N . We present the β-contraction as defined in [ARKa2001a].
Definition 5. β-contraction in λdB is defined by (λ.M N)→β {1 /N}M .
Notice that item 3 in Definition 4, for n = 1, is the mechanism which does
the substitution and updates the free indices in M as consequence of the lead
abstractor elimination.
2.2 The λse-Calculus
The λse-calculus is a proper extension of the λdB-calculus. Two operators σ
and ϕ are introduced for substitution and updating, respectively, to control the
atomization of the substitution operation by arithmetic constraints.
Definition 6 (Set Λs of λse-terms).
The syntax of the λse-calculus, where n, i, j ∈ N∗ and k ∈ N is given by
TermsM ::= n | (M M) |λ.M |MσiM |ϕjkM
The term MσiN represents the term {i /N}M ; i.e., the substitution of the free
occurrences of i in M by N , updating free variables in M (and in N). The term
ϕjkM represents j−1 applications of the k-lift to the termM ; i.e.,M+k
(j−1)
. Table
1 contains the rewriting rules of the λse-calculus together with the rule (Eta), as
given in [ARKa2001a]. The bottom seven rules on table 1 are those which extend
the λs-calculus to λse ([KR97]) with the rule (Eta) ([ARKa2001a]). They ensure
confluence of the λse-calculus on open terms and the application to the higher
order unification problem. Hence, those rules are not the focus of this paper.
=se denotes the equality for the associated substitution calculus, denoted as
se, induced by all the rules except (σ-generation) and (Eta).
2.3 The λσ-Calculus
The λσ-calculus is given by a first-order rewriting system, which makes substi-
tutions explicit by extending the language with two sorts of objects: terms and
substitutions which are called λσ-expressions.
(λ.M N) −→ M σ1N (σ-generation)
(λ.M)σiN −→ λ.(Mσi+1N) (σ-λ-transition)
(M1 M2)σ
iN −→ ((M1σiN) (M2σiN)) (σ-app-trans.)
nσiN −→
8<:
n− 1 if n > i
ϕi0N if n = i
n if n < i
(σ-destruction)
ϕik(λ.M) −→ λ.(ϕik+1M) (ϕ-λ-trans.)
ϕik(M1 M2) −→ ((ϕikM1) (ϕikM2)) (ϕ-app-trans.)
ϕik n −→

n+ i− 1 if n > k
n if n ≤ k (ϕ-destruction)
(M1σ
iM2)σ
jN −→ (M1σj+1N)σi(M2σj−i+1N) if i ≤ j (σ-σ-trans.)
(ϕikM)σ
jN −→ ϕi−1k M if k < j < k + i (σ-ϕ-trans. 1)
(ϕikM)σ
jN −→ ϕik(Mσj−i+1N) if k + i ≤ j (σ-ϕ-trans. 2)
ϕik(Mσ
jN) −→ (ϕik+1M)σj(ϕik+1−jN) if j ≤ k + 1 (ϕ-σ-trans.)
ϕik(ϕ
j
lM) −→ ϕjl (ϕik+1−jM) if l + j ≤ k (ϕ-ϕ-trans. 1)
ϕik(ϕ
j
lM) −→ ϕj+i−1l M if l ≤ k < l + j (ϕ-ϕ-trans. 2)
λ.(M 1 ) −→ N if M=seϕ20N (Eta)
Table 1. The rewriting system of the λse-calculus with the Eta rule
Definition 7 (Set Λσ of λσ-expressions). The λσ-expressions consist of:
Terms M ::=1 | (M M) |λ.M |M [S]
Substitutions S ::= id | ↑ |M.S |S ◦ S
Substitutions can intuitively be thought of as lists of the form N/i indicating
that the index i should be changed to the term N . The expression id repre-
sents a substitution of the form {1 /1 , 2 /2 , . . . } whereas ↑ is the substitution
{ i+ 1 / i |i∈N∗}. The expression S ◦ S represents the composition of substitu-
tions. Moreover, 1 [↑n], where n ∈ N∗, codifies the de Bruijn index n+ 1 and
i [S] represents the value of i through the substitution S, which can be seen as
a function S(i). The substitution M.S has the form {M/1 , S(i)/i+ 1 } and is
called the cons of M in S. M [N.id] starts the simulation of the β-reduction
of (λ.M N) in λσ. Thus, in addition to the substitution of the free occurrences
of the index 1 by the corresponding term, free occurrences of indices should be
decremented because of the elimination of the abstractor. Table 2 includes the
rewriting system of the λσ-calculus, as presented in [DoHaKi2000].
(λ.M N) −→ M [N.id] (Beta) (λ.M)[S] −→ λ.(M [1.(S◦↑)]) (Abs)
(M N)[S] −→ (M [S] N [S]) (App) ↑◦ (M.S) −→ S (ShiftCons)
M [id] −→ M (Id) (S1 ◦ S2) ◦ S3 −→ S1 ◦ (S2 ◦ S3) (AssEnv)
1[S].(↑◦S) −→ S (Scons) (M.S) ◦ T −→ M [T ].(S ◦ T ) (MapEnv)
(M [S])[T ] −→ M [S ◦ T ] (Clos) 1.↑ −→ id (V arShift)
id ◦ S −→ S (IdL) 1[M.S] −→ M (V arCons)
S ◦ id −→ S (IdR) λ.(M 1 ) −→ N if M=σN [↑] (Eta)
Table 2. The rewriting system for the λσ-calculus with the Eta rule
This system without (Eta) is equivalent to that of [ACCL91]. The associated
substitution calculus, denoted by σ, is the one induced by all the rules except
(Beta) and (Eta), and its equality is denoted as =σ.
3 The Type Systems
Definition 8. The syntax of the simple types and contexts is given by:
Types τ ::= α | τ → τ Contexts A ::= nil | τ.A
where α ranges over type variables.
A type assignment system S is a set of rules, allowing some terms of a
given system to be associated with a type. A context gives the necessary in-
formation used by S rules to associate a type to a term. In the simply typed
λ-calculus [Hi97], the typable terms are strongly normalizing. The ordered pair
〈A, τ〉, of a context and a type, is called a typing in S. For a term M , A`M :τ
denotes that M has type τ in context A, and 〈A, τ〉 is called a typing of M . If
Θ=〈A, τ〉 is a typing in S then S M :Θ denotes that Θ is a typing of M in S.
The contexts for λ-terms in de Bruijn notation are sequences of types. If A
is some context and n ∈ N then A<n denotes the first n−1 types of A. Similarly
we define A>n, A≤n and A≥n. Note that, for A>n and A≥n the final nil element
is included. For n=0, A≤0.A=A<0.A=A. The length of A is defined as |nil|=0
and, if A is not nil, |A|=1+|A>1|. The addition of some type τ at the end of a
context A is defined as A.τ=A≤m.τ.nil, where |A|=m.
Given a term M , an interesting question is whether it is typable in S or
not. Note that, we are using a Curry-style/implicit typing, where in λ.M we did
not specify the type of the bound variable ( 1 ). Such terms have many types,
depending on the context. Another important question is whether given a term,
its so-called most general typing can be found. An answer to this question,
which represents any other answer, is called principal typing. Principal typing
(which is context independent) is not to be confused with a principal type (which
is context dependent). Let Θ be a typing in S and TermsS(Θ)={M |S M :Θ}.
J.B. Wells introduced in [We2002] a system-independent definition of PT and
proved that it generalizes previous system-specific definitions.
Definition 9 ([We2002]). A typing Θ in system S is principal for some term
M if S  M : Θ and for any Θ′ such that S  M : Θ′ we have that Θ ≤S Θ′,
where Θ1 ≤S Θ2 ⇐⇒ TermsS(Θ1) ⊆ TermsS(Θ2).
In simply typed systems the principal typing notion is tied to type substi-
tution and weakening. Weakening allows one to add unnecessary informa-
tion to contexts. Type substitution maps type variables to types. Given
a type substitution s, the extension for functional types is straightforward as
s(σ→τ)=s(σ)→s(τ) and the extension for sequential contexts as s(nil)=nil and
s(τ.A)=s(τ).s(A). The extension for typings is given by s(Θ)=〈s(A), s(τ)〉.
3.1 Principal typings for the simply typed λ-calculus in de Bruijn
notation TAλdB
Definition 10. (The System TAλdB) The TAλdB typing rules are given by:
(Var) τ.A ` 1 : τ (Varn) A ` n : τ
σ.A ` n+ 1 : τ
(Lambda)
σ.A `M : τ
A ` λ.M : σ → τ (App)
A `M : σ → τ A ` N : σ
A ` (M N) : τ
This system is similar to TAλ ([Hi97]). The rule (Varn) allows the construction
of contexts as sequences.
Lemma 1. Let M be a λdB-term. If A `M : τ , then A.σ `M : τ . Hence, the
rule A `M :τ
A.σ `M :τ (λdB-weak) holds in the system TAλdB.
Lemma 1 above is proved via the statement of a more general property of TAλdB ,
which justifies why the weakening for this type system has to be done only adding
types at the end of contexts.
Using (λdB-weak) and type substitution, we follow the definition of [We2002]
for Hindley’s Principal Typing to define principal typing for the λdB-calculus.
Definition 11. A principal typing in TAλdB of a term M is the typing Θ =
〈A, τ〉 such that
1. TAλdB M : Θ
2. If TAλdB  M : Θ′ for any typing Θ′ = 〈A′, τ ′〉, then there exists some
substitution s such that s(A) = A′≤|A|.nil and s(τ) = τ
′.
Observe that, given a principal typing 〈A, τ〉 of M , the context A is the
shortest context where M can be typable. In contrast to the λ-calculus with
names, where the context from a principal typing ofM is the smallest set because
it declares types for exactly the free variables of M , the context from a principal
typing in λdB may have some type declaration for variables not occurring in the
term, to maintain the ordered structure of contexts. For example, a PT for 2 is
〈τ1.τ2.nil, τ2〉.
As is the case for the simply typed λ-calculus with names, the best way to
assure that Definition 11 is the correct translation of the PT concept, is to verify
that Definition 11 corresponds to Definition 9.
Theorem 1. A typing Θ is principal in TAλdB according to Definition 11 iff Θ
is principal in TAλdB according to Definition 9.
The proof is similar to the one in [We2002]. The ‘sufficient’ condition uses
a substitution lemma as in [Hi97] 3A2.1(ii) and the weakening from Lemma 1.
The ‘necessary’ condition is constructive by contraposition building a counter
example: given a term M with PT Θ one supposes a typing Θ′ that is not PT
of M according to definition 11. From M and the relation between Θ and Θ′
given by definition 11, one builds a new term N for which Θ′ is a typing, but
Θ is not. The main difference between the proof in [We2002] and this one is the
recursive function used to give N a structure exploring some specific Θ′ feature,
which has to be split, according to the order in which the term is bound during
the recursive construction of the counter example.
We now present a type inference algorithm for λdB-terms, similarly to the
one in [AyMu2000] for λse, to verify whether TAλdB has PT according to Defi-
nition 11. Given any term M , decorate each subterm with a new type variable
as subscript and a new context variable as superscript, obtaining a new term
denoted by M ′. For example, for term λ.( 2 1 ) we have the decorated term
(λ.( 2 A1τ1 1
A2
τ2 )
A3
τ3 )
A4
τ4 . Then, rules from Table 3 are applied to pairs of the form
〈〈R,E〉〉, where R is a set of decorated terms and E a set of equations on type
and context variables.
(Var) 〈〈R ∪ {1Aτ }, E〉〉 →〈〈R,E ∪ {A = τ.A′}〉〉,where A′ is a fresh
context variable;
(Varn) 〈〈R ∪ {nAτ }, E〉〉 →〈〈R,E ∪ {A = τ ′1. · · · .τ ′n−1.τ.A′}〉〉,where A′
and τ ′1, . . . , τ
′
n−1 are fresh context and type
variables;
(Lambda) 〈〈R ∪ {(λ.MA1τ1 )A2τ2 }, E〉〉 →〈〈R,E ∪ {τ2 = τ∗ → τ1, A1 = τ∗.A2}〉〉, where
τ∗ is a fresh type variable;
(App) 〈〈R ∪ {(MA1τ1 NA2τ2 )A3τ3 }, E〉〉→〈〈R,E ∪ {A1 = A2, A2 = A3, τ1 = τ2 → τ3}〉〉
Table 3. Rules for Type Inference in System TAλdB
The inference rules in Table 3 are given according to the typing rules of
TAλdB . Type inference for M starts with 〈〈R0,∅〉〉, where R0 is the set of all M ′
subterms. The rules from Table 3 are applied until one reaches 〈〈∅, Ef 〉〉, where
Ef is a set of first-order equations over context and type variables.
Example 1. Let M = λ.( 2 1 ). Then M ′ = (λ.( 2 A1τ1 1
A2
τ2 )
A3
τ3 )
A4
τ4 and R0 = { 2 A1τ1 ,
1A2τ2 , ( 2
A1
τ1 1
A2
τ2 )
A3
τ3 , (λ.( 2
A1
τ1 1
A2
τ2 )
A3
τ3 )
A4
τ4 }. Using the rules in Table 3 we have the
following reduction:
〈〈R0, ∅〉〉 →Varn
〈〈R1 = R0 r { 2A1τ1 }, E1 = {A1 = τ ′1.τ1.A′1}〉〉 →Var
〈〈R2 = R1 r { 1A2τ2 }, E2 = E1 ∪ {A2 = τ2.A′2}〉〉 →App
〈〈R3 = R2 r {( 2 A1τ1 1A2τ2 )A3τ3 }, E3 = E2 ∪ {A1 = A2, A2 = A3, τ1 = τ2→τ3}〉〉 →Lambda
〈〈∅ = R3 r {(λ.( 2 A1τ1 1A2τ2 )A3τ3 )A4τ4 }, E4 = E3 ∪ {τ4 = τ∗1→τ3, A3 = τ∗1 .A4}〉〉
Thus, E4 = Ef . Solving the trivial equation over context variables, i.e. A1 =
A2 = A3, and using variables of smaller subscripts, one gets {τ1 = τ2→τ3, τ4 =
τ∗1→τ3, A1 = τ ′1.τ1.A′1, A1 = τ2.A′2, A1 = τ∗1 .A4}. Thus, simplifying one gets {τ1 =
τ2→τ3, τ4 = τ∗1→τ3, τ ′1.τ1.A′1 = τ2.A′2 = τ∗1 .A4}. From these equations one gets the
most general unifier (mgu for short) τ4 = τ2→τ3 and A4 = (τ2→τ3).A′1, for the
variables of interest. Since the context must be the shortest one, A′1 = nil and
〈(τ2→τ3).nil, τ2→τ3〉 is a principal typing of M .
From Definition 11 and by the uniqueness of the solutions of the type infer-
ence algorithm, one deduces that TAλdB satisfies PT. The next theorem says
that every typable term has a principal typing.
Theorem 2 (Principal Typings for TAλdB). TAλdB satisfies the property
of having principal typings.
3.2 Principal typings for TAλse , the simply typed λse
The typed version of λse presented is in Curry style, which we have veri-
fied to have the same properties as the version in Church style presented in
[ARKa2001a]. In particular, the properties in question being: weak normalisa-
tion (WN), confluence (CR) and subject reduction (SR). Thus, the syntax of
λse-terms and the rules are the same as the untyped version.
Since the syntax of λse remains close to the λdB-calculus, to have a type
assignment system for the λse-calculus we only need to add typing rules to
TAλdB for the two new kinds of terms.
Definition 12 (The System TAλse). TAλse is given by (Var), (Varn), (App),
(Lambda) from Definiton 10 and the following new rules.
(Sigma)
A≥i ` N : ρ A<i.ρ.A≥i `M : τ
A `MσiN : τ (Phi)
A≤k.A≥k+i `M : τ
A ` ϕikM : τ
where in (Sigma) |A| ≥ i− 1 and in (Phi) |A| ≥ k + i− 1.
Weakening for λse is done in the same way as for λdB, adding types at the end
of a context, giving the following lemma.
Lemma 2 (Weakening for λse). The rule (λse-weak) holds in System TAλse ,
where A `M : τ
A.σ `M : τ (λse-weak).
Consequently, the definition of principal typings in λse is the same as that for
TAλdB . For the sake of completeness we repeat it here.
Definition 13 (Principal Typings in TAλse). A principal typing of a term
M in TAλse is a typing Θ = 〈A, τ〉 such that
1. TAλse M : Θ
2. If TAλse M : Θ′ for any typing Θ′ = 〈A′, τ ′〉, then there exists a substitu-
tion s such that s(A) = A′≤|A|.nil and s(τ) = τ
′.
Theorem 3. A typing Θ is principal in TAλse according to Definition 13 iff Θ
is principal in TAλse according to Definition 9.
The proof of Theorem 3 is a straightforward extension of that of Theorem 1.
We now present a type inference algorithm for the λse-calculus, similarly to
that of [AyMu2000]. The algorithm is composed of the rules from Table 3 and
the new rules in Table 4.
(Sigma) 〈〈R ∪ {(MA1τ1 σiNA2τ2 )A3τ3 }, E〉〉 →
〈〈R,E ∪ {τ1=τ3, A1=τ ′1. · · · .τ ′i−1.τ2.A2, A3=τ ′1. · · · .τ ′i−1.A2}〉〉,
where τ ′1, . . . , τ
′
i−1 are new type variables and the sequence is
empty if i = 1;
(Phi) 〈〈R ∪ {(ϕikMA1τ1 )A2τ2 }, E〉〉 →
〈〈R,E ∪ {τ1 = τ2, A2 = τ ′1. · · · .τ ′k+i−1.A′, A1 = τ ′1. · · · .τ ′k.A′}〉〉,
where A′ and τ ′1, . . . , τ
′
k+i−1 are new variables of context and
type. If k + i− 1 = 0 or k = 0, then the sequences τ ′1, . . . , τ ′k+i−1
and τ ′1, . . . , τ
′
k, respectively, are empty.
Table 4. Type inference rules for the λse-Calculus
Similarly to the previous algorithm, the rules of Table 4 were developed
according to the rules of Definition 12. The decorated term associated with M ,
denoted by M ′, has a syntax close to that of decorated λdB-terms: any subterm
is decorated with its type and its context variables. The rules are applied to
pairs 〈〈R,E〉〉, starting from the pair 〈〈R0,∅〉〉, as was done to TAλdB .
Example 2. ForM = λ.((1σ22 ) (ϕ20 2 )), one obtains the corresponding R0 from
M ′ = (λ.((1A1τ1 σ
22A2τ2 )
A3
τ3 (ϕ
2
0 2
A4
τ4 )
A5
τ5 )
A6
τ6 )
A7
τ7 . Then, applying the rules in Table 3
and 4 to the pair 〈〈R0, ∅〉〉, obtaining the pair 〈〈∅, Ef 〉〉, and simplifying Ef , in a
similar fashion to example 1, one obtains the system of equations which lead to
the mgu τ7 = (τ2 → τ6)→ τ6 and A7 = τ ′1.τ2.A′2 for the variables of interest.
Theorem 4 (Principal Typings for TAλse). TAλse satisfies the property of
having principal typings.
3.3 Principal typings for TAλσ, the simply typed λσ
The typing rules of the λσ-calculus provide types for objects of sort term as
well as for objects of sort substitution. An object of sort substitution, due to its
semantics, can be viewed as a list of terms. Consequently, its type is a context.
S A denotes that the object of sort substitution S has type A.
Definition 14 (The System TAλσ). TAλσ is given by the following typing
rules.
(var) τ.A ` 1 : τ (lambda) σ.A `M : τ
A ` λ.M : σ → τ
(app)
A `M : σ → τ A ` N : σ
A ` (M N) : τ (clos)
A ` S A′ A′ `M : τ
A `M [S] : τ
(id) A ` idA (shift) τ.A `↑ A
(cons)
A `M : τ A ` S A′
A `M.S  τ.A′ (comp)
A ` S A′′ A′′ ` S′ A′
A ` S′ ◦ S A′
Observe that the name of the typing rules begin with lower-case letters, while
the rewriting rules with upper-case letters. As for λse, the typed version of the
λσ-calculus is presented in Curry style. We have verified that the Curry style
version has WN, CR and SR as the Church style version of [DoHaKi2000].
The notion of typing for TAλσ has to be adapted because the λσ-expression
of sort substitution is decorated with contexts variables as types and as contexts.
Thus, one may say that Θ=〈A,T〉 is a typing of a λσ-expression in TAλσ, where
T can be either a type or a context. If the analysed expression belongs to the
λ-calculus, the notion of typing corresponds to that of TAλdB .
Lemma 3 (Weakening for λσ). Let M be a λσ-term and S a λσ-substitution.
If A ` M : τ , then A.σ ` M : τ , for any type σ. Similarly, if A ` S  A′, then
A.σ ` S  A′.σ. Hence, the rules (λσ-tweak) and (λσ-sweak) hold in System
TAλσ, where
A `M : τ
A.σ `M : τ (λσ-tweak)
A ` S A′
A.σ ` S A′.σ (λσ-sweak)
Lemma 3 and type substitutions allow us present a definition for PT in TAλσ.
Definition 15 (Principal Typings in TAλσ). A principal typing of an
expression M in TAλσ is a typing Θ = 〈A,T〉 such that
1. TAλσ M : Θ
2. If TAλσ M : Θ′ for any typing Θ′ = 〈A′,T′〉, then there exists a substitu-
tion s such that s(A) = A′≤|A|.nil and if T is a type, s(T) = T
′, otherwise
we have that s(T) = T′≤|T|.nil.
We might verify if this PT definition has a correspondence with Wells’ system-
independent definition [We2002].
Theorem 5. A typing Θ is principal in TAλσ according to Definition 15 iff Θ
is principal in TAλσ according to Definition 9.
Despite the fact that the notion of typing is extended to include the sort substi-
tution, the techniques used to prove Theorem 5 are the same applied to prove
Theorems 1 and 3.
(Var) 〈〈R ∪ {1Aτ }, E〉〉 →〈〈R,E ∪ {A = τ.A′}〉〉,where A′ is a fresh
context variable;
(Lambda) 〈〈R ∪ {(λ.MA1τ1 )A2τ2 }, E〉〉 →〈〈R,E ∪ {τ2 = τ∗ → τ1, A1 = τ∗.A2}〉〉, where
τ∗ is a fresh type variable;
(App) 〈〈R ∪ {(MA1τ1 NA2τ2 )A3τ3 }, E〉〉→〈〈R,E ∪ {A1 = A2, A2 = A3, τ1 = τ2 → τ3}〉〉
(Clos) 〈〈R ∪ {(MA1τ1 [SA2A3 ])A4τ2 }, E〉〉→〈〈R,E ∪ {A1 = A3, A2 = A4, τ1 = τ2}〉〉
(Id) 〈〈R ∪ {idA1A2}, E〉〉 →〈〈R,E ∪ {A1 = A2}〉〉
(Shift) 〈〈R ∪ {↑A1A2}, E〉〉 →〈〈R,E ∪ {A1 = τ ′.A2}〉〉,where τ ′ is a fresh
type variable;
(Cons) 〈〈R ∪ {(MA1τ1 .SA2A3 )
A4
A5
}, E〉〉 →〈〈R,E ∪ {A1 = A2, A2 = A4, A5 = τ1.A3}〉〉
(Comp) 〈〈R ∪ {(SA1A2 ◦ T
A3
A4
)A5A6}, E〉〉→〈〈R,E ∪ {A1 = A4, A2 = A6, A3 = A5}〉〉
Table 5. Type inference rules for the λσ-calculus
We now present an algorithm for type inference, to verify if TAλσ has PT
according to Definition 15. Thus, given an expression M , we will work with the
decorated expression M ′ but the type for substitutions is a context as well. We
use the same syntax for decorated expressions as in [Bo95].
The inference rules presented in Table 5 are given according to the typing
rules of the system TAλσ presented in Definition 14. Similarly to the previous al-
gorithm, the rules are applied to pairs 〈〈R,E〉〉, where R is a set of subexpressions
of M ′ and E a set of equations over type and context variables.
Example 3. For M = (2 .id) ◦ ↑ one has M ′ = (((1A1τ1 [↑A2A3 ])A4τ2 .idA5A6)A7A8 ◦ ↑A9A10)A11A12 .
Then R0 = {(1A1τ1 [↑
A2
A3
])A4τ2 , ((1
A1
τ1
[↑A2A3 ])A4τ2 .id
A5
A6
)A7A8 , (((1
A1
τ1
[↑A2A3 ])A4τ2 .id
A5
A6
)A7A8 ◦ ↑
A9
A10
)A11A12 ,
1A1τ1 , ↑
A2
A3
, idA5A6 , ↑
A9
A10
}. Applying the rules from Table 5 to the pair 〈〈R0, ∅〉〉 until
the pair 〈〈∅, Ef 〉〉 is reached, and simplifying Ef as in example 1, one obtains the
set of equations {τ1 = τ2, A11 = A12 = τ2.A2, A2 = τ ′1.A1, A1 = τ1.A′1}. From this
equational system one obtains the mgu A11=A12=τ1.τ ′1.τ1.A
′
1, for the variables
of interest. Thus, 〈τ1.τ ′1.τ1.nil, τ1.τ ′1.τ1.nil〉 is a principal typing of M .
Theorem 6 (Principal Typings for TAλσ). TAλσ satisfies the property of
having principal typings.
4 Conclusions and Future Work
We considered for λse and λσ particular notions of principal typings and gave
respective definitions which we proved to agree with the system-independent
notion of Wells in [We2002]. The adaptation of this general notion of principal
typings for the λσ requires special attention, since this calculus enlarges the lan-
guage of the λ-calculus by introducing a new sort of substitution objects, whose
types are contexts. Thus, the provided PT notion has to deal with the principal-
ity of substitution objects as well. Then, the property of having principal typings
is straightforwardly proved by revisiting type inference algorithms for the λse
and the λσ, previously presented in [AyMu2000] and [Bo95], respectively. The
result is based on the correctness, completeness and uniqueness of solutions given
by adequate first-order unification algorithms (e.g. see the unification algorithm
given in [Hi97]).
The investigation of this property for more elaborated typing systems of
explicit substitutions is an interesting work to be done.
References
[ACCL91] M. Abadi, L. Cardelli, P.-L. Curien, and J.-J. Le´vy. Explicit Substitutions.
J. of Functional Programming, 1(4):375–416, 1991.
[ARMoKa2005] M. Ayala-Rinco´n, F. de Moura, and F. Kamareddine. Comparing and
Implementing Calculi of Explicit Substitutions with Eta-Reduction. Annals of
Pure and Applied Logic, 134:5–41, 2005.
[ARKa2001a] M. Ayala-Rinco´n and F. Kamareddine. Unification via the λse-Style
of Explicit Substitution. The Logical Journal of the Interest Group in Pure and
Applied Logics, 9(4):489–523, 2001.
[AyMu2000] M. Ayala-Rinco´n and C. Mun˜oz. Explicit Substitutions and All That.
Revista Colombiana de Computacio´n, 1(1):47–71, 2000.
[Bo95] P. Borovansky´. Implementation of Higher-Order Unification Based on Calculus
of Explicit Substitutions. In M. Bartosˇek, J. Staudek, and J. Wiedermann, editors,
Proceedings of the SOFSEM’95: Theory and Practice of Informatics, volume 1012
of LNCS, pages 363–368. Springer Verlag, 1995.
[deBru72] N. G. de Bruijn. Lambda calculus notation with nameless dummies, a tool
for automatic formula manipulation, with application to the Church-Rosser theo-
rem. Indagationes Mathematicae, 34:381–392, 1972.
[DoHaKi2000] G. Dowek, T. Hardin, and C. Kirchner. Higher-order Unification via
Explicit Substitutions. Information and Computation, 157(1/2):183–235, 2000.
[Hi97] J. R. Hindley. Basic Simple Type Theory. Number 42 in Cambridge Tracts in
Theoretical Computer Science. Cambridge University Press, 1997.
[Jim96] , T. Jim. What are principal typings and what are they good for?. In Proc.
of POPL’95: Symp. on Principles of Programming Languages, 42–53, ACM, 1996.
[KR97] F. Kamareddine and A. R´ıos. Extending a λ-calculus with Explicit Substi-
tution which Preserves Strong Normalisation into a Confluent Calculus on Open
Terms. J. of Func. Programming, 7:395–420, 1997.
[Mel95] P.-A. Mellie`s. Typed λ-calculi with explicit substitutions may not terminate.
In Proc. of TLCA’95, volume 902 of LNCS, pages 328–334. Springer Verlag, 1995.
[NaWi98] G. Nadathur and D. S. Wilson. A Notation for Lambda Terms A General-
ization of Environments. Theoretical Computer Science, 198:49–98, 1998.
[We2002] J. Wells. The essence of principal typings. In Proc. 29th International Col-
loquium on Automata, Languages and Programming, ICALP 2002, volume 2380 of
LNCS, pages 913–925. Springer Verlag, 2002.
