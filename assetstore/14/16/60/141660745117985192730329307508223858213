A Calculus for Rippling
David A. Basin Max-Planck-Institut fur Informatik
Saarbrucken, Germany Email: basin@mpi-sb.mpg.de
Toby Walsh INRIA-Lorraine, 615, rue du Jardin Botanique,
54602 Villers-les-Nancy, France Email: walsh@loria.fr
Abstract
Rippling is a special type of rewriting which uses annotations to guide the derivation towards a particular goal. It has many desirable properties. For example, it terminates yet allows rules like associativity to be used in both directions; it is also highly goal-directed applying only those rewrite rules needed to remove the di erences between the goal and some hypothesis. Although it has been suggested that rippling can be directly implemented via rst-order term rewriting on annotated terms, we show that this is not possible. We describe a simple calculus we have implemented for rippling and prove that it has the desired properties. This calculus allows us to combine rippling with conventional term rewriting. Such a combination o ers the exibility and uniformity of conventional rewriting with the highly goal-directed nature of rippling.
1 Introduction
Rippling is a type of rewriting developed at Edinburgh 5, 3] and independently by 8]. Although rippling was originally designed for inductive theorem proving, it has recently been applied with success to domains outwith inductive theorem proving 1, 9]. Rippling is rewriting tightly restricted by special kinds of annotation. Consider, for example, a proof of the associativity of multiplication using structural induction. In the step-case, the induction hypothesis is, (x y) z = x (y z) and the induction conclusion is,
( s(x) y) z = s(x) (y z): The annotations in the induction conclusion mark the di erences with the induction hypothesis. Deleting everything in the box that is not underlined gives the skeleton; this is preserved during rewriting. By comparison, simply removing annotations from terms gives the erasure. The boxed but not underlined terms are wave-fronts; these are removed by rippling. The underlined parts are wave-holes; they represent terms in the wave-front we would like to leave unchanged. To remove the wave-fronts, we use annotated
We thank Leo Bachmair, Alan Bundy, and Michael Rusinowitch. The rst author was funded by the German Ministry for Research and Technology (BMFT) under grant ITS 9102. The second author was supported by a Human Capital and Mobility Postdoctoral Fellowship from the European Union. The current address for the second author is IRST, Location Pante di Povo, I38100 Trento, Italy.
1

rewrite rules called wave-rules which move wave-fronts in some well founded manner (usually towards the top of the term where cancellation can occur). In this example, we need the wave-rules,

s(U) V ) (U V ) + V U+V W ) U W +V W

(1) (2)

Rippling using (1) yields (3) and then with (2) gives (4).

( x y + y ) z = (x (y z)) + y z

(3)

((x y) z) + y z = (x (y z)) + y z

(4)

As the wavefronts are now at the top of each term, we have successfully rippled-out both sides of the equality. We can complete the proof by simplifying with the induction hypothesis.
While the ideas behind rippling are intuitive, implementation is more complex than one might expect. In this paper we show where some of the di culties lie and why rst-order rewriting alone cannot directly implement rippling. We propose a new calculus that rede nes the normal notions of substitution and matching and prove that it has the desired properties. To save space we restrict ourselves in several ways. First, we only consider so called \outward oriented" wave-rules (see 3]) and second we restrict ourselves to rippling in equational theories. Both restrictions are easily lifted.

2 Properties
Rippling may be viewed as rst-order rewriting with the addition of annotation to restrict applicability of rewrite rules. In the CLAM system 4], rippling is implemented as rst-order rewriting in a meta-level theory in which the signature of the original theory is extended with two new unary function symbols wf and wh (representing wave-fronts and wave-holes). In a well annotated term, every wave-front has at least one proper subterm that is a wave-hole. Terms in wave-holes may be further annotated.
De nition 1 (wats) well annotated terms (or wats) are the smallest set such that,
1. t is a wat for all unannotated terms;
2. wf (f(t1; :::; tn)) is a wat i 9i:ti = wh(si) and 8i:ti = wh(si), si is a wat and 8i:ti 6= wh(si), ti is
an unannotated term (unat);
3. f(t1; :::tn) is a wat where f 6= wf and f 6= wh i 8i:ti is a wat.
To aid the reader, we will always write annotated terms using boxes and holes, though this is just meant to be syntactic sugar for wf and wh.
We also introduce two functions which return the skeleton and the erasure of a well annotated term.
De nition 2 (skeleton) the function skel:wats ! P(wats) is de ned by, 1. skel(x) = fxg for all variables x; 2. skel(f(t1; :::; tn)) = ff(s1; :::; sn)j8i:si 2 skel(ti)g where f 6= wf ; 3. skel(wf (f(t1; :::; tn))) = fsj9i:ti = wh(t0i) ^ s 2 skel(t0i)g.
De nition 3 (erasure) the function erase:wats ! unats is de ned by,
1. erase(x) = x for all variables x;
2. erase(f(t1; :::; tn)) = f(s1; :::; sn) where f 6= wf and si = erase(ti);

2

3. erase(wf (f(t1; :::; tn))) = f(s1; :::; sn) where if ti = wh(t0i) then si = erase(t0i) else si = erase(ti). Proofs constructed in this annotated meta-theory are translated into proofs in the original theory by erasing annotations using erase. Unfortunately this simple idea of rippling as rst-order rewriting is not adequate. To show why, we de ne four properties desired of rippling.
well-formedness: rippling produces only well annotated terms (wats); skeleton preservation: rippling preserves the skeleton of the term being rewritten; correctness: rippling produces terms whose erasures are equal in the underlying equational theory; termination: rippling terminates.
Unfortunately, it is not possible to achieve these aims by direct rst-order rewriting. Consider a wave-rule formed for the recursive de nition of multiplication,
s(x) y ) y + x y :
If we implement rippling with rst-order rewriting this rule generates terms which are not well annotated. For example, s(a) s(b) is a wat but rewrites to s(b) + a s(b) which is not a wat since the rst argument of plus contains a wave-front (a box) directly inside another without an intermediate wave-hole.
Termination also fails using rst-order rewriting. Consider, for example, the equation, h(f(x; s(y))) = s(h(f(s(x); y))). This is a wave-rule in the forward direction (see 2]) annotated as
h( f(x; s(y)) ) ) s(h( f(s(x); y) )) :
This rule should not lead to non-termination; the rough intuition is that the skeleton of both terms is h(y) and the wave-rule transforms a wave-front on the left-hand side that is two nested function symbols deep to one on the right-hand side at the same position that is only one function symbol deep and another wave-front at a higher position in the skeleton. This equation also constitutes a wave-rule in the reverse direction with di erent annotation.
s(h( f(s(x); y) )) ) h( f(x; s(y)) )
Again this rule should not lead to non-termination; the intuition here is that the outermost wave-front is rippled \o the top" and disappears. However, these wave-rules together lead to cycling, as the following derivation illustrates:
h( f(a; s(a)) ) 7! s(h( f(s(a); a) )) 7! h( f(a; s(a)) ) 7! : : : :
Note that unlike the multiplication example, all the terms involved in this derivation are well annotated and share the same skeleton. With two equations, we can also construct looping derivations.
The problems of improperly annotated terms and non-termination arise when an annotated term t replaces an unannotated term in a wave-front. We therefore de ne a calculus for rippling based on a new notion of term replacement for annotated terms that erases annotation where appropriate; in this case, it erases the annotations on t. This new notion of term replacement naturally gives a new notion of substitution, and thus matching. By means of these simple modi cations, we get a calculus for rewriting annotated terms which is guaranteed to preserve well-formedness of annotation, skeletons, and correctness wrt the underlying theory. Moreover, for unannotated terms and rewrite rules, this calculus performs conventional rewriting.
3

3 A Calculus for Rippling

We begin with ground rewriting and extend to rst-order rewriting in a straightforward way. We distinguish between two kinds of variables: those in rewrite rules and those in terms. The later kind, \term variables" will be treated as constants here.1 Hence we shall always consider the rewritten term as ground and by non-ground rewriting we mean equations between terms that may contain (non-term) variables.
We de ne a new function for subterm replacement s l] 7! s r] which is identical to usual subterm
replacement except if l occurs solely within a wave-front, the annotations on r are erased. For example, replacing a in f(a; b) by g(a) gives f(g(a); b) , but replacing b by g(b) gives f(a; g(b) ) . We will

perform all term replacement in substitution, and rewriting using this function. We will also restrict rewriting by only using proper equations which preserve skeletons.

De
and

nition 4 (proper equation)
erase(l) =T erase(r).

l

=T

r

is

a

proper

equation

i

l and r are wats, skel(l) = skel(r)

All the results given in this paper go through if we weaken the de nition of proper equation to skel(l)

skel(r) except rippling preserves now only a subset of the skeletons. We de ne ground annotated rewriting

as rewriting using proper equations
between ground wats then s l] 7!G s

between ground terms. If s is a wat and l r] denotes the ground annotated rewriting

=T of a

r a proper equation subterm l of s.

We now show that ground annotated rewriting preserves the well-formedness of annotated terms,

skeletons and erasure wrt the theory.

Theorem 1 if s is a wat, l =T r a proper equation and s l] 7!G s r], then

1. s r] is a wat,

2. skel(s l]) = skel(s r]),

3. erase(s l]) =T erase(s r]).

Proof: By structural induction on the wat s.

Case 1. s is a (term) variable. The three properties hold trivially.

Case trivially.

2. s On

= wf (f(s1; :::sn)). Now l the other hand, suppose

is a l is

subterm of s. a subterm of

If it some

is s si.

itself then Either si

the three = wh(ti)

properties hold
or si 6= wh(ti).

In the rst case, l is a subterm of the wat ti as l is a wat and cannot itself be headed by wh. By the

induction hypothesis, ti r] is a wat. Thus, s r] is a wat. Also, by the induction hypothesis skel(ti l]) =

skel(ti r]). As all other subterms wh(sj) are unchanged, the union of these skeletons is unchanged. Hence

skel(s l]) = skel(s r]). Finally, by the induction hypothesis, erase(ti l]) =T erase(ti r]). Again, as all

the other subterms are unchanged, their erasures stay
second case, si 6= wh(ti). From the de niton of wat,

the same. Thus, erase(s l]) si must be an unannotated

=T erase(s r]). In term. Thus, when

the we

substitute r for l we will erase annotations on r. Hence, si r] is unannotated, and s r] is a wat. By the

de nition of skeleton, skel(s l]) = skel(s) = skel(s r]). Since si is unannotated and l =T r is a proper

equation, erase(si l]) =T erase(si r]). Hence, erase(s l]) = erase(s r]).

Case then the

3. Suppose s = three properties

f(s1; :::sn) and trivially hold.

f is not wh or wf . On the other hand,

Now l is suppose

a l

subterm of s. If it is is a subterm of some

s itself si, i.e.,

si l]. By the induction hypothesis, si r] is a wat. Hence s r] is a wat. By the induction hypothesis,

skel(si l]) = skel(si r]). As skel(sj) = skel(sj), we have by the de nition of the skeleton function that

skel(s l]) = skel(s r]). By the induction hypothesis, erase(si l]) =T erase(si r]). As the other sj have

the same erasures, by the de By induction on number

nition of erase, erase(s of rewrite steps, the re

l]) =T erase(s j]). 2
exive transitive closure

of

7!G

also

preserves

well-

formedness, skeletons and erasure wrt the theory.

1E.g., See 6] Section II.

4

4 Annotated Matching

We now consider rewriting with variables. Since substitution depends on subterm replacement, our new de nition of subterm replacement gives rise to a new kind of substitution; in particular, during substitution terms replacing variables in wave-fronts are erased of annotation. For example, applying

= fx= s(a) g to t = f(x; x) gives f(s(a); s(a) ) : We say that is a well-annotated substitution

(was) i for every xi=ti 2 , ti is a wat. Unlike regular substitution, this new substitution function
preserves well-formedness, skeletons and erasure.

Theorem 2 if t is a wat and a was then

1. (t) is a wat,
2. skel( (t)) = (skel( ))(skel(t)), 3. erase( (t)) = (erase( ))(erase(t)).

Proof: By structural induction on the wat t.

Case 1. t is a (term) variable x. The three properties trivially hold.

Case 2. Suppose t = wf (f(t1; :::tn)). ing the induction hypothesis and the fact

Either that si

ti is

= a

wh wat

,(si)(soi)r

ti 6=
must

wh(si). also be

In the a wat.

rst case, usIn the second

case, ti must be unannotated. As unannotated terms are a subset of wats, calling upon the induction

hypothesis, substitution,

(t(it))

is is

a a

wat . wat .

TBhyutsh, eerdaesen(tio(tni)o)fisskuenleatnonno, tsakteedl(.

duction hypothesis this is fsjs 2 (skel( ))(skel(si))g: But this

Hence, by
(t)) = fsjs
is equal to

the de nition of
2(sksekle(l())((sfis)j)sg.2

annotated By the in-
skel(si)g)

which itself equals (skel( ))(skel(t)). Hence, skel( (t)) = (skel( ))(skel(t)). To prove the third prop-

erty, we perform a case split on whether ti = wh(si) or ti 6= wh(si). In the rst case, by the induc-

tion hypothesis, erase( (si)) = (erase( ))(erase(si)). In the second case, ti is unannotated and, by

the induction hypothesis, erase( (ti)) = (erase( ))(erase(ti)). By structural induction over unats,

erase(erase( (ti))) = erase( (ti)). Thus, by the de nition of erasure and annotated substitution,

erase( (t)) = (erase( ))(erase(t)).

fhh=Bt2iyy(oys(ppnskCtookhoettaefelhhs(lseee(iunss(3iibdt)ss.s1),.ut()SciBs)tut;(kuiypt:oe:tip:nl)itso(ohkathnse)reey,)eld.pt(thweoB=ita(synhttifnsietst.)s(hi()tioeTse)1n.r;dtha:heou:Ts:ifstsehnns(ei)iustq(bai)tuoe))snan(qtdifilustso(fuaafefltlersi(issroa(oafensnsar(e,ou(a(twtsrtshe1kwaei,)ets(h;el.:(rio:)sBa:)re)s((yrw)seea(ktr(fsshfae.keels(e(N(etdl((n(oe)tttw)1)11)()n)))f);).i;;t:((::Hi:st::o:)k::en(((e=enstlorkcn(affete)1,ssl)()(ke)e;=(er(:l)at:e):1f)sst())e(oks(;e(nkee:r:rl,e:a((alstts(s(kn)tete)ne)(n()l=)t))()n().f)t(.)(1eH)bB)r)ye)(.ay;nts1B:tct:eh):hey(;ee,e:r:ts)a:iihknn)se(edd(eetluud(rn(ccea)tt(s)(iit)nteoon=)(inn))-t))))..

To perform rewriting, we need a notion of annotated matching corresponding to this new notion of

annotated substitution.

De nition 5 (annotated match) if s and t are wats, then is an annotated match of s with t i
is a was and (s) = t.

Observe that even if we restrict to variables in s annotated matching is not unitary. For example,
fx=s(0)g and fx= s(0) g are both annotated matches of f(x; 0) with f(s(0); 0) . Matches di er only in
the amount of annotation which appear on substitutions for variables the occur in wave-fronts but not in skeletons. We can, however, de ne a notion of minimality of annotation so that annotated matching is unique. In the following, annotations(s) is the set of addresses of waveholes in the wat s.

De
with

nition 6 (minimality)
erase(t) = erase(s) and

aifnn1otaantidons2(at)re

waansntohteantio1ns(s).2

i

for all x=t 2

1 there exists x=s 2

2

5

De nition 7 (minimal match) if s and t are wats, then is a minimal match of s with t i Dom( ) = vars(s), is an annotated match of s with t and there does not exists any annotated match 0 6= with
0.
Theorem 3 (uniqueness) if is a minimal match of s with t then is unique. uvsisPnukan2rberatolsdsht(ot(.iesissft1a:)Tus)gkth=rei=BeouleenysDt.s,oskcone1oeLmr.nl=ea(t(tsAsr2eass2x)(d2).s=.i1cs1aB)t12niiuo=dsW2ntm.eeth1riLnn1aiseoi6=smtwaemn(asdgel12l2aiyv)naxt.enash=ndAseatrn2hsecosao22tutmmambtsupeee1sd2ltedx,=twibesoe1hseac2ercnma.reudtenurHtsslcseteom1ainrntsirch6=tneeteichomrtxesenaf2aeosc.lnrkavmneenaBolabretoyitteaancotbhntaleylhendeseooufmxocwnsfcaiae.unstltrcl.BhwvifiynSaointirrghmwtmsh(epitesell.radl)orwnfSclooeyaienrns,vdmscesuwef2eorrdhefoDm.nincaoeuthTnmsssbnth(uoea1bttg1eaiaa)dntniaeeon=dndat,
is to rename apart variables in the wavefront from their occurrences in the skeleton and to combine the substitutions at the end of regular matching provided the renamed vars have the appropriate erasure. To do this, we de ne two new functions, convert and combine.
De nition 8 (convert)
1. convert(x) = x for all variables x;
2. convert(f(t1; :::; tn)) = f(convert(t1); :::convert(tn)) where f 6= wf ;
3. csoi n=venretw(w-vfa(rfs((tt1i;):.::; ti))) = wf (f(s1; :::sn)) where if ti = wh(t0i) then si = wh(convert(t0i)) otherwise The function new-vars takes a term and replaces all variables in it by fresh ones which are guaranteed to be unique from all other variables. Di erent occurrences of the same variable are replaced by the same variable. If the set of variable renamings performed is given by and we have a substitution returned from ordinary matching (using the renamed term) then we can combine these into a single substitution composed of two parts: skel contains the substitutions for variables in the skeleton for the annotated match, whilst wf contains the (unannotated) substitutions for the variables that occur just in wavefront.
De nition 9 (combine) combine( ; ) = skel wf where, skel = fx=s j x=s 2 ^ (y=x 2 ! y=erase(s) 2 )g wf = fx=s j s is an unat ^ x 62 Dom( ) ^ y=x 2 ^ y=s 2 g
To perform annotated matching, we rename variables in the wavefront using convert, perform regular matching and then combine the resulting substitution with the renamings using the function combine. We de ne this process with the (partial) function amatch.
De nition 10 (amatch) amatch(s; t) = if r = convert(s), (r) = s, (r) = t, = combine( ; ),
and Dom( ) = vars(s). Note that the annotated match can fail because Dom( ) vars(s) indicating that the substitutions for renamed variables were incompatible. In such a situation, annotated matching fails.
Theorem 4 (correctness and completeness) if s and t are wats then amatch(s; t) = i (s) = t
and is a minimal match.
Proof: ()) Since amatch(s; t) = , we have r = convert(s), (r) = s, (r) = t, = combine( ; ),
and Dom( ) = vars(s). Now is a was by construction. Consider (s) and (r). By construction, these terms are identical except where variables occur in s. Consider an occurrence of a variable in the
6

skeleton of s. By the construction of , the same annotated substitution from skel is applied to both.

Consider an occurrence of a variable in the wavefront of s that does not appear in the skeleton. By the

construction of an occurrence of

, a

tvhaerisaabmleeinuntahnenwoatvaetefrdonsut bosftsituthtiaotnaflrsoomappwefariss

also applied to in the skeleton.

both. Finally, consider By the construction of

, the same But (r) =

unannotated substitution from t. Hence (s) = t. In addition,

skel is also applied by construction,

to is

both. Thus (s) a minimal match

is identical to (r). for variables which

appear just in the wavefront.

(() ^ y=s

Let
2

(s) = t. Let
g. Consider,

r = convert(s), (r) and (s). By

(r) = s, and = construction, these

wf where wf = fx=erase(s) j x=y 2
terms are identical except where variables

occur in s. Consider an occurrence of a variable in the skeleton of s. By the construction of , the same

annotated substitution from is applied to both. Consider an occurrence of a variable in the wavefront

of s. (r)

By and

the construction of (s) are identical.

wf , the Also, by

same unannotated substitution from is also applied construction, since is a minimal match then =

to both. Thus combine( ; ).

Trivially, Dom( ) = vars(s). Hence amatch(s; t) = . 2

Annotated matching can be performed, like regular matching, in linear time.

Theorem 5 (complexity) annotated matching can be performed in O(jtj) time where jtj is the size of
the term being matched against.

Proof: Consider the annotated match of s with t. We will assume that annotated terms are represented by dags. First we rename the variables in the wavefront of s. This takes O(jsj) time. At the position
of each renaming, we add a new type of arc (called erase) linking the renamed variable with its original name. This arc represents the constraint on the erasure of substitution. In addition, it also ags that this is a renamed variables. (If a variable occurs only in the wavefront and not in the skeleton then we do not need to rename it). Next, we compare s with t from the root of both dags to the leaves of the
pattern. This takes O(jsj) time. Finally, we check that the substitutions which must be performed at
the leaves for variables in wavefronts have unannotated substitutions and have an appropriate erasure. These tests can be performed together. We explore down t from the position where a renamed variable occurred in the pattern checking that no annotations occur. At the same time, by following the erase arc, we can explore down the skeleton of t skipping over wavefronts to ensure that we have the same
erasure. At worst, this exploration will take O(jtj) time since we are bounded by the size of t. Combining the three steps, we see that annotated matching can be performed in O(jsj)+O(jtj) time. However, since there cannot be an annotated match for s with t unless jsj jtj, this can be simpli ed to O(jtj). 2

5 First-Order Rippling

We can now show that rippling with proper equations is correct and specify su cient conditions for

termination. We do this by lifting the results of ground annotated rewriting to the rst-order case.

The previous de nition of proper equation carries over without change. We use it to de ne non-ground

rewriting. s (r)] to

If s is a indicate

wat and l =T the annotated

r a proper equation with rewriting of a subterm of

V s

ars(r) V ars(l), then we write with which l annotated matches

s (l)] giving

7!
.

Correctness parallels the ground case. The proof relies on the fact that is a was and we can thus reduce

the problem to the correctness of ground-rewriting.

Theorem 6 if s is a wat, l =T r a proper equation, and s (l)] 7! s (r)], then

1. s (r)] is a wat, 2. skel(s (l)]) = skel(s (r)]), 3. erase(s (l)]) =T erase(s (r)]).

7

Proof: Annotated matching guarantees that is a was. By Theorem 2, (l) and (r) are wats with

the same skeleton and erasures. Now, as (l) is syntactical identical to a subterm of s it is ground (recall

discussion about treating \term variables" as constants). Furthermore (r) is also ground as to be a

rewrite rule we require V ars(r) V ars(l). Hence the rewriting of s (l)] 7! s (r)] is equivalent to that

performed by the ground rewrite rule three properties are maintained for any

(l) .

! (r) which is proper as l =T
Thus, by Theorem 1, the three

r and Theorem properties hold.

2 tells
2

us

the

Let 7! be the re exive transitive closure of 7!. By induction on number of rewrite steps, it follows

from Theorem 6 that annotated rewriting is correct. That is, if we erase all annotations, we can perform

the same (object-level) rewriting. Annotations merely guide rewriting in a skeleton preserving way.

Theorem 7 (correctness) if s is a wat and s 7! t then

1. t is a wat, 2. skel(s) = skel(t), 3. erase(s) =T erase(t).

6 Termination

We can now turn towards questions of termination. A simple way to ensure termination of ground annotated rewriting is to rewrite only with wave rules which are measure decreasing under some well founded order which is monotonic with respect to wats.

De nition 11 (monotonicity wrt wats) an order > is monotonic wrt wats i for all wats l and r such that l > r, s l] 7!G s r] implies s l] > s r].

Note that this is weaker than the usual de nition of monotonicity since we do not consider all possible subterms of s, only those that are wats. The orders in 2, 3], for example, are monotonic wrt wats.

Theorem 8 (ground termination) for a well founded order > monotonic wrt wats, ground annotated rewriting using rewrite rules l ) r for which l > r is terminating.

Pwhroicohf:conAtnraidnictnsitteherewwerliltefosuenqdueednnceests1o)f >t.2

) 2

:::

gives

rise

to

an

in

nite

sequence

of

terms

t1

>

t2

>

Note that the preservation of skeletons is important for termination since proposed termination orders

for rippling (eg. those in 2, 3]) depend upon the skeleton remaining constant (or bounded in size).

Finally we lift our requirements on termination to non-ground rewriting. To do this, we need a

restricted form of stability.

De nition 12 (stable wrt wats) an order > is stable wrt wats i for all wats s, t and any was ,
s > t implies (s) > (t).

The orders in 2, 3] based on the width (but not size) of the wavefronts are stable wrt wats. It follows from our nal theorem that rippling with the wave-rules given there is terminating.

Theorem 9 (termination) for a well founded-order > monotonic and stable wrt wats, annotated re-
writing using proper rewrite rules l =T r for which l > r is terminating.

Proof: We again reduce the problem to the ground case. If s 7! t using l =T r then there is a ground
instance (l) =T (r) and as > is stable wrt wats, (l) > (r). By the termination of ground annotated rewriting, we have termination in the general case. 2

8

7 Conclusions and Related Work
The implementation of rippling in CLAM uses rst-order rewriting restricted by some precondition checking. It is considerably more restricted than what we propose here, yet leads to ill-formed annotation and potentially non-terminating deduction. The INKA system 8] uses a formalized calculus for rippling but it is considerably more complex and specialized. In addition, the termination of rippling has not been considered within this framework.
Our results show that conventional term rewriting systems can be used to perform rippling via a simple modi cation to the routines for subterm replacement and matching. Moreover, the same routines can be used for annotated and conventional unannotated term rewriting. We have implemented this calculus and we will describe some applications. Many possible directions can now be explored: for example, rippling in an implicit induction setting, Knuth-Bendix completion of annotated terms, simpli cation of skeletons and wave-fronts using term rewriting. We speculate that such combinations will o er the best of both worlds, the exibility and uniformity of conventional rewriting procedures combined with the highly goal-directed nature of rippling.
References
1] D. Basin and T. Walsh. Di erence uni cation. In Proceedings of the 13th IJCAI, pages 116{122, 1993. 2] D. Basin and T. Walsh. Termination Orderings for Rippling. To appear in A. Bundy, editor, Pro-
ceedings of CADE-12, 1994. 3] A. Bundy, A. Stevens, F. van Harmelen, A. Ireland, and A. Smaill. Rippling: A heuristic for guiding
inductive proofs. Arti cial Intelligence, 62:185{253, 1993. 4] A. Bundy, F. van Harmelen, C. Horn, and A. Smaill. The Oyster-Clam system. In M.E. Stickel,
editor, Proceedings of CADE-10, Springer-Verlag, 1990. 5] A. Bundy, F. van Harmelen, A. Smaill, and A. Ireland. Extensions to the rippling-out tactic for guiding
inductive proofs. In M.E. Stickel, editor, Proceedings of CADE-10, pages 132{146. Springer-Verlag, 1990. 6] N. Dershowitz. Termination of rewriting. In J.-P. Jouannaud, editor, Rewriting Techniques and Applications, pages 69{116. Academic Press, 1987. 7] N. Dershowitz and J.-P. Jouannaud. Rewrite systems. In J. van Leeuwen, editor, Handbook of Theoretical Computer Science, volume B. North-Holland, 1990. 8] D. Hutter. Guiding inductive proofs. In M.E. Stickel, editor, Proceedings of CADE-10, pages 147{161. Springer-Verlag, 1990. 9] T. Walsh, A. Nunes, and A. Bundy. The use of proof plans to sum series. In D. Kapur, editor, Proceedings of CADE-11, pages 325{339. Springer Verlag, 1992.
9

