Theoretical Computer Science 43 (1986) 189-200 North-Holland

189

COMPLETE SETS OF UNIFIERS AND MATCHERS IN EQUATIONAL THEORIES *
Franfois FAGES and Grrard HUET
CNRS (LITP), INRIA (Rocquencourt), 78153 Le Chesnay Cedex, France
Communicated by M. Nivat Received October 1985
Abstract. We propose an abstract framework to present unification and matching prob,lems. We argue about the necessity of a somewhat complicated definition of a basis of unifiers. In particular, we prove the nonexistence of complete sets of minimal unifiers (and matehers) in some equational theories, even regular.
1. Equational theories
We assume to be well known the concept of an algebra A = (A, F) with A a set of elements (the carder of A) and F a family of operators given with their arities. More generally, we may consider heterogeneous algebras over some set of sorts, but all the notions considered here carry over to sorted algebras without difficulty and so we will forget sorts and even arities for simplicity of notation. With this provision, all our definitions are consistent with [22].
We denote by T(F) the set of (ground) terms over F. We assume that there is at
least one constant (operator of arity 0) in F so that this set is not empty. We also assume the existence of a denumerable set of variables V, disjoint from F, and
denote by T(F, V) the set of terms with variables over F and V. When F and V are clear from the context, we abbreviate T(F, V) as T and T(F) as G (for ground). We denote terms l~y M, N , . . . , and write V(M) for the set of variables appearing
in M. We denote by T (respectively G) the algebra with carrier T(respectively G) and
with operators the term constructors corresponding to each operator of F
The substitutions are all mappings from V to T, extended to T, as endomorphisms
of T. We denote by S the set of all substitutions. If or~ S and M e T, we denote by trM the application of cr to M. Since we are only interested in substitutions for their effect on terms, we shall generally assume that o'x =x, except on a finite set
of variables D(cr) which we call the domain of tr by abuse of notation. Such substitutions can then be represented by the finite set of pairs {x ~ crxlx ~ D(tr)}.
* A preliminary version of this paper was presented in March 1983 at CAAP'83.
0304-3975/86/$3.50 Â© 1986, Elsevier Science Publishers B.V. (North-Holland)

190 E Fages, G. Huet
The empty substitution (identity) is denoted by Id. We define the set I(cr) of variables introduced by tr as
I(cr)= U V(o-x).
xeD(o')
We say that o- is ground iff I(o') = 0. The composition of substitutions is the usual composition of mappings: (o- o p)x = cr(px). And we say that o" is more general than p- o- <~p iff =1rl 77o o- = p, so Id is the smallest element (most general substitution).
An equation is a pair of terms M = N. Let E be a set of equations (axioms), we define the equational theorypresented by E as the finest congruence over T containing all pairs o'M = o'N for M = N in E and o" in S. It is denoted by = ~. An equational theory presented by E is axiomatic iff E is finite or recursive.
An algebra A is a model of an equation M = N if and only if pM = vN as elements of A for every assignment 1, (i.e., mapping from V to A extended as a morphism from T to A). We write A ~ M = N. A is a model of an equational theory E iff A ~ e for every e in E. We denote by .,g(E) the class of models of E, which we call the variety defined by E.
E-equality in T is extended to substitutions by extensionality:
cr =EP iff V x e Vo'x =~px.
We write, for any set of variables IV, o" = ~w p iff VxE Wo'x =Epx.
In the same way, cr is more general than p in E over IV, o'~<~Vp iff 3~7~7ocr ._q~W p.
The corresponding equivalence relation on substitutions is denoted by - ~ v i.e., o- -= ~v p iff o- <~~v P and p ~<~' or. We shall omit W when W = V and E when E = 0.
2. E-unification
2.1. Historical preliminaries
Let E be an equational theory. A substitution o- is an E-unifier of terms M and N if and only if o'M = ~ oN.
We denote by UE the set of all E-unifiers of M and N :
U~z(M, N ) = {(re S[ o'M =~ crN}.
The unification problem in E is the problem to decide whether, for any terms M and N, Up.(M, N) is empty or not.
Hilbert's tenth problem (solving of polynomial equations over integers, called Diophantine equations) is the unification problem in arithmetic. Livesey, Siekmann, Szabo and Unvericht [33] have proved that associative-distributive unification is undecidable and thus, that the undecidability of Hilbert's tenth problem [7, 36] does not rely on a specific property of integers.

Complete sets of unifiers and marchers

191

Axiomatic equational theories are semidecidable (e.g., by enumerating all possible proofs of equality of two terms), so UE is always recursively enumerable (e.g., by enumerating all substitutions and checking in parallel whether they are unifiers or not), but, of course, we are mostly interested in a generating set of the E-unifiers (called 'Complete Set of E-Unifiers' in [39] and denoted by CSU~), from which we can generate U~ by instantiations since o-M = E o - N ~ V , ( , o cr)M = E ( , o cr)N. Or better, by a basis of UE (called 'Complete Set of Minimal Unifiers' and denoted by #CSUe) satisfying the minimality conditions 0"4 ~ ' ~ c r ~ v or', where V= V(M) u V(N).
Hence, we shall make the difference between unification procedures, which enu-
merate a CSUe (the exhaustive enumeration procedure in semidecidable theories
enumerates Ue completely), unification algorithms, which always terminate with a finite CSUe, empty if terms are not unifiable, and minimal unification procedures
or algorithms which compute a #CSUe. Unification was first studied in first-order languages (the case E = ~J) by Herbrand
in [ 16]. In his thesis, he gave an explicit algorithm to compute a most general unifier. However, the notation of unification really grew out of the work of the researchers in automatic theorem-proving since the unification algorithm is the basic mechanism needed to explain the mutual interaction of inference rules. Robinson [41] gave the algorithm in connection with the resolution rule and proved that it indeed-computes a most general unifier, that is, a ~CSU~ equal to a singleton whose existence is a fundamental property of first-order languages. Independently, Guard [15] presented unification in various systems of logic. Unification is also central in the treatment of equality [29, 42]. Implementation and complexity analysis of unification is discussed in [1, 20, 25, 37, 50, 53] and Paterson and Wegman give a linear algorithm to compute a most general unifier.
First order unification was extended to infinite (regular) trees by Huet [20], who showed that a single most general unifier exists for this class, computable by an almost linear algorithm. This problem is relevant to the implementation of PROLOGlike programming languages [4, 5, 6, 9].
In the context of higher-order logic, the problem of unification was studied by Gould [14], who defined 'general matching sets' of terms, a weaker notion than that of CSU. The existence of unifier is shown to be undecidable in third-order languages in [18], and in second-order in [13]. The general theory of CSU's and pCSU's in the context of higher order logic is studied in [20, 24].
Unification in equational theories was first studied by Plotkin [39] in the context of resolution theorem provers to build up the underlying equational theory into the rules of inference. In this paper, Plotkin conjectured that there existed an equational theory E where a/zCSU~ did not always exist. Theorem 2.1 in the next section proves this conjecture.
Further interest in unification in equational theories arose from the problem of implementing programming languages with 'call by patterns', such as QA4 [43]. Associative unification (finding solutions to word equations) is a particularly hard

192 F. Fages, G. Huet
problem. Plotkin [39] gives a procedure to enumerate a/zCSUA (possibly infinite), and Makanin [34] shows that the word equation problem is decidable. Stickel [47, 49] and, independently, Livesey and Siekmann [32, 33] give an algorithm for unification in the presence of associative-commutative operators, the termination of which has been proved in the general case by Fages [9, 10]. This result of termination has been generalized recently to the combination of unification algorithms for theories with disjoint sets of symbols by Kirchner [28], Tiden [51] and Yellick [52]. Siekmann [44] studied the general problem in his Ph.D. Thesis, especially the extension of the AC-unification algorithm to idempotence and identity. Lankford [30, 31] gave the extension to a unification procedure in Abelian group theory, for which Tiden [51] recently got a proof of termination.
The complexity of AC-unification is unknown. The complexity of AC-matching (i.e., finding one substitution o" such that crM =AcN) has been shown to be NP-complete by Chandra and Kannelakis (unpublished) and independently by Kapur et al. [26]. The complexity of AC-equivalence is linear.
In the class of equational theories for which there exists a canonical term rewriting system (see [22]), Fay [12] gives a universal procedure to enumerate a CSUe. It is based on the notion of 'narrowing' as defined in [46]. HuUot [23] gives a similar procedure and a sufficient termination criterion, further generalized in [25]. Sickmann and Szabo [33] investigate the domain of regular canonical term rewriting systems in order to find general minimal unification procedures, but we shall show here that even in this framework/zCSUe may not exist (Theorem 4.2).
Termination or minimality of unification procedures is much harder to obtain than completeness. However, the main applications of unification in equational theories to the generalizations of the Knuth and Bendix algorithm, such as in [ 17, 38], are covered by the associative-commutative unification algorithm.
2.2. Definitions
Let M, N ~ T, V= V ( M ) u V(N), and W be a finite set of 'protected variables' not appearing in M or N, W n V = ~. S is a complete set of E-unifiers of M and N away from W if and only if
(a) VtrsSD(tr)___ V and I(tr)c~(WuD(tr))=~) (purity), (b) S ~ Un(M, N) (correctness), (c) V p ~ Uâ¢(M, N) 3cr~_Str~vp (completeness).
Furthermore, S is a complete set of minimal E-unifiers of M and N away from W if, additionally,
(d) Vtr, tr'~ S cr ~ c r ' ~ t r ~ v tr' (minimality).
The reason to consider W nonempty is that in equational theories in general some unifiers must introduce new variables and in many algorithms, unification is performed on subterms, so it is necessary to separate the variables introduced by unification from the variables of the context not appearing in M and N. This is the

Complete sets of unifiers and marchers

193

case, for instance, for resolution in equational theories [39] and for the generalization of the Knuth-Bendix completion procedure in congruence classes of terms [38]. If W was not taken disjoint from V, then the variables in common should be renamed by the unifiers, e.g., with W = V = {x, y}, the substitution {x ~-z, y ~ z} is a unifier of x and y which satisfies condition (a), but {x ~ y} or {y ~ x} are not. By taking Wc~ V=~, variable renaming is not necessary. The condition D(cr)c~ l(cr)=O is equivalent to idempotence: cr o ~r = o- and can always be satisfied by a unifier [8]; therefore, it is easy to show that there always exists a C S U n away from W, by taking all E-unifiers satisfying (a).
However, we cannot put idempotence into the general definition of substitutions since, in order to compare two unifiers cr and p with the preorder <~, we may have to consider a nonidempotent substitution ~,. For example, with cr={x*-f(y)}, p = {x ~ f ( f ( y ) ) } , and V = {x}, we have cr <~v P by considering ~ = {y ~ f ( y ) } . Moreover, the composition ofidempotent substitutions is not necessarily idempotent.
Less strong than minimality we could add instead to the definition of CSU~"
(d') Vo-, o-' ~ S cr ~ c r ' ~ c r ~ v cr' (noncongruency).
Such CSU E always exist but we lose the property that if UE is recursively enumerable, then there exists a recursively enumerable one. For example, in undecidable axiomatic equational theories, U~ is recursively enumerable but in general the CSU~ satisfying (d') are not.

2.3. Existence of basis of E-unifiers
It is well known that there may not exist a finite CSUE. For instance, a*x = x*a in the theory where * is associative [39]. When there exists a finite CSUE, there always exists a minimal one, by filtering out redundant elements. But it is not true in general, as is shown in the following theorem.
Theorem 2.1 (nonexistence of basis). In some first-order equational theory E there exist E-unifiable terms for which there is no IzCSU~.

Proof. Let E be the equational theory defined by the function symbols 0, f, and g of arity 0, 2, and 1 and the two axioms
f(O,x)=x, g(f(x, Y)) = g(Y).
Let M = g(x) and N = g(0). We show that there does not exist a gCSUE of M and N.
For the proof, we assume well-known the formalism of canonical term rewriting systems [22], i.e., simplification rules with finite and unique termination. It is easy to check that the system
~f(O,x)-~ x, R=[g(f(x,y))~g(y)

194 F. Fages, (3. Huet
is a canonical term rewriting system for E. We denote by -~ one step of reduction by R, as usual, by ->" a derivation of n reduction steps, and by ~,[M] the normal form of term M in system R. We have M =E N iff ~[M] = ~[N]. The set of normal terms defines a model of E in the usual way. Let
0.0 = {x <--0}, 0.1= {x <"f(xl, 0)},
0"2= {x ~ f ( x 2 , f ( x , , 0 ) ) } , . . . , 0", = {x ~ f ( x , , (ri_,x)},...
and let S={0.ili--->0}, V={x}, W=0. First we prove that S in a CSUn of M and N away from W. (1) Purity: Vi i> 0 D(o-i) -' {x} and I(0.i) n {x} = 0. (2) Correctness: Vi~>0 o-ig(x) = g ( f ( x , f ( x ~ _ ~ , . . . ,f(x~, 0 ) . . . ) ) ) -->~g(0), so
0"iM =E N. (3) Completeness: Let 0"~ UE(M, N ) and A = ~[o-x], we have g(A) =~g(O). We
show the completeness of S by proving =li ~>0 0"ix ~<A b y structural induction on A. â¢ If A is a variable or a constant, then g(A) is irreducible, so g(A) =E g(O) only
if A = 0. We take i = 0. â¢ If A = g(A'), then g(A)= g(g(A')) is also in R-normal form, so this case does
not arise since the (unique) normal form is g(0).
â¢ If A =f(A', A"), then g(A)-> g(A"), so g(A")=eg(O). By structural induction,
we get a j such that o)x <<-A", i.e., :lp ~ S po)x = A" with D(p) c {x], . . . , xj}. We take i = j + 1, we have 0"ix= f ( x , o)x)<-f(A', 0";x) with substitution {x~<-A'}, and we get 0"~x<~f(A', A") with substitution p w {x~*- A'}. Now we show that for i ~>1 0"~< v 0"i_~. For i 1> 1, let pi = {xl * 0}, we have
p~0"~x= f ( 0 , 0"Hx) -->0"~-1x,
hence, 0"~<~~ 0"~-1. Conversely, let us show that 0"i_~~ v 0"~by contradiction. So let us assume that there exist some terms in R-normal form A H , . . . , A~ such that f(A~_t,. . . ,f(A~, 0)...) = Ef(x,.. ., f(x~, 0)...). The only normalization that may occur on the left member is the collapsing of the A~'s identical to 0, with the rule f ( 0 , x) -> x, leading to a normal f o r m f ( B ~ , . . . ,f(Bk, 0 ) . . . ) with k < / , hence, distinct from the right member, leading to a contradiction. Now we can conclude the following.
Let R be any CSUE of M and N. Since S is complete, we have Vp ~ R 30"i S0"~ ~<Vp, and since 0"~+~< v 0 " . we get 0"~+1< v p . Since R is complete, we have 3 0"~ R o" ~<v 0.~+~, therefore, we get 0. < v P: R is not minimal. []
However, when a pCSUe exists, it is unique up to ~-v [20].
Theorem 2.2 (unicity of basis). Let M and N be two terms, U~ and LIE be two/~CSUE of M and N. There exists a bijection q~" U1-->U2 such that V0. E U1 0.=-~ ~p(0.).
Proof. Since U2 is complete, for any cr in U1, there exists p in U2 such that p ~ v 0.. We define ~,(0.) as one such substitution p. In the s a m e way, since U~ is complete,

Complete sets of unifiers and marchers

195

V a ' e U2 3 p ' e U1 p' ~<v a'. We define ~ ( a ' ) as one such substitution p'. Therefore, V~reU~/,(~o(a))~<v~p(a)--<Va, so ~/,(~p(a))=a by minimality. We get a~<VÂ¢(a)~-<va, that is, a - - v Â¢ ( t r ) . []

3. E-matching
A substitution a is a E-matcher of M to N iff a M =5 N. We remark that, when M and N have variables in common, matchers are not particular unifiers, for example, variable x is matchable to f ( x ) , although x and f(x) are not unifiable. We define complete sets of (minimal) E-matchers of M to N away from W (denoted by CSMe and/~CSMe) in the same way as for unification, with the only difference that V = V(M), W is a set of variables such that W c~ V(N) = 0, and the purity condition becomes
Vtr ~ S D ( a ) _ V and I ( a ) c~( W~ V ( N ) ) = ~.
When M and N do not share variables (which is the case in practice), we can take V(M) ~ W which insures idempotence of matchers.
With the same proof as for Theorem 2.2 we can state that when a ~CSM~ exists it is unique up to ---EV .
In the proof of Theorem 2.1, the example is in fact a matching problem since N is ground. Therefore, it shows also that there may not exist minimal complete set of E-matchers. One can notice that the situation is quite different from oJ-order languages where minimal complete sets of matchers always exist [20] (and they are finite at order 2), although there may not exist a/~CSU when the order is greater than 3.

4. Regular equational theories
We say that an equational theory E is regular iff for every axiom L = R e E we have V(L)= V(R). This class of theories has been studied by several authors for their interesting properties in unification algorithms design [28, 45].
In regular theories variables cannot disappear. All the terms of a same class of congruence have the same set of variables, and so we may impose in our definition of matchers V ( M ) \ V ( N ) c_ D ( a ) c_ V ( M ) and V ( N ) \ V ( M ) c_ l ( a ) c_ V ( N ) , and W is not necessary.
Even when N is ground, there may be no finite CSMe of M to N (for example, E - {g(f(x, x)) ---g(x)}, M = g(x), N = g(a)), but the next proposition shows that there always exists a/~CSME in this case, more precisely, in a regular theory E, any complete set of different E-matchers of a term M to a ground term N is minimal.
Proposition 4.1. Let E be a regular theory, M and N be terms such that V ( N ) = 0 , Let V = V ( M ) and S be a CSME of M to N. S is minimal i f f V a , a ' ~ S a ~ a ' ~ a ~Va'.

196 F. Fages, G. Huet
Proof. For the nontrivial way, assume S i s not minimal, i.e., 3tr, tr'e S or ~ tr' and 3p par = v tr'. Since E is regular and N is ground, we have I(tr) = I(tr') = ~. Hence, Vx ~ V V(o-x) = ~, so pox = o-x and ax = ~ tr'x, leading to a contradiction. []
Again, however, a/zCSU~ may not exist in a regular theory, for it may still be necessary to introduce new variables to express most general E-unifiers.
Theorem 4.2. In some regular theory E, there exists E-unifiable terms for which there is no/~CSU~.
Proof. Let E be the equational theory defined by the function symbols 0, a, f, g of arity 0, 0, 2, 1, respectively, and R be the canonical term rewriting system:
:f(O, x) x, f(x, O)-, x,
R=, g(f(x,y))-> f(g(x),g(y)), g(0) -> 0, f(f(g(x), y), z)-> f(g(x),f(y, z)).
The proof of canonicity has been checked on the KB system [11], and is left here to the reader's computer. We denote by --> one step of reduction by R, and by ~[M] the R-normal form of term M. First, we state a normal form lemma.
Lemma 4.3. Let P and Q be two terms in R-normal form and different from O. Then we have ~,[f(P, Q)] = f ( P l ,f(P2,f(P,,,, Q) . . .)) for some m >I 1 and terms P1, . . ., P,, in R-normal form. Moreover, P = f ( Pl , . . . , f ( P,,-1, Pro)...).
The proof by structural induction on P is omitted.
Proof of Theorem 4.2 (continued). Let M = g(x) and N =f(y, g(a)), we shall show
that there does not exist a/zCSUE of M and N. Let
tro={X~a,y<-O}, trl={x~f(xl, a),y~g(xt)},
o'2= {x ~ f ( x 2 , f ( x l , a) ), y ~ f(g(x2), g(xl))}, â¢ â¢ â¢,
tr~ = {x ~ f(x~, try_ix), y ~ f ( g ( x , ) , tr~_ly)},.. â¢ and S={tr~[i~O}, V={x,y}, W=~.
First we show that S is a CSU~ of M and N away from W. (1) Purity: Vi~>0 D(tr~) ={x,y} and I(~r~)c~{x,y}=l~. (2) Correctness: Vi~>0 $[triM]=f(g(x~),f(g(x~_~),...,f(g(xl), g(a))...)) by i applications of the third rule of R. In the same way we have $[troN ] = g(a) if i = 0, and if i > 0, we have $[triN] = ~[trJ(y, g(a))] = $[trg(x)] by i - 1 applications of the last rule of R, hence, tr~M --~ o'~N. (3) Completeness: Let t r ~ U n ( M , N ) and A=~[trx], B=~[o3'], we have g(A) = n f ( g ( B ) , g(a)). If B # 0, by Lemma 4.3, we have
$[0-N] = ~[f(B, g(a))]=f(B~,f(B2, . . . ,f(Bm, g(a)) . . .))

Complete sets of unifiers and matchers

197

and
B = f ( B I , f ( B 2 , . . . , f ( B n , _ 1 , B m ) . . . ) ) for some m/> 1.
We show the completeness of S by proving :li t> 0 o-ix ~<A and o-iy <~B by structural induction on A.
Assume A is a variable or a constant. If A # 0, then g(A) is in normal form, otherwise, ~[g(0)] = 0. The only way to match with ~[crN] is therefore A = a and B = 0, and we take i = 0.
If A= g(A'), then g(A)= g(g(A')) is also in R-normal form since there is no redex at top-level, g(A) does not match any form of ~[o-N], so this case does not arise.
Assume A =f(A', A"). ~[o'M] = ,l,[g(f(A'), A")] = ,l,[f(g(a'), g(A"))], a' and A" are different from 0 since A is in normal form, hence, by Lemma 4.3 on P = ~[g(A')] and Q = $[g(A")], we get

,],[o'M]= f(A,,f(A2, . . . ,f(A,,, Q) . . .)) and

P=f(Al,f(A2,...,f(An_l,An)...))

for some nt> 1.

For ~[o'M] = ~[o'N], we have
â¢ m>>-n,
â¢ Vk<~nAk=Bk, â¢ Q=f(Bn+l,f(Bn+2,...,f(Bm,

g ( a ) ) . . . ) ) if m e n, and Q = g ( a ) if m = n. Let

f 0 if m = n,
B"=~Bm if m = n-- 1,
I{.f(B,,+l,f(B,,+2,... ,f(Bm-l, Bin)...))

otherwise.

By Lemma 4.3 we get Q = ,l,[f(B", g ( a ) ) ] , hence, or"= {x <--A", y ,,--B"} is an E-unifier of M and N. By structural induction, :lj t> 0 o-j ~ v o-", i.e., ::lp ~ S p % x = E A" and ,oo'y=EB" with D(p)~{xl,...,xj}. We take i=j+l, we get crix= f(xi, o'jx) ~nf(A', A") and o-iy =f(x~, o~y) ~Ef(g(A'), B") with substitution p w {xi <-.-A'}.
Now we show that, for i ~ 1, o'~ < ~ o-~_1. For i ~> 1, let pi = {x~<--0}, we then have p,o'~x = f ( 0 , o'i_lx) -->o'i_lx, and p~o'iy = f ( g ( 0 ) , o'i_~y) __>2o'i_~y, hence, o-~ <~v O'i--l" Conversely, let us show that o-H ~ ' ~ o-~ by contradiction. So let us assume there exist some terms in R-normal form X~_~,..., X~ such that

f(Xi-1, . . . ,f(X,, a) . . .) =Ef(xi, . . . ,f(x,, a) . . .).
If a term Xj contains the symbol g, then the R-normal form of the left member still contains an occurrence of symbol g since the only rules of R that may apply preserve the number of occurrences of g, hence, we get a contradiction, for the right member does not contain any g. Otherwise, the only normalization that may occur on the left member is the collapsing of the X~'s identical to 0, with the rule f ( 0 , x)--> x, leading to a normal form f(Z1,...f(Zk, a)...) with k</, hence, distinct from the right member, leading to a contradiction. Therefore, we can conclude the following.

198 F. Fages, G. Huet
Let R be any C S U n o f M and N. Since S is complete, we have Vp ~ R 3~r~ S cr~ <~v P and since cri+1 < v cry, we get cri+l < v p. Since R is complete, we have 3 o r s R o" ~<v cri+~, therefore, we get cr < v p: R is not minimal. []
We remark that the example in this proof is not a matching problem, so it does not subsume the example in the proof of Theorem 2.1 and does not prove our conjecture that there may also not exist a/zCSM~ of M to N in a regular theory when N contains variables.
References
[1] L.D. Baxter, The complexity of unification, Ph.D. Thesis, Univ. of Waterloo, Ontario, 1977. [2] L.D. Baxter, The undecidability of the third order dyadic unification problem, Inform. and Control
38 (1978) 170-178. [3] ILM. Burstall, J.S. Collins and RJ. Popplestone, Programming in POP-2 (Edinburgh University
Press, 1971). [4] M. Van Caneghem, L'anatomie de Prolog II, Th~se de doctorat d'dtat, Univ. d'Aix-Marseille, 1984. [5] A. Colmerauer, Prolog II, manuel de rdfdrence et moddle th6orique, Rappt. Int., Groupe d'Intel-
ligence ArtificieUe, Univ. d'Aix-Marseille II, 1982. [6] A. Colmerauer, H. Kanoui and J. Van Caneghem, I~tude et rdalisation d'un syst~me PROLOG,
Rappt. Int., GIA, Univ. d'Aix-Marseille Luminy, 1972. [7] M. Davis, Hilbert's tenth problem is unsolvable, Amer. Math. Monthly 80(3) (1973) 233-269. [8] E. Eder, Abstract properties of substitutions and unifiers, Jr. Symbolic Comput. 1 1985. [9] F. Fages, Formes eanoniques duns les alg/~bres bool6ennes et application /l la d6monstration
automatique en logique de premier ordre, Thdse, Univ. de Paris VI, 1983. [10] F. Fages, Associative-commutative unification, Res. Rept. LITP, Paris; submitted to J. Symbolic
Comput.; previous version as INRIA Rept. No. 287 presented at CADE'7, Lecture Notes in Computer Science 170 (Springer, Berlin, 1984). [11] F. Fages et al., Le syst~me KB: Prdsentation et bibliographic, raise en oeuvre, Res. Rept. No. 368, INRIA France, 1985. [12] M. Fay, First-order unification in an equational theory, 4th Workshop on Automated Deduction, Austin, TX (1979) 161-167. [13] W.D. Goldfarb, The undecidability of the second-order unification problem, Theoret. Comput. Sci. 13 (1981) 225-230. [14] W.E. Gould, A matching procedure for omega order logic, Scient. Rept. 1, AFCRL 66-781, contract AF19 (628)-3250, 1966. [15] J.R. Guard, Automated logic for semi-automated mathematics, Scient. Rept. 1, AFCRL 64-411, Contract AF19 (628)-3250, 1964. [16] J. Herbrand, Recherches sur ia thdone de la ddmonstration, Thdse, Univ. de Paris, 1930, in: Ecrits logiques de Jacques Herbrand (f~UF, Paris, 1968). [17] J. Hsiang, Topics in automated theorem proving and program generation, Ph.D. Thesis, Univ. of Illinois at Urbana-Champaign, 1982. [18] G. Huet, The undecidability of unification in third-order logic, Inform. and Control 22 (1973) 257-267. [19] G. Huet, A unification algorithm for typed A-calculus, Theoret. Comput. Sci. 1(1) (1975) 27-57. [20] G. Huet, Rdsolution d'dquations duns des langages d'ordre 1, 2. . . . , ~o,Th~se d'I~tat, Univ. de Paris VII, 1976. [21] G. Huet, An algorithm to generate the basis of solutions to homogeneous, linear Diophantine equations, Inform. Process. Lett. 7(3) (1978) 1~~. 147.

Complete sets of unifiers and marchers

199

[22] G. Huet and D. Oppen, Equations and rewrite rules: A survey, in: R.V. Book, ed., Formal Languages : Perspectives and Open Problems (Academic Press, New York/London, 1980).
[23] J.M. Hullot, Compilation de formes canoniques dans les theories 6quationnelles, Th~se de 3~me cycle, Univ. de Paris Sud, 1980.
[24] D. Jensen and T. Pietrzykowski, Mechanizing to-order type theory through unification, Theoret. Comput. Sci. 3 (1977) 123-171.
[25] J.P. Jouannaud and C. Kirchner, Incremental construction of unification algorithms in equational theories, Proc. lOth ICALP, 1983.
[26] D. Kaput et al., Complexity of matching problem, Proc. Rewrite Techniques and Applications, Dijon, 1985, Lecture Notes in Computer Science 202 (Springer, Berlin, 1985) 417-429.
[27] H. Kirchner and C. Kirchner, Contribution ~t la r~solution d'~quations dans les alg~bres libres et les varirt~s 6quationnelles d'alg~bres, Th~se de 3~me cycle, Univ. de Nancy, 1982.
[28] C. Kirchner, M~thodes et outils de conception syst~matique d'algorithmes d'unification dans les theories ~quationnelles, Th~se d'rtat, Univ. de Nancy, 1985.
[29] D. Knuth and P. Bendix, Simple word problems in universal algebras, in: J. Leech, ed., Computational Problems in Abstract Algebra (Pergamon Press, Oxford/New York, 1970) 263-297.
[30] D.S. Lankford, A unfication algorithm for Abelian group theory, Rept. MTP-1, Math. Dept., Louisiana Techn. Univ., Ruston, LA, 1979.
[31] D.S. Lankford, G. Butler and B. Brady, Abelian group unification algorithms for elementary terms, Math. Dept., Louisiana Techn. Univ., Ruston LA, 1983.
[32] M. Livesey and J. Siekmann, Unification of bags and sets, Int. Rept. 3/76, Institut fiir Informatik I, Univ. Karlsruhe, 1976.
[33] M. Livesey, J. Siekmann, P. Szabo and E. Unvericht, Unification problems for combinations of associativity, commutativity, distributivity and idempotence axioms, 4th Workshop on Automated Deduction, Austin, TX (1979) 161-167.
[34] G.S. Makanin, The problem of solvability of equations in a free semigroup, Akad. Nauk. SSSI~ TOM 23(2) (1977) 287-290.
[35] A. Martelli and U. Montanari, An efficient unification algorithm, A C M TOPLAS. 4(2) (1982) 258-282.
[36] Y. Matiyasevich, Diophantine representation of recursively enumerable predicates, Pro," 2nd Scandinavian Logic Symposium (North-Holland, Amsterdam, 1970).
[37] M.S. Paterson and M.N. Wegman, Linear unification, J. Comput. System ScL 16 (1978) 158-167. [38] G.E. Peterson and M.E. Stickel, Complete sets of reduction for equational theories with complete
unification algorithms, J. A C M 28(2) (1981) 233-264. [39] G. Plotkin, Building-in equational theories, Machine Intelligence 7 (1972) 73-90. [40] P. Raulefs, J. Siekmann, P. Szabo and E. Unvericht, A short survey on the state of the art in
matching and unification problems, Sigsam Bull 1979 13 (1979). [41] J.A. Robinson, A machine-oriented logic based on the resolution principle, J. A C M 12 (1965) 32-41. [42] G.A. Robinson and L.T. Wos, Paramodulation and theorem proving in first-order theories with
equality, Machine Intelligence 4 (1969) 135-150. [43] J.F. Rulifson, J.A.,Derksen and R.J. Waldinger, QA4: A procedural calculus for intuitive reasoning,
Tech. Note 73, A.I. Center, SRI, Menlo Park, 1972, [44] J. Siekmann, Unification and matching problems, Ph.D. Thesis, Memo CSM-4-78, Univ. of Essex,
1978. [45] J. Siekmann and P. Szabo, Universal unification in regular equational ACFM theories, 6th CADE,
New York, 1982. [46] J.R~ Slagle, Automated theorem-proving for theories with simplifiers, commutativity and associativ-
ity, J. A C M 21 (1974) 622-642. [47] M.E. Stickel, A complete unification algorithm for associative-commutative functions, 4th lnternat.
Joint Conf. on Artificial Intelligence, Tbilisi, U.S.S.R., 1975. [48] M.E. Stickel, Unification algorithms for artificial intelligence languages, Ph.D. Thesis, Carnegie-
Mellon University, Pittsburgh, PA, 1976. [49] M.E. Stickel, A complete unification algorithm for associative-commutative functions, J. A C M
28(3) (1981) 423-434. [50] M. Venturini Zilli, Complexity of the unification algorithm for first-order expressions, Calcolo XII
(IV) (1975) 361-372.

200 F. Fages, G. Huet
[51] E. Tiden, Unification in combinations of theories with disjoint sets of function symbols, Royal Inst. of Technology, Dept. of Computer Science, S-100 44, Stockholm, 1985.
[52] K. Yellick, Combining unification algorithms for confined equational theories, M.I.T., Cambridge, MA, 1985.
[53] J.A. Robinson, Computational logic: The unification computation, in: B. Meltzer and D. Michie, eds., Machine Intelligence VoL 6 (American Elsevier, New York, 1971).

