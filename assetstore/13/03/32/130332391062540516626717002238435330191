Preserving Con uence for Rewrite Systems with Built-in Operations

Reinhard Bundgen Wilhelm-Schickard-Institut, Universitat Tubingen
Sand 13, D-72076 Tubingen, Germany
e-mpahiol:nheb: uxe7n0d71g/en29@5i4n5fo9rm|atfaikx.:uxn7i-0t7u1e/b2in95g9en58.dei

Abstract. We consider combinations of term rewriting with built-in
operations which compute objects of some external domain from ground terms. Combining a canonical term rewriting system with a computation relation does in general not lead to a canonical simpli cation relation. We show how a canonical simpli cation system can be constructed for such rewrite systems with built-in operations. Decomposition free simplication systems never need to look at the internal structure of external objects and thus a previous computation never needs to be undone. For some interesting equational speci cations the construction of decomposition free canonical simpli cation systems succeeds. Our construction of canonical simpli cation systems relies on simulating combined rewriting and computing by pure term rewriting. This allows us to use the wealth of all rewrite techniques and tools to investigate and manipulate these structures.

1 Introduction

Canonical term rewriting systems are an elegant and powerful tool to prove and compute in abstract domains. However for concrete domains they sometimes form an extremely ine cient framework for computation.

Example 1. Consider the Peano axiomatization of the natural numbers and +

R = f0 + x ! x; s(y) + x ! s(y + x) g:

The computation of 1010 +1011 requires more than 1010 rewrites and storing the

result takes O(1011) space in memory.

2

The goal of this paper is to combine both the proof-power of term rewriting systems and the algorithmic e ciency of functions designed for a particular domain. Such a particular domain may either be a data structure which is builtin into the implementation programming language of the term rewriting system or any other programming language (e. g., Boolean type, integers, . . . ) or it may be a user de ned abstract data type implemented in any programming language

(e. g., in nite precision integers, polynomials, . . . ) or it may be a mixture of both (e. g., lists of integers). A straightforward approach is to use mixed terms which may be built from the term signature, the term variables and external objects. The latter are data objects of a particular built-in domain which we will call an external domain from now on. Technically, external objects are incorporated into a term using some kind of coercion operator from the `sort external domain' to the `sort terms'. We want to allow for two simpli cation operations on mixed terms: (1) reductions by a canonical term rewriting system and (2) computations. A computation converts a mixed term m without variables into an external object provided that for each operator f in m a function fD on external objects that implements f is known. The simpli cation relation is the union of the reduction and the computation relation. Provided all operators of the signature have an interpretation and the external domain is a model of the canonical term rewriting system the simpli cation relation is con uent and terminating on terms without variables. Unfortunately general con uence (including ground con uence on mixed terms) does not hold for the simpli cation relation. Thus combining canonical term rewriting systems and built-in operations may lead to an e ective tool for computations but in general the combined system is not be suitable for theorem proving.

Example 2. Let RCR1 be the AC-canonical term rewriting system for commuta-
tive rings with ones (+ and are both associative and commutative)

RCR1

=

f

x x

+0 0

! x; ! 0;

x + ?x ! 0; y + x + ?x ! y;

x 1 ! x; ?(x + y) ! ?x + ?y;

?0 ! 0; x ?y ! ?(x y);

?(?x) ! x; x (y + z) ! (x y) + (x z)g

and the external domain be an implementation of (ZZ; 0; 1; ?; +; ). Then the

mixed terms \30" x+\70" x and \100" x are equal but do not have a common

normal form w. r. t. the simpli cation relation.

2

Some computer algebra systems (like Reduce Hearn, 1991] or Mathematica Wolfram, 1991]) provide for the combination of rewrite rules and built-in computations on an ad-hoc basis as parts of their programming language. In these systems it is left to the user that his rewrite speci cation together with the (builtin) evaluation strategy for applying rewrites and computations makes sense. Hence such rules may only be valid in certain computational contexts. A canonical simpli cation relation provides a well-de ned operational semantics for mixing rewrites and computations without giving up the declarative semantics of the equational speci cation (cf. Avenhaus and Becker, 1994]). In this paper, we are concerned with the problem how the con uence of a canonical term rewriting system can be preserved in presence of built-in operations. In order to investigate the simpli cation relation we will simulate term rewriting

combined with built-in computations in the initial model of the rewrite speci cation by pure term rewriting. This allows us to use well-known rewrite techniques and tools to study the simpli cation relation. We show how the Knuth-Bendix completion procedure Knuth and Bendix, 1970] or its extension for rewriting modulo equational theories (e. g., Peterson and Stickel, 1981]) can be used to nd canonical simpli cation systems. We present some techniques to prove the termination of such combined systems too. A second goal of our work is to maintain an economy of computation, i. e. we do not want to be forced to undo a previous computation. This leads to the discovery of decomposition free simpli cation systems. Yet it turns out that not every canonical term rewriting system can be extended to a decomposition free canonical simpli cation system.

2 Preliminaries

We assume the reader is familiar with the theory of term rewriting systems. For surveys on this topic see Dershowitz and Jouannaud, 1990], Klop, 1992] or Plaisted, 1993].

Abstract Reduction Relations
metric binary relation. Then A is are the symmetric -, transitive and

rtAehereeixdniuvvceertis-o,enarnerledalattithoieonnsoyf!m!AmAe.t$rDicA, t,Dr!ainsAsaiatninvadesy$amnAd-

rnrcbeeaodllieuenAxcditvniaaoeinnt!ceolrorAcemshlaucaatrilitenohsfnoaeosrr1fmea!!r.iesTAAcahaaredl2elers2!depleacDAcattin:oiwvo:nei:nt.l!ihyAc.aAbnTl.!hioTsebAhcjroeeendcyltactuwoieomAhnniptcc!hu.iftCiAefsooariinrsuaretnlueldierqaunmu;ctbeiib;nanclaneot2dirwnmDt.gearri.lsmftuf.tocihnr!hmearttAheifnaoiigsstr

feTuaencrhcmtioosbnjeTscyhtm.robuoglsho(uthtethFisnpaarpeetrh, ewen-daernyotfuenbcytiFon=sySmibFoilst)haendnibtye

set
X

of ranked the set of

variables. Each function symbol is implicitly accompanied by a sort description

f : s1 sn ! s for f 2 Fn and the s; si are elements of a xed set of sorts. In

the same way each variable is assigned a xed sort. Terms are de ned recursively

as follows: Each constant or variable that is assigned the sort s is a term of sort s.

Iff(tt11;;

: :

: :

: :

denotes

;;ttthnne)asriesettaeortfmearsmllofsoosfortsr-otcsrotsr1rs;e.:cN:t:ot;teshrnminrsgesfeprleeseceltyiivsegaleyn(aesnroardtte-fcdo: rbsr1yecFt)

tersmn.!T (sFt;hXen) and X . Terms

without variables are called ground terms. For a term t, X (t) is the set of variables

occurring in t. Let p be a position (or occurrence) in a term t. By we denote

the t(p)

empty is the

(or top) position. Then symbol labeling position

tpjpanddenfootress

the
2T

subterm
(F; X), t

of t at position s]p is the result

p, of

replacing in t the subterm at position p by s. Two positions p1 and p2 are disjoint

if none of them is a pre x of the other. Thus subterms at disjoint positions of

a term do not overlap. Let p1, . . . , pn be pairwise disjoint positions in t. Then

the subterms at these positions can be replaced simultaneously and we write t s1]p1 : : : sn]pn omitting redundant parentheses.
A substitution : X ! T (F; X ) is a mapping from variables to terms. If we extend the application of a substitution to a term t, we write t meaning that all variables x in t are simultaneously replaced by (x). t is an instance of t and we say that t is more general than s if s is an instance of t. If there is a substitution such that s = t then s and t unify and is a uni er of s and t.

Term Rewriting Systems A term rewriting system R is a set of rewrite rules

l ! r, where l and r are terms. l is called the left-hand side of the rule and r is its

right-hand side. A rule is left-linear if in its left-hand side every variable occurs at

most once. The and t = s r ]p.

term s reduces in one step sjp is then called a redex.

to A

t, s !R
term is

t, if s = s l ]p, l !
ground reducible if

r2R
all its

ground instances are reducible. A term rewriting system is ground con uent if

it is con uent for ground terms.

A set E of where E

equations
= fs !

s$ t; t

t where !sj

s s

and
$

t t

are terms
2 Eg. A

itnedrmucersewarrietilnatgiosnys$teEm=R!iEs

epgtinwqertuonooicevreraauadnlllueenresuetqnwuithKioveenarralueeotsnlhefttcsaoconnaafdtnnaeodBiqnnueislcna0aadtliiisosxtun,ebsr1.mt9EeT7rrm0hife]ewn$strriwalRtnih=nsigfcc$oharsnEmyu.snbstTieeomhenres.edswLKuueinccttcuheedltslhs0!b-Bsyauercnseheaadtcntixhhdoafcolto0fetmq!htuhpeaelremtit0toiowobnsnoest

rules and the two terms resulting from the two di erent one-step reductions are

called a critical pair. Knuth and Bendix Knuth and Bendix, 1970] showed that a

terminating term rewriting system is con uent i all critical pairs are con uent.

By the initial model of a rewrite speci cation (F; R), we understand the initial algebra of F modulo the equalities induced by interpreting the rules of R as equations. If R is canonical the initial model of (F; R) is isomorphic to the set of R-irreducible ground terms.

Associativity and Commutativity In many applications in computer alge-
bra associative and commutative operations play an important ro^le. Therefore
we also consider rewriting modulo AC. I. e., certain operators in FAC F2 are
known to be both associative and commutative. We assume that the basic algorithms (equality-test, match, uni cation) do have built-in knowledge of the asso-
ciativity and commutativity of the operators in FAC Hullot, 1979, Stickel, 1981].
Also the Knuth-Bendix completion procedure can be extended to term rewriting systems with built-in AC-operators (e. g., Peterson and Stickel, 1981], and Jouannaud and Kirchner, 1986]).

Mixed Terms By D we will denote a set of external objects disjoint from the
signature and variables. A mixed term is a structure obtained by replacing some
lsomeofairxsftoeendrdotsdtteeeorsrcmmocsuf araorlfgitnesegbormrritans(Dvt. haresihatobeurlemldorablecgoepnbasrtraat.intTtiohnneoenddeeisln)etmboyeUnetxss2teSorfDnDaslswobahrjeeercectsoS.nIsinisdaetrhmeedasnaeyst

Example 3. Let x 2 X be of sort Nat, + : Nat Nat ! Nat 2 F and 57 2

DNat = IN then x + 57 is a well-formed mixed term.

2

The set of mixed terms generated by a signature F, the variables in X and the external objects in D will be denoted by T (F; X ; D). Computations Computations map a ground term to an external object. This can be described by an F-algebra D = (D; FD) where

FD = ffD : Ds1

Dsn ! Ds j f : s1

sn ! s 2 Fg

is a set of interpretation functions of the operators in F. D will be called the

cetreax=ltnaetsrninofoanDwl.(dLdbo1eem;t:da:ei:n;:.ndTenTd()Fh]pae;.sXScosi;nmDc!pe)uDt!thaettiTfoifDn(Fs2rj;peXFla=;DtiDofan)r(deb!1te;oD:tt:ha:le;fdfuunnnT)cct(ftiFooiorn;nXsd,1t;!;hD:a:D)t:

T(F; X; D) ; dn 2 D and
is a canonical computes the

!D-normal form for each mixed term.

The Simpli cation Relation Given a term rewriting system R and an exter-

nRalthdeomsimainpliD,ca!tiRon

!D is
relation

a simpli cation is con uent on

relation. If D
ground terms.

is the initial model of But as demonstrated

by Example 2, general con uence does not hold. In the remaining sections, we

will investigate how we can recover general con uence for the simpli cation re-

lation.

3 Simulating Mixed Terms

In this and the following sections, we will simulate mixed terms and simpli cation

relations by pure terms and term rewriting systems. We do not suggest to use this simulation to incorporate computations into term rewriting systems. The purpose of this simulation is only to investigate simpli cation relations over

mixed terms.

We want to simulate the external domain D by (ground) terms of a new sort.

Therefore we assume that the external domain is isomorphic to the initial model

of the original rewrite speci cation R. Let R be a canonical term rewriting

system over terms in T (F; X ) built from operators in a nite set F and variables

in X . Both operators and variables are accompanied with sort information which

assigns to each term in T (F; X ) a unique sort s 2 . Then let = fs j s 2 g

be a set of new sorts, F = ff j f 2 Fg be a new signature such that the sort

description of f and X = fx j

is x

f 2

:Xsg1

be

a

sn ! s
set of new

i that of variables.

f is f Terms

:ins1T

(F;

X

)

sn ! s
will be

called external terms and variables in X will be called barred. For t 2 T (F; X )

we de ne the corresponding external term

t=

x if t = x 2 X; f(t1; : : : ; tn) if t = f(t1; : : : ; tn):

Now the external domain can be simulated by external ground terms modulo
the canonical term rewriting system R = fl ! r j l ! r 2 Rg, i. e., each external object corresponds to a R-equivalence class of external ground terms. Since R is canonical, each external object corresponds to an external ground term in R-normal form. Note that simulated mixed terms must not contain

barred variables. To build well-formed `mixed' terms, we need coercion operators

cCs=:

s! fcs j

s s

which map terms of a
2 g. Mixed terms can

new sort to be simulated

terms of the original
by elements of T (F

sort. Let
F C;X)

which belong to the original sorts in . For ease of notation we will use quotations

to denote the coercions (e. g., \t" instead of cs(t)).1

The computation relation can now be simulated with the help of the term rewriting system

Rb = ff(\x1"; : : : ; \xn") ! \f(x1; : : : ; xn)" j f 2 F; x1; : : : ; xn 2 X g

twhhaetreRbtheRquiostcaotnionuoepnte.raAtoornses-tsatnedp

for the appropriate computation

coercion

operators.

Note

t f(d1; : : : ; dn)]p !D t fD(d1; : : : ; dn)]p

then \ti" w. r. tion

trsc.eiomlRarurt.eiloNaspntoe.otsneWddteish)atmorteatsyhureslsttaiRynag-ptnphionlarytmitn0aagl=Ribaza-trrtue\iodlfenu(tfchr;toa:iom:sn:n;Roptbnrd)et"iopr]aeptcreftasn(a\danta1ftl"uho;neg:cny:t:iin;ono\nrttnmhc"eaa)lcll]ipozwmi(nhwpgehurteet0aarjpes-

the R-normalization simulates the computation of the function.

Computing
ing the Rb

the !D-normal R-normal form

form (t) of a term

relation can now be simulated using S

of in =

a mixed term t is simulated by computT (F F; X ). The whole simpli cation R R Rb. Note that not every one-step

reduction w. r. t. S corresponds to a one-step simpli cation.

4 Canonical Simpli cation

The simpli cation relation can be simulated by S = R R Rb. Clearly S is

terminating and ground con uent and two simulated mixed terms m and n are

equal i m procedure.

$S n. To
Note that

pbrootvheRsuchRananedquRbalityRwaerecacnonusueeannt.(uTnhfearielifnogr)e

completion the critical

pair computation can be strongly restricted. The next theorem states that we

can always nd a canonical term rewriting system for S.

Theorem 1. Let R be a canonical term rewriting system and S is constructed from R as described above. Then there exists a canonical term rewriting system S with $S = $S .
1 Note that the overloading of the coercion operators can always correctly be resolved.

Proof: Let
in one of the

(t1; : : : terms

; tk t1;

) be :::;

a tk

substitution which maps each variable x occurring to the corresponding external variable \x". Then

let

S

=

fl l

!\t1r"]2p1

R: :;:p\i t6=k"]pkpa!irwris(et1d;i:s:jo:i;nttk

)j
positions

in

l;

ljpi

=

ti

62

X

g:

We de ne an operation on terms that erases coercion operators and `bars'. It is easy to see that

8s; t : s !S t ) (s) = (t) or (s) !R (t)

(1)

and

8s; t : s !S t ) ( (s) = (t) , s !Rb t):

(2)

From nate.

(1) By

and (2) follows construction of

Sthawt e!hSaveisaltseorminating

because

!R

and

!Rb

termi-

8s; t : s $S t ) (9t0 : (s) !R (t) ) s !S t0 $Rb t): Therefore !S is con uent.

(3)
2

Example 4. Given the Peano speci cation of + and as in

RP

=

f0
0

+x x

! !

x; 0;

s(x) + y ! s(x + y); s(x) y ! (x y) + y g;

we get the following canonical rewrite system for the simpli cation relation

SP = RP

RP

RbP

f \0" + x ! x; \s(x)" + y ! s(\x" + y); \0" x ! 0; \s(x)" y ! (\x" y) + y g:

Note that S is not interreduced: 0 may be totally eliminated and rules 1 and 3

of RP may be collapsed.

2

Alternative canonical term rewriting systems can be found using term completion procedures provided appropriate term orderings can be found and the completion terminates successfully. A few such systems are presented in the Appendix.

5 Extended Term Rewriting Systems
The canonical term rewriting systems derived for the simulated simpli cation re-
lation typically contain rules that are neither pure rewrite rule rules (in T (F; X ))
nor describe the computation relation. Their meaning is rather to describe a combined rewriting and computation step or to restrict rule applications to terms containing particular external objects. In this section, we want to extend term rewriting systems for mixed terms to include new rule types that describe the additional reductions needed to make the

simpli cation relation canonical. We will derive these new rule types from term
rewriting systems over T (F F C; X X ). Remember that subterms under-
neath coercion operators correspond to external objects. Thus terms simulating
mixed terms must not contain variables of X . Nevertheless it may be sensible to
allow for barred variables in rewrite rules. Let us now characterize the intended
meaning of external subterms occurring in a rewrite rule over T (F F C; X X ).

1. An external ground subterm \t" denotes the external object (t) which can

be computed from the corresponding ground term t.

2. A barred variable \x" of sort s should match only external objects of Ds.

3. An external non-ground subterm \t" occurring in a left-hand side of a rule

describes any external object that can be decomposed according to t. An

Rex-tierrrnedaul coibbljeecgtrocuanndbteerdmecto0m2poTs(eFd;

according to t if ;) and t matches

itt0.

corresponds

to

an

4. An external non-ground subterm \t" occurring in a right-hand side of a

rule denotes the external object that can be computed from the respective

instance of t.

Extending term rewriting systems to deal with the aforementioned situations leads to the following extension of pure term rewriting systems.

De nition 2. Let R be a rewrite speci cation for terms over T (F; X ) and D be the initial model of R. Let ? and ! be new unary operators not occurring in F.2 A term rewriting system over the mixed terms in T (F f?; !g; X ; D) is an extended term rewriting system for mixed terms in T (F; X ; D) if

{ subterms of the form ?(t) occur only in left-hand sides and t 2 T (F; X ; D)
and
{ subterms of the form !(t) occur only in right-hand sides and t 2 T (F; X ; D).

The operator ? is called a mark for decomposition and ?(t) denotes external objects which correspond to irreducible ground instances of t. The operator ! is called a mark for immediate computation and !(t) denotes external objects which can be computed from the corresponding ground instances of t.

To simplify the notation we may write x instead of ?(x) or !(x) to denote variables that match only external objects. If the arguments of ? or ! are external objects the two operators may be omitted. It it now easy to translate a term rewriting system over T (F F C; X X ) to an extended term rewriting system and vice versa: a ground term \t" can be translated to (t), \x" translates to x and \t" for t non-ground translates to ?(t) if it occurs in a left-hand side and to !(t) otherwise.
2 To be precise, there should be two such operators for each sort, but again overloading is harmless.

Example 5. The following are examples of simulated rules and their translations to extended rewrite rules:

(\x" y) + y ! \x + 1" y ) (x y) + y ! !(x + 1) y;

\1 + 1" x ! x + x ) 2 x

! x + x;

pop(\push(e; s)") ! \s"

) pop(?push(e; s)) ! s:

2

Extended term rewriting systems can be viewed as a schematization of an (in nite) set of rewrite rules over a signature that has been extended by one constant
for each object in the external domain D. This point of view has been adapted
in Bundgen, 1994].

6 Decomposition Free Systems

Unfortunately most of the canonical term rewriting systems derived from S | in particular S from the proof of Theorem 1 | have an undesired property. Namely there may be rules l ! r in the canonical system such that l contains an external non-variable subterm (e. g. s(x) ). As we have seen in the last section
these subterms translate to terms marked for decomposition. Such rules are unwanted because they force us to look into the internal structure of an external object and to `decompose' the external object. Thus they may even force us to undo a previous `computation'.

sEyxsatmempleas6s.ocCiaotnesdidwerithRPSPanisd SP from Example 4. The mixed term rewriting

RP f?(s(x)) + y ! x + y; ?(s(x)) y ! (x y) + yg

if we assume that the constant 0 and the external object 0 can be overloaded.

When simplifying s(5) y w. r. t. the external rewrite system we may compute

6 y as computations are considered to be built-in. But in order to prove that

6 y = (5 y) y we have to undo the previous computation by applying the rule

?(s(x)) y ! (x y) + y.

2

For an external object this means, we need to decide its atomicity (i. e., if it corresponds to an irreducible constant) and for a non-atomic object we must further be able to decompose it. Hereby only decomposition into mixed constructor terms is necessary. By a mixed constructor term we mean a mixed term that becomes
a R-irreducible ground term if all its external subterms are replaced by corresponding R-irreducible ground terms from T (F; X ). Therefore we may disregard
rules that contain ground reducible subterms marked for decomposition.

For term rewriting systems modulo equational theories like associativity and commutativity (AC), the mapping between irreducible ground terms and external objects is not necessarily one-to-one. Therefore the decomposition operation is not uniquely de ned. In these cases, we are free to choose any decomposition function. This is a strong restriction on the matches on mixed terms needed to decide the applicability of an extended rewrite rule. It makes our reduction relation on mixed terms much simpler than the one proposed in Avenhaus and Becker, 1994].

Example 7. Given the free Abelian group with one generator speci ed by an
AC-canonical term rewriting system (F = f0; 1; ?; +g, + 2 FAC)

RAG

=

f

0+
?x

x +

x

! !

x; 0;

?0 ! 0; ?x + x + y ! y;

?(?x) ! x; ?(x + y) ! ?x + ?y g

and let the integers with addition and negation be the external domain. Then the

external object 5 may be decomposed into 1+4 or into 2+3. A decomposition into

0no+t5aismnixoetdalcloownsetdrubcetcoarutseerm0+e(i1th+er1+be1c+au1s+e 1(?) i1s+re?du1)ci+bl(e1b+y1R+A1G+a1n+d

?2+7 is
1+1+1)

is also reducible by RAG.

2

Alternative canonical term rewriting systems for S can be searched using the
Knuth-Bendix procedure or its extensions for completion modulo AC. In particular term completion procedures may be employed to search for term rewriting systems which keep the need for decomposing terms as low as possible by orienting critical pairs accordingly. In the optimal case we may even end up with a canonical term rewriting system that never forces us to decompose external objects.

De nition 3. Let R be a canonical system R which is derived from R

tRermRbreiws rditeicnogmspyosstiteimon.

A term rewriting
free (for R) if for

all l ! r 2 R n R, ljp 2 T (F; X ) implies ljp 2 X F0.

Theorem 4. Let R be a canonical
domain which is isomorphic to the
scribed above. If equivalence in D is

dtieenrcimitdiaarlbelwmeroaidtniednl gRofsyRsRt.emLRebat ncRadnDabnebdecoRbamnpbeielxeatdesrindnteao-l

a decomposition free canonical term rewriting system then there is a canonical

simpli cation relation which never needs to decompose external objects.

Proof: follows directly from the translation scheme of Section 5.

2

The requirement of Theorem 4 to decide the equality of external objects is only needed if there are rules with left-hand sides that contain constants or that are not linear w. r. t. external variables. Given that we have such a decision procedure, we may also allow for external ground terms in the left-hand sides of the new rules without being forced to ever decompose a mixed term to be

simpli ed. In the Appendix the two kinds of decomposition free systems for the commutative ring with one are presented.
When we want to derive a decomposition free system for R, we may use the
Knuth-Bendix completion procedure trying to orient critical pairs so that the conditions of De nition 3 (or the weakened conditions discussed above) are not
violated. Simulated mixed terms behave like the corresponding terms in T (F; X )
with the exception that certain redexes are blocked. Thus it may happen that the con uence of a mixed critical pair can only be shown using an inductive
theorem of R or R. Therefore it is advantageous if the speci cation R allows
rewrite proofs for as many theorems of its initial model as possible.

Example 8. Given a speci cation

Ra = f app(nil; l) ! l; app(cons(x; l1); l2) ! cons(x; app(l1; l2)) g;

the derivation of a decomposition free system will compute the critical pair

( app(app(\cons(x; nil)"; l1); l2); app(\cons(x; nil)"; app(l1; l2)) ):

This pair could be resolved if app were declared to be associative. Without this declaration our trial to nd a decomposition free system for Ra fails. For

RA

=

f

app(nil; l) app(l; nil)

! !

l; l;

aapppp((caopnps(l(1x;;ll21));;ll32))

! !

acopnps(l(1x;;aapppp((ll21;;ll32))));g

we obtain the decomposition free canonical term rewriting system

RA RbA f app(\nil"; l)

! l;

app(l; \nil")

! l;

aapppp((acopnps(l(1x;;ll21));;ll32))

! !

acopnps(l(1x;;aapppp((ll21;;ll32))));;

cons(\x"; l)

! app(\cons(x; nil)"; l);

app(\l1"; app(\l2"; l3)) ! app(\app(l1; l2)"; l3) g:

2

So far, we have found decomposition free canonical systems for a variety of speci cations like Abelian (idempotent) monoids, (Abelian) groups, commutative rings with 1, modular rings, Boolean rings, lists. But for non-commutative rings or Peano axiomatizations of the natural numbers we could not nd decomposition free systems. An equational speci cation for which an (equational) theorem is valid in the variety i it is valid in the initial model is called inductively complete Paul, 1984]. As a matter of fact, so far we could nd decomposition free canonical term rewriting systems for all the inductively complete canonical term rewriting systems we
looked at. But inductive completeness of R is not a necessary precondition for
the existence of decomposition free canonical systems.

7 Termination of Simpli cation Systems

In a canonical decomposition free system derived from R R Rb, the left-
hand sides of the new rules contain external variables and the right-hand sides typically contain non-atomic external terms. Such new rules denote a rewrite immediately followed by computations and will be translated to extended rewrite rules containing marks for immediate computation. This combination of basic simpli cation steps may be necessary to guarantee the termination property of the system.

Example 9. The following decomposition free rule can be generated for commutative rings:
(x \y") + (x \z") ! x \y + z":
Splitting this rule into
(x \y") + (x \z") ! x (\y" + \z")
and the computation of + con icts with the standard orientation of the distributivity law:
x (y + z) ! (x y) + (x z): 2
Trying to construct a decomposition free canonical rewrite system for S by
Knuth-Bendix completion (modulo AC), a major di culty is to nd an appro-
priate term ordering which is compatible with S and the orientations of critical
pairs needed to guarantee decomposition freedom. Here we want to present a technique to construct term orderings which proved helpful in many cases. Examples like the one dealing with the distributivity law (Example 9) suggest that we should take sort information into account.
The sort structure of terms in T (F F C; X X ) is very special. Only coercion
operators link barred sorts and non-barred sorts. Thus terms of barred sorts may be embedded in terms of unbarred sorts but not vice versa. Therefore it is not possible that a coercion operator occurs below another coercion operator.

De nition 5. A many sorted term algebra T (F; X ) has a strict 2-level sort

hierarchy if the set of sorts can be partitioned into two disjoint subsets =

1
all

]term0sainndTF(F=0;F;1)

] F0
have

]
a

C such
sort in

that 0,

aanlldteCrmcosnitnaiTns(Fo1n;l;y)choaevrceioansoorpteirnator1s,

from a sort in 0 to a sort in 1.

The set 0 is called the set of base sorts and 1 is called set of ( rst) extension sorts.

A term rewriting system is terminating if for all its rules the left-hand sides are greater than the corresponding right-hand sides w. r. t. a term ordering.

De nition 6. A (quasi) term ordering is a terminating (quasi) ordering over terms that is stable under substitution (8s; t; : s t ) s t ) and compatible (8s; t; u; p : s t ) u s]p u t]p).

Let us construct a quasi term ordering for term algebras with a strict 2-level sort

hierarchy. and F be as described in De nition 5 and C be a set of constants

soof rstosratsuginmen1tdedisjboyinCt

from F
. Then

. we

be a term ordering over terms of the extension
can extend to a relation over T (F C; X )

with associated equivalence relation :

1. restricted to terms of the extension sort is equivalent to .

2. 3.

For each all terms For each

coercion operator

bcsa(ste),scosr(tt)s

c. there

cs in C there
is a constant

is a c in

constant c in C C such that for

such that for all terms t of

sort s, t c.

It is straightforward to show that is both stable under substitution and compatible.

Lemma 7. Let T (F; X ) be a term algebra with strict 2-level sort hierarchy as

described above. same base sort

aLreetequ1ivabelenat

quasi term ordering and all terms with

such that all terms of the the same coercion operator

at their tops combination

are (1

equivalent. Let ; 2) is a term

2 be a ordering.

term

ordering.

Then

the

lexicographic
2

De nition 5 and Lemma 7 can be extended to n-level sort hierarchies.

8 Variations and Extensions
In the last sections, we have imposed a strong restriction on the external domains we admit. Namely we demanded that the external domains be isomorphic to the
initial model of the rewrite speci cation R. This restriction can be relaxed to
allow for external domains that are an initial model of a consistent enrichment
of R. This corresponds to augmenting F by additional constants and function symbols and to adding rules to R that do not reduce formerly irreducible ground terms. Since F and R may even become in nite, we can also admit external do-
mains which cannot be speci ed equationally (like elds). The relation between canonical simpli cation relations and various external domains has been investigated in Bundgen, 1994]. Again decomposition free canonical systems seem to be of great importance because they turn out to be canonical for all consistent
models of R.
In a many sorted speci cation there may be built-in operations only for some of the sorts. Consider for example the polynomial speci cation in Bundgen, 1991]

which distinguishes sorts for coe cients, indeterminates and polynomials. Building-in an external coe cient domain allows for specifying polynomials over in nite elds. We have found a decomposition free canonical system for polynomials with built-in coe cient domain. This can be used to relate term completion procedures and Buchberger's algorithm Buchberger, 1965]. In Bundgen, 1992] the author showed that Buchberger's algorithm for polynomials over the rational numbers can be simulated using a term rewriting system that needs in nitely many rules to specify the rational numbers and in the constraint based description of Buchberger's algorithm in Bachmair and Ganzinger, 1994] the coe cient domain is considered the set of all ground equations needed to specify the coefcient eld. In both cases the coe cient elds may be considered built-in.
It is also possible to consider models of non-consistent enrichments of R as exter-
nal domains. However this will lead to simpli cation systems di erent from those described in the last section because the completion will yield new equalities on terms of the original sort.
De ned operators in F need not be mapped to a corresponding de ned operator in F. This introduces two hierarchies of computing Kaplan and Choppy, 1989].
Base computations can be considered as built-in operations on external objects and higher-level functions can be realized by rewrite rules. In this case the decomposition of the recursion argument can in general not be avoided.

Example 10. The de nition of the sum operator

R = f (0) ! 0; (s(n)) ! s(n) + (n)g

will be transformed to the extended term rewriting system

R f (?(s(n))) !!(s(n)) + (n)g:

If we know how to decompose external objects and the computation of the

successor function, the addition and the equality of external objects is built-in,

an innermost reduction strategy with priority to computation will compute the

sum as e ciently as a corresponding functional program.

2

Starting with a non-canonical equational speci cation, our simulation technique need not discover a nite (decomposition free) canonical simpli cation system. Yet, the equality of two mixed terms may be proved using the (unfailing) KnuthBendix completion on simulated mixed terms which in the worst case may involve the complete decomposition of external objects. On the other hand, we may also employ inductive completion procedures Huet and Hullot, 1980], Paul, 1984], Jouannaud and Kounalis, 1989], Kuchlin, 1989] to that end if we are sure that the external domain forms an initial model of the equational speci cation. If we are only concerned with ground con uence, it is possible to become even more ambitious. Avenhaus and Becker Avenhaus and Becker, 1994] have elaborated a semantical framework for conditional term rewriting systems with builtin domains allowing for partially de ned functions.

9 Conclusion
We have shown that simpli cation presented by a canonical term rewriting system and a computation relation for its initial model can always be extended to a canonical simpli cation system. We propose extended term rewriting systems to describe such simpli cation systems. The simulation technique we used to study the simpli cation relation allows us to investigate simpli cation systems w. r. t. all standard rewriting techniques (e. g., term orderings, completion, narrowing, . . . ). For some important equational speci cations, we can construct decomposition free canonical simpli cation systems which never force us to undo a previous computation. So far we do not know syntactical criteria which ensure the existence of decomposition free canonical systems. A primary intension of building external domains into term rewriting system was the need for improved e ciency. The potential to compute operators acting on ground terms leads a rst step towards this direction. Yet, as we have seen, for deciding equality of mixed terms, we may be forced to undo previous simplications. Decomposition free systems avoid redundant computations. They may however introduce redundant rewrites. It remains an important and challenging task to look for good simpli cation strategies to obtain the full bene t of combined rewrites and computations.
10 Acknowledgments
I like to thank anonymous referees for some helpful comments.
References
Avenhaus and Becker, 1994] J. Avenhaus and K. Becker. Operational speci cations with built-ins. In P. Enlbert, E. W. Mayr, and K. W. Wagner, editors, STACS 94 (LNCS 775), pages 263{274. Springer-Verlag, 1994. (Proc. STACS'94, Caen, France, February 1994). Bachmair and Ganzinger, 1994] Leo Bachmair and Harald Ganzinger. Buchberger's algorithm: A constraind-based completion procedure. In Constraints in Computational Logics, 1994. (Proc. of CCL'94 in Munich, Germany, September 1994). Buchberger, 1965] Bruno Buchberger. Ein Algorithmus zum Au nden der Basiselemente des Restklassenringes nach einem nulldimensionalen Polynomideal. PhD thesis, Universitat Innsbruck, 1965. Bundgen, 1991] Reinhard Bundgen. Completion of integral polynomials by AC-term completion. In Stephen M. Watt, editor, International Symposium on Symbolic and Algebraic Computation, pages 70 { 78. ACM Press, 1991. (Proc. ISSAC'91, Bonn, Germany, July 1991). Bundgen, 1992] Reinhard Bundgen. Buchberger's algorithm: The term rewriter's point of view. In G. Kuich, editor, Automata, Languages and Programming (LNCS 623), pages 380 {391, 1992. (Proc. ICALP'92, Vienna, Austria, July 1992).

Bundgen, 1993] Reinhard Bundgen. Reduce the redex ! ReDuX. In Claude Kirch-
ner, editor, Rewriting Techniques and Applications (LNCS 690), pages 446{450. Springer-Verlag, 1993. (Proc. RTA'93, Montreal, Canada, June 1993). Bundgen, 1994] Reinhard Bundgen. Combining computer algebra and rule based reasoning. In AISMC-2 Conference/Workshop on Arti cial Intelligence and Symbolic Mathematical Computing, 1994. (to appear in LNCS). Dershowitz and Jouannaud, 1990] Nachum Dershowitz and Jean-Pierre Jouannaud. Rewrite systems. In Jan van Leeuven, editor, Formal Models and Semantics, volume B of Handbook of Theoretical Computer Science, chapter 6. Elsevier, 1990. Hearn, 1991] A. C. Hearn. REDUCE User's Manual. Version 3.4. Rand Publication, 1991. Hsiang, 1985] Jieh Hsiang. Refutational theorem proving using term-rewriting systems. Arti cial Intelligence, 25:255{300, 1985. Huet and Hullot, 1980] Gerard Huet and Jean-Marie Hullot. Proofs by induction in equational theories with constructors. In Proc. 21st FoCS, pages 96{107, Los Angeles, CA, 1980. Hullot, 1979] Jean-Marie Hullot. Associative-commutative pattern matching. In Fifth IJCAI, Tokyo, Japan, 1979. Jouannaud and Kirchner, 1986] Jean-Pierre Jouannaud and Helene Kirchner. Completion of a set of rules modulo a set of equations. SIAM J. on Computing, 14(4):1155{1194, 1986. Jouannaud and Kounalis, 1989] Jean-Pierre Jouannaud and Emmanuel Kounalis. Proofs by induction in equational theories without constructors. Information and Computation, 82:1{33, 1989. Kaplan and Choppy, 1989] Stephane Kaplan and Christine Choppy. Abstract rewriting with concrete operators. In Nachum Dershowitz, editor, Rewriting Techniques and Applications (LNCS 355), pages 178{186. Springer-Verlag, 1989. (Proc. RTA'89, Chapel Hill, NC, USA, April 1989). Klop, 1992] Jan Willem Klop. Term rewriting systems. In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, Background: Computational Strcutures, volume 2 of Handbook of Logic in Computer Science, chapter 1. Oxford University Press, 1992. Knuth and Bendix, 1970] Donald E. Knuth and Peter B. Bendix. Simple word problems in universal algebra. In J. Leech, editor, Computational Problems in Abstract Algebra. Pergamon Press, 1970. (Proc. of a conference held in Oxford, England, 1967). Kuchlin, 1989] Wolfgang Kuchlin. Inductive completion by ground proof transformation. In H. A t-Kaci and M. Nivat, editors, Resolution of Equations in Algebraic Structures, volume 2 of Rewriting Techniques, chapter 7. Academic Press, 1989. Paul, 1984] Etienne Paul. Proof by induction in equational theories with relations between constructors. In Ninth Colloquium on Trees in Algebra and Programming, pages 211{225. Springer-Verlag, 1984. Peterson and Stickel, 1981] G. Peterson and M. Stickel. Complete sets of reductions for some equational theories. Journal of the ACM, 28:223{264, 1981. Plaisted, 1993] David Plaisted. Equational reasoning and term rewriting systems. In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, Logical Foundations, volume 1 of Handbook of Logic in Arti cial Intelligence and Logic Programming, chapter 5. Oxford University Press, 1993. Stickel, 1981] Mark E. Stickel. A uni cation algorithm for associative-commutative functions. JACM, 28(3):423{434, July 1981.

Wolfram, 1991] Stephen Wolfram. Mathematica: a system for doing mathematics by computer. Addison-Wesley, Redwood City, CA, 1991.

Appendix

Here we want to present some of the decomposition free term rewriting systems

simulating canonical simpli cation systems. We only present the original rewrite

dsthpeeericvsieetdca.otfTiochnoennRsttaahnnetdsctaohnmedpnoleepwteerruasytleossrtesRmoxccidsuerrRrivinegdRidnuRrinR.bgTthhuRescxRom(mapnilndeutRisbontc.haFen

is always easily be collapsed

rules of R). All systems have been found using the ReDuX rewrite laboratory

Bundgen, 1993]. The termination proofs were performed as described in Sec-

tion 7. The orderings described below refer to the quasi termination ordering

1.

Groups For the canonical term rewriting system for groups

RG

=

f

x x

1x?1

! x; ! 1;

(x(xx?(1yx))??11z

y)

! ! !

x x; y;

(y

z);

11(xxx???111xy)x(?x1

y)

! ! ! ! !

x; 1; 1; yy;?1

x?1 g

we nd

RxG

=

f

x\1"\?11"

! !

x; \1";

\1" \x"

x (\y"

! x; z) ! \x

y"

z g:

A Knuth-Bendix ordering can be used to prove the termination of the whole

system.

Commutative
Example 2, +;

Ring 2 FAC

with 1 For commutative rings with one (see RCR1 from
) there are two decomposition free canonical systems. The

rst one is decomposition free according to De nition 3.

RxCR1a

=

f

\0" \1"

+x x

! x; ! x;

\0" x ?(x)

! \0"; ! x \?1";

(x \y") + x ! x \y + 1"; (x \y") + (x \z") ! x \y + z";

x + x ! x \1 + 1" g:

To prove the termination we used the polynomial interpretation ordering

f +](x; y) 7! x + y + 5; ](x; y) 7! xy; ?](x; y) 7! 2x + 1; \:"](x) 7! 2g:

The second canonical system is decomposition free according to the relaxed version of this de nition which allows barred ground terms in the left-hand

sides. RxCR1b =

f \0" + x ! x; \0" x ! \0";

\1" x ! x; x + x ! x \1 + 1";

?(x \y")

! x \?y"; x \?1" ! ?(x);

(x \y") + x ! x \y + 1"; (x \y") + ?(x) ! x \y + ?1";

(x \y") + (x \z") ! x \y + z" g:

To prove the termination we used the polynomial interpretation ordering

f +](x; y) 7! x + y + 100; ](x; y) 7! xy; ?](x; y) 7! 1:1x + 0:5; \:"](x) 7! 2g:

The complete decomposition free systems for Abelian groups can be extracted from the system for commutative rings.

Boolean Rings The canonical term rewriting system for Boolean rings presented in Hsiang, 1985] is ( ; ^ 2 FAC)

RBR

=

f

x x

^

0 1

! !

x; x;

x^0 xx

! 0; ! 0;

x ^ x ! x; x ^ (y z) ! (x ^ y) (x ^ z) g:

It can be extended to a canonical decomposition free term rewriting system with

RxBR

=

f

x x

^

\0" \1"

! !

x; x;

x ^ \0" (x ^ \y")

! \0"; (x ^ \z") ! x ^ \y

z" g:

The termination proof is analogous to that for commutative rings.

This article class.

was

processed

using

the

LATEX

macro

package

with

the

LLNCS

document

