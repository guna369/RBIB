Matching modulo superdevelopments Application to second-order matching
Germain Faure Ws Rho’06
1/46

Higher-order matching
Usually deﬁned as the following problem:
2/46

Higher-order matching

Usually deﬁned as the following problem:

Typed yrrrrrrrrrrrr

λ-tevrvmvvvsvvvvvvv%

AB

∃σ?

Aσ =β(η) B

2/46

Higher-order matching

Usually deﬁned as the following problem:

Typed yrrrrrrrrrrrr

λ-tevrvmvvvsvvvvvvv%

AB

∃σ?

Aσ =β(η) B

3/46

Higher-order matching (revised) [?]
Another approach:
4/46

Higher-order matching (revised) [?]

Another approach:

Untyped xqqqqqqqqqqqq

λ-twewrwmwwswwwwwww&

AB

∃σ?

Aσ =⇒βf B

where =⇒βf is a one-step reduction for an appropriate parallel reduction that always terminates
reduction that gives an approximation of β-normal form

4/46

Higher-order matching (revised) [?]

An other approach:

Unyped xqqqqqqqqqqqq

λ-twewrwmwwswwwwwww&

AB

∃σ?

Aσ =⇒βf B

5/46

Higher-order matching (revised) [?]

An other approach:

Unyped xqqqqqqqqqqqq

λ-twewrwmwwswwwwwww&

AB

∃σ?

Aσ =⇒βf B

where =⇒βf is a one-step reduction for an appropriate parallel reduction:
that always terminates

5/46

Higher-order matching (revised) [?]

An other approach:

Unyped xqqqqqqqqqqqq

λ-twewrwmwwswwwwwww&

AB

∃σ?

Aσ =⇒βf B

where =⇒βf is a one-step reduction for an appropriate parallel reduction:
that always terminates that gives an approximation of β-normal form

5/46

Motivations
First introduced for automatic program transformation
6/46

Motivations
First introduced for automatic program transformation It may be diﬃcult to ﬁnd a suitable type system s.t. equivalence on typed terms is decidable
6/46

Motivations
First introduced for automatic program transformation It may be diﬃcult to ﬁnd a suitable type system s.t. equivalence on typed terms is decidable ¯ Example: Pattern-matching in the ρ-calculus
6/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus
7/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus was introduced [?] to make all the ingredients of rewriting such as rule applications and results explicit
7/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus was introduced [?] to make all the ingredients of rewriting such as rule applications and results explicit is in ﬁne an extension of the λ-calculus with built-in pattern-matching and term collections
7/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus was introduced [?] to make all the ingredients of rewriting such as rule applications and results explicit is in ﬁne an extension of the λ-calculus with built-in pattern-matching and term collections
2. Higher-order matching in the ρ-calculus for
7/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus was introduced [?] to make all the ingredients of rewriting such as rule applications and results explicit is in ﬁne an extension of the λ-calculus with built-in pattern-matching and term collections
2. Higher-order matching in the ρ-calculus for Transformations of programs with built-in pattern-matching (not only purely functional programs)
7/46

Higher-order matching in the ρ-calculus
1. The ρ-calculus was introduced [?] to make all the ingredients of rewriting such as rule applications and results explicit is in ﬁne an extension of the λ-calculus with built-in pattern-matching and term collections
2. Higher-order matching in the ρ-calculus for Transformations of programs with built-in pattern-matching (not only purely functional programs) Proof theory that handles rich proof-terms in the generalized deduction modulo [?]
7/46

Some questions - Contributions
1. What is this appropriate parallel reduction?
8/46

Some questions - Contributions
1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?]
8/46

Some questions - Contributions
1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?] Why is it a relevant approximation of β-normal forms?
8/46

Some questions - Contributions
1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?] Why is it a relevant approximation of β-normal forms?
2. What is the link with other h.o. matching algorithms?
8/46

Some questions - Contributions
1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?] Why is it a relevant approximation of β-normal forms?
2. What is the link with other h.o. matching algorithms? Second-order matching
8/46

Some questions - Contributions
1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?] Why is it a relevant approximation of β-normal forms?
2. What is the link with other h.o. matching algorithms? Second-order matching H.o. matching of patterns `a la Miller
8/46

Some questions - Contributions

1. What is this appropriate parallel reduction? “It may be a little diﬃcult to understand” [?] Why is it a relevant approximation of β-normal forms?
2. What is the link with other h.o. matching algorithms? Second-order matching H.o. matching of patterns `a la Miller

¯

Intuition Deeper understanding

8/46

Road-map
1. Superdevelopments. Strong parallel β-reduction. 2. Matching modulo SD. Links with other h.o. matching
algorithms. 3. Algorithm for matching modulo SD. 4. Second-order matching. 5. The η-equivalence.
9/46

The λ-calculus

Syntax
A, B, C ::= x |X |c | λx.A | AB

variable matching variable constant abstraction application

10/46

The λ-calculus

Syntax

A, B, C ::= x |X |c | λx.A | AB

variable matching variable constant abstraction application

We note f (A1, . . . , An) for (. . . (fA1) )An)

10/46

The λ-calculus

Syntax

A, B, C ::= x |X |c | λx.A | AB

variable matching variable constant abstraction application

We note f (A1, . . . , An) for (. . . (fA1) )An) Operational semantics

(λx.A)B →β A[x := B]

10/46

Creation of redexes in the λ-calculus (I)

@
ÐÐÐÐ @ ccccc λ
λ

→@ λ

((λx.λy .x) a) b

→ (λy .a) b

11/46

Creation of redexes in the λ-calculus (I)

@
ÐÐÐÐ @ ccccc λ
λ

→ ÐÐÐÐ @ XXXX λ

((λx.λy .x) a) b

→ (λy .a) b

12/46

Creation of redexes in the λ-calculus (I)

 @ XXXX

→

ÐÐÐÐ @ XXXX

ÐÐÐÐ @ ccccc

λ

λ

λ

((λx.λy .x) a) b

→ (λy .a) b

13/46

Creation of to create redexes in the λ-calculus (I)

 @ XXXX

→

ÐÐÐÐ @ XXXX

ÐÐÐÐ @ ccccc

λ

λ

λ

((λx.λy .x) a) b

→ (λy .a) b

14/46

Creation of redexes in the λ-calculus (II)

 @ XXXX
ÐÐÐÐ @ cccc λX λ

→ ÐÐÐÐ @ XXXX λ

((λx.x) (λy .a)) b → (λy .a) b

15/46

Creation of redexes in the λ-calculus (III)

rrrrrrr @ uuuuuuu

λx x||||@

UbUbUbUbUUUUUUUUUUUUUUU

λ

→ λÐÐÐÐ@RRXRXRXRXRRRRRRRRRRRRRR

(λx.xa) (λy .y )

→ (λy .y )a

Return 16/46

Remarks
1. What distinguishe (I) and (II) from (III)?
17/46

Remarks
1. What distinguishe (I) and (II) from (III)? The reduction of the term in functional position of the green application creates a redex in the (I) and (II) way
17/46

Remarks
1. What distinguishe (I) and (II) from (III)? The reduction of the term in functional position of the green application creates a redex in the (I) and (II) way Whereas in (III) it is the substitution of a λ-abstraction in functional position that creates a redex
17/46

Remarks
1. What distinguishe (I) and (II) from (III)? The reduction of the term in functional position of the green application creates a redex in the (I) and (II) way Whereas in (III) it is the substitution of a λ-abstraction in functional position that creates a redex
2. In other words
17/46

Remarks
1. What distinguishe (I) and (II) from (III)? The reduction of the term in functional position of the green application creates a redex in the (I) and (II) way Whereas in (III) it is the substitution of a λ-abstraction in functional position that creates a redex
2. In other words In (I) and (II) the creation is “upwards”
17/46

Remarks
1. What distinguishe (I) and (II) from (III)? The reduction of the term in functional position of the green application creates a redex in the (I) and (II) way Whereas in (III) it is the substitution of a λ-abstraction in functional position that creates a redex
2. In other words In (I) and (II) the creation is “upwards” Whereas in (III), it is “backwards”
17/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
18/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
1. the redexes of the term and its residuals (as in developments)
18/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
1. the redexes of the term and its residuals (as in developments) 2. the redexes created in (I) or (II) not in (III)
18/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
1. the redexes of the term and its residuals (as in developments) 2. the redexes created in (I) or (II) not in (III)
18/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
1. the redexes of the term and its residuals (as in developments) 2. the redexes created in (I) or (II) not in (III) Theorem [?] All superdevelopments are ﬁnite
18/46

Deﬁning superdevelopements
Deﬁnition [?] A superdevelopement is a β-rewrite sequence that reduces:
1. the redexes of the term and its residuals (as in developments) 2. the redexes created in (I) or (II) not in (III)
Theorem [?] All superdevelopments are ﬁnite
Examples of superdevelopments Couter-examples of superdevelopments Other characterization
18/46

Superdevelopments

The residuals of the redexes can be reduced as in developments

Example

(λx.f (x, x)) ((λy .y ) a)
→β f ((λy .y ) a, (λy .y ) a) →β f (a, (λy .y ) a) →β f (a, a)

19/46

Superdevelopements

The following β-reduction is a superdevelopement:

Example

((λx.λy .f (x, y ))a)b
→β (λy .f (a, y ))b →β f (a, b)

20/46

Superdevelopements

The following β-reduction is a superdevelopement:

Example

((λx.x)(λy .y ))a
→β (λy .y )a →β a

21/46

Superdevelopments

The following β-reductions are not superdeveloppements:

Example

(λx.xa)(λy .y )
→β (λy .y )a →β a

22/46

Superdevelopments

The following β-reductions are not superdeveloppements:

Example

(λx.xa)(λy .y )
→β (λy .y )a →β a

Example

(λx .xx )(λx .xx )
→β (λx.xx)(λx.xx) →β (λx.xx)(λx.xx) →β . . .

22/46

The parallel β-reduction [Tait Martin-L¨of]

(Red-β)

λx.A1 =⇒β λx.A2 (λx.A1)B1 =⇒β

B1 =⇒β B2 A2[x := B2]

23/46

The parallel β-reduction [Tait Martin-L¨of]

(Red-β)

λx.A1 =⇒β λx.A2 (λx.A1)B1 =⇒β

B1 =⇒β B2 A2[x := B2]

(Red-λ)

A1 λx .A1

=⇒β =⇒β

A2 λx .A2

(Red-@)

A1

=⇒β A2 B1 =⇒β A1B1 =⇒β A2B2

B2

23/46

The parallel β-reduction [Tait Martin-L¨of]

(Red-β)

λx.A1 =⇒β λx.A2 (λx.A1)B1 =⇒β

B1 =⇒β B2 A2[x := B2]

(Red-λ)

A1 λx .A1

=⇒β =⇒β

A2 λx .A2

(Red-@)

A1

=⇒β A2 B1 =⇒β A1B1 =⇒β A2B2

B2

(Red-ℵ) ℵ =⇒β ℵ

23/46

The strong parallel β-reduction [?]

(Red-βf )

A1

=⇒βf λx .A2 A1B1 =⇒βf

B1 =⇒βf A2[x := B2]

B2

24/46

The strong parallel β-reduction [?]

(Red-βf )

A1

=⇒βf λx .A2 A1B1 =⇒βf

B1 =⇒βf A2[x := B2]

B2

(Red-λ)

A1 λx .A1

=⇒βf =⇒βf

A2 λx .A2

(Red-@)

A1

=⇒βf A2

B1 =⇒βf

A1B1 =⇒βf A2B2

B2

(Red-ℵ) ℵ =⇒βf ℵ

24/46

Equivalence between superdevelopments
Theorem [?] There exists a superdevelopment A →→β B iﬀ A =⇒βf B
25/46

Matching in the pure λ-calculus modulo SD
26/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -matching equation] a pair of (untyped) terms denoted A βsd B s.t.
26/46

Matching in the pure λ-calculus modulo SD

Deﬁnition [βsd -matching equation] a pair of (untyped) terms denoted A
B is normal

βsd B s.t.

26/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -matching equation] a pair of (untyped) terms denoted A βsd B s.t.
B is normal does not contain matching variables
26/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -matching equation] a pair of (untyped) terms denoted A βsd B s.t.
B is normal does not contain matching variables Deﬁnition [βsd -matching system] a multiset of matching equations
26/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -match for A βsd B]
27/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -match for A βsd B] A substitution φ on matching variables such that
Aφ =⇒βf B
27/46

Matching in the pure λ-calculus modulo SD
Deﬁnition [βsd -match for A βsd B] A substitution φ on matching variables such that
Aφ =⇒βf B A substitution is a match of a system if it matches each equation
27/46

Solved form
Deﬁnition For a matching equation X βsd A: no variables in A For a system: each matching variable occurs once
28/46

Matching in the simply typed λ-calculus modulo β
29/46

Matching in the simply typed λ-calculus modulo β

Deﬁnition [β-equation] a pair of β-normal typed λ-terms denoted A
of the same type

βB

29/46

Matching in the simply typed λ-calculus modulo β

Deﬁnition [β-equation] a pair of β-normal typed λ-terms denoted A
of the same type B does not contain matching variables

βB

29/46

Matching in the simply typed λ-calculus modulo β

Deﬁnition [β-equation] a pair of β-normal typed λ-terms denoted A
of the same type B does not contain matching variables

βB

Deﬁnition [β-match for A β B] A substitution φ, that preserves types and such that
Aφ =β B

29/46

Matching in the simply typed λ-calculus modulo β

Deﬁnition [β-equation] a pair of β-normal typed λ-terms denoted A
of the same type B does not contain matching variables

βB

Deﬁnition [β-match for A β B] A substitution φ, that preserves types and such that
Aφ =β B
We can associate to a β-match equation, a βsd -match equation (erase types)

29/46

An example
The equation X (ι→ι)→ιY (ι→ι) β aκ→ι→ι(bκ, cι)
30/46

An example
The equation X (ι→ι)→ιY (ι→ι) β aκ→ι→ι(bκ, cι)

X ← λx.a(b, c)

βsd -match β-match 

30/46

An example
The equation X (ι→ι)→ιY (ι→ι) β aκ→ι→ι(bκ, cι)

X ← λx.a(b, c) X ← ab

Y ←c

βsd -match  

β-match  

30/46

An example
The equation X (ι→ι)→ιY (ι→ι) β aκ→ι→ι(bκ, cι)

X ← λx.a(b, c) X ← ab X ← λx.a(b, xc)

Y ←c Y ← λy .y

βsd -match   

β-match   

30/46

SD and second-order matching
Proposition Let φ be a β-match a second-order β-matching equation. Then it is also a βsd -match.
31/46

SD and second-order matching
Proposition Let φ be a β-match a second-order β-matching equation. Then it is also a βsd -match. Proof In (III) there is a 3rd -order redex
31/46

Remarks
The previous result does not extend to third-order
32/46

Remarks
The previous result does not extend to third-order There are some second-order β-match equations that have no solution but such that the corresponding βsd -match equation do have solutions
32/46

Remarks
The previous result does not extend to third-order There are some second-order β-match equations that have no solution but such that the corresponding βsd -match equation do have solutions
32/46

Remarks
The previous result does not extend to third-order There are some second-order β-match equations that have no solution but such that the corresponding βsd -match equation do have solutions ¯ Np-completeness of second-order matching ?
32/46

SD and patterns `a la Miller
The comparison is important: the algorithm of D. Miller does not use any type information
33/46

SD and patterns `a la Miller
The comparison is important: the algorithm of D. Miller does not use any type information Proposition Let P be a pattern.
33/46

SD and patterns `a la Miller
The comparison is important: the algorithm of D. Miller does not use any type information Proposition Let P be a pattern. If φ is a β-match of P β B then
it it also a βsd -match.
33/46

SD and patterns `a la Miller
The comparison is important: the algorithm of D. Miller does not use any type information Proposition Let P be a pattern. If φ is a β-match of P β B then
it it also a βsd -match. Proof: Patterns do not need full β-conversion but only β0-conversion:
(λx.t)x → t and this reduction does not create redexes in (III).
33/46

Algorithm for matching modulo superdevelopments
34/46

Algorithm for matching modulo superdevelopments

Aσ =⇒βf B

34/46

Algorithm for matching modulo superdevelopments

aσ =⇒βf a

34/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S

→ℵc →ℵv

S S

aσ =⇒βf a

34/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S

→ℵc →ℵv

S S

X σ =⇒βf B

35/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S
(X βsd B), S

→ℵc →ℵv →ℵX

S S X βsd B, S{A/X } if FV(B) = ∅ and X ∈ S

X σ =⇒βf B

35/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S

→ℵc →ℵv →ℵX

S
S X βsd A, S{A/X } if . . .

(λx .A1)σ =⇒βf

36/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S

→ℵc →ℵv →ℵX

S
S X βsd A, S{A/X } if . . .

(λx.A1)σ =⇒βf λx.B1

36/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A βsd λx .B), S

→ℵc →ℵv →ℵX →λλ

S
S X βsd A, S{A/X } if . . . (A βsd B), S

(λx.A1)σ =⇒βf λx.B1

36/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S

→ℵc →ℵv →ℵX →λλ

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S

(A1A2)σ =⇒βf

37/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S

→ℵc →ℵv →ℵX →λλ

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S

A1σ =⇒βf B1

A2σ =⇒βf B2

(A1A2)σ =⇒βf B1B2

37/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S
(A1A2 βsd B1B2), S

→ℵc →ℵv →ℵX →λλ →@@

S S X βsd A, S{A/X } if . . . (A1 βsd B1), S
(A1 βsd B1), (A2 βsd B2), S

A1σ =⇒βf B1

A2σ =⇒βf B2

(A1A2)σ =⇒βf B1B2

37/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S

→ℵc →ℵv →ℵX →λλ →@@

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S

(A1A2)σ =⇒βf

38/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S

→ℵc →ℵv →ℵX →λλ →@@

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S

A1σ =⇒βf λx .B1 A2σ =⇒βf B2 (A1A2)σ =⇒βf B1[x := B2]

38/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S

→ℵc →ℵv →ℵX →λλ →@@

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S

A1σ =⇒βf λx .B1 A2σ =⇒βf B2 (A1A2)σ =⇒βf B1[x := B2]

x ∈ B1 ?

38/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S

→ℵc →ℵv →ℵX →λλ →@@

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S

A1σ =⇒βf λx .B1 A2σB2 (A1A2)σ =⇒βf B1

x ∈ B1
39/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S
(A1A2 βsd B1), S

→ℵc →ℵv →ℵX →λλ →@@ →@π

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S
A1 βsd λx .B1 if x ∈ B1

A1σ =⇒βf λx .B1 A2σB2 (A1A2)σ =⇒βf B1

39/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S (A1A2 βsd B1), S

→ℵc →ℵv →ℵX →λλ →@@ →@π

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S A1 βsd λx .B1 if . . .

(A1A2)σ =⇒βf

x ∈ B1
40/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S (A1A2 βsd B1), S

→ℵc →ℵv →ℵX →λλ →@@ →@π

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S A1 βsd λx .B1 if . . .

A1σ =⇒βf λx .B1 A2σ =⇒βf B2 (A1A2)σ =⇒βf B1[x := B2]

x ∈ B1
40/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S (A1A2 βsd B1), S
(A1A2 βsd B1[x := B2]), S

→ℵc →ℵv →ℵX →λλ →@@ →@π →@β

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S A1 βsd λx .B1 if . . .
(A1 βsd λx .B1), (A2 βsd B2), S

A1σ =⇒βf λx .B1 A2σ =⇒βf B2 (A1A2)σ =⇒βf B1[x := B2]

x ∈ B1
40/46

Algorithm for matching modulo superdevelopments

(a βsd a), S (x βsd x ), S (X βsd A), S (λx .A1 βsd λx .B1), S (A1A2 βsd B1B2), S (A1A2 βsd B1), S
(A1A2 βsd C ), S

→ℵc →ℵv →ℵX →λλ →@@ →@π →@β

S
S X βsd A, S{A/X } if . . . (A1 βsd B1), S (A1 βsd B1), (A2 βsd B2), S A1 βsd λx .B1 if . . .
(A1 βsd λx .B1), (A2 βsd B2), S where C = B1[x := B2] and x ∈ B1

A1σ =⇒βf λx .B1 A2σ =⇒βf B2 (A1A2)σ =⇒βf B1[x := B2]

40/46

Example: XY βsd ab
Rule @@: X βsd a, Y βsd b
41/46

Example: XY βsd ab
Rule @@: X βsd a, Y βsd b Rule @π: X βsd λx .ab
41/46

Example: XY βsd ab

Rule @@: X Rule @π: X Rule @β:

βsd a, Y βsd b βsd λx .ab

41/46

Example: XY βsd ab

Rule @@: X Rule @π: X Rule @β:

βsd a, Y βsd b βsd λx .ab
Y βsd ab Y βsd a Y βsd b

41/46

Example: XY βsd ab
Rule @@: X βsd a, Y βsd b Rule @π: X βsd λx .ab Rule @β:
X βsd λx .x , Y βsd ab X βsd λx .xb, Y βsd a X βsd λx .ax , Y βsd b
41/46

Example: X (YX ) aβsd
Rule @π: X βsd λx .a
42/46

Example: X (YX ) aβsd
Rule @π: X βsd λx .a Rule @β: X βsd λx .x , YX βsd a
42/46

Example: X (YX ) aβsd

Rule @π: X Rule @β: X
Rule @π:

βsd λx .a βsd λx .x , YX X βsd λx .x , Y

βsd a βsd λx .a

42/46

Example: X (YX ) aβsd

Rule @π: X Rule @β: X
Rule @π: Rule @β:

βsd λx .a βsd λx .x , YX
X βsd λx .x , Y X βsd λx .x , Y

βsd a
βsd λx .a βsd λx .x , X

βsd a.

42/46

Example: X (YX ) aβsd
Rule @π: X βsd λx .a Rule @β: X βsd λx .x , YX βsd a
Rule @π: X βsd λx .x , Y βsd λx .a Rule @β: X βsd λx .x , Y βsd λx .x , X βsd a.
Rule ℵX : X βsd λx .x , Y βsd λx .x , λx .x βsd a
42/46

Example: X (YX ) aβsd
Rule @π: X βsd λx .a Rule @β: X βsd λx .x , YX βsd a
Rule @π: X βsd λx .x , Y βsd λx .a Rule @β: X βsd λx .x , Y βsd λx .x , X βsd a.
Rule ℵX : X βsd λx .x , Y βsd λx .x , λx .x βsd a ¯ Not a solved form
42/46

Main properties
No new matching variables
43/46

Main properties
No new matching variables Termination
43/46

Main properties
No new matching variables Termination Soundness
43/46

Main properties
No new matching variables Termination Soundness Completeness
43/46

Main properties
No new matching variables Termination Soundness Completeness Finite complete match set
43/46

Back to second-order
Applying the previous algorithm in a typed context: We get a new algorithm for second-order matching
44/46

Matching modulo sd and η
The customization is easy
45/46

Matching modulo sd and η
The customization is easy Only generate βη-normal forms for the rule @β
45/46

Matching modulo sd and η
The customization is easy Only generate βη-normal forms for the rule @β Perform η-expansion on the ﬂy
45/46

Matching modulo sd and η

The customization is easy Only generate βη-normal forms for the rule @β Perform η-expansion on the ﬂy

λx .A

η βsd

B,

S

→λ

A

η βsd

Bx ,

S

if B is not an abstraction

and x fresh

45/46

Matching modulo sd and η

The customization is easy Only generate βη-normal forms for the rule @β Perform η-expansion on the ﬂy

λx .A

η βsd

B,

S

→λ

A

η βsd

Bx ,

S

if B is not an abstraction

and x fresh

Proposition
In the context of patterns `a la Miller, this algorithm gives the most general match.

45/46

Conclusion
A new approach to higher-order matching:
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness intuitive and simple proofs (provides by the use of SD)
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness intuitive and simple proofs (provides by the use of SD) second-order matching if applied in a typed context
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness intuitive and simple proofs (provides by the use of SD) second-order matching if applied in a typed context An implementation of the algorithm is available in the Tom language
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness intuitive and simple proofs (provides by the use of SD) second-order matching if applied in a typed context An implementation of the algorithm is available in the Tom language Higher-order rewriting with the untyped λ-calculus with superdevelopments as a meta-language
46/46

Conclusion
A new approach to higher-order matching: in the untyped λ-calculus with a restricted notion of β-equivalence where superdevelopments give the right intuitions
Complete for second-order Complete for patterns `a la Miller Use of η-equivalence is optional The simple algorithms properties: termination, soudness, completeness intuitive and simple proofs (provides by the use of SD) second-order matching if applied in a typed context
An implementation of the algorithm is available in the Tom language
Higher-order rewriting with the untyped λ-calculus with superdevelopments as a meta-language
Higher-order matching in the ρ-calculus

46/46

