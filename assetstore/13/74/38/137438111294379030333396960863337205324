Theoretical Computer Science 26 ( 1983 J 327-333 
North-Holland 
327 
NOTE 
A TURING MACHINE TIME HIERARCHY 
Stanislav &AK 
Institute for Computation Techniques of the Technical Wnioersity, Horskd 3, 12800 Praha 2, 
Czechoslovakia 
Communicated by J. Be&Ii 
Received December 1979 
Revised January 1983 
Abstract. The time separation results concerning classes of languages over a single-1etteK alphabet 
accepted by multi-tape nondeterministic Turing machines. well-known from Seiferas, Fischer 
and Meyer (1978), are supplemented. Moreover, via a universal machine a modified time 
complexity measure UTIME of Turing machines computations which is sensitive to multiplication 
by constants (i.e., UTIME(t) s UTIME(kt), where UTIME( t) is the class of languages jf complexity 
not larger than t) is introduced. On the level of this measure, the results concerning languages 
over one- and two-letter alphabets are refined. The proof tools are versions of 1 translational 
diagonalization and of an unpadding technique. 
Key wards. Turing machine, universal machine, time complexity, complexity hierarchy, nondeter- 
minism, unpadding, single-letter alphabet, diagonalization. 
CR category. F.1.3. 
1. Introduction 
A classical problem in the theory of computational complexity is to find the 
slightest enlarging of the complexity bound which increases the computing power. 
This paper continues the relatively long tradition of investigation of this question 
for the case of time complexity of computations on Turing machines. A thorough 
overview of earlier results in this area can be found in [2]. Before stating our own 
results, let us first recall some standard conventions and introduce some definitions. 
I. 1. Conventions and definitions 
An alphabet is a nonempty finite set of symbols, all alphabets being subsets of 
a fixed infinite set which contains, among others, the symbols 6, 0, 1. A string or 
a word over an alphabet is a finite, possibly empty, sequence of its symbols; 1~1 is 
the length of the word u. A language over an alphabet is a set of strings over this 
alphabet. If X is an alphabet, then X* (X’, X”) denotes the language of all words 
0301-3975/83/$3.00 8 1983, Elsevier Science Publishers B.V. (North-Holland) 
(of p:Jsitive length, of length n, respectively) over X. Two words may be soncate- 
nated, which yields a corresponding operation on languages. N denotes the set of 
natural numbers, OE N. If a is a symbol, then a’ is a string of i repetitions of a. 
By a function or by a bound we always mean a mapping of N into itself. 
We shall call two languages L1, L2 equivalent (L1 -Lz) iff they differ only in a 
finite nurnber of strings. If W is a class of languages, then g(W) will be the class 
of all languages for which there are equivalent languages in W. 
We shall use the same standard model of nondeterministic multitape Turing 
machine (TM) as in [2]. Its tapes, each with a single read-write head, are infinite 
in both directions. The input words are over the alphabet (0, 1); initially they are 
written to the right of the head on the first tape. A TM can act as an acceptor by 
halting in some specified accepting state at the end of a computation. TM’s can be 
coded as binary strings. For simplicity, however, in the following we shall not 
distinguish between TM’s and their codes. The author hopes that this will not cause 
confusion. 
In what follows we mean by a machine a nondeterministic multitape TM, by 
k-tape machine such a machine with k tapes, and by a deterministic machine its 
dctcrministic version. For a machine iv1 and a word II, let A4 ! II dcnotc that A/f 
accepts II. !A4 I will be the language accepted by A,{, t(R4) ‘Z{U jk2 ! II). 
Id M hc a machine and II an input word. We d~finc 
Sow, let us introduce a new time measure, the so-called uniiersal time. Let us 
fix a Stape universal machine U such that, given on its third lape a machine M 
to be simulated, U transforms it into a Z-tape machine kl’ and this in turn into a 
Z-tape fixed alphabet machine AZ”, the machines 121’. M” being such that (i) they 
accept the same language as ‘Zf does, and (ii) compared with A4 ?Aey compute with 
only multiplicative constant time loss. U then performs the computation of IV” 
with only a constant factor further time toss. The feasibility of the first transformation 
(of ICI into A47 computed by U is ensured by [2, Lemma 31, and the second 
transformation is easy. 
For a machine M and a word II we then put 
computation in the U-simulation of ‘$1 on 14. 
imply that we have 
N )(Vir E (0. I}*)(timt~,~(0 1~2 utime,,, (ir \ s c tirnehf (14 11. 
and a bound t, we define the so-called r-cut off’s L’(M), 1,,(AY) 
A Turing machine time hierarchy 329 
Let S be the set of all machines. For a bound t we define 
NTIME(f) = {L I(%d E s)(L = L(kf) = L’())),, 
C’-NTlME\f) = {t(M)IM Ci s), 
UTIME(t) = {L 1 @kf E s)(L = L(M) = L,(M))}, 
GUTlME(f) = {L,(M) I/bf E s}. 
From the speed-up theorem ([2, Lemma 21) it follows that NTIME(~) = 
U kcN uTlME(kt). 
We say that a bound f(rt ), t(n ) 3 11, is a running time if there is a deterministic 
machine T such that L(T) = l* and (Vn eN)(timeT( 1”) = t(rz)). 
1.2. Problems and resulrs 
A typical result in [2] is that for any running time f there is a language L such 
that L E NTIME(f)-~,~(NTIhlE(f’)~f’(~Z -I- 1) =o(f(n))). The results for witness 
languages over a one-letter alphabet obtained there are not so strong. 
We see that for a large class of bounds (e.g., polynomials) these results are the 
best possible, since du_e to the speed-up theorem enlarging of the comple:.ity bound 
by any multiplicative constant has no influence upon the computing Fewer (i.e., 
N’TIME(kf) = N?‘lME(f)~. Therefore, aiming not only to strengthen the results fzr 
languages over a one-letter alphabet (so as to be exactly parallel to those for 
languages over a two letter alphabet) but aiming also further to strengthen these 
results in both one-letter and two-letter cases, we use in this paper the universal 
time complexity as defined above, which is more sensitive to the enlarging of the 
bound. A similar idea of using universal machine complexity was introduced in [3] 
and 141, and has been used by the present author in the case of space complexity 
in [S]. 
In this paper, supposing t(n + 1) = O(t(n )) [i.e., both f(n + 1) = O(t(n)) and t(rz) = 
O(f(n + l))] we are able not only to separate the classes NTIME(~) and 
U,jNrrhlr:(t’) 1 t’(rt + 1) = o(t(n U} but also to insert between these classes an infinite 
increasing chain i?(~--IJTIME(~,, f)) 5 %‘(c-UTTME(~~, f)) 5 . 9 l where kl< k2 < * - - 
are integers. The witness languages are over a single-letter alphabet. 
The main proof tools used in this paper are new versions of a translational 
diagonalization and of an unpadding technique. (Early versions of both were used 
in [S, 61.1 
2. Diagonalization, unpadding and unary languages 
We now present the general form of our diagonalization method, which does 
not depend on any notion of computability or complexity. 
Theorem 2.1. Let C = (L, 1s E S} be a class of languages indexed by a set S, and let 
L be some particular language. Suppose R is a set of (‘unpadded’) strings, and 
F: R +S satisfies (Vs E S)(3”r E R)(F(r) = s). Let t : R + N be such that, for each 
r E R, z (r) satisfies the following two conditioKr l 
(4 rl ‘(“E L ++ r& LFtrj, 
(b) (Vj, 0s j <z(r))(rli EL - rlicl EL&. 
Then L& 8’(C). 
Comment. In our application of Theorem 2.1, C will be the complexity class to 
be diagonalized over, and S will be the set of all machines. Our task will be to 
construct a TM X (a diagonalizer) which will accept a hnguage L, L@ E(C). The 
features of X are well described by conditions (a) and (b). -3n the input rl’, X will 
derive the machine F(r) and then X will try to find whether the input is fully 
padded (j = z (r)); if so, then X will compute according to condition (a). For inputs 
which are not fully padded, X will compute according to condition (b). More details 
are found in the proof of Theorem 2.2 below. 
Proof of Theorem 2.1 (by contradiction). Suppose L E g(C). Hence L -L, for 
some s ES. Moreover, there is an r E R such that F(r) = s and such that L and 
I,, =L Fir, differ only on words shorter than r; in particular, for each j E N, 7 1’ E LF,r, 
ifr rl’ E L. Hence, by condition (b) and then by condition (a), 
A contradiction. :zl 
. L E Y r’rxlE(t ). LE [J {wiwqt’) 1 t’(rl + t ) = o(t(rt I,). 
kl~~w, in the construction of the diagonalizer, we shall use the following unpad- 
ding procedure. We present it implemented on a 2-tape Turing machine T. 
I‘hc :irst tape of ‘r is two-headed; one head goes to the right at full speed, and 
from time to time it writes 1 ‘s-this depends on the computation on the second 
tq~. ixt tr ii) den;Jtc the position of the ith 1. The second head is used for 
A Turing machine time hierarchy 
331 
transferring n (i 1’s to the second tape. We put R = { I”“‘1 i E IV). Assume we have 
a one-tape procedure which generates the machines from S, each infinitely many 
times. 
For each rER: 
Step 1. On the second tape a machine from S is generated, we denote it F(r). 
SIep 2. The first head on the first tape will write a 1 which defines the lrlth position. 
Step 3. r is transferred to the second tape and there it is determined whether 
r E LFlr, (the recursiveness of this is clear). 
After Steps 1, 2 and 3 have been performed, the cycle restarts for the next r. We 
see that (VM E S)(3”r E R)(F(r) = M), since the procedure is infinite. 
In each moment, the outputs are the last F(r) and an indication whether r E LFtr, 
(if this has been determined). 
Let z(r) be a minimal j such that after Irl+ j steps not only F(r) but also the 
indication is contained in the output. 
The desired language L will be accepted by a multitape Turing machine X. 
Computing on the unary input rl’ = l”, X performs Iri+j steps of the procedure 
defined above. After these initial O(n) steps, if j = z(r), then: 
Step A. X accepts iff r@ LFlr,. 
If j < : (r j, X performs the simulation of F(r) by U on rl” ’ and accepts if7 U 
accepts within t(u) steps. In other words: 
Stqr R. rl’EL(X) iffrl”‘ELF,,,. 
Ry [ 11 tht’rc is a machine X’ (having only one head per tape I which computes as 
X does without loss of time. 
By 12, L.emma 21 (speed-up) L(X) = L(X’)E vrnw(t(~z 1). 
Taking into account Steps A and I3, we see that (by Theorem 2.1) I,g FK?. !Il 
Remark 2.4. If we only want to get a witness language over a two-letter alphabet, 
then we may simplify the proof in the following way: put R = {Oi 1 i E IV} and in the 
construction of X replace the unpadding procedure by a simpler one which, when 
computing on f 1’ = Oil’, in the first Irl steps derives F(r) and (if j = z(r)) in the next 
z(r) steps decides whether r E LF,~,. 
Remark 2.5. In Step H of the pri>of of Theorem 2.2 it can be seen what is the 
etfect 6f using the universal measure utime. Aiming at diagonalizing over the class 
8 (NTIhlE(1’)), .x would have to perform t(n ) steps not of the simulator u (as in 
our case) but of the machine F(r). Hence, X would compute within a time larger 
than kt (n ) for each k E N, where different k ‘s correspond to different simulated 
machines. However, using the measure utime, this multiplication by the simulatio:l 
factor k can be omitted. 
Remark 2.6. The similarity of formulation of our result with that from [2] suggests 
a comparison of the proof techniques. In [2] the authors prrve that the language 
Lr ( U) cannot be accepted within a smaller time bound tl if lim tl(n + l)/t(n ) = 0. 
The proof is by contradiction; from the supposition that L’(U) can be accepted 
faster, they derive that all recursive languages can be accepted within a fixed time 
bound f, as follows. For each recursive language L a machine A4 is constructed 
which looks like our machine X. On the sufficiently padded input M computes as 
X. The main difference is on an insufficiently padded input; instead of generating 
the machine F(r) as X does, M writes its own code. In this way M accepts the 
language (x0” 1 x EL, k E IV), but it computes too long. Here the supposition about 
L’(U) is recursively used to reduce the time complexity of M below f. 
One of the differences between our diagonalization method and that of [2] is 
that ours needs no recursion theorem. However, the main difference can be seen 
in the construction of the machines M, X. For these machines we are interested in 
two facts: what languages they accept and within what time they compute. In the 
proof in [Z] it is clear that A4 accepts the right language and the main application 
of the padding technique lies in the proof that M computes within the desirable 
time. In our proof it is clear that X computes within the desirable time and the 
main application of the padding technique lies in the proof that the language 
accepted by X does not belong to the class L%‘(C). 
Cordlary 2.7. If I is a rrrnnirlg time with t(n + 1) = 0( f(rz )), then the foliowirq holds 
fw ecery integer k ; 
if k-rJTrME(kr )) 2 NTIME(t ), 
id there is a witness language ocer- a single-letter alphabet. 
), b an integer. Apply Theorem 2.2 to the running Proof. Suppose t (ft + 1 1 s ht 01 
time kbr. Z 
Example 2.8. For any integer k there is a constant ak and a language Lk G 1+ such 
that L.k E lJ-l-IME&, k, and f.k 6Z ~‘(~~T~h4~;.(~~ k)). 
The existence of such an ak follows from the fact that NIIML:(~) = 
IJ(rirIWAar 1; a E N}. 
U{N-I.IME(t’)lt’(n + 1) =o(f(H )))s 
and there is a witness language ouer a sitlgie-letter alphabet for each proper inclusion. 
Proof. The first inclusion follows from t(n ) = O(t(rl + 1)). The existence of kt, kz, . . . 
to make the inclusion proper follows from t(n + 1) = O(r(/t )), by Corollary 2.7. q 
Acknowledgment 
The author thanks an unknown referee for a substantial simplification of the 
A Turing machine time hierarchy 333 
concepts of diagonalization and also of unpadding technique as they were used in 
the earlier versions of this paper. 
References 
[ll 
PI 
131 
[41 
151 
161 
P.C. Fischer, A.R. Meyer and A.L. Rosenberg, Real-time simulation of multihead tape units, J. 
ACM 19 (1972) 590-607. 
J.I. Seiferas, M.J. Fischer and A.R. Meyer, Separating nondeterministic complexity classes, .!. ACM 
25 (1978) 146-167. 
B.A. Trachtenbrot, About normal signaling functions of computations on Turing machines (in 
Russian), Algebra i Logika 5 (6) (1966) 61-70. 
B.A. Trachtenbrot, Optimal computations and the frequency phenomenon of Jablonskij (in Russian), 
Algebra i Logika (Seminar) 4 (5) (1965) 79-83. 
S. iik, A Turing machine space hierarchy, Kybemetika 15 (1979) 100-121. 
S. &ik, A Turing machine oracle hierarchy, Parts I and II, &mm. Math. Univ Carol. 2i (1980) 
1 l-39. t 
