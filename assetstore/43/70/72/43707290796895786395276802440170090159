Algorithms for the Longest Common Subsequence Problem
DANIEL S. HIRSCHBERG
Princeton Untverslty, Princeton, New Jersey
AaS~ACT Two algorithms are presented that solve the longest common subsequence problem The first algorithm is applicable in the general case and requires O(pn + n log n) time where p is the length of the longest common subsequence The second algorithm requires time bounded by O(p(m + 1 - p)log n) In the common speoal case where p is close to m, this algorithm takes much less time than n~
KEYWORDSANDPHRASES' subsequence, common subsequence, algorithm
CRCATEOORIES 3 73, 3 79, 5 25, 5 39
Introduction
We start by defining conventions and terminology that will be used throughout this paper.
String C = clc~ ... cp is a s u b s e q u e n c e o f string A = aja2 "'" am if t h e r e is a m a p p i n g F : {1, 2 . . . . , p} ~ {1, 2, ... , m} such that F(i) = k only if c~ = ak and F is a m o n o t o n e strictly increasing function (i.e. F(i) = u, F(]) = v, and i < j imply that u < v). C can be formed by deleting m - p (not necessarily adjacent) symbols from A. For example, "course" is a subsequence of "computer science."
String C is a common subsequence of strings A and B if C is a subsequence of A and also a subsequence of B.
String C is a longest common subsequence (abbreviated LCS) of string A and B if C is a common subsequence of A and B of maximal length, i.e. there is no common subsequence of A and B that has greater length.
T h r o u g h o u t this p a p e r , we assume that A and B are strings of lengths m and n , m _< n , that have an LCS C of (unknown) length p.
We assume that the symbols that may appear in these strings come from some alphabet of size t. A symbol can be stored in memory by using log t bits, which we assume will fit in o n e w o r d of m e m o r y . Symbols can be c o m p a r e d (a -< b ? ) in o n e t i m e unit.
The number of different symbols that actually appear in string B is defined to be s (which must be less than n and t).
The longest common subsequence problem has been solved by using a recursion relationship on the length of the solution [7, 12, 16, 21]. These are generally applicable algorithms that take O(mn) time for any input strings of lengths m and n even though the lower bound on time of O(mn) need not apply to all inputs [2]. We present algorithms that, depending on the nature of the Input, may not require quadratic time to recover an LCS. The first algorithm is applicable in the general case and requires O(pn + n log n) time. The second algorithm requires time bounded by O((m + 1 - p)p log n). In the common special case where p is close to m, this algorithm takes time
Copyright © 1977, Associatton for Computing Machinery, Inc General permission to republish, but not for profit, all or part of this material ts granted provtded that ACM's copyright notice is gl~,enand that reference is made to the publication, to Its date of ~ssue, and to the fact that reprinting privileges were granted by permission of the Association for Computing Machinery. This research was supported by a National Science Foundation graduate fellowship and by the National Science Foundation under Grant GJ-35570. Author's present address' Department of Electrical Engineering, Rice Umverslty, Houston, TX 77001
JournaloftheAssoclauonforComputingMachinery.Vol 24.No 4. October1977.pp 664-675

Algorithms for the Longest Common Subsequence Problem

665

much less than n z. We conclude with references to other algorithms for the LCS problem that may be of interest.

pn Algorithm
We present in this section algorithm ALGD, which will find an LCS in time O(pn + n log n) where p is the length of the LCS. Thus this algorithm may be preferred for applications where the expected length of an LCS is small relative to the lengths of the input strings.
Some preliminary definitions are as follows: We represent the concatenation of strings X and Y by XIIY. Ai, represents the string ala2 "" a, (elements 1 through i of string A). Similarly, the prefix of length j of string B is represented by Bu. We define L(i,j) to be the length of the LCS of prefixes of lengths i andj of strings A and B, i e. the length of the LCS orAl, and Bo. (t, j) represents the positions of a, and b, the ith element of string A and the jth element of string B. We refer to i (/) as the t-value (j-value) of (1, j). We define {(0, 0)} to be the set of O-candidates, and we define (i, j} to be a k° candtdate (for k -> 1) if a, = be and there exist i' and j ' such that i' < i, j ' < j , and (i',j') is a (k - 1)-candidate. We say that (i',j')generates (i,j). Define a0 = b0 = $ where $ is some symbol that does not appear in strmgsA or B. LEM~A 1. For k -> 1, (t, j) is a k-candidate i f f L(i, j) >- k and a~ = bj. Thus there is a c o m m o n subsequence o f length k o f A l~ and B w PROOF. By induction on k. (i, j) Is a 1-candidate iff a, = be (by definition), in which case L(i, j) necessarily is at least 1. Thus the lemma is true for k = 1. Assume it is true for k - 1. Consider k. If (t, j) is a k-candidate then there exist i' < i and j ' < j such that (i',j') is a (k - 1)-candidate. By assumption, there is a common subsequence D' =
dldz "" dk-l of Ale, and B~j,. Since a~ = bj ((i, j) is a k-candidate), D = D ' Ila~ Is a
common subsequence of length k of Aim and B~. Thus L(i, 1) -> k. Conversely, if L ( i , j) >- k and a~ = bj, then there exist i' < i a n d j ' < j such that ae =
bj, and L(i', 1') = L(i, j) - 1 -> k - 1. (i', j ' ) is a (k - D-candidate (by inductive hypothesis) and thus (i, j) is a k-candidate. []
The length of an LCS is p, the maximum value of k such that there exists a kcandidate. As we shall see, to recover an LCS, it suffices to maintain the sequence of a 0candidate, 1-candidate .... , (p - 1)-candidate, and a p-candidate such that in this sequence e a c h / - c a n d i d a t e can generate the (i + 1)-candidate for 0 --<i < p.
Rule. L e t x = (x~,x2) a n d y = (ya, y~) be two k-candidates. Ifx~ >- y~ a n d x 2 ~- Y2, then we say that y rules out x (x ~s a superfluous k-candidate) since any (k + 1)candidate that could be generated by x can also be generated by y. Thus, from the set of k-candidates, we need consider only those that are minimal under the usual vector ordering. Note that l f x and y are minimal elements then x~ < y~ iffx2 > Y2.
LEMraA 2. Let the set off k-candtdates be {(i~, 1~)} (r = 1, 2 . . . . ). We can rule out candidates so that (after renumbering) t~ < i2 < "'" and j~ > j2 > "".
PRoov. Any two k-candidates (l, j) and (t', j') satisfy one of the following (without loss of generality, i -< i'):
(1) i <t', j-<j'. (2) i<i'.j >j'. (3) t =i', j--<j'. (4) i =t', j >j'. In cases (1) and (3) (t',j') can be ruled out; m case (4) (i,j) can be ruled out; and case (2) satisfies the statement of the lemma. Thus any set of k-candidates whtch cannot be reduced by further application of the rule will satisfy the condition stated in the lemma'. [] The set of k-candidates, reduced by apphcatmn of the rule so as to satisfy the statement of Lemma 2, are the minimal elements of the set of k-candidates (since no

666 DANIEL $. HIISCHltEIIG
element can rule out a minimal element) and will be called the set of minimal kcandidates. By Lemma 2, there is at most one minimal k-candidate for each i-value.
We note that if (i, j) is a minimal k-candidate then L(/, j) = k and (i, ]) is the kcandidate with/-value i having smallest j-value] such that L(i, j) = k.
LEMMA 3. For k -~ 1, (i, ]) is a mintmal k.candtdate iff ] is the minimum value such that b~ ffi a, and low < ] < high, where high is the minimum ].value o f all k-candidates whose i-value is less than i (no upper limit if there are no such k-candidates) and low is the mmimum ]-value ofall (k - 1)-candidates whose i-value is less than i.
PROOF. Assume that (i, ]) is a minimal k-candidate. I f ] -> high then there is a kcandidate ~/', j ' ) such that i' < i a n d ] ' = high _<j. <i, j) would be ruled out by ~/', j ' ) and thus would not be minimal.
If] _< low, then there is no (k - 1)-candidate that can generate (i, j). (i, j) would not be a k-candidate.
bj = at is required by the definition of k-candidate and low < j < high has just been shown. If] and ]' both satisfy these constraints, j < j', then (i, j'> is ruled out by (i, j). Thus, for a particular i, j must be the minimum #value of all k-candidates satisfying these constraints.
The if of the lemma has thus been shown. The converse is easily shown: If (i, j) is not a k-candidate, then either at ~ b~ or there is no (k - 1)-candidate that can generate <i,]). That is, thej-value of all (k - 1)-candidates with/-value less than i is greater than or equal to ]. This is equivalent to ] _< low. If {i,/) is a k-candidate but is not minimal, say (i',]') rules out (i,]), then i' -< i a n d ] ' _< ]. I f / ' < i, then clearly] < high is violated. Otherwise, i' = i. In this case]' > low since (i', j'> must be generated from a (k - 1)-candidate and b~, = a, since <i', j) is a kcandidate. Also# < j < high. Thusj' satisfies all the constraints and] is not the minimum value that does so, a contradiction. [] We present algorithm ALGD, which, using the results of Lemma 3, obtains an LCS C of length p of input strings A and B in time O(pn + n log n). The algorithm is based on an efficient representation of the L matrix. Since L is nondecreasing in both arguments, we may draw contours in its matrix as shown in the following example:
B
c boc bo abo

0 ,, ,,,
b O0~,,.L) I ~.~ 2 2 2 2

c i~112 ~ 1I 2 2 2 2 2

Ad

22 222

b IlIl 2~2 2 ~ 3 3 3 3
b 2 3 3 ~4~-

The entire matrix is specified by its contours. The contours are described by sets of minimal k-candidates. The contour between L-values ofk - 1 and k is defined by the set of minimal k-candidates whose elements are positioned at the convex corners of the contour.
To keep track of the minimal k-candidates, we use the matrix D. D[k, i] is the j-value of the unique minimal k-candidate having/-value of i or 0 if there is no such minimal kcandidate. Thus D[k, i] describes the contours by giving the number of the first column of row i that is in region k (if that number is different from D[k, ~ - 1]).

Algorithms for the Longest Common Subsequence Problem

667

lowcheck is the smallest/-value of a (k - 1)-candidate. FLAG has value 1 iff there are
any k-candidates. NB[O] is the number of times symbol 0 occurs in string B. PB[O, 1] . . . . .
P B [0, N B [0]] is the ordered list, smallest first, of positions in B in which symbol 0 occurs.
If t, the size of the symbol alphabet, is not large compared to n, then we may index an array by the bit representation of a symbol. Otherwise, if t >> n, then we construct a balanced binary search tree which provides a mapping from symbols that appear in string B to the integers 1 through s (there are s different symbols that appear in B). Whenever string element a, appears as an array subscript (as in N[a,]), it should be understood that we are indexing N by the integer s, which has been obtained (during initialization for ALGD) from traversing the search tree just described. If a, does not appear in B, then the integer s, is zero. A n equivalent assumption is followed for subscript b~ in step 1.

ALGD(m, n, A, B, C, p)

1. NB[O],~-OforO = l , . ,s

PB[O,O]~--OforO= l,. ,s
en[0, 0] ~ 0; PB[0, 1] ~ 0

for j * - 1 step 1 until n do
~in

NB[bj] ~ NB[bj] + 1

eB[bj, NB[b~]] ~ j

end

2 D[O,i]~.-Oforz=O,.. ,m

lowcheck ~-- 0

3. fork ~lstepldo
~gin 4. N[O]~ NB[O] for 0 = 1,
N[0] ~ 1

,s

FLAG ~ 0

low ~ D[k - 1, lowcheck] high ~ n + 1

5. for t ~ lowcheck + 1 step 1 until m do
begin
6. while PB[ai, N[at] - 1] > l o w do N[a~] ~ N [ a , ] - 1
7 if htgh > PB[a~, N[a~]] > low then begin htgh ~ PB[a,, N[a,]]

D[k, t] <--high if F L A G = 0 then {lowcheck ~-- t, F L A G ~-- 1}

end

else D[k, ,] *- 0

8 if D[k - 1, t] > 0 then low ~ D[k - l, t]
end loop of step 5 9. if FLAG = 0 then go to step 10
end loop of step 3
10 p c - - k - 1

k~-.-p

fort~m + 1 step- luntilOdo

if D [ k , ~]> 0 then I~gin

Ck ~- ai k,,--k-1

end

The loop of step 3 evaluates the set of minimal k-candidates for k = 1, 2, .... The loop of step 5 evaluates the set of minimal k-candidates, smallest/-value first, and fills in the D array accordingly (in the example given previously this is left-to-right) while scanning the chains of occurrences of a given character in B with largestj-value first (right-to-left). For each i, i can be the/-value of a minimal k-candidate if there is a ] satisfying the constraints of Lemma 3. This is tested by determining the minimum]-value of symbol a, that is greater than low, If that value is less than htgh, then (i,]) is a minimal k-candidate.

668

DANIEL S. HIRSCHBERG

There can be no k-candidate with/-value less than or equal to lowcheck, so the loop of step 5 begins at lowcheck + 1. lowcheck is set, in step 7, when the first minimal k-
candidate (that having smallest/-value of all k-candidates) is determined. LEMMA 4. A L G D evaluates the correct values of high and low (as defined m
Lemma 3) for determining whether each k-candidate (i, j) is minimal. PRoov. high is supposed to be the minimum ]-value of all k-candidates with/-value
less than i high is imtialized at n + 1 (i.e. does not limit) in step 4, before any k-
candidates have been generated. Thereafter, if any k-candidates are found to be minimal
(in step 7), then, since the ]-values of minimal k-candidates decrease as the t-values increase, the mimmumj-value of all minimal k-candidates with t-value less than i will be the ]-value of the minimal k-candidate with greatest/-value less than i (i.e. the last one
found, since we generate minimal k-candidates in order of increasing/-value). The j-
values of ruled-out (nonminimal) k-candidates cannot be smaller than the ]-value of the last minimal k-can&date high is updated to the most recent/-value each time a new minimal k-candidate is found in step 7. Thus high has value as defined in Lemma 3.
low is supposed to be the minimum ]-value of all (k - 1)-candidates whose/-value is less than i. Again, sincej-values decrease as/-values increase, low should be thej-value of the (k - 1)-candidate whose/-value is as great as possible but less than i. low is initialized in step 4 to be the ]-value of the first (lowest/-value) (k - 1)-candidate. As i
increases, if there was a minimal (k - 1)-candidate with/-value of i, then the mimmum permissible j-value will decrease and low is updated (in step 8) for the next iteration. []
LEMMA 5. A L G D correctly determines the set of minimal k-candtdates. PaooF. By Lemma 4, high and low are computed correctly. We must show that in the loop of steps 5-8 D[k, i] gets the mlnimumj-value (0 if none) such that b~ = a~ and low < j < high.
The ]-values of successive minimal k-candidates decrease in value since their/-values increase. In looking for D[k, i] we look for a match for symbol a, in string B, and we can restrict our attention to occurrences (j-values) of symbol as in string B that are before (less than) the last occurrence (]-value) that was examined. Step 6 does that. PB[a, o] is the ordered list of j-values of symbol a, and N[a,] points to the smallest ]-values (in PB) of symbol at that has been examined. Initially, m step 4, N[a,] points to the last occurrence of symbol at. If the last-examined ]-value of a, is greater than low, step 6 sets N[a,] to point to the lowestj-value of at that is greater than low. If the lastexamined ]-value of a, is not greater than low, then there can be no minimal kcandidate for this value of i since the minimum ]-value that is greater than low either
violates the high constraint or results in a candidate that can be ruled out. In this case step 6 does nothing, the test in step 7 fails, and D[k, i] is set to zero. []
THEOREm 1. A L G D correctly computes the LCS of strings A and B. PROOF. By Lemma 5, A L G D correctly determines the set of minimal k-candidates.
Thus, if there are any k-candidates, at least one is minimal. If (t, j) is the pth match in an LCS which is of length p, then, by Lemma 1, (/, j) is a p-candidate. Thus there is at
least one minimal p-can&date (and there are no (p + D-candidates). Step 10 of ALGD recovers a common subsequence of length p by recovering a sequence of (/-values o0 minimal candidates such that the minimal k-candidate generated the
minimal (k + D-candidate. [] THEOREI~ 2. Assuming that symbols can be compared in one time unit, A L G D
requires time of O(pn + n log s), where s is the number of different symbols that appear in string B.
PROOF. Step 1 can be done in time O(n log s). Step 2 can be done in time O(m). Step 3 executes steps 4-9 p times. Step 4 takes time O(s) per execution, s -< n, for total time less than or equal to O(pn). Step 5 executes steps 6-8 at most m times, a total of at most pm times. The while loop in step 6 is executed at most n times within the loop of step 5 since the N[O] are not increased within this loop (each position of B is examined at most once for each value of k). The total time in step 6 is therefore O(pn)

Algorithms for the Longest Common Subsequence Problem

669

Steps 7 and 8 are done in constant time. Total time is O(pm). Step 9 is done in constant time. Total time is O(p). Step 10 is done in time O(m). Total execution time is thus as stated above. []
Note that for p _> O(log s), A L G D requires time O(pn).

pe log n Algorithm
We now consider a special case that often occurs in applications such as determining the discrepancies between two files, one of which was obtained by making minor alterations to the other (and we wish to recover those alterations). We assume that there is an LCS of length at least m - ~ (for some given ~).
If C is an LCS of A and B, there will be at most ~ elements of A that do not appear in C. The position of each such element will be called a skipped position. Thus there are at most E skipped positions. We define e to be ~ + 1.
If (t,j) is a minimal k-candidate that can be an element in an LCS (that is, a, = bj is the kth element of an LCS), then k -< i -< k + ¢ (otherwise more than E positions i n A would be skipped). We shall call such candidates feasible k-candidates. Let h = i - k. Then 0 -< h <- ~ and h is the n u m b e r of positions in A that have been skipped thus far (through ak+h). By Lemma 2, there is at most one feasible k-candidate with/-value of i.
Let the feasible k-candidate pairs (/-value andj-value) be held in arrays F and G, e.g. (h + k , / ) would be described by F[h] = h + k, G[h] = j. If there is no feasible kcandidate with/-value h + k, let F[h] = F[h - 1], G[h] = G[h - 1], and define F [ - 1 ] = 0, G [ - 1 ] = n + 1. By this construction and by Lemma 2, F is a nondecreasing sequence and G is a nonincreasmg sequence.
Define NEXTB(O, j) to be the minimum r > 1 such that br = 0. If there is no such r, then NEXTB(O, j) is defined to be n + 1.
LEMMA 6. I f (i, j) is a feasible k-candidate, then j = N E X T B ( a , G[h]), where h = i k and where G[h] is the value assoctated with the set or feasible (k - 1)-candidates.
PROOF. Let (i, j) be a feasible k-candidate. By definition of k-candidate, there must exist i' < i and f < j such that <i', j') is a feasible (k - 1)-candidate. By Lemma 3, j is the minimum (over possible j ' ) of N E X T B ( a , , j ' ) . But j" < j' implies that NEXTB(O, j") _< NEXTB(O, ]'). Therefore I = N E X T B ( a , , mm possible j ' ) . Since jvalues of minimal k-candidates decrease as their /-values increase, the minimum possible j' is the/-value of the feasible (k - 1)-candidate whose t-value is as large as possible but less than i = h + k, i.e. not more than h + (k - 1). G[h] is precisely that /-value. So we conclude thatj = NEXTB(a, G[h]). []
In order to be able to recover an LCS, we shall keep track (for each feasible kcandidate) of which h positions in A have been skipped. A straightforward method, keeping values of F[h] for all h and k, requires space of O(pc). We shall use a data structure that requires only O(e2 + n) space without changing the order of magnitude of time requirements.
Let there be an array KEEP whose elewents are trtples such that
KEEP[x] = (aa[x], nskip[x], pt Ix]).
P is an array of size e such that, after the set of feasible k-candidates has been determined, x = P[h] will be the index of the element of KEEP that has information enabhng recovery of a common subsequence that has aFtn] = bGtnj as its kth element. F[h] = h + k, and thus precisely h of the elements a~, . . . , aFthl will not appear in the common subsequence. To recover the common subsequence, it is sufficient to recover these h skipped positions. Ifx = 0, then no positions were skipped, and ifx < 0, then there is no common subsequence to be recovered.
The method of recovery is as follows: If x is zero, there are no more skipped positions to be recovered. Otherwise, aa[x] is the largest index of a skipped position in string A . nskip[x] is the number of consecutive positions ending in aa[x], all of which are skipped positions.

670 DANIEL S. HIRSCHBERG
If all of the skipped A-positions have been recovered, then pt[x] is zero.
Otherwise, pt[x] is the index of KEEP that has information enabling recovery of the
skipped A-positions having indices smaller than aa[x] - nskip[x] + 1.
Example. If positions 2, 5, 6, 7, 9, 10 in string A correspond to a common
subsequence of length 6 (of A1, ~0), then h = 4 and KEEP[ P[4]] will enable recovery of
positions 1, 3, 4, 8: aa[P[4]] = 8, nskip[P[4]] = 1, pt[P[4]] = y (another index of
KEEP). an[y] = 4, nskip[y] = 2 (positions 3 and 4 have been skipped), pt[y] = z. an[z] = 1, nsklp[z] = 1, pt[z] = 0 (all skipped positions have been recovered).
Reference counts are kept for each element of KEEP. Spaces in the KEEP array are
maintained by garbage collection functions GETSPACE which provides an available
space and PUTSPACE which places a newly available space (i.e. one whose reference count drops to zero) on the garbage linked list. See [10] for implementation techniques.
We now present ALGE, which uses Lemma 6 in order to solve the LCS problem in time O(pe log n):
A L G E (m, n, A , B, C, p, e)
1 F[h], G[h] ~ 0 for h = 0. . . . • P[O] ~-- O; P [ h ] ~ - - - l f o r h = 1, , •
2 for k ~ 1 step 1 while there were candidates found m the last pass do begin
3 lmax ~-- 0 jrmn ~ n + 1
4 for h ~ 0 step 1 until e do begin
5 t~--h+k J ~ N E X T B ( a . G[h]) ff l ->Imm
6 then begin F[h] ~ lmax G[h] ~ Imm NEWP[h ] <---- 1
end
7 else begin nsktp ~ (, - 1) - F [ h ] if nsklp = 0 then NEWP[h] ~ P[h]
else begin NEWP[h] ~ GETSPACE KEEP[NEWP[h]] ~ (l - 1, nsktp, P[h - nsktp])
end
8 lmax ~ l Imm *-1 F[h] ~ l G[h] ~'-1
end
9 end loop of step 4 10. if no k-candidates were found then gotn step 13
for : *- 0 step l until • do begin
11 REMOVE(PIt]) Pit] ~ NEWP[t]
end loop of step 10 12 end loop of step 2 13 x ~ mm h such that P[h] _> 0, -1 if none such
pc--k-1 ifx < 0 0 R p < m - • then {print "NO", gain step 15} 14. R E C O V E R 15 END of ALGE
SUBROUTINE RECOVER
1 SKIP[x + 1] <--0 lastmatch <-- Fix] y ~ P[x]

Algortthms for the Longest Common Subsequence Problem

671

2 whiley ~ do
begin
count ~ nsk~p[y] posttton ~ aa[y] 3 while count > 0 do
begin
SKIP[x] ~ posttlon x~-x-1 positzon ~--posttton - 1 count ~--count - 1 end loop of step 3 y ~- pt[y] end loop of step 2 4. x ~-- 1 k~-I
for t ~- 1 step 1 until lastmatch do
if~ = SKIP[x] thenx ~--x + 1
else begin
Ck 4.-- az
k~-k+l
end
5 END OF RECOVER
The loop of step 2 evaluates sets of feasible k-candidates for k = 1, 2, . . . . The loop of step 4 evaluates w h e t h e r there ~s a teasible k - c a n d i d a t e having precisely h skipped positions, for h = 0, 1, ... , e, by using Lemma 6 to determine the j-value for a particular t-value and then checking, by using Lemma 2, whether (i, j} is minimal, imax is the maximum t-value of feastble k-candidates generated thus far (i.e. wtth/-values
less than the current value of i); jmm is the corresponding j-value (which is the minimum j-value of feasible k-candidates generated thus far). If (i, j} is a feasible k-
candidate, then it is stored in the F and G arrays and information wtll be stored in P[h], enabhng recovery of any additional skipped positions that occur between i and F[h] as well as the skipped positions occurring before F[h] ((F[h], G[h]) is a (k - 1)-candidate that can generate (i, ])). The h skipped positions corresponding to (F[h], G[h]) are recoverable by accessing KEEP[P[h]]. In general there may be more than one feasible k-candidate that will be generated by (F[h], G[h]). Thus we must not destroy P[h] until all required references to KEEP[P[h]] are made. For this reason, new values for the P array are stored in the NEWP array. When we no longer need the old values of P (after the inner loop of steps 4-9), we can then replace them with the new values, being careful to decrement reference counts of KEEP elements that were pointed to by the old P array
F u n c t i o n R E M O V E ( x ) d e c r e m e n t s the reference c o u n t of K E E P [ x ] (unless x --< 0, in which case nothing is done), and, if KEEP[x] now has reference count zero, then a call will be made to REMOVE(pt[x]) after KEEP[x] has been put on the garbage linked list by using PUTSPACE.

Implementation of NEXTB
The following should be done before using ALGE:
1 Sort the symbols m A and then construct a balanced binary search tree of symbols that appear in string A Let there be ss such symbols (ss -< m).
2. for k ~ 1 step 1 until ss do LAS'I~k] ,-- 0
3 for i ~-- 1 step 1 until n do
begin
find out that bt = 0k 1 ~ LAST[k] LAST[k] ~ t ifI ~ 0 then NEXT[i ] ~-- t else FIRST[k] ~--t end loop of step 3

672 DANIEL S. HIRSCHBERG
4. start z.- 1
for k ~ 1 step 1 until ss do
bet~Jn Place the positions j of B such that bj = 0~ into N [ s t a r t ] through N [ s t a r t + nn - 1] where 0~ occurs nn times in string B. The first posmon in B at which0k occurs Is at FIRST[k]. If 0~occurs at positionj, then the next occurrence of 0~ in B wdl be at posinon NEXT[i] unless LAST[k] =j, in whichcase there arc no more occurrences of 0~ in B. S[k] ~ start start ~ start + nn
end
We can find out that a, = 0k m time O ( l o g s ) . N[S[1]:S~k + 1] - 1] holds the block of positions j with b e = 0~. This block of cells can be searched by using binary search of a hnearly ordered array [11, Sec. 6.2.1]. NEXT(a, j) can thus be executed in time O(log n).
If s is very small, then the following alternate way of computing NEXTB(O, j) may be preferred: Instead of constructing a compressed array in step 4, construct a NEXTB matrix while in step 3. For each l, set N E X T B [ k , t] = i f o r j _< t < i. This will result in time and space complexity (of the setup) of O(sn). The function NEXTB(O, j) can be evaluated by determining that 0 = 0k in time O(log S) and by doing a simple table lookup.
ALGE retains k-candidates, as did ALGD, except for those candidates that cannot lead to a sufficiently long common subsequence because too many A-positions have already been skipped. The (k + D-candidates that can be generated by the dropped kcandidates also skip too many A-positions.
LEMMA 7. A L G E retains all feasible k-candidates. PROOF. By induction on k. It is trivially true for k = 0 (the F and G arrays are initialized to zero in step 1). Assume that the set of feasible (k - 1)-candidates has been evaluated and stored in arrays F and G. ALGE generates the set of feasible kcandidates in order of increasing/-value. F[h] is to hold i = h + k if i is an/-value of a feasible k-candidate; otherwise F[h] Is to hold the maximum i' < i such that i' is a feasible k-candidate. G[h] is to hold the corresponding j-value, imax and jmin hold the last-generated feasible k-candidate, which, by Lemma 2, has the maximum/-value and minimumj-value generated thus far. Step 3 initializes them to correctly indicate that no k-candidates have yet been generated. Step 5 evaluates the j-value for a given potential k-candidate by using Lemma 6. Ifj _>jmin then, even though the necessary condition for feasibility has been met, (i, ]) is not minimal since it would be ruled out by (imax, jmin). In this case step 6 sets F[h] and G[h] to imax andjmin. Ifj < jmin, then (i,j) is minimal since it cannot be ruled out by any previously generated k-candidate (/ < jmm) and it cannot be ruled out by any future generated k-candidate (all future i' > i). In this case step 8 sets F[h] and G[h] and also updates tmax and jmin. []
THEOREM 3. A L G E correctly computes the L C S o f strings A and B if the L C S is o f length at least m - ~.
PROOF. By L e m m a 7, A L G E correctly keeps minimal k-candidates. Thus, if there is a common subsequence of length p .~ m - ¢, then there is a minimal p-candidate which will be feasible. The data structure of ALGE keeps track, for each feasible kcandidate (t, j), of the h = i - k positions in string A that have been skipped in the common subsequence of length k of At, and Bls. P[h] points to the element of KEEP that contains the necessary information. P is updated in step 7 when a feasible kcandidate is generated. If any additional positions are skipped (between the k-candidate (i, j) and the (k - 1)-candidate (i', j') that generated (i, ])), then that information is recorded in an element of KEEP as well as a pointer, enabling recovery of the h nskip previously skipped A-positions (of (i', j')). Subroutine RECOVER recovers the skipped posiUons of a feasible p-candidate by reversing the process in which they were stored and then computes the LCS by deleting the skipped positions from string A. []
THEOREM 4. For ~ _< O(nlt2), A L G E requires space linear m n.

Algorithms for the Longest Common Subsequence Problem

673

PROOF. The KEEP array requires O(e 2) space: The common subsequence implied by k-candidate (h + k,j~ has h skipped A-positions, h <- ~, and thus can use at m o s t h spaces in the KEEP array. The total number of spaces referred to by all feasible k-candidates is
thus at most ~(e + 1)/2. Adding to that the (exactly) E references to get the set of feasible
(k + 1)-candidates gives a total of no more than (e2 + e)/2. Each element of array KEEP requires four words (aa, nskip, pt, and a reference counter).
The arrays and space that they use are as follows: Fie], G[e], C[p], Pie], NEWP[e], KEEP[2e 2 + 2e], FIRST[ss], NEXT[n], LAST[ss], SKIP[e], S[ss], N[n].
The NEXTB function requires at most 2n locations to store the various balanced
binary search trees.
Thus a total of at most 2e~ + 7e + 4n + p + 3ss locations is used. F o r e -< 0(nl/2), space
requirements are linear in n. []
THEOREm 5. A L G E requires time O(pe log n). PROOF. Preprocessing for the NEXTB function requires time O(n log m). Step 1
takes time O(e). Step 2 executes steps 3-12 p times. Step 3 takes constant time for a
total time of O(p). Step 4 executes steps 5-9 at most e times. Step 5 takes time O(log n) for a total time of O(pe log n). Steps 6-9 take constant time for a total time of O(pe). Steps 10-12, excluding time spent in function REMOVE, take time O(e) for a total time of O(pe).
Subroutine RECOVER recovers at most c skipped positrons (taking time O(e)) and then deletes them from string A (taking time O(m)) for a total time of O(m).
The number of references (to array KEEP) removed is at most the number of references inserted. There are at most pe references inserted (one per execution of step 7), and the amount of time (per reference removal) spent in function REMOVE is constant. Therefore the total time spent in function REMO VE is O(pe).
Therefore the total time of execution of ALGE is O(pe log n). []
It is noted that step 5, reqmring O(log n) time, is the bottleneck, causing total time
requirements of O(pe log n). P. van Emde Boas's recent algorithm for priority queues
[19] appears capable of solving the position-finding problem in time O(log log n). If so,
this would reduce the time bound of this problem to O(pe log log n). A L G E assumes that c is known. If ~ is not known, then set E ~-- 2 and proceed
through the algorithm. If that value of ~ is insufficient (i.e. there is no common
subsequence of length m - e), then double the guess for e and continue iteratively until
a common subsequence is found. Total time spent will be (letting k be the multiplicative coefficient of the time
requirement)

2pk logn + 4pk logn + ... + epk logn,

which is less than 2pek log n. Since e < 2(m + 1 - p), we can recover an LCS in time O(p(m + 1 - p)log n).

Other Algorithms
The only known algorithm for the LCS problem with worst-case behavior less than quadratic is due to Paterson [14]. The algorithm has complexity O(n~log log n/log n). It uses a "Four Russians" approach (see [3] or [1, pp. 244-247]). Essentially, instead of matrix L (where L[t, j] is the length of an LCS of A1, and Btj) being calculated one element at a time (see [7]), the matrix is broken up into boxes of some appropriate size
k. The high sides of a box (the 2k - 1 elements of L on the edges of the box with largest indices) are computed from L-values known for boxes adjacent to it on the low
side and from the relevant symbols of A and B by using a look-up table which was precomputed.
The algorithm assumes a fixed alphabet size although modifications to the algorithm may be able to get around that condition.

674 DANIEL S. HIRSCHBERG
There are 2k + 1 elements of L adjacent to a box on the low side. Two adjacent L-
elements can differ by either zero or one. There are thus 22k possibilities in this respect. The A- and B-values range over an alphabet of size s for each of 2k elements, yielding a multiplicative factor ofs zk, and the total number of boxes to be precomputed is therefore
2~kt~+l°gs~. Each such box can be precomputed in time O(k ~) for a total precomputing
time of O(k~22k~+l°g ~).
There are (n/k)z boxes to be looked up, each of which will require O(k log k) time to be read, for a total time of O(n21og k/k).
The total execution time will therefore be O(k~2~k~+~°gs~ + n21og k/k). If we let k = log
n/2(1 + log s), we see that the total execution time will be O(n21og log n/log n).
Restrictions on the LCS Problem
Szymanski [17] shows that ff we consider the LCS problem with the restriction that no symbol appears more than once within either input string, then this problem can be solved in time O(n log n).
In addition if one of the input strings is the string of integers 1 - n, this problem is equivalent to finding the longest ascending subsequence in a string of distinct integers. If we assume that a comparison between integers can be done in unit time, this problem can be solved in time O(n log log n) by using the techniques of van Emde Boas [18}.
ACKNOWLEDGMENT. I would like to thank the (anonymous) referees for their many helpful suggestions which have led to a material improvement in the readability of this paper.
REFERENCES
(Note References [4-6, 8, 9, 13, 15, 20, 22, 23] are not oted m the text.)
1 AHO, A V , HOPCROFr, J E , AND ULLMAN, J D The Design and Analysis of Computer Algortthms Addison-Wesley, Reading, Mass, 1974
2 Ario, A V , HmSCHBER6, D . S , AND ULLUAN, J D Bounds on the complextty of the longest common subsequenee problem J ACM 23, 1 (Jan 1976), 1-12.
3 ARLAZAROV,V L,, DINIC, E A , KRONROD,M A , AND FARADZEV, I A On economic construction of the trans~ttve closure of a dtrected graph Dokl Akad Nauk SSSR 194 (1970), 487-488 (m Russian) Enghsh transi Jn Sovtet Math Dokl 11, 5 (1970), 1209-1210
4 CnVATAL,V , KLARNER, D A , AND KNUTrI, D E Selected combinatorial research problems STANCS-72-292, Stanford U , Stanford, Cahf, 1972, p 26
5 CItVATAL, W , AND SANKOFF, D Longest common subsequences of two random sequences STAN-CS75-477, Stanford U , Stanford, Cahf, Jan 1975
6 HIRSCnBER6,D S On finding maximal common subsequences TR-156, Comptr So L a b , Princeton U , Princeton, N.J , Aug 1974
7. HIRSCHEERG,D S A hnear space algorithm for computing maximal common subsequences Comm ACM 18, 6 (June 1975), 341-343
8 HIESCr~EERG,D S The longest common subsequence problem Ph D Tb , Princeton U , Princeton, N J , A u g 1975
9 HUN1", J W , AND SZYMANSKI, T G A fast algorithm for computing longest common suhsequences Comm ACM 20, 5 (May 1977), 350-353.
10 KNUTn, D E The Art o f Computer Programming, Vol 1. Fundamental Algorithms Addison-Wesley, Readmg, Mass., sec. ed , 1973
11 KNUTTn,D. E The Art o f Computer Programming, Vol 3" Sorting and Searching. Addison-Wesley, Reading, Mass., 1973
12 LOWRANCE, R , AND WAGNER, R A An extension of the string-to-string correction problem J ACM 22, 2 (April 1975), 177-183
13 NEEDLEMAN, S B , AND WUNSCH, C D A general method applicable to the search for slmdantles m the amino acid sequence of two proteins J. Mol Biology 48 (1970), 443-453
14 PATERSON,M.S Unpubhshed manuscript U of Warwick, Coventry, England, 1974 15 SANKOFF,D Matching sequences under deletion/insertion constraints Proc Nat Acad Sct USA 69, 1
(Jan 1974), 4-6 16 SELLERS, P H An algorithm for the distance between two fmlte sequences J. Combmatortal Theory,
Ser A, 16 (1974), 253-258

Algorithms for the Longest Common Subsequence Problem

675

17 SZYMANSKI,T G A special case of the maximal common subsequence problem TR-170, C o m p t r Scl Lab , Princeton U, Princeton, N J , Jan 1975.
18 VAN EMDE BOAS, P A n O(n log log n) on-hne algorithm for the insert-extract rain problem T R 74-
221, Dept Comptr Sol , CorneU U , Ithaca, N Y , Dec 1974 19 VAN EMDE BOAS, P. Preserving order in a forest m less than logarithmic time Conf Rec 16th Annual
Symp on the Foundations of Comptr SOl , Oct 1975, pp 75-84 20 WAGNER, R A On the complexity of the extended string-to-string correction problem Proc Seventh
Annual ACM Syrup on Theory of Comping , 1975, pp 218-223
21 WAGNER, R A , AND FISCHER, M J The string-to-string correction problem J. ACM 21, 1 (Jan
1974), 168-173
22 WoNo, C K.. AND CRAtqDRA, A . K bounds for the string editing problem .Jr ACM 23, 1 (Jan 1976),
13-16
23 YAO, C C , AND YAO, F C On computing the rank function for a set of vectors UIUCDCS-R-75-699,
Dept Comptr Sc~ , U of lllinols at Urbana-Champalgn, Urbana, I11 , Feb 1975.

RECEIVED JUNE 1975, REVISED FEBRUARY 1977

Journal of the Associationfor ComputingMachinery,Vol 24, No 4, October 1977

