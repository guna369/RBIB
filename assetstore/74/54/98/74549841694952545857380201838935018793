A Relational Theorem on the Correctness of General Recursive Programs
A Relational Theorem on the Correctness of General Recursive Programs
Jaime A. Boh´orquez V. jbohorqu@escuelaing.edu.co Escuela Colombiana de Ingenier´ıa
Mai 2, 2006

A Relational Theorem on the Correctness of General Recursive Programs
Agenda
1 Context 2 Regular Operators 3 Correctness of Regular Recursive Programs 4 Applications 5 Conclusions

A Relational Theorem on the Correctness of General Recursive Programs Context
Context
Identify programs and speciﬁcations with their associated input-output relations on a space state Σ. A programming theory may be developed within the framework of Tarski’s relational calculus where programs and speciﬁcations (possibly non-deterministic) are considered as logical predicates. Look at recursive program deﬁnitions as ﬁxed point equations associated to relational operators, whose solutions include the input-output relations corresponding to such programs. Conditions (boolean expressions on Σ) correspond to relations whose domains coincide with the set of those initial states in which the condition holds, and which relates each member of its domain onto any ﬁnal state whatsoever.

A Relational Theorem on the Correctness of General Recursive Programs Context
Continuous Operators

According to Knaster-Tarski theorem for a continuous relational
operator f (function from relations to relations on Σ) the equation X = f .X has a solution on Σ (a complete lattice). There may be many solutions; the least of them is µf , the least ﬁxed point of the operator f . The continuity of f implies that µf can be constructed as the union of a series of approximations obtained by its iteration:

where and

µf = f n. O
n>0
f 0.R = R f n+1.R = f (f n.R) for all n ≥ 0 and relation R.

A Relational Theorem on the Correctness of General Recursive Programs Context
The Correctness Problem for a Recursive Program
Correctness Problem Given the program (by its source text) which computes a function f with domain D (D ⊆ Σ) and given its speciﬁcation in terms of a predicate S describing the desired relationship between its initial and ﬁnal values, ﬁnd non restrictive regularity conditions on its text to prove it correct with respect to S by a well-founded induction on a covering of D.

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Agenda
1 Context 2 Regular Operators 3 Correctness of Regular Recursive Programs 4 Applications 5 Conclusions

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Source Code of a Recursive Program
Every recursive program computing a function f with domain a subset of Σ , is an instance of the following abstract scheme:
f.s = if b.s → q.s c.s → h(f, M.s)
ﬁ
where s symbolizes the initial state of program f. conditions b and c correspond (initially) to all non-recursive and all recursive cases of its domain, q.s is the ﬁnal value given by f in the non recursive cases h(f, M.s) involves at least one recursive invocation of f on a set of states M.s.

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Associated Operator
Abstract Recursive Scheme f.s = if b.s → q.s c.s → h(f, M.s) ﬁ
For a relational operator f corresponding to the program scheme above we may assume the existence of a relation Q and a relational operator h fulﬁlling the following for all relation R ,
f .R = Q ∪ h.R
with (a) QL ∩ (h.L)L = O (b) h.O = O

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
The Concept of Inductivity
The fact that the recursive program scheme above allows calculating the values of (program) function f by stages suggests both
i) requiring the associated operator f to be continuous and ii) deﬁning the following concept:
Inductivity Given an operator f , a relation R and a sequence of conditions cn n≥0 , we say that f is inductive over R through the given sequence if
f .R ∩ cn+1 = f (R ∩ cn) for all n ≥ 0.

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Regularity Conditions
The regularity conditions we looked for are the following:
Deﬁnition of Regular Operators A continuous operator f is regular if it fulﬁlls the following regularity conditions: There exist a relation Q and an operator h such that (a) f .R = Q ∪ h.R for all relation R . (b) QL ∩ (h.L)L = O (c) h.O = O (d) h is inductive over every ﬁxed point of f , through the
sequence of conditions (f n. O)L n>0 .
The inductivity of h over any ﬁxed point K of f through the ascending chain (f m. O) L m>0 is equivalent to the inductivity of f over K through the same chain.

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Inductivity of Regular Operators
Proposition 1 For a continuous operator f , satisfying regularity conditions (a), (b) and (c) and K ﬁxed point of f , the following three properties are equivalent:
(i) f is inductive over K through ascending chain (f n. O)L n>0 . (ii) K ∩ (f n. O)L = f n. O for all natural n. (iii) K ∩ µf L = µf , and sequence f n. O n>0 is stable.
Deﬁnition of a Stable sequence of relations A sequence of relations Rn n≥0 is stable whenever
m < n ⇒ Rn ∩ RmL = Rm
for all natural numbers m and n.

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Deterministic Programs are (easily) Regular
Inductivity condition is non restrictive for recursive programs deﬁning (partial) functions: if in scheme equation
f .R = Q ∪ h.R
Q is a univalent relation and h is closed on univalent relations; necessarily, f is also closed on these relations and µf becomes a partial function. Therefore,
if every ﬁxed point of f is univalent (at least on the domain of µf ) then necessarily, all of them coincide with µf on µf L and since the chain of partial functions f n. O must be stable, by last proposition f satisﬁes inductivity condition (d).

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Proof of Proposition 1
(i) f is inductive over K through ascending chain (f n. O)L n>0 . (ii) K ∩ (f n. O)L = f n. O for all natural n.
Proof of (i) ≡ (ii):
“ ⇒” By induction on n. Case n = 1 is easy. Suppose n > 1. K ∩ (f n. O)L
= K ﬁxed point of f f .K ∩ (f n. O)L
= Hypothesis (i) f (K ∩ (f n−1. O)L)
= Inductive hypothesis f (f n−1. O)
= Deﬁnition of f n f n. O

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Proof of Proposition 1
(i) f is inductive over K through ascending chain (f n. O)L n>0 . (ii) K ∩ (f n. O)L = f n. O for all natural n.
Proof of (i) ≡ (ii): “ ⇐”
f (K ∩ (f m. O)L) = (ii)
f .f m. O = f ◦f m = f m+1 ; (ii)
K ∩ (f m+1. O)L = K ﬁxed point of f
f .K ∩ (f m+1. O)L

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Proof of Proposition 1
(ii) K ∩ (f n. O)L = f n. O for all natural n. (iii) K ∩ µf L = µf , and sequence f n. O n>0 is stable.
Proof of (ii) ≡ (iii): “⇒” a)
K ∩ µf L = f continuous operator
K ∩ ( m>0 f m. O)L = ‘◦’ and ‘∩’ distributes over ‘∪
( m>0 K ∩ (f m. O)L) = Hypothesis (ii)
( m>0 f m. O) = f continuous operator
µf

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Proof of Proposition 1
(ii) K ∩ (f n. O)L = f n. O for all natural n. (iii) K ∩ µf L = µf , and sequence f n. O n>0 is stable.
Proof of (ii) ≡ (iii): “⇒” b) Suppose m < n then
f n. O ∩ (f m. O)L = (ii)
K ∩ (f n. O)L ∩ (f m. O)L = (f n. O)L n>0 ascending chain ; m < n
K ∩ (f m. O)L = (ii)
f m. O

A Relational Theorem on the Correctness of General Recursive Programs Regular Operators
Proof of Proposition 1
(ii) K ∩ (f n. O)L = f n. O for all natural n. (iii) K ∩ µf L = µf , and sequence f n. O n>0 is stable.
Proof of (ii) ≡ (iii): “⇐”
K ∩ (f n. O)L = “f continuous” ⇒ (f n. O)L ⊆ µf L
K ∩ µf L ∩ (f n. O)L = (iii)
µf ∩ (f n. O)L = “f continuous” ; range splitting
(( m≤n f m. O) ∪ ( m>n f m. O)) ∩ (f n. O)L = ∩ distributes over ∪ twice ; (iii)
( m≤n f m. O) ∪ f n. O = (f n. O)L n>0 ascending chain
f n. O

A Relational Theorem on the Correctness of General Recursive Programs Correctness of Regular Recursive Programs
Agenda
1 Context 2 Regular Operators 3 Correctness of Regular Recursive Programs 4 Applications 5 Conclusions

A Relational Theorem on the Correctness of General Recursive Programs Correctness of Regular Recursive Programs
Regular Recursive Schemes
Deﬁnition Relation P is deﬁned by a regular recursive scheme associated to operator f , whenever
P is a relation representing a program, and P = µf i.e. P is the minimum solution of the ﬁxed point equation associated to a regular operator f .
If relation P represents a program and a relation S represents a speciﬁcation, the expression P ⊆ S means that program P meets speciﬁcation S.

A Relational Theorem on the Correctness of General Recursive Programs Correctness of Regular Recursive Programs
Correctness Criterion
Proposition 2 If P is a program deﬁned by a regular recursive scheme associated to an operator f via equation f .R = Q ∪ h.R (i.e. P = µf ) then, there exists an ascending chain of conditions bn n≥0 with union equal to PL, b0 = QL, and such that
P ⊆ S ≡ Q ⊆ S ∧ (∀n | n ≥ 0 : P ∩ bn ⊆ S ⇒ h(P ∩ bn) ⊆ S)
This proposition gives an induction scheme for proving that program P satiﬁes S. In fact, this scheme may be generalized to well founded relations on the classes determined by a covering on the domain of P.

A Relational Theorem on the Correctness of General Recursive Programs Correctness of Regular Recursive Programs
Correctness Criterion
Partial Proof of prop. 2
Let bn = (f n+1. O)L for all non negative n. The equivalence is proved as follows:
P ⊆S ≡ P = µf ; deﬁnition of bn ; f regular ; prop. 1
( n | n ≥ 0 : P ∩ bn) ⊆ S ≡ Set Theory
(∀n | n ≥ 0 : P ∩ bn ⊆ S) ≡ Induction on n
P ∩ b0 ⊆ S ∧ (∀n | n ≥ 0 : P ∩ bn ⊆ S ⇒ P ∩ bn+1 ⊆ S) ≡ P ∩ b0 = Q ; P = µf ; proposition 1
Q ⊆ S ∧ (∀n | n ≥ 0 : P ∩ bn ⊆ S ⇒ f (P ∩ bn) ⊆ S) ≡ f .R = Q ∪ h.R
Q ⊆ S ∧ (∀n | n ≥ 0 : P ∩ bn ⊆ S ⇒ h(P ∩ bn) ⊆ S)

A Relational Theorem on the Correctness of General Recursive Programs Correctness of Regular Recursive Programs
General Correctness Theorem
If P is a program deﬁned by a recursive scheme associated to a monotonic operator f via equation f .R = Q ∪ h.R , then, for all well founded set (C, ) with C a countable family of conditions with union equal to PL, and ‘ ’ a well founded relation on C such that
(i) (∀u ∈ C | : u ⊆ QL ∨ u ⊆ PL ∩ QL ) (ii) (∀u ∈ C | u ⊆ PL ∩ QL : P ∩u ⊆ h( v | v u : P ∩v )) we have the equivalence of the following two propositions: a) Program P satisﬁes speciﬁcation S. b) (∀v | v ⊆ QL : P ∩v ⊆ S) ∧
(∀v | v ⊆ PL ∩ QL : (∀u | u v : P ∩u ⊆ S) ⇒ h( u | u v : P ∩u) ⊆ S)

A Relational Theorem on the Correctness of General Recursive Programs Applications
Agenda
1 Context 2 Regular Operators 3 Correctness of Regular Recursive Programs 4 Applications 5 Conclusions

A Relational Theorem on the Correctness of General Recursive Programs Applications
Recursive program scheme
Remember our recursive program scheme: Abstract Recursive Scheme
f.s = if b.s → q.s c.s → h(f, M.s)
ﬁ

A Relational Theorem on the Correctness of General Recursive Programs Applications
Applying the Correctness Theorem
Restricting the application of previous theorem to functions (like f) requires ﬁnding a well founded relation ‘ ’ on the domain of f for which
c.s ∧ t ∈ M.s ⇒ t s for all states s and t. Besides this, regularity conditions above reduce to two (reasonable) conditions holding for all state s ∈ Σ : 1. ¬(b.s ∧ c.s) 2. b.s ⇒ dom q.s

A Relational Theorem on the Correctness of General Recursive Programs Applications
Ackermann function

This function A(x, y ) is deﬁned for natural numbers x and y by

 y +1  A(x, y ) = A(x −1, 1)

if x = 0 if y = 0

 A(x −1, A(x, y −1)) otherwise

This function is clearly deﬁned by a regular inductive scheme. The usual lexicographic order relation on N×N (noted with ‘≺’) is a well founded relation satisfying the requirement given above:

(x −1, 1) ≺ (x, y )

if x = 0 ∧ y = 0.

(x, y −1), (x −1, A(x, y −1)) ≺ (x, y ) if x = 0 ∧ y = 0.

A Relational Theorem on the Correctness of General Recursive Programs Applications
McCarthy’s 91 function
This function is deﬁned for natural number x by
g .x = if x > 100 → x − 10 x ≤ 100 → g (g (x +11))
ﬁ
This recursive scheme is regular. Partial order ‘ ’ on Z deﬁned as x y ≡ y ≤ 100 ∧ y < x for all integers x and y ,
allows to apply our theorem. is a well founded relation such that if x > 100 then x is -minimal, x +11 x if x ≤ 100 and g (x +11) x if x ≤ 100.

A Relational Theorem on the Correctness of General Recursive Programs Applications
McCarthy’s 91 function
If g .x = if x > 100 → x −10 x ≤ 100 → g (g (x +11))
ﬁ
we may prove by induction on (Z, ) that for all integer x, g .x = f .x where
f .x = if x > 101 → x −10 x ≤ 101 → 91
ﬁ
Since g .101 = 101 − 10 = 91 = f .101, by deﬁnition of f and g , it is enough to show that g .x = f .x for x ≤ 100.

A Relational Theorem on the Correctness of General Recursive Programs Applications

g .x = Deﬁnition of g ; x ≤ 100
g (g (x +11)) = x +11 x ; Inductive Hypothesis
g (f (x +11)) = Deﬁnition of f ; x ≤ 100
g (x +1) if 100 < x +11 ≤ 111 g (91) if x < 90 = x < 90 ⇒ 91 x ; x ≤ 100 ⇒ x +1 f (x +1) if 90 < x +1 ≤ 101 f (91) if x < 90 = Deﬁnition of f 91 = Deﬁnition of f ; x ≤ 100 f .x

x ; Ind. Hypothesis

A Relational Theorem on the Correctness of General Recursive Programs Conclusions
Agenda
1 Context 2 Regular Operators 3 Correctness of Regular Recursive Programs 4 Applications 5 Conclusions

A Relational Theorem on the Correctness of General Recursive Programs Conclusions
Final Conclusions
We have found reasonable regularity conditions to ask of the code of a recursive program to prove it correct with respect to a given speciﬁcation. (terminating) Deterministic recursive programs fulﬁll these regularity conditions. The correctness proof of a recursive program may be done by induction on a well founded relation on its domain induced by the values on which the program recurs (according to its code).

