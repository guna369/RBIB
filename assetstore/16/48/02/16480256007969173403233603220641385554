MAX-PLANCK-INSTITUT INFOFRUMRATIK

Associative-Commutative Superposition

Leo Bachmair Harald Ganzinger

MPI{I{93{267

December 1993

k
INFORMATIK

Im Stadtwald D 66123 Saarbrucken
Germany

Addresses Leo Bachmair, Department of Computer Science, SUNY at Stony Brook, Stony Brook, NY 11794, U.S.A, leo@sbcs.sunysb.edu Harald Ganzinger, Max-Planck-Institut fur Informatik, Im Stadtwald, D-66123 Saarbrucken, Germany, hg@mpi-sb.mpg.de
Acknowledgements The research described in this paper was supported in part by the German Science Foundation (Deutsche Forschungsgemeinschaft) under grant Ga 261/4-1, by the German Ministry for Research and Technology (Bundesministerium fur Forschung und Technologie) under grant ITS 9102/ITS 9103 and by the ESPRIT Basic Research Working Group 6028 (Construction of Computational Logics). The rst author was also supported by the Alexander von Humboldt Foundation.

Abstract We present an associative-commutative paramodulation calculus that generalizes the associativecommutative completion procedure to rst-order clauses. The calculus is parametrized by a selection function (on negative literals) and a well-founded ordering on terms. It is compatible with an abstract notion of redundancy that covers such simpli cation techniques as tautology deletion, subsumption, and simpli cation by (associative-commutative) rewriting. The proof of refutational completeness of the calculus is comparatively simple, and the techniques employed may be of independent interest.
Keywords Term Rewriting, Theorem Proving, Equational Deduction

Contents
1 Introduction

1

2 Preliminaries

1

2.1 Clauses : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 1

2.2 Reduction Orderings : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 2

2.3 Associative-Commutative Rewriting : : : : : : : : : : : : : : : : : : : : : : : : : : 3

3 Associative-Commutative Superposition

4

3.1 Inference Rules : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 5

3.2 Lifting Properties : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 5

3.3 Redundancy : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : : 6

4 Refutational Completeness

7

5 Summary

11

1 Introduction
Rewrite techniques are one of the more successful approaches to equational reasoning. In theorem proving these techniques usually appear in the form of completion-like procedures, such as ordered completion (Bachmair, Dershowitz and Plaisted 1989, Hsiang and Rusinowitch 1987), associative-commutative completion (Peterson and Stickel 1981), or basic completion (Bachmair, Ganzinger, Lynch, et al. 1992, Nieuwenhuis and Rubio 1992). Traditionally completion procedures were formulated for sets of equations (unit clauses), but ordered completion has been generalized to arbitrary non-unit clauses, resulting in several variants of paramodulation called superposition (Rusinowitch 1991, Zhang 1988, Bachmair and Ganzinger 1990, Pais and Peterson 1991), and the basic strategy has actually rst been developed for rst-order clauses. Associativity and commutativity have been built into ordered paramodulation (Paul 1992, Rusinowitch and Vigneron 1991), a calculus (Hsiang and Rusinowitch 1991) that does not generalize completion, but includes similar rewrite techniques; and Wertz (1992) designed an associative-commutative superposition calculus. Unfortunately, the completeness proofs proposed for these calculi are technically involved and quite complicated.
The calculus described in this paper is obtained by applying the technique of extended rules (Peterson and Stickel 1981) to a superposition calculus of Bachmair and Ganzinger (1994). A similar calculus has been discussed by Wertz (1992), and our completeness proof, like Wertz's proof, is based on the model construction techniques we originally proposed in Bachmair and Ganzinger (1990). The main di erence with our current approach is that we use non-equality partial models to construct an equality model. These modi cations were motivated by our recent work on rewrite techniques transitive relations in general Bachmair and Ganzinger (1993), and allow us to more naturally deal with associative-commutative rewriting.
Completion procedures are based on commutation properties (often called \critical pair lemmas") of the underlying rewrite relation. We believe that our approach may be of independent interest in that it provides a general method for extending such procedures from unit clauses to Horn clauses to full clauses. Clauses are interpreted as conditional rewrite rules (with positive and negative conditions); new clauses need to be inferred with suitably designed inference rules, so that this clausal rewriting relation is wellde ned and satis es the required commutation properties. Associative-commutative superposition represents a non-trivial application of this general methodology.
The next section contains basic notions and terminology of theorem proving and rewriting. The associative-commutative superposition calculus is described in Section 3, and proved complete in Section 4.

2 Preliminaries

2.1 Clauses

We consider
or x, where f

rst-order languages with equality.
is a function symbol of arity n, x

A term is an expression f is a variable, and t1; : : :; tn

(t1;
are

: : :; tn)
terms.

For simplicity, we assume that equality is the only predicate in our theory. By an

atomic formula (or atom) we mean a multiset fs; tg, called an equality and usually

written s t, where s and t are terms.1 A literal is either a multiset (of multisets)

1The symmetry of equality is thus built into the notation.

1

s ;ff g t ,f gg called a positive literal and also written s t, or a multiset ffs; tgg, called

a negative literal and written s 6 t or :(s t). A clause is a nite multiset of literals.

We write
A: 1 _

a
_

clause by listing its
A B: m _ 1 _ Bn.

literals :A1; : : :; :Am;
An expression is said

B1;
to

: : :; Bn, or
be ground

as a if it

disjunction contains no

variables.

A (Herbrand) interpretation is a set I of ground atomic formulas. We say that an

atom A is true (and :A, false) in I if A 2 I; and that A is false (and :A, true) in I

if A 62 I. A ground clause is true in an interpretation I if at least one of its literals is

true in I; and is false otherwise. A (non-ground) clause is said to be true in I if all its

ground instances are true. The empty clause is false in every interpretation. We say

that I is a model of a set of clauses N (or that N is satis ed by I) if all elements of N

are true in I. A set N is satis able if it has a model, and unsatis able otherwise. For

instance, any set containing the empty clause is unsatis able.

An interpretation is called an equality interpretation if it satis es the re exivity

axiom

xx

the transitivity axiom

x6 y_y6 z_x z

and all congruence axioms

x 6 y _ f(: : :; x; : : :) f(: : :; y; : : :) where f ranges over all function symbols. (Symmetry is already built into the notation.) We say that I is an equality model of N if it is an equality interpretation satisfying N. A set N is equality satis able if it has an equality model, and equality unsatis able
otherwise. We will consider the problem of checking whether a given set of clauses has an
equality model, and for that purpose have to reason about Herbrand interpretations. Two concepts are useful in this context: rewrite systems and reduction orderings.

2.2 Reduction Orderings
An ordering is a transitive and irre exive binary relation. A rewrite relation is a binary
relation on terms such that s t implies u s ] u t ], for all terms s, t, u s ], and u t ] in the given domain.2 By a rewrite ordering we mean a transitive and irre exive
rewrite relation; by a reduction ordering, a transitive and well-founded rewrite relation.
(A binary relation is well-founded if there is no in nite sequence t1 t2 : : : of
elements.)
Any ordering on a set S can be extended to an ordering on nite multisets over S (which for simplicity we also denote by ) as follows: M N if (i) M 6= N and (ii) whenever N(x) > M(x) then M(y) > N(y), for some y such that y x. If is a total
(resp. well-founded) ordering, so is its multiset extension. If is an ordering on terms, then its multiset extension is an ordering on equations; its twofold multiset extension, an ordering on literals; and its threefold multiset extension, an ordering on clauses.
2In our notation for terms we follow Dershowitz and Jouannaud (1990).

2

2.3 Associative-Commutative Rewriting

An equivalence (relation) is a re exive, transitive, and symmetric binary relation. A

congruence (relation) is an equivalence such that s t implies u s] u t], for all terms

s, t, u s], and u t] in the given domain. Note that if I is an equality interpretation,

then the set of all pairs (s; t) and (t; s), for which s t is true in I, is a congruence

relation on ground terms. Conversely, if is a congruence relation, then the set of all

ground equations s t, for which s t, is an equality interpretation. In short, equality

interpretations can be described by congruence relations. Rewrite systems can be used

to reason about congruence relations.

By a rewrite system we mean a binary relation on terms. Elements of a rewrite

system are called (rewrite) rules and written s ! t. If R is a rewrite system, we denote

by !R the smallest rewrite relation containing R. The transitive-re exive closure of !R

risewderintoetseydstbeym!RR

; while is said

t$o Rbedteenromteinsatthinegsmifatlhleestrecwonrigtreureenlacetiorenla!tioRniscownetlal-ifnoiunngdRed. .A

We assume that some function symbols f are associative and commutative, i.e.,

satisfy the axioms

f(x; f(y; z)) f(f(x; y); z) f(x; y) f(y; x)

For the rest of the paper, let AC be a set of such axioms. We write f 2 AC, if AC

contains the associativity and commutativity axioms for f, and also use AC to denote

the binary relation containing the pairs (f(x; f(y; z)); f(f(x; y); z)) and (f(x; y); f(y; x)).

We for

say that two terms u and
A reduction ordering is
all terms u, u0, v, and v0.

vAIfaCr-ecoAismCAp-aCetqi-ubcilovemailpfeanutt0ibi$fleuA, C$weuAwC rvivt.e$uAC

v0 v

implies u0
to indicate

v0,
that

u AC

v or u $AC
-compatible

v. We say that a rewrite system reduction ordering such that s

R

is
t,

AC
for

-terminating
all rules s !

if
t

there
in R.

exists

an

Associativity and commutativity are built into rewriting via matching. If R is a

rewrite system, we denote by ACnR the set of all rules u0 ! v, such

for some rule u ! v R via AC-matching.

WineRs.ayTthheatreawtreitremrtelacatinonbe!rAewCnrRittceonrr(emspoodnudlos

that u0 $AC u
to rewriting by
AC) to another

term form

t0
or

ifAtC!-irAreCdnuRcitb0.le.TeWrme swtrhitaet

cannot
u #ACnR

be
v

rewritten are said to be in AC-normal if there exist terms u0 and v0 such that

uwr!iteACun$R AuCt0

v$AC 0 R v (resp.

AuC$nRACtv

.

Given
R v) to

an AC-compatible
indicate that there

reduction ordering, exists a sequence

we

also

t0 $AC ACnR $AC ACnR tn

such that t ti (resp. t ti), for all i with 0 i n.

If R is AC-terminating and we have u then R is called AC-convergent. We shall

#AC
use

nARCv-,cfoonrvaelrlgteenrtmrsewu raintedsvyswteitmhsuto$dAeCscrRibve,

equality models of AC.

It is a standard result from the theory of term rewriting (see Dershowitz and Jouan-

naud 1990 for details and further references) that an AC-terminating rewrite system R

is AC-convergent if (i) u #ACnR v whenever u ACnR t $AC v (a property called local

AC-coherence) and AC-con uence).

(ii)

u

#ACnR

v

whenever

u

ACnR t !R v (a property called local

3

Any rewrite system R can easily be extended to a locally AC-coherent system by a

technique proposed by Peterson and Stickel (1981). An extended rule is a rewrite rule

of the form f(x; u) ! f(x; v), where f 2 AC, u is a term f(s; t), and x is a variable not

occurring in u or v. We also say that f(x; u) ! f(x; v) is an extension of u ! v. If R is a

rewrite system, we denote by Re the set R plus all extensions of rules in R. Any rewrite

system ACnRe is locally AC-coherent: if u for some term u0.

ACnRe t $AC v, then u $AC u0

ACnRe v,

The local AC-con uence property is satis ed whenever it can be shown to hold for

certain \minimal" rewrite sequences u ACnR t !R v that are also called \critical overlaps." We only have to consider certain ground rewrite systems R where critical

overlaps involve extended rules in Re. This is summarized in the following lemma.

Lemma 1 Let R be a ground rewrite system contained in an AC-compatible reduction

ordering and suppose that no left-hand side of a rule in R can be rewritten modulo AC

by any other rule in R or any extended rule in Re. Furthermore, let t be a ground term,

such that for all ground instances f(u; u0) ! f(u; u00) and f(v; v0) ! f(v; v00) of extended

rules
f(v; v
If

in 00).

Re, where f(u; Then w #ACnRe

u0) w0

$AC
for al

l

the same conditions are only

fgsr(aovtui;snvd0)edtaefnromdrsgtrwouannfdd(uiwn; su0t0sa)u,nccwheesthohafatevwxete$fn(dAueCt;duA0r0u)Clne#RsAwCwn0iR.the

t f(u; u0), then w #ACnRe w0 for all ground terms w and w0 such that w $ACt ACnR w0.

The lemma can be proved by standard techniques from term rewriting.

3 Associative-Commutative Superposition

We formulate our inference rules in terms of a reduction ordering. Furthermore, negative

literals in a clause may be marked, in which case they are said to be selected. We assume

that at least one literal is selected in each clause in which the maximal literal is negative.

(If the maximal literal is positive, there may be no selected literals.)

s

Let
t or

t

be

a
s,

wfoerll-aflolugnrdoeudndACte-rcmoms spaatnibdlet.re(dSuuccthionordoredrienrginsgh, asvuechbetehnatdses$criAbCedt

or by

Narendran and Rusinowitch (1991) and Rubio and Nieuwenhuis (1993).) We say that

a clause C _ s t is reductive for s t (with respect to ) if there exists a ground

instance C _ s t such that s t and s t C . By an extended clause

we mean a reductive clause C _ f(x; s) f(x; t), where f 2 AC, s is a term f(u; v),

and x is a variable not occurring in C, s, or t. We also say that C _ f(x; s) f(x; t) is

an extension of C _ s t. We will see that only extensions of certain reductive clauses

without selected literals are needed. (Such extensions are themselves reductive.)

Associativity and commutativity are built into the inference rules via AC-uni cation.

Two terms u and two terms u and v

varaereACA-Cun-uinaibaleb,lethiefnuthe$reAeCxisvts

,

for some a complete

substitution .
set of AC-uni

If ers

CSUAC(u; v), such that for tions 2 CSUAC(u; v) and
We assume that a function

any substitution with

,
C

such
SUAC

that x $AC
is given and

(x
call

u
) a

,

$forACallvvartihaebrleesexxisint

substitu-
u and v.

substitution in CSUAC(u; v) a

most general AC-uni er of u and v.

4

3.1 Inference Rules

TofhaencainlcfuelruesncSeACshcaornesinsotscoofmthmeofnollvoawriianbgleins.ferIefnnceecreussleasr.y(Wthee

assume that variables in

the premises one premise

need to be renamed.)

AC-Superposition:

C; s t D; u s0] v C ; D ; u t] v

where (i) is a most general AC-uni er of s and s0, (ii) the clause C _ s t is reductive for s t and C _ s t either contains no selected literals or is an extended clause,3 (iii) the clause D _ u v is reductive for u v and either contains no selected literals or is an extended clause, and (iv) s0 is not a variable.

Negative AC-Superposition:

C; s t D; u s0] 6 v C ; D ; u t] 6 v

where (i) is a most general AC-uni er of s and s0, (ii) the clause C _ s t is reductive for s t and C _ s t either contains no selected literals or is an extended clause, (iii) the literal u 6 v is selected in D _ u 6 v and v 6 u , and (iv) s0 is not a
variable.

Re ective AC-Resolution:

C; u 6 v C

where is a most general AC-uni er of u and v and u 6 v is a selected literal in the
premise.

AC-Factoring:

C; s t; s0 t0 C ; t 6 t0 ; s0 t0

where is a most general AC-uni er of s and s0, t0 6 t , the literal s t is maximal in C , and the premise contains no selected literals.

3.2 Lifting Properties

In to

proving the argue about

refutational completeness of ground instances of clauses

aansduipnefrepreonsicteiso.nTchaelcucolunsneScAtCio,nwbeesthwaelelnhathvee

general level and the ground level is usually stated in the form of so-called \lifting"

properties.

Let C1 : : :Cn be clauses and let

C1 : : :Cn D

be a ground inference, i.e., all clauses

clause
if L is

sCeilectisedmianrkCe.d)

in the same We say that

way this

CagsrioCuain;ndtdhinaDfteriaesrn,ecLegrcoaiusnnsbdee.lecA(tWCede-liianftsesCdumifeitfhtahenraedt

each only is an

inference

C1 : : :Cn

C

3In other words, selection is ignored for extended clauses.

5

such that C $AC D. In that case, we also say that the ground inference is an AC-
instance of the general inference. Lifting is no problem for resolution and factoring inferences, but is more di cult for
superposition inferences. For example, if N contains two clauses f(x; x) x and a b, where a b, then there is a superposition inference from ground inferences

a b f(a; a) a f(a; b) a

but no superposition inference from the clauses themselves. To prove completeness,
one has to show that all necessary inferences can be AC-lifted. Let us illustrate the conditions under which AC-superposition inferences can be lifted. (The case of negative AC-superposition is similar.)
Let C _ s t and D _ u s0] v be two clauses, each either containing no selected literals or being an extended clause. An AC-superposition inference

C ; s t D ; u s0] v C ; D ; u t] v

from ground instances a non-variable subterm

of of

these clauses, where s0 u. (Proof. The ordering

r$esAtCricstio,ncsarneqbueireACth-alitftsed

if

s0 t

is is

strictly maximal in C and s t , and u v is strictly maximal in D and u v .

Consider the inference

C; s t D; u s0] v

C ; D ; u t0] v

where is a most general AC-uni er of s and s0, such that for some substitution we

have other

x $AC
variables

(x y.

) It

, for all variables x occurring in can easily be shown that C _ s

s0 or s, and y = (y t is reductive for s

)

, for all
t and

D _ u v is reductive for u v . Also, s0 is not a variable, so that the inference

is an AC-superposition inference. Moreover, the conclusion of the ground inference is

AC-equivalent to an instance of the conclusion of the general inference.)

3.3 Redundancy

Simpli cation techniques, such as tautology deletion, subsumption, demodulation, con-

textual rewriting, etc., represent an essential component of automated theorem provers.

These techniques are based on a concept of redundancy (Bachmair and Ganzinger 1994),

which we shall now adapt to the AC-case.

Let RA denote the set consisting of the re exivity axiom, F the set of all congruence

axioms, and T the set consisting of the transitivity axiom, cf. Section 2. Furthermore,

for any ground term s, let T s be the set of all ground instances u 6 v _ v 6 w _ u w

of the transitivity axiom, for which s u and s v and s all ground instances for which s u and s v and s w;

w; and T s be the set of

Let N be a set of clauses. A ground clause C (which need not be an instance of N)

is said to be AC-redundant with respect to N (and ordering ) if there exist ground

instances C1; : :
every model of

A: ; CCk

of N RA

,

such
F

that
Ts

C Cj, fC1; : : :

for all
; Ckg,

j with 1 where s is

j
the

k, and C is true
maximal term in

in
C.

It A

can easily be seen non-ground clause

that the is called

AclaCu-sreesduCn1d;a:n: :t;iCf kalclaints

be assumed to be ground instances

non-redundant. are.

6

Remark. We emphasize that AC-redundancy is de ned with respect to arbitrary

interpretations, not just equality interpretations. In particular, there are restrictions

on the use of the transitivity axiom. The restrictions are of more theoretical than

practical signi cance, as all the usual simpli cation techniques can be formalized using

AC-redundancy. Wertz (1992) uses a di erent notion of redundancy, where restric-

tions are imposed, not on transitivity, but instead on the use of the associativity and

commutativity axioms.

For example, consider the (unit) clauses s u0] some substitution . If u v and either s

t u

and u
or else

v, t

wvhe,rethue0n$sAuC0]u

, for
t is

AC-redundant with respect to any set N containing u v and s v ] t. In practice,

this allows one to replace s u0] t by s v ] t in the presence of the equation u v.

In other words, the subterm u0 can be rewritten modulo AC to a smaller term v .

An AC-superposition inference in which both premises are ground instances of ex-

tended clauses
AC-redundant

with with

maximal terms
respect to N if

t and t0, respectively,
its conclusion is either

sAucCh-rtehdautntda$nAt Cort0i,s

is a

called mem-

ber of N. Any other ground inference with conclusion B and maximal premise C is

called AC-redundant with respect to N if there exist ground instances C1; : : :; Ck of N, such that C Cj, for all j with 1 j k, and B is true in every model of AC RA F T s fC1; : : :; Ckg, where s is the maximal term in C. A non-ground inference is called AC-redundant if all its ground instances are AC-redundant. One way

to

render an inference We say that a set

in of

cSlAauCseresdNundisansattiusratotedadudpittso

conclusion to the
AC-redundancy

set N.
if all inferences,

the premises of which are non-redundant clauses in N or extensions of non-redundant

clauses in N, are AC-redundant.

Let us conclude this section by pointing out that extended clauses are redundant,

but inferences with them are not. Therefore it is possible to dispense with extended

rules altogether, and instead encode inferences with them directly in an \extended"

AC-superposition calculus, cf., Rusinowitch and Vigneron (1991).

4 Refutational Completeness

In this section we will show how to de ne an equality model for saturated clause sets

that do not contain the empty clause. The de nition of a suitable model uses induction

on and is adapted from Bachmair and Ganzinger (1994). The presence of extended

rules causes technical complications, though, and requires certain modi cations in the

model construction process.

aIAnCuds-GirdneiegvwnerionnittdeaeubscceyltotiosINunCreoothnfoegfrsRo.euteF.nfodFurucerlvateuhvrsey:ersmuc,loaawruneesd,edivefCCgnirneoisuaNnacdowc,rlearueuds#sepAeoCnCnnedR0 ieC_RngvCsgHt,oewrtb,bheriwcathhnhedwereeisne(attselsSropCrcte)atDlaltEtioChDne;0

and s
closure we also Finally,
The

oslHefat,ty(eRrtRtbhhCrebaantenEdCfSsCCiins=EtpetCrrgfpo)sadreneu,dtcaatntltigevidotein(fIaii(nIbii)d)eitsCtthhheiaenistttAeefirntaCmdlps-erersdeoiwdinsturociIitreCebrs,eecds(louiaisc)nuibCtre.eleq0 IouinbsfaylaRfiatlAleyl.sCoemtnhiRnoedreCteh.claeIsoneAfstC,NhE-artCewc=AarsiCt;ee,,.

provided N is saturated and does not contain the empty clause. The following lemmas

state the essential properties of the interpretations I and IC.

7

Lemma 2 Let C be a ground clause (which need not be in N) and D be a clause in N
with D C. If :A is a negative literal in C with A 62 ID, then A 62 I. As a consequence, if C is true in ID, then it is also true in I and in any interpretation ID0 with D0 2 N and D0 D.

Proof. Let :A be a negative literal in C such that A 62 ID. If B 2 I n ID, then B :A, and therefore A 62 I. Also, if A is a positive atom in C and A 2 ID, then A is contained in any set ID0 with D0 D and in I. From this we may conclude that if C is true in ID, then it is also true in I and in any interpretation ID0 with D0 2 N and D0 D. 2

The
and I.

next

lemma

follows

immediately

from

the

de

nition

of

the

interpretations

IC

Lemma 3 The interpretation I and all interpretations IC are models of the associativ-
ity, commutativity, re exivity, symmetry, and all congruence axioms.

We emphasize that transitivity need not be satis ed by all interpretations IC or I, and
consequently these interpretations need not be equality interpretations. However, if the
clause set N is saturated, then \su ciently many" instances of the transitivity axiom are true in each interpretation IC, so that the nal interpretation I does indeed satisfy
transitivity, and hence is an equality interpretation. The following lemma is essential in this regard.

Lemma 4 The
ground terms u

ainndtevrpwreittahtiuon$IACCt

is a model of
ReC v (resp. u

$T AtCt

(resp.
ReC v)

T t) if and only if we have u #ACnReC v

for .

all

Proof.
wu i$thAtCt

First let us

RueC,

v. t

We
v,

assume that we

show
and t

that
w.

IC
If

is
u

haamveoude#l AoCfnTReC

v
t.

for all
Let u,

v and v w are true

vin#IACC.nReC w. In other words, we have u $ACt ReC w; hence u

ground terms
v, and w be in IC, then u #ACnReC w and

u and v with

ground terms

#uACnRweC

v
is

and true

On the other
uthatAuC0n#RAeCCvnR!eC AvC0

hand,

nfRoeCr

w,
all

ifforICsomiseatemrmodvel ground terms u0

of T with t and v0

t,

then we
v. Using

hLaevme mua#1A,CwnReeCmwaywcohnencleuvdeer

with u0 $ACt ReC v0. 2

We now come to the main properties of the model construction.

Lemma 5 Let N be a set of clauses that is saturated up to AC-redundancy, does not

contain the empty clause, but contains an extension of every non-redundant reductive

clause in N. Let I be the interpretation constructed from the set of all ground instances

of N RA. Then for every ground instance C of a clause in N RA we have:

for

(1) (2)

If If

s is the C is an

maximal instance

tCe^rmoifnaCc,latuhseen

iInCNis,

a model of T such that x

some variable x in C^, then C is true in IC.

s. is

reducible

by

ACnReC,

(3) If C is an instance of a clause with a selected literal, then it is true in IC.

(4) If C is non-productive, then it is true in IC.

(5) If C = C0 _ A produces A, then C is a non-redundant instance of a clause in N

with no selected literals and C0 is false in I.

8

Proof. We use induction on . Let C be a ground instance of N RA with maximal

term s and assume (1)-(7) are already satis ed for all ground instances C0 of N with

C C0.

(1) Since for every ground term t there is at least one clause with maximal term t

(namely the ground instance t t of the re exivity axiom), we may use the induction

hypothesis to infer that IC is a model of T s. By Lemmas 1 and 4, it is therefore su cient

to prove that for any two ground instances f(u; u0) ! f(u; u00) and f(v; v0) ! f(v; v00)

of extended
f(v; v00).

rules

in

ReC ,

with

s

$AC

f(u; u0)

$AC

f(v; v0),

we

have

f(u; u00)

#ACnReC

Suppose u0 u00 is produced by C0 _u0 u00 and v0 v00 is produced by D0 _v0 v00.

Both clauses are strictly smaller than C, so that by the induction hypothesis, they are

true in IC, whereas C0 and D0 are false in I. By AC-superposition we obtain the clause

C00 = C0 _ D0 _ f(u; u00) f(v; v00). Since this inference can be AC-lifted, we may

use saturation up to AC-redundancy, to infer that either C00 is a ground instance of

N or else there exist ground instances C1; : : :; Ck of N, such that C00 Cj, for all j

with 1
where t

j
is the

k, and C00 is true in every model of maximal term in C00. Since C C00

AC
and

s

RA t,

FT
we may

t
use

fC1; : : :; Ckg,
the induction

hypothesis to infer that C00 is true in IC, if it is a ground instance of N, and that IC00 is a

model of AC RA F T t fC1; : : :; Ckg, otherwise. In either case, we may conclude

that C00 is true in IC, which implies that f(u; u00) f(v; v00) is true in IC, and thus

f(u; u00)
to apply

#AACCn-RreeCdfu(nvd;avn00c)y..)(The

importance

of

part

(1)

rests

in

the

fact

that

it

allows

us

(2)
say x
be the

Suppose
c!laAuCsenRC^eC

C u.
0.

= C^
Let Since

is a 0 be
C

ground instance of N,
the same substitution

such that x
as , except

tihsartedxuc0ib=leub, yanAdClentRCeC,0

C0, we may use the induction hypothesis and Lemma 2 to

infer that C0 is true in IC. Furthermore, since x u is true in IC, a literal L in C is

true in IC if and only if the corresponding literal L 0 in C0 is true in IC. This implies

that C is true If C is an

in IC.
instance

C^

,

where

x

is irreducible for all variables x in C^, then any

inference with maximal premise C can be AC-lifted. We call C an AC-reduced ground

instance of N in that case.

(3) Let C = C0 _ s 6 t be an AC-reduced ground instance of a clause in which the

literal corresponding to s 6 t is selected. The assertion is obviously true if s t is false

in be

I(C3..1S)oIflest
lifted, so

us assume s $AC t, then
that we may

C#A0CisnRaeC

t.
re

ective

AC-resolvent

of

C.

Resolution

inferences

use saturation up to AC-redundancy, to infer that C0 is

can true

in IC.

(3.2) If s and t are not AC-equivalent, then we have either s t or t s. We discuss

only one case, as the other is similar. Suppose s t, in which case s is reducible by

AwelsiCtehniRsmeCaaxaginmrdoauclnaldnitebirneasltwaurnictetenvof,aaasnnsdeuxs0]t,ve]nws#hiAoeCnrenRoueCf0

$t. ATChue,

for some
clause D

clause D
is either

= D0 _ u
productive

a productive clause. Since C D,

v
or we

use the induction hypothesis to infer that D0 is false in I. Also, if D is productive,

it is non-redundant and hence must be a ground instance of a clause with no selected

literals. The clause C00 = C0 D_ 0 _ s v] 6 t can be obtained from C and D by negative

AC-superposition. By saturation up to redundancy, C00 must be true in IC. Since D0

and s v] t are false in IC, we may infer that C0, and thus C, is true in IC.

(4) Suppose C is false in IC but non-productive. That is, C violates one of the other

9

two conditions imposed on productive clauses.

(4.1) If condition (ii) is violated, then C is of the form C0 _ s t _ s0 t0, where

s C00

t
=

is a maximal literal, s C t t s0 _ 6 0 _ 0 t0 from

t C

byt0,AsC$-faAcCtosr0i,nga.ndUstin#gACsnaRteCurta0.tioWneuopbttoairnedthuendcalanucsye,

we may infer that C00 is true in IC. Since t t0 is true in IC, this implies that C0_s0 t0,

and therefore C, is true in IC, which is a contradiction.

(4.2) Otherwise, C must be a clause C0 _ s t with maximal literal s t, where

mDs aixsitmeaiatnhldelristeprirsaolrdeuudcutcivibvel,eosrubycishAatChganrtRouseCn.cdaTninhsbetneanwtchreeitrotefeenaxniasstesxstauen0c]slaiaounnsdeoufD0a$=pArDoCd0 uu_c.tuiMveocrvelaowuviseterh.,

By the induction hypothesis, the clause D0 is false in I and if D is productive it is a

non-redundant instance of a clause with no selected literals. Thus, we may obtain from

C and D by AC-superposition the clause C00 = C0 _ D0 _ s v] t, which by saturation

has to be true in IC. Since D0 is false in IC, either C0 or s v] t must be true in IC. If

C0 is true in IC, so is C. which indicates that s

If
t,

s v]
and

h#AenCcneReCCt,,

then we is true in

have s IC|a

=cosntur0a]d!ictAiConnR.eC

s

v]

#ACnReC

t,

(5) A productive clause C = C0 _ A is false in IC, hence is non-redundant and,

by part (3), cannot be an instance of a clause with selected literals. The de nition of

productive clauses also ensures that C0 is false in the AC-rewrite closure of (RC EC)e,

and hence false in I. 2

The lemma indicates that under the given assumptions I is an equality model of AC N.

(Any non-productive ground instance C of N is true in instances C are true in the AC-rewrite closure of (RC

IECC,)we.hFileurntohner-pmroordeu,cItiivseagmrooudnedl

of T t, for all ground terms t; and hence is a model of T.)

The proof of the lemma also shows that certain inferences with extended clauses

are unnecessary. For instance, AC-superpositions on a proper subterm of an extended

clause, i.e., inferences of the form

C; s t D; f(x; u s0]) f(x; v)

C ; D ; f(x; u t]) f(x; v)

where is a most general AC-uni er of s and s0, and the second premise extends the clause D _ u s0] v, are not needed.
As an immediate corollary of the above lemmas we obtain:

Theorem 1 Let N be a set of clauses that is saturated up to AC-redundancy with

rNespcoecnttatointsheanasesxotceinatsiivoen-coofmemveurtyatnivoens-ruepdeurnpodsaintitornedcuaclctuivluescSlaAuCs.e

Furthermore, suppose
in N. Then N AC

is equality unsatis able if and only if it contains the empty clause.

Proof. If N AC contains the empty clause it is unsatis able. If N AC does not contain the empty clause, let I be the interpretation constructed from the set of all ground instances of N RA. By Lemmas 3 and 5, I is an equality model of N AC. 2

This theorem shows that associative-commutative superposition calculi provide a basis for refutationally complete theorem provers. Such a theorem prover has to saturate
a given set of input clauses up to AC-redundancy. The empty clause will be generated if the input set, plus AC, is equality unsatis able. Saturation of clause sets can be achieved
by fair application of inference rules. These aspects of the saturation process have been discussed elsewhere, e.g., Bachmair and Ganzinger (1994) or Bachmair, Ganzinger and Waldmann (1992), and apply directly to the present case.

10

5 Summary
We have presented an associative-commutative superposition calculus and proved its refutational completeness. We have tried to keep the exposition clear and simple, and therefore have not discussed various possible improvements to the calculus, most of which can be derived from redundancy. Some are relatively minor, such as the redundancy of certain inferences involving an extended clause, while others are more important, e.g., the use of redex orderings to achieve a similar e ect as critical pair criteria. The main di erence of our calculus with other associative-commutative paramodulation calculi is that the associativity and commutativity axioms, but not all instances of the transitivity axiom, are built into our notion of redundancy; whereas other researchers have opted for transitivity and compromised on associativity and commutativity (e.g., Wertz 1992). From a more practical perspective our approach is preferrable, as enough instances of transitivity are provided to cover full associative-commutative rewriting, while otherwise associative-commutative rewriting actually needs to be restricted. In addition, our completeness proof is considerably simpler than previous proofs.
We believe that the approach we have outlined for associativity and commutativity can be applied to other equational theories, such associativity and commutativity with identity (Baird, Peterson and Wilkerson 1989, Jouannaud and Marche 1992); for some work in this direction see Wertz (1992). There is also ongoing work on combining associative-commutative calculi with the basic strategy, and results have been announced by Vigneron (1993) and by Nieuwenhuis and Rubio (1993).
References
L. Bachmair, N. Dershowitz and D. Plaisted, 1989. Completion without failure. In H. Ait-Kaci, M. Nivat, editors, Resolution of Equations in Algebraic Structures, vol. 2, pp. 1{30. Academic Press. L. Bachmair and H. Ganzinger, 1990. On Restrictions of Ordered Paramodulation with Simpli cation. In M. Stickel, editor, Proc. 10th Int. Conf. on Automated Deduction, Kaiserslautern, Lecture Notes in Computer Science, vol. 449, pp. 427{441, Berlin, Springer-Verlag. L. Bachmair and H. Ganzinger, 1993. Rewrite Techniques for Transitive Relations. Technical Report MPI-I-93-249, Max-Planck-Institut fur Informatik, Saarbrucken. L. Bachmair and H. Ganzinger, 1994. Rewrite-based equational theorem proving with selection and simpli cation. Journal of Logic and Computation, Vol. 4, No. 3, pp. 1{31. Revised Version of MPI-I-91-208, to appear. L. Bachmair, H. Ganzinger, Chr. Lynch and W. Snyder, 1992. Basic Paramodulation and Superposition. In D. Kapur, editor, Automated Deduction | CADE'11, Lecture Notes in Computer Science, vol. 607, pp. 462{476, Berlin, Springer-Verlag. L. Bachmair, H. Ganzinger and U. Waldmann, 1992. Theorem proving for hierarchic rst-order theories. In H. Kirchner, G. Levi, editors, Algebraic and Logic Programming, Lecture Notes in Computer Science, vol. 632, pp. 420{445, Berlin, Springer-Verlag. Revised version to appear in AAECC. Timothy Baird, Gerald Peterson and Ralph Wilkerson, 1989. Complete sets of reductions modulo associativity, commutativity and identity. In Proc. 3rd Int. Conf. on Rewriting Techniques and Applications, Lecture Notes in Computer Science, vol. 355, pp. 29{44, Berlin, Springer-Verlag.
11

N. Dershowitz and J.-P. Jouannaud, 1990. Rewrite Systems. In J. van Leeuwen, editor, Handbook of Theoretical Computer Science B: Formal Methods and Semantics, chapter 6, pp. 243{309. North-Holland, Amsterdam. J. Hsiang and M. Rusinowitch, 1991. Proving refutational completeness of theorem proving strategies: The trans nite semantic Tree method. Journal of the ACM, Vol. 38, No. 3, pp. 559{587. Jieh Hsiang and Michael Rusinowitch, 1987. On Word Problems in Equational Theories. In Proc. 14th ICALP, Lecture Notes in Computer Science, vol. 267, pp. 54{71, Berlin, SpringerVerlag. Jean-Pierre Jouannaud and Claude Marche, 1992. Termination and completion modulo associativity, commutativity and identity. Theoretical Computer Science, Vol. 104, pp. 29{51. Paliath Narendran and Michael Rusinowitch, 1991. Any Ground AssociativeCommutative Theory has a Finite Canonical System. In Ronald V. Book, editor, Proc. 4th Rewriting Techniques and Applications 91, Como, Italy, Springer-Verlag. R. Nieuwenhuis and A. Rubio, 1992. Basic superposition is complete. In ESOP'92, Lecture Notes in Computer Science, vol. 582, pp. 371{389, Berlin, Springer-Verlag. R. Nieuwenhuis and A. Rubio, 1993. AC-superposition with constraints: No AC-unifers needed. Submitted, 1993. John Pais and G.E. Peterson, 1991. Using Forcing to Prove Completeness of Resolution and Paramodulation. Journal of Symbolic Computation, Vol. 11, pp. 3{19. E. Paul, 1992. A general refutational completeness result for an inference procedure based on associative-commutative uni cation. Journal of Symbolic Computation, Vol. 14, pp. 577{618. G. Peterson and M. Stickel, 1981. Complete sets of reductions for some equational theories. Journal of the ACM, Vol. 28, pp. 233{264. A. Rubio and R. Nieuwenhuis, 1993. A precedence-based total AC-compatible ordering. In Proc. 5th Int. Conf. on Rewriting Techniques and Applications, Lecture Notes in Computer Science, vol. 690, pp. 374{388, Berlin, Springer-Verlag. M. Rusinowitch, 1991. Theorem proving with resolution and superposition: An extension of the Knuth and Bendix completion procedure as a complete set of inference rules. J. Symbolic Computation, Vol. 11, pp. 21{49. M. Rusinowitch and L. Vigneron, 1991. Automated deduction with associativecommutative operators. In Proc. Int. Workshop on Fundamentals of Arti cial Intelligence Research, Lecture Notes in Arti cial Intelligence, vol. 535, pp. 185{199, Berlin, Springer-Verlag. L. Vigneron, 1993. Associative-commutative dedution with constraints. Technical Report 93-R-196, CRIN, Nancy. U. Wertz, 1992. First-Order Theorem Proving Modulo Equations. Technical Report MPI-I92-216, Max-Planck-Institut fur Informatik, Saarbrucken. H. Zhang, 1988. Reduction, superposition and induction: Automated reasoning in an equational logic. PhD thesis, Rensselaer Polytechnic Institute, Schenectady, New York.
12

