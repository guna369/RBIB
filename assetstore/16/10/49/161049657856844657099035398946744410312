A Maximal-Literal Unit Strategy for Horn Clauses*
Nachum Dershowitz Department of Computer Science University of Illinois at Urbana-Chaanpaign
1304 West Springfield Avenue Urbana, IL 61801, U.S.A.
nachum@cs,uiuc.edu

Abstract
A new positive-unit theorem-proving procedure for equational Horn clauses is presented. It uses a term ordering to restrict paxamodulation to potentially maximal sides of equations. Completeness is shown using proof orderings.

1. Introduction

A conditional equation is a universally-quantified Horn clause in which the only predicate symbol is equality. We write such a clause in the form

el A . . . A e. :=~ 8 N t

(n >__0), meaning that the equality s ~ t holds whenever all the equations el, called conditions, hold. If n = 0, then the (positive unit) clause, s -~ t, will be called an unconditional equation. Conditional equations are important for specifying abstract data types and expressing logic programs with equations. Our interest here is in procedures for proving validity of equations in all models of a given finite set E of conditional equations. Note that a conditional equation el A . . . A en ~ s ~--t is valid for E iff s -~ t is valid for E U { e l , . . . , en}. Hence, proving validity of conditional equations reduces to proving validity of unconditional ones.
The completeness of positive-unit resolution for Horn clauses is weU-known. An advantage of positive-unit resolution is that the number of conditions never grows; it suffers from the disadvantage of being a bottom-up method. Ordinary Horn clauses

pl A " ' A p n ::~ Pn+l

where the Pi are not equality literals, can be expressed as conditional equations, by turning each literal Pl into a Boolean equation Pl = T, for the truth constant T. Ordered resolution, in wkie~ the literals of each danse are arranged in a linear order >, and only the largest literal may serve as a resolvent, is also complete for Horn clauses (see Boyer, 1971).
Positive-unit resolution can be expressed by means of the following inference rule:

EU{ q A s ~ - - T =} u~-T' ~

..................

l~-T J

E U l ~- T, qa =~ ua ~ - T
•Thls researchsupported in part by the NationalScienceFoundation under Grant CGR-9007195.

15
where a is the most general unifier ( m g u ) of I and s. Here, the positive unit clause I --~ T is resolved with the negative literal s -~ T in the clause q ^ s ~- T :~ u -~ T, and produces a new Horn clause qa ::~ u a "" T . The new clause is a logical consequence of the two given clauses, since sa =lra, where r renames variables in l so that it shares none with s. Any unit clause that is a logical consequence of a set of Horn clauses E is an instance of a unit clause producible by repeated application of this rule of inference.
Horn clauses with both equality and non-equality literals can be expressed as conditional equations with equality literals only. The equality axioms, including functional reflexivity, are also Horn clauses. Positive-unit resolution, or any other complete variation of resolution, could be used to prove theorems in equational Horn theories, but the cost of treating equality axioms like any other clause is prohibitively high. For this reason, special inference mechanisms for equality, notably paramodulation (l~ohinson and Wos, 1969), have been devised. In the Horn case, a unit strategy can be combined with paramodulation (Henschen and Wos, 1974; Furbach, 1987).
In this paper, we describe a new complete theorem-proving method for equational Horn theories. It utilizes orderings of terms and atoms to restrict inferences, and is a generalization of ordered completion (Hsiang and R.usinowitch, 1987; Bachmair, et al., 1989), an "unfailing" extension of the "completion procedure" in Knuth and Bendix (1970) for unconditional equational inference. Completion operates on asymmetrical equations, that is, on rewrite rules, and has as its goal the production of confluent (Church-l~osser) systems of rules that can be used to decide validity. For a survey of rewriting, see Dershowitz and Jouannaud (1990).
Brown (1975) and Lankford (1975) first suggested combining completion for oriented equations, with paramodulation for unorientable ones and resolution for non-equality atoms. Paul (1986) studied the application of completion to sets of Horn clauses with equality. Completion was extended to conditional equations by Kaplan (1987) and Ganzinger (1987). Unit strategies, such the one given here, do not seem to be appropriate for completion. Recently, several restrictions of paramodu]ation based on term orderings have been proposed for the full first-order case, including Zhang and Kapur (1988) and Rusinowitch (1989). Kounalis and l~usinowitch (1987) and Bachmair, et al. (1989) improved upon the earlier Horn-clause methods in various ways.
Our method severely restricts resolution with paramodulation by incorporating an ordering on (atoms and) terms. Inferences are limited in the following ways:
• The functional reflexive axioms are not needed and, at the same time, paramodulation into variables is avoided (as for some versions of paramodulation).
• For all (resolution and paramodulation) inferences, at least one of the equations must be unconditional (as in positive unit resolution and positive unit paramodulation).
• Unless an equation is unconditional only its conditional part is used for paramodulation (analogous to positive-unit resolution).
• Only maximal terms (with respect to a given ordering) are used (analogous to ordered resolution).
Unlike Kounalis and Rusinowitch (1987), we use only unit clauses when paramodulating into conditions; unlike Bachmair, et al. (1989), all our inference rules use only the maximal side of an equation. Thus, our method is the first to combine a unit strategy with one based on maximal terms. It also allows for (virtually unrestricted) simplification (demodulation) by unconditional equations. Since some of the rules we consider delete or simplify antecedent clauses, the above format for inference rules, with the equations that participated in the inference also appearing as part of the consequent, is advantageous.

16
Limiting inference partially controls growth; keeping clauses fully simplified stunts growth even further. Such restrictions are of paramount importance in any practical theorem prover, but their (refutation"l) completeness has been difficult to establish. For our completeness proof, we adapt the proof-ordering method of Bachmair, ctal. (1986) to conditional proofs. Proof orderings allow us to limit narrowing to negative liter,Is, something that appears impossible with the recent transfinite-tree proof method of Hsiang and Rusinowitch (1986). The crux of our method is the observation that any conditional equational proof not in "normal form" must either have an unconditional "peak", that is, two applications of unconditional equations such that the middle term is the largest of the three involved, or an unconditional "drop", that is, an application of an unconditional equation (or reflexivity of equals) to an instance of a condition. The proof procedure is designed to eliminate peaks and drops, thereby reducing the complexity assigned to the proof. The refutational completeness of this strategy, but not the more general proof normalization result, follows from concurrent work of Bachmair and Ganzinger (1990) on first-order proofs. A unit Horn-clause strategy with simplification is also proved complete in Bachmair (1991).
2. Orderings
Let T be a set of (first-order) terms, with variables taken from a set r~, and ~ be its subset
of ground (variable-free) terms. If t is a term in 7", by tl= signifies the subterm of t rooted at
position x; then by t[s]=, for some term 8, we denote the term t with its subterm ~l~rreplaced bys.
Term orderings are of central importance in the proposed method. A total ordering >
on ground terms ~ is called a complete simplification ordering if it has (a) the "replacement
property", 8 > t implies that any term u[s]~r, with subterm s located at some position ~r, is greater under > than the term u[t]w with that occurrence of s replaced by t, and (b) the "subterm property", t > tl~ for all subterms ~1~ of t. Such a ground-term ordering must be
a well-ordering (Dershowitz, 1982). A completable simplification ordering on all terms 7" is a well-founded partial ordering ~- (c) that can be extended to a complete simplification ordering
> on ground terms, such that (d) s ~- t implies that s~ > t~r for all ground substitutions ~. Furthermore, we will assume (e) that the constant T is minimal in ~-.
With a total ordering of atoms and with no equations, per se, the method of the next section
is just selected positive-unit resolution, in which the largest negative literal is chosen. The appropriate inference rule would be expressed as:
E U ( q ^ s ~ - T =~ 1,.¢Tu~-T')
EU l~_T, qcr =~ ~, ~-T
where ~ = raga(s, l), and would only be applied when s > q, by which we meau that 8 is the largest negative literal in its clause. A total simplification ordering on non-ground literals is not actually possible (which is why the ordering of the parent clause is inherited in ordered resolution), but can be approximated by a partial ordering. If only a partial ordering ~- is given, we resolve negative literals that are potentially maximal. That is, we apply the above rule if 8~ 7~ q~, or, in other words, if the instance 8~ of s created by resolution is not necessarily smaller than the other instantiated negative literals.
Suppose E is a set of Horn clauses in conditional equation form. To handle equality liter"is we need to unify at subterms of conditions, not just at the literal level. Suppose 1 _~ r is an

17
equation in E. Note that whenever we refer to equations in a set, we mean that it, or the symmetric equation (with I and r exchanged), or a variant with variables renamed uniformly, actually appears in the set. With that in mind, if I unifies with a non-variable subterm sl~ of a maximal term s in a condition s -~ t of a conditional equation q A s ~ t :~ u ~ v, then a new Horn clause is created by applying the most general unifying substitution a to the conditional
equation, and then replacing la with r a , as per the unit clause l ~- r. More precisely, we infer the clause qaAsa[ra]~ ~_ta =~ Ha ~--va, provided that sa is not smaller under ~- than the other side of the condition Sa, or of either side of the other conditions qa, or of the new term sa[ra]~. Thus, the conditions ensure that sa is the (potentially) larger side of the condition that is being
paramodulated into and that the replacement yields a (potentially) smaller condition. Of course, the empty ordering is completable. But the strength of the method, both in
minimizing possible inferences and maximizing potential simplifications, is brought to bear by employing more complete orderings. In practice, any efficiently computable ordering should be better than uncontrolled paramodulation. The polynomial and path orderings commonly used in rewrite-based theorem provers (see Dershowitz, 1987) are completable. In particular, the lexicographic variant of the recursive path ordering (Kamin and L6vy, 1980) has decidability properties (Comon, 1990) that make it ideal for this purpose. Choosing an ordering that takes the goal (theorem) into account can impart a top-down flavor to the otherwise bottom-up procedure.
3. Unit Strategy
We formulate our theorem-proving procedure as an inference system operating on a set of conditional equations, and parameterized by a completable ordering ~-.
The rules may be classified into three "expansion" rules and four "contraction" rules. The first expansion rule applies to unit clauses:

t ~- r

if a = mgu(Hl,r , l)

Superposition (i.e. oriented paramodulation of positive equational literals) is performed only at non-variable positions (ul~ ~ X). Either side of an equation may be used for superposition, but only if, in the context of the paramodulation, it is potentially the largest term involved
(Ha 7( va, ua[ra]~r). Note that the two equations, u -~ v and l -~ r, may actually be the same
(except for renaming). The second rule applies a unit equation to a negative literal:

Narrow :

{ qAs~-'
EU
qa A sa[ra]~ "~ ta

l~ r
=~ u~--v' }
l_~r,
~ ua " va

if

a = mgH(sl~, t)
8a~qa'ta'sa[ra]"

Whenever this or subsequent rules refer to a conditional equation llke q A s _~ t :~ u ~ v, the intent is that s -~ ~ is any one of the conditions and u is either side of the implied equation.
The last expansion rule in effect resolves a maximal negative literal with reflexivity of equals
(x x).

18

E U ( q A s ' ~ t =~ u ~ v ) if ( a = m g u ( s , $ )

Reflect: E'"U'"~"'qAs~_t =~ u~_v, }

saT(q~"

L qa =~ ua ~- va
The remaining, contraction rules all simplify the set of conditional equations. The first deletes trivial conditional equations:

Delete:

E

Here and later, when a rule refers to a clause of the form q =~ u ~_ v, an unconditional equation

(u ~- v) is also intended.

The next rule allows for deletion of conditions that are trivially true:

E U ( q A s " s :=} u ' v )
C o n d e n s e : ,, ,
E U { q =~ u ~ - v }

The last two contraction rules use unit clauses to simplify other clauses. One rule simplifies
conditions; the other applies to the equation part. In both cases, the original clause is replaced
by a version that is equivalent but strictly smaller under ~-.

Simplify

if ~ q]~ = la

l~ r

Compose :

if

E u ( q = ~ Z~_~-'~["]'~-v')

ul,~ = la
u ~- u[ra]~ q~TYv~-uVu~l

By q ~ T we mean that the equation has at least one condition; by u ~,I we mean that u is
strictly larger than l in the encompassment ordering in which a term is larger than its proper
subterms and smaller than its proper instances. Ordered completion, which deals just with unconditional equations, uses the rules, super-
pose, delete, and compose. As a simple example of our unit strategy, consider the following three clauses:

x<y~-TAy<z,',T

0 < c(0) ~ T c(~) < c(~) ~_ ~ <
:~ x < z " T

Using a (left-to-right) lexicographic path ordering, they generate an infinite number of clauses to which contraction rules cannot be applied:

0 < ci(O) ~ T (i >_1)

(1)

~(~) < ~(~) _~ ~ < ~

(2)

x < J ( ~ ) ~_ T ^ ~ < ~ _~ 7 =~ x < ~J(~) _~ T (j > 0)

(3)

0 < z "¢T =} 0 < ck(z) -~ T (k ~ 1)

(4)

z < eJ(0) ~ T =~ z < ci+J(O)~- T (] :> 0)

(5)

x < y ~ T ^ ckCy) < • __ r ~ ck(~) < ~ _~ T (~ > 1)

(~)

There are no possible reflections, since no condition has unifiable sides. No superposition

19

inferences between clauses of type (1) and (2), or narrowing inferences between (2) and (4), are allowed, because c(y) does not unify with 0.
Unit clauses of type (1) do not unify with the second condition of (6) for the same reason. Narrowing at the first condition of (6) is also not possible. That would produce an instance of (6) in which the chosen condition is not maximal, since, in

0 < J ( 0 ) _~ T ^ ck+~(0) < z _~ T ~ ck(0) < z ~_ T

the term ck+i(0) is larger than 0. Unifying 0 < c~(0) from (1) with the condition of (4) and narrowing yields:

T - ~ T =~ O<ci+~(O)

which condenses to a new equation of type (l):

o < c~+k(o)

Similarly, narrowing (5) with (1) generates an equation of type (1). Unifying 0 < c~(0) from (1) with the first condition z < cJ(y) of (3) can only succeed if i >_j ,
giving
0<c~(0)-TAc/-J(0)<z~Y =~ 0<c~(z)~T

as the relevant instance of (3). For i > j, the second condition is larger than the first and the inference is not performed. For i = j, we get the new clause

T'TAO<z"T

=~ 0 < c i ( z ) ~ T

which condenses to a clause of type (4). Unifying 0 < c~(0) with the second condition of (3) gives (after condensation)

x < J(0) -~ T ~ = < J+J(0) -~ T

which is of type (5). Unifying (2) with the first condition of (6) gives

c ( x ) < c(~) _~ T ^ ck+~(y) < z _~ T ~ c~+~(x) < z _~ T

which simplifies to another type (6) clause:

Unifying (2) with the second condition of (6) gives (after simplification):

x < y _~ T ^ ? - ~ ( y ) < z _~ T ~ ok(x) < c ( z ) ~- T

which after composition turns out to be an already existing clause:

z <y,'.TAck-l(y)<z,.,T

=~ c k - l ( z ) < z ~ _ T

Similarly, narrowing (3) with (2) generates bigger clauses of type (3), while narrowing (5)
with (2) gives smaller clauses of type (5).
Note that clauses like c(0) < c(c(c(O))) ~_ T are not generated; all the same, the complete set of unit clauses, (1) and (2), will reduce any equation cJ(0) < c~+:(0) ~ T to the contradiction
T~7.

4. Completeness
Let > be any complete simplification ordering extending the given partial ordering ~-. We define a symmetric binary relation ,-% for a particular set of conditional equations E, as the smallest relation satisfying tiler]= *-~ t[r~]= for all ul ~- vl A.-. ^ un ~ ~,~ =~ I ~ r in E such

20

that uia ~* via for each i, where ~* is the reflexlve-transitive closure of ~. This relation corresponds to "substitution of equals" according to the axioms in E. We also define a rewrite relation on ground terms G as the intersection of > and ~ . That is, $[la]~ ~ t[ra]~ if ul vl A - . - ^ u,~ "~ v, =~ l --~r is in E , t[la]`K > t[ra]`K, and uia ~ * via for each i. We use ~- for the inverse of -% and 4 " and ~ * for the reflexive-transitive closures of --* and 4-, respective2y.
A proof of an equation s -~ $ between ground terms (any variables in s and $ may be treated as Skolem constants) is a "derivation"

S = $1 ( "~'1 ) t 2 < `K2 ) • • • "Ken; ~ m + l = t

~I0"1

~a 2

~mO'm

11
/'1 P~

I
P~

of m + I terms (m >_ 0), each step tk ~ tk+~ of which is either trivial (tk+~ = tk), or else is justified by a conditional equation ek in E , a position 7rk in tk, a substitution ak for variables in the equation, and subproofs auk for the conditions pkak of the applied instance ekak. Steps employing an unconditional equation do not have subproofs as part of their justification. By the completeness of positive-unlt resolution for Horn clauses, any equation s ~ $ that is valid for a set E of conditional equations is amenable to such an equational proof.
We use the notation E ~- E t to denote one inference step, applying any of the seven rules to a set E of conditional equations to obtain a new set E I. The inference rules are evidently sound, in that the class of provable theorems is unchanged by an inference step.
By a peak, we mean a proof segment of the form s ~ u ~ t; by a valley, we mean a proof segment of the form u --** w *-* t; by a drop, we mean a step s --, t with valley subproofs; a plateau is a trivial subproof of form s ~ s. The depth of a proof is the maximum number of nestings of subproofs; it is one more than the maximum depth of its subproofs. A normal-form proof is a valley proof of depth 0. That is the same as saying that a normal-form proof has no peaks, no drops, and no plateaus. Normal-form proofs may be thought of as "direct" proofs; in a refutational framework the existence of such a proof for s -~ t means that demodulation of s and t using positive unit equations suffices to derive a contradiction between the Skolemized negation s ~ ~ t I of the given theorem and x -~ x.
The above inference rules are designed to allow any equational proof to be tranformed into normal form. A strategy based on these rules is complete if we can show that, with enough inferences, any theorem has a normal-form proof. We call an inference "fair" if all persistent superpositions, narrowings, and reflections have been considered:

D e f i n i t i o n . An inference sequence E0 I- F_q b . . . is fair if exp(Eoo) C_ Ui>OEi,

where B~o is the set liminfi B i = Ui>oni>iBi of persisting conditional equations and exp(B~o) is the set of conditional equations that may be inferred from persisting equations by one application of an expansion nile (superpose, narrow, or reflect).

Our goal is to demonstrate that for any proof s *-~*t of s --- t in Eo, there eventually exists an unconditional valley proof s --** w *-* L Were it not for contraction rules, it would be relatively easy to show that n a r r o w and reflect eventually provide an unconditional proof of s ~ $, and that superpose eventually turns that into a valley.

T h e o r e m ( N o r m a l i z a t i o n ) . If an inference sequence Eo ~" E1 b . . . is fair, then for any proof of s "" t in Eo, there is a normal.form proof of s ~- t in Eoo.

This is shown by transfinite induction on proofs. Proofs axe measured in the following way: For each step

21
7
P in a proof, where e is a conditional equation ql ^ " " A qn =~ ~z~_ v, we consider the quintuple
(n, ~aA---A q~, tk, u, tk+l),
where (with loss of generality) we are assuming ~/c >_t/~+l in the complete ordering >. Quintuples axe compared left-to-right lexJco~aphical]y, with the first component (the number of conditions n) compared in the natural ordering of natural numbers, the second (the instantlated conditions ql~ ^ ... ^ q, cr), third (tk), and fifth (tk+i) components under the complete ordering >, and the fourth component (u) in the encompassment ordering ~,. An unconditional step has 0 as its first component and T as its second. Finally, proofs are compared by comparing multisets consisting of quintuples for all steps in their top-level proofs or subproofs, using the extension to finite multlsets of the above ordering on quintuples. We use >> to denote this proof ordering. It can be shown by standard arguments (Dershowitz and Manna, 1979) that >> is well-founded.
Intuitively, the first component is designed to decrease with each appl/cation of reflect or condense, the second with applications of narrow or simplify, the third with superpose, the fourth and fifth cater to compose. The multiset structure of the proof ordering ensures that decreasing the complexity of subproofs decreases the complexity of the whole proof (and also takes care of delete). We need to show that inferences never increase the complexity of proofs and, furthermore, that there are always inferences that can decrease the complexity of nonnormal proofs. Then, by induction with respect to >>, the eventual existence of a normal-form proof follows.
L e m m a I. If E F E l,then for any proof P in E of an equation s ~-- t, there exists a proof pt in E' of s N ~, such that P > P' or P = P'.
This is established by consideration of the effects of each contracting inference rule that deletes or replaces equations, since for expansion rules, E C E', and we can take P' = P.
Consider any ground proof and look at a step tic = w[u~]~ ~ w[v~]~r= tk+l.
D e l e t e can prevent a proof from employing a clause p =~ u ~- u. There is, however, an alternative proof that splices out the step tk ~ tk+l = tk, leaving just tic, and omits all its subproofs. Tiffs strictly decreases the complexity of the whole proof, by eliminating one or more quintuples from the multiset measure.
C o n d e n s e erases a condition s ~- s from a clause. If e is such a clause, there is a new proof using the condensed clause instead, which omits any (unnecessary) proofs of that condition. The quintuple associated with the step experiences a decrease in its ~rst component.
Simplify changes the second component of the step's cost from q[l~] to the smaller q[rcr]. Though the cost of the subproofs is increased on account of an additional unconditional step q[hr] ~ q[ra] needed to establish q[r~r] (given proofs of q[/cr]), that unconditional step (with 0 in its first component) is dominated by the simplified conditional one (with m > 0 in its first component).
C o m p o s e replaces a step tk = zo[/~']~ - , ~ , = ~ tk+l with a two-step proof tk = zo[ll"]--* wire'] *-~ ~k+l. The cost of the replaced step is (n, pcr,tk, u,~k+l) if ~/~ > tk+l; otherwise, it is (n,p~,~+a,v,t~). If ~k > ~+1, then the cost of wire-] ~ tk+~ is smaller in the third component; if t~ < t~+x, it is smaller in the last. (The first two components axe in any case unchanged.) The cost (0, T, tk, l, w[r~']) of the unconditional step tk ~ w[rr] is

22
smaller than that of the replaced step in the first, third, or fourth component, depending on which of the enabling conditions of the inference rule is satisfied: if the replaced step was conditional (q ~ T), then it is smaller in the first;ifq = T, but v > u, then (by the replacement and substitution properties) tt+~ > t~, and the reduction is in the third; if q = T and v < u, but u l~l,then the firstthree components are the same, but the fourth is smaller in the encompassment ordering.
L e m m a 2. If P is a non-normal-form proof in E, then there ezists a proof P~ in E U e x p ( E ) such that P >> P~.
The argument depends on a distinction between "non-critical" subproofs, for which there is a proof P~ in E itself, and "critical" subproofs, for which equations in e x p ( E ) are needed. A peak tk-1 ~ z ~ _ ~ tk ~¢r~_~arP ~k+l~ where ~k = w[l~]~[~r]p, is critical if the position ~r is at or below the position p in w at whi'ch ~ ~ v is applied, but not at or below a position corresponding to any variable in u, or (symmetrically) if p falls within the non-variable part of the occurrence of I in w. Similarly, a drop tk ~ q ~ m tk+l is critical if the first or last step of one of the subproofs for qo" takes place within the non-variable part of the condition q.
Since any proof must have at least one subproof of depth 0, any non-normal proof must have a plateau, an unconditional peak, or a drop of depth 1 with (unconditional) valley subproofs. Thus, we need not worry about peaks involving a conditional rule, nor drops in which the proof of some condition is not unconditional. All plateaus of depth 0 can be spliced out. Critical unconditional peaks, critical drops with non-empty unconditional valley subproofs, and drops with empty proofs of conditions can each be replaced by a smaller proof, using the conditional equation generated by a superpose, narrow, or reflect inference, respectively. Superposition replaces two steps with one that is smaller in the third component (the first two are unchanged); narrowing results in a step that is smaller in the second component (and removes a step from the subproof); reflection causes a decrease in the first component. Narrowing can be restricted to the maximal side of the maximal condition, since a drop with non-empty subproofs must have a step emanating from the larger side of its largest condition.
Non-critical unconditional peaks tt~-i *-- t/c -4 tk+l have alternative, smaller proofs tk-1 --+* t~ *--* tk+l in E by the version of the Critical Pair Lemma of (Knuth and Bendix, 1970) in (Lankford, 1975). Consider a non-critical drop w[n~r] ~q~.~_-.~ w[v~], with unconditional subproof/~r - 4 / ¢ --~*/¢~ ~-*/¢#, where pa is no smaller than any other term in the subproof qa. Suppose p has a variable z at position Ir and the first step applies within the variable part pl=. That is, p a =/~r[z~r], -4 p~[r]= = / ~ . Let 1" be the same substitution as cr except that
: z ~-+ r. There is a smaller proof (smaller, vis-a-vis :~) in E: w[u~r] 4--* w[ur] * - ~ a ~ _ ~ q to[#~'] --** ~o[v~r]. The new conditional step w[~r] 4-*z0[vr] is cheaper (in the second component) than the original, since qr must be strictly smaller than qa. The steps w[ua] *--* w[ur] and to[v~-] --** w[v~r] are also cheaper than w[uo'] ~ w[wr], since they are unconditional (hence smaller in the first component). Also any rewrites z~ -4 r that need to be added to turn a proof of q~ into a proof of q~" are unconditional.
The Norma~zation Theorem follows. If s ___t is provable in ~o, then (by Lemma 1) it has a proof P in the limit Eoo. If P is non-normal, then (by Lemma 2) it admits a smaller proof P~ using (in addition to Eoo) a finite number of equations in exp(Ec¢). By fairness, each of those equations appeared at least once along the way. Subsequent inferences (by Lemma I) can only decrease the complexity of the proof of such an equation once it appears in a set Ej (and has a one-step proof). Thus, each equation needed in P~ has a proof of no greater complexity in Eoo itself, and hence (by the multiset nature of the proof measure), there is a proof of s -~ t in Eco that is strictly smaller than P. Since the ordering on proofs is well-founded, by induction there must be a normal proof in E~.

23
5. Extensions
In the above method, the same orderingisused for simplificationas for choosing the maximal literal.In fact, a differentselectionstrategy can be used for choosing the literalto narrow, as in (Ganzinger, 1987; Sivakumar, 1989),but then the term ordering must be used to choose the larger side of the equality.
W e used only unconditional equations for simplificationand composition. Conditional equations can also be used--but only in those cases where the proof ordering shows a decrease anyway. An alternativeis to design an inference system that distinguishesbetween different kinds of non-unit clauses. A n instance p~ =~ u~ _~ v~ of a conditionalequation is "decreasing" (in the terminology of Dershowitz and Okada, 1990) if u# ~- va,pa in the completable ordering. This is the same condition as imposed on conditionalrewrite rulesby the completion-like procedures of Kaplan (1987) and Ganzinger (1987). In these methods, superposition is used when the left-hand side is larger than the conditions; narrowing, when a condition dominates the left-haad side. As theorem provers,however, they are refutationa~y incomplete, since they make no provisionfor "unorientable" equations s -~ t such that s ~ t and t ~ s. For a complete method, the inference rulesgiven here must be modified to use the largestpositive or negative clause in each expansion, and to treat decreasing equations like unit equations. In particular, superposition is needed between decreasing conditionalrules. W e must redefine a normal-form proof of 8 _~ t to be a valleyproof in which each subproof is alsoin normal form and ea~ term in a subproof is smaller than the larger of s and t; see (Dershowitz and Okada, 1988). (The normal forms of the previous sectionare a specialcase.) Any non-normal-form proof has a peak made from decreasing instances with normal-form subproofs, or elsehas a non-decreasing step with a drop.
References
[1] L. Bachmair, Canonical Equational Proofs. Boston: Birkhguser, 1991. To appear.
[2] L. Bachmair, N. Dershowitz, and J. Hsiang, "0rderings for equa~onal proofs," in Proceedings of the IEEE Symposium on Logic in Computer Science, (Cambridge, MA), pp. 346-357, June 1986.
[3] L. Bachmair, N. Dershowitz, and D. A. Plaisted, "Completion without failure," in Resolution of Equations in Algebraic Structures ~: Reurriting Techniques (H. /gt-Kaci and M. Nivat, eds.), ch. 1, pp. 1-30, New York: Academic Press, 1989.
[4] L. Bachmair and H. Ganzinger,."On restrictions of ordered paramodulation with simpli~ fication," in Proceedings of the Second International Workshop on Conditional and Typed Rewriting Systems (M. Okadv, ed.), (Montreal, Canada), June 1990. Lecture Notes in Computer Science, Springer, Berlin.
[5] R. S. Boyer, Locking: A restriction of resolution. PhD thesis, University of Texas at Austin, Austin, TX, 1971.
[6] T. C. Brown, Jr., A structured design-method for specializedproof procedures. PhD thesis, California Institute of Technology, Pasadena, CA, 1975.
[7] H. Comon, "Solving inequations in term algebras (Preliminary version)," in Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science (Philadelphia, PA), pp. 62---69, June 1990.

24
[8] N. Dershowitz, "Orderings for term-rewriting systems," Theoretical Computer Science, vol. 17, pp. 279--301, March 1982.
[9] N. Dershowitz, "Termination of rewriting," J. of Symbolic Computation, vol. 3, pp. 69--115, February/April 1987. Corrigendum: 4, 3 (December 1987), 409--410.
[10] N. Dershowitz and J.-P. Jouannaud, "Rewrite systems," in Handbook of Theoretical Computer Science B: Formal Methods and Semantics, (J. van Leenwen, ed.), eh. 6, Amsterdam: North-Holland, 1990.
[11] N. Dershowitz and Z. Manna, "Proving termination with multiset orderings," Communications of the ACM, vol. 22, pp. 465-476, August 1979.
[12] N. Dershowitz and M. Okada, "Proof-theoretic techniques and the theory of rewriting," in Proceedings of the Third IEEE Symposium on Logic in Computer Science (F~nburgh, Scotland), pp. 104-111, July 1988.
[13] N. Dershowitz and M. Okada, "A rationale for conditional equational programmlug," Theoretical Computer Science, vol. 75, pp. 111--138, 1990.
[14] U. Furbach, "Oldy but goody: Paramodulation revisited," in Proceedings of the GI Workshop on Artificial Intelligence (Morik, ed.), pp. 195-200, 1987. Vol. 152 of Informatik Fachberichte.
[15] H. Ganzinger, "A completion procedure for conditional equations," in Proceedings of the First International Workshop on Conditional Term Rewriting Systems (S. Kaplan and J.P. Jouannaud, eds.), (Orsay, France), pp. 62-83, July 1987. Vol. 308 of Lecture Notes in Computer Science, Springer, Berlin (1988).
[16] L. Henschen and L. Wos, "Unit refutations and Horn sets," J. of the Association for Computing Machinery, vol. 21, pp. 590-605, 1974.
[17] J. Hsiang and M. Rusinowitch, "A new method for establishing refutational completeness in theorem proving," in Proceedings of the Eighth International Conference on Automated Deduction (J. H. Siekmann, ed.), (Oxford, England), pp. 141-152, July 1986. Vol. 230 of Lecture Notes in Computer Science, Springer, Berlin.
[18] J. Hsiang and M. l~usinowitch, "On word problems in equational theories," in Proceedings of the Fourteenth EATCS International Conference on Automata, Languages and Programming (T. Ottmann, ed.), (Karlsruhe, West Germany), pp. 54-71, July 1987. Vol. 267 of Lecture Notes in Computer Science, Springer, Berlin.
[19] S. Kamin and J.-J. L~vy, "Two generalizations of the reeursive path ordering," Unpublished note, Department of Computer Science, University of nlinois, Urbana, IL, February 1980.
[20] S. Kaplan, "Simplifying conditional term rewriting systems: Unification, termination and confluence," J. of Symbolic Computation, vol. 4, pp. 295--334, December 1987.
[21] D.E. Knuth and P. B. Bendix, "Simple word problems in universal algebras," in Computational Problems in Abstract Algebra (J. Leech, ed.), pp. 263-297, Oxford, U. K.: Pergamon Press, 1970. Reprinted in Automation of Reasoning 2, Springer, Berlin, pp. 342-376 (1983).

25
[22] E. Kounalis and M. Rusinowlteh, "On word problems in Horn theories," in Proceedings of the First International Workshop on Conditional Term Rewriting Systems (S. Kaplan and J.-P. Jouannaud, eds.), (Orsay, France), pp. 144-160, July 1987. 3/ol. 308 of Lecture Notes in Computer Science, Springer, Berlin (1988).
[23] D. S. Lankford, "Canonical inference," Memo ATP-32, Automatic Theorem Proving Project, University of Texas, Austin, TX, December 1975.
[24] E. Paul, "On solving the equality problem in theories defined by Horn clauses," Theoretical Computer Science, vol. 44, no. 2, pp. 127-153, 1986.
[25] G. Robinson and L. Wos, "Paramodulation and theorem-proving in first order theories with equaUty," in Machine Intelligence .t (B. Meltzer and D. Michie, eds.), pp. 135-150, Edinburgh, Scotland: Edinburgh University Press, 1969.
[26] M. Rusinowiteh, DEmonstration Automatique: Techniques de r~eriture. Paris, France: InterEditions, 1989.
[27] G. Sivakumar, Proofs and Computations in Conditional Equational Theories. PhD thesis, Department of Computer Science, University of nUnois, Urbana, IL, 1989.
[28] H. Zhang and D. Kaput, "First-order theorem proving using conditional equations," in Proceedings of the Ninth International Conference on Automated Deduction (E. Lnsk and 1~. Overbeek, eds.), (Argonne, Illinois), pp. 1-20, May 1988. Vol. 310 of Lecture Notes in Computer Science, Springer, Berlin.

