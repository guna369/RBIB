Jørgen Bang-Jensen, Gregory Gutin
Digraphs Theory, Algorithms and Applications
15th August 2007
Springer-Verlag
Berlin Heidelberg NewYork London Paris Tokyo Hong Kong Barcelona Budapest

We dedicate this book to our parents, especially to our fathers, Børge Bang-Jensen and the late Mikhail Gutin, who, through their very broad
knowledge, stimulated our interest in science enormously.

Preface
Graph theory is a very popular area of discrete mathematics with not only numerous theoretical developments, but also countless applications to practical problems. As a research area, graph theory is still relatively young, but it is maturing rapidly with many deep results having been discovered over the last couple of decades.
The theory of graphs can be roughly partitioned into two branches: the areas of undirected graphs and directed graphs (digraphs). Even though both areas have numerous important applications, for various reasons, undirected graphs have been studied much more extensively than directed graphs. One of the reasons is that undirected graphs form in a sense a special class of directed graphs (symmetric digraphs) and hence problems that can be formulated for both directed and undirected graphs are often easier for the latter. Another reason is that, unlike for the case of undirected graphs, for which there are several important books covering both classical and recent results, no previous book covers more than a small fraction of the results obtained on digraphs within the last 25 years. Typically, digraphs are considered only in one chapter or by a few elementary results scattered throughout the book.
Despite all this, the theory of directed graphs has developed enormously within the last three decades. There is an extensive literature on digraphs (more than 3000 papers). Many of these papers contain, not only interesting theoretical results, but also important algorithms as well as applications. This clearly indicates a real necessity for a book, covering not only the basics on digraphs, but also deeper, theoretical as well as algorithmic, results and applications.
The present book is an attempt to ﬁll this huge gap in the literature and may be considered as a handbook on the subject. It starts at a level that can be understood by readers with only a basic knowledge in university mathematics and goes all the way up to the latest research results in several areas (including connectivity, orientations of graphs, submodular ﬂows, paths and cycles in digraphs, generalizations of tournaments and generalizations of digraphs). The book contains more than 700 exercises and a number of applications as well as sections on highly applicable subjects. Due to the fact that we wish to address diﬀerent groups of readers (advanced undergraduate

viii Preface
and graduate students, researchers in discrete mathematics and researchers in various areas including computer science, operations research, artiﬁcial intelligence, social sciences and engineering) not all topics will be equally interesting to all potential readers. However, we strongly believe that all readers will ﬁnd a number of topics of special interest to them.
Even though this book should not be seen as an encyclopedia on directed graphs, we included as many interesting results as possible. The book contains a considerable number of proofs, illustrating various approaches and techniques used in digraph theory and algorithms.
One of the main features of this book is the strong emphasis on algorithms. This is something which is regrettably omitted in some books on graphs. Algorithms on (directed) graphs often play an important role in problems arising in several areas, including computer science and operations research. Secondly, many problems on (directed) graphs are inherently algorithmic. Hence, whenever possible we give constructive proofs of the results in the book. ¿From these proofs one can very often extract an eﬃcient algorithm for the problem studied. Even though we describe many algorithms, partly due to space limitations, we do not supply all the details necessary in order to implement these algorithms. The later (often highly non-trivial step) is a science in itself and we refer the reader to books on data structures.
Another important feature is the vast number of exercises which not only help the reader to train his or her understanding of the material, but also complements the results introduced in the text by covering even more material. Attempting these exercises (most of which appear in a book for the ﬁrst time) will help the reader to master the subject and its main techniques.
Through its broad coverage and the exercises, stretching from easy to quite diﬃcult, the book will be useful for courses on subjects such as (di)graph theory, combinatorial optimization and graph algorithms. Furthermore, it can be used for more focused courses on topics such as ﬂows, cycles and connectivity. The book contains a large number of illustrations. This will help the reader to understand otherwise diﬃcult concepts and proofs.
To facilitate the use of this book as a reference book and as a graduate textbook, we have added comprehensive symbol and subject indexes. It is our hope that the detailed subject index will help many readers to ﬁnd what they are looking for without having to read through whole chapters. In particular, there are entries for open problems and conjectures. Every class of digraphs which is studied in the book has its own entry containing the majority of pages on which this class is treated. As sub-entries to the entry ‘proof techniques’ we have indexed diﬀerent proof techniques and some representative pages where the technique is illustrated.
Due to our experience, we think that the book will be a useful teaching and reference resource for several decades to come.

Preface

ix

Highlights
In this book we cover the majority of the important topics on digraphs ranging from quite elementary to very advanced ones. Below we give a brief outline of some of the main highlights of this book. Readers who are looking for more detailed information are advised to consult the list of contents or the subject index at the end of the book.
Chapter 1 contains most of the terminology and notation used in this book as well several basic results. These are not only used frequently in other chapters, but also serve as illustrations of digraph concepts. Furthermore, several applications of directed graphs are based on these elementary results. One such application is provided in the last section of the chapter. Basic concepts on algorithms and complexity can also be found in the chapter. Due to the comprehensive subject and notation indices, it is by no means necessary to read the whole chapter before moving on to other chapters.
Chapters 2 and 3 cover distances and ﬂows in networks. Although the basic concepts of these two topics are elementary, both theoretical and algorithmic aspects of distances in digraphs as well as ﬂows in networks are of great importance, due to their high applicability to other problems on digraphs and large number of practical applications, in particular, as a powerful modeling tool.
We start with the shortest path problem and a collection of classical algorithms for distances in weighted and unweighted digraphs. The main part of Chapter 2 is devoted to minimization and maximization of distance parameters in digraphs. We conclude the chapter by the following applications: the one-way street problem, the gossip problem and exponential neighbourhood local search, a new approach to ﬁnd near optimal solutions to combinatorial optimization problems.
In Chapter 3 we cover basic, as well as some more advanced topics on ﬂows in networks. These include several algorithms for the maximum ﬂow problem, feasible ﬂows and circulations, minimum cost ﬂows in networks and applications of ﬂows. We also illustrate the primal-dual algorithm approach for linear programming by applying it to the transportation problem. Although there are several comprehensive books on ﬂows, we believe that our fairly short and yet quite detailed account of the topic will give the majority of readers suﬃcient knowledge of the area. The reader who masters the techniques described in this chapter will be well equipped for solving many problems arising in practice.
Chapter 4 is devoted to describing several important classes of directed graphs, such as line digraphs, the de Bruijn and Kautz digraphs, seriesparallel digraphs, generalizations of tournaments and planar digraphs. We concentrate on characterization, recognition and decomposition of these classes. Many properties of these classes are studied in more detail in the rest of the book.

x Preface
In Chapter 5 we give a detailed account of results concerning the existence of hamiltonian paths and cycles in digraphs as well as some extensions to spanning collections of paths and cycles, in particular, the Gallai-Millgram theorem and Yeo’s irreducible cycle factor theorem. We give a series of necessary conditions for hamiltonicity which ‘converges’ to hamiltonicity. Many results of this chapter deal with generalizations of tournaments. The reader will see that several of these much larger classes of digraphs share various nice properties with tournaments. In particular the hamiltonian path and cycle problems are polynomially solvable for most of these classes. The chapter illustrates various methods (such as the multi-insertion technique) for proving hamiltonicity.
In Chapter 6 we describe a number of interesting topics related to hamiltonicity. These include hamiltonian paths with prescribed end-vertices, pancyclicity, orientations of hamiltonian paths and cycles in tournaments and the problem of ﬁnding a strong spanning subdigraph of minimum size in a strong digraph. We cover one of the main ingredients in a recent proof by Havet and Thomass´e of Rosenfeld’s conjecture on orientations of hamiltonian paths in tournaments and outline a polynomial algorithm for ﬁnding a hamiltonian path with prescribed end-vertices in a tournament. We conclude the chapter with a brief introduction of a new approach to approximation algorithms, domination analysis. We illustrate this approach by applying results on hamiltonian cycles in digraphs to the travelling salesman problem.
Connectivity in (di)graphs is a very important topic. It contains numerous deep and beautiful results and has applications to other areas of graph theory and mathematics in general. It has various applications to other areas of research as well. We give a comprehensive account of connectivity topics in Chapters 7, 8 and 9 which deal with global connectivity issues, orientations of graphs and local connectivities, respectively.
Chapter 7 starts from basic topics such as ear-decompositions and the fundamental Menger’s theorem and then moves on to advanced topics such as connectivity augmentation, properties of minimally k-(arc)-strong digraphs, highly connected orientations of digraphs and packing directed cuts in digraphs. We describe the splitting technique due to Mader and Lov´asz and illustrate its usefulness by giving an algorithm, due to Frank, for ﬁnding a minimum cardinality set of new arcs whose addition to a digraph D increases its arc-strong connectivity to a prescribed number. We illustrate a recent application due to Cheriyan and Thurimella of Mader’s results on minimally k-(arc)-strong digraphs to the problem of ﬁnding a small certiﬁcate for k(arc)-strong connectivity. Many of the proofs in the chapter illustrate the important proof technique based on the submodularity of degree functions in digraphs.
Chapter 8 covers important aspects of orientations of undirected and mixed graphs. These include underlying graphs of certain classes of digraphs. Nowhere zero integer ﬂows, a special case of ﬂows, related to (edge-)colourings

Preface

xi

of undirected graphs is discussed along with Tutte’s 5-ﬂow conjecture, which is one of the main open problems in graph theory. The famous theorem by Nash-Williams on orientations preserving a high degree of arc-strong connectivity is described and the weak version dealing with uniform arc-strong connectivities is proved using splitting techniques. Submodular ﬂows form a powerful generalization of circulations in networks. We introduce submodular ﬂows and illustrate how to use this tool to obtain (algorithmic) proofs of many important results in graph theory (including the Lucchesi-Younger theorem and the uniform version of Nash-Williams’ orientation theorem). Finally we describe in detail an application, due to Frank, of submodular ﬂows to the problem of orienting a mixed graph in order to maintain a prescribed degree of arc-strong connectivity.
Chapter 9 deals with problems concerning (arc-)disjoint paths and trees in digraphs. We prove that the 2-path problem is N P-complete for arbitrary digraphs, but polynomially solvable for acyclic digraphs. Linkings in planar digraphs, eulerian digraphs as well as several generalizations of tournaments are discussed. Edmonds’ theorem on arc-disjoint branchings is proved and several applications of this important result are described. The problem of ﬁnding a minimum cost out-branching in a weighted digraph generalizes the minimum spanning tree problem. We describe an extension, due to Frank, of Fulkerson’s two-phase greedy algorithm for ﬁnding such a branching.
Chapter 10 describes results on (generally) non-hamiltonian cycles in digraphs. We cover cycle spaces, polynomial algorithms to ﬁnd paths and cycles of ‘logarithmic’ length, disjoint cycles and feedback sets, including a scheme of a solution of Younger’s conjecture by Reed, Robertson, Seymour and Thomas, applications of cycles in digraphs to Markov chains and the even cycle problem, including Thomassen’s even cycle theorem. We also cover short cycles in multipartite tournaments, the girth of a digraph, chords of cycles and A´ d´am’s conjecture. The chapter features various proof techniques including several algebraic, algorithmic, combinatorial and probabilistic methods.
Digraphs may be generalized in at least two diﬀerent ways, by considering edge-coloured graphs or by considering directed hypergraphs. Alternating cycles in 2-edge-coloured graphs generalize the concept of cycles in bipartite digraphs. Certain results on cycles in bipartite digraphs, such as the characterization of hamiltonian bipartite tournaments, are special cases of results for edge-coloured complete graphs. There are useful implications in the other direction as well. In particular, using results on hamiltonian cycles in bipartite tournaments, we prove a characterization of those 2-edge-coloured complete graphs which have an alternating hamiltonian cycle. We describe an application of alternating hamiltonian cycles to a problem in genetics. Generalizations of the classical theorems by Camion, Landau and R´edei to hypertournaments are described.
Chapter 12 contains some topics that were not covered in other chapters. These include: an elementary proof of Seymour’s second neighbourhood con-

xii Preface
jecture in the case of tournaments, various types of orderings of the vertices of digraphs of paired comparisons, kernels, a recent proof by Galvin of the Dinitz conjecture on list colourings using kernels in digraphs, and homomorphisms (an elegant generalization of colouring and also a useful vehicle for studying the borderline between P and N P-complete problems). We describe basic concepts on matroids as well as questions related to the eﬃciency of matroid algorithms. We give a brief account on simulated annealing, a broadly applicable meta-heuristic which can be used to obtain near optimal solutions to optimization problems, in particular, on digraphs. We discuss brieﬂy how to implement and tune simulated annealing algorithms so that they may produce good solutions.
Technical remarks
We have tried to rank exercises according to their expected diﬃculty. Marks range from (−) to (++) in order of increasing diﬃculty. The majority of exercises have no mark, indicating that they are of moderate diﬃculty. An exercise marked (−) requires not much more than the understanding of the main deﬁnitions and results. A (+) exercise requires a non-trivial idea, or involves substantial work. Finally, the few exercises which are ranked (++) require several deep ideas. Inevitably, this labelling is subjective and some readers may not agree with this ranking in certain cases. Some exercises have a header in bold face, which means that they cover an important or useful result not discussed in the text in detail.
We use the symbol to denote the end of a proof, or to indicate that either no proof will be given or is left as an exercise.
A few sections of the book require some basic knowledge of linear programming, in particular the duality theorem. A few others require basic knowledge of probability theory.
We would be grateful to receive comments on the book. They may be sent to us by email to jbj@imada.sdu.dk. We plan to have a web page containing information about misprints and other information about the book, see
http://www.imada.sdu.dk/Research/Digraphs/
Acknowledgements
We wish to thank the following colleagues for helpful assistance and suggestions regarding various versions of the manuscript.
Adrian Bondy, Thomas B¨ohme, Samvel Darbinyan, Reinhard Diestel, Odile Favaron, Herbert Fleischner, Andr´as Frank, Vladimir Gurvich, Fr´ed´eric

Preface xiii
Havet, Bill Jackson, Hao Li, Martin Loebl, Wolfgang Mader, Crispin NashWilliams, Jarik Neˇsetˇril, Gert Sabidussi, Paul Seymour, Alexander Schrijver, St´ephan Thomass´e, Carsten Thomassen, Bjarne Toft and Ke-Min Zhang.
We extend special thanks to the following colleagues who read parts of the book and provided invaluable input to the project:
Noga Alon, Alex Berg, Jens Clausen, Charles Delorme, Yubao Guo, Jing Huang, Alice Hubenko, Tommy Jensen, Tibor Jord´an, Thor Johnson, Ilia Krasikov, Gary MacGillivray, Steven Noble, Erich Prisner, Eng Guan Tay, Meike Tewes, Lutz Volkmann and Anders Yeo.
Of course, any misprint or error that remains is entirely our responsibility.
We wish to thank Springer-Verlag, London and in particular David Anderson, Karen Barker, Beverly Ford, Stephanie Harding, Sally Tickner and Nicolas Wilson for all their help and encouragement. We also thank the anonymous reviewers used by Springer when we submitted our proposal. They provided us with encouragement and useful feedback.
We are grateful to our colleagues and the technical staﬀ at Department of Mathematics and Computer Science, University of Southern Denmark at Odense, for their encouragement and help as well as to the department itself for ﬁnancial support. In particular, we wish to thank Andrew Swann for all his help with the formatting of the manuscript. We thank the Danish National Research Council for ﬁnancial support through grant no 9701393.
Last, but most importantly, we wish to thank our families, in particular our wives Lene and Irina, without whose constant support we would never have succeeded in completing this project.

Odense, Denmark London, UK August 2000

Jørgen Bang-Jensen Gregory Gutin

Contents
1. Basic Terminology, Notation and Results . . . . . . . . . . . . . . . . . 1 1.1 Sets, Subsets, Matrices and Vectors . . . . . . . . . . . . . . . . . . . . . . . 1 1.2 Digraphs, Subdigraphs, Neighbours, Degrees . . . . . . . . . . . . . . . 2 1.3 Isomorphism and Basic Operations on Digraphs . . . . . . . . . . . . 6 1.4 Walks, Trails, Paths, Cycles and Path-Cycle Subdigraphs . . . . 10 1.5 Strong and Unilateral Connectivity . . . . . . . . . . . . . . . . . . . . . . . 16 1.6 Undirected Graphs, Biorientations and Orientations . . . . . . . . 18 1.7 Mixed Graphs and Hypergraphs . . . . . . . . . . . . . . . . . . . . . . . . . . 22 1.8 Classes of Directed and Undirected Graphs . . . . . . . . . . . . . . . . 25 1.9 Algorithmic Aspects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 1.9.1 Algorithms and their Complexity . . . . . . . . . . . . . . . . . . . 29 1.9.2 N P-Complete and N P-Hard Problems . . . . . . . . . . . . . 33 1.10 Application: Solving the 2-Satisﬁability Problem . . . . . . . . . . . . 35 1.11 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
2. Distances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 2.1 Terminology and Notation on Distances . . . . . . . . . . . . . . . . . . . 46 2.2 Structure of Shortest Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 2.3 Algorithms for Finding Distances in Digraphs . . . . . . . . . . . . . . 50 2.3.1 Breadth-First Search (BFS) . . . . . . . . . . . . . . . . . . . . . . . 50 2.3.2 Acyclic Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 2.3.3 Dijkstra’s Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 2.3.4 The Bellman-Ford-Moore Algorithm . . . . . . . . . . . . . . . . 55 2.3.5 The Floyd-Warshall Algorithm . . . . . . . . . . . . . . . . . . . . . 58 2.4 Inequalities Between Radius, Out-Radius and Diameter . . . . . 59 2.4.1 Radius and Diameter of a Strong Digraph . . . . . . . . . . . 59 2.4.2 Extreme Values of Out-Radius and Diameter . . . . . . . . 60 2.5 Maximum Finite Diameter of Orientations . . . . . . . . . . . . . . . . . 61 2.6 Minimum Diameter of Orientations of Multigraphs . . . . . . . . . 63 2.7 Minimum Diameter Orientations of Complete Multipartite Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 2.8 Minimum Diameter Orientations of Extensions of Graphs . . . . 69 2.9 Minimum Diameter Orientations of Cartesian Products of Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71

xvi Contents

2.10 Kings in Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.10.1 2-Kings in Tournaments . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.10.2 Kings in Semicomplete Multipartite Digraphs . . . . . . . . 2.10.3 Kings in Generalizations of Tournaments . . . . . . . . . . . .
2.11 Application: The One-Way Street and the Gossip Problems . . 2.11.1 The One-Way Street Problem and Orientations of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.11.2 The Gossip Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.12 Application: Exponential Neighbourhood Local Search for the TSP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.12.1 Local Search for the TSP . . . . . . . . . . . . . . . . . . . . . . . . . . 2.12.2 Linear Time Searchable Exponential Neighbourhoods for the TSP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.12.3 The Assignment Neighbourhoods . . . . . . . . . . . . . . . . . . . 2.12.4 Diameters of Neighbourhood Structure Digraphs for the TSP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.13 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

74 74 75 78 78
79 80
82 82
84 85
86 89

3. Flows in Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 3.1 Deﬁnitions and Basic Properties . . . . . . . . . . . . . . . . . . . . . . . . . . 95 3.1.1 Flows and Their Balance Vectors . . . . . . . . . . . . . . . . . . . 96 3.1.2 The Residual Network . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 3.2 Reductions Among Diﬀerent Flow Models . . . . . . . . . . . . . . . . . 99 3.2.1 Eliminating Lower Bounds . . . . . . . . . . . . . . . . . . . . . . . . . 99 3.2.2 Flows with one Source and one Sink . . . . . . . . . . . . . . . . 100 3.2.3 Circulations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 3.2.4 Networks with Bounds and Costs on the Vertices . . . . . 102 3.3 Flow Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 3.4 Working with the Residual Network . . . . . . . . . . . . . . . . . . . . . . 105 3.5 The Maximum Flow Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 3.5.1 The Ford-Fulkerson Algorithm . . . . . . . . . . . . . . . . . . . . . 110 3.5.2 Maximum Flows and Linear Programming . . . . . . . . . . . 113 3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow . . 114 3.6.1 Flow Augmentations Along Shortest Augmenting Paths114 3.6.2 Blocking Flows in Layered Networks and Dinic’s Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 3.6.3 The Preﬂow-Push Algorithm . . . . . . . . . . . . . . . . . . . . . . . 117 3.7 Unit Capacity Networks and Simple Networks . . . . . . . . . . . . . . 122 3.7.1 Unit Capacity Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 3.7.2 Simple Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124 3.8 Circulations and Feasible Flows . . . . . . . . . . . . . . . . . . . . . . . . . . 125 3.9 Minimum Value Feasible (s, t)-Flows . . . . . . . . . . . . . . . . . . . . . 127 3.10 Minimum Cost Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 3.10.1 Characterizing Minimum Cost Flows . . . . . . . . . . . . . . . . 131 3.10.2 Building up an Optimal Solution . . . . . . . . . . . . . . . . . . . 134

Contents xvii
3.11 Applications of Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137 3.11.1 Maximum Matchings in Bipartite Graphs . . . . . . . . . . . 137 3.11.2 The Directed Chinese Postman Problem . . . . . . . . . . . . . 141 3.11.3 Finding Subdigraphs with Prescribed Degrees . . . . . . . . 142 3.11.4 Path-Cycle Factors in Directed Multigraphs . . . . . . . . . 143 3.11.5 Cycle Subdigraphs Covering Speciﬁed Vertices . . . . . . . 145
3.12 The Assignment Problem and the Transportation Problem . . . 147 3.13 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
4. Classes of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 4.1 Depth-First Search . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172 4.2 Acyclic Orderings of the Vertices in Acyclic Digraphs . . . . . . . 175 4.3 Transitive Digraphs, Transitive Closures and Reductions . . . . 176 4.4 Strong Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 4.5 Line Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182 4.6 The de Bruijn and Kautz Digraphs and their Generalizations 187 4.7 Series-Parallel Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191 4.8 Quasi-Transitive Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195 4.9 The Path-Merging Property and Path-Mergeable Digraphs . . . 198 4.10 Locally In-Semicomplete and Locally Out-Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200 4.11 Locally Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . 202 4.11.1 Round Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203 4.11.2 Non-Strong Locally Semicomplete Digraphs . . . . . . . . . . 207 4.11.3 Strong Round Decomposable Locally Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 4.11.4 Classiﬁcation of Locally Semicomplete Digraphs . . . . . . 211 4.12 Totally Φi-Decomposable Digraphs . . . . . . . . . . . . . . . . . . . . . . . 215 4.13 Intersection Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217 4.14 Planar Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 4.15 Application: Gaussian Elimination . . . . . . . . . . . . . . . . . . . . . . . . 221 4.16 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
5. Hamiltonicity and Related Problems . . . . . . . . . . . . . . . . . . . . . . 227 5.1 Necessary Conditions for Hamiltonicity of Digraphs . . . . . . . . . 229 5.1.1 Path-Contraction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229 5.1.2 Quasi-Hamiltonicity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230 5.1.3 Pseudo-Hamiltonicity and 1-Quasi-Hamiltonicity . . . . . 232 5.1.4 Algorithms for Pseudo- and Quasi-Hamiltonicity . . . . . 233 5.2 Path Covering Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234 5.3 Path Factors of Acyclic Digraphs with Applications . . . . . . . . . 235 5.4 Hamilton Paths and Cycles in Path-Mergeable Digraphs . . . . . 237 5.5 Hamilton Paths and Cycles in Locally In-Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238 5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs . 240

xviii Contents
5.6.1 Suﬃcient Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240 5.6.2 The Multi-Insertion Technique . . . . . . . . . . . . . . . . . . . . . 246 5.6.3 Proofs of Theorems 5.6.1 and 5.6.5 . . . . . . . . . . . . . . . . . 248 5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250 5.7.1 Basic Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251 5.7.2 The Good Cycle Factor Theorem . . . . . . . . . . . . . . . . . . . 253 5.7.3 Consequences of Lemma 5.7.12 . . . . . . . . . . . . . . . . . . . . . 256 5.7.4 Yeo’s Irreducible Cycle Subdigraph Theorem and its
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259 5.8 Longest Paths and Cycles in Extended Locally Semicomplete
Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264 5.9 Hamilton Paths and Cycles in Quasi-Transitive Digraphs . . . . 265 5.10 Vertex-Heaviest Paths and Cycles in Quasi-Transitive Digraphs269 5.11 Hamilton Paths and Cycles in Various Classes of Digraphs . . . 273 5.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
6. Hamiltonian Reﬁnements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281 6.1 Hamiltonian Paths with a Prescribed End-Vertex . . . . . . . . . . . 282 6.2 Weakly Hamiltonian-Connected Digraphs . . . . . . . . . . . . . . . . . . 284 6.2.1 Results for Extended Tournaments . . . . . . . . . . . . . . . . . 284 6.2.2 Results for Locally Semicomplete Digraphs . . . . . . . . . . 289 6.3 Hamiltonian-Connected Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . 292 6.4 Finding a Hamiltonian (x, y)-Path in a Semicomplete Digraph 295 6.5 Pancyclicity of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299 6.5.1 (Vertex-)Pancyclicity in Degree-Constrained Digraphs . 299 6.5.2 Pancyclicity in Extended Semicomplete and QuasiTransitive Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300 6.5.3 Pancyclic and Vertex-Pancyclic Locally Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303 6.5.4 Further Pancyclicity Results . . . . . . . . . . . . . . . . . . . . . . . 306 6.5.5 Cycle Extendability in Digraphs . . . . . . . . . . . . . . . . . . . . 308 6.6 Arc-Pancyclicity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309 6.7 Hamiltonian Cycles Containing or Avoiding Prescribed Arcs . 312 6.7.1 Hamiltonian Cycles Containing Prescribed Arcs . . . . . . 312 6.7.2 Avoiding Prescribed Arcs with a Hamiltonian Cycle . . 315 6.7.3 Hamiltonian Cycles Avoiding Arcs in 2-Cycles . . . . . . . 317 6.8 Arc-Disjoint Hamiltonian Paths and Cycles . . . . . . . . . . . . . . . . 318 6.9 Oriented Hamiltonian Paths and Cycles . . . . . . . . . . . . . . . . . . . 321 6.10 Covering All Vertices of a Digraph by Few Cycles . . . . . . . . . . . 326 6.10.1 Cycle Factors with a Fixed Number of Cycles . . . . . . . . 326 6.10.2 The Eﬀect of α(D) on Spanning Conﬁgurations of Paths and Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329 6.11 Minimum Strong Spanning Subdigraphs . . . . . . . . . . . . . . . . . . . 331 6.11.1 A Lower Bound for General Digraphs . . . . . . . . . . . . . . . 331

Contents xix
6.11.2 The MSSS Problem for Extended Semicomplete Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
6.11.3 The MSSS Problem for Quasi-Transitive Digraphs . . . . 334 6.11.4 The MSSS Problem for Decomposable Digraphs . . . . . . 335 6.12 Application: Domination Number of TSP Heuristics . . . . . . . . 337 6.13 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
7. Global Connectivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345 7.1 Additional Notation and Preliminaries . . . . . . . . . . . . . . . . . . . . 346 7.1.1 The Network Representation of a Directed Multigraph 348 7.2 Ear Decompositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349 7.3 Menger’s Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353 7.4 Application: Determining Arc- and Vertex-Strong Connectivity355 7.5 The Splitting oﬀ Operation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358 7.6 Increasing the Arc-Strong Connectivity Optimally . . . . . . . . . . 362 7.7 Increasing the Vertex-Strong Connectivity Optimally . . . . . . . . 367 7.7.1 One-Way Pairs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 368 7.7.2 Optimal k-Strong Augmentation . . . . . . . . . . . . . . . . . . . 370 7.7.3 Special Classes of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . 371 7.7.4 Splittings Preserving k-Strong Connectivity . . . . . . . . . . 373 7.8 A Generalization of Arc-Strong Connectivity . . . . . . . . . . . . . . 376 7.9 Arc Reversals and Vertex-Strong Connectivity . . . . . . . . . . . . . 378 7.10 Minimally k-(Arc)-Strong Directed Multigraphs . . . . . . . . . . . . 381 7.10.1 Minimally k-Arc-Strong Directed Multigraphs . . . . . . . . 382 7.10.2 Minimally k-Strong Digraphs . . . . . . . . . . . . . . . . . . . . . . 387 7.11 Critically k-Strong Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 391 7.12 Arc-Strong Connectivity and Minimum Degree . . . . . . . . . . . . . 392 7.13 Connectivity Properties of Special Classes of Digraphs . . . . . . 393 7.14 Highly Connected Orientations of Digraphs . . . . . . . . . . . . . . . . 395 7.15 Packing Cuts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400 7.16 Application: Small Certiﬁcates for k-(Arc)-Strong Connectivity404 7.16.1 Finding Small Certiﬁcates for Strong Connectivity . . . . 405 7.16.2 Finding k-Strong Certiﬁcates for k > 1 . . . . . . . . . . . . . . 406 7.16.3 Certiﬁcates for k-Arc-Strong Connectivity . . . . . . . . . . . 408 7.17 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
8. Orientations of Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415 8.1 Underlying Graphs of Various Classes of Digraphs . . . . . . . . . . 415 8.1.1 Underlying Graphs of Transitive and Quasi-Transitive Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416 8.1.2 Underlying Graphs of Locally Semicomplete Digraphs . 419 8.1.3 Local Tournament Orientations of Proper Circular Arc Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421 8.1.4 Underlying Graphs of Locally In-Semicomplete Digraphs424 8.2 Fast Recognition of Locally Semicomplete Digraphs . . . . . . . . . 429

xx Contents
8.3 Orientations With no Even Cycles . . . . . . . . . . . . . . . . . . . . . . . . 432 8.4 Colourings and Orientations of Graphs . . . . . . . . . . . . . . . . . . . . 435 8.5 Orientations and Nowhere Zero Integer Flows . . . . . . . . . . . . . . 437 8.6 Orientations Achieving High Arc-Strong Connectivity . . . . . . . 443 8.7 Orientations Respecting Degree Constraints . . . . . . . . . . . . . . . . 446
8.7.1 Orientations with Prescribed Degree Sequences . . . . . . . 446 8.7.2 Restrictions on Subsets of Vertices . . . . . . . . . . . . . . . . . . 450 8.8 Submodular Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 451 8.8.1 Submodular Flow Models . . . . . . . . . . . . . . . . . . . . . . . . . 452 8.8.2 Existence of Feasible Submodular Flows . . . . . . . . . . . . . 453 8.8.3 Minimum Cost Submodular Flows . . . . . . . . . . . . . . . . . . 457 8.8.4 Applications of Submodular Flows . . . . . . . . . . . . . . . . . . 458 8.9 Orientations of Mixed Graphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 462 8.10 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 467
9. Disjoint Paths and Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475 9.1 Additional Deﬁnitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476 9.2 Disjoint Path Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 477 9.2.1 The Complexity of the k-Path Problem . . . . . . . . . . . . . 478 9.2.2 Suﬃcient Conditions for a Digraph to be k-Linked . . . . 482 9.2.3 The k-Path Problem for Acyclic Digraphs . . . . . . . . . . . 484 9.3 Linkings in Tournaments and Generalizations of Tournaments 487 9.3.1 Suﬃcient Conditions in Terms of (Local-)Connectivity 488 9.3.2 The 2-Path Problem for Semicomplete Digraphs . . . . . . 492 9.3.3 The 2-Path Problem for Generalizations of Tournaments493 9.4 Linkings in Planar Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 497 9.5 Arc-Disjoint Branchings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500 9.5.1 Implications of Edmonds’ Branching Theorem . . . . . . . 503 9.6 Edge-Disjoint Mixed Branchings . . . . . . . . . . . . . . . . . . . . . . . . . . 506 9.7 Arc-Disjoint Path Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507 9.7.1 Arc-Disjoint Paths in Acyclic Directed Multigraphs . . . 510 9.7.2 Arc-Disjoint Paths in Eulerian Directed Multigraphs . . 511 9.7.3 Arc-Disjoint Paths in Tournaments and Generalizations of Tournaments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517 9.8 Integer Multicommodity Flows . . . . . . . . . . . . . . . . . . . . . . . . . . . 520 9.9 Arc-Disjoint In- and Out-Branchings . . . . . . . . . . . . . . . . . . . . . . 522 9.10 Minimum Cost Branchings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 527 9.10.1 Matroid Intersection Formulation . . . . . . . . . . . . . . . . . . . 527 9.10.2 An Algorithm for a Generalization of the Min Cost Branching Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528 9.10.3 The Minimum Covering Arborescence Problem . . . . . . . 535 9.11 Increasing Rooted Arc-Strong Connectivity by Adding New Arcs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 536 9.12 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538

Contents xxi
10. Cycle Structure of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 545 10.1 Vector Spaces of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 546 10.2 Polynomial Algorithms for Paths and Cycles . . . . . . . . . . . . . . . 549 10.3 Disjoint Cycles and Feedback Sets . . . . . . . . . . . . . . . . . . . . . . . . 553 10.3.1 Complexity of the Disjoint Cycle and Feedback Set Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 553 10.3.2 Disjoint Cycles in Digraphs with Minimum Out-Degree at Least k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 554 10.3.3 Feedback Sets and Linear Orderings in Digraphs . . . . . 557 10.4 Disjoint Cycles Versus Feedback Sets . . . . . . . . . . . . . . . . . . . . . . 561 10.4.1 Relations Between Parameters νi and τi . . . . . . . . . . . . . 561 10.4.2 Solution of Younger’s Conjecture . . . . . . . . . . . . . . . . . . . 563 10.5 Application: The Period of Markov Chains . . . . . . . . . . . . . . . . . 565 10.6 Cycles of Length k Modulo p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 567 10.6.1 Complexity of the Existence of Cycles of Length k Modulo p Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568 10.6.2 Suﬃcient Conditions for the Existence of Cycles of Length k Modulo p . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570 10.7 ‘Short’ Cycles in Semicomplete Multipartite Digraphs . . . . . . . 573 10.8 Cycles Versus Paths in Semicomplete Multipartite Digraphs . 577 10.9 Girth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 580 10.10 Additional Topics on Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 583 10.10.1 Chords of Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 583 10.10.2 A´ d´am’s Conjecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 584 10.11Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 586
11. Generalizations of Digraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591 11.1 Properly Coloured Trails in Edge-Coloured Multigraphs . . . . . 592 11.1.1 Properly Coloured Euler Trails . . . . . . . . . . . . . . . . . . . . . 594 11.1.2 Properly Coloured Cycles . . . . . . . . . . . . . . . . . . . . . . . . . 597 11.1.3 Connectivity of Edge-Coloured Multigraphs . . . . . . . . . . 601 11.1.4 Alternating Cycles in 2-Edge-Coloured Bipartite Multigraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 604 11.1.5 Longest Alternating Paths and Cycles in 2-Edge-Coloured Complete Multigraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607 11.1.6 Properly Coloured Hamiltonian Paths in c-Edge-Coloured Complete Graphs, c ≥ 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . 613 11.1.7 Properly Coloured Hamiltonian Cycles in c-Edge-Coloured Complete Graphs, c ≥ 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . 615 11.2 Arc-Coloured Directed Multigraphs . . . . . . . . . . . . . . . . . . . . . . . 620 11.2.1 Complexity of the Alternating Directed Cycle Problem 621 11.2.2 The Functions f (n) and g(n) . . . . . . . . . . . . . . . . . . . . . . 624 11.2.3 Weakly Eulerian Arc-Coloured Directed Multigraphs . . 626 11.3 Hypertournaments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 627 11.3.1 Out-Degree Sequences of Hypertournaments . . . . . . . . . 628

xxii Contents
11.3.2 Hamilton Paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 629 11.3.3 Hamilton Cycles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 630 11.4 Application: Alternating Hamilton Cycles in Genetics . . . . . . . 632 11.4.1 Proof of Theorem 11.4.1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 634 11.4.2 Proof of Theorem 11.4.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . 635 11.5 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 636
12. Additional Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639 12.1 Seymour’s Second Neighbourhood Conjecture . . . . . . . . . . . . . . 639 12.2 Ordering the Vertices of a Digraph of Paired Comparisons . . . 642 12.2.1 Paired Comparison Digraphs . . . . . . . . . . . . . . . . . . . . . . . 642 12.2.2 The Kano-Sakamoto Methods of Ordering . . . . . . . . . . . 645 12.2.3 Orderings for Semicomplete PCDs . . . . . . . . . . . . . . . . . . 645 12.2.4 The Mutual Orderings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 646 12.2.5 Complexity and Algorithms for Forward and Backward Orderings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 647 12.3 (k, l)-Kernels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 650 12.3.1 Kernels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 650 12.3.2 Quasi-Kernels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653 12.4 List Edge-Colourings of Complete Bipartite Graphs . . . . . . . . . 654 12.5 Homomorphisms – A Generalization of Colourings . . . . . . . . . . 658 12.6 Other Measures of Independence in Digraphs . . . . . . . . . . . . . . 664 12.7 Matroids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 665 12.7.1 The Dual of a Matroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . 667 12.7.2 The Greedy Algorithm for Matroids . . . . . . . . . . . . . . . . 668 12.7.3 Independence Oracles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669 12.7.4 Union of Matroids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 670 12.7.5 Two Matroid Intersection . . . . . . . . . . . . . . . . . . . . . . . . . 671 12.7.6 Intersections of Three or More Matroids . . . . . . . . . . . . . 672 12.8 Finding Good Solutions to N P-Hard Problems . . . . . . . . . . . . . 673 12.9 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 683
Symbol Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 717
Author Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 723
Subject Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 731

1. Basic Terminology, Notation and Results
In this chapter we will provide most of the terminology and notation used in this book. Various examples, ﬁgures and results should help the reader to better understand the notions introduced in the chapter. The results covered in this chapter constitute a collection of simple yet important facts on digraphs. Most of our terminology and notation are standard. Therefore, some readers may proceed to other chapters after a quick look through this chapter (unfamiliar terminology and notation can be clariﬁed later by consulting the indexes supplied at the end of this book).
In Section 1.1 we provide basic terminology and notation on sets and matrices. Digraphs, directed pseudographs, subdigraphs, weighted directed pseudographs, neighbourhoods, semi-degrees and other basic concepts of directed graph theory are introduced in Section 1.2. Isomorphism and basic operations on digraphs are considered in Section 1.3. In Section 1.4, we introduce walks, trails, paths and cycles, and study some properties of tournaments and acyclic digraphs. Basic notions and results on strong and unilateral connectivity are considered in Section 1.5. Undirected graphs are formally introduced in Section 1.6; in this section we also characterize eulerian directed multigraphs, digraphs with out-branchings (in-branchings) and graphs having strong orientations. Hypergraphs and mixed graphs are deﬁned in Section 1.7. Several important classes of directed and undirected graphs are introduced in Section 1.8. Some basic notions on algorithms are given in Section 1.9. The last section is devoted to a solution of the 2-satisﬁability problem using some properties of digraphs.
1.1 Sets, Subsets, Matrices and Vectors
For the sets of real numbers, rational numbers and integers we will use R, Q and Z, respectively. Also, let Z+ = {z ∈ Z : z > 0} and Z0 = {z ∈ Z : z ≥ 0}. The sets R+, R0, Q+ and Q0 are deﬁned similarly.
The main aim of this section is to establish some notation and terminology on ﬁnite sets used in this book. We assume that the reader is familiar with the following basic operations for a pair A, B of sets: the intersection A∩B, the union A ∪ B (if A ∩ B = ∅, then we will sometimes use A + B instead of A ∪ B), and the diﬀerence A\B (often denoted by A − B). Sets A and

2 1. Basic Terminology, Notation and Results
B are disjoint if A ∩ B = ∅. We will often not distinguish between a single element set (singleton) {x} and the element x itself. For example, we may write A∪b instead of A∪{b}. The Cartesian product of sets X1, X2, . . . , Xp is X1 × X2 × . . . × Xp = {(x1, x2, . . . , xp) : xi ∈ Xi, 1 ≤ i ≤ p}.
For sets A, B, A ⊆ B means that A is a subset of B; A ⊂ B stands for A ⊆ B and A = B. A set B is a proper subset of a set A if B ⊂ A and B = ∅. A collection S1, S2, . . . , St of (not necessarily non-empty) subsets of a set S is a subpartition of S if Si ∩ Sj = ∅ for all 1 ≤ i = j ≤ t. A subpartition S1, S2, . . . , St is a partition of S if ∪ti=1Si = S. We will often use the name family for a collection of sets. A family F = {X1, X2, . . . , Xn} of sets is covered by a set S if S ∩ Xi = ∅ for every i = 1, 2, . . . , n. We say that S is a cover of F. For a ﬁnite set X, the number of elements in X (i.e. its cardinality) is denoted by |X|. We also say that X is an |X|element set (or just an |X|-set). A set S satisfying a property P is a maximum (maximal) set with property P if there is no set S satisfying P and |S | > |S| (S ⊂ S ). Similarly, one can deﬁne minimum (minimal) sets satisfying a property P.
In this book, we will also use multisets which, unlike sets, are allowed to have repeated (multiple) elements. The cardinality |S| of a multiset M is the total number of elements in S (including repetitions). Often, we will use the words ‘family’ and ‘collection’ instead of ‘multiset’.
For an m × n matrix S = [sij] the transposed matrix (of S) is the n × m matrix ST = [tkl] such that tji = sij for every i = 1, 2, . . . , m and j = 1, 2, . . . , n. Unless otherwise speciﬁed, the vectors that we use are columnvectors. The operation of transposition is used to obtain row-vectors.
1.2 Digraphs, Subdigraphs, Neighbours, Degrees
A directed graph (or just digraph) D consists of a non-empty ﬁnite set V (D) of elements called vertices and a ﬁnite set A(D) of ordered pairs of distinct vertices called arcs. We call V (D) the vertex set and A(D) the arc set of D. We will often write D = (V, A) which means that V and A are the vertex set and arc set of D, respectively. The order (size) of D is the number of vertices (arcs) in D; the order of D will be sometimes denoted by |D|. For example, the digraph D in Figure 1.1 is of order and size 6; V (D) = {u, v, w, x, y, z}, A(D) = {(u, v), (u, w), (w, u), (z, u), (x, z), (y, z)}. Often the order (size, respectively) of the digraph under consideration is denoted by n (m, respectively).
For an arc (u, v) the ﬁrst vertex u is its tail and the second vertex v is its head. We also say that the arc (u, v) leaves u and enters v. The head and tail of an arc are its end-vertices; we say that the end-vertices are adjacent,

1.2 Digraphs, Subdigraphs, Neighbours, Degrees xv
zu

3

yw Figure 1.1 A digraph D

i.e. u is adjacent to1 v and v is adjacent to u. If (u, v) is an arc, we also say that u dominates v (or v is dominated by u) and denote it by u→v. We say that a vertex u is incident to an arc a if u is the head or tail of a. We will often denote an arc (x, y) by xy.
For a pair X, Y of vertex sets of a digraph D, we deﬁne
(X, Y )D = {xy ∈ A(D) : x ∈ X, y ∈ Y },
i.e. (X, Y )D is the set of arcs with tail in X and head in Y . For example, for the digraph H in Figure 1.2, ({u, v}, {w, z})H = {uw}, ({w, z}, {u, v})H = {wv}, and ({u, v}, {u, v})H = {uv, vu}.

vz

v z

uw

w u

HH Figure 1.2 A digraph H and a directed pseudograph H .

For disjoint subsets X and Y of V (D), X→Y means that every vertex of X dominates every vertex of Y , X⇒Y stands for (Y, X)D = ∅, and X→Y means that both X→Y and X⇒Y hold. For example, in the digraph D of Figure 1.1, u→{v, w}, {x, y, z}⇒{u, v, w} and {x, y}→z.
The above deﬁnition of a digraph implies that we allow a digraph to have arcs with the same end-vertices (for example, uv and vu in the digraph H in Figure 1.2), but we do not allow it to contain parallel (also called multiple) arcs, that is, pairs of arcs with the same tail and the same head, or
1 Some authors use the convention that x is adjacent to y to mean that there is an arc from x to y, rather than just that there is an arc xy or yx in D, as we will do in this book.

4 1. Basic Terminology, Notation and Results

loops (i.e. arcs whose head and tail coincide). When parallel arcs and loops are admissible we speak of directed pseudographs; directed pseudographs without loops are directed multigraphs. In Figure 1.2 the directed pseudograph H is obtained from H by appending a loop zz and two parallel arcs from u to w. Clearly, for a directed pseudograph D, A(D) and (X, Y )D (for every pair X, Y of vertex sets of D) are multisets (parallel arcs provide repeated elements). We use the symbol µD(x, y) to denote the number of arcs from a vertex x to a vertex y in a directed pseudograph D. In particular, µD(x, y) = 0 means that there is no arc from x to y.
We will sometimes give terminology and notation for digraphs only, but we will provide necessary remarks on their extension to directed pseudographs, unless this is trivial.
Below, unless otherwise speciﬁed, D = (V, A) is a directed pseudograph. For a vertex v in D, we use the following notation:

ND+(v) = {u ∈ V − v : vu ∈ A}, ND−(v) = {w ∈ V − v : wv ∈ A)}. The sets ND+(v), ND−(v) and ND(v) = ND+(v) ∪ ND−(v) are called the out-neighbourhood, in-neighbourhood and neighbourhood of v. We cn{avel}ilg, thNhbHeo(uvuer)rs=tiacn{edvs ,niwne}i,NgNhD+bH+(ov(u)w,r)sN=oD−f{(vvv.),Izna}n,FdNigH−uNr(Dew(1v).2)=, tN{huHe+,(zou}u),t=N-nH+{evi(,gzwh)}b=,oN{uwH−rs}(,.uF)ino=ra set W ⊆ V , we let

ND+(W ) =

ND+(w) − W, ND−(W ) =

ND−(w) − W.

w∈W

w∈W

naTb|(neeWhirdgaF,ohtNVofbriHa−o−sar,u(cW{rssNswe)tiDo+,nDWfz(|D}W.a)tT⊆w)=hlehVeca{oosi,usnntte}s-ho.idtesnateeiosglsuvroetaefr-retdeteoehxifngoWfrsWreeo,emvdaoe−DnfrWd(tWWic.heIe)(snad=dfeFrsno|i(ogamVtureer−deVinWb1y−.V,2Wd,−W+DN)(WDH+Ww|(,.{h)iI)w.ineci,.hspzdat}a+Dhr)rte(ei=Wcnuou{l)uamv=tr}--, for a vertex v, the out-degree is the number of arcs, except for loops, with tail

v. If D is a digraph (that is, it has no loops or multiple arcs), then the out-

degree of a vertex equals the number of out-neighbours of this vertex . We call

out-degree and in-degree of a set its semi-degrees. The degree of W is the

sum of its semi-degrees, i.e. the number

ample, in 4, d+H (z)

=Figdu−Hre(z1).2=, d+H1,(du+H)

= 2, d−H (u) ({u, v, w})

= =

dd1D−H, d((WH{u()u, v=),=wd+D}3),(Wd=+H)1(+.wSd)o−D=m(We2t,id)m.−HeFs(o,wri)tex=is-

useful to count loops in the semi-degrees: the out-pseudodegree of a vertex

v of a directed pseudograph D is the number of all arcs with tail v. Simi-

larly, one can deﬁne the in-pseudodegree of a vertex. In Figure 1.2, both

in-pseudodegree and out-pseudodegree of z in H are equal to 2.

The minimum out-degree (minimum in-degree) of D is

δ+(D) = min{d+D(x) : x ∈ V (D)} (δ−(D) = min{d−D(x) : x ∈ V (D)}).

1.2 Digraphs, Subdigraphs, Neighbours, Degrees

5

The minimum semi-degree of D is

δ0(D) = min{δ+(D), δ−(D)}.

Similarly, one can deﬁne the maximum out-degree of D, ∆+(D), and the maximum in-degree, ∆−(D). The maximum semi-degree of D is

∆0(D) = max{∆+(D), ∆−(D)}.

We say that D is regular if δ0(D) = ∆0(D). In this case, D is also called δ0(D)-regular.
For degrees, semi-degrees as well as for other parameters and sets of digraphs, we will usually omit the subscript for the digraph when it is clear which digraph is meant.
Since the number of arcs in a directed multigraph equals the number of their tails (or their heads) we obtain the following very basic result.

Proposition 1.2.1 For every directed multigraph D,

d−(x) =

d+(x) = |A(D)|.

x∈V (D)

x∈V (D)

Clearly, this proposition is valid for directed pseudographs if in-degrees and out-degrees are replaced by in-pseudodegrees and out-pseudodegrees.
A digraph H is a subdigraph of a digraph D if V (H) ⊆ V (D), A(H) ⊆ A(D) and every arc in A(H) has both end-vertices in V (H). If V (H) = V (D), we say that H is a spanning subdigraph (or a factor) of D . The digraph L with vertex set {u, v, w, z} and arc set {uv, uw, wz} is a spanning subdigraph of H in Figure 1.2. If every arc of A(D) with both end-vertices in V (H) is in A(H), we say that H is induced by X = V (H) (we write H = D X ) and call H an induced subdigraph of D. If L is a non-induced subdigraph of D, then there is an arc xy such that x, y ∈ V (L) and xy ∈ A(D)−A(L). Such an arc xy is called a chord of L (in D). The digraph G with vertex set {u, v, w} and arc set {uw, wv, vu} is a subdigraph of the digraph H in Figure 1.2; G is neither a spanning subdigraph nor an induced subdigraph of H. The digraph G along with the arc uv (which is a chord of G) is an induced subdigraph of H. For a subset A ⊆ A(D) the subdigraph arc-induced by A is the digraph D A = (V , A ), where V is the set of vertices in V which are incident with at least one arc from A . For example, in Figure 1.2, H {zw, uw} has vertex set {u, w, z} and arc set {zw, uw}. If H is a subdigraph of D, then we say that D is a superdigraph of H.
It is trivial to extend the above deﬁnitions of subdigraphs to directed pseudographs. To avoid lengthy terminology, we call the ‘parts’ of directed pseudographs just subdigraphs (instead of, say, directed subpseudographs).

6 1. Basic Terminology, Notation and Results

For vertex-disjoint subdigraphs H, L of a digraph D, we will often use the shorthand notation (H, L)D, H→L, H⇒L and H→L instead of (V (H), V (L))D, V (H)→V (L), V (H)⇒V (L) and V (H)→V (L).
A weighted directed pseudograph is a directed pseudograph D along with a mapping c : A(D)→R. Thus, a weighted directed pseudograph is a triple D = (V (D), A(D), c). We will also consider vertex-weighted directed pseudographs, i.e. directed pseudographs D along with a mapping c : V (D)→R. (See Figure 1.3.) If a is an element (i.e. a vertex or an arc) of a weighted directed pseudograph D = (V (D), A(D), c), then c(a) is called the weight or the cost of a . An (unweighted) directed pseudograph can be viewed as a (vertex-)weighted directed pseudograph whose elements are all of weight one. For a set B of arcs of a weighted directed pseudograph D = (V, A, c), we deﬁne the weight of B as follows: c(B) = a∈B c(a). Similarly, one can deﬁne the weight of a set of vertices in a vertex-weighted directed pseudograph. The weight of a subdigraph H of a weighted (vertexweighted) directed pseudograph D is the sum of the weights of the arcs in H (vertices in H). For example, in the weighted directed pseudograph D in Figure 1.3 the set of arcs {xy, yz, zx} has weight 9.5 (here we have assumed that we used the arc zx of weight 1). In the directed pseudograph H in Figure 1.3 the subdigraph U = ({u, x, z}, {xz, zu}) has weight 5.

2 y
5 3.5 1
xz 0.3

y(2.5) x(2) z(0) u(3)

DH
Figure 1.3 Weighted and vertex-weighted directed pseudographs (the vertex weights are given in brackets).

1.3 Isomorphism and Basic Operations on Digraphs
Suppose D = (V, A) is a directed multigraph. A directed multigraph obtained from D by deleting multiple arcs is a digraph H = (V, A ) where xy ∈ A if and only if µD(x, y) ≥ 1. Let xy be an arc of D. By reversing the arc xy, we mean that we replace the arc xy by the arc yx. That is, in

1.3 Isomorphism and Basic Operations on Digraphs

7

the resulting directed multigraph D we have µD (x, y) = µD(x, y) − 1 and µD (y, x) = µD(y, x) + 1.
A pair of (unweighted) directed pseudographs D and H are isomorphic (denoted by D ∼= H) if there exists a bijection φ : V (D)→V (H) such that µD(x, y) = µH (φ(x), φ(y)) for every ordered pair x, y of vertices in D. The mapping φ is an isomorphism. Quite often, we will not distinguish between isomorphic digraphs or directed pseudographs. For example, we may say that there is only one digraph on a single vertex and there are exactly three digraphs with two vertices. Also, there is only one digraph of order 2 and size 2, but there are two directed multigraphs and six directed pseudographs of order and size 2 (Exercise 1.4). For a set of directed pseudographs Ψ , we say that a directed pseudograph D belongs to Ψ or is a member of Ψ (denoted D ∈ Ψ ) if D is isomorphic to a directed pseudograph in Ψ . Since we usually do not distinguish between isomorphic directed pseudographs, we will often write D = H instead of D ∼= H for isomorphic D and H.
In case we do want to distinguish between isomorphic digraphs, we speak of labeled digraphs. In this case, a pair of digraphs D and H is indistinguishable if and only if they completely coincide (i.e. V (D) = V (H) and A(D) = A(H)). In particular, there are four labeled digraphs with vertex set {1, 2}. Indeed, the labeled digraphs ({1, 2}, {(1, 2)}) and ({1, 2}, {(2, 1)}) are distinct, even though they are isomorphic.
The converse of a directed multigraph D is the directed multigraph H which one obtains from D by reversing all arcs. It is easy to verify, using only the deﬁnitions of isomorphism and converse, that a pair of directed multigraphs are isomorphic if and only if their converses are isomorphic (Exercise 1.9). To obtain subdigraphs, we use the following operations of deletion. For a directed multigraph D and a set B ⊆ A(D), the directed multigraph D − B is the spanning subdigraph of D with arc set A(D) − B. If X ⊆ V (D), the directed multigraph D − X is the subdigraph induced by V (D) − X, i.e. D − X = D V (D) − X .For a subdigraph H of D, we deﬁne D − H = D − V (H). Since we do not distinguish between a single element set {x} and the element x itself, we will often write D − x rather than D − {x}. If H is a non-induced subdigraph of D, we can construct another subdigraph H of D by adding a chord a of H; H = H + a.
Let G be a subdigraph of a directed multigraph D. The contraction of G in D is a directed multigraph D/G with V (D/G) = {g} ∪ (V (D) − V (G)), where g is a ‘new’ vertex not in D, and µD/G(x, y) = µD(x, y),

µD/G(x, g) =

µD(x, v), µD/G(g, y) =

µD(v, y)

v∈V (G)

v∈V (G)

for all distinct vertices x, y ∈ V (D) − V (G). (Note that there is no loop in D/G.) Let G1, G2, . . . , Gt be vertex-disjoint subdigraphs of D. Then

D/{G1, G2, . . . , Gt} = (. . . ((D/G1)/G2) . . .)/Gt.

8 1. Basic Terminology, Notation and Results
Clearly, the resulting directed multigraph D/{G1, G2, . . . , Gt} does not depend on the order of G1, G2, . . . , Gt. Contraction can be deﬁned for sets of vertices, rather than subdigraphs. It suﬃces to view a set of vertices X as a subdigraph with vertex set X and no arcs. Figure 1.4 depicts a digraph H and the contraction H/L, where L is the subdigraph of H induced by the vertices y and z.
To construct ‘bigger’ digraphs from ‘smaller’ ones, we will often use the following operation called composition. Let D be a digraph with vertex set {v1, v2, . . . , vn}, and let G1, G2, . . . , Gn be digraphs which are pairwise vertex-disjoint. The composition D[G1, G2, . . . , Gn] is the digraph L with vertex set V (G1) ∪ V (G2) ∪ . . . ∪ V (Gn) and arc set (∪ni=1A(Gi)) ∪ {gigj : gi ∈ V (Gi), gj ∈ V (Gj), vivj ∈ A(D)}. Figure 1.5 shows the composition T [Gx, Gl, Gv], where Gx consists of a pair of vertices and an arc between them, Gl has a single vertex, Gv consists of a pair of vertices and the pair of mutually opposite arcs between them, and the digraph T is from Figure 1.4.
y
x zx
vv
H T = H/L, L = H {y, z} Figure 1.4 Contraction.
G
Gx
Gv Figure 1.5 T [Gx, G , Gv]
Let Φ be a set of digraphs. A digraph D is Φ-decomposable if D is a member of Φ or D = H[S1, . . . , Sh] for some H ∈ Φ with h = |V (H)| ≥ 2

1.3 Isomorphism and Basic Operations on Digraphs

9

and some choice of digraphs S1, S2, . . . , Sh (we call this decomposition a Φdecomposition). A digraph D is called totally Φ-decomposable if either

D ∈ Φ or there is a Φ-decomposition D = H[S1, . . . , Sh] such that h ≥ 2, and each Si is totally Φ-decomposable. In this case, if D ∈/ Φ, a Φ-decomposition of D, Φ-decompositions Si = Hi[Si1, . . . , Sihi ] of all Si which are not in Φ, Φdecompositions of those of Sij which are not in Φ, and so on, form a sequence of decompositions which will be called a total Φ-decomposition of D. If

D ∈ Φ, we assume that the (unique) total Φ-decomposition of D consists of

itself.

↔↔

To illustrate the last paragraph of deﬁnitions, consider Ψ = {K1, K2, D2},

↔↔

where K1 is the digraph with a single vertex, K2 is the (complete) digraph

with two vertices and two arcs, and D2 has two vertices {1, 2} and the arc

(1, 2). Construct the digraph D by deleting from the digraph in Figure 1.5 the

pair of arcs going from G to Gx. The digraph D is totally Ψ -decomposable. Indeed, D = D2[D2, Q] is a Ψ -decomposition of D, where Q is the subdigraph of D induced by V (G ) ∪ V (Gv). Moreover, Q = D2[K↔1, K↔2] is a Ψ -decomposition of Q. The above two decompositions form a total Φ-

decomposition of D.

If D = H[S1, . . . , Sh] and none of the digraphs S1, . . . , Sh has an arc, then D is an extension of H. Distinct vertices x, y are similar if x, y have

the same in- and out-neighbours in D − {x, y}. For every i = 1, 2, . . . , h, the

vertices of Si are similar in D. For any set Φ of digraphs, Φext denotes the (inﬁnite) set of all extensions of digraphs in Φ, which are called extended

Φ-digraphs. We say that Φ is extension-closed if Φ = Φext.

The Cartesian product of a family of digraphs D1, D2, . . . , Dn, denoted

by D1 × D2 × . . . × Dn or

n i=1

Di,

where

n

≥

2,

is

the

digraph

D

having

V (D) = V (D1) × V (D2) × . . . × V (Dn)

= {(w1, w2, . . . , wn) : wi ∈ V (Di), i = 1, 2, . . . , n}

and a vertex (u1, u2, . . . , un) dominates a vertex (v1, v2, . . . , vn) of D if and only if there exists an r ∈ {1, 2, . . . , n} such that urvr ∈ A(Dr) and ui = vi for all i ∈ {1, 2, . . . , n} − {r}. (See Figure 1.6.)
The operation of splitting a vertex v of a directed multigraph D con-
sists of replacing v by two (new) vertices u, w so that uw is an arc, all arcs
of the form xv by arcs xu and all arcs of the form vy by wy. The sub-
division of an arc uv of D consists of replacing uv by two arcs uw, wv,
where w is a new vertex. If H can be obtained from D by subdividing
one or more arcs (here we allow subdividing arcs that are already subdi-
vided), then H is a subdivision of D. For a positive integer p and a digraph D, the pth power Dp of D is deﬁned as follows: V (Dp) = V (D), x→y in Dp if x = y and there are k ≤ p − 1 vertices z1, z2 . . . , zk such that x→z1→z2→ . . . →zk→y in D. According to this deﬁnition D1 = D. For example, for the digraph Hn = ({1, 2, . . . , n}, {(i, i + 1) : i = 1, 2, . . . , n − 1}),

10 1. Basic Terminology, Notation and Results

(2, b)

2 13

(1, b) b
a (1, a)

(3, b) (2, a)
(3, a)

D H D×H Figure 1.6 The Cartesian product of two digraphs.

we have Hn2 = ({1, 2, . . . , n}, {(i, j) : 1 ≤ i < j ≤ i + 2 ≤ n} ∪ {(n − 1, n)}). See Figure 1.7 for the second power of a digraph.

D D2
Figure 1.7 A digraph D and its second power D2.
Let H and L be a pair of directed pseudographs. The union H ∪ L of H and L is the directed pseudograph D such that V (D) = V (H) ∪ V (L) and µD(x, y) = µH (x, y) + µL(x, y) for every pair x, y of vertices in V (D). Here we assume that the function µH is naturally extended, i.e. µH (x, y) = 0 if at least one of x, y is not in V (H) (and similarly for µL). Figure 1.8 illustrates this deﬁnition.
1.4 Walks, Trails, Paths, Cycles and Path-Cycle Subdigraphs
In the following, D is always a directed pseudograph, unless otherwise speciﬁed. A walk in D is an alternating sequence W = x1a1x2a2x3 . . . xk−1ak−1xk of vertices xi and arcs aj from D such that the tail of ai is xi and the head of ai is xi+1 for every i = 1, 2, . . . , k − 1. A walk W is closed if x1 = xk,

1.4 Walks, Trails, Paths, Cycles and Path-Cycle Subdigraphs

11

bb e

b e

a cc

f ac

f

d H

dg L

dg H ∪L

Figure 1.8 The union D = H ∪ L of the directed pseudographs H and L.

and open otherwise. The set of vertices {x1, x2, . . . , xk} is denoted by V (W ); the set of arcs {a1, a2, . . . , ak−1} is denoted by A(W ). We say that W is a walk from x1 to xk or an (x1, xk)-walk. If W is open, then we say that the vertex x1 is the initial vertex of W , the vertex xk is the terminal vertex of W , and x1 and xk are end-vertices of W . The length of a walk is the number of its arcs. Hence the walk W above has length k − 1. A walk is even (odd) if its length is even (odd). When the arcs of W are deﬁned from the context or simply unimportant, we will denote W by x1x2 . . . xk.
A trail is a walk in which all arcs are distinct. Sometimes, we identify a trail W with the directed pseudograph (V (W ), A(W )), which is a subdigraph of D. If the vertices of W are distinct, W is a path. If the vertices x1, x2, . . . , xk−1 are distinct, k ≥ 3 and x1 = xk, W is a cycle. Since paths and cycles are special cases of walks, the length of a path and a cycle is already deﬁned. The same remark is valid for other parameters and notions, e.g. an (x, y)-path. A path P is an [x, y]-path if P is a path between x and y, e.g. P is either an (x, y)-path or a (y, x)-path. A longest path (cycle) in D is a path (cycle) of maximal length in D.
When W is a cycle and x is a vertex of W , we say that W is a cycle through x. In a directed pseudograph D, a loop is also considered a cycle (of length one). A k-cycle is a cycle of length k. The minimum integer k for which D has a k-cycle is the girth of D; denoted by g(D). If D does not have a cycle, we deﬁne g(D) = ∞. If g(D) is ﬁnite then we call a cycle of length g(D) a shortest cycle in D.
For subsets X, Y of V (D), an (x, y)-path P is an (X, Y )-path if x ∈ X, y ∈ Y and V (P ) ∩ (X ∪ Y ) = {x, y}. Note that, if X ∩ Y = ∅ then a vertex x ∈ X ∩ Y forms an (X, Y )-path by itself. Sometimes we will talk about an (H, H )-path when H and H are subdigraphs of D. By this we mean a (V (H), V (H ))-path in D.
An (x1, xn)-path P = x1x2 . . . xn is minimal if, for every (x1, xn)-path Q, either V (P ) = V (Q) or Q has a vertex not in V (P ). For a cycle C = x1x2 . . . xpx1, the subscripts are considered modulo p, i.e. xs = xi for every s

12 1. Basic Terminology, Notation and Results
and i such that i ≡ s mod p. As pointed out above (for trails), we will often view paths and cycles as subdigraphs. We can also consider paths and cycles as digraphs themselves. Let Pn (Cn) denote a path (a cycle) with n vertices, i.e. Pn = ({1, 2, . . . , n}, {(1, 2), (2, 3), . . . , (n − 1, n)}) and Cn = Pn + (n, 1).
A walk (path, cycle) W is a Hamilton (or hamiltonian) walk (path, cycle) if V (W ) = V (D). A digraph D is hamiltonian if D contains a Hamilton cycle; D is traceable if D possesses a Hamilton path. A trail W = x1x2 . . . xk is an Euler (or eulerian) trail if A(W ) = A(D), V (W ) = V (D) and x1 = xk; a directed multigraph D is eulerian if it has an Euler trail.
To illustrate these deﬁnitions, consider Figure 1.9.
x2 x6
x1 x3

x5 x4 x7 Figure 1.9 A directed graph H.

The walk x1x2x6x3x4x6x7x4x5x1 is a hamiltonian walk in D. The path x5x1x2x3x4x6x7 is hamiltonian path in D. The path x1x2x3x4x6 is an (x1, x6)-path and x2x3x4x6x3 is an (x2, x3)-trail. The cycle x1x2x3x4x5x1 is a 5-cycle in D. The girth of D is 3 and the longest cycle in D has length 6.
Let W = x1x2 . . . xk, Q = y1y2 . . . yt be a pair of walks in a digraph D. The walks W and Q are disjoint if V (W ) ∩ V (Q) = ∅ and arc-disjoint if
A(W ) ∩ A(Q) = ∅. If W and Q are open walks, they are called internally
disjoint if {x2, x3, . . . , xk−1} ∩ V (Q) = ∅ and V (W ) ∩ {y2, y3, . . . , yt−1} = ∅. We will use the following notation for a path or a cycle W = x1x2 . . . xk
(recall that x1 = xk if W is a cycle):

W [xi, xj ] = xixi+1 . . . xj.

It is easy to see that W [xi, xj] is a path for xi = xj; we call it the subpath

of W from xi to xj. If 1 < i ≤ k then the predecessor of xi on W is the

voxen+ir+tWex=ixs(ixt−h+i1e)a+vnedarntiedsxaxxls−iio+−1d=eann(odxte−iids)−abl,ysowxh−idee.nnIoftt1heed≤sebiye<xxisk+i t,.

then the successor of xi Similarly, one can deﬁne
(which they always do if

W is a cycle).

1.4 Walks, Trails, Paths, Cycles and Path-Cycle Subdigraphs

13

Also, for a set X ⊆ V (W ), we set X+ = {x+ : x ∈ X}, X− = {x− : x ∈ X}, X++ = (X+)+, etc. We will normally use such notation when a vertex x under consideration belongs to a unique walk W , otherwise W is given as a subscript, for example, x+W .
Proposition 1.4.1 Let D be a digraph and let x, y be a pair of distinct vertices in D. If D has an (x, y)-walk W , then D contains an (x, y)-path P such that A(P ) ⊆ A(W ). If D has a closed (x, x)-walk W , then D contains a cycle C through x such that A(C) ⊆ A(W ).
Proof: Consider a walk P from x to y of minimum length among all (x, y)walks whose arcs belong to A(W ). We show that P is a path. Let P = x1x2 . . . xk, where x = x1 and y = xk. If xi = xj for some 1 ≤ i < j ≤ k, then the walk P [x1, xi]P [xj+1, xk] is shorter than P ; a contradiction. Thus, all vertices of P are distinct, so P is a path with A(P ) ⊆ A(W ).
Let W = z1z2 . . . zk be a walk from x = z1 to itself (x = zk). Since D has no loop, zk−1 = zk. Let y1y2 . . . yt be a shortest walk from y1 = z1 to yt = zk−1. We have proved above that y1y2 . . . yt is a path. Thus, y1y2 . . . yty1 is a cycle through y1 = x.
A digraph D is acyclic if it has no cycle. Acyclic digraphs form a wellstudied family of digraphs, in particular, due to the following important properties.
Proposition 1.4.2 Every acyclic digraph has a vertex of in-degree zero as well as a vertex of out-degree zero.
Proof: Let D be a digraph in which all vertices have positive out-degrees. We show that D has a cycle. Choose a vertex v1 in D. Since d+(v1) > 0, there is a vertex v2 such that v1→v2. As d+(v2) > 0, v2 dominates some vertex v3. Proceeding in this manner, we obtain walks of the form v1v2 . . . vk. As V (D) is ﬁnite, there exists the least k > 2 such that vk = vi for some 1 ≤ i < k. Clearly, vivi+1 . . . vk is a cycle.
Thus an acyclic digraph D has a vertex of out-degree zero. Since the converse H of D is also acyclic, H has a vertex v of out-degree zero. Clearly, the vertex v has in-degree zero in D.
Proposition 1.4.2 allows one to check whether a digraph D is acyclic: if D has a vertex of out-degree zero, then delete this vertex from D and consider the resulting digraph; otherwise, D contains a cycle.
Let D be a digraph and let x1, x2, . . . , xn be an ordering of its vertices. We call this ordering an acyclic ordering if, for every arc xixj in D, we have i < j. Clearly, an acyclic ordering of D induces an acyclic ordering of every subdigraph H of D. Since no cycle has an acyclic ordering, no digraph with a cycle has an acyclic ordering. On the other hand, the following holds:
Proposition 1.4.3 Every acyclic digraph has an acyclic ordering of its vertices.

14 1. Basic Terminology, Notation and Results
Proof: We give a constructive proof by describing a procedure that generates an acyclic ordering of the vertices in an acyclic digraph D. At the ﬁrst step, we choose a vertex v with in-degree zero. (Such a vertex exists by Proposition 1.4.2.) Set x1 = v and delete x1 from D. At the ith step, we ﬁnd a vertex u of in-degree zero in the remaining acyclic digraph, set xi = u and delete xi from the remaining acyclic digraph. The procedure has |V (D)| steps.
Suppose that xi→xj in D, but i > j. As xj was chosen before xi, it means that xj was not of in-degree zero at the jth step of the procedure; a contradiction.
The notion of complexity of algorithms is discussed in Section 1.9. In Exercise 1.69, the reader is asked to show that the algorithm above can be performed in time O(|V (D)| + |A(D)|).
Proposition 1.4.4 Let D be an acyclic digraph with precisely one vertex x (y) of in-degree (out-degree) zero in D. For every vertex v ∈ V (D) there is an (x, v)-path and a (v, y)-path in D.
Proof: A longest path starting at v (terminating at v) is certainly a (v, y)path (an (x, v)-path).
An oriented graph is a digraph with no cycle of length two. A tournament is an oriented graph where every pair of distinct vertices are adjacent. In other words, a digraph T with vertex set {v1, v2, . . . , vn} is a tournament if exactly one of the arcs vivj and vjvi is in T for every i = j ∈ {1, 2, . . . , n}. In Figure 1.10, one can see a pair of tournaments. It is an easy exercise to verify that each of them contains a Hamilton path. Actually, this is no coincidence by the following theorem of R´edei [625]. (In fact, R´edei proved a stronger result: every tournament contains an odd number of Hamilton paths.)
Figure 1.10 Tournaments.
Theorem 1.4.5 Every tournament is traceable.
Proof: Let T be a tournament with vertex set {v1, v2, . . . , vn}. Suppose that the vertices of T are labeled in such a way that the number of backward arcs, i.e. arcs of the form vjvi, j > i, is minimum. Then, v1v2 . . . vn is a Hamilton path in T . Indeed, if this is not the case, there exists a subscript i < n such

1.4 Walks, Trails, Paths, Cycles and Path-Cycle Subdigraphs

15

that vivi+1 ∈/ A(T ). Thus, vi+1vi ∈ A(T ). However, in this case we can switch the vertices vi and vi+1 in the labelling and decrease the number of backward arcs; a contradiction.
A q-path-cycle subdigraph F of a digraph D is a collection of q paths P1,. . . , Pq and t cycles C1,. . . ,Ct such that all of P1, . . . , Pq, C1, . . . , Ct are pairwise disjoint (possibly, q = 0 or t = 0). We will denote F by F = P1 ∪. . .∪ Pq ∪ C1 ∪ . . . ∪ Ct (the paths always being listed ﬁrst). Quite often, we will consider q-path-cycle factors, i.e. spanning q-path-cycle subdigraphs. If t = 0, F is a q-path subdigraph and it is a q-path factor (or just a pathfactor) if it is spanning. If q = 0 we say that F is a t-cycle subdigraph (or just a cycle subdigraph) and it is a t-cycle factor (or just a cycle factor) if it is spanning. In Figure 1.11, abc ∪ def d is a 1-path-cycle factor, and abcea ∪ df d is a cycle factor (or, more precisely, a 2-cycle factor).
ad

e b

cf
H
Figure 1.11 A digraph H.
The path covering number pc(D) of D is the minimum positive integer k such that D contains a k-path factor. In particular, pc(D) = 1 if and only if D is traceable. The path-cycle covering number pcc(D) of D is the minimum positive integer k such that D contains a k-path-cycle factor. Clearly, pcc(D) ≤ pc(D). The proof of the following simple yet helpful assertion on the path covering number is left as an easy exercise to the reader (Exercise 1.34).
Proposition 1.4.6 Let D be a digraph, and let k be a positive integer. Then the following statements are equivalent:
(i) pc(D) = k. (ii) There are k − 1 (new) arcs e1, . . . , ek−1 such that D + {e1, . . . , ek−1} is
traceable, but there is no set of k − 2 arcs with this property. (iii) k − 1 is the minimum integer s such that addition of s new vertices to
D together with all possible arcs between V (D) and these new vertices results in a traceable digraph.

16 1. Basic Terminology, Notation and Results
1.5 Strong and Unilateral Connectivity
In a digraph D a vertex y is reachable from a vertex x if D has an (x, y)walk. In particular, a vertex is reachable from itself. By Proposition 1.4.1, y is reachable from x if and only if D contains an (x, y)-path. A digraph D is strongly connected (or, just, strong) if, for every pair x, y of distinct vertices in D, there exists an (x, y)-walk and a (y, x)-walk. In other words, D is strong if every vertex of D is reachable from every other vertex of D. We deﬁne a digraph with one vertex to be strongly connected. It is easy to see that D is strong if and only if it has a closed Hamilton walk (Exercise 1.47). As Cn is strong, every hamiltonian digraph is strong. The following basic result on tournaments is due to Moon [570].
Theorem 1.5.1 (Moon’s theorem) [570] Let T be a strong tournament on n ≥ 3 vertices. For every x ∈ V (T ) and every integer k ∈ {3, 4, . . . , n}, there exists a k-cycle through x in T . In particular, a tournament is hamiltonian if and only if it is strong.
Proof: Let x be a vertex in a strong tournament T on n ≥ 3 vertices. The theorem is shown by induction on k. We ﬁrst prove that T has a 3cycle through x. Since T is strong, both O = N +(x) and I = N −(x) are non-empty. Moreover, (O, I) is non-empty; let yz ∈ (O, I). Then, xyzx is a 3-cycle through x. Let C = x0x1 . . . xt be a cycle in T with x = x0 = xt and t ∈ {3, 4, . . . , n − 1}. We prove that T has a (t + 1)-cycle through x.
If there is a vertex y ∈ V (T ) − V (C) which dominates a vertex in C and is dominated by a vertex in C, then it is easy to see that there exists an index i such that xi→y and y→xi+1. Therefore, C[x0, xi]yC[xi+1, xt] is a (t + 1)-cycle through x. Thus, we may assume that every vertex outside of C either dominates every vertex in C or is dominated by every vertex in C. The vertices from V (T ) − V (C) that dominate all vertices from V (C) form a set R; the rest of the vertices in V (T ) − V (C) form a set S. Since T is strong, both S and R are non-empty and the set (S, R) is non-empty. Hence taking sr ∈ (S, R) we see that x0srC[x2, x0] is a (t + 1)-cycle through x = x0.
Corollary 1.5.2 (Camion’s theorem) [140] Every strong tournament is hamiltonian.
A digraph D is complete if, for every pair x, y of distinct vertices of D, both xy and yx are in D. For a strong digraph D = (V, A), a set S ⊂ V is a separator (or a separating set) if D − S is not strong. A digraph D is k-strongly connected (or k-strong) if |V | ≥ k + 1 and D has no separator with less than k vertices. It follows from the deﬁnition of strong connectivity that a complete digraph with n vertices is (n − 1)-strong, but is not n-strong. The largest integer k such that D is k-strongly connected is the vertex-strong connectivity of D (denoted by κ(D)). If a digraph D is not

1.5 Strong and Unilateral Connectivity

17

strong, we set κ(D) = 0. For a pair s, t of distinct vertices of a digraph D, a set S ⊆ V (D) − {s, t} is an (s, t)-separator if D − S has no (s, t)-paths. For a strong digraph D = (V, A), a set of arcs W ⊆ A is a cut (or a cut set) if D − A is not strong. A digraph D is k-arc-strong (or k-arc-strongly connected) if D has no cut with less than k arcs. The largest integer k such that D is k-arc-strongly connected is the arc-strong connectivity of D (denoted by λ(D)). If D is not strong, we set λ(D) = 0. Note that λ(D) ≥ k if and only if d+(X), d−(X) ≥ k for all proper subsets X of V.
A strong component of a digraph D is a maximal induced subdigraph of D which is strong. If D1,. . . ,Dt are the strong components of D, then clearly V (D1) ∪ . . . ∪ V (Dt) = V (D) (recall that a digraph with only one vertex is strong). Moreover, we must have V (Di) ∩ V (Dj) = ∅ for every i = j as otherwise all the vertices V (Di) ∪ V (Dj) are reachable from each other, implying that the vertices of V (Di) ∪ V (Dj) belong to the same strong component of D. We call V (D1) ∪ . . . ∪ V (Dt) the strong decomposition of D. The strong component digraph SC(D) of D is obtained by contracting strong components of D and deleting any parallel arcs obtained in this process. In other words, if D1,. . . ,Dt are the strong components of D, then V (SC(D)) = {v1, v2, . . . , vt} and A(SC(D)) = {vivj : (V (Di), V (Dj))D = ∅}. The subdigraph of D induced by the vertices of a cycle in D is strong, i.e. is contained in a strong component of D. Thus, SC(D) is acyclic. By Proposition 1.4.3, the vertices of SC(D) have an acyclic ordering. This implies that the strong components of D can be labeled D1,. . . ,Dt such that there is no arc from Dj to Di unless j < i. We call such an ordering an acyclic ordering of the strong components of D. The strong components of D corresponding to the vertices of SC(D) of in-degree (out-degree) zero are the initial (terminal) strong components of D. The remaining strong components of D are called intermediate strong components of D.Figure 1.12 shows a digraph D and its strong component digraph SC(D).
It is easy to see that the strong component digraph of a tournament T is an acyclic tournament. Thus, there is a unique acyclic ordering of the strong components of T , namely, T1,. . . ,Tt such that Ti→Tj for every i < j. Clearly, every tournament has only one initial (terminal) strong component.
A digraph D is unilateral if, for every pair x, y of vertices of D, either x is reachable from y or y is reachable from x (or both). Clearly, every strong
digraph is unilateral. A path Pn is unilateral; hence, being unilateral is a necessary condition for traceability of digraphs. The following is a characterization of unilateral digraphs.
Proposition 1.5.3 A digraph D is unilateral if and only if there is a unique acyclic ordering D1, D2, . . . , Dt of the strong components of D and (V (Di), V (Di+1)) = ∅ for every i = 1, 2, . . . , t − 1.
Proof: The suﬃciency is trivial. To see the necessity, observe that if (V (Di), V (Di+1)) = ∅, then no vertex of V (Di+1) is reachable from any vertex of V (Di) and vice versa. Finally, observe that, if (V (Di), V (Di+1)) = ∅

18 1. Basic Terminology, Notation and Results

f i ab

g

l m

hn c de

j k

s1 s3 s4
s2

s5

D SC(D)
Figure 1.12 A digraph D and its strong component digraph SC(D). The vertices s1, s2, s3, s4, s5 are obtained by contracting the sets {a, b}, {c, d, e}, {f, g, h, i}, {j, k} and {l, m, n} which correspond to the strong components of D. The digraph D has two initial components, D1, D2 with V (D1) = {a, b} and V (D2) = {c, d, e}. It has one terminal component D5 with vertices V (D5) = {l, m, n} and two intermediate components D3, D4 with vertices V (D3) = {f, g, h, i} and V (D4) = {j, k}.
for every i = 1, 2, . . . , t − 1, then D1, D2, . . . , Dt is the unique acyclic ordering of the strong components of D, because SC(D) has a hamiltonian path (see Exercise 1.18).
1.6 Undirected Graphs, Biorientations and Orientations
An undirected graph (or a graph) G = (V, E) consists of a non-empty ﬁnite set V = V (G) of elements called vertices and a ﬁnite set E = E(G) of unordered pairs of distinct vertices called edges. We call V (G) the vertex set and E(G) the edge set of G. In other words, an edge {x, y} is a 2element subset of V (G). We will often denote {x, y} just by xy. If xy ∈ E(G), we say that the vertices x and y are adjacent. Notice that, in the above deﬁnition of a graph, we do not allow loops (i.e. pairs consisting of the same vertex) or parallel edges (i.e. multiple pairs with the same end-vertices). The complement G of a graph G is the graph with vertex set V (G) in which two vertices are adjacent if and only if they are not adjacent in G.
When parallel edges and loops are admissible we speak of pseudographs; pseudographs with no loops are multigraphs. For a pair u, v of vertices in a pseudograph G, µG(u, v) denotes the number of edges between u and v. In particular, µG(u, u) is the number of loops at u. For a pseudograph G, a directed pseudograph D is called a biorientation of G if D is obtained from G by replacing each edge {x, y} of G by either xy or yx or the pair xy and yx (except for a loop xx which is replaced by a (directed) loop at x). Note that diﬀerent copies of the edge xy in G may be replaced by diﬀerent arcs in D. Thus if µG(x, y) = 3 then we may replace one edge {x, y} by the arc

1.6 Undirected Graphs, Biorientations and Orientations

19

xy, another by the arc yx and the third by the pair of arcs xy and yx. An

orientation of a graph G is a biorientation of G which is an oriented graph

(i.e. digraph having no 2-cycle and no loops). Clearly, every digraph is a bior-

ientation and every oriented graph an orientation of some undirected graph.

The underlying graph U G(D) of a digraph D is the unique graph G such

that D is a biorientation of G. For a graph G, the complete biorientation of G (denoted by ↔G) is a biorientation D of G such that xy ∈ A(D) implies

yx ∈ A(D). A digraph D = (V, A) is symmetric if xy ∈ A implies yx ∈ A.

Clearly, D is symmetric if and only if D is the complete biorientation of some

graph. An oriented path (cycle) is an orientation of a path (cycle).

A

pseudograph

G

is

connected

if

its

complete

biorientation

↔
G

is

strongly

↔
connected. Similarly, G is k-connected if G is k-strong. Strong components

↔
in G are connected components, or just components in G. A bridge

in a connected pseudograph G is an edge whose deletion from G makes G

disconnected. A pseudograph G is k-edge-connected if the graph obtained

from G after deletion of at most k − 1 edges is connected. Clearly, a con-

nected pseudograph is bridgeless if and only if it is 2-edge-connected. The

neighbourhood NG(x) of a vertex x in G is the set of vertices adjacent to x. The degree d(x) of a vertex x is the number of edges except loops having

x as an end-vertex. The minimum (maximum) degree of G is

δ(G) = min{d(x) : x ∈ V (G)} (∆(G) = max{d(x) : x ∈ V (G)}).

We say that G is regular (or δ(G)-regular) if δ(G) = ∆(G). A pair of
↔↔
graphs G and H is isomorphic if G and H are isomorphic. A digraph is connected if its underlying graph is connected. The notions
of walks, trails, paths and cycles in undirected pseudographs are analogous to those for directed pseudographs (we merely disregard orientations). An xy-path in an undirected pseudograph is a path whose end-vertices are x and y. When we consider a digraph and its underlying graph U G(D), we will often call walks of D directed (to distinguish between them and those in U G(D)). In particular, we will speak of directed paths, cycles and trails. An undirected graph is a forest if it has no cycle. A connected forest is a tree. It is easy to see (Exercise 1.41) that every connected undirected graph has a spanning tree, i.e. a spanning subgraph, which is a tree. A digraph D is an oriented forest (tree) if D is an orientation of a forest (tree). A subgraph T of a (connected) digraph D is a spanning oriented tree of D if U G(T ) is a spanning tree in U G(D). A subdigraph T of a digraph D is an in-branching (out-branching) if T is a spanning oriented tree of D and T has only one vertex s of out-degree (in-degree) zero. The vertex s is the root of T . (See Figure 1.13.) We will often use the notation Fs+ (Fs−) to denote an out-branching (in-branching) rooted at s in the digraph in question.
Since each spanning oriented tree R of a connected digraph is acyclic as an undirected graph, R has at least one vertex of out-degree zero and at

20 1. Basic Terminology, Notation and Results
s
r
D HL Figure 1.13 The digraph D has an out-branching with root r (shown in bold); H contains an in-branching with root s (shown in bold); L possesses neither an out-branching nor an in-branching.
least one vertex of in-degree zero (see Proposition 1.4.2). Hence, the outbranchings and in-branchings capture the important cases of uniqueness of the corresponding vertices. The following is a characterization of digraphs with in-branchings (out-branchings).
Proposition 1.6.1 A connected digraph D contains an out-branching (inbranching) if and only if D has only one initial (terminal) strong component.
Proof: We prove this characterization only for out-branchings since the second claim follows from the ﬁrst one by considering the converse of D.
Assume that D contains at least two initial strong components, D1 and D2. Let T be an arbitrary spanning oriented tree in D. Then each of T D1 and T D2 contains a vertex of in-degree zero. These vertices are of in-degree zero in T as well because of the deﬁnition of initial strong components. Thus, T is not an out-branching and D has no out-branchings. Therefore, if D has an out-branching, D contains only one initial strong component.
Now we suppose that D contains only one initial strong component D1, and r is an arbitrary vertex of D1. We prove that D has an out-branching with root r. In SC(D), the vertex x corresponding to D1 is the only vertex of in-degree zero and, hence, by Proposition 1.4.4, every vertex of SC(D) is reachable from x. Thus, every vertex of D is reachable from r. We construct an oriented tree T as follows. In the ﬁrst step T consists of r. In Step i ≥ 2, for every vertex y appended to T in the previous step, we add to T a vertex z, such that y→z and z ∈ V (T ), together with the arc yz. We stop when no vertex can be included in T . Since every vertex of D is reachable from r, T is spanning. Clearly, r is the only vertex of in-degree zero in T . Hence, T is an out-branching.
The oriented tree T constructed in the proof of Proposition 1.6.1 is a so-called BFS tree of D (see Chapter 2).
The following well-known theorem is due to Robbins.
Theorem 1.6.2 (Robbins’ theorem) [637] A connected graph G has a strongly connected orientation if and only if G has no bridge.

1.6 Undirected Graphs, Biorientations and Orientations

21

Proof: Clearly, if G has a bridge, G has no strong orientation. So assume
that G is bridgeless. Then every edge uv is contained in some cycle (see
Exercise 1.38). Choose a cycle C in G. Orient C as a directed cycle T1. Suppose that T1, T2, . . . , Tk are chosen and oriented in such a way that every Ti+1 (1 ≤ i < k) is either a cycle having only one vertex in common with T i = T1 ∪ T2 ∪ . . . ∪ Ti or a path with only initial and terminal vertices in common with T i. If U G(T k) = G, then we are done as a simple induction shows that T k is strong. Otherwise, there is an edge xy which is not in U G(T k) such that x is in U G(T k). Let C be a cycle containing xy. Orient C to obtain a (directed) cycle Z. Let z be a vertex in U G(T k) which is ﬁrst
encountered while traversing Z (after leaving x). Then, set Tk+1 = Z[x, z]. The path (or cycle) Tk+1 satisﬁes the above-mentioned properties. Since E(G) is ﬁnite, after a certain number of iterations ≤ m − 1 we have U G(T ) = G.

We formulate and prove the following well-known characterization of eulerian directed multigraphs (clearly, the deletion of loops in a directed pseudograph D does not change the property of D of being eulerian or otherwise). The ‘undirected’ version of this theorem marks the beginning of graph theory [225] (see the book [240] by Fleischner for a reprint of Euler’s original paper and a translation into English, and see the book [119] by Biggs, Lloyd and Wilson or Wilson’s paper [737] for a discussion of the historical record).
Theorem 1.6.3 (Euler’s theorem2) A directed multigraph D is eulerian if and only if D is connected and d+(x) = d−(x) for every vertex x in D.
Proof: Clearly, both conditions are necessary. We give a constructive proof of suﬃciency by building an Euler trail T . Let T be initially empty. Choose an arbitrary vertex x in D. Since D is connected, there is a vertex y ∈ N +(x). Append x to T as well as an arc from x to y. Since d−(y) = d+(y), there is an arc yz with tail y. Add both y and yz to T . We proceed similarly: after an arc uv is included in T , we append v to T together with an arc a ∈/ T whose tail is v. Due to the condition d+(w) = d−(w) for every vertex w, the above process can terminate only if the last arc appended to T is an arc whose head is the vertex x and the arcs of D with tail x are already in T . If all arcs of D are in T , we are done. Assume it is not so. Since D is connected, this means that T contains a vertex p which is a tail of an arc pq not in T . ‘Shift’ cyclically the vertices and arcs of T such that T starts and terminates at p. Add the arc pq to T and apply the process described above. This can terminate only when the last appended arc’s tail is p and all arcs leaving p are already in T . Again, either we are done (all arcs are already in T ) or we can ﬁnd a new vertex to restart the above process. Since V (D) is ﬁnite, after several steps all arcs of D will be included in T .
2 Euler’s original paper [226] only dealt with undirected graphs, but it is easy to see that the directed case generalizes the undirected case (see also Exercise 1.44).

22 1. Basic Terminology, Notation and Results

The algorithm described in this proof can be implemented to run in O(|V (D)| + |A(D)|) time (see Exercise 1.72). A generalization of the last theorem is given in Theorem 11.1.2. For eulerian directed multigraphs, the following stronger condition on out-degrees and in-degrees holds.

Corollary 1.6.4 Let D be an eulerian directed multigraph and let ∅ = W ⊂ V (D). Then, d+(W ) = d−(W ).

Proof: Observe that

d+(w) = |(W, W )| + d+(W ),

d−(w) = |(W, W )| + d−(W ). (1.1)

w∈W

w∈W

By Theorem 1.6.3, w∈W d+(w) = w∈W d−(w). The corollary follows from this equality and (1.1).

A matching M in a directed (an undirected) pseudograph G is a set of arcs (edges) with no common end-vertices. We also require that no element of M is a loop. If M is a matching then we say that the edges (arcs) of M are independent. A matching M in G is maximum if M contains the maximum possible number of edges. A maximum matching is perfect if it has n/2 edges, where n is the order of G. A set Q of vertices in a directed or undirected pseudograph H is independent if the graph H Q has no edges (arcs). The independence number, α(H), of H is the maximum integer k such that H has an independent set of cardinality k. A (proper) colouring of a directed or undirected graph H is a partition of V (H) into (disjoint) independent sets. The minimum number, χ(H), of independent sets in a proper colouring of H is the chromatic number of H.
In Section 1.3, the operation of composition of digraphs was introduced. Considering complete biorientations of undirected graphs, one can easily deﬁne the operation of composition of undirected graphs. Let H be a graph with vertex set {v1, v2, . . . , vn}, and let G1, G2, . . . , Gn be graphs which are pairwise vertex-disjoint. The composition H[G1, G2, . . . , Gn] is the graph L with vertex set V (G1) ∪ V (G2) ∪ . . . ∪ V (Gn) and edge set

∪ni=1E(Gi) ∪ {gigj : gi ∈ V (Gi), gj ∈ V (Gj), vivj ∈ E(H)}.

If none of the graphs G1, . . . , Gn in this deﬁnition of H[G1, . . . , Gn] have edges, then H[G1, . . . , Gn] is an extension of H.

1.7 Mixed Graphs and Hypergraphs
Mixed graphs are useful by themselves as a common generalization of undirected and directed graphs. Moreover, mixed graphs are helpful in several proofs on biorientations of graphs.

1.7 Mixed Graphs and Hypergraphs

23

A mixed graph M = (V, A, E) contains both arcs (ordered pairs of vertices in A) and edges (unordered pairs of vertices in E). We do not allow loops or parallel arcs and edges, but M may have an edge and an arc with the same end-vertices. For simplicity, both edges and arcs of a mixed graph are called edges. Thus, an arc is viewed as an oriented edge (and an unoriented edge as an edge in the usual sense). A biorientation of a mixed graph M = (V, A, E) is obtained from M by replacing every unoriented edge xy of E by the arc xy, the arc yx or the pair xy, yx of arcs. If no unoriented edge is replaced by a pair of arcs, we speak of an orientation of a mixed graph3. The complete biorientation of a mixed graph M = (V, A, E) is a
↔
biorientation M of M such that every unoriented edge xy ∈ E is replaced
↔
in M by the pair xy, yx of arcs. Using the complete biorientation of a mixed graph M , one can easily give the deﬁnitions of a walk, trail, path, and cycle
↔
in M . The only extra condition is that every pair of arcs in M obtained in replacement of an edge in M has to be treated as two appearances of one thing. For example, if one of the arcs in such a pair appears in a trail T , then
↔
the second one cannot be in T . A mixed graph M is strong if M is strong. Similarly, one can give the deﬁnition of strong components. A mixed graph
↔
M is connected if M is connected. An edge in a connected mixed graph M is a bridge if M − is not connected.
Figure 1.14 illustrates the notion of a mixed graph. The mixed graph M depicted in Figure 1.14 is strong; u, (u, v), v, {v, u}, u is a cycle in M ; M − x has two strong components: one consists of the vertex y, the other is M = M {u, v, w} ; the edge {v, w} is a bridge in M , the arc (u, v) and the edge {u, v} are not bridges in M ; M is bridgeless.
vw

ux
y Figure 1.14 A mixed graph.
Theorem 1.7.1 below is due to Boesch and Tindell [120]. This result is an extension of Theorem 1.6.2. We give a short proof obtained by Volkmann
3 Note that a mixed graph M = (V, A, E) may have a directed 2-cycle in which case no orientation of M is an oriented graph (because some 2-cycles remain).

24 1. Basic Terminology, Notation and Results
[730]. (Another proof which leads to a linear time algorithm is obtained by Chung, Garey and Tarjan [157].) Theorem 1.7.1 Let e be an unoriented edge in a strong mixed graph M . The edge e can be replaced by an arc (with the same end-vertices) such that the resulting mixed graph M is strong if and only if e is not a bridge. Proof: If e is a bridge, then clearly there is no orientation of e that results in a strong mixed graph. Assume that e is not a bridge. Let M = M − e. If M is strong, then any orientation of e leads to a strong mixed graph; thus, assume that M is not strong. Since e is not a bridge, M is connected. Let L1, L2, . . . , Lk be strong components of M . Since M is strong, there is only one initial strong component, say L1, and only one terminal strong component, say Lk. Let u (v) be the end-vertex of e belonging to L1 (Lk). By strong connectivity of L1, L2, . . . , Lk and Proposition 1.4.4 (applied to
↔
the strong component digraph of M ), M + (v, u) is strong. An orientation of a digraph D is a subdigraph of D obtained from D
by deleting exactly one arc between x and y for every pair x = y of vertices such that both xy and yx are in D. See Figure 1.15 for an illustration of this deﬁnition.
D HHH
Figure 1.15 A digraph D and subdigraphs H, H and H of D. The digraph H is an orientation of D but neither of H , H is an orientation of D.
Since we may transform a digraph to a mixed graph by replacing every 2-cycle with an undirected edge, we obtain the following reformulation of Theorem 1.7.1. Corollary 1.7.2 A strong digraph D has a strong orientation if and only if U G(D) has no bridge.
A hypergraph is an ordered set H = (V, E) such that V is a set (of vertices of H) and E is a family of subsets of V (called edges of H).

1.8 Classes of Directed and Undirected Graphs

25

The rank of H is the cardinality of the largest edge of H. For example,
H0 = ({1, 2, 3, 4}, {{1, 2, 3}, {2, 3}, {1, 2, 4}} is a hypergraph. The rank of H0 is three. The number of vertices in H is its order. We say that H is 2-
colourable if there is a function f : V →{0, 1} such that, for every edge
E ∈ E, there exist a pair of vertices x, y ∈ E such that f (x) = f (y). The
function f is called a 2-colouring of H. It is easy to verify that H0 is 2colourable. In particular, f (1) = f (2) = 0, f (3) = f (4) = 1 is a 2-colouring
of H0. A hypergraph is uniform if all its edges have the same cardinality. Thus an undirected graph is a 2-uniform hypergraph.

1.8 Classes of Directed and Undirected Graphs
In this section, we deﬁne certain families of directed and undirected multigraphs which will be used in various chapters of this book.
A multigraph G is complete if every pair of distinct vertices in G are adjacent. We will denote the complete graph on n vertices (which is unique up to isomorphism) by Kn. Its complement Kn has no edge.
A multigraph H is p-partite if there exists a partition V1, V2, . . . , Vp of V (H) into p partite sets (i.e., V (H) = V1 ∪ . . . ∪ Vp, Vi ∩ Vj = ∅ for every i = j) such that every edge of H has its end-vertices in diﬀerent partite sets. The special case of a p-partite graph when p = 2 is called a bipartite graph. We often denote a bipartite graph B by B = (V1, V2; E). A p-partite multigraph H is complete p-partite if, for every pair x ∈ Vi, y ∈ Vj (i = j), an edge xy is in H. A complete graph on n vertices is clearly a complete n-partite graph for which every partite set is a singleton. We denote the complete p-partite graph with partite sets of cardinalities n1, n2, . . . , np by Kn1,n2,...,np . Complete p-partite graphs for p ≥ 2 are also called complete multipartite graphs.
To obtain short proofs of various results on subdigraphs of a directed multigraph D = (V, A) the following transformation to the class of bipartite (undirected) multigraphs is extremely useful. Let BG(D) = (V , V ; E) denote the bipartite multigraph with partite sets V = {v : v ∈ V }, V = {v : v ∈ V } such that µBG(D)(u w ) = µD(uw) for every pair u, w of vertices in D. We call BG(D) the bipartite representation of D; see Figure 1.16.
A p-partite digraph is a biorientation of a p-partite graph; see Figure 1.17 (b). Bipartite (i.e. 2-partite) digraphs are of special interest. It is wellknown (and was proved already by K¨onig [497]) that an undirected graph is bipartite if and only if it has no cycle of odd length. The obvious extension of this statement to cycles in digraphs is not valid (the non-bipartite digraph with vertex set {x, y, z} and arc set {xy, xz, yz} is such an example that can easily be generalized). However, the obvious extension does hold for strong bipartite digraphs. Theorem 1.8.1 can be traced back to the book [404] by Harary, Norman and Cartwright.

26 1. Basic Terminology, Notation and Results

1 4

1 2

2 5
3

3 4

5

1 2 3 4 5

D BG(D) Figure 1.16 A directed multigraph and its bipartite representation.

Theorem 1.8.1 A strongly connected digraph is bipartite if and only if it has no cycle of odd length.
Proof: If D is bipartite, then it is easy to see that D cannot have an odd cycle. To prove suﬃciency suppose that D has no odd cycle. Fix an arbitrary vertex x in D. We claim that for every vertex y ∈ V (D) − x and every choice of an (x, y)-path P and a (y, x)-path Q, the length of P and Q are equal modulo 2.
Suppose this is not the case for some choice of y, P and Q. Then choose y, P and Q such that the parity of the lengths of P and Q diﬀer and |V (P )| + |V (Q)| is minimum among all such pairs of (x, y)- and (y, x)-paths whose lengths diﬀer in parity. If V (P ) ∩ V (Q) = {x, y}, then P Q is an odd cycle, contradicting the assumption. Hence there is a vertex z ∈/ {x, y} in V (P ) ∩ V (Q). Let z be chosen as the ﬁrst such vertex that we meet when we traverse Q from y towards x. Then P [z, y]Q[yQ+, z] is a cycle and it is even by our assumption. But now it is easy to see that the parity of the paths P [x, z] and Q[z, x] are diﬀerent and we get a contradiction to the choice of y, P and Q. This proves the claim and, in particular, it follows that for every y ∈ V (D) − x, the lengths of all paths from x to y have the same parity.
Now let
U = {y : the length of every (x, y)-path is even},
U = {y : the length of every (x, y)-path is odd}.
This is a bipartition of V (D) and neither U nor U contains two vertices which are joined by an arc, since that would imply that some vertex had paths of two diﬀerent parities from x.
An extension of this theorem to digraphs whose cycles are all of length 0 modulo k ≥ 2 is given in Theorem 10.5.1.

1.8 Classes of Directed and Undirected Graphs

27

Recall that tournaments are orientations of complete graphs. A semicomplete digraph is a biorientation of a complete graph (see Figure 1.17(a)). The complete biorientation of a complete graph is a complete digraph (denoted by K↔n). The notion of semicomplete digraphs and their special subclass, tournaments, can be extended in various ways. A biorientation of a complete p-partite (multipartite) graph is a semicomplete p-partite (multipartite) digraph; see Figure 1.17(c). A multipartite tournament is an orientation of a complete multipartite graph. A semicomplete 2-partite digraph is also called a semicomplete bipartite digraph. A bipartite tournament is a semicomplete bipartite digraph with no 2-cycles.

(a) K4 and a semicomplete digraph of order four.

(b) A 3-partite graph G and a biorientation of G.

(c) The complete 3-partite graph K2,1,2 and a semicomplete 3-partite digraph D.
Figure 1.17 Classes of graphs and digraphs.

28 1. Basic Terminology, Notation and Results
One can use the operation of extension introduced in Section 1.3 to deﬁne ‘extensions’ of the above classes of digraphs. We will speak of extended semicomplete digraphs (i.e., extensions of semicomplete digraphs), extended semicomplete multipartite digraphs, etc. Clearly, every extended semicomplete digraph is a semicomplete multipartite digraph, which is not necessarily semicomplete, and every extended semicomplete multipartite digraph is a semicomplete multipartite digraph. Therefore, the class of semicomplete multipartite digraphs is extension-closed, and the class of semicomplete digraphs is not.
Recall that a digraph D is acyclic if D has no cycle. Obviously, every acyclic digraph is an oriented graph. A digraph D is transitive if, for every pair of arcs xy and yz in D such that x = z, the arc xz is also in D. It is easy to show that a tournament is transitive if and only it is acyclic (see Exercise 1.46). Sometimes, we will deal with transitive oriented graphs, i.e. transitive digraphs with no cycle of length two. A digraph D is quasi-transitive if, for every triple x, y, z of distinct vertices of D such that xy and yz are arcs of D, there is at least one arc between x and z. Clearly, a semicomplete digraph is quasi-transitive. Note that, if there is only one arc between x and z, it can have any direction; hence quasi-transitive digraphs are generally not transitive.
TQ
Figure 1.18 A transitive digraph T and a quasi-transitive digraph Q.
1.9 Algorithmic Aspects
In this book we will often describe and analyze algorithms on digraphs. We will concentrate more on graph-theoretical aspects of these algorithms than on their actual implementation on a computer. (In particular, we will sometimes not prove the best possible complexity of an algorithm. However, in most such cases, we will provide a reference to a better complexity.) Still some very basic notions related to data structures and algorithms are required and will be given below. For more details on design and analysis of combinatorial algorithms, the reader is addressed to numerous books on the

1.9 Algorithmic Aspects

29

subject, e.g., to Aho, Hopcroft and Ullman [6], Brassard and Bratley [134] and Cormen, Leiserson and Rivest [169].
1.9.1 Algorithms and their Complexity
Recall that unless speciﬁed otherwise n (m) denotes the number of vertices (arcs) in the directed multigraph under consideration. In the following, all logarithms whose base is unspeciﬁed are of base 2. For a pair of given functions f (k), g(k) of a non-negative integer argument k, we say that f (k) = O(g(k)) if there exist positive constants c and k0 such that 0 ≤ f (k) ≤ cg(k) for all k ≥ k0. If there exist positive constants c and k0 such that 0 ≤ cf (k) ≤ g(k) for all k ≥ k0, we say that g(k) = Ω(f (k)). Clearly, f (k) = O(g(k)) if and only if g(k) = Ω(f (k)). If both f (k) = O(g(k)) and f (k) = Ω(g(k)) hold, then we say that f (k) and g(k) are of the same order and denote it by f (k) = Θ(g(k)).
In the analysis of an algorithm, ﬁrst of all we will be interested in its time complexity which must reﬂect the running time of the corresponding computer program on various computers. In order to make the time complexity measure suﬃciently universal, it is usually assumed that computations are performed by some abstract computer. The computer executes elementary operations, that is, arithmetical operations, comparisons, data movements and control branching, each in constant time. Since we are interested only in the asymptotics of the execution time, the number of elementary operations of an algorithm will be considered as its time complexity. In the vast majority of cases, the time complexity (which will often be called just the complexity) of an algorithm depends on the size of its input. An algorithm A is an O(g(n)) algorithm for some function g(n) of its input size if the running time of A on inputs of size n never exceeds cg(n) for some constant c (depending only on A).
Since the typical inputs to the algorithms considered in this book are (weighted) directed multigraphs, the size of inputs will be measured by the numbers of vertices and arcs, that is, by n and m, and, for digraphs with weights on the arcs (vertices), by log |cmax|, where |cmax| is the maximum of the absolute values of the weights of arcs (vertices). An algorithm of complexity O(p(n, m, log |cmax|)), where p(n, m, log |cmax|) is a polynomial in n, m and log |cmax|, is a polynomial-time (or just polynomial) algorithm. The notion of equating eﬃcient algorithms with polynomial algorithms is due to Edmonds [210] and is at present the most popular formalization for the intuitive notion of ‘eﬃcient’ algorithms. Although we would normally not call an algorithm of complexity Θ(n1000), where n is the size of the input, an eﬃcient algorithm, it is very rarely the case that polynomial algorithms have such a high degree of their associated polynomials.
There are two well-known and often-used ways to represent a digraph D = (V, A) for computational purposes: as a collection of adjacency lists and as an adjacency matrix.

30 1. Basic Terminology, Notation and Results

For the adjacency matrix representation of a directed multigraph
D = (V, A), we assume that the vertices of D are labeled v1, v2, . . . , vn in some arbitrary but ﬁxed manner. The adjacency matrix M (D) = [mij] of a digraph D is an n × n-matrix such that mij = 1 if vi→vj and mij = 0 otherwise. For directed pseudographs we let mij = µ(vi, vj), that is, mij is the number of arcs from vi to vj. The adjacency matrix representation is a very convenient and fast tool for checking whether there is an arc from a vertex
to another one. A drawback of this representation is the fact that to check
all adjacencies, without using any other information besides the adjacency matrix, one needs Ω(n2) time. Thus, the majority of algorithms using the adjacency matrix cannot have complexity lower than Ω(n2) (this holds in
particular if we include the time needed to construct the adjacency matrix).

c bd

a h g/ b c a f c d/

ae hf g

c d f e g/ d e/ e f/ f g/ g f/ h g/

Figure 1.19 A directed multigraph and a representation by adjacency lists Adj+.

The adjacency list representation of a directed pseudograph D = (V, A) consists of a pair of arrays Adj+ and Adj−. Each of Adj+ and Adj−
consists of |V | (linked) lists, one for every vertex in V . For each x ∈ V , the linked list Adj+(x) (Adj−(x), respectively) contains all vertices dominated
by x (dominating x, respectively) in some ﬁxed order (see Figure 1.19). Using the adjacency list Adj+(x) (Adj−(x)) one can obtain all out-neighbours (inneighbours) of a vertex x in O(|Adj+(x)|) (O(|Adj−(x)|)) time. A drawback
of the adjacency list representation is the fact that one needs, in general,
more than constant time to verify whether x→y. Indeed, to decide this we have to search sequentially through Adj+(x) (or Adj−(x)) until we either ﬁnd
y (x) or reach the end of the list.
To illustrate the concepts described in this section, let us consider the
Hamilton path problem in tournaments. Theorem 1.4.5 states that every
tournament is traceable. However, the proof that we have presented is non-
constructive, i.e. it does not provide us with a polynomial algorithm to ﬁnd
a Hamilton path in a tournament. Now we give two constructive proofs of
Theorem 1.4.5 and show how these lead to polynomial algorithms to construct
a Hamilton path in a tournament.

1.9 Algorithmic Aspects

31

Inductive Proof of Theorem 1.4.5: Clearly, the one vertex tournament has a Hamilton path (the vertex itself). Assume that the theorem holds for every tournament with less that n(≥ 2) vertices. Consider a tournament T with n vertices and a vertex x ∈ V (T ). By induction, the tournament T − x has a Hamilton path, P = y1y2 . . . yn−1. If x→y1, then xP is a Hamilton path in T ; if yn−1→x, then P x is a Hamilton path in T . Assume that y1→x and x→yn−1. Then, it is easy to show that there exists an index i < n − 1 such that yi→x and x→yi+1. Thus, P [y1, yi]xP [yi+1, yn−1] is a Hamilton path in T.
This constructive proof gives rise to the following simple algorithm to ﬁnd a Hamilton path in a tournament. One of the reasons for the simplicity of this algorithm is that it is recursive (for a discussion of recursive algorithms, see e.g. the book [169] by Cormen, Leiserson and Rivest).
HamPathTour: Input: A tournament T on n vertices labelled x1, x2, . . . , xn and its adjacency matrix M = [mij]. Output: A Hamilton path in T .
1. Let P := x1 and i := 2. 2. If i > n go to Step 7. 3. Let P = y1y2 . . . yi−1 be the current path. 4. If xi→y1 then P := xiP . Let i := i + 1 and go to Step 2. 5. If yi−1→xi then P := P xi. Let i := i + 1 and go to Step 2. 6. For j = 1 to i − 2 do: If yj→xi→yj+1 then P := P [y1, yj]xiP [yj+1, yi−1].
Let i := i + 1 and go to Step 2. 7. Return the path P .
The correctness of this algorithm follows from the above proof. To see that this algorithm can be implemented as an O(n2) algorithm, observe that the algorithm has two nested loops, each of which perform O(n) operations (we count queries to the adjacency matrix as constant time) and all other steps take constant time. Thus, the complexity is O(n2).
The reader who is familiar with algorithms for sorting numbers might have noticed that HamPathTour is very similar to the algorithm Insertion-Sort which sorts numbers by inserting one at a time in a list (see e.g. [169, pp. 2-4]). This resemblance is no coincidence. In fact, given any set S = {a1, . . . , an} of n distinct real numbers we can form an acyclic tournament T (S) with V (T (S)) = S and A(T (S)) = {aiaj : ai < aj, 1 ≤ i = j ≤ n}. The correct (sorted) increasing order on S corresponds to the unique Hamilton path aπ(1)aπ(2) . . . aπ(n) of T (S) which again is the unique acyclic ordering of V (T (S)) (see also Exercise 1.18). Thus any algorithm for ﬁnding a Hamilton path in a tournament can be used for sorting numbers (we compare numbers, by looking at the orientation of the arc between the corresponding vertices

32 1. Basic Terminology, Notation and Results
in4 T (S)). Conversely, several sorting algorithms can be translated into algorithms for solving the more general problem of ﬁnding Hamilton paths in tournaments. One such example is the classical Mergesort algorithm (see e.g.[169, pp. 12-15]), which we now translate into the language of tournaments. For simplicity we shall assume that the number of vertices of the input tournament is a power of two. The reader can easily extend the algorithm to the general case, see Exercise 1.70. It is convenient to state the algorithm as a recursive algorithm (which is the reason why we specify a parameter for the algorithm). We assume that the tournament is available through its adjacency matrix.
MergeHamPathTour(T ):
1. Split T into two tournaments T1 and T2 on the same number of vertices. 2. Pi:= MergeHamPathTour(Ti), i = 1, 2. 3. P := MergePaths(P1, P2). 4. Return P.
Here MergePaths is a procedure, which given two disjoint paths P, P in tournament T merges these two into one path P ∗ such that V (P ∗) = V (P ) ∪ V (P ). This can be done in the same way as one would merge two sorted lists of numbers into one sorted list.
Procedure MergePaths(P, P ): Input: Paths P = x1x2 . . . xk and P = y1y2 . . . yr. Output: A path P ∗ such that V (P ∗) = V (P ) ∪ V (P ).
1. If P is empty then P ∗:=P . 2. If P is empty then P ∗:= P . 3. If x1 dominates y1 then P ∗:=x1MergePaths(P − x1,P ). 4. If y1 dominates x1 then P ∗:=y1MergePaths(P , P − y1). 5. Return P ∗.
The classical analysis of the MergeSort algorithm (see e.g. [169]) shows that the algorithm uses O(n log n) comparisons to sort n real numbers. Similarly it follows from our description above that the algorithm MergeHamPathTour will ﬁnd a Hamilton path in a tournament T with n vertices after making O(n log n) queries about adjacencies of vertices in T . Note that to implement the algorithm we do not need to construct the adjacency matrices of each of the tournaments considered in the recursive calls. Indeed, all adjacencies can be checked using the adjacency matrix of the original tournament. Hence, if we only count the number of times we need to check the direction of an arc, then MergeHamPathTour is a faster algorithm than HamPathTour.
4 Note that this is only a virtual description, since we do not need to construct the adjacency matrix in this case. We simply compare the two numbers x and y and x→y holds if and only if x < y.

1.9 Algorithmic Aspects

33

1.9.2 N P-Complete and N P-Hard Problems
There are many interesting algorithmic problems concerning (di)graphs for which no polynomial algorithm is known. Many of those problems (formulated in their decision form) belong to the class N PC of so-called N P-complete problems. For a detailed introduction to the class of N P-complete problems, see the book by Garey and Johnson [303]. A problem is a decision problem if it requires the answer ‘yes’ or ‘no’. By a problem we understand actually a family of instances. For example, we will consider the Hamilton cycle problem in a digraph: given a digraph, decide whether or not it has a Hamilton cycle. Every digraph provides an instance of this problem. The so-called travelling salesman problem (TSP) is similar: given a weighted complete digraph D and a real number B, decide whether D contains a Hamilton cycle of weight at most B. An instance of the last problem consists of a complete digraph and a speciﬁcation of the weights of its arcs.
A decision problem S belongs to the complexity class P if and only if there exists a polynomial algorithm A which, given any instance of S, produces an answer in the set {‘yes’,‘no’} such that the answer from A on input x is ‘yes’ if and only if x is a ‘yes’ instance for5 S. Since A is polynomial, it follows that it produces its answer after at most p(|x|) steps, where |x| is the size of the input x and p is a ﬁxed polynomial (depending on S).
A decision problem belongs to the class N P (co-N P) if, for every ‘yes’instance (‘no’-instance) of the problem, there exists a short ‘proof’, called a certiﬁcate, of polynomial size (in n, m and log |cmax|) such that, using the certiﬁcate, one can verify in polynomial time that the instance is indeed a ‘yes’ (‘no’) instance. The certiﬁcate depends on the instance of the problem, but it must have the same structure for all instances of the problem. To illustrate this deﬁnition, let us show that both the Hamilton cycle problem and travelling salesman problem are in N P. Given a permutation π of the vertices in a digraph D (π is the certiﬁcate for hamiltonicity of D), it is easy to verify whether this permutation corresponds to a Hamilton cycle in D (note that this certiﬁcate has the same structure for each instance of the problem, namely it is a permutation of the vertices). Indeed, assuming that V (D) = {1, 2, . . . , n}, we simply have to check that π(i)π(i + 1) is an arc of D for every i = 1, 2, . . . , n, where the vertex n + 1 is the same as the vertex 1. If we also have weights on the arcs, then it is also easy to verify that the weight of the proposed Hamilton cycle is no more than B. Notice that the situation here is not symmetric: it is unknown if the ‘complement’ of the Hamilton cycle problem (given a digraph, check whether it has no Hamilton cycle) is in N P. Indeed, it is diﬃcult to imagine what kind of certiﬁcate will enable a polynomial algorithm to check that a digraph is not hamiltonian. Actually, such a certiﬁcate would answer in aﬃrmative the wellknown complexity question: whether N P =co-N P (see e.g. [303, Theorem
5 Thus a hypothetical polynomial algorithm for the Hamilton cycle problem must produce the answer ‘yes’ precisely when the input digraph has a Hamilton cycle.

34 1. Basic Terminology, Notation and Results

7.2]). A positive answer to this question seems to be unlikely with our current

knowledge of algorithms.

Given a pair of decision problems S, T , we say that S is polynomially

reducible to T (denoted S ≤P T ) if there is a polynomial algorithm A that transforms an instance x of S into an instance A(x) of T such that the second

instance has the same answer as the ﬁrst one. That is, x is a ‘yes’ instance of

S if and only if A(x) is a ‘yes’ instance of T . Some polynomial reductions are

quite easy. For example, we can readily reduce the Hamilton cycle problem

to the travelling salesman problem: given a digraph D consider a copy of a

↔
Kn

such

that

V (D)

=

V (K↔n),

and,

for

every

arc

e

in

K↔n,

its

weight

is

1

if

e ∈ A(D) and 2 otherwise. Let also B = n. Clearly, D is hamiltonian if and
↔
only if with the prescribed weights Kn has a Hamilton cycle of weight not exceeding B. Obviously, the above transformation can be carried out by a

polynomial algorithm.

A decision problem is N P-hard if all problems in N P can be polynomi-

ally reduced to this problem. If the problem is N P-hard and also belongs to

N P, then it is N P-complete. The class N PC consists of all N P-complete

problems. In order to show that a decision problem W is N P-hard, we must

show that every problem in N P can be polynomially reduced to W – a seem-

ingly impossible task. However, polynomial transformations are closed under

composition, that is, S ≤P T and T ≤P K implies that S ≤P K (see Exercise 1.73). Hence, in order to prove that W is N P-hard, it suﬃces to prove that

there is some N P-complete problem which is polynomially reducible to W

(see Exercise 1.75). Of course this only works if we already have established

that there is some problem that belongs to the class N PC of N P-complete

problems. This extremely important and non-trivial step was provided by

Cook in 1971 [165] (independently, a similar discovery was made by Levin

[513]).

Since there are a huge number of known N P-complete problems, the task

to prove that a given problem is N P-complete is sometimes not too diﬃ-

cult. On the other hand, it is also highly non-trivial in many cases. We will

give a number of examples of N P-completeness and N P-hardness proofs

throughout this book. It is well-known that the Hamilton cycle problem

is N P-complete as shown by Karp in his classical paper [474]. ¿From the

above transformation, it follows that the travelling salesman problem is N P-

complete as well.

Quite often we will deal with optimization problems rather than deci-

sion problems. Since an optimization problem consists of ﬁnding an optimal

solution to a prescribed problem, such a problem very often has a decision

analogue. For example, in the usual formulation of the travelling salesman

problem the goal is to ﬁnd a minimum weight Hamilton cycle in a weighted

complete digraph. The decision analogue was stated above. If the decision

analogue of an optimization problem is N P-hard, then we will also say that

the optimization problem is N P-hard. So, the optimization version of the

1.10 Application: Solving the 2-Satisﬁability Problem

35

travelling salesman problem is N P-hard. For a wealth of information on N P-hard optimization problems and their approximability properties, see the book [33] by Ausiello, Crescenzi, Gambosi, Kann, Marchetti-Spaccamela and Protasi.
From a complexity point of view, there is no signiﬁcant diﬀerence between a decision problem and its optimization analogue (if it exists). To illustrate this statement, let us consider the problem of deciding whether a strong digraph has a cycle of length at least k (here k is part of the input). The optimization analogue is the problem of ﬁnding a cycle of maximum length in a strong digraph. If we solve the optimization problem, we easily obtain a solution to the decision problem: just check whether the length of the longest cycle is at least k. On the other hand, using binary search one can ﬁnd an answer to the optimization problem by solving a number of decision problems. In our example, we ﬁrst check whether or not the digraph under consideration has a cycle of length at least n/2. Then, solve the analogous problem with n/4 (if D has no cycle of length at least n/2) or 3n/4 (if D has a cycle of length at least n/2) instead of n/2, etc. So, we would need to solve O(log n) decision problems, in order to obtain an answer to the optimization problem.

1.10 Application: Solving the 2-Satisﬁability Problem
In this section we deal with a problem that is not a problem on digraphs, but it has applications to several problems on graphs, in particular when we want to decide whether a given undirected graph has an orientation with certain properties. In Chapter 8 we will give examples of this. We will show how to solve this problem eﬃciently using the algorithm for strong components of digraphs from Chapter 4.
A boolean variable x is a variable that can assume only two values 0 and 1. The sum of boolean variables x1 + x2 + . . . + xk is deﬁned to be 1 if at least one of the xi’s is 1 and 0 otherwise. The negation x of a boolean variable x is the variable that assumes the value 1 − x. Hence x = x. Let X be a set of boolean variables. For every x ∈ X there are two literals, over x, namely x itself and x. A clause C over a set of boolean variables X is a sum of literals over the variables from X. The size of a clause is the number of literals it contains. For example, if u, v, w are boolean variables with values u = 0, v = 0 and w = 1, then C = (u + v + w) is a clause of size 3, its value is 1 and the literals in C are u, v and w. An assignment of values to the set of variables X of a boolean expression is called a truth assignment. If the variables are x1, . . . , xk, then we denote a truth assignment by t = (t1, . . . , tk). Here it is understood that xi will be assigned the value ti for i = 1, . . . , k.
The 2-satisﬁability problem, also called 2-SAT, is the following problem. Let X = {x1, . . . , xk} be a set of boolean variables and let C1, . . . , Cr be a collection of clauses, all of size 2, for which every literal is over X. Decide if there exists a truth assignment t = (t1, . . . , tk) to the variables in X such that

36 1. Basic Terminology, Notation and Results
the value of every clause will be 1. This is equivalent to asking whether or not the boolean expression F = C1 ∗ . . . ∗ Cp can take the value 1. Depending on whether this is possible or not, we say that F is satisﬁable or unsatisﬁable. Here ‘∗’ stands for boolean multiplication, that is, 1 ∗ 1 = 1, 1 ∗ 0 = 0 ∗ 1 = 0 ∗ 0 = 0. For a given truth assignment t = (t1, . . . , tk) and literal q we denote by q(t) the value of q when we use the truth assignment t (i.e. if q = x3 and t3 = 1, then q(t) = 1 − 1 = 0)
To illustrate the deﬁnitions, let X = {x1, x2, x3} and let C1 = (x1 + x3), C2 = (x2 + x3), C3 = (x1 + x3) and C4 = (x2 + x3). Then it is not diﬃcult to check that F = C1 ∗ C2 ∗ C3 ∗ C4 is satisﬁable and that taking x1 = 0, x2 = 1, x3 = 1 we obtain F = 1.
If we allow more than 2 literals per clause then we obtain the more general problem Satisﬁability (also called SAT) which is N P-complete, even if all clauses have size 3, in which case it is also called 3-SAT (see e.g. page 359 in the book [600] by Papadimitriou and Steiglitz). (In his proof of the existence of an N P-complete problem, Cook used the satisﬁability problem and showed how every other problem in N P can be reduced to this problem.) Below we will show how to reduce 2-SAT to the problem of ﬁnding the strong components in a certain digraph. We shall also show how to ﬁnd a satisfying truth assignment if one exists. This step is important in applications, such as those in Chapter 8.
Let C1, . . . , Cr be clauses of size 2 such that the literals are taken among the variables x1, . . . , xk and their negations and let F = C1 ∗ . . . ∗ Cr be an instance of 2-SAT. Construct a digraph DF as follows. Let V (DF ) = {x1, . . . , xk, x1, . . . , xk} (i.e. DF has two vertices for each variable, one for the variable and one for its negation). For every choice of p, q ∈ V (DF ) such that some Ci has the form Ci = (p + q), A(DF ) contains an arc from p to q and an arc from q to p (recall that x = x). See Figure 1.20 for examples of a 2-SAT expressions and the corresponding digraphs. The ﬁrst expression is satisﬁable, the second is not.
Lemma 1.10.1 If DF has a (p, q)-path, then it also has a (q, p)-path. In particular, if p, q belong to the same strong component in DF , then p, q belong to the same strong component in DF .
Proof: This follows easily by induction on the length of a shortest (p, q)path, using the fact that (x, y) ∈ A(DF ) if and only if (y, x) ∈ A(DF ).
Lemma 1.10.2 If DF contains a path from p to q, then, for every satisfying truth assignment t, p(t) = 1 implies q(t) = 1.
Proof: Observe that F contains a clause of the form (a + b) and every clause takes the value 1 under any satisfying truth assignment. Thus, by the fact that t is a satisfying truth assignment and by the deﬁnition of DF , we have that for every arc (a, b) ∈ A(DF ), a(t) = 1 implies b(t) = 1. Now the claim follows easily by induction on the length of the shortest (p, q)-path in DF .

1.10 Application: Solving the 2-Satisﬁability Problem x3 x3

37

x1

x2 x1

x2

x2

x1 x2

x1

x3 x3
(a) (b)
Figure 1.20 The digraph DF is shown for two instances of 2-SAT. In (a) F = (x1 + x3) ∗ (x2 + x3) ∗ (x1 + x3) ∗ (x2 + x3) and in (b) F = (x1 + x2) ∗ (x1 + x2) ∗ (x2 + x3) ∗ (x2 + x3)
The following is an easy corollary of Lemma 1.10.1 and Lemma 1.10.2.
Corollary 1.10.3 If t is a satisfying truth assignment, then for every strong component D of DF and every choice of distinct vertices p, q ∈ V (D ) we have p(t) = q(t). Furthermore we also have p(t) = q(t).
Lemma 1.10.4 F is satisﬁable if and only if for every i = 1, 2, . . . , k, no strong component of DF contains both the variable xi and its negation xi.
Proof: Suppose t is a satisfying truth assignment for F and that there is some variable xi such that xi and xi are in the same strong component in DF . Without loss of generality xi(t) = 1 and now it follows from Lemma 1.10.2 and the fact that DF contains a path from xi to xi that we also have xi(t) = 1 which is impossible. Hence if F is satisﬁable, then for every i = 1, 2, . . . , k, no strong component of DF contains both the variable xi and its negation xi.
Now suppose that for every i = 1, 2, . . . , k, no strong component of DF contains both the variable xi and its negation xi. We will show that F is satisﬁable by constructing a satisfying truth assignment for F.
Let D1, . . . , Ds denote some acyclic ordering of the strong components of DF (i.e. there is no arc from Dj to Di if i < j). Recall that by Proposition 1.4.3, such an ordering exists. We claim that the following algorithm will determine a satisfying truth assignment for F: ﬁrst mark all vertices ‘unassigned’ (meaning truth value still pending). Then going backwards starting from Ds and ending with D1 we proceed as follows. If there is any vertex v ∈ V (Di) such that v has already been assigned a value, then assign all

38 1. Basic Terminology, Notation and Results
vertices in Di the value 0 and otherwise assign all vertices in Di the value 1. Observe that this means that, for every variable xi, we will always assign the value 1 to whichever of xi, xi belongs to the strong component with the highest index. To see this, let p denote whichever of xi, xi belongs to the strong component of highest index j. Let i < j be chosen such that p ∈ Di. Suppose we assign the value 0 to p. This means that at the time we considered p, there was some q ∈ Dj such that q ∈ Df for some f > j. But then p ∈ Df , by Lemma 1.10.1, contradicting the fact that i < f .
Clearly all vertices in V (F) will be assigned a value, and by our previous argument this is consistent with a truth assignment for the variables of F. Hence it suﬃces to prove that each clause has value 1 under the assignment. Suppose some clause Cf = (p + q) attains the value 0 under our assignment. By our observation above, the reason we did not assign the value 1 to p was that at the time we considered p we had already given the value 1 to p and p belonged to a component Dj with a higher index than the component Di containing p. Thus the existence of the arc (p, q) ∈ A(DF ) implies that q ∈ Dh for some h ≥ j. Applying the analogous argument to q we conclude that q is in some component Dg with g > h. But then, using the existence of the arc (q, p), we get that i ≥ g > h ≥ j > i, a contradiction. This shows that we have indeed found a correct truth assignment for F and hence the proof is complete.
In Chapter 4 we will see that for any digraph D one can ﬁnd the strong components of D and an acyclic ordering of these in O(n+m) time. Since the number of arcs in DF is twice the number of clauses in DF and the number of vertices in DF is twice the number of variables in DF , it is not diﬃcult to see that the algorithm outlined above can be performed in time O(k + r) and hence we have the following result.
Theorem 1.10.5 The problem 2-SAT is solvable in linear time with respect to the number of clauses.
The approach we adopted is outlined brieﬂy in Exercise 15.6 of the book [600] by Papadimitriou and Steiglitz, see also the paper [230] by Even, Itai and Shamir.
It is interesting to note that if, instead of asking whether F is satisﬁable, we ask whether there exists some truth assignment such that at least clauses will get the value 1, then this problem, which is called MAX-2-SAT, is N Pcomplete as shown by Garey, Johnson and Stockmeyer [304] (here is part of the input for the problem).
1.11 Exercises
1.1. Let X and Y be ﬁnite sets. Show that |X ∪ Y | + |X ∩ Y | = |X| + |Y |.
1.2. Let X and Y be ﬁnite sets. Show that |X ∪ Y |2 + |X ∩ Y |2 ≥ |X|2 + |Y |2.

1.11 Exercises

39

1.3. Find a mistake in the following ‘deﬁnition’ of a subdigraph: H = (V , A ) is a subdigraph of D = (V, A) if and only if V ⊆ V and A ⊆ A hold.
1.4. (−) Draw the six non-isomorphic directed pseudographs of order and size 2.
1.5. (−) Prove that the number of vertices of odd degree in a digraph is always even. Hint: use Proposition 1.2.1.
1.6. Prove that for every n ≥ 2 there exists a unique tournament T on n vertices for which all out-degrees of the vertices are distinct.
1.7. (−) Prove that every tournament on n ≥ 2k + 2 vertices has a vertex of out-degree at least k + 1.
1.8. Prove that every undirected graph has two vertices with the same degree.
1.9. (−) Prove that, if D and H are isomorphic directed pseudographs, then their converses are also isomorphic.
1.10. Describe an inﬁnite family F of directed pseudographs such that no D ∈ F is isomorphic to its converse.
1.11. (−) Transitivity of paths. Let D be a digraph and let x, y, z be vertices in D, x = z. Prove that, if D has an (x, y)-path and a (y, z)-path, then it contains an (x, z)-path as well.
1.12. (−) Decomposing a closed walk into cycles. Prove that every closed walk can be decomposed into a collection of (not necessarily disjoint) cycles.
1.13. Open walk decomposition. Prove that every open walk can be decomposed into a path and some cycles (not necessarily disjoint).
1.14. (−) Prove that, if the in-degree of every vertex in a digraph D is positive, then D has a cycle.
1.15. (−) Let x and y be distinct vertices of a digraph D. Suppose that there is a sequence of cycles C1, . . . , Ck in D such that x is in C1, y is in Ck and Ci and Ci+1 have at least one common vertex for every i ∈ {1, 2, . . . , k − 1}. Prove that there exists an (x, y)-path in D.
1.16. Prove Proposition 1.4.6.
1.17. (−) Let G be an (undirected) multigraph. Using Proposition 1.2.1, prove that the sum of degrees of vertices in G equals twice the number of edges in G.
1.18. Uniqueness of acyclic orderings. Prove that an acyclic digraph D has a unique acyclic ordering if and only if D is traceable.
1.19. (−) Let D be the digraph in Figure 1.21. (a) Determine the set of out-neighbours and the set of in-neighbours for all vertices of D. (b) Determine the semi-degrees of D. (c) Determine δ0(D) and ∆0(D). (d) Is D regular?
1.20. (−) Let D be the digraph in Figure 1.21.

40 1. Basic Terminology, Notation and Results
ab
hc
d g
fe
Figure 1.21 A digraph D.
(a) Draw the subdigraphs induced by the vertex sets {a, b, c, d, e} and {a, d, f, g, h}.
(b) Draw the subdigraphs arc-induced by the arc sets {ab, cd, ed, hc, ha} and {ab, bc, dc, f b, bg}.
(c) Let H be the subdigraph of D with vertex set V (H) = {a, b, c, d, e, h} and arc set A(H) = {ab, bc, dc, ed, eh, ae}. List all chords of H in D.
(d) Let H be as above. Is H induced in D? Is it arc-induced? 1.21. (−) Let D be the digraph from Figure 1.21. Draw the directed multigraphs
D/{a, b, c, d, e, h} and D/{e, f, h}. 1.22. (−) Prove that an undirected graph is eulerian if and only if it has an eulerian
orientation. 1.23. (−) Let D be the digraph from Figure 1.21. Determine the independence
number α(D) of D. 1.24. Let D be the digraph in Figure 1.21. Determine the chromatic number of
U G(D). 1.25. Let T = (V, A) be a tournament such that every vertex is on a cycle. Prove
that for every a ∈ A the digraph T − a is unilateral. 1.26. Prove that, if a tournament T has a cycle, then it has two hamiltonian paths. 1.27. Let D be a semicomplete multipartite digraph such that every vertex of D
is on some cycle. Prove that D is unilateral. 1.28. Let G be an undirected graph. Prove that either G or its complement G is
connected. 1.29. Prove that every strong tournament T on at least 4 vertices has two distinct
vertices x, y such that T − x and T − y are both strong. 1.30. Strong connectivity is equivalent to cyclic connectivity in digraphs.
A digraph is cyclically connected if for every pair x, y of distinct vertices of D there is a sequence of cycles C1, . . . , Ck such that x is in C1, y is in Ck and Ci and Ci+1 have at least one common vertex for every i ∈ {1, 2, . . . , k − 1}. Prove that a digraph D is strong if and only if it is cyclically connected.

1.11 Exercises

41

1.31. (−) Let D be the digraph from Figure 1.21. Find an out-branching with root a in D.
1.32. (−) Prove that a directed multigraph D is strong if and only if it has an out-branching rooted at v for every vertex v of D.
1.33. (+) Preserving cycle subdigraphs. Let D be a strong digraph with the property that, for every pair x, y of vertices, the deletion of all arcs between x and y results in a connected digraph. Let F = C1 ∪ C2 ∪ . . . ∪ Ct be a cycle subdigraph in D such that every cycle Ci has length at least three. Prove that D has a strong spanning oriented subgraph containing F. Hint: use Corollary 1.7.2 (Volkmann [730]).
1.34. Prove Proposition 1.4.6.
1.35. (−) Show that every digraph D contains a path of length at least δ0(D).
1.36. Show that every oriented graph D on n vertices and with δ0(D) ≥ (n−1)/4 is strong. Show that this is best possible in terms of δ0(D).
1.37. Prove that a connected digraph is strong if and only if every arc is contained in a cycle. Hint: use the result of Exercise 1.30.
1.38. Prove that every edge of a 2-edge-connected graph belongs to a cycle.
1.39. (−) Prove that an undirected tree of order n has n − 1 edges.
1.40. Prove that every undirected tree has a vertex of degree one.
1.41. Prove that every connected undirected graph G has a spanning tree. Hint: observe that a connected spanning subgraph of G with minimum number of edges is a tree.
1.42. Using the results of the last two exercises, prove that every connected undirected graph G has a vertex x such that G − x is connected.
1.43. An undirected multigraph G is eulerian if it contains a closed trail T such that A(T ) = A(G). Prove without using Theorem 1.6.3 that G is eulerian if and only if G is connected and d(x) is even for every vertex x of G.
1.44. Prove using Exercise 1.43 that, if an undirected graph G = (V, E) has no vertex of odd degree, then it has an orientation D = (V, A) such that d+D(v) = d−D(v) for all v ∈ V .
1.45. Let G = (V, E) be an eulerian graph. Using Exercise 1.43 and Corollary 1.6.4, prove that d(W ) is even for every proper subset W of V .
1.46. (−) Prove that a tournament is transitive if and only if it is acyclic. Hint: apply Theorem 1.5.1.
1.47. Hamiltonian walks in strong digraphs. Prove that a digraph is strong if and only if it has a Hamilton closed walk.
1.48. (−) Prove that every strong digraph H has an extension D = H[Kn1 , . . . , Knh ], h = |V (H)|, such that D is hamiltonian. Hint: consider a hamiltonian closed walk in H.

42 1. Basic Terminology, Notation and Results
1.49. A transitive triple in a digraph D is a set of three vertices x, y, z such that xy, xz and yz are arcs of D. Prove that, if a 2-strong digraph D contains a transitive triple, then D has two cycles whose length diﬀer by one.
1.50. List all the acyclic orders of the digraph SC(D) in Figure 1.12.
1.51. (−) Hamiltonian extensions of cycles. Characterize extensions of cycles which are hamiltonian.
1.52. Let D = Cr[Kn1 , . . . , Knr ] be an extension of a cycle. Prove that κ(D) = min{ni : i = 1, 2, . . . , r}.
1.53. (+) Traceable semicomplete bipartite digraph characterization. Prove that a semicomplete bipartite digraph B is traceable if and only if it contains a 1-path-cycle factor F. Hint: demonstrate that, if F consists of a path and a cycle only, then B is traceable; use it to establish the desired result (Gutin [355]). (See also Chapter 5.)
1.54. (+) Let B be a strong semicomplete bipartite digraph containing a cycle factor consisting of two cycles. Prove that B is hamiltonian (Gutin [353]).
1.55. (+) Hamiltonian semicomplete bipartite digraph characterization. Using the result of Exercise 1.54 prove that a semicomplete bipartite digraph B is hamiltonian if and only if B is strong and B contains a cycle factor (Gutin [353]). (See also Chapter 5.)
1.56. (−) Show that every orientation of a quasi-transitive digraph is a quasitransitive digraph.
1.57. Prove that every strong quasi-transitive digraph of order n ≥ 3 has a strong orientation, and so does every strong semicomplete bipartite digraph with every partite set of cardinality at least 2. Hint: use Corollary 1.7.2.
1.58. (−) Prove that, if a bipartite tournament has a cycle then it has a 4-cycle.
1.59. (−) Describe an inﬁnite family of strong bipartite tournaments without a 6-cycle.
1.60. Characterize 2-connected undirected graphs for which every cycle has odd length.
1.61. (−) Show that for every undirected graph G on n vertices we have χ(G) ≥ n/α(G) .
1.62. Show that a digraph D has a cycle factor if and only if its bipartite representation BG(D) contains a perfect matching.
1.63. Describe an inﬁnite family of strong multipartite tournaments, each of which have a cycle factor but is not hamiltonian.
1.64. Describe an inﬁnite family of strong quasi-transitive digraphs, each of which have a cycle factor but is not hamiltonian.
1.65. Give a characterization of hamiltonian complete 3-partite undirected graphs.
1.66. Give an inﬁnite class of strong extended tournaments, none of which is hamiltonian.

1.11 Exercises

43

1.67. 4-kings in bipartite tournaments. A vertex v in a digraph D is a k-king, if for every u ∈ V (D) − {v} there is a (v, u)-path of length at most k. Prove that a vertex of maximum out-degree in a strong bipartite tournament is a 4-king. For all s, t ≥ 4 construct strong bipartite tournaments with partite sets of cardinality s and t which do not have 3-kings. (Gutin [356])
1.68. (+) A special case of the maximum independent set problem. The maximum independent set problem is as follows. Given an undirected graph G, ﬁnd an independent set of maximum cardinality in G. The purpose of this exercise is to show that a special case of the maximum independent set problem is equivalent to the 2-satisﬁability problem and hence can be solved using any algorithm for 2-SAT.
(a) Let G = (V, E) be a graph on 2k vertices and suppose that G has a perfect matching (i.e. a collection e1, . . . , ek of edges with no common end-vertex). Construct an instance F of 2-SAT which is satisﬁable if and only if G has an independent set of k vertices. Hint: ﬁx a perfect matching M of G and let each edge in M correspond to a variable and its negation.
(b) Prove the converse, namely if F is any instance of 2-satisﬁability, then there exists a graph G = (V, E) with a perfect matching such that G has an independent set of size |V (G)|/2 if and only if F is satisﬁable.
(c) Prove that it is N P-complete to decide if a given graph has an independent set of size at least , even if G has a perfect matching. Hint: use a reduction from MAX-2-SAT.
1.69. Linear time algorithm for ﬁnding an acyclic ordering of an acyclic digraph. Verify that the algorithm given in the proof of Proposition 1.4.3 can be implemented as an O(n + m) algorithm using the adjacency list representation.
1.70. Show how to extend the algorithm MergeHamPathTour (see Subsection 1.9.1) so that it works for tournaments with an arbitrary number of vertices.
1.71. Based on the proof of Theorem 1.5.1, give a polynomial algorithm to ﬁnd cycles of lengths 3, 4, . . . , n through a given vertex in a strong tournament T . What is the complexity of your algorithm and how do you store information about T and the cycles you ﬁnd?
1.72. (+) Fast algorithm for Euler trails. Demonstrate how to implement the algorithm in the proof of Theorem 1.6.3 as an O(n + m) algorithm. Hint: use adjacency lists along with a suitable data structure to store the trail constructed so far.
1.73. Suppose S, T , K are decision problems such that S ≤P T and T ≤P K. Prove that S ≤P K.
1.74. The independent set problem is as follows: Given a graph G = (V, E) and natural number k, decide whether G has an independent set of size at least k. Show that the independent set problem belongs to the complexity class N P.
1.75. Suppose W is an N P-complete problem and that T is a decision problem such that W ≤P T . Prove that T is N P-hard.
1.76. Finding a cycle of maximum weight in a digraph. Show that it is an N P-hard problem to ﬁnd a cycle of maximum weight in a digraph with

44 1. Basic Terminology, Notation and Results
weights on its arcs. Hint: show how to reduce the Hamilton cycle problem to this problem by a polynomial reduction.
1.77. The acyclic subdigraph problem. Let S be the following decision problem. Given a digraph D and a natural number k, does D contain an induced acyclic subdigraph on at least k vertices? Show that the independent set problem polynomially reduces to S (the independent set problem is: given a graph G and a number k, does G contain an independent set of size at least k?).
1.78. Show that if a decision problem S belongs to the complexity class P then it also belongs to N P.
1.79. Show that P ⊆ N P ∩ co−N P.
1.80. Show that if there is some decision problem S which belongs to both of the classes P and N PC, then P = N P.
1.81. (+) Reducing the Hamilton cycle problem to Satisﬁability. Describe a polynomial reduction from the Hamilton cycle problem to the Satisﬁability problem. Hint: model diﬀerent attributes by diﬀerent sets of clauses. For example you should use one family of clauses to ensure that every vertex is the tail of at least one arc.
1.82. Describe a polynomial reduction from the problem of deciding whether an undirected graph has a matching of size k to the problem MAX-2-SAT.
1.83. Finding a 1-maximal cycle. A cycle C in a digraph D is 1-maximal if D has no cycle C such that C − a is a subpath of C for some arc a of C. Describe a polynomial algorithm for ﬁnding a 1-maximal cycle in a strong digraph. What is the complexity of your algorithm? Hint: compare it with the proof of Theorem 1.5.1.
1.84. Describe a linear time algorithm to check whether a given acyclic digraph has more than one acyclic ordering. Hint: use the result of Exercise 1.18.
1.85. Transitive subtournaments in tournaments. Show that every tournament on 8 vertices contains a transitive tournament on 4 vertices (as an induced subdigraph). Hint: start from a vertex of maximum out-degree. Use the idea above to prove that every tournament on n vertices contains a transitive tournament of size Ω(log n).

2. Distances
In this chapter, we study polynomial algorithms which ﬁnd distances in weighted and unweighted digraphs as well as some related complexity results. We consider bounds on certain distance parameters of a digraph and describe several results on minimizing (and maximizing) the diameter of an orientation of a graph. We study some applications of distances in digraphs to the travelling salesman problem, the one-way street problem and the gossip problem.
Additional terminology and notation are given in Section 2.1. Some basic results on the structure of shortest paths in weighted digraphs are proved in Section 2.2. In Section 2.3 we study algorithms to ﬁnd shortest paths from a vertex to the rest of the vertices of weighted and unweighted digraphs. We also consider the Floyd-Warshall algorithm to compute distances between all pairs of vertices in a weighted digraph. In Section 2.4 we consider bounds on the following parameters: out-radius, in-radius, radius and diameter of a digraph. The problem of maximizing the diameter of a strong orientation of a bridgeless graph is investigated in Section 2.5. The problem of minimizing the diameter of an orientation of a bridgeless graph, which has applications to the one-way street problem and the gossip problem, is studied extensively in Sections 2.6, 2.7, 2.8 and 2.9. Notice that while both the problem of ﬁnding an orientation of minimum diameter and the problem of ﬁnding an orientation of maximum diameter are N P-hard, the former is much more complicated from a graph theoretical point of view than the latter.
So-called kings in various classes of digraphs are investigated in Section 2.10. The notion of a king is related to the study of domination in biology and sociology. The last two sections are devoted to applications of distances in digraphs. In Section 2.11 we discuss the one-way street problem and the gossip problem as well as their natural extensions to digraphs. Some recent results on the topics are described. In particular, we state theorems on sharp upper bounds of the minimum diameter orientations of quasi-transitive and semicomplete bipartite digraphs. In Section 2.12 we consider a new approach to compute near optimal solutions to the travelling salesman problem, the exponential neighbourhood local search (ENLS). We show how to utilize the notions and results on distances in the study of ENLS.

46 2. Distances

2.1 Terminology and Notation on Distances

Let D = (V, A) be a directed pseudo-graph. Recall that, for a set W ⊆ V ,

ND+(W ) =

N +(w) − W, ND−(W ) =

N −(w) − W.

w∈W

w∈W

Let ND0 (W ) = W , ND+1(W ) = ND+(W ), ND−1(W ) = ND−(W ). For every positive integer p, we can deﬁne the pth out-neighbourhood of W as follows:

p−1
ND+p(W ) = ND+(ND+(p−1)(W )) − ND+i(W ).
i=0

Similarly, one ticular, N +2(W )

can deﬁne ND−p(W = N +(N +(W )) −

) for every positive integer p. In par(W ∪ N +(W )). Sometimes, ND+p(W )

(ND−p(W )) is called the open pth out-neighbourhood (open pth in-

neighbourhood) of W . We will also use the closed pth in- and out-

neighbourhoods of a set W of vertices of D which are deﬁned as follows

(p > 0):

pp
ND0 [W ] = W, ND+p[W ] = ND+i(W ), ND−p[W ] = ND−i(W ).
i=0 i=0

To simplify the notation, we set ND+[W ] = ND+1[W ] and ND−[W ] = ND−1[W ]. See Figure 2.1.

ab

g fc

ed
Figure 2.1 A digraph D. The out-neighbourhoods of the set W = {a, b} are N +({a, b}) = {f, g}, N +2({a, b}) = {e}, N +3({a, b}) = {d}, N +4({a, b}) = {c}. The closed out-neighbourhoods of W = {a, b} are N +[{a, b}] = {a, b, f, g}, N +2[{a, b}] = {a, b, e, f, g}, N +3[{a, b}] = {a, b, d, e, f, g}, N +4[{a, b}] = {a, b, c, d, e, f, g}.
Let D = (V, A, c) be a directed multigraph with a weight function c : A→R on its arcs. Recall that the weight of a subdigraph D = (V, A ) of D is given by c(A ) = a∈A c(a). Whenever we speak about the length of a walk we mean the weight of that walk (with respect to c). A negative cycle in a weighted digraph D = (V, A, c) is a cycle W whose weight c(W ) is negative.

2.1 Terminology and Notation on Distances

47

We assume that D has no negative cycle, for otherwise the following deﬁnition becomes meaningless. If x and y are vertices of D then the distance from x to y in D, denoted dist(x, y), is the minimum length of a (x, y)-walk, if y is reachable from x, and otherwise dist(x, y) = ∞. Since D has no cycle of negative weight, it follows that dist(x, x) = 0 for every vertex x ∈ V . It follows from Proposition 1.4.1 that there is a shortest (x, y)-walk which is, in fact, a path (if D has no cycle of zero weight either, a shortest walk is always a path). Furthermore, by Proposition 1.4.1, the distance function satisﬁes the triangle inequality:

dist(x, z) ≤ dist(x, y) + dist(y, z) for every triple of vertices x, y, z. (2.1)

The above deﬁnitions are applicable to unweighted directed multigraphs as well: simply take the weight of every arc equal to one (then, the length of a walk in the ‘weighted’ and ‘unweighted’ cases coincide).
The distance from a set X to a set Y of vertices in D is

dist(X, Y ) = max{dist(x, y) : x ∈ X, y ∈ Y }1.

(2.2)

The diameter of D is diam(D) = dist(V, V ). Clearly, D has ﬁnite diameter if and only if D is strong. The out-radius rad+(D) and the in-radius rad−(D) of D are deﬁned by rad+(D) = min{dist(x, V ) : x ∈ V }, rad−(D) = min{dist(V, x) : x ∈ V }.

Because of the obvious duality between out-radius and in-radius, in many cases, we will consider only one of them. The radius of D is

rad(D) = min{(dist(x, V ) + dist(V, x))/2 : x ∈ V }.

To illustrate the deﬁnitions above, consider the digraph D in Figure 2.1. Here we have dist(a, V ) = dist(b, V ) = dist(e, V ) = 4 and dist(c, V ) = dist(d, V ) = dist(f, V ) = dist(g, V ) = 3. Furthermore, we have dist(V, c) = dist(V, f ) = 4, dist(V, a) = dist(V, b) = dist(V, d) = 3 and dist(V, e) = dist(V, g) = 2. Now we see that rad+(D) = 3, rad−(D) = 2, rad(D) = 2.5 and diam(D) = 4. It is also easy to see that dist({a, c}, {b, f }) = 3.
The following proposition gives a characterization of weighted digraphs D of ﬁnite out-radius.
Proposition 2.1.1 A weighted digraph D has a ﬁnite out-radius if and only if D has a unique initial strong component.
Proof: A digraph with two or more initial strong components is obviously of inﬁnite out-radius. If D has only one initial strong component, then D contains an out-branching (by Proposition 1.6.1). Thus, rad+(D) < ∞.
1 This deﬁnition may seem somewhat unnatural (with max instead of min), but it simpliﬁes some of the notation in this chapter and also appears quite useful.

48 2. Distances
This proposition implies that a weighted digraph D has a ﬁnite in-radius if and only if D has a unique terminal strong component. Notice that rad(D) < ∞ if and only if D is strong.
For an undirected graph G, we can introduce the notions of distance
↔
between pairs of vertices, vertex sets, radius, etc. by considering G. For an integer r, a vertex v is an r-king if dist(v, V ) ≤ r. For example, the vertex c in Figure 2.1 is a 3-king.
2.2 Structure of Shortest Paths
In this section we study elementary, but very important properties of shortest paths in weighted digraphs. We also consider some complexity results on paths in directed and mixed weighted graphs.
We assume that D = (V, A, c) is a weighted digraph with no negative cycle.
Proposition 2.2.1 If P = x1x2 . . . xk is a shortest (x1, xk)-path in D, then P [xi, xj] is a shortest (xi, xj)-path for all 1 ≤ i ≤ j ≤ k.
Proof: Suppose that xiQxj is an (xi, xj)-path whose length is smaller than that of P [xi, xj]. Then the weight of the walk W = P [x1, xi]QP [xj, xk] is less than the length of P . However, by Proposition 1.4.1, and the fact that D has no negative cycle, W contains an (xi, xj)-path R whose length is at most that of W and hence is smaller than that of P , a contradiction.
Let s be a ﬁxed vertex of D such that dist(s, V ) < ∞. Consider spanning subdigraphs of D, each of which contains a shortest path from s to every other vertex in D. The proof of the following theorem shows that given any such subdigraph D of D, we can construct an out-branching of D rooted at s, which contains a shortest (s, u)-path for every u ∈ V − s.
Theorem 2.2.2 Let D and s be as above. There exists an out-branching Fs+ such that, for every u ∈ V , the unique (s, u)-path in Fs+ is a shortest (s, u)-path in D.
Proof: We will give a constructive proof showing how to build Fs+ from any collection {Pv : v ∈ V −s} of shortest paths from s to the rest of the vertices.
Choose a vertex u ∈ V − s arbitrarily. Let initially Fs+ := Pu. By Proposition 2.2.1, for every x ∈ V (Fs+), the unique (s, x)-path in Fs+ is a shortest (s, x)-path in D. Hence, if V (Fs+) = V , then we are done. Thus, we may assume that there exists w ∈/ V (Fs+). Let z be the last vertex on Pw which belongs to Fs+. Deﬁne H as follows:
V (H) := V (Fs+) ∪ V (Pw[z, w]), A(H) := A(Fs+) ∪ A(Pw[z, w]).

2.2 Structure of Shortest Paths

49

We claim that, for every vertex x in Pw[z, w], the unique (s, x)-path in H is a shortest (s, x)-path in D. By Proposition 2.2.1, Pw[s, z] is a shortest (s, z)-path in D. Since z ∈ V (Fs+), the unique (s, z)-path Q in H has the same length as Pw[s, z]. Therefore, the length of the path QPw[z, x] is equal to the length of the path Pw[s, x]. Now observe that QPw[z, x] is the unique (s, x)-path in H. We set Fs+ := H and use an analogous approach to include all vertices of D and preserve the desired property of Fs+.
Our constructive proof above implies the existence of a polynomial algorithm to construct the ﬁnal out-branching, starting from a collection of shortest paths from s to all other vertices. We call such an out-branching a shortest path tree from s. As we will see in Exercises 2.8 and 2.9, the algorithms described in the next section can be easily modiﬁed so that they construct a shortest path tree directly, while searching for the shortest paths.
If we allow D to have negative weight cycles, then we obtain the following result for shortest paths (recall that in the presence of negative cycles the length of a shortest walk may not be deﬁned, whereas the length of a shortest path is still well-deﬁned).
Proposition 2.2.3 It is N P-hard to ﬁnd a shortest path between a pair of vertices of a given weighted digraph.
Proof: Let D = (V, A) be an (unweighted) digraph and let x = y be vertices of D. Set c(uv) = −1 for every arc uv ∈ A. We have obtained a weighted digraph D = (V, A, c). Clearly, D has an (x, y)-path of length 1 − n if and only if D has a hamiltonian (x, y)-path. Since the problem of ﬁnding a hamiltonian (x, y)-path is N P-complete (see Exercise 6.3) and D can be constructed from D in polynomial time, our claim follows.
Clearly D above has a negative cycle if and only if D has any directed cycle. As we will show in Subsection 2.3.2, we can ﬁnd a longest path in an acyclic digraph in polynomial time, using a reduction to the shortest path problem.
In Section 2.3, we will see that one can check whether a weighted digraph has a negative cycle in polynomial time. However, unless P = N P, this result cannot be extended to weighted mixed graphs, because of the following theorem by Arkin and Papadimitriou [28].
Theorem 2.2.4 Given a weighted mixed graph, it is N P-complete to determine whether a negative cycle exists.
It follows from Proposition 2.2.3 that it is N P-hard to ﬁnd a shortest path between a pair of vertices in a weighted mixed graph. More interestingly, Arkin and Papadimitriou showed that the same is true even if we restrict ourselves to weighted mixed graphs without negative cycles [28].

50 2. Distances
2.3 Algorithms for Finding Distances in Digraphs
In this section we describe well-known algorithms to ﬁnd distances in weighted and unweighted digraphs. Almost all algorithms which we describe are for ﬁnding the distances from a ﬁxed vertex of a digraph to the rest of the vertices. If the given digraph is unweighted then one can use the very simple and fast breadth-ﬁrst search algorithm, that is introduced in Subsection 2.3.1. If the given digraph D is weighted and acyclic, another fast and simple approach based on dynamic programming is provided in Subsection 2.3.2. When D is an arbitrary digraph, but its weights are non-negative, Dijkstra’s algorithm introduced in Subsection 2.3.3 solves the problem. When the weights may be negative, but no negative cycle is allowed, the Bellman-Ford-Moore algorithm given in Subsection 2.3.4 can be applied. This algorithm has the following additional useful property: it can be used to detect a negative cycle (if one exists).
If we are interested in ﬁnding the distances between all pairs of vertices of a weighted digraph D, we can apply the Bellman-Ford-Moore algorithm from every vertex of D. However, there is a much faster algorithm, due to Floyd and Warshall. We describe the Floyd-Warshall algorithm in Subsection 2.3.5. The reader can ﬁnd comprehensive overviews of theoretical and practical issues on the topic in the papers [153] by Cherkassky and Goldberg and [154] by Cherkassky, Goldberg and Radzik.
2.3.1 Breadth-First Search (BFS)
This approach allows one to ﬁnd quickly the distances from a given vertex s to the rest of the vertices in an unweighted digraph D = (V, A). BFS is based on the following simple idea. Starting at s, we visit each vertex x dominated by s. We set dist (s, x) := 1 and s := pred(x) (s is the predecessor of x). Now we visit all vertices y not yet visited and dominated by vertices x of distance 1 from s. We set dist (s, y) := 2 and x := pred(y). We continue in this fashion until we have reached all vertices which are reachable from s (this will happen after at most n − 1 iterations, by Proposition 1.4.1). For the rest of the vertices z (not reachable from s), we set dist (s, z) := ∞. In other words, we visit the ﬁrst (open) out-neighbourhood of s, then its second (open) out-neighbourhood, etc. A more formal description of BFS is as follows. At the end of the algorithm, pred(v) = nil means that either v = s or v is not reachable from s. The correctness of the algorithm is due to the fact that dist(s, x) = dist (s, x) for every x ∈ V . This will be proved below.
BFS Input: A digraph D = (V, A) and a vertex s ∈ V. Output: dist (s, v) and pred(v) for all v ∈ V.
1. For each v ∈ V set dist (s, v) := ∞ and pred(v) := nil.

2.3 Algorithms for Finding Distances in Digraphs

51

2. Set dist (s, s) := 0. Create a queue Q consisting of s. 3. While Q is not empty do the following. Delete a vertex u, the head of Q,
from Q and consider the out-neighbours of u in D one by one. If, for an out-neighbour v of u, dist (s, v) = ∞, then set dist (s, v) := dist (s, u)+1, pred(v) := u, and put v to the end of Q.
If D is represented by adjacency lists, the complexity of the above algorithm is O(n + m). Indeed, Step 1 requires O(n) time. The time to perform Step 3 is O(m) as the out-neighbours of every vertex are considered only once and x∈V d+(x) = m, by Proposition 1.2.1.
To prove the correctness of BFS, it suﬃces to prove that dist(s, x) = dist (s, x) for every x ∈ V. By Steps 2 and 3 of the algorithm, dist(s, x) ≤ dist (s, x). Indeed, v1v2 . . . vk, where v1 = s, vk = x and vi = pred(vi+1) for every i = 1, 2, . . . , k −1, is an (s, x)-path. By induction on dist(s, x), we prove that, in fact, the equality holds. If dist(s, x) = 0, then x = s and the result follows. Suppose that dist(s, x) = k > 0 and consider a shortest (s, x)-path P . Let y be the predecessor of x, i.e., y = x−P . By the induction hypothesis, dist (s, y) = dist(s, y) = k − 1. Since x is dominated by y , by the algorithm, dist (s, x) ≤ dist (s, y) + 1 = k = dist(s, x). Combining dist(s, x) ≤ dist (s, x) with dist (s, x) ≤ dist(s, x), we are done.
The BFS algorithm allows one to compute the radius, out-radius, inradius and diameter of a digraph in time O(n2 + nm). Using the array pred one can generate the actual paths. We ﬁnish this section with the following two important observations which are stated as propositions. Proposition 2.3.1 follows from the description of BFS. Proposition 2.3.2 has been already proved. In both propositions D = (V, A) is a directed multigraph with a speciﬁed vertex s.
Proposition 2.3.1 Let U be the set of vertices reachable from s. Then (U, B), where B = {(pred(v), v) : v ∈ U − s} is an out-branching in D U with root s.
We call the out-branching in the above proposition a BFS tree of D U with root s, or simply a BFS tree from s. It is instructive to compare Proposition 2.3.1 with Theorem 2.2.2.
Proposition 2.3.2 Let dist(s, V ) < ∞. For every non-negative integer p ≤ dist(s, V ), we have N +p(s) = {v ∈ V : dist(s, v) = p}.
Given an directed multigraph D = (V, A) and a vertex s we call sets
N 0(s), N +(s), N +2(s), N +3(s), . . . ,
the distance classes from s. By the proposition above, N +i(s) consists precisely of those vertices whose distance from s is i. See Figure 2.2 for an illustration of a BFS tree and the corresponding distance classes.
Summarizing the discussion above we obtain the following.

52 2. Distances
Theorem 2.3.3 When applied to a directed multigraph D and a vertex s in D, the BFS algorithm correctly determines a BFS tree T from s in D in time O(n + m). Furthermore, the distance classes from s in D are the same as the distance classes from s in T .
u vy

s

wx

z

Figure 2.2 A digraph D with a BFS tree indicated by the bold arcs. The distance classes from s are N 0(s) = s, N +(s) = {u, w}, N +2(s) = {v, x, y} and N +3(s) = {z}.

2.3.2 Acyclic Digraphs

Let D = (V, A, c) be an acyclic weighted digraph. We will show that the
distances from a vertex s to the rest of the vertices can be found quite easily,
using dynamic programming. Without loss of generality, we may assume that
the in-degree of s is zero. Let L = v1, v2, . . . , vn be an acyclic ordering of the vertices of D such that v1 = s. Clearly, dist(s, v1) = 0. For every i, 2 ≤ i ≤ n, we have

dist(s, vi) =

min{dist(s, vj) + c(vj, vi) : vj ∈ N −(vi)} if N −(vi) = ∅ ∞ otherwise.

(2.3)

The correctness of this formula can be shown by the following argument.

We may assume that vi is reachable from s. Since the ordering L is acyclic, the vertices of a shortest path P from s to vi belong to {v1, v2, . . . , vi}. Let vk be the vertex dominating vi in P . By induction, dist(s, vk) is computed correctly using (2.3). The term dist(s, vk) + c(vk, vi) is one of the terms in the right-hand side of (2.3). Clearly, it provides the minimum.

The algorithm has two phases: the ﬁrst ﬁnds an acyclic ordering, the

second implements Formula (2.3). The complexity of this algorithm is O(n +

m) since the ﬁrst phase runs in time O(n+m) (see Section 4.1) and the second

phase requires the same asymptotic time due to the formula x∈V d−(x) = m in Proposition 1.2.1. Hence we have shown the following.

Theorem 2.3.4 The shortest paths from a ﬁxed vertex s to all other vertices can be found in time O(n + m) for acyclic digraphs.

2.3 Algorithms for Finding Distances in Digraphs

53

We can also ﬁnd the length of longest (s, x)-paths in linear time in any acyclic digraph, by replacing the weight c(uv) of every arc uv with −c(uv). In particular, we can see immediately that the longest path problem for acyclic digraphs is solvable in polynomial time. In fact, a longest path of an acyclic digraph can always be found in linear time:
Theorem 2.3.5 For acyclic digraphs a longest path can be found in time O(n + m).
Proof: Exercise 2.6.

2.3.3 Dijkstra’s Algorithm
The next algorithm, due to Dijkstra [192], ﬁnds the distances from a given vertex s in a weighted digraph D = (V, A, c) to the rest of the vertices, provided that all the weights of arcs are non-negative.
In the course of the execution of Dijkstra’s algorithm, the vertex set of D is partitioned into two sets, P and Q. Moreover, a parameter δv is assigned to every vertex v ∈ V . Initially all vertices are in Q. In the process of the algorithm, the vertices reachable from s move from Q to P . While a vertex v is in Q, the corresponding parameter δv is an upper bound on dist(s, v). Once v moves to P , we have δv = dist(s, v). A formal description of Dijkstra’s algorithm follows. Dijkstra’s algorithm Input: A weighted digraph D = (V, A, c), such that c(a) ≥ 0 for every a ∈ A, and a vertex s ∈ V. Output: The parameter δv for every v ∈ V such that δv = dist(s, v).
1. Set P := ∅, Q := V , δs := 0 and δv := ∞ for every v ∈ V − s. 2. While Q is not empty do the following.
Find a vertex v ∈ Q such that δv = min{δu : u ∈ Q}. Set Q := Q − v, P := P ∪ v. δu := min{δu, δv + c(v, u)} for every u ∈ Q ∩ N +(v).
To prove the correctness of Dijkstra’s algorithm, it suﬃces to show that the following proposition holds.
Proposition 2.3.6 At any time during the execution of the algorithm, we have that
(a) For every v ∈ P , δv = dist(s, v). (b) For every u ∈ Q, δu is the distance from s to u in the subdigraph of D
induced by P ∪ u.

54 2. Distances
Proof: When P = ∅, δs = dist(s, s) = 0 and the estimates δu = ∞, u ∈ V −s, are also correct.
Assume that P = P0 and Q = Q0 are such that the statement of this proposition holds. If Q0 = ∅, we are done. Otherwise, let v be the next vertex chosen by the algorithm. Since Part (b) follows from Part (a) and the way in which we update δu in the algorithm, it suﬃces to prove Part (a) only. Suppose that (a) does not hold for P = P0 ∪ v. This means that δv > dist(s, v). Let W be a shortest (s, v)-path in D. Since δv > dist(s, v), W must contain at least one vertex from Q = Q0 − v. Let u be the ﬁrst vertex on W which is not in P0. Clearly, u = v. By Proposition 2.2.1 and the fact that u ∈ W , we have dist(s, u) ≤ dist(s, v). Furthermore, since the statement of this proposition holds for P0 and Q0, we obtain that dist(s, u) = δu. This implies that δu = dist(s, u) ≤ dist(s, v) < δv. In particular, δu < δv, which contradicts the choice of v by the algorithm.
Each time a new vertex v is to be chosen we use O(n) comparisons to ﬁnd min{δu : u ∈ Q}. Updating the parameters takes O(n) time as well. Since Step 2 is performed n−1 times, we conclude that the complexity of Dijkstra’s algorithm is O(n2). In fact, Dijkstra’s algorithm can be implemented (using so-called Fibonacci heaps) in time O(n log n + m) (see the paper [278] by Fredman and Tarjan).
Summarizing the discussion above we obtain
Theorem 2.3.7 Dijkstra’s algorithm determines the distances from s to all other vertices in time O(n log n + m).
Figure 2.3 illustrates Dijkstra’s algorithm. It is a challenging open question whether there exists a linear algorithm for calculating the distances from one vertex to all other vertices in a given digraph with no negative cycles. It is easy to see that Dijkstra’s algorithm sorts the vertices according to their distances from s. Fredman and Tarjan [278] showed that, if Dijkstra’s algorithm can be implemented as a linear time algorithm, then one can sort numbers in linear time. Thorup [715] showed that the opposite claim holds as well: if one can sort numbers in linear time, then Dijkstra’s algorithm can be implemented as a linear time algorithm. Currently, no one knows how to sort in linear time2. In the case when D is the complete biorientation of an undirected graph G and c(u, v) = c(v, u) holds for every arc uv of D, Thorup [716] recently gave a linear algorithm for calculating shortest paths from a ﬁxed vertex to all other vertices. Thorup’s algorithm avoids the sorting bottleneck by building a hierarchical bucketing structure, identifying vertex pairs that may be visited in any order.
2 Some readers may be confused about this as they may know of a lower bound of Ω(n log n) for sorting a set of n numbers. However, this lower bound is only valid for comparison based sorting. There are algorithms for sorting n numbers that are faster than Ω(n log n), see e.g. the paper [25] by Anderson.

2.3 Algorithms for Finding Distances in Digraphs

55

0 s

∞ 2
9

2 3

6 1

∞ 1
22 7

∞

∞∞ 2

(a)

0 s

92

∞

9

1

2 3

62 1

2 7

3 2∞

∞

(b)

0 s

52

∞

9

1

2 3

62 1

2 7

3 24

∞

(c)

0 s

52

6

9

1

2 3

62 1

2 7

11

34 2

(d)

0 s

52

6

9

1

2 3

6 1

2

2 7

11

3

4 2

(e)

0 s

52

6

9

2 3

62 1

1
2 7

34 2
(f )

7

0 s

52

6

9

2 3

62 1

1
2 7

7

3

4 2

(g)

Figure 2.3 Execution of Dijkstra’s algorithm. The white vertices are in Q; the black vertices are in P. The number above each vertex is the current value of the parameter δ. (a) The situation after performing the ﬁrst step of the algorithm. (b)– (g) The situation after each successive iteration of the loop in the second step of the algorithm. The fat arcs indicate the corresponding shortest path tree found by the algorithm if extended as in Exercise 2.8.

2.3.4 The Bellman-Ford-Moore Algorithm
This algorithm originates from the papers [102] by Bellman, [245] by Ford and [572] by Moore. Let D = (V, A, c) be a weighted digraph, possibly with arcs of negative weight. The algorithm described below can be applied to ﬁnd the distances from a given vertex s in D to the rest of the vertices, provided D has no negative cycle.

56 2. Distances
Let δ(v, m) be the length of a shortest (s, v)-path that has at most m arcs. Clearly, δ(s, 0) = 0 and δ(v, 0) = ∞ for every v ∈ V − s. Let v ∈ V . We prove that for every m ≥ 0,
δ(v, m + 1) = min{δ(v, m), min{δ(u, m) + c(u, v) : u ∈ N −(v)}}. (2.4)
We show (2.4) by induction on m. For m = 0, (2.4) trivially holds. For m ≥ 1, (2.4) is valid due to the following argument. Assume that there is a shortest (s, v)-path P with no more than m + 1 arcs. If P has at most m arcs, its length is δ(v, m), otherwise P contains m + 1 arcs and, by Proposition 2.2.1, consists of a shortest (s, u)-path with m arcs and the arc uv for some u ∈ N −(v). If every shortest (s, v)-path has more than m + 1 arcs, then there is no in-neighbour u of v such that δ(u, m) < ∞. Therefore, Formula (2.4) implies correctly that δ(v, m + 1) = ∞.
Since no path has more than n − 1 arcs, δ(v, n − 1) = dist(s, v) for every v ∈ V − s. Thus, using (2.4) for m = 0, 1, . . . , n − 2, we obtain the distances from s to the vertices of D. This results in the following algorithm.
The Bellman-Ford-Moore algorithm Input: A weighted digraph D = (V, A, c) with no negative cycle, and a ﬁxed vertex s ∈ V. Output: The parameter δv for every v ∈ V such that δv = dist(s, v) for all v ∈ V.
1. Set δs := 0 and δv := ∞ for every v ∈ V − s. 2. For i = 1 to n − 1 do: for each vu ∈ A update the parameter δu by setting
δu := min{δu, δv + c(v, u)}.
It is easy to verify that the complexity of this algorithm is O(nm). Hence we have
Theorem 2.3.8 When applied to a weighted directed graph D = (V, A, c) with no negative cycle and a ﬁxed vertex s ∈ V , the Bellman-Ford-Moore algorithm correctly determines the distances from s to all other vertices in D in time O(nm).
Figure 2.4 illustrates the execution of the Bellman-Ford-Moore algorithm. Checking whether D has no negative cycle can be accomplished as follows. Let us assume that D is strong (otherwise, we will consider the strong components of D one by one; an eﬀective algorithm to build the strong components is described in Chapter 4). Let us append the following additional step to the above algorithm:
3. For every arc vu ∈ A do: if δu > δv + c(vu) then return the message ‘the digraph contains a negative cycle’.

2.3 Algorithms for Finding Distances in Digraphs

0 s

8 4

e 2
−5 -2
4 d

c -2
5
10 9
-3 a

b

57

0 s

8 4

∞ 2

∞

-5 -2 10

4 ∞

∞

(a)

-2 5
9 -3

∞

0 s

8 4

8 2
-5 -2

2 10

-2 5
9

4 3
(c)

8

-3

∞

0 s

8 4

8 2

∞

-5 -2 10

-2 5
9

4 4

∞

-3

(b)

∞

0 s

8 4

8 2

1

-5 -2 10

-2 5
9

4 37

-3

(d)

0

0 s

8 4

8 2

1

-5 -2 10

4 3 -3
(e)

-2 5
9 -3

-1

0 s

8 4

8 2
-5 -2

1 10

-2 5
9

4 3 -4

-3

(f )

-1

Figure 2.4 Execution of the Bellman-Ford-Moore algorithm. The vertex labellings and arc weights are given in the ﬁrst digraph. The values of the parameter δ are given near the vertices of the digraphs (a)–(f). In the inner loop of the second step of the algorithm the arcs are considered in the lexicographic order: ab, ac, ba, bc, cb, da, dc, ec, ed, sd, se. (a) The situation after performing the ﬁrst step of the algorithm. (b)–(f) The situation after each of the 5 successive executions of the inner loop in the second step of the algorithm.

Theorem 2.3.9 A strong weighted digraph D has a negative cycle if and only if Step 3 returns its message.
Proof: Suppose that D has no negative cycle. By the description of Step 2 and Proposition 2.2.1, δu ≤ δv + c(vu) for every arc vu ∈ A. Hence, the message will not be returned.
Assume that D has a negative cycle Z = v1v2 . . . vkv1. Assume for the purpose of contradiction that Step 3 of the Bellman-Ford-Moore algorithm

58 2. Distances

does not return the message. Thus, in particular, δvi ≤ δvi−1 + c(vi−1vi) for every i = 1, 2, . . . , k, where v0 = vk. Hence,

kk

k

δvi ≤

δvi−1 +

c(vi−1vi).

i=1 i=1

i=1

Since the ﬁrst two sums in the last inequality are equal, we obtain 0 ≤

k i=1

c(vi−1vi)

=

c(Z );

a

contradiction.

2.3.5 The Floyd-Warshall Algorithm

The above algorithms can be run from all vertices to ﬁnd all pairwise distances between the vertices of a strong digraph D. However, if D has negative weight arcs, but does not contain a negative cycle, we may only use the Bellman-Ford-Moore algorithm n times, which will result in O(n2m) time
(see Exercise 2.19 for a faster method). The Floyd-Warshall algorithm will ﬁnd the required distances faster, in O(n3) time. According to Skiena [674], in practice, the algorithm even outperforms Dijkstra’s algorithm applied from n vertices (when the weights in D are all non-negative) due to the simplicity of its code (and, thus, smaller hidden constants in the time complexity). The
algorithm originates from the papers [243] by Floyd and [734] by Warshall. We assume that we are given a strong weighted digraph D = (V, A, c) that has no negative cycle. In this subsection, it is convenient to assume that V = {1, 2, . . . , n}.
Denote by δimj the length of a shortest (i, j)-path in D {1, 2, . . . , m − 1} ∪ {i, j} , for all 1 ≤ m ≤ n − 1. In particular, δi1j is the length of the path ij, if it exists. Observe that a shortest (i, j)-path in D {1, 2, . . . , m} ∪ {i, j} either does not include the vertex m, in which case δimj +1 = δimj , or does include it, in which case δimj +1 = δimm + δmmj. Therefore,

δimj +1 = min{δimj , δimm + δmmj }.

(2.5)

Observe that δimi = 0 for all i = 1, 2, . . . , n, and, furthermore, for all pairs i, j such that i = j, δi1j = c(i, j) if ij ∈ A and δi1j = ∞, otherwise. Formula (2.5) is also correct when there is no (i, j)-path in D {1, 2, . . . , m} ∪ {i, j} . Clearly, δinj+1 is the length of a shortest (i, j)-path (in D). It is also easy to verify that O(n3) operations are required to compute δinj+1 for all pairs i, j.
The above assertions can readily be implemented as a formal algorithm (the Floyd-Warshall algorithm, see Exercise 2.14). The Floyd-Warshall algorithm allows one to ﬁnd the diameter and radius of a weighted digraph without cycles of negative weight in O(n3) time. Using the algorithm, we may check whether D has no negative cycle. For simplicity let us assume, as above, that D is strong. Then the veriﬁcation can be based on the following theorem (see, e.g., Lawler’s book [509]) whose proof is left to the interested reader as Exercise 2.15.

2.4 Inequalities Between Radius, Out-Radius and Diameter

59

Theorem 2.3.10 A weighted digraph D has a negative cycle if and only if δimi < 0 for some m, i ∈ {1, 2, . . . , n}.

2.4 Inequalities Between Radius, Out-Radius and Diameter
For a network representing a certain real-world system, it is desirable to have a small diameter as it increases the reliability of the system (see e.g., Fiol, Yebra and Alegre [236]). Small out-radius means that the system has an element that can quickly reach the rest of the elements (for example, by sending a message to them). In-radius and radius have similar interpretations. However, networks representing real-world systems normally do not have many arcs to avoid too costly constructions. The objectives of minimizing the diameter or/and radius (or out-radius) and the size of a digraph clearly contradict each other. Therefore, it is important for a designer to know what kind of trade-oﬀ can be achieved. The inequalities of this section give some insight into this problem.
2.4.1 Radius and Diameter of a Strong Digraph
It is well-known that, in a connected undirected graph G, we have rad(G) ≤ diam(G) ≤ 2 rad(G). This inequality holds also for strong digraphs (for our deﬁnition of radius).
Proposition 2.4.1 For a strong digraph D = (V, A), we have rad(D) ≤ diam(D) ≤ 2 rad(D).
Proof: Clearly, rad(D) ≤ diam(D). Let x be a vertex of D such that (dist(x, V ) + dist(V, x))/2 = rad(D), and let y, z be vertices of D such that dist(y, z) = diam(D). Since dist(y, z) ≤ dist(y, x) + dist(x, z) ≤ 2rad(D), we conclude that diam(D) ≤ 2 rad(D).
The following simple bound (called the Moore bound) on the order of a strong digraph is important in certain applications [236]. We leave its proof to the reader (Exercise 2.25).
Proposition 2.4.2 Let n, d and t be the order, the maximum out-degree and the diameter, respectively, of a strong digraph D. Then n ≤ 1+d+d2+. . .+dt.
The Moore bound is attained for d = 1 by the cycle Ct+1 and for t = 1 by the complete digraph on d+1 vertices. However, it is well-known (see Bridges and Toueg [136] and Plesn´ık and Zn´am [609]) that this bound cannot be attained for d > 1 and t > 1. Therefore,

60 2. Distances

n

<

dt+1 − 1 d−1

for d > 1 and t > 1. After simple algebraic transformations, we obtain the following.

Proposition 2.4.3 Let n, d and t be the order, the maximum out-degree and the diameter, respectively, of a strong digraph D. If d > 1 and t > 1, then

t ≥ logd(n(d − 1) + 1) .

The cases d = 2, 3 have received special consideration. For d = 2, Miller
and Fris [566] proved that there is no 2-regular digraph of diameter t ≥ 3 and order n = d + d2 + . . . + dt. Moreover, for most values of t no 2-regular digraphs of order n = d + d2 + . . . + dt − 1 exist (see Miller [565]). 3-regular digraphs of order n = d + d2 + . . . + dt, with d = 3, have been studied by
Baskoro, Miller, Plesn´ık and Zn´am [96].

2.4.2 Extreme Values of Out-Radius and Diameter

In this subsection, we will consider results on the following problems: what is the minimum (maximum) value of the out-radius and diameter of a strong digraph with n vertices and m arcs?
We start with the minimization problem for the out-radius. Theorem 2.4.4 is due to Goldberg [327].

Theorem 2.4.4 Let D be a strong digraph and let f (n, m) =

n−1 m−n+1

.

Then rad+(D) ≥ f (n, m). For all integers m ≥ n ≥ 2, there exists a digraph

D(n, m) (which we call the Goldberg digraph D(n, m)) of order n and size m

whose out-radius is f (n, m).

Proof: Let v be a vertex of D such that dist(v, V ) = rad+(D), and let T be a BFS tree of D with root v. Let also W be the set of vertices w ∈ V such that d+T (w) = 0. For a vertex w ∈ W , let P (w) denote the set of vertices, except for v, in the (v, w)-path of T . Then,

n − 1 = | ∪w∈W P (w)| ≤

|P (w)| ≤ |W |dist(v, V ) = |W |rad+(D).

w∈W

Thus,

|W |rad+(D) ≥ n − 1.

(2.6)

Since D is strong, every vertex w ∈ W is the tail of an arc in D − A(T ). Being a tree, T has n − 1 arcs (see Exercise 1.39). Hence, |W | ≤ m − (n − 1). Combining this with (2.6), we obtain that rad+(D) ≥ f (n, m).

2.5 Maximum Finite Diameter of Orientations

61

Set r = n − 1 − (m − n + 1)(f (n, m) − 1). It is not diﬃcult to verify that 0 < r ≤ m − n + 1. The digraph D(n, m) is constructed as follows. Take r cycles of length f (n, m) + 1 and m − n + 1 − r cycles of length f (n, m), mark a vertex in each cycle by v, and then identify all m − n + 1 vertices marked by v. Since r > 0, at least one of the cycles in D(n, m) has f (n, m) + 1 vertices. Thus, dist(v, V (D(n, m))) = f (n, m). Hence, rad+(D(n, m)) = f (n, m).
Figure 2.5 depicts D(10, 14). Clearly, rad+(D(10, 14)) = 2.

Figure 2.5 The Goldberg digraph D(10,14).

Being quite simple, the problem of ﬁnding a tight upper bound for the out-radius of a digraph of order n and size m has not been studied in the literature. The following two theorems solve the problems of establishing lower and upper bounds for the diameter of a strong digraph. Theorem 2.4.5 was proved by Goldberg [328]; Theorem 2.4.6 was derived by Ghouila-Houri [314].

Theorem 2.4.5 Let D be a strong digraph of order n and size m, m ≥ n+1,

and let g(n, m) =

2n−2 m−n+1

. Then diam(D) ≥ g(n, m). This bound is the best

possible.

Theorem 2.4.6 Let D be a strong digraph of order n and size m. Then

diam(D) ≤ n − 1, if n ≤ m ≤ (n2 + n − 2)/2 and diam(D) ≤

n

+

1 2

−

2m

−

n2

−

n

+

17 4

, otherwise.

Oriented graphs of diameter 2 and minimum size (for ﬁxed order n) were discussed by Fu˝redi, Horak, Pareek and Zhu [285].

2.5 Maximum Finite Diameter of Orientations
For a connected bridgeless multigraph G, let G denote an orientation of G having maximum ﬁnite diameter. Let lp(G) stand for the length of a longest path of G. The following theorem was obtained by Gutin [366].

62 2. Distances
Theorem 2.5.1 Let G be a connected bridgeless graph. Then, diam(G ) = lp(G).
Proof: For every strongly connected orientation G0 of G we obviously have diam(G0) ≤ lp(G). Hence, to prove this theorem it suﬃces to construct some orientation G1 of G with the property diam(G1) = lp(G).
Let P = x1x2 . . . xk be a longest path of G, and associate each vertex xi with a label r(xi) = i. Since G has no bridge, the edge xk−1xk is not a bridge. Consequently, there exists an ({x1, x2, . . . , xk−1}, xk)-path R1 which is diﬀerent from the path xk−1xk. Let xi be the initial vertex of R1. Deﬁne r(v) = i for all vertices v ∈ V (R1) − {xk}. Since xi−1xi is not a bridge there exists an ({x1, x2, . . . , xi−1}, {xi, xi+1, . . . , xk} ∪ V (R1))-path R2 which is diﬀerent from the path xi−1xi. If xj is the initial vertex of R2 (observe that j < i), then deﬁne r(v) = j for all vertices v in R2 besides the terminal one. Analogously, we can build paths R3, R4, . . . and deﬁne the label r(.) of the vertices of R3, R4, . . . until we obtain a path Rs with the initial vertex x1 and set r(v) = 1 for all vertices v in Rs but the terminal one.
Now, we orient the path P from x1 to xk (we obtain the directed path Q), and each path Ri (i = 1, 2, . . . , s) from its end vertex having a bigger label to its other end vertex (we derive the path Qi). It is easy to check that the oriented graph induced by the arcs of the paths ∪si=1Qi ∪ Q is strong. Deﬁne
X = V (G) − (∪si=1V (Ri) ∪ V (P ))
and suppose that X = ∅ (the case X = ∅ is easier). Since G has no bridge there exists some vertex v ∈ X and a pair of paths from v to vertices in V (G) − X with no common vertices (besides v), see Exercise 7.18. We merge these two paths to one (path S1). Now orient the last path from its end vertex having the bigger label to the one having the smaller label. If the labels of the two end vertices coincide then the orientation is arbitrary. The labels of all other vertices of the path S1 are the same as the label of terminal vertex of this path.
If X − V (S1) = ∅ we will continue the construction of paths S2, S3, . . . passing over the rest of the vertices of X until ∪ti=1V (Si) = X, where the orientations and labels are chosen in the same manner. Finally orient each unoriented edge uv from u to v if r(u) ≥ r(v) and from v to u otherwise.
Let D denote the obtained oriented graph. The digraph D contains a strongly connected spanning subgraph. Therefore, D is strongly connected. Since all the arcs (u, w) of D, besides those in P , are oriented such that r(u) ≥ r(w), there is no path from x1 to xk having length less than k − 1. Hence, diam(D) = k − 1.
Since the longest path problem for undirected graphs is N P-hard (see the book [303] by Garey and Johnson), the last theorem implies that the problem to ﬁnd a maximum ﬁnite diameter orientation of a graph is N P-hard as well.

2.6 Minimum Diameter of Orientations of Multigraphs

63

2.6 Minimum Diameter of Orientations of Multigraphs
The same complexity result holds for the following problem: ﬁnd a minimum diameter orientation of a graph. Indeed, the following assertion holds.
Theorem 2.6.1 (Chv´atal and Thomassen) [164] It is N P-complete to decide whether an undirected graph admits an orientation of diameter 2.

For a bridgeless multigraph G, let diammin(G) denote the minimum diameter of an orientation of G. We will present a minor modiﬁcation of the original proof of Theorem 2.6.1 by Chv´atal and Thomassen [164]. The main diﬀerence is in the use of Lemma 2.6.2 (which is applied to two diﬀerent results in this section). Deﬁne a bipartite tournament BTs, with partite sets U, W , each of cardinality s, as follows. Let U = {u1, u2, . . . , us} and W = {w1, w2, . . . , ws}. The vertex ui dominates only vertices wi, wi+1, . . . , wi+ s/2 −1 (the subscripts are taken modulo s) for every i = 1, 2, . . . , s.
Lemma 2.6.2 Let s ≥ 2. The diameter diam(BTs) equals 3. In particular, dist(U, U ) = dist(W, W ) = 2.
Proof: Clearly, it suﬃces to show that dist(U, U ) = dist(W, W ) = 2. This follows from the fact that, for every i = j, we have N +(ui) − N +(uj) = ∅ and, hence, there is a vertex w ∈ W such that ui→w→uj.
Lov´asz [520] proved that it is N P-hard to decide whether a hypergraph of rank3 3 is 2-colourable. By the result of Lov´asz, Theorem 2.6.1 follows from the next theorem.
Theorem 2.6.3 Given a hypergraph H of rank 3 and order n, one can construct in polynomial time (in n) a graph G such that diammin(G) = 2 if and only if H is 2-colourable.
Proof: Let k be the integer satisfying 8 ≤ k ≤ 11 and n + k is divisible by 4. Let H0 be a hypergraph obtained from H by adding k new vertices v1, . . . , vk. Moreover, append three new edges {{vi, vi+1} : i = 1, 2, 3} to H0 if H has an odd number of edges, and add four new edges {{vi, vi+1} : i = 1, 2, 3, 4} to H0 otherwise. Observe that H0 has an even number of edges, which is at least four. To construct G, take disjoint sets R and Q such that the elements of R (Q) are in a one-to-one correspondence with the vertices (the edges) of H0. Let G R and G Q be complete graphs, and p ∈ R and q ∈ Q be adjacent if and only if the vertex corresponding to p belongs to the edge corresponding to q (in H0).
Append four new vertices w1, w2, w3, w4 and join each of them to all the vertices in R ∪ Q. Finally, add a new vertex x and join it to all the vertices
3 Recall that the rank of a hypergraph is the cardinality of its largest edge.

64 2. Distances

in R. We show that the obtained graph G has the desired property. (Clearly,
G can be constructed in polynomial time.) Assume that G admits an orientation G∗ of diameter 2. For a vertex
u ∈ R, set f (u) = 0 if and only if x→u in G∗; otherwise, f (u) = 1. Since
distG∗ (x, q) = 2 (distG∗ (q, x) = 2, respectively) for each q ∈ Q, every edge e of H contains a vertex y such that f (y) = 0 (f (y) = 1, respectively). Thus
H is 2-colourable.
Now assume that H is 2-colourable. Then H0 admits a 2-colouring which generates a partition R = R1 ∪ R2 such that every edge of H0 has a vertex corresponding to an element from Ri and |Ri| ≥ 4 (for every i = 1, 2). An orientation G of G of diameter 2 is deﬁned as follows. Orient the edges in
each complete graph G L ∈ {G R1 , G R2 , G Q } such that the resulting tournament contains the bipartite tournament BT|L|. Let Ai, Bi be the partite sets of the bipartite tournaments in G Ri (i = 1, 2) and let A, B be the partite sets of the bipartite tournament in G Q . The rest of the edges in G
are oriented as follows:

x→R1→R2→x,

R1→Q→R2,

(A1 ∪ A2)→w1→A, B→w1→(B1 ∪ B2),

(A1 ∪ A2)→w2→B, A→w2→(B1 ∪ B2),

(B1 ∪ B2)→w3→A, B→w3→(A1 ∪ A2),

(B1 ∪ B2)→w4→B, A→w4→(A1 ∪ A2).

Using Lemma 2.6.2, it is not diﬃcult to verify that diam(G ) = 2. For
example, to show that distG (A1, V (G )) ≤ 2 and distG (V (G ), A1) ≤ 2, it suﬃces to observe that distG (A1, A1) = 2 and

B1 ∪ R2 ∪ Q ∪ {w1, w2} ⊆ N +(A1), {x, w3, w4} ⊆ N +(B1 ∪ R2 ∪ Q ∪ {w1, w2})
B1 ∪ {x, w3, w4} ⊆ N −(A1), N −(B1 ∪ {x, w3, w4}) ⊆ R2 ∪ Q ∪ {w1, w2}.

Chv´atal and Thomassen [164] dealt with the following parameter which we call the strong radius. The strong radius of a strongly connected digraph D = (V, A), srad(D), is equal to
min{max{dist(v, V ), dist(V, v)} : v ∈ V }.
Chv´atal and Thomassen [164] showed that it is N P-hard to decide whether a graph admits a strongly connected orientation of strong radius 2. The strong radius is of interest because, in particular, srad(D) ≤ diam(D) ≤ 2 srad(D) for every strongly connected digraph D (this follows from the fact that rad(D) ≤ srad(D) for every strong digraph D and Proposition 2.4.1).

2.6 Minimum Diameter of Orientations of Multigraphs

65

Following [164], we prove a sharp upper bound for the value of the strong radius of a strong orientation of a bridgeless connected multigraph. The ﬁrst part of the proof of Theorem 2.6.4 is illustrated in Figure 2.6.

1

2 11

2

u3 2

3 3

23

Figure 2.6 Constructing the orientation D of H in the proof of Theorem 2.6.4. The integers on arcs indicate the step number in the process of obtaining D.

Theorem 2.6.4 [164] Every bridgeless connected multigraph G = (V, E) admits an orientation of strong radius at most (rad(G))2 + rad(G).

Proof: We will show a slightly more general result. Let u ∈ V be arbitrary and let distG(u, V ) = r, then there is an orientation L of G such that distL(u, V ) ≤ r2 + r and distL(V, u) ≤ r2 + r.
Since G is bridgeless, every edge uv is contained in some undirected cycle; let k(v) denote the length of a shortest cycle through uv. It is not diﬃcult to prove (see Exercise 2.28) that, for every v ∈ N (u),

k(v) ≤ 2r + 1.

(2.7)

We claim that there is a subgraph H of G and an orientation D of H with the following properties:

(a) NG(u) ⊆ V (H). (b) For each v ∈ N (u), D has a cycle Cv of length k(v) containing either uv
or vu. (c) D is the union of the cycles Cv.
Observe that by this claim and (2.7), we have

max{distD(u, V (D)), distD(V (D), u)} ≤ 2r.

(2.8)

We demonstrate the above claim by constructing H and D step by step.
Let uv be an edge in G and let Zv be an undirected cycle of length k(v) through uv. Orient Zv arbitrarily as a directed cycle and let Cv denote the cycle obtained this way. Set H := Zv, D := Cv. This completes the ﬁrst step. At step i(≥ 2), we choose an edge uw such that w ∈/ V (H) and an
undirected cycle Z = w1w2 . . . wkw1 in G such that w1 = u, w2 = w, and k = k(w). If no vertex in Zw − u belongs to H, then append the directed cycle Cw = w1w2 . . . wkw1 to D and the cycle Z to H. Go to the next step.

66 2. Distances

Otherwise, there is a vertex wi (2 ≤ i ≤ k) such that wi ∈ V (H) (and hence wi ∈ V (D)). Suppose that wi has the least possible subscript with this property. Since wi ∈ V (D), there is some neighbour v of u such that wi ∈ Cv. (Recall that Cv is a directed cycle.) Let Cv = v1v2 . . . vtv1, where u = v1, v ∈ {v2, vt}, and wi = vj for some j. By considering the converse of D, if necessary, we may assume, without loss of generality, that v = v2. Now we consider two cases.
Case 1: wk = v. In this case, deﬁne the directed cycle Cw = uw2w3 . . . wiCv[vj+1, u] and observe that Cw has length k(w). (Indeed, if Cw had more than k(w) arcs, the path Cw[wi, u] would be longer than the path P2 = wiwi+1 . . . wku. In that case, the walk Zv[u, vj]P2[wi+1, u] containing uv would be of length less than k(v); a contradiction.) Let Zw := U G(Cw). Add Cw to D and Zw to H. Go to the next step.
Case 2: wk = v. In this case, deﬁne the directed cycle Cw as follows: Cw = Cv[u, vj]wi−1wi−2 . . . w2u and observe that Cw has length k(w) (the proof of the last fact is similar to the one given in Case 1). Let Zw := U G(Cw). Add Cw to D and Zw to H. Go to the next step.
Since V (G) is ﬁnite and we add at least one new vertex to H at each step,
this process will terminate with the desired subgraph H and its orientation
D. Thus, the claim is proved.
Consider the directed multigraph D. In G, contract all the vertices of D into a new vertex u∗ (the operation of contraction for undirected multigraphs
is similar to that for directed multigraphs) and call the resulting multigraph G∗. Note that G∗ is bridgeless and that by the property (a) of the above claim, we obtain distG∗ (u∗, V (G∗)) ≤ r − 1. By the induction hypothesis, there is an orientation L∗ of G∗ such that

distL∗ (u∗, V (L∗)) ≤ r2 − r and distL∗ (V (L∗), u∗) ≤ r2 − r.

(2.9)

Consider an orientation L of G obtained by combining L∗ with D and orienting the rest of the edges in G arbitrarily. By (2.8) and (2.9), we have

distL(u, V (L)) ≤ r2 + r and distL(V (L), u) ≤ r2 + r.

The sharpness of the bound in Theorem 2.6.4 is proved in [164]. Theorem 2.6.4 immediately implies the following.
Corollary 2.6.5 For every bridgeless connected multigraph G of radius r, diammin(G) ≤ 2r2 + 2r.
Plesn´ık [607] generalized Theorem 2.6.4 and Corollary 2.6.5 to orientations of weighted multigraphs.

2.7 Minimum Diameter Orientations of Complete Multipartite Graphs

67

Theorem 2.6.6 Let G be a bridgeless connected multigraph in which every edge has weight between 1 and W. If the radius of G is r, then G admits an orientation of strong radius at most r2 + rW and of diameter at most 2r2 + 2rW.
Plesn´ık [607] showed that the result of the previous theorem regarding the strong radius is sharp.
Chung, Garey and Tarjan [157] generalized Corollary 2.6.5 to mixed graphs. They proved the following.
Theorem 2.6.7 Every bridgeless connected mixed graph G of radius r admits an orientation of diameter at most 8r2 + 8r. Such an orientation can be found in time O(r2(n + m)).

2.7 Minimum Diameter Orientations of Complete Multipartite Graphs

Many authors consider the following parameter ρ(G) of a bridgeless graph G: ρ(G) := diammin(G) − diam(G). It turns out that, for many interesting graphs G, ρ(G) = 0, 1 or 2 (a result which is quite diﬀerent from the ‘pessimistic’ bound proved in Theorem 2.6.4). In this section, we discuss results on minimum diameter orientations of complete multipartite graphs.
Sˇolt´es [676] obtained the following result for complete bipartite graphs.

Theorem 2.7.1 If n1 ≥ n2 ≥ 2, then ρ(Kn1,n2 ) = 1 for n1 ≤

n2 n2 /2

, and

ρ(Kn1,n2 ) = 2, otherwise.

The original proof of Theorem 2.7.1 is rather long. A shorter proof of this result using the well-known Sperner’s lemma4 is given by Gutin [361].
We present below an adapted version of the proof in [361]. We start from
Sperner’s lemma. (We call a family F of subsets of {1, 2, . . . , n} an antichain
if no set in F is contained in another.)

Lemma 2.7.2 Let F be an antichain on {1, . . . , n}. Then

|F| ≤

n n/2

.

The bound is attained by taking F to be the family of all subsets of size n/2 .

4 For an elegant probabilistic proof of Sperner’s lemma, see Alon and Spencer [14].

68 2. Distances

Proof of Theorem 2.7.1: Let n1 ≥ n2 ≥ 2. Let O(K) be the set of strongly

connected orientations of a complete bipartite graph K = Kn1,n2 . It is easy

to see that no digraph in O(K) has diameter 2. Thus, it suﬃces to show that

there is an orientation D ∈ O(K) of diameter 3 when n1 ≤

n2 n2 /2

, and

that there is an orientation D ∈ O(K) of diameter 4 but no orientation of

diameter 3 when n1 >

n2 n2 /2

.

Let us ﬁrst assume that n1 ≤

n2 n2 /2

. If n1 = n2, then the bipartite

tournament BTn1 deﬁned just before Lemma 2.6.2 provides the required ori-

entation (see Lemma 2.6.2). Now, consider the case when n1 > n2. Let V1 and

V2 be the partite sets of K, |Vi| = ni. Let U be a subset of V1 of cardinality

n2. Orient the edges between U and V2 in such a way that the resulting di-

graph D is isomorphic to BTn2 and d+(v) = n2/2 for every v ∈ U . Clearly,

{N +(v) : v ∈ U } is an antichain on V2 (see Lemma 2.7.2). This antichain

is formed by some subsets of V2 of cardinality n2/2 . Since |V1| ≤

n2 n2 /2

and there are

n2 n2 /2

subsets of V2 (each of cardinality n2/2 ) forming a

(maximum) antichain, the out-neighbourhoods of vertices in V1 − U can be

chosen in such a way that the family F = {N +(v) : v ∈ V1} is an antichain.

The family F determines an orientation of K which we denote by D. By

Lemma 2.6.2, distD (V2, V2) = 2 and, thus, distD(V2, V2) = 2. Since the out-

neighbourhoods of every pair of vertices in V1 are not contained in each other,

distD(V1, V1) = 2. Thus, diam(D) = 3 as every vertex in D is dominated by

another vertex.

Now let us assume that n1 >

n2 n2 /2

. Let H ∈ O(K) and V1, V2 be the

partite sets of K such that ni = |Vi|. By Lemma 2.7.2, there is a pair of

vertices x, y ∈ V1 such that NH+(x) ⊆ NH+(y). Therefore, distH (x, y) > 2.

Hence, by the obvious parity reason, distH (x, y) ≥ 4. Thus, there is no

orientation of K of diameter 3. To present an orientation H of K of di-

ameter 4, choose a set W ⊂ V1 of cardinality

n2 n2 /2

. Orient the edges of

K W ∪ V2 such that the resulting digraph H is isomorphic to the digraph

D deﬁned above. Let w be a ﬁxed vertex of W . For a vertex v ∈ W ∪ V2, set

NH+(v) = NH+ (v), and for a vertex v ∈ V1 − W set NH+(v) = NH+(w). We have

proved that diam(H ) = 3. It remains to show that dist(V1 − W, V (H)) ≤ 4

and dist(V (H), V1 − W ) ≤ 4. Actually, by the deﬁnition of H, it suﬃces to

demonstrate that dist(w, w ) = 4, where w ∈ V1 − W . The last fact follows

from distH (w, V2) ≤ 3 and NH−(w ) ∩ V2 = ∅.

Let f (n1, . . . , nk) be the minimum possible diameter of a k-partite tournament with partite sets of sizes n1, . . . , nk. For k = 2 the value of this function was determined in Theorem 2.7.1 (if min{n1, n2} = 1, then f (n1, n2) = ∞). For k ≥ 3 the problem to determine the function f (n1, . . . , nk) was posed independently by Gutin [366] and Plesn´ık [607]. It is easy to show that
2 ≤ f (n1, . . . , nk) ≤ 3 for every k ≥ 3 and all positive integers n1, . . . , nk (see Proposition 2.7.4 below). Thus, it suﬃces to ﬁnd out when f (n1, . . . , nk) = 2. In [366, 487, 607], it was shown that f (n1, . . . , nk) = 2 if n1 = n2 = . . . = nk

2.8 Minimum Diameter Orientations of Extensions of Graphs

69

except for k = 4, n1 = n2 = n3 = n4 = 1 (it is easy to see that f (1, 1, 1, 1) = 3). This result was extended by Koh and Tan [488] as follows.

An ordered pair p, q of integers is called a co-pair if 1 ≤ p ≤ q ≤

p p/2

.

An ordered triple p, q, r of positive integers is called a co-triple if p, q and

p, r are co-pairs.

Theorem 2.7.3 If m1, . . . , mk can be partitioned into co-pairs when k is even and into co-pairs and a co-triple when k is odd, then f (m1, . . . , mk) = 2.

Since even this theorem falls short to provide a complete solution to the above-mentioned problem, we give only a proof of the most basic result on f (n1, . . . , nk) obtained independently by Plesn´ık [607] and Gutin [361].

Proposition 2.7.4 For every k ≥ 3 and all positive integers n1, . . . , nk, we have 2 ≤ f (n1, . . . , nk) ≤ 3.

Proof: Obviously, f (n1, . . . , nk) ≥ 2. If k is odd, let R(n1, n2, . . . , nk) stand for a multipartite tournament with
partite sets V1, . . . , Vk of cardinalities n1, . . . , nk such that Vi→Vj if and only if j − i ≡ 1, 2, . . . , k/2 (mod k). If k is even, then R(n1, n2, . . . , nk) is determined as follows:

R(n1, n2, . . . , nk) − Vk ∼= R(n1, n2, . . . , nk−1) ,

Vk→Vi (i = 1, 3, 5, . . . , k − 1), Vj→Vk (j = 2, 4, 6, . . . , k − 2) .

We show that diamR(n1, n2, . . . , nk) ≤ 3 for every k ≥ 3.

Case 1: k is odd, k ≥ 3. It is suﬃcient to prove that dist(V1, Vi) ≤ 3

for all i = 1, 2, . . . , k. If 1 < j ≤ k/2 + 1, then V1→Vj by the deﬁnition.

If

k 2

+ 1 < j ≤ k, then V k/2 +1 → Vj, hence dist(V1, Vj) = 2. Since

V1 → V k/2 +1 → V k/2 +2→V1, we have dist(V1, V1) ≤ 3.

Case 2: k is even, k ≥ 4. Since R(n1, . . . , nk) − Vk ∼= R(n2, . . . , nk−1), we have dist(Vi, Vj) ≤ 3 for all 1 ≤ i, j ≤ k − 1. Moreover, Vk→Vi→Vi+1 for i = 1, 3, 5, . . . , k − 3 and Vk → Vk−1. Therefore dist(Vk, Vt) ≤ 2 for t = 1, 2, . . . , k − 1. Analogously, Vi→Vi+1→Vk for i = 1, 3, 5, . . . , k − 3 and Vk−1→V1→V2→Vk. Hence dist(Vt, Vk) ≤ 3 for t = 1, 2, . . . , k − 1. Finally, Vk→V1→V2→Vk. Therefore dist(Vk, Vk) ≤ 3.

2.8 Minimum Diameter Orientations of Extensions of Graphs
Proposition 2.7.4 was generalized by Koh and Tay [496, 691] to extensions of graphs. We recall the notion of an extension of a graph introduced in Chapter 1. Let H be a graph with vertex set {1, . . . , h} and let n1, . . . , nh

70 2. Distances
be positive integers. Then G = H[Kn1 , . . . , Knh ] is the graph with vertex set {(pi, i) : 1 ≤ i ≤ h, 1 ≤ pi ≤ ni} such that vertices (pi, i) and (pj, j) are adjacent in G if and only if ij ∈ E(H). (We call G an extension of H.) Theorem 2.8.1 (Koh and Tay) [496] Let H be a connected graph of order h ≥ 3. Let G = H[Kn1 , . . . , Knh ] with ni ≥ 2, 1 ≤ i ≤ h. Then, diam(H) ≤ diammin(G) ≤ diam(H) + 2.
Figure 2.7 An orientation F of G = P3[K3, K2, K2]. Observe that diam(G) = 2 and diam(F ) = 4.
This theorem is illustrated by Figure 2.7. The requirement h ≥ 3 is important as one can see from Theorem 2.7.1 (diam(K2) = 1, but diammin(K2[Kn1 , K2]) = 4 for n1 ≥ 3). Clearly, diam(H) ≤ diam(D) for every orientation D of G. To prove the more diﬃcult part of the inequality in Theorem 2.8.1, we will use the following lemma. Lemma 2.8.2 [496] Let ti, ni be integers such that 2 ≤ ti ≤ ni for 1 ≤ i ≤ h. If the graph G = H[Kt1 , . . . , Kth ] admits an orientation F in which every vertex v lies on a cycle Cv of length not exceeding s, then G = H[Kn1 , . . . , Knh ] has an orientation F whose diameter is at most max{s, diam(F )}. Proof: Given an orientation F of G , we deﬁne an orientation F of G as follows. We have (p, i)→(q, j) in F if and only if one of the following holds: (a) p < ti, q < tj and (p, i)→(q, j) in F . (b) p < ti, q ≥ tj and (p, i)→(tj, j) in F . (c) p ≥ ti, q < tj and (ti, i)→(q, j) in F . (d) p ≥ ti and q ≥ tj and (ti, i)→(tj, j) in F .
Let u = (p, i) and v = (q, j) be a pair of distinct vertices in F . If i = j, then it is clear that distF (u, v) ≤ diam(F ) (we can use obvious modiﬁcations of the corresponding paths in F ). We have the same result if i = j but p < ti or q < ti. If i = j, p, q ≥ ti, then using the cycle Cu we conclude that distF (u, v) ≤ s.

2.9 Minimum Diameter Orientations of Cartesian Products of Graphs

71

Proof of Theorem 2.8.1: We prove that there exists an orientation D of G such that diam(D) ≤ diam(H) + 2. If diam(H) = 1, then this claim follows from Proposition 2.7.4. Thus, we may assume that diam(H) ≥ 2.
Deﬁne an orientation F of H[T1, . . . , Th], where every Ti = K2, as follows:

(1, i)→(1, j)→(2, i)→(2, j)→(1, i) if and only if i < j.

(2.10)

Let u = (p, i) and v = (q, j) be a pair of distinct vertices in F . We show that distF (u, v) ≤ diam(H) + 2. Suppose that ik1k2 . . . ksj is a path of length s+1 = distH (i, j) in H. Then the path Q = (p, i), (k1∗, k1), (k2∗, k2), . . . , (ks∗, ks), (j∗, j), where x∗ = 1 or 2, is of length distH (i, j) in F . If j∗ = q, then the last inequality follows. Otherwise, i.e. j∗ = q, the path Q, (3−ks∗, ks), (q, j) is of length distH (i, j) + 2 in F . Thus, distF (u, v) ≤ diam(H) + 2. Thus, diam(F ) ≤ diam(H). By (2.10), every vertex of F belongs to a cycle of length 4. Now this theorem follows from Lemma 2.8.2.
Thus, totally non-trivial extensions (i.e., with at least two vertices in every independent set used for the extension) of bridgeless undirected graphs G can be divided into three classes according to the diﬀerence between the minimum diameter of an orientation of the extension (with at least two vertices in every independent set used for the extension) and diam(G). Some wide subclasses of these three classes have been constructed in [496, 691]. These constructions indicate that perhaps the following conjecture is true.

Conjecture 2.8.3 [496] If H in Theorem 2.8.1 is of diameter at least 3, then the upper bound on diammin(G) there can be replaced by diam(H) + 1.

2.9 Minimum Diameter Orientations of Cartesian Products of Graphs

The Cartesian product of a family of undirected graphs G1, G2, . . . , Gn,

denoted by G = G1 × G2 × . . . × Gn or

n i=1

Gi,

where

n

≥

2,

is

the

graph

G having V (G) = V (G1) × V (G2) × . . . × V (Gn) = {(w1, w2, . . . , wn) :

wi ∈ V (Gi), i = 1, 2, . . . , n} and a pair of vertices (u1, u2, . . . , un) and

(v1, v2, . . . , vn) of G are adjacent if and only if there exists an r ∈ {1, 2, . . . , n}

such that urvr ∈ E(Gr) and ui = vi for all i ∈ {1, 2, . . . , n} − {r}. Let Pn

(Cn, Kn) be the (undirected) path (cycle, complete graph) of order n and let

Tn stand for a tree of order n. Roberts and Xu [638, 639, 640, 641] and Koh

and Tan [484] evaluated the quantity ρ(Pk × Ps). (We remark that Roberts and Xu [638, 639, 640, 641] considered objective functions other than ρ for

orientations of the Cartesian products of undirected paths.) Koh and Tay

[491] proved that most of those results can be extended as follows.

Theorem 2.9.1 For n ≥ 2, k1 ≥ 3, k2 ≥ 6 and (k1, k2) = (3, 6), we have

72 2. Distances

n
ρ( Pki ) = 0.
i=1

This, in particular, generalizes the main result of McCanna [558] on n-

cubes, i.e. the graphs

n i=1

P2.

Koh

and

Tay

[490]

have

obtained

the

values

of q(r, k) = ρ(C2r × Pk) for r, k ≥ 2:

(a) q(r, k) = 0 if k ≥ 4. (b) q(r, k) = 2 if k = 2 and r is even. (c) q(r, k) = 1, otherwise.

They have also evaluated ρ(Km × Pk), ρ(Km × C2r+1) and ρ(Km × Kn) [492], ρ(Km × C2r) [495] and ρ(Tm × Tn) [493]. K¨onig, Krumme and Lazard [500] studied the Cartesian products of cycles. They proved the following
interesting result.

Theorem 2.9.2 Let p, q be integers with p, q ≥ 6. If at least one of these
two integers is even, then ρ(Cp × Cq) = 0. If both p and q are odd, then ρ(Cp × Cq) = 1.

K¨onig, Krumme and Lazard [500] evaluated ρ(Cp × Cq) in most cases when the minimum of p and q is smaller than 6. They also extended the
ρ(Cp × Cq) = 0 part of Theorem 2.9.2 to the Cartesian products of three or more cycles. These results are described in more detail in [691]. Some of
the above results were extended by Koh and Tay [491], where the following
theorem was proved.

Theorem 2.9.3 For m ≥ 2, r ≥ 0, k1 ≥ 3, k2 ≥ 6 and (k1, k2) = (3, 6), we

have ρ(

m i=1

Pki

×

r i=1

Cni )

=

0.

This result was further extended by Koh and Tay in [494]. The rest of this subsection is based on [494].
Let G be the set of all bipartite graphs G such that diam(G) ≥ 3 and G admits an orientation (called a G-orientation) of diameter diam(G), in which every vertex is contained in a cycle of length at most diam(G). Let G∗ be the set of all bipartite graphs G such that diam(G) ≥ 3 and G admits an orientation F (called a G∗-orientation) of diameter diam(G) with the following further properties: every vertex is contained in a cycle of F of length at most diam(G) and if u→v in F then there exists a (u, v)-walk of length at least three and at most diam(G).
Let S be the set of all graphs in which every graph G admits an orientation H (called an S-orientation) such that for all vertices u, v ∈ V (H) at least one of the following holds:

(a) min{distH (u, v), distH (v, u)} ≤ diam(G).

2.9 Minimum Diameter Orientations of Cartesian Products of Graphs

73

(b) There are vertices y and z such that

max{distH (u, y) + distH (v, y), distH (z, u) + distH (z, v)} ≤ diam(G).
Let S∗ be the set of all graphs in which every graph G admits an orientation H (called an S∗-orientation) such that for all vertices u, v ∈ V (H) at least one of the following holds:

(a) min{distH (u, v), distH (v, u)} ≤ diam(G). (b) There is a vertex y such that distH (u, y) + distH (v, y) ≤ diam(G). (c) There is a vertex z such that distH (z, u) + distH (z, v) ≤ diam(G).
Clearly, G∗ ⊆ G and S ⊆ S∗. Koh and Tay [494] showed the following:

(a) For m ≥ 2 and k ≥ 4, C2m × Pk ∈ G∗. (b) C4 × C4 ∈ G. (c) For m ≥ 2 and n ≥ 3, C2m × C2n ∈ G∗. (d) If T and T are trees of diameter at least four, then T × T

∈ G∗.

(e) {Pj : j ≥ 2} ∪ {Cj : j ≥ 3} ∪ {Kj : j ≥ 1} ∪ {G : ρ(G) = 0} ⊂ S, also {Kp,q : 2 ≤ p ≤ q} ⊂ S.
(f) If T is a tree which is not a path, then T ∈ S∗.

(g) If G2 is the set of all graphs of diameter two, then G2 ⊂ S∗.

Due to the fact that the families G, G∗, S, S∗ of graphs are quite large, the following results proved by Koh and Tay [494] are undoubtedly interesting.

Theorem 2.9.4 If G ∈ G and Ai ∈ S, i = 1, 2, . . . , n, then ρ(G×

n i=1

Ai)

=

0.

Theorem 2.9.5 If G ∈ G∗ and Ai ∈ S∗, i = 1, 2, . . . , n, then ρ(G ×

n i=1

Ai)

=

0.

We will prove only Theorem 2.9.4 since the proof of Theorem 2.9.5 is similar and is left as Exercise 2.32.

Proof of Theorem 2.9.4: Let diam(G) = k and let U and W be the

partite sets of G. Let F (Hi) be a G-orientation (an S-orientation) of G (Ai,

i = 1, 2, . . . , n). We will orient G ×

n i=1

Ai

inductively

as

follows:

1. Orient G as F and A1 as H1. In G × A1, orient an edge {(x, i), (x, j)}

from (x, i) to (x, j) if and only if either x ∈ U and ij ∈ A(H1) or x ∈ W

and ji ∈ A(H1); orient an edge {(x, i), (y, i)} from (x, i) to (y, i) if and

only if xy ∈ A(F ).

2. Suppose that G×

r i=1

Ai,

where

1

≤

r

≤

n−1,

has

been

oriented.

Orient

Ar+1 as Hr+1. Orient G× {j} is isomorphic to that

r+1 i=1

Ai

so

of G ×

that
r i=1

the orientation Ai for each j

of ∈

G×

r i=1

Ai×

V (Ar+1) and

orient an edge {(x, a1, . . . , ar, i), (x, a1, . . . , ar, j)} from (x, a1, . . . , ar, i)

to (x, a1, . . . , ar, j) if and only if either x ∈ U and ij ∈ A(Hr+1) or

x ∈ W and ji ∈ A(Hr+1).

74 2. Distances

Let F ∗ be the resulting orientation of G ×

n i=1

Ai.

Deﬁne

the

following

sets

R1i = {(u, v) ∈ V (Hi × Hi) : distHi (u, v) ≤ diam(Ai)}, R2i = {(u, v) ∈ V (Hi × Hi) : (u, v) ∈ R1i, distHi (v, u) ≤ diam(Ai)}, R3i = {(u, v) ∈ V (Hi × Hi) : (u, v) ∈ R1i ∪ R2i, ∃y, z ∈ V (Hi) max {distHi (u, y) + distHi (v, y), distHi (z, u) + distHi (z, v)} ≤ diam(Ai)}.

Observe that R1i, R2i, R3i form a partition of V (Hi × Hi).

Let (x, a1, . . . , an) and (y, b1, . . . , bn) be a pair of distinct vertices of

F ∗. We will construct, in F ∗, a path P1P2P3P4 from (x, a1, . . . , an) to

(y, b1, . . . , bn) of length at most diam(G ×

n i=1

Ai)

=

k

+

n i=1

diam(Ai).

(See Exercise 2.29.)

Without loss of generality, assume that x ∈ U (the case of x ∈ W can be

treated similarly). Let x be the successor of x either on a shortest (x, y)-path

in F if x = y or on a shortest cycle through x if x = y. Clearly, x ∈ W .

The path P1 is a shortest path from (x, a1, . . . , an) to (x, c1, . . . , cn), where ci, i = 1, . . . , n, is deﬁned as follows:

(a) ci = bi if (ai, bi) ∈ R1i. (b) ci = ai if (ai, bi) ∈ R2i. (c) If (ai, bi) ∈ R3i, we set ci = yi, where yi is a vertex satisfying

distHi (ai, yi) + distHi (bi, yi) ≤ diam(Ai).

The path P2 is a shortest path from (x, c1, . . . , cn) to (x , c1, . . . , cn). The

path P3 is a shortest path from (x , c1, . . . , cn) to (x , b1, . . . , bn) and the path

P4 is a shortest path from (x , b1, . . . , bn) to (y, b1, . . . , bn). Observe that the

total length of P1 and P3 does not exceed

n i=1

diam(Ai)

and

the

total

length

of P2 and P4 is at most k.

2.10 Kings in Digraphs
In this section, we study r-kings in tournaments, semicomplete multipartite digraphs and other generalizations of tournaments. The main emphasis is on 4-kings in semicomplete multipartite digraphs. The notion of a 2-king and some results on 2-kings in tournaments will be generalized in Section 12.3.2.
2.10.1 2-Kings in Tournaments
Studying dominance in certain animal societies, the mathematical sociologist Landau [508] observed that every tournament has a 2-king. In fact, in every

2.10 Kings in Digraphs

75

tournament T , each vertex x of maximum out-degree is a 2-king. Indeed, for a vertex y ∈ T , y = x, either x→y or there is an out-neighbour of x which is an in-neighbour of y. In both cases, dist(x, y) ≤ 2. Observe that if a tournament T has a vertex of in-degree zero, this vertex is the only r-king in T for every positive integer r. Moon [569] proved the following.
Theorem 2.10.1 Every tournament with no vertex of in-degree zero has at least three 2-kings.
Proof: Exercise 2.35.
The following example shows that this bound on the number of 2-kings by Moon is sharp. Let Tn be a tournament with vertex set {x1, x2, . . . , xn} and arc set A = X ∪ Y ∪ {xn−2xn}, where
X = {xixi+1 : i = 1, 2, . . . , n − 1}, Y = {xjxi : 1 ≤ i < j − 1 ≤ n − 1, (j, i) = (n, n − 2)}.

It is easy to verify that, for n ≥ 5, xn−3, xn−2, xn−1 are the only 2-kings in Tn (Exercise 2.37), see Figure 2.8.

Figure 2.8 An example of a tournament with exactly three 2-kings. The arcs which are not shown are oriented from right to left.
Since the converse of a tournament is a tournament, the above two results can be reformulated for 2-serfs. (A vertex x is a 2 serf if dist(V, x) ≤ 2.) The concepts of 2-kings and 2-serfs in tournaments were extensively investigated by both mathematicians and political scientists (the latter have studied socalled majority preferences). The interested reader is referred to Reid [630] for a comprehensive recent survey on the topic.
2.10.2 Kings in Semicomplete Multipartite Digraphs
It is easy to see that Proposition 2.1.1 implies that a multipartite tournament T has a ﬁnite out-radius if and only if T contains at most one vertex of in-degree zero (Exercise 2.38). Moreover, the following somewhat surprising assertion holds. If a multipartite tournament has ﬁnite out-radius, the outradius is at most four. In other words, every multipartite tournament with at most one vertex of in-degree zero contains a 4-king. (Similar results hold for quasi-transitive digraphs and a certain class of digraphs that includes

76 2. Distances
multipartite tournaments, see Subsection 2.10.3.) This result was proved independently by Gutin [356] and Petrovic and Thomassen [605]. The bound is sharp as there exist inﬁnitely many p-partite tournaments without 3-kings for every p ≥ 2 [356]. Indeed, bipartite tournaments C4[Kq, Kq, Kq, Kq] for q ≥ 2 do not have 3-kings (dist(u, v) = 4 for distinct vertices u, v from the same Kq). It is clear that every multipartite tournament, for which the initial strong component is some C4[Kq, Kq, Kq, Kq] (q ≥ 2), has no 3-king either.
Thus, 4-kings are of particular interest in multipartite tournaments. In a number of papers (see, e.g., Gutin [361], Koh and Tan [485, 486, 489], Petrovi´c [604] and the survey paper [630] by Reid) the authors investigate the minimum number of 4-kings in multipartite tournaments without vertices of in-degree zero. (If a multipartite tournament has exactly one vertex of indegree zero, it contains exactly one 4-king, so this case is trivial.) In our view, the most interesting result in this direction was obtained by Koh and Tan in [485].
Theorem 2.10.2 Let T be a k-partite tournament with no vertex of in-degree zero. If k = 2, T contains at least four 4-kings; it has exactly four 4-kings if its initial strong component consists of a cycle of length four. If k ≥ 3, T contains at least three 4-kings; it has exactly three 4-kings if its initial strong component consists of a cycle of length three.
This theorem can be considered as a characterization of bipartite (ppartite, p ≥ 3) tournaments with exactly k 4-kings for k ∈ {1, 2, 3, 4} (k ∈ {1, 2, 3}). The next theorem by Gutin and Yeo [376] goes further with respect to both exact number of 4-kings and the class of digraphs under consideration.
Theorem 2.10.3 Let D = (V, A) be a semicomplete multipartite digraph and let k be the number of 4-kings in D. Then
1. k = 1 if and only if D has exactly one vertex of in-degree zero. 2. k = 2, 3 or 4 if and only if the initial strong component of D has k
vertices. 3. k = 5 if and only if either the initial strong component Q of D has ﬁve
vertices or Q contains at least six vertices and possesses a path P = p0p1p2p3p4 such that dist(p0, p4) = 4 and {p1, p2, p3, p4}⇒V − V (P ).
We have seen that a vertex of maximum out-degree in a tournament is a 2-king. It is slightly more diﬃcult to show that a vertex of maximum outdegree in a bipartite tournament is a 4-king (Exercise 1.67). With 4-kings in k-partite tournaments for k ≥ 3, the situation is more complicated as can be seen from the next theorem by Goddard, Kubicki, Oellermann and Tian [321].

2.10 Kings in Digraphs

77

Theorem 2.10.4 Let T be a strongly connected 3-partite tournament of order n ≥ 8. If v is a vertex of maximum out-degree in T , then dist(v, V (T )) ≤ n/2 and this bound is best possible.
In the rest of this subsection, we will prove the following theorem using an argument adapted from [376].
Theorem 2.10.5 Every semicomplete multipartite digraph with at most one vertex of in-degree zero has a 4-king.
For the proof we need the following lemmas:
Lemma 2.10.6 If P = p0p1 . . . p is a shortest path from p0 to p in a semicomplete multipartite digraph D, and ≥ 3, then there is a (p , p0)-path of length at most 4 in D V (P ) .
Proof: Since ≥ 3 and P is a shortest path we have ({p0, p1}, p ) = ∅. If p →p0 we are done, so assume that p and p0 belong to the same partite set of D. This implies that p →p1. Analogously, (p0, {p2, p3}) = ∅, which implies that either p p1p2p3p0 or p p1p2p0 is a (p , p0)-path of length at most 4 in D V (P ) .
Lemma 2.10.7 Let D be a semicomplete multipartite digraph and let Q be an initial strong component of D. If Q has at least two vertices, then D has only one initial strong component. Every vertex in Q, which is a 4-king in Q, is a 4-king in D.
Proof: Assume that |V (Q)| ≥ 2, but D has another initial strong component Q . Since Q contains adjacent vertices, there is an arc between Q and Q , a contradiction.
Let x be a 4-king in Q and let y ∈ V (D) − V (Q) be arbitrary. If x and y are adjacent, then clearly x→y. Assume that x and y are not adjacent. Since Q is strong, it contains a vertex z dominated by x. Clearly, x→z→y. Hence dist(x, y) ≤ 2 and x is a 4-king in D.
Lemma 2.10.8 Let D be a strong semicomplete multipartite digraph and let w be a vertex in D. For i ≥ 3, if N +i(w) = ∅, then dist(N +i(w), N +i[w]) ≤ 4.
Proof: Let z ∈ N +i(w) be arbitrary. Since a shortest path from w to z is of length i ≥ 3, by Lemma 2.10.6, dist(z, w) ≤ 4. Let q ∈ N +i[w] − {w, z} and let r0r1 . . . rj be a shortest (w, q)-path in D. If 1 ≤ j ≤ 3 then, since z dominates at least one of the vertices r0, r1, either zr0r1 . . . rj or zr1 . . . rj is a (z, q)-path in D of length at most 4. If j ≥ 4 then, since z dominates at least one of the vertices rj−3, rj−2, either zrj−3rj−2rj−1rj or zrj−2rj−1rj is a (z, q)-path in D of length at most 4.
Proof of Theorem 2.10.5: Let D be a semicomplete multipartite digraph with at most one vertex of in-degree zero. If D has a vertex x of in-degree zero,

78 2. Distances
then clearly x is a 2-king in D. Thus, assume that D has no vertex of in-degree zero. Then, every initial strong component Q of D has at least two vertices. By Lemma 2.10.7, Q is unique and every 4-king in Q is a 4-king in D. It remains to show that Q has a 4-king. If every vertex in Q is a 4-king, then we are done. Otherwise, let w be a vertex in Q which is not a 4-king of Q. Then, r = distQ(w, V (Q)) ≥ 5. By Lemma 2.10.8, distQ(NQ+r(w), NQ+r[w]) ≤ 4, i.e., every vertex in NQ+r(w) is a 4-king in Q (since NQ+r[w] = V (Q)).
2.10.3 Kings in Generalizations of Tournaments
Bang-Jensen and Huang [80] considered kings in quasi-transitive digraphs. The main result of [80] is the following.
Theorem 2.10.9 Let D be a quasi-transitive digraph. Then we have
(1) D has a 3-king if and only if it has a ﬁnite out-radius5. (2) If D has a 3-king, then the following holds:
(a) Every vertex in D of maximum out-degree is a 3-king. (b) If D has no vertex of in-degree zero, then D has at least two 3-kings. (c) If the unique initial strong component of D contains at least three vertices,
then D has at least three 3-kings.
In the following family of quasi-transitive digraphs, every digraph has a 3-king but no 2-king: C3[Kk1 , Kk2 , Kk3 ] for every k1, k2, k3 ≥ 2.
In [605], Petrovic and Thomassen obtained the following.
Theorem 2.10.10 Let G be an undirected graph whose complement is the disjoint union of complete graphs, paths and cycles. Then every orientation of G with at most one vertex of in-degree zero has a 6-king.
2.11 Application: The One-Way Street and the Gossip Problems
In this section, we show how (some extensions of) the one-way and gossip problems lead one to consider minimum diameter orientations of digraphs. Recall that an orientation of a digraph D is a subdigraph of D obtained from D by deleting exactly one arc between x and y for every pair x = y of vertices such that both xy and yx are in D. Some results are given on minimum diameter orientations of digraphs from well-known classes, semicomplete bipartite digraphs and quasi-transitive digraphs.
5 See Proposition 2.1.1.

2.11 Application: The One-Way Street and the Gossip Problems

79

2.11.1 The One-Way Street Problem and Orientations of Digraphs
Graph theoretical modelling of the one-way problem can be traced back to the classical paper of Robbins [637]. It is well-known that introduction of one-way streets usually decreases the number of car accidents and allows one to simplify the traﬃc control. By Robbins’ theorem (see Theorem 1.6.2) a connected graph G has a strongly connected orientation if and only if G has no bridge. This theorem shows when the one-way street system can be introduced. One reason why one-way streets are not used everywhere is that the travelling distances after such arrangements will increase. To minimize this disadvantage of the one-way traﬃc system, we may choose certain assignments of directions that minimize some disadvantage criterion. Three such criteria are discussed by Roberts and Xu [638, 639, 640, 641] Most other papers on the topic deal only with one criterion: the minimization of the longest path that has to be travelled, i.e. the diameter of an orientation of the undirected graph representing the street conﬁguration. We restrict ourselves to this objective function.
Practically all papers on the topic consider orientations of undirected graphs. This corresponds to converting all streets, which were initially twoway, into one-way streets (see, e.g., Koh and Tay [492, 493, 495], K¨onig, Krumme and Lazard [500] and Plesn´ık [608]). This model is quite restricted: certain streets may already be one-way. To take such streets into consideration, one has to study orientations of directed rather than undirected graphs. While there are a few papers (see, e.g., Boesch and Tindell [120], Chung, Garey and Tarjan [157], and Volkmann [730]) dealing with ﬁnite diameter orientations of digraphs, we are aware of only one paper [378] devoted to minimizing the diameter of an orientation of a digraph. In particular, the following results are proved by Gutin and Yeo [378]. For a digraph D, as in the case of undirected graphs, let diammin(D) denote the minimum diameter of an orientation of D.
Theorem 2.11.1 If D is a strong quasi-transitive digraph of order n ≥ 3, then
diammin(D) ≤ max{3, diam(D)}.
There is an inﬁnite family Q of strong quasi-transitive digraphs such that for every Q ∈ Q, diam(Q) = 2 but no orientation of Q is of diameter6 2.
Theorem 2.11.2 If D is a strong semicomplete bipartite digraph of order n ≥ 4 such that D =K↔1,n−1, then diammin(D) ≤ max{5, diam(D)}. There is an inﬁnite family B of strong semicomplete bipartite digraphs such that for every B ∈ B, diam(B) = 4 but diammin(B) = 5.
6 Observe that by Exercise 1.57 every strong quasi-transitive digraph of order n ≥ 3 has a strong orientation. So does every strong semicomplete bipartite digraph with every partite set of cardinality at least 2. On the other hand,
↔
K1,n−1, n ≥ 2, has no strong orientation.

80 2. Distances
The sharpness of the upper bounds of these theorems can be seen from the following examples. Let Tk, k ≥ 3, be a (transitive) tournament with vertices x1, x2, . . . , xk and arcs xixj for every 1 ≤ i < j ≤ k. Let y be a vertex not in Tk, which dominates all vertices of Tk but xk and is dominated by all vertices of Tk but x1. (See Figure 2.9.) The resulting semicomplete digraph Dk+1 has diameter 2. However, the deletion of any arc of Dk+1 between y and the set {x2, x3, . . . , xk−1} leaves a digraph with diameter 3. Indeed, if we delete yxi (xiy), 2 ≤ i ≤ k − 1, then a shortest (xk, xi)-path ((xi, x1)-path) becomes of length 3.
Figure 2.9 A semicomplete digraph of diameter 2 with no orientation of diameter 2.
Let H be a strong semicomplete bipartite digraph with the following partite sets V1 and V2 and arc set A: V1 = {x1, x2, x3}, V2 = {y1, y2, y3}, and
A = {x1y1, y1x1, x1y2, y3x1, x2y1, y2x2, y3x2, y1x3, x3y3, x3y2}. Let H = H − x1y1 and H = H − y1x1. It is easy to verify that diam(H) = 4 (in particular, dist(y2, y3) = 4) and that diam(H ) = diam(H ) = 5 (a shortest (x1, y3)-path in H and a shortest (y2, x1)-path in H are of length 5). The digraph H can be used to generate an inﬁnite family of semicomplete bipartite digraphs with the above property: replace x3, say, by a set of independent vertices.
2.11.2 The Gossip Problem ‘There are n ladies, and each one of them knows an item of scandal which is not known to any of the others. They communicate by telephone, and whenever two ladies make a call, they pass on to each other, as much scandals as they know at the time. How many calls are needed before all ladies know every scandal?’ This is the way the so-called gossip problem (apparently due to A. Boyd) was stated by Hajnal, Milner and Szemer´edi [392] in 1972. Since then numerous research papers on the topic have been published (see e.g.

2.11 Application: The One-Way Street and the Gossip Problems

81

surveys Fraigniaud and Lazard [248], Hedetniemi, Hedetniemi and Liestman [409], Hromkoviˇc, Klasing, Monien and Peine [433]). The main reason of this popularity is a high applicability of the gossip problem, especially in computer networks.
Actually the above quotation captures only a special case of the gossip problem. In a more general setting, this problem can be formulated as follows. Let G be a connected graph of order n. Every vertex v of G holds initially an item I(v) (diﬀerent from the items of other vertices). A vertex v can pass all items it currently has to all or some of its neighbours at one step. The aim is to calculate the minimum number of steps required to pass to every vertex u the set {I(v) : v ∈ V (G)} of all items.
The problem can be speciﬁed by allowing only one-way communications (like in radio communications over one frequency or email) when at every given step, for every pair u, v of adjacent vertices, either u can pass all items it holds to v, or v can pass all items it holds to u, but not both [248]. This speciﬁcation is often called half-duplex. The half-duplex gossip problem is N P-hard [248]. On the other hand, this problem is normally of interest, from the applications point of view, only for some special families of graphs such as the Cartesian products of cycles used in practice to build the Intel ∆prototype (see Rattner [622]) and many transputer-based machines (see May [557]). Several important families of graphs are discussed by Fraigniaud and Lazard [248]. The solutions obtained for them are based on an upper bound that includes, as the main term, the minimum diameter of an orientation of a given undirected graph [248].
In the half-duplex gossip problem, we may consider symmetric digraphs
↔
G instead of undirected graphs G. The half-duplex model can be extended from symmetric to arbitrary digraphs D, where a vertex v can pass all its items only to vertices u such that vu is an arc in D. The use of arbitrary digraphs may well be of interest when security concerns dictate that some of the directions of communications are forbidden.
We consider only the half-duplex model for a strong digraph D. Let s(D) stand for the minimum number of steps for gossiping in this model. Since the minimum number of steps to pass all items of vertex u to another vertex v is dist(u, v), we have s(D) ≥ diam(D).
Gutin and Yeo [378] proved the following simple upper bound on s(D), which is an improvement on the similar upper bound in [248] even in the case of symmetric digraphs.
Theorem 2.11.3 Let D = (V, A) be a strong digraph. Then
s(D) ≤ min{2 rad(D), diammin(D)}.
Proof: Let H be an orientation of D of minimum diameter. Let every vertex in D pass its items to all out-neighbours in H. Repeat this iteration till every vertex holds all items. Clearly, the number of iterations required is the length of the longest path in H, i.e. s(D) ≤ diam(H) = diammin(D).

82 2. Distances
Let x be a vertex of D such that rad(D) = (dist(x, V ) + dist(V, x))/2. Let Fx+ (Fx−) be a BFS tree of D rooted at x (the converse of a BFS tree of the converse of D rooted at x). In the ﬁrst dist(V, x) steps pass items from vertices to their out-neighbours along arcs of Fx−. Thus, in the end, x holds all items. During the next dist(x, V ) steps pass items from vertices to their out-neighbours along arcs of Fx+. Hence, in the end, every vertex holds all items. Thus, s(D) ≤ 2 rad(D).
The bound of Theorem 2.11.3 is of special interest when D satisﬁes diam(D) = diammin(D). In this case, a minimum diameter orientation of D provides an optimal solution to the gossip problem. Thus, an orientation H of diameter possibly exceeding diam(D) by a small constant leads to a good approximate solution for the gossip problem (given H, the upper bound min{2rad(D), diam(H)} for s(D) can be computed in polynomial time). In the previous subsection, we saw that slight modiﬁcations of diam(D) = diammin(D) hold for some important families of digraphs.
2.12 Application: Exponential Neighbourhood Local Search for the TSP
The aim of this section is to introduce a new approach to obtain near optimal solutions for the travelling salesman problem (TSP). The main idea is to ﬁnd, in polynomial time, a best solution in a specially constructed set of solutions of exponential cardinality. This idea can be applied not only to the TSP, but also to other N P-hard combinatorial optimization problems. This general idea was used already in the papers by Sarvanov and Doroshko [651, 652] and Gutin [354].
2.12.1 Local Search for the TSP
↔
The TSP is stated as follows. Given a weighted complete digraph (Kn, c),
↔
ﬁnd a hamiltonian cycle in Kn of minimum cost. In this section and some others where the TSP is considered, we will often call a hamiltonian cycle
↔↔
in Kn a tour; it is also assumed that V (Kn) = {1, 2, . . . , n}. The TSP is a well-studied N P-hard problem with numerous applications (see, e.g., the books by Cook, Cunningham, Pulleyblank and Schrijver [166], Lawler, Lenstra, Rinooykan and Shmoys [511], Reinelt [632] and the paper [466] by Johnson and McGeoch). Since the TSP is N P-hard, no polynomial time exact algorithms to solve the problem are known. However, there is a welltested approach (see, e.g., Johnson and McGeoch [466]) that provides near optimal solutions (which is suﬃcient in most applications) in reasonable time for large-scale instances of the TSP. The approach consists of two phases. In the ﬁrst phase, a construction heuristic quickly produces a solution which

2.12 Application: Exponential Neighbourhood Local Search for the TSP

83

is normally far from optimal but is much better than a random solution7. (Some construction heuristics for the TSP are described later in this book.) In the second phase, a local search heuristic is used. During every iteration of this heuristic, a neighbourhood of a current best solution is considered and a better solution (in certain cases, the best solution in the neighbourhood) is found. When no better solution in the neighbourhood exists the heuristic terminates. (There are several variations of the above description [466].)
In many cases, so-called 3-Opt is applied. In 3-Opt, the neighbourhood of
↔
a hamiltonian cycle C consists of all tours in Kn obtained from C by deleting three arcs and then adding three arcs. (This notion can be easily generalized to k-Opt for every ﬁxed k ≥ 3.) The cardinality of this neighbourhood is certainly Θ(n3). Also, O(n3) time is required to completely search this neighbourhood (i.e., to ﬁnd the best hamiltonian cycle) if we look at the tours of the neighbourhood one by one. Certainly, the cubic time is unacceptable for large-scale instances of the TSP. However, 3-Opt is widely used in practice since usually only a small fraction of the neighbourhood is searched before a better solution is found. Despite the fact that 3-Opt allows one to ﬁnd quite good solutions to large-scale instances of the TSP, the way of looking at the solutions one by one seems rather ineﬃcient.
Therefore, in the 1980’s, Sarvanov and Doroshko [651, 652] and Gutin [354] introduced independently some neighbourhoods of exponential size where the best solution can be obtained in polynomial time. Recently, various neighbourhoods of exponential size for the TSP were suggested and investigated (see, e.g., Balas and Simonetti [37], Burkard, Deineko and Woeginger [137], Glover [318], Glover and Punnen [320], Potts and Velde [611] and Punnen [616]). The paper [188] by Deineko and Woeginger is an excellent survey on the topic. Balas and Simonetti [37] and Carlier and Villon [448] constructed and implemented local search algorithms which use exponential neighbourhoods. Their results are very encouraging. They also show the necessity of further theoretical research on the topic.
There are diﬀerent types of neighbourhoods for the TSP; many of them can be found in [188, 466]. The following deﬁnition of a neighbourhood structure for the TSP is due to Deineko and Woeginger [188]. In this deﬁnition, we assume that every tour T = π(1)π(2) . . . π(n)π(1) starts from the vertex 1, i.e., π(1) = 1. Therefore, we will identify T with the permutation π(1)π(2) . . . π(n). A neighbourhood structure consists of a neighbourhood N (T ) for every tour T such that the neighbourhood N (π(1)π(2) . . . π(n)) = π ∗N (12 . . . n), where π(1) = 1 and ∗ stands for the permutation product (applied from right to left). This deﬁnition is somewhat restrictive (for example, it requires the cardinality of neighbourhoods to be the same) but reﬂects the very important ‘shifting’ property of neighbourhoods which distinguish them
7 For certain families of instances of the TSP, some construction heuristics produce near optimal tours by themselves; see, e.g., Glover, Gutin, Yeo and Zverovich [319]. In such cases local search is perhaps not required.

84 2. Distances

from arbitrary sets of tours. Another important property of neighbourhood

N (T ) of a tour T , which is usually imposed, is that the best tour of N (T )

can be computed in time polynomial in n. This is necessary to guarantee

an eﬃcient local search. Neighbourhoods satisfying this property are called

polynomially searchable.

The largest known polynomially searchable neighbourhoods are those of

size

2Θ(n log n)

(note

that

there

are

(n − 1)!

tours

in

↔
Kn

and

(n − 1)!

=

2Θ(n log n) as well). Such neighbourhoods were introduced independently in

[354, 616, 652]. Punnen’s neighbourhoods [616] are the most general among

them. We will consider a special family of these neighbourhoods, which is

a slight generalization of neighbourhoods in [354, 652]. We call those neigh-

bourhoods the assignment neighbourhoods. (See Subsection 2.12.3 for the

deﬁnition of these neighbourhoods.) Some features of these neighbourhoods

were investigated in [369]. Gutin [369] proved that, for every β > 0, there is a

neighbourhood of cardinality 2Θ(n log n) that can be searched in time O(n1+β).

Deineko and Woeginger [188] demonstrated that to search a neighbourhood

of cardinality 2Θ(n log n) one needs time Ω(n1+β), where β > 0.

Since the diameter of neighbourhood structure digraphs (deﬁned later) is

of certain importance for local search, this parameter has also been studied.

We present some recent results on the topic in Subsection 2.12.4.

2.12.2 Linear Time Searchable Exponential Neighbourhoods for the TSP
In this section, we demonstrate how to use the algorithm from Subsection 2.3.2 to search some exponential neighbourhoods. We introduce a neighbourhood of exponential size based on one of the approaches described by Glover
↔
and Punnen [320]. Assume that n, the order of (Kn, c), equals one modulo three (it is easy to see how to modify our approach when n does not equal one mK↔ond. uDloeﬁtnhereae)n.eLigehtbCou=rhvovo10dv11ovf12Cv20va2s1vf22ol.l.o.wvst0:vt1vt2v be a hamiltonian cycle of
N B(C) = {vv1s1 v1s1+1v1s1+2 . . . vtst vtst+1vtst+2v : si ∈ {0, 1, 2}, i = 1, 2, . . . , t},
where all superscripts are taken modulo three. Clearly, |N B(C)| = 3 n/3 . We show how to ﬁnd the best hamiltonian cycle in N B(C) in time O(n).
Construct an auxiliary weighted digraph D = (V, A, w) as follows:
V = {p, q, u0i , u1i , u2i : i ∈ {1, 2, . . . , t}},
A = {puj1, ukt q, uji uki+1 : j, k ∈ {0, 1, 2}, i ∈ {1, 2, . . . , t − 1}}. Moreover, w(p, uj1) = c(v, v1j) + c(v1j, v1j+1) + c(v1j+1, v1j+2) for every j ∈ {0, 1, 2},
w(uji , uki+1) = c(vij+2, vik+1) + c(vik+1, vik++11) + c(vik++11, vik++12)

2.12 Application: Exponential Neighbourhood Local Search for the TSP

85

for every i ∈ {1, 2, . . . , t − 1}, j, k ∈ {0, 1, 2}, and w(ukt , q) = c(vtk+2, v) for every k ∈ {0, 1, 2}.
All (p, q)-paths in D are of the form pus11 us22 . . . ustt q, where si ∈ {0, 1, 2}, i = 1, 2, . . . , t. Therefore, the mapping
φ : pus11 us22 . . . ustt q→vv1s1 v1s1+1v1s1+2 . . . vtst vtst+1vtst+2v
is a bijection from the set of (p, q)-paths in D into N B(C). Moreover, for every (p, q)-path R in D, we have w(R) = c(φ(R)). Hence, to ﬁnd a minimum weight hamiltonian cycle in N B(C), it suﬃces to compute a shortest (p, q)-path in D. This can be done in time O(|A|) = O(n) by the algorithm described in Subsection 2.3.2. Moreover, since we can readily give an acyclic ordering of vertices in D, we do not need the ﬁrst phase of the algorithm in Subsection 2.3.2.

2.12.3 The Assignment Neighbourhoods

The purpose of this subsection is to introduce the assignment neighbour-

hoods. Let

C

=

x1x2 . . . xkx1

be

a

cycle

in

K↔n.

The

operation

of

removal

of

a vertex xi (1 ≤ i ≤ k) results in the cycle x1x2 . . . xi−1xi+1 . . . xkx1 (thus,
↔
removal of xi is not deletion of xi from C). Let y be a vertex of Kn not in

C. The operation of insertion of a vertex y into an arc xixi+1 results in the

cycle x1x2 . . . xiyxi+1 . . . xkx1. An insertion of y into C is an insertion of y

into xixi+1 for some 1 ≤ i ≤ k. For a set Z = {z1, . . . , zs} (s ≤ k) of vertices

not in C, an insertion of Z into C means an insertion of z1 in C followed

by an insertion of z2 into the obtained cycle, etc. Furthermore, we require

that, in the cycle obtained after insertion of all vertices of Z into C, no pair

of vertices from Z is adjacent.
↔
Let T = x1x2 . . . xnx1 be a tour in Kn and let Z = {xi1 , xi2 , . . . , xis } be a set of pairwise non-adjacent vertices of T . The assignment neighbourhood

N (T, Z) of T with respect to Z consists of the tours that can be obtained from

T by removal of the vertices from Z one by one followed by an insertion of Z

into the cycle derived after the removal. For example, for H = x1x2x3x4x5x1, N (H, {x1, x3}) = {x2xix4xj x5x2, x2xix4x5xj x2, x2x4xix5xj x2 : {i, j} = {1, 3}}. Let T = x1x2 . . . xnx1 and s = |Z|; then it is easy to verify that

|N (T, Z)| = (n − s)!/(n − 2s)!

(clearly, we have n − s ≥ s). We show that the best tour in N (T, Z) can be found in time O(n3) [369,
616]. Let C = y1y2 . . . yn−sy1 be the cycle obtained from T after removal of Z and let Z = {z1, z2, . . . , zs}. Let φ be an injective mapping from Z to Y = {y1, y2, . . . , yn−s}. If we insert some zi into an arc yjyj+1, then the weight of C will be increased by c(yjzi) + c(ziyj+1) − c(yjyj+1). Therefore,

86 2. Distances

if we insert every zi, i = 1, 2, . . . , s, into yφ(i)yφ(i)+1, the weight of C will be increased by
s
f (φ) = (c(yφ(i)zi) + c(ziyφ(i)+1) − c(yφ(i)yφ(i)+1)).
i=1
Clearly, to ﬁnd a tour of N (T, Z) of minimum weight, it suﬃces to minimize f (φ) on the set of all injections φ from Z to Y. This can be done using the following weighted complete bipartite graph B. The partite sets of B are Z and Y , and the weight of an edge ziyj is set to be c(yjzi) + c(ziyj+1) − c(yj yj+1).
By the deﬁnition of B, every maximum matching M of B corresponds to an injection φM from Z to Y. Moreover, the weights of M and φM coincide. A minimum weight maximum matching in B can be found by solving the assignment problem (see Section 3.12). Therefore, in O(n3) time, we can ﬁnd the best tour in N (T, Z).

2.12.4 Diameters of Neighbourhood Structure Digraphs for the TSP

↔
Given a neighbourhood N (T ) for every tour T in Kn (i.e., some neighbour-

hood structure), the corresponding neighbourhood digraph (of order

(n

−

1)!)

is

a

directed

graph

with

vertex

set

consisting

of

all

tours

in

↔
Kn

and

arc set of pairs (T , T ) such that T ∈ N (T ). When all neighbourhoods

N (T ) are polynomially searchable, the corresponding digraph is polyno-

mially searchable. The diameter of the neighbourhood digraph is one of

the most important characteristics of the neighbourhood structure and the

corresponding local search scheme [188, 318, 448]. Clearly, a neighbourhood

structure with a neighbourhood digraph of smaller diameter seems to be more

useful than that with a neighbourhood digraph of larger diameter, let alone

a neighbourhood structure whose digraph has inﬁnite diameter (in the last

case, some tours are not ‘reachable’ from the initial tour during local search

procedure).

For example, the neighbourhood digraph for polynomially searchable

‘pyramidal’ neighbourhoods introduced by Carlier and Villon [448] has di-

ameter dn = Θ(log n). (In [448], it was proved that dn ≤ log n, the lower

bound dn = Ω(log n) follows from the facts that the cardinality of pyramidal neighbourhoods is 2Θ(n) [448] and the total number of tours is 2Θ(n log n).)

In this subsection, using the assignment neighbourhoods, we construct

certain polynomially searchable ‘compound’ neighbourhoods whose digraphs

have diameter bounded by a small constant. We follow the presentation of

Gutin and Yeo [375].

For a positive integer k ≤ n/2, the neighbourhood digraph Γ (n, k) has a vertex set formed by all tours in K↔n. In Γ (n, k), a tour T dominates a

2.12 Application: Exponential Neighbourhood Local Search for the TSP

87

tour R if there exists a set Z of k non-adjacent vertices of T such that

R ∈ N (T, Z). Clearly, T dominates R if and only if R dominates T , i.e.,

Γ (n, k) is symmetric. We denote by distk(T, R) the distance from T to R in

Γ (n, k).

For

a

tour

T

in

↔
Kn

,

let

Ink

denote

the

family

of

all

sets

of

k

non-adjacent

vertices in T . Clearly, the neighbourhood Nk(T ) of a tour T in Γ (n, k) equals

∪Z∈Ink N (T, Z).
Thus if, for some k, i(n, k) = |Ink| is polynomial in n, then since N (T, Z) is polynomially searchable Γ (n, k) is polynomially searchable. Otherwise, Γ (n, k) may be non-polynomially searchable. Since polynomially searchable Γ (n, k) are our main interest, we start by evaluating i(n, k) in Theorem 2.12.1. It follows from Theorem 2.12.1 that, for ﬁxed k, i(n, k) and i(n, n − k) are polynomial.

Theorem 2.12.1 [375] i(n, k) =

n−k k

+

n−k−1 k−1

.

Corollary 2.12.2 If p is a non-negative ﬁxed integer (p < n/2 ), then Γ (n, p + 1) and Γ (n, (n − p)/2 ) are polynomially searchable.

Proof: This follows from Theorem 2.12.1 and

m k

=

m m−k

.

It can be shown (Exercise 2.47) that for n is even Γ (n, n/2) consists of an

exponential number of strongly connected components and, thus, its diame-
ter is inﬁnite (for example, x1x2 . . . xnx1 and x1 . . . xn−2xnxn−1x1 belong to diﬀerent strong components of this digraph). Therefore, below we consider

Γ (n, k) for k < n/2 only.

Theorem 2.12.3 (Gutin and Yeo) [375] diam(Γ (n, (n − 1)/2 )) ≤ 4.

Proof: We assume that n ≥ 5, as for 2 ≤ n ≤ 4 this claim can be veriﬁed

directly.

Let
↔

C

=

x1x2 . . . xnx1

and

T

=

y1y2 . . . yny1

be

a

pair

of

distinct

tours in Kn. Put k = (n − 1)/2 . We will prove that distk(T, C) ≤ 4, thus

showing that diam(Γ (n, k)) ≤ 4.

We call a vertex v even (odd) with respect to C if v = xj, where 1 ≤
↔
j ≤ n and j is even (odd). For a set of vertices X of Kn, let Xodd (Xeven) be the set of odd (even) vertices in X.

First we consider the case of even n, i.e. k = n/2−1. The proof in this case

consists of two steps. At the ﬁrst step, we show that there exists a tour T

whose vertices alternate in parity and such that distk(T, T ) ≤ 2. Moreover, T has a pair of consecutive vertices which are also consecutive in C. At the

second step, we will see that distk(T , C) ≤ 2 as the odd and even vertices of T (except for the vertices of the above pair) can be separately reordered

to form C. Thus, we will conclude that distk(T, C) ≤ 4. Now, we proceed to the proof.

88 2. Distances

Clearly, T has a pair yj, yj+1 such that yj+1 is odd and yj is even. Let
Z = {yj+2, yj+4, . . . , yj+2k}
and let |Zodd| = s. Remove the vertices of Z from T and then insert the s odd vertices of Z into the arcs yj+1yj+3, . . . , yj+2s−1yj+2s+1 and k−s even vertices of Z into the arcs yj+2s+1yj+2s+3, yj+2s+3yj+2s+5, . . . , yj+2k−1yj+2k+1. We have obtained a tour

T = yj yj+1vj+2yj+3vj+4yj+5 . . . yj+2k−1vj+2kyj+2k+1yj ,

where {vj+2, . . . , vj+2k} = Z.

of

Let Z = {yj+3, yj+5, . . . , yj+2k+1} odd vertices in V (K↔n)−{yj, yj+1} is

and let |Zeven| = t. Since the equal to k = |Zodd|+|Zodd| =

number s + k − t,

we obtain that s = t. Remove Z from T and insert the t even vertices of Z

into the arcs yj+1vj+2, vj+2vj+4, vj+6vj+8, . . . , vj+2s−2vj+2s and the k−s odd vertices of Z into the arcs vj+2s+2vj+2s+4, . . . , vj+2k−2vj+2k, vj+2kyj . We have derived a tour T = u1u2 . . . unu1. Clearly, the vertices of T alternate in parity, i.e., for every m, if um is odd, then um+1 is even.
Now we prove that the processes of insertion of Z and Z can be performed

in such a way that T contains a pair of consecutive vertices which are also

consecutive in C (i.e. there exist indices p and q such that up = xq and up+1 = xq+1). Since 1 < |Z | < n, there exists a pair of distinct indices i, m such that xi, xm ∈ Z and xi+1, xm−1 ∈ Z . Without loss of generality, we assume that i is odd. We consider two cases.

Case 1: |Zodd| ≥ 2. We prove that we may choose index q = i. Since xi+1 ∈ Z and i + 1 is even, either yj = xi+1 or xi+1 ∈ Zeven. If xi+1 ∈ Zeven, in the process of insertion of Z, we insert xi+1 into yj+2k−1yj+2k+1, i.e. xi+1 = vj+2k. In the process of insertion of Z , we insert xi into vj+2kyj if xi+1 = yj or into vj+2k−2vj+2k, otherwise (i.e. xi+1 = vj+2k).

Case 2: |Zodd| = 1. Thus, m is even. Since n ≥ 6, it follows that |Zeven| ≥ 2. Analogously to Case 1, one may take q = m − 1.

Therefore, without loss of generality, we assume that un−1 = xi, un = xi+1. Since {u2, u4, . . . , u2k, xi+1} = Ceven, we can delete {u2, u4, . . . , u2k} from T and insert it into the obtained cycle to get the tour C given by
C = u1xi+3u3xi+5u5 . . . u2k−1xi−1un−1xi+1u1. Analogously, we can delete {u1, u3, . . . , u2k−1} from C and insert it into the obtained cycle to get C. We conclude that distk(T, C) ≤ 4.

Now let n be odd; then k = (n − 1)/2. Notice that, without loss of gen-

erality, we may assume that xn = yn (to ﬁx the initial labellings of T and

C). Consider tours X = x1x2 . . . xnxn+1x1 and Y = y1y2 . . . yn−1ynyn+1y1 in

↔
K n+1

,

where

yn

= xn,

yn+1

= xn+1.

If

we

assume

that

j

= n,

j + 1 = n + 1,

we can obtain, analogously to the case of even n, a tour Y such that the

2.13 Exercises

89

vertices of Y alternate in parity (with respect to their indices in X), xn+1 follows xn in Y and distk(Y, Y ) ≤ 2. Now if i = n and i + 1 = n + 1, then we can show, similarly to the case of even n, that distk(Y , X) ≤ 2 and, thus, distk(Y, X) ≤ 4. Notice that, in the whole process of constructing X from Y , we have never removed xn and xn+1 or inserted any vertex into the arc xnxn+1. Thus, we could contract the arc xnxn+1 to xn and obtain C from T in four ‘steps’. This shows that distk(T, C) ≤ 4.
We can extend Theorem 2.12.3 using the following.

Theorem 2.12.4 [375] Let distk(T, C) = 1 for tours T and C and let m be any integer smaller than k. Then, distm(T, C) ≤ k/m .
Corollary 2.12.5 For every positive m ≤ (n − 1)/2 ,

diam(Γ (n, m)) ≤ 4 (n − 1)/2 /m .

In particular, if p is a positive ﬁxed integer, then diam(Γ (n, (n − p)/2 )) ≤ 8 provided n ≥ 2p + 1.

Proof: The ﬁrst inequality follows directly from the above two theorems and the triangle inequality for distances in graphs. It also implies the second one. Indeed, n ≥ 2p + 1 infers

(n − 1)/2 (n − p − 1)/2

≤

2

and

so

Q

=

(n − 1)/2 (n − p)/2

≤ 2.

Hence, Q ≤ 2.

2.13 Exercises
2.1. Formulate the shortest (s, t)-path problem as a linear programming problem with integer variables. Hint: use a variable for each arc.
2.2. (−) Show by an example that a minimum weight out-branching with root s may not be a shortest path tree from s.
2.3. (−) Illustrate the shortest path algorithm for acyclic digraphs (Subsection 2.3.2) on the acyclic digraph in Figure 2.10.
2.4. Finding the longest paths from a ﬁxed vertex to all other vertices in a weighted acyclic digraph. Develop a polynomial algorithm for ﬁnding the longest paths from a ﬁxed vertex s to all other vertices in an arbitrary weighted acyclic digraph. Preferably your algorithm should run in linear time.
2.5. Find the longest paths from s to all other vertices in the acyclic digraph in Figure 2.10, e.g. using the algorithm that you designed in Exercise 2.4.

90 2. Distances

-2 2
s 3

5
3 0
-1 1
4

-5 14

10

63 1

2 8

Figure 2.10 A weighted acyclic digraph.

2.6. Finding a longest path in a weighted acyclic digraph in linear time. Show how to ﬁnd a longest path in a weighted acyclic digraph D in linear time. Hint: use a variant of the dynamic programming approach taken in (2.3), or construct a superdigraph D of D such that one can read out a longest path in D from a shortest path tree from some vertex s in D .
2.7. (−) Execute Dijkstra’s algorithm on the digraph in Figure 2.11.

72

5 s
1

1 10 4 11

7 3
12

21 4

1

Figure 2.11 A digraph with non-negative weights on the arcs.

2.8. Complete the description of Dijkstra’s algorithm in Subsection 2.3.3 such that not only the distances from s to the vertices of D are computed, but also the actual shortest paths are found.
2.9. Complete the description of the Bellman-Ford-Moore algorithm in Subsection 2.3.4 such that not only the distances from s to the vertices of D are computed, but also the actual shortest paths are found.
2.10. (−) Execute the Bellman-Ford-Moore algorithm on the digraph in Figure 2.12. Perform the scanning of arcs in lexicographic order.
2.11. Negative cycle detection using the Bellman-Ford-Moore algorithm. Prove Theorem 2.3.10.
2.12. Show how to detect a negative cycle in the digraph in Figure 2.13 using the extension of the Bellman-Ford-Moore algorithm.
2.13. Show by an example that Dijkstra’s algorithm may not ﬁnd the correct distances if it is applied to a weighted directed graph D where some arcs have negative weights, even if there is no negative cycle in D.

2.13 Exercises

91

a 7b

5 s
1

1 -1

4

f 11

7 3

-5

7 c

d

e

Figure 2.12 A digraph with weights on the arcs and no negative cycles.
a 7b

5 s
1

1 -1
1 f1
-1 3

2 -5

7 c

d

e

Figure 2.13 A weighted digraph with a negative cycle.

2.14. (−) Show how to implement the Floyd-Warshall algorithm so that it runs in time O(n3).
2.15. Prove Theorem 2.3.10.
2.16. Re-weighting the arcs of a digraph. Let D = (V, A, c) be a weighted digraph and let π : V → R be a function on the vertices of D. Deﬁne a new weight function c∗ by c∗(u, v) = c(u, v) + π(u) − π(v) for all v ∈ V . Let dist∗ be the distance function with respect to D∗ = (V, A, c∗), and let P be an (x, y)-path in D. Prove that P is a shortest (x, y)-path in D (with respect to c) if and only if P is a shortest (x, y)-path in D∗ (with respect to c∗). Hint: consider what happens to the length of a path after the transformation above.
2.17. (−) Consider the weights introduced in Exercise 2.16. Show that the weight of a cycle in D is unchanged under the transformation from D = (V, A, c) to D∗ = (V, A, c∗).
2.18. Getting rid of negative weight arcs by re-weighting. Let D = (V, A, c) be a weighted digraph with some arcs of negative weight, but with no negative cycle. Let D = (V, A , c ) be obtained from D by adding a new vertex s and all arcs of the form sv, v ∈ V , and setting c (s, v) = 0 for all v ∈ V and c (u, v) = c(u, v) for all u, v ∈ V . Let π(v) = distD (s, v) for all v ∈ V . Deﬁne c∗ by c∗(u, v) = c(u, v) + π(u) − π(v) for all u, v ∈ V . Prove that c∗(u, v) ≥ 0 for all u, v ∈ V .

92 2. Distances

2.19. Johnson’s algorithm for shortest paths. Show that by combining the observations of Exercises 2.16-2.18, one can obtain an O(n2 log n + nm) algorithm for the all pairs shortest path problem in digraphs with no negative cycles (Johnson [463]).

2.20. Let M = [mij] be the adjacency matrix of a digraph D = (V, A) with V = {1, 2, . . . , n} and let k be a natural number. Prove that there is an (i, j)-walk
of length k in D if and only if the (i, j) entry of the kth power of M is positive.

2.21. Show how to compute the kth power of the adjacency matrix of a digraph of order n in time O(P (n) log k), where P (n) is the time required to compute the product of two n × n matrices.

2.22. Finding a shortest cycle in a digraph. Describe a polynomial algorithm to ﬁnd the shortest cycle in a digraph. Hint: use Exercise 2.20.

2.23. (+) The generalized triangle-inequality. An arc-weighted digraph D = (V, A, c) satisﬁes the generalized triangle-inequality if, whenever P and Q are (x, y)-paths for some x, y ∈ V (D) we have that |A(P )| ≤ |A(Q)| implies that c(P ) ≤ c(Q). Describe a polynomial algorithm to check whether a given arc-weighted digraph satisﬁes the generalized triangle-inequality.

2.24. The generalized triangle-inequality was deﬁned above. Show that one can ﬁnd the shortest path from a given vertex to all other vertices in O(n + m) time in a weighted digraph which satisﬁes the generalized triangle-inequality.

2.25. Prove Proposition 2.4.2.

2.26. (−) Draw the Goldberg digraph D(12, 15) (see the proof of Theorem 2.4.4).

2.27. (−) Derive a formula for the maximum diameter of an orientation of the complete k-partite graph Kn1,n2,...,nk . Hint: apply Theorem 2.5.1.
2.28. Short cycles through an edge. Let G = (V, E) be a 2-edge-connected graph and let uv ∈ E. Prove that G has a cycle of length at most 2dist(u, V )+ 1 through the edge uv. Hint: use the (undirected) distance classes from u and v as well as the fact that uv is not a bridge.

2.29. (−) Let G1, G2, . . . , Gp be connected undirected graphs. Prove that

p

diam(Πip=1Gi) =

diam(Gi).

i=1

2.30. Prove that ρ(Cp × Cq) > 0 when both p and q are odd (p, q ≥ 3) (West, see [500]).
2.31. Construct orientations of P3 × P6 and P3 × P7 of diameter 8.
2.32. Prove Theorem 2.9.5.
2.33. (−) For every odd number n ≥ 3, give an example of a tournament T of order n, in which all vertices are 2-kings.
2.34. (−) Let T be a tournament on 4 vertices. Show that T contains a vertex which is not a 2-king.
2.35. Prove Theorem 2.10.1 (Moon [571]).

2.13 Exercises

93

2.36. (−) Describe an inﬁnite family of semicomplete digraphs, in which every member has exactly two 2-kings.
2.37. Prove that the tournament Tn in Subsection 2.10.1 has only three 2-kings for n ≥ 5.
2.38. Prove that a multipartite tournament T has a ﬁnite out-radius if and only if T contains at most one vertex of in-degree zero. Hint: use Proposition 2.1.1.
2.39. (−) Characterize 2-kings in multipartite tournaments.
2.40. 3-kings in quasi-transitive digraphs. Show that every quasi-transitive digraph of ﬁnite radius has a 3-king (Bang-Jensen and Huang [80]).
2.41. Prove Theorem 2.9.5.
2.42. Prove Theorem 2.12.1.
2.43. Prove Theorem 2.12.4.
2.44. Prove that, in the half-duplex model of gossiping (see Section 2.11), s(G) ≤ diam(G) + 1 for every connected bipartite graph G (Krumme, Cybenko and Venkataraman [504]).
2.45. Using the upper bound of the previous exercise, prove that s(C2k) = k + 1 for every integer k ≥ 2.
2.46. (−) Evaluate the cardinality of a neighbourhood in k-Opt for the TSP (k ≥ 3).
2.47. (−) Poor quality exponential neighbourhoods. Show that, if n is even, then Γ (n, n/2) (see Subsection 2.12.4) consists of an exponential number of strongly connected components and, thus, its diameter is inﬁnite.
2.48. (−) Find the cardinality of the assignment neighbourhood N (T, Z) for the TSP with n vertices and k = |Z| (Gutin [369]).
2.49. Maximizing exponential neighbourhoods. Find the value of k = |Z| for which the cardinality of the assignment neighbourhood N (T, Z) for the TSP with n vertices is maximum (Gutin [369]).

3. Flows in Networks
The purpose of this chapter is to describe basic elements of the theory and applications of network ﬂows. This topic is probably the most important single tool for applications of digraphs and perhaps even of graphs as a whole. At the same time, from a theoretical point of view, ﬂow problems constitute a beautiful common generalization of shortest path problems and problems such as ﬁnding internally (arc)-disjoint paths from a given vertex to another. The theory of ﬂows is well understood and fairly simple. This, combined with the enormous applicability to real-life problems, makes ﬂows a very attractive topic to study. From a theoretical point of view, ﬂows are well understood as far as the basic questions, such as ﬁnding a maximum ﬂow from a given source to a given sink or characterizing the size of such a ﬂow, are concerned. However, the topic is still a very active research ﬁeld and there are challenging open problems such as deciding whether an O(nm) algorithm1 exists for the general maximum ﬂow problem.
Several books deal almost exclusively with ﬂows see e.g. the books [7] by Ahuja, Magnanti and Orlin, [199] by Dolan and Aldous, the classical text [246] by Ford and Fulkerson and [578] by Murty. In particular, [7] and [578] contain a wealth of applications of ﬂows. In this chapter we can only cover a very small part of the theory and applications of network ﬂows, but we will try to illustrate the diversity of the topic and show several applications of a practical as well as theoretical nature. Many of the results given in this chapter will be used in several other chapters such as those on connectivity and hamiltonian cycles.
3.1 Deﬁnitions and Basic Properties
A network is a directed graph D = (V, A) associated with the following functions on V × V : a lower bound lij ≥ 0, a capacity uij ≥ lij and a cost cij for each (i, j) ∈ V × V . These parameters satisfy the following requirement:
1 Here and everywhere in this chapter n is the number of vertices and m the number of arcs in the network under consideration.

96 3. Flows in Networks

For every (i, j) ∈ V × V, if ij ∈ A, then lij = uij = 0.

(3.1)

In order to simplify notation in this chapter we also make the assumption that

cij = −cji

∀(i, j) ∈ V × V.

(3.2)

This assumption may seem restrictive but it is purely a technical convention to make some of the following deﬁnitions simpler (in particular, the deﬁnition of costs in the residual network in Subsection 3.1.2). When it comes to implementing algorithms for various ﬂow problems involving costs, this assumption can easily be avoided (Exercise 3.2). Finally we assume that if there is no arc between i and j (in any direction) then cij = 0.
In some cases we also have a function b : V → R called a balance vector which associates a real number with each vertex of D. We will always assume that

b(v) = 0.

(3.3)

v∈V

We use the shorthand notation N = (V, A, l, u, b, c) to denote a network with corresponding digraph D = (V, A) and parameters l, u, b, c. If there are no costs speciﬁed, or there is no prescribed balance vector, then we omit the relevant letters from the notation. Note that whenever we consider a network N = (V, A, l, u, b, c) we also have a digraph, namely the digraph D = (V, A) that we obtain from N by omitting all the functions l, u, b, c.
For a given pair of not necessarily disjoint subsets U, W of the vertex set of a network N = (V, A, l, u) and a function f on V × V we use the notation f (U, W ) as follows (here fij denotes the value of f on the pair (i, j)):

f (U, W ) =

fij .

i∈U,j∈W

(3.4)

We will always make the realistic assumption that n = O(m) which holds for all interesting networks. In fact, almost always, the networks on which we work will be connected as digraphs.

3.1.1 Flows and Their Balance Vectors
A ﬂow in a network N is a function x : A → R0 on the arc set of N . We denote the value of x on the arc ij by xij. For convenience, we will sometimes think of x as a function of V × V and require that xij = 0 if ij ∈ A (see e.g. the deﬁnition of residual capacity in (3.7)). An integer ﬂow in N is a ﬂow x such that xij ∈ Z0 for every arc ij. For a given ﬂow x in N the balance vector of x is the following function bx on the vertices:

3.1 Deﬁnitions and Basic Properties

97

bx(v) =

xvw −

xuv ∀v ∈ V.

vw∈A

uv∈A

(3.5)

That is, bx(v) is the diﬀerence between the ﬂow on arcs with tail v and the ﬂow on arcs with head v. We classify vertices according to their balance values
(with respect to x). A vertex v is a source if bx(v) > 0, a sink if bx(v) < 0 and otherwise v is balanced (bx(v) = 0). When there is no confusion possible (in particular when there is only one ﬂow in question) we may drop the index
x on b and say that b is the balance vector of x.
A ﬂow x in N = (V, A, l, u, b, c) is feasible if lij ≤ xij ≤ uij for all ij ∈ A and bx(v) = b(v) for all v ∈ V . If no balance vector is speciﬁed for the network, then a feasible ﬂow x is only required to satisfy lij ≤ xij ≤ uij for all (i, j) ∈ A.
The cost of a ﬂow x in N = (V, A, l, u, c) is given by

cT x =

cij xij .

ij∈A

See Figure 3.1 for an example of a feasible ﬂow.

(3.6)

b (2, 4, 5, 6)

(1, 3, 4, 3)

d

(0, 3, 3, 2)

a (1, 1, 4, 1)

(0, 0, 3, 1) (3, 3, 3, 1)

(5, 6, 8, 4)

f

(4, 5, 7, 8)

c

(2, 2, 4, 1)

e

Figure 3.1 A network N = (V, A, l, u, c) with a feasible ﬂow x speciﬁed. The speciﬁcation on each arc ij is (lij, xij, uij, cij). The cost of the ﬂow is 109.

We point out that whenever the lower bounds are all zero (an assumption that is not a restriction of the modeling power of ﬂows as we shall see in Section 3.2) we will always assume that if iji is a 2-cycle of a network N and x is a ﬂow in N , then at least one of xij, xji is equal to zero. We call such a ﬂow a netto ﬂow in N . The practical motivation for this restriction is that very often one uses ﬂows to model items (water, electricity, telephone messages, etc.) that move from one place to another in time. Here it makes perfect sense to say that sending 3 units from i to j and 2 units from j to i is the same as sending 1 unit from i to j and nothing from j to i (we say

98 3. Flows in Networks

that 2 of the units cancel out). In some of the deﬁnitions below it is easier

to work with netto ﬂows.

The notion of ﬂows generalize that of paths in directed graphs. Indeed, if

P is an (s, t)-path in a digraph D = (V, A), then we can describe a feasible

ﬂow x in the network N = (V, A, l ≡ 0, u ≡ 1) by taking xij = 1 if ij is an arc of P and xij = 0 otherwise. This ﬂow has balance vector

  1 if v = s

bx(v)

=



−1 0

if v = t otherwise.

We can also see that if there are weights on the arcs of D and we let N inherit these weights as costs on the arcs, then the cost of the ﬂow deﬁned above is equal to the length (weight) of P . Hence the shortest path problem is a special case of the minimum cost ﬂow problem (which is studied in Section 3.10) with respect to the balance vector described above (here we implicitly used Theorem 3.3.1 for the other direction of going from a ﬂow to an (s, t)path in D.) In a very similar way we can also see that ﬂows generalize cycles in digraphs. It is an important and very useful fact about ﬂows that in some sense one can also go the other way. As we shall see in Theorem 3.3.1, every ﬂow in a network with n vertices and m arcs can be decomposed into no more than n + m ﬂows along simple paths and cycles. Furthermore, paths and cycles play a fundamental role in several algorithms for ﬁnding optimal ﬂows where the optimality is with respect to measures we deﬁne later.

3.1.2 The Residual Network

The concept of a residual network was implicitly introduced by Ford and Fulkerson [246].
For a given ﬂow x in a network N = (V, A, l, u, c), deﬁne the residual capacity rij from i to j as follows:

rij = (uij − xij ) + (xji − lji).

(3.7)

The residual network N (x) with respect to x is deﬁned as N (x) = (V, A(x), ˜l ≡ 0, r, c), where A(x) = {ij : rij > 0}. That is, the cost function is the same2 as for N and all lower bounds are zero. See Figure 3.2 for an illustration.
The arcs of the residual network have a natural interpretation. If ij ∈ A and xij = 5 < 7 = uij, then we may increase x by up to two units on the arc ij at the cost of cij per unit. Furthermore, if we also have lij = 2 then we can also choose to decrease x by up to 3 units along the arc ij. The cost of this decrease is exactly cji = −cij per unit. Note that a decrease of ﬂow along the
2 Note that this diﬀers from deﬁnitions in other texts such as [7], but we can do this since we made the assumption (3.2).

3.2 Reductions Among Diﬀerent Flow Models

99

(1, 6)

b

(2, −6)

(2, −3) (1, 3)

d

(3, −2)

a (3, 1)

(3, 1)

(2, 4)

(1, −4) (2, 8)

f

(2, 1) ce

(1, −8)

Figure 3.2 The residual network N (x) corresponding to the ﬂow in Figure 3.1. The data on each arc is (r, c).

arc ij may also be thought of as sending ﬂow in the opposite direction along the residual arc ji and then canceling out.

3.2 Reductions Among Diﬀerent Flow Models
The purpose of this section is to show that one can restrict the general deﬁnition of a ﬂow network considerably and still retain its modeling generality. We also show that one can model networks with lower bounds, capacities and costs on the vertices by networks, where all these numbers are on arcs only.
3.2.1 Eliminating Lower Bounds
We start with the following easy observation which shows that within the general model the assumption that all lower bounds are zero does not limit the model.
Lemma 3.2.1 Let N = (V, A, l, u, b, c) be a network.
(a) Suppose that the arc ij ∈ A has lij > 0. Let N be obtained from N by making the following changes: b(j) := b(j) + lij, b(i) := b(i) − lij, uij := uij − lij, lij := 0. Then every feasible ﬂow x in N corresponds to a feasible ﬂow x in N and vice versa. Furthermore, the costs of these two ﬂows are related by cT x = cT x + lijcij.
(b) There exists a network Nl≡0 in which all lower bounds are zero such that every feasible ﬂow x in N corresponds to a feasible ﬂow x in Nl≡0 and vice versa. Furthermore, the costs of these two ﬂows are related by cT x = cT x + ij∈A lij cij .

100 3. Flows in Networks

Proof: Part (a) is left to the reader as Exercise 3.3. Since we may eliminate lower bounds one arc at the time, (b) follows from (a) by induction on the number of arcs.
It is also useful to observe that we can construct N from N in time O(n + m) and reconstruct the ﬂow x from x in time O(m). Hence the time for eliminating lower bounds and reconstructing a ﬂow in the original network is negligible since all algorithms on networks need O(n+m) time just to input the network.

3.2.2 Flows with one Source and one Sink

Let s, t be distinct vertices of a network N = (V, A, l ≡ 0, u, c). An (s, t)-ﬂow

is a ﬂow x satisfying the following for some k ∈ R0:

  k if v = s

bx(v)

=



−k 0

if v = t otherwise.

The value of an (s, t)-ﬂow x is denoted by |x| and is deﬁned by

|x| = bx(s).

(3.8)

The next lemma combined with Lemma 3.2.1 shows that using only (s, t)ﬂows, one can model everything which can be modeled via ﬂows in the general network model.
Lemma 3.2.2 Let N = (V, A, l ≡ 0, u, b, c) be a network. Let3 M = {v:b(v)>0} b(v) and let Nst be the network deﬁned as follows: Nst = (V ∪
{s, t}, A , l ≡ 0, u , b , c ), where
(a) A = A ∪ {sr : b(r) > 0} ∪ {rt : b(r) < 0}, (b) uij = uij for all ij ∈ A, usr = b(r) for all r such that b(r) > 0 and
uqt = −b(q) for all q such that b(q) < 0, (c) cij = cij for all ij ∈ A and c = 0 for all arcs leaving s or entering t, (d) b (v) = 0 for all v ∈ V , b (s) = M , b (t) = −M.
Then every feasible ﬂow x in N corresponds to a feasible ﬂow x in Nst and vice versa. Furthermore, the costs of x and x are related by cT x = c T x . See Figure 3.3.
Proof: Exercise 3.4.
It follows from Lemma 3.2.2 that given any network N in which all lower bounds are zero, we can check the existence of a feasible ﬂow in N by constructing the corresponding network Nst and check whether this network has
3 Recall that we also have M = − {v:b(v)<0} b(v) by (3.3).

3.2 Reductions Among Diﬀerent Flow Models 101

an (s, t)-ﬂow x such that |x| = M where M is deﬁned in Lemma 3.2.2. This
latter task is precisely the problem of ﬁnding the maximum value of a feasible
(s, t)-ﬂow in Nst, a problem which we study extensively in Sections 3.5-3.7. See also Theorem 3.8.3.

3 (2, 1)

(5, 5)
(3, 1) (2, 1) 0

−3 (1, 1)

6 (7, 2)

(4, 3)

(4, 3)

(1, 0) 0

(4, 0)

(5, 2)

(5, 2)

6 (6, 6)

−4 (2, 0) −8

(3, 3)

(5, 5) (3, 1) (2, 1) (2, 1)

(3, 3) (1, 1)

s (6, 6)
(6, 6)

(4, 3) (4, 3)

(1, 0) (7, 2)

(4, 0)

(5, 2)

(5, 2)

(6, 6)

(4, 4)

t

(2, 0) (8, 8)

(a) (b)
Figure 3.3 Part (a) shows a network N with a feasible ﬂow with respect to the balance vector speciﬁed at each vertex. The numbers on each arc are (capacity, ﬂow). Costs are omitted for clarity. Part (b) shows the network Nst as deﬁned in Lemma 3.2.2 and a feasible ﬂow x in Nst.

3.2.3 Circulations
A circulation is a ﬂow x with bx(v) = 0 for all v ∈ V . Combining our next result with Lemma 3.2.1 and Lemma 3.2.2 shows that one can also model everything that can be modeled in the general (ﬂow) network model by the seemingly much more restricted circulations. Note that we cannot completely exclude lower bounds in this reduction (see Exercise 3.5).
Lemma 3.2.3 Let N = (V, A, l ≡ 0, u, b, c) be a network with distinct vertices s, t and let the balance vector of N satisfy b(v) = 0 for all v ∈ V − {s, t}, b(s) = M , b(t) = −M , for some M ∈ R0. Let N ∗ = (V, A ∪ {ts}, l , u , c ) be the network obtained from N by adding a new arc ts with lower bound lts = M , capacity uts = M and cost cts = 0, keeping the lower bound, capacity and cost of each original arc and posing no restriction on the balance vector of N ∗. Then every feasible (s, t)-ﬂow x in N corresponds to a feasible circulation x in N ∗ and vice versa. Furthermore, the costs of x and x are related by cT x = c T x .
Proof: Exercise 3.5.
The concept of a circulation is a very useful tool for applications to questions concerning sub(di)graphs of (di)graphs as we show in Section 3.11.

102 3. Flows in Networks
3.2.4 Networks with Bounds and Costs on the Vertices
In some applications of ﬂows one is not interested in imposing lower bounds and capacities on arcs, but rather on vertices. One such example is when one is looking for a cycle subdigraph that contains all vertices of a certain subset X and possibly other vertices (see Section 3.11). Another example is when one is looking for a path factor which covers all vertices of a digraph (see Section 5.3). We show below how to model networks with lower bounds, capacities and costs on vertices (and possibly also on arcs) by standard networks where all functions, other than the balance vectors, are on the arcs. First we introduce a useful transformation of any digraph to a bipartite digraph which we will use not only for the problem above but also several other places in the book.

b ac
d

as at bs bt cs ct ds dt

D DST
Figure 3.4 The vertex splitting procedure.
Given a digraph D = (V, A), construct a new digraph DST as follows. For each vertex v ∈ V , DST contains two new vertices vs, vt and the arc vtvs. For each arc xy ∈ A(D), A(DST ) contains the arc xsyt. See Figure 3.4. We say that the digraph DST is obtained from D by the vertex splitting procedure.
Now suppose that N = (V, A, l, u, b, c, l∗, u∗, c∗) is a network with a prescribed balance vector b, lower bounds, capacities and costs l, u, c on the arcs (the case when there are no such speciﬁcations can easily be modeled by taking l ≡ 0, u ≡ ∞, c ≡ 0) and lower bounds, capacities and costs l∗, u∗, c∗ on the vertices. To be precise we have to deﬁne the meaning of these new parameters. There is some freedom in such a deﬁnition, but for the applications we will need, it suﬃces to use the deﬁnition that l∗(v) is the minimum and u∗(v) the maximum amount of ﬂow that may pass through v and the cost of sending one such unit through v is c∗(v). By ‘passing through’ we

3.2 Reductions Among Diﬀerent Flow Models 103
mean the obvious thing when b(v) = 0 and if b(v) > 0 (b(v) < 0) we think of l∗(v), u∗(v), c∗(v) as bounds and costs per unit on the total amount of ﬂow out of (in to) v.
Let DST be the digraph obtained from D = (V, A) by performing the vertex splitting procedure. Deﬁne a new network based on the digraph DST by adding lower bounds, capacities and costs as follows:
(a) For every arc isjt (corresponding to an arc ij of A) we let h (isjt) = h(ij), where h ∈ {l, u, c}.
(b) For every arc itis (corresponding to a vertex i of V ) we let h (itis) = h∗(i), where h∗ ∈ {l∗, u∗, c∗}.
Finally we deﬁne the function b as follows:
If b(i) = 0 then b (is) = b (it) = 0; If b(i) > 0 then b (it) = b(i) and b (is) = 0; If b(i) < 0 then b (it) = 0 and b (is) = b(i).

3 (1, 3, 2)
(0, 3, 4)
−4 (2, 2, 1)

−1 (0, 3, 0)

(2, 2, 1) −4 0
(0, 3, 4)

03 (1, 3, 2)

(0, 3, 0) −1

0

2 (1, 4, 6)

02 (1, 4, 6)

NN
Figure 3.5 The construction of N from N . The speciﬁcation is the balance vector and (l, u, c). For clarity only one arc of N has a description of bounds and cost.
See Figure 3.5 for an example of the construction. It is not diﬃcult to show the following result.
Lemma 3.2.4 Let N and N be as described above. Then every feasible ﬂow in N corresponds to a feasible ﬂow in N = (V (DST ), A(DST ), l , u , b , c ) and vice versa. Furthermore, the costs of these ﬂows are the same.
Proof: Exercise 3.6.

104 3. Flows in Networks
3.3 Flow Decompositions
In this section we consider a network N = (V, A, l ≡ 0, u) and denote by D = (V, A) the underlying digraph of N . By a path or cycle in N we mean a directed path or cycle in D. We will show that every ﬂow in a network can be decomposed into a small number of very simple ﬂows in the same network. Besides being a nice elementary mathematical result, this also has very important algorithmic consequences as will be clear from the succeeding sections.
A path ﬂow f (P ) along a path P in N is a ﬂow with the property that there is some number k ∈ R0 such that f (P )ij = k if ij is an arc of P and otherwise f (P )ij = 0. Analogously, we can deﬁne a cycle ﬂow f (W ) for any cycle W in D. The arc sum of two ﬂows x, x , denoted x + x , is simply the ﬂow obtained by adding the two ﬂows arc-wise.
Theorem 3.3.1 Every ﬂow x in N can be represented as the arc sum of some path and cycle ﬂows f (P1), f (P2), . . . , f (Pα), f (C1), . . . , f (Cβ) with the following two properties:
(a) Every directed path Pi, 1 ≤ i ≤ α with positive ﬂow connects a source vertex to a sink vertex.
(b) α + β ≤ n + m and β ≤ m.
Proof: Let x be a non-zero ﬂow in N . Suppose ﬁrst that bx(i0) > 0 for some i0 ∈ V . Since bx(i0) > 0 it follows from (3.5) that there is some arc i0i1 leaving i0 with xi0i1 > 0. If b(i1) < 0 then we have found a path from i0 to the sink i1. Otherwise b(i1) ≥ 0 and it follows from (3.5) and the fact that xi0i1 > 0 that i1 has some arc i1i2 leaving it with xi1i2 > 0. Continuing this way, we either ﬁnd a path P from i0 to a sink vertex ik such that x is positive on all arcs on P , or eventually some vertex that was examined previously must be reached for the second time. In the later case we have detected a cycle C = irir+1 . . . ip−1ipir such that x is positive on all arcs of C. Now we change the ﬂow x as follows:
(i) If we detected a path P from i0 to a sink ik then let δ = min{xiqiq+1 : iqiq+1 ∈ A(P )} and deﬁne µ by µ = min{bx(i0), −bx(ik), δ}. Let f (P ) be the path ﬂow of value µ along P . Decrease x by µ units along P .
(ii) Otherwise we have detected a cycle C. Let µ = min{xiqiq+1 : iqiq+1 ∈ A(C)} and let f (C) be a cycle ﬂow of value µ along C. Decrease x by µ units along C.
If no arc carries positive ﬂow after the changes made above we are done. Otherwise we repeat the process above. If every vertex v becomes balanced with respect to the current ﬂow x (i.e. bx(v) = 0) before x is identically zero, then just start from a vertex i0 which has an arc i0i1 with positive ﬂow. From now on only cycle ﬂows will be extracted in the subroutine described above.

3.4 Working with the Residual Network 105
Since each of these iterations either results in a vertex becoming balanced with respect to the current ﬂow, or in an arc ij loosing all its ﬂow, i.e., xij becomes zero, the total number of iterations, extracting either a path ﬂow or a cycle ﬂow from the current ﬂow, is at most n + m. It follows from the description above that (a) and the ﬁrst part of (b) holds. The second part of (b) follows from the fact that each time we extract a cycle ﬂow at least one arc loses all its ﬂow.
The proof above immediately implies an algorithm for ﬁnding such a decomposition in time O(m2) if one uses DFS to ﬁnd the next path or cycle ﬂow to extract. However if we use an appropriate data structure and a little care, this complexity can be improved.
Lemma 3.3.2 Given an arbitrary ﬂow x in N one can ﬁnd a decomposition of x into at most n + m path and cycle ﬂows, at most m of which are cycle ﬂows, in time O(nm).
Proof: Exercise 3.7.
The following useful fact is an easy consequence of Theorem 3.3.1.
Corollary 3.3.3 Let N be a network. Every circulation in N can be decomposed into no more than m cycle ﬂows.
3.4 Working with the Residual Network
Suppose N is a network and x, x are feasible ﬂows in N . What can we say about the relation between x and x ? Clearly one can be obtained from the other by changing the ﬂow along each arc appropriately, but we can reveal much more interesting relations as we shall see below. In fact it turns out that if x is feasible in N and x is any other feasible ﬂow in N , then x can be expressed in terms of x and some feasible ﬂow in the residual network N (x). The other direction holds as well: if x is feasible in N and y is feasible in N (x) then we can ‘add’ y to x and obtain a new feasible ﬂow in N . These two properties imply that in order to study ﬂows in a network N it suﬃces to ﬁnd one feasible ﬂow x and then work in the residual network N (x). We assume below that all lower bounds are zero. Recall that due to the results in Section 3.2 this restriction does not limit our modeling power.
The ﬁrst lemma shows that if x is a feasible ﬂow in N = (V, A, l ≡ 0, u, b, c) and x˜ is a feasible ﬂow in N (x) then one can ‘add’ x˜ to x and obtain a new feasible ﬂow in N . Here ‘adding’ is arc-wise and should be interpreted as deﬁned below. Recall that we may assume we are dealing with netto ﬂows.
Deﬁnition 3.4.1 Let x be a feasible ﬂow in N = (V, A, l ≡ 0, u, c) and let x˜ be a feasible ﬂow in N (x). Deﬁne the ﬂow x∗ = x ⊕ x˜ as follows: Start by letting x∗ij := xij for every ij ∈ A and then for every arc ij in N (x) such that x˜ij > 0 we modify x∗ as follows (see Figure 3.6).

106 3. Flows in Networks

(a) If xji = 0 then x∗ij := xij + x˜ij. (b) If xij = 0 and xji < x˜ij then x∗ij := x˜ij − xji and x∗ji := 0. (c) If xji ≥ x˜ij then x∗ji := xji − x˜ij .
Note that by (3.7), if 0 < xji < x˜ij then ij ∈ A. Using that x is a netto ﬂow it is easy to check that the resulting ﬂow x∗ is also a netto ﬂow.

x˜ x

x∗

(a) i x˜ij > 0 j

i xij ≥ 0 j

i xij + x˜ij j

(b) i x˜ij > 0 j

i xji < x˜ij j xij = 0

i x˜ij − xji j

(c) i x˜ij > 0 j

i xji > x˜ij j

i xji − x˜ij j

Figure 3.6 The three diﬀerent cases in Deﬁnition 3.4.1. The three columns shows the ﬂows x˜, x and x∗, respectively. An arc between i and j is shown unless the corresponding ﬂow on that arc is zero.

Theorem 3.4.2 Let x be a feasible ﬂow in N = (V, A, l ≡ 0, u, c) with balance vector bx and x˜ is a feasible ﬂow in N (x) = (V, A(x), r, c) with balance vector bx˜. Then x∗ = x ⊕ x˜ is a feasible ﬂow in N with balance vector bx + bx˜ and the cost of x∗ is given by cT x∗ = cT x + cT x˜. Proof: Let us ﬁrst show that 0 ≤ x∗ij ≤ uij for every ij ∈ A. We started the construction of x∗ by letting x∗ij := xij for every arc. Hence it suﬃces to consider pairs (i, j) for which x˜ij > 0. We consider the three possible cases (a)-(c) in Deﬁnition 3.4.1. In Case (a) we have x∗ji = 0 and
0 < x∗ij = xij + x˜ij ≤ xij + rij = xij + (uij − xij + xji) = uij ,
since we have xji = 0 in Case (a). In Case (b) we will have x∗ji = 0 and

3.4 Working with the Residual Network 107
0 ≤ x∗ij = x˜ij − xji ≤ rij − xji = (uij − xij + xji) − xji = uij ,

since we have xij = 0 in Case (b). In Case (c) it is easy to see that we get x∗ij = 0 and that 0 ≤ x∗ji < uji.
Consider the balance vector of the resulting ﬂow. We wish to prove that x∗ has balance vector bx + bx˜, that is, for every i ∈ V ,

bx∗ (i) =

x∗ij −

x∗ji = bx(i) + bx˜(i).

ij∈A

ji∈A

(3.9)

This can be proved directly from the deﬁnitions of the balance expressions
for x and x˜. However this approach is rather tedious and there is a simple
inductive proof using Theorem 3.3.1. If x˜ is just a cycle ﬂow in N (x), then it is easy to see (Exercise 3.12) that the balance vector of x∗ equals that of x.
Similarly, if x˜ is just a path ﬂow of value δ along a (p, q)-path, for some distinct
vertices p, q ∈ V , then bx∗ (v) = bx(v) for vertices v which are either internal vertices on P or not on P and bx∗ (p) = bx(p) + δ, bx∗ (q) = bx(q) − δ. In the general case, when x˜ is neither a path ﬂow nor a cycle ﬂow in N (x) we consider
a decomposition of x˜ into path and cycle ﬂows in N (x) according to Theorem
3.3.1. Using the observation above and Theorem 3.3.1 (implying that when
adding all balance vectors of the paths and cycles in a decomposition, we
obtain the balance vector of x˜) it is easy to prove by induction on the number
of paths and cycles in the decomposition that (3.9) holds.
We leave it to the reader to prove using the same approach as above that the cost of x∗ is given by cT x∗ = cT x + cT x˜ (see Exercise 3.12).

The next theorem shows that the diﬀerence between any two feasible ﬂows in a network can be expressed as a feasible ﬂow in the residual network with respect to any of those ﬂows.

Theorem 3.4.3 Let N = (V, A, l ≡ 0, u, c) be a network and let x and x
be feasible netto ﬂows in N with balance vectors bx and bx . There exists a feasible ﬂow x¯ in N (x) with balance vector bx¯ = bx − bx such that x = x ⊕ x¯. Furthermore, the costs of these ﬂows satisfy cT x¯ = cT x − cT x.

Proof: Let x, x be feasible netto ﬂows in N = (V, A, l ≡ 0, u, c) and deﬁne a ﬂow in N (x) as follows. For every arc pq ∈ N (x) we let x¯pq := 0 and then for every arc ij ∈ A such that either xij > 0 or xij > 0 holds, we modify x¯ as follows:
(a) If xij > xij then x¯ji := xij − xij + xji. (b) If xij > xij then x¯ij := xij − xij + xji.

108 3. Flows in Networks

Using that x and x are feasible netto ﬂows in N , one can verify that x¯ is a feasible netto ﬂow in N (x) (Exercise 3.13). It also follows easily from Deﬁnition 3.4.1 that x = x ⊕ x¯. Now the last two claims regarding balance vector and cost follow from Theorem 3.4.2.
The following immediate corollary of Theorem 3.4.3 and Corollary 3.3.3 will be useful when we study minimum cost ﬂows in Section 3.10.

Corollary 3.4.4 If x and x are feasible ﬂows in the network N = (V, A, l ≡
0, u, c) such that bx = bx , then there exist a collection of at most m cycles W1, W2, . . . , Wk in N (x) and cycle ﬂows f (W1), . . . , f (Wk) in N (x) such that the following holds:

(a) x = x⊕(f (W1)+. . . +f (Wk)) = (. . . ((x⊕f (W1))⊕f (W2))⊕. . . )⊕f (Wk);

(b) cT x = cT x +

k i=1

cT

f

(Wi).

3.5 The Maximum Flow Problem

In this and the next section we study (s, t)-ﬂows in networks with all lower bounds equal to zero. That is we consider networks of the type N = (V, A, l ≡ 0, u) where s, t ∈ V are special vertices and we are only interested in ﬂows x which satisfy bx(s) = −bx(t) and bx(v) = 0 for all other vertices. We call s the source and t the sink of N . By Theorem 3.3.1, every (s, t)-ﬂow x can be decomposed into a number of path ﬂows along (s, t)-paths and some cycle ﬂows whose values do not aﬀect the value of the ﬂow x. Based on this observation we also say that x is a ﬂow from s to t.
Recall from (3.8) that the value |x| of an (s, t)-ﬂow is |x| = bx(s). We are interested in determining the maximum value k for which N has a feasible (s, t)-ﬂow of value4 k. Such a ﬂow is called a maximum ﬂow in N . The problem of ﬁnding a maximum ﬂow from s to t in a network with a speciﬁed source s and sink t is known as the maximum ﬂow problem [246].
An (s, t)-cut is a set of arcs of the form (S, S) where S, S form a partition of V such that s ∈ S, t ∈ S. The capacity of an (s, t)-cut (S, S) is the number u(S, S), that is, the sum of the capacities of arcs with tail in S and head in S (recall (3.4)). Cuts of this kind are interesting in relation to the maximum ﬂow problem as we shall see below.

Lemma 3.5.1 For every (s, t)-cut (S, S) and every (s, t)-ﬂow x, we have

|x| = x(S, S) − x(S, S).

(3.10)

Proof: Starting from the deﬁnition of |x| and the fact that bx(v) = 0 for all v ∈ S − s we obtain
4 Observe that there always exists a feasible ﬂow in N since we have assumed l ≡ 0.

3.5 The Maximum Flow Problem 109

|x| = bx(s) +

bx(i)

i∈S−s

= ( xij −

xji)

i∈S ij∈A

ji∈A

= x(S, V ) − x(V, S)

= x(S, S) + x(S, S) − x(S, S) − x(S, S)

= x(S, S) − x(S, S),

where we also used (3.4). Since a feasible ﬂow x satisﬁes x ≤ u, every feasible (s, t)-ﬂow must satisfy

x(S, S) ≤ u(S, S) for every (s, t)-cut (S, S).

(3.11)

A minimum (s, t)-cut is an (s, t)-cut (S, S) with

u(S, S) = min{u(S , S ) : (S , S ) is an (s, t)-cut in N }.

It follows from (3.11) and Lemma 3.5.1 that the capacity of any (s, t)cut provides an upper bound for the value |x| for any feasible ﬂow x in the network. We also obtain the following useful consequence.

Lemma 3.5.2 If a ﬂow x has value |x| = u(S, S) for some (s, t)-cut (S, S), then x(S, S) = 0, x is a maximum (s, t)-ﬂow and (S, S) is a minimum (s, t)cut.

Suppose x is an (s, t)-ﬂow in N and P is an (s, t)-path in N (x) such that rij ≥ > 0 for each arc ij on P . Let x be the (s, t)-path ﬂow of value in N (x) which is obtained by sending units of ﬂow along the path P . By Theorem 3.4.2, we can obtain a new ﬂow x = x ⊕ x of value |x| + in N , implying that x is not a maximum ﬂow in N . We call a path P in N (x) as above an augmenting path with respect to x. The capacity δ(P ) of an augmenting path P is given by

δ(P ) = min{rij : ij is an arc of P }.

(3.12)

We call an arc ij of P for which xij < uij a forward arc of P and an arc ij of P for which xji > 0 a backward arc of P .
When we ‘add’ the path ﬂow x to x according to Deﬁnition 3.4.1 we say that we augment along P by units. It follows from the deﬁnition of δ(P ) and Theorem 3.4.2 that δ(P ) is the maximum value by which we can augment x along P and still have a feasible ﬂow in N after the augmentation.
Now we are ready to prove the following fundamental result, due to Ford and Fulkerson, relating minimum (s, t)-cuts and maximum (s, t)-ﬂows.

110 3. Flows in Networks
Theorem 3.5.3 (Max-ﬂow Min-cut theorem) [246] Let N = (V, A, l ≡ 0, u) be a network with source s and sink t. For every feasible (s, t)-ﬂow x in N the following are equivalent:
(a) The ﬂow x is a maximum (s, t)-ﬂow. (b) There is no (s, t)-path in N (x). (c) There exists an (s, t)-cut (S, S) such that |x| = u(S, S).
Proof: We show that (a)⇒(b)⇒(c)⇒(a).

sS

St

sS

x=u x=u x=0 x=0

St

N (x)

N

Figure 3.7 Illustration of part (b)⇒(c) in the proof of Theorem 3.5.3. The set S consists of those vertices that are reachable from s in N (x). The left part shows
the situation in the residual network where we have S⇒S and the right part shows the corresponding situation in N .

(a)⇒(b): Suppose x is a maximum ﬂow in N and that N (x) contains an (s, t)-path P . Let δ(P ) > 0 be the capacity of P and let x be the (s, t)path ﬂow in N (x) which sends δ(P ) units of ﬂow along P . By Theorem 3.4.2 x ⊕ x is a feasible ﬂow in N of value |x| + δ(P ) > |x|, contradicting the maximality of x. Hence (a)⇒(b).
(b)⇒(c): Suppose that N (x) contains no (s, t)-path. Let
S = {y ∈ V : N (x) contains an (s, y)-path}.
By the deﬁnition of S, there is no arc from S to S in N (x). Thus the deﬁnition of N (x) implies that for every arc ij ∈ (S, S) we have xij = uij and for every arc ij ∈ (S, S) we have xij = 0 (see Figure 3.7). This implies that we have |x| = x(S, S) − x(S, S) = u(S, S) − 0 = u(S, S). Hence we have proved that (b)⇒(c). (c)⇒(a): This follows directly from Lemma 3.5.2.
3.5.1 The Ford-Fulkerson Algorithm
The proof of Theorem 3.5.3 suggests the following simple method for ﬁnding a maximum (s, t)-ﬂow in a network where all lower bounds are zero. Start

3.5 The Maximum Flow Problem 111
with x ≡ 0. This is a feasible ﬂow since 0 = lij ≤ uij for all arcs ij ∈ A. Try to ﬁnd an (s, t)-path P in N (x). If there is such a path P , then augment x by δ(P ) units along P . Continue this way until there is no (s, t)-path in N (x) where x is the current ﬂow. This method, due to Ford and Fulkerson [246], is called the Ford-Fulkerson (FF) algorithm.
Strictly speaking this is not really an algorithm if we do not specify how we wish to search for an augmenting (s, t)-path. It can be shown (see Exercise 3.17) that, when the capacities are allowed to take non-rational values and there is no restriction on the choice of augmenting paths (other than that one has to augment as much as possible along the current path), then the process above may continue indeﬁnitely and without even converging to the right value of a maximum ﬂow (see Exercise 3.17). For real-life applications this problem cannot occur since all numbers represented in computers are rational approximations of real numbers and in this case the algorithm will always terminate (Exercise 3.18).
Theorem 3.5.4 If N = (V, A, l ≡ 0, u) has all capacities integers, then the Ford-Fulkerson algorithm ﬁnds a maximum (s, t)-ﬂow in time O(m|x∗|), where x∗ is a maximum (s, t)-ﬂow.
Proof: The following generic process called the labelling algorithm will ﬁnd an augmenting path in N (x) in time O(n + m) if one exists5. Start with all vertices unlabelled except s and every vertex unscanned. In the general step we pick a labelled but unscanned vertex v and scan all its out-neighbours while labelling (by backwards pointers showing where a vertex got labelled from) those vertices among the out-neighbours of v that are un-labelled. If t becomes labelled this way, the process stops and an augmenting path, determined by the backwards pointers, is returned. If all vertices are scanned and t was not labelled the process stops and the set of labelled vertices S and its complement S correspond to a minimum (s, t)-cut (recall the proof of Theorem 3.5.3).
Each time we augment along an augmenting path, the value of the current ﬂow increases by at least one, since the capacities in the residual network are all integers (this is clear in the ﬁrst iteration and easy to establish by induction for the rest of the iterations of the algorithm). Hence there can be no more than |x∗| iterations of the above search for a path and the complexity follows.
To see that the seemingly very pessimistic estimate in Theorem 3.5.4 for the time spent by the algorithm may in fact be realized, consider the network in Figure 3.8 and the sequence of augmenting paths speciﬁed there. The reader familiar with the literature on ﬂows may see that our example is diﬀerent from the classical example in books on ﬂows. The reason for this is
5 We could also use path ﬁnding algorithms such as BFS and DFS, but the original algorithm by Ford and Fulkerson uses only the generic labelling approach. See also Section 3.6.

112 3. Flows in Networks

M
s

ab

c

MM

M

1

t

MM

dM

eM

f

Figure 3.8 A possibly bad network for the Ford-Fulkerson algorithm. The number M denotes a large integer. If we choose augmenting paths of the form sabef t with augmenting capacity 1 in odd numbered iterations and augmenting paths of the form sdebct with augmenting capacity 1 in even numbered iterations, then a maximum ﬂow x of value 2M will be found only after 2M augmentations. Clearly, if instead we augment ﬁrst along sabct and then along sdef t, each time by M units, we can ﬁnd a maximum ﬂow after just two augmentations.

that if we interpret the Ford-Fulkerson algorithm precisely as it is described in [246, page 18] (see also the proof of Theorem 3.5.4), then the algorithm will not behave badly on the usual example, whereas it still will do so on the example in Figure 3.8.
The value of the maximum ﬂow in the example in Figure 3.8 is 2M . This shows that the complexity of the Ford-Fulkerson algorithm is not bounded by a polynomial in the size of the input (recall from Chapter 1 that we assume that numbers are represented in binary notation). It is worth noting though that Theorem 3.5.4 implies that if all capacities are small integers then we get a very fast algorithm which, due to its simplicity, is easy to implement. The following is an easy but very important consequence of the proof of Theorem 3.5.3:
Theorem 3.5.5 (Integrality theorem for maximum (s, t)-ﬂows) [246] Let N = (V, A, l ≡ 0, u) be a network with source s and sink t. If all capacities are integers, then there exists an integer maximum (s, t)-ﬂow in N .
Proof: This follows from our description of the Ford-Fulkerson algorithm. We start with x ≡ 0 and every time we augment the ﬂow we do this by adding an integer valued path ﬂow of value δ(P ) ∈ Z+. Hence the new (s, t)-ﬂow is also an integer ﬂow. It follows from the fact that all capacities are integers that in a ﬁnite number of steps we will reach a maximum ﬂow (by Lemma 3.5.1 |x| cannot exceed the capacity of any cut). Now the claim follows by induction on the number of augmentations needed before we have a maximum ﬂow.
An (s, t)-ﬂow in a network N is maximal if every (s, t)-path in N uses at least one arc pq such that xpq = upq (such an arc is called saturated). That is, either x is maximum or after augmenting along an augmenting path P the resulting ﬂow x has xij < xij for some arc6. This is equivalent to saying that
6 Recall that we always work with netto ﬂows.

3.5 The Maximum Flow Problem 113

every augmenting path with respect to x contains at least one backward arc when P is considered as an oriented path in N . It is important to distinguish between a maximal ﬂow and a maximum ﬂow. An (s, t)-ﬂow x is maximal if it is either maximum, or in order to augment it to a ﬂow with a higher value, we must reduce the ﬂow in some arc. See also Figure 3.9.

(2, 1)
s

a (2, 1) b
(2, 1)

(2, 2)
t

(1, 1)

c

d(1, 0)

(1, 0)

Figure 3.9 A network N with ﬂow x which is maximal but not maximum as the path P = sabcdt is an (s, t)-path in N (x). Note that the arc bc is a backward arc of P . The data on each arc are (capacity, ﬂow).

3.5.2 Maximum Flows and Linear Programming

We digress for a short while to give some remarks on the relation between maximum ﬂows and linear programming. First observe that the maximum ﬂow problem (with lower bounds all equal to zero) is equivalent to the following linear programming problem:

maximize k

subject to   k if v = s

bx(v)

=



−k 0

if v = t otherwise.

0 ≤ xij ≤ uij

for every ij ∈ A.

The matrix T of the constraints of this linear program is given by T =

S I

, where S is the vertex-arc incidence matrix7 of the underlying directed

graph of the network (recall the deﬁnition of bx) and I is the m × m identity matrix. The matrix S has the property that every column contains exactly

7 The vertex-arc incidence matrix S = [sij] of a digraph D = (V, A) has rows labelled by the vertices of V and columns labelled by the arcs of A and the entry
svi,aj equals 1 if the arc aj has tail vi, −1 if aj has head vi and 0, otherwise.

114 3. Flows in Networks
one +1 and exactly one −1. This implies that S is totally unimodular, i.e., each square submatrix of S has determinant 0, 1, or −1 (see e.g., the book [166] by Cook, Cunningham, Pulleyblank and Schrijver). Hence it follows from Exercise 3.19 that the matrix T is also totally unimodular. Therefore the integrality theorem for maximum ﬂows (Theorem 3.5.5) follows immediately from the Hoﬀmann-Kruskal characterization of total unimodularity (see [166, Theorem 6.25]).
Since the maximum ﬂow problem is just a linear programming problem, it follows that one can ﬁnd a maximum ﬂow using any method for solving general linear programming problems. In particular, by the total unimodularity of T , the Simplex algorithm will always return an integer maximum ﬂow provided that all capacities are integers. However, due to the special nature of the problem, more eﬃcient algorithms can be found when we exploit the structure of ﬂow problems. Finally, we remark that the Max-ﬂow Min-cut theorem can be derived from the duality theorem for linear programming (see e.g. the book [600]).
3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow
The Ford-Fulkerson algorithm can be modiﬁed in various ways to ensure that it becomes a polynomial algorithm. We describe two such modiﬁcations (see also Exercises 3.25 and 3.26). After doing so we describe a diﬀerent approach in which we do not augment the ﬂow by just one path at the time. For the ﬁrst two subsections we need the following deﬁnition.
Deﬁnition 3.6.1 A layered network is a network N = (V, A, l ≡ 0, u) with the following properties:
(a) There is a partition V = V0 ∪ V1 ∪ V2 ∪ . . . ∪ Vk ∪ Vk+1 such that V0 = {s}, Vk+1 = {t} and
(b) every arc of A goes from a layer Vi to the next layer Vi+1 for some i = 0, 1, . . . , k.
See Figure 3.10 for an example of a layered network.
3.6.1 Flow Augmentations Along Shortest Augmenting Paths
Edmonds and Karp [216] observed that in order to modify the Ford-Fulkerson algorithm so as to get a polynomial algorithm, it suﬃces to choose the augmenting paths as shortest paths with respect to the number of arcs on the path.
Let x be a feasible (s, t)-ﬂow in a network N . Denote by δx(s, t) the length of a shortest (s, t)-path in N (x). If no such path exists we let δx(s, t) = ∞.

3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow 115

5
s 12
8

31
7 11 7
42
74 10 7 46

12 14 4

t

Figure 3.10 A layered network with source s and sink t. The numbers on the arcs indicate the capacities.

Suppose that there is an augmenting path in N (x) and let P be a shortest
such path. Let r be the number of arcs in P . Deﬁne the network LN (x) as
the network one obtains from N (x) by taking the vertices from the distance
classes V0, V1, . . . , Vr, i.e. Vi = {v : distN (x)(s, v) = i}, and all arcs belonging to (Vi, Vi+1)N (x) for i = 0, 1, . . . , r − 1 along with their residual capacities rij. Observe that, by the deﬁnition of distance classes, LN (x) contains all the
shortest augmenting paths with respect to x in N (x).
The crucial fact that makes augmenting along shortest paths a good ap-
proach is the following lemma.

Lemma 3.6.2 [216] Let x be a feasible (s, t)-ﬂow in N and let x be obtained from x by augmenting along a shortest path in N (x). Then

δx (s, t) ≥ δx(s, t).

(3.13)

Proof: Suppose this is not the case for some x, x where x is obtained from x by augmenting along a shortest path P in N (x). By the remark above LN (x) contains all the shortest augmenting paths (with respect to x) in N (x). Let r = δx(s, t). By our assumption N (x ) contains an (s, t)-path P whose length is less than r. Thus P must use an arc ij such that ij ∈ A(N (x)). However, every arc that is in N (x ) but not in LN (x) is of the form ji where ij is an arc of P , or is inside a layer of LN (x). It follows that P has at least r + 1 arcs, contradicting the assumption.

Note that even if N (x ) contains no (s, t)-path of length δx(s, t), it may still contain a path of length δx(s, t) + 1, since we may use an arc which was inside a layer of LN (x).

Theorem 3.6.3 (Edmonds, Karp) [216] If we always augment along
shortest augmenting paths, then the Ford-Fulkerson algorithm has complexity O(nm2).

Proof: By Lemma 3.6.2, the length of the current augmenting path increases monotonically throughout the execution of the algorithm. It follows from the

116 3. Flows in Networks
proof of Lemma 3.6.2 that, if the length of the next augmenting path does not go up, then that path is also a path in LN (x). Note also that at least one arc from some layer Vi to the next disappears after each augmentation (recall that in each augmentation we augment by δ(P ) units along the current augmenting path P ). Hence the number of iterations in which the length of the current augmenting path stays constant is at most m. Since the length can increase at most n − 2 times (the length of an (s, t)-path is at least 1 and at most n − 1) and we can ﬁnd the next augmenting path in time O(n + m) using BFS we obtain the desired complexity.
Zadeh [753] constructed networks with n vertices and m arcs for which the Edmonds-Karp algorithm requires Ω(nm) augmentations to ﬁnd a maximum ﬂow. Hence the estimate on the worst case complexity is tight.
3.6.2 Blocking Flows in Layered Networks and Dinic’s Algorithm
Let L = (V = V0 ∪ V1 ∪ . . . ∪ Vk, A, l ≡ 0, u) be a layered network with V0 = {s} and Vk = {t}. An (s, t)-ﬂow x in L is blocking if there no (s, t)path of length k in the residual network L(x). Note that a blocking ﬂow is also maximal ﬂow (recall the diﬀerence between a maximal and a maximum ﬂow as explained in the end of Section 3.5). That is, every augmenting path with respect to x (if there is any) must use at least one arc pq such that p ∈ Vj, q ∈ Vi for some j ≥ i.
We saw above that if we always augment along shortest augmenting paths, then the length of a shortest augmenting path is monotonically increasing. Hence if we have a method to ﬁnd a blocking ﬂow in a layered network in time O(p(n, m)), then we can use that method to obtain an O(np(n, m)) algorithm for ﬁnding a maximum (s, t)-ﬂow in any given network.
The method of Edmonds and Karp above achieves a blocking ﬂow in time O(m2). It was observed by Dinic [195] (who also independently and earlier discovered the method of using shortest augmenting paths) that a blocking ﬂow in a layered network can be obtained in time O(nm), thus resulting in an O(n2m) algorithm for maximum ﬂow.
The idea is to search for a shortest augmenting path in a depth ﬁrst search manner. We modify slightly the standard DFS algorithm (see Section 4.1) as shown below. The vector π is used to remember the arcs of the augmenting path detected if one is found.
Dinic’s algorithm (one phase)
Input: A layered network L = (V = V0 ∪ V1 ∪ . . . ∪ Vk, A, l ≡ 0, u). Output: A blocking ﬂow x in L.
1. Initialization: xij := 0 for every arc ij in A, let v := s be the current vertex and let A := A.

3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow 117
2. Searching step: If there is no arc with tail v in A (from v to the next layer among the remaining arcs), then if v = s go to Step 5; otherwise go to Step 4; If there is an arc vw ∈ A , then let v := w, let π(w) := v. If v = t repeat Step 2.
3. Augmentation step: Using the π labels ﬁnd the augmenting path P detected and augment x along P by δ(P ) units. Delete all arcs ij of A for which xij = uij. Erase all labels on vertices (π(i) := nil for all i ∈ V ). Let v := s and go to Step 2.
4. Arc deletion step: (The search above has revealed that there is no (v, t)-path in the current digraph D = (V, A ). Furthermore, v = s). Delete all arcs with head or tail v from A , let v := π(v) and go to Step 2.
5. Termination: Return the blocking ﬂow x.
Theorem 3.6.4 Dinic’s algorithm (one phase of ) correctly determines a blocking ﬂow in a given layered network L in time O(nm).
Proof: Let L = (V = V0 ∪ V1 ∪ . . . ∪ Vk, A, l ≡ 0, u). Each time the current ﬂow is augmented in the algorithm it is changed along an augmenting path of length k. We only delete an arc from A when it is no longer present in the residual network L(x) where x is the current ﬂow. Hence no deleted arc could be used in an augmenting path of length k with respect to the current ﬂow. Furthermore, when the algorithm terminates there is no (s, t)-path in the current digraph D = (V, A ). Here A consists of those arcs from one layer to the next which are still not ﬁlled to capacity by the current x. It follows that the algorithm terminates with a blocking ﬂow.
The complexity follows from the fact that we perform at most O(n) steps between each deletion of an arc which is either saturated (via the actual augmenting path P ) or enters a vertex for which we deleted all arcs having that vertex as the head or tail (see Step 4).
3.6.3 The Preﬂow-Push Algorithm
The ﬂow algorithms we have seen in the previous sections have the common feature that they all increase the ﬂow along one augmenting path at a time. Very often, when searching for an augmenting path, one ﬁnds a path P containing an arc rq whose capacity is relatively small compared to the capacity of the preﬁx P [s, r] of that path (see e.g. Figure 3.11). This means that along P [s, r] we were able to augment by a large amount of ﬂow, but due to the smaller capacity of the arc rq we only augment by that smaller amount and start all over again. In Dinic’s algorithm this could be taken into account by not starting all over again, but instead backtracking until a new forward arc can be found in the layered network. However we are still limited to ﬁnding one path at a time. Now we present a diﬀerent approach, due to Goldberg

118 3. Flows in Networks

sM M M

Mr

t

Figure 3.11 A bad example for a standard ﬂow algorithm such as the EdmondsKarp algorithm. The capacities of arcs are either 1, if no number is shown or M , where M is a large number. Algorithms such as the Edmonds-Karp algorithm will augment M times along the path from s to r each time by just one unit.

and Tarjan [324, 325], which allows one to work with more than one augmenting path at a time. The algorithm of Goldberg and Tarjan, called the preﬂow-push algorithm, tries to push as much ﬂow towards t as possible, by ﬁrst sending the absolute maximum possible, namely sr∈A usr, out of s and then trying to push this forward to t. At some point no more ﬂow can be sent to t and the algorithm returns the excess ﬂow back to s again. This very vague description will be made precise below (the reader should compare this with the so-called MKM-algorithm described in Exercise 3.25).
Let N = (V, A, l ≡ 0, u) be a network with source s and sink t. A feasible ﬂow x in N is called a preﬂow if bx(v) ≤ 0 for all v ∈ V − s. Note that every (s, t)-ﬂow x is also a preﬂow since we have bx(v) = 0 if v ∈ V − {s, t} and bx(t) = −bx(s) ≤ 0. Hence preﬂows generalize (s, t)-ﬂows, an observation that we shall use below. Let x be a preﬂow in a network N . A height function with respect to x is a function h : V → Z0 which satisﬁes

h(s) = n, h(t) = 0;

h(p) ≤ h(q) + 1

for every arc pq of N (x).

(3.14)

The following useful lemma is an immediate consequence of Theorem 3.3.1(a).

3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow 119

Lemma 3.6.5 Let x be a preﬂow in a network N = (V, l ≡ 0, u) with source s and sink t and let v be a vertex such that bx(v) < 0. Then N (x) contains a (v, s)-path.
Proof: By the deﬁnition of a preﬂow, s is the only vertex r for which we have bx(r) > 0. Hence, by Theorem 3.3.1(a), every decomposition of x into path and cycle ﬂows contains an (s, v)-path P . Now it follows that N (x) contains a (v, s)-path, since every arc of P has positive ﬂow in N and hence give rise to an oppositely oriented arc in N (x).
Now we are ready to describe the (generic) preﬂow-push algorithm. During the execution of the algorithm, a vertex v ∈ V is called active if bx(v) < 0. An arc pq of N (x) is admissible if h(p) = h(q) + 1. The algorithm uses two basic operations push and lift.
push(pq): Let p be a vertex with bx(p) < 0 and let pq be an admissible arc in N (x). The operation push(pq) changes xpq to xpq + ρ, where ρ = min{−bx(p), rpq}.
lift(p): Let p be a vertex with bx(p) < 0 and h(p) ≤ h(q) for every arc pq in N (x). The operation lift(p) changes the height of p as follows:
h(p) := min{h(z) + 1 : pz is an arc of N (x)}.
By the remark after the proof of Lemma 3.6.5, the number h(p) is welldeﬁned. See Figure 3.12 for an illustration of a lift.

height

height

10 10

5 p
0 (a)

p 5
0 (b)

Figure 3.12 Lifting the vertex p from height 4 to height 7.

Lemma 3.6.6 Let x be a preﬂow in N and let h be deﬁned as in (3.14).
If p ∈ V satisﬁes bx(p) < 0, then at least one of the operations push(pq), lift(p) can be applied.

120 3. Flows in Networks
Proof: Suppose bx(p) < 0, but we cannot perform a push from p. Then there is no admissible arc with tail p and hence we have h(p) ≤ h(q) for every arc pq in N (x). It follows from Lemma 3.6.5 that there is at least one arc out of p in N (x) and hence we can perform the operation lift(p).
The generic preﬂow-push algorithm Input: A network N = (V, l ≡ 0, u) with source s and sink t. Output: A maximum (s, t)-ﬂow in N . Preprocessing step:
(a) For each p ∈ V let h(p) := distN (p, t); (b) Let h(s) := n; (c) Let xsp := usp for every arc out of s in N ; (d) Let xij := 0 for all other arcs in N .
Main loop: While there is an active vertex p ∈ V − t do the following:
if N (x) contains an admissible arc pq then push(pq) else lift(p).
Theorem 3.6.7 The generic preﬂow-push algorithm correctly determines a maximum (s, t)-ﬂow in N in time O(n2m).
Proof: We ﬁrst show that the function h remains a height function throughout the execution of the algorithm. Initially this is the case since we use exact distance labels and there are no arcs out of s in N (x) (Exercise 3.20). Observe that for every vertex p, h(p) is only changed when we perform the operation lift(p) and then it is changed so as to preserve the condition (3.14). Furthermore, the operation push(pq) may introduce a new arc qp in N (x), but this arc will satisfy h(q) = h(p) − 1 and hence does not violate (3.14). It follows that h remains a height function throughout the execution of the algorithm.
It is easy to see that x remains a preﬂow throughout the execution of the algorithm, since only a push operation aﬀects the current x and by deﬁnition a push operation preserves the preﬂow condition.
Now we prove that, if the algorithm terminates, then it does so with a maximum ﬂow x. Suppose that the algorithm has terminated. This means that no vertex v ∈ V has bx(v) < 0. Thus it follows from the deﬁnition of a preﬂow that x is an (s, t)-ﬂow. To prove that x is indeed a maximum ﬂow, it suﬃces to show that there is no (s, t)-path in N (x). This follows immediately from the fact that h remains a height function throughout the execution of the algorithm. By (3.14), every arc pq in N (x) has h(p) ≤ h(q) + 1 and we always have h(s) = n, h(t) = 0. Since no (s, t)-path has more than n − 1 arcs, there is no (s, t)-path in N (x) and hence, by Theorem 3.5.3, x is a maximum (s, t)-ﬂow.
To prove that the algorithm terminates and to determine its complexity, it is useful to distinguish between two kinds of pushes. An execution of the

3.6 Polynomial Algorithms for Finding a Maximum (s, t)-Flow 121
operation push(pq) is a saturating push if the arc pq is ﬁlled to capacity after the push and hence pq is not an arc of N (x) immediately after that push. A push which is not saturating is an unsaturating push.
We now establish a number of claims from which the complexity of the algorithm follows.
(A) The total number of lifts is O(n2): By Lemma 3.6.5, every vertex p with bx(p) < 0 has a path to s in N (x). Hence, we have h(p) ≤ 2n − 1, by (3.14). Since the height of a vertex p increases by at least one every time the operation lift(p) is performed, no vertex can be lifted more than 2n − 2 times. The claim follows.
(B) The total number of saturating pushes is O(nm): Let us consider a ﬁxed arc pq and ﬁnd an upper bound for the number of saturating pushes along this arc in the algorithm. When we perform a saturating push along pq, we have h(p) = h(q) + 1 and the arc pq disappears from the residual network. It can only appear again in the current residual network after ﬂow has been pushed from q to p in some later execution of the operation push(qp). At that time we have h(q) = h(p) + 1. This and the fact that h remains a height function and never decreases at any vertex, implies that before we can perform a new saturating push along pq, h(p) has increased by at least two. We argued above that we always have h(p) ≤ 2n − 1 and now we conclude that there are at most O(n) saturating pushes along any given arc. Thus the total number of saturating pushes is O(nm).
(C) The total number of unsaturating pushes is O(n2m): Let Φ = bx(v)<0 h(v). Then Φ ≥ 0 during the whole execution of the algorithm
and since h(v) < 2n at any time during the execution we have Φ ≤ 2n2 after the preprocessing step. Let us examine what happens to the value of Φ after performing the diﬀerent kinds of operations. A lift will increase Φ by at most 2n − 1. Hence, by (A), the total contribution to Φ from lifts is O(n3). A saturating push from p to q can increase Φ by at most h(q) ≤ 2n − 1 (it may also decrease Φ if p becomes balanced, but we are not concerned about that here). Hence, by (B), the total contribution to Φ from saturating pushes is O(n2m). An unsaturating push from p to q will decrease Φ by at least one, since p becomes balanced and h(p) = h(q) + 1 (if q was balanced before, then Φ decreases by one and otherwise it decreases by h(p)). It follows from the considerations above that the total increase in Φ during the execution of the algorithm is O(n2m). Now it follows from the fact that Φ is never negative that the total number of unsaturating pushes is O(n2m).
It is somewhat surprising that the simple approach above results in an algorithm of such a low complexity. The complexity bound is valid no matter which vertex we choose to push from or lift. This indicates the power of

122 3. Flows in Networks

the approach. However, the algorithm does have its drawbacks. If no control is supplied to direct the algorithm (as to which vertices to push from or lift), then a large amount of time may be spent without any eﬀect on the ﬁnal maximum ﬂow. The reader is asked in Exercise 3.21 to give an example showing that a large amount of useless work may be performed if no extra guidance is given to the choice of pushes. There are several approaches which can improve the performance of the preﬂow-push algorithm we mention just two of these. For details see e.g. [7].

(a) If we examine the active vertices in a ﬁrst-in ﬁrst-out (FIFO) order, then

we obtain an O(n3) algorithm [325].

(b)

If we always push from a vertex p which has all active vertices, then we obtain an O(n2

√thme )laarlggeosrtithhemigh[t14h9(,p)32a5m].ong

Cheriyan and Maheshwari [149] have shown by examples that the worst case bounds for the FIFO and maximum height variants are tight. For another way to improve the performance of the generic algorithm in practice, see Exercise 3.22.

3.7 Unit Capacity Networks and Simple Networks
In this section we consider two special cases of networks, both of which occur in applications and for which, due to their special structure, one can obtain faster algorithms for ﬁnding a maximum ﬂow. All networks considered in this section are assumed to have a source s and a sink t.
3.7.1 Unit Capacity Networks
A unit capacity network is a network N = (V, A, l ≡ 0, u ≡ 1), i.e. all arcs have capacity equal to one. Unit capacity networks are important in several applications of ﬂows to problems such as ﬁnding a maximum matching in a bipartite graph (Subsection 3.11.1), ﬁnding an optimal path cover of an acyclic digraph (Section 5.3) and ﬁnding cycle subdigraphs covering speciﬁed vertices (Subsection 3.11.5).
Lemma 3.7.1 If N is a unit capacity network without cycles of length 2 and x is a feasible (s, t)-ﬂow, then N (x) is also a unit capacity network.
Proof: Exercise 3.39.
Let N = (V, A, l ≡ 0, u ≡ 1) be a unit capacity network with source s and sink t. Since the value of a minimum (s, t)-cut in N is at most n − 1 (consider the cut (s, V − s)), we see from Theorem 3.5.4 that the FordFulkerson algorithm will ﬁnd a maximum (s, t)-ﬂow in time O(nm). The purpose of this section is to show that one can obtain an even faster algorithm. Our exposition is based on an idea due to Even and Tarjan [232].

3.7 Unit Capacity Networks and Simple Networks 123

Lemma 3.7.2 Let L = (V = V0 ∪ V1 ∪ . . . ∪ Vk, A, l ≡ 0, u ≡ 1) be a layered unit capacity network with V0 = {s} and Vk = {t}. One can ﬁnd a blocking (s, t)-ﬂow in L in time O(m).
Proof: It suﬃces to see that the capacity of each augmenting path is 1 and no two augmenting paths of the same length can use the same arc. Hence it follows that Dinic’s algorithm will ﬁnd a blocking ﬂow in time O(m).
Lemma 3.7.3 Let N = (V, A, l ≡ 0, u ≡ 1) be a unit capacity network and let x∗ be a maximum (s, t)-ﬂow in N . Then

distN (s, t) ≤ 2n/ |x∗|

(3.15)

Proof: Let ω = distN (s, t) and let V0 = {s}, V1, V2, . . . , Vω be the ﬁrst ω distance classes from s. Since N contains no multiple arcs, the number of
arcs from Vi to Vi+1 is at most |Vi||Vi+1| for i = 0, 1, . . . , ω − 1. Since the arcs in (Vi, Vi+1) correspond to the arcs across an (s, t)-cut in N , we have |x∗| ≤ |Vi||Vi+1| for i = 0, 1, . . . , ω − 1. Thus max{|Vi|, |Vi+1|} ≥ |x∗| for i = 0, 1, . . . , ω − 1. Now we easily see that

ω
n = |V | ≥ |Vi| ≥
i=0

|x∗|

ω+1 2

(3.16)

implying that ω ≤ 2n/ |x∗|.

Theorem 3.7.4 [232] For unit capacity networks the complexity of Dinic’s

algorithm

is

O(n

2 3

m).

Proof: Let N be a unit capacity network with source s and sink t. We

assume for simplicity that N has no 2-cycles. The case when N does have

a 2-cycle can be handled similarly (Exercise 3.41). Let q be the number of

phases performed by Dinic’s algorithm before a maximum (s, t)-ﬂow is found

in N . Let 0 ≡ x(0), x(1), . . . , x(q) denote the (s, t)-ﬂows in N which have

been calculated after the successive phases of the algorithm. Thus x(0) is the

starting ﬂow which is the zero ﬂow and x(i) denotes the ﬂow after phase i

of the algorithm. Let τ =

n2 3

and let K = |x(q)| denote the value of a

maximum (s, t)-ﬂow in N .

By Lemmas 3.7.1 and 3.7.2 it suﬃces to prove that the total number of

phases,

q,

is

O

(n

2 3

).

This

is

clear

in

the

case

when

K

≤

τ,

since

we

augment

the ﬂow by at least one unit after each phase. So suppose that K > τ .

Choose j such that |x(j)| < K − τ and |x(j+1)| ≥ K − τ . By Theorem 3.4.2

and Theorem 3.4.3 the value of a maximum ﬂow in N (x(j)) is K − |x(j)| > τ .

Applying Lemmas 3.7.1 and 3.7.3 to N (x(j)), we see that distN (x(j))(s, t) ≤

2n

2 3

.

Using

Lemma

3.6.2

and

the

fact

that

each

phase

of

Dinic’s

algorithm

results

in

a

blocking

ﬂow,

we

see

that

j

≤

2n

2 3

.

Thus,

since

at

most

τ

phases

remain

after

phase

j

we

conclude

that

the

total

number

of

phases

q

is

O(n

2 3

).

124 3. Flows in Networks
3.7.2 Simple Networks
A simple network is a network N = (V, A, l ≡ 0, u) with special vertices s, t in which every vertex in V − {s, t} has precisely one arc entering or precisely one arc leaving. For an example see Figure 3.13.

st

Figure 3.13 A simple network. Capacities are not shown.

Below we assume that the simple network in question does not have any 2-cycles. It is easy to see that this is not a serious restriction (Exercise 3.42).

Lemma 3.7.5 Let N = (V, A, l ≡ 0, u ≡ 1) be a simple unit capacity network on n vertices and let x∗ be a maximum (s, t)-ﬂow in N . Then

distN (s, t) ≤ n/|x∗|.

(3.17)

Proof: Let ω = distN (s, t) and V0 = {s}, V1, V2, . . . , Vω be the ﬁrst ω distance classes from s. Every unit of ﬂow from s to t passes through the layer Vi for i = 1, 2, . . . , ω − 1. Furthermore, since N is a simple unit capacity network, at most one unit of ﬂow can pass through each v ∈ V . Thus |Vi| ≥ |x∗|, for i = 1, 2, . . . , ω − 1 and hence

ω−1
|V | > |Vi| ≥ (ω − 1)|x∗|,
i=1
implying that ω ≤ |V |/|x∗|.

Lemma 3.7.6 If N is a simple unit capacity network, then N (x) is also a simple unit capacity network.

Proof: Exercise 3.40.
Using Lemma 3.7.5 and Lemma 3.7.6 one can prove the following result due to Even and Tarjan. We leave the details as Exercise 3.43.

Thahsecoormepmlex3i.t7y.7O([√23n2m] )F.or simple unit capacity networks Dinic’s algorithm

3.8 Circulations and Feasible Flows 125

timWe Oe (p√oinnmt o)uint

that Dinic’s algorithm will also ﬁnd a maximum (s, a simple network even if not all capacities are one,

t)-ﬂow in provided

that the network has the property that at most one unit of ﬂow can pass

through any vertex v ∈ V − {s, t}. In particular a vertex may be the tail of

an arc with capacity ∞ provided that it is the head of at most one arc and

this arc (if it exists) has capacity one. We use this extension of Theorem 3.7.7

in Section 3.11.

3.8 Circulations and Feasible Flows
We now return to the general ﬂow model when lower bounds are present on the arcs. We wish to determine whether a feasible ﬂow exists with respect to the given lower bounds and capacities on the arcs and a prescribed balance vector. As we showed in Section 3.2, in order to study the general case, it suﬃces to study circulations since we may use Lemmas 3.2.1-3.2.3 to transform the general case to the case of circulations. Note that in this section we always assume that all the data of the network are integers (that is l and u are integers).
We need the following very simple observation. The proof is analogous to that of Lemma 3.5.1.
Lemma 3.8.1 If x is a circulation in N then for every partition S, S of V we have x(S, S) = x(S, S).
The example in Figure 3.14 gives us a starting point for detecting what can prevent the existence of a feasible circulation.
b

(3, 5)

(0, 2)

ac (1, 5)
Figure 3.14 A network with no feasible circulation. The speciﬁcation on the arcs is (l, u).

Let N be the network in Figure 3.14 and let S = {b} and S = {a, c}. Then l(S, S) = 3 > 2 = u(S, S). Now using Lemma 3.8.1 we see that if x is a feasible ﬂow in N we must have
2 = u(S, S) ≥ x(S, S) = x(S, S) ≥ l(S, S) = 3,

126 3. Flows in Networks

implying that there is no feasible ﬂow in N . More generally, our argument shows that if N = (V, A, l, u) is a network for which some partition S, S of V satisﬁes l(S, S) > u(S, S), then N has no feasible circulation. Hoﬀman [431] proved that the converse holds as well.
Before we prove Theorem 3.8.2 we remark that Theorem 3.4.2 remains valid for networks with non-zero lower bounds provided that we modify the deﬁnition of x ⊕ x˜ slightly (see Exercise 3.30).

Theorem 3.8.2 (Hoﬀman’s circulation theorem) [431] A network N = (V, A, l, u) with non-negative lower bounds on the arcs has a feasible circulation if and only if the following holds for every proper subset S of V :

l(S, S) ≤ u(S, S).

(3.18)

Proof: Let N = (V, A, l, u) be a network. We argued above that if x is a feasible circulation in N , then for every partition (S, S) of V we have l(S, S) ≤ u(S, S).
To prove the converse we assume that (3.18) holds for all S ⊂ V and give an algorithmic proof showing how to construct a feasible circulation starting from the all-zero circulation. Clearly x ≡ 0 is a circulation in N and if l ≡ 0, then we are done. So we may assume that lij > xij for some ij ∈ A.
We try to ﬁnd a (j, i)-path in N (x). If such a path P exists, then we let δ(P ) > 0 be the minimum residual capacity of an arc on P . Let = min{δ(P ), lij −xij}. By Theorem 3.4.2 (which, as remarked earlier, also holds when some lower bounds are non-zero), we can increase the current ﬂow x by units along the cycle iP and obtain a new circulation.
We claim that we can continue this process until the current circulation x has lij ≤ xij ≤ uij for all arcs ij ∈ A, that is, we can obtain a feasible circulation in N (observe that the procedure above preserves the inequality x ≤ u). Suppose this is not the case and that at some point we have xst < lst for some arc st and there is no (t, s)-path in N (x). Deﬁne T as follows:

T = {r : there exists a (t, r)-path in N (x)}.

It follows from the deﬁnition of the residual network N (x) (in particular
(3.7)) that in N we have xij = uij for all arcs ij with i ∈ T and j ∈ T and xqr ≤ lqr for all arcs qr with q ∈ T and r ∈ T . Using that s ∈ T and xst < lst we obtain that

u(T, T ) = x(T, T ) = x(T , T ) < l(T , T ),

contradicting the assumption that (3.18) holds. This and the fact that all data are integers shows that the algorithm we described above will indeed ﬁnd a feasible circulation in N .
It is not diﬃcult to turn the proof above into a polynomial algorithm which, given a network N = (V, A, l, u), either ﬁnds a feasible circulation x in N , or a subset S violating (3.18) (Exercise 3.29).

3.9 Minimum Value Feasible (s, t)-Flows 127

We conclude with a remark on ﬁnding feasible ﬂows with respect to arbitrary balance vectors in general networks. This problem is relevant as a starting point for many algorithms on ﬂows. It follows from the results in Section 3.2 and the fact that the preﬂow-push algorithm can be turned into an O(n3) algorithm (using the FIFO implementation) that the following holds.
Theorem 3.8.3 There exists an O(n3) algorithm for ﬁnding a feasible ﬂow in a given network N = (V, A, l, u, b). Furthermore, if l, u, b are all integer functions, then an integer feasible ﬂow can be found in time O(n3).
Using Lemma 3.2.2 and Theorem 3.8.2 one can derive the following feasibility theorem for ﬂows by Gale (Exercise 3.44):
Theorem 3.8.4 [289] There exists a feasible ﬂow in the network N = (V, A, l ≡ 0, u, b) if and only if

b(s) ≤ u(S, S)
s∈S

for every S ⊂ V.

(3.19)

3.9 Minimum Value Feasible (s, t)-Flows

Let N = (V, A, l, u) be a network with source s, sink t and non-negative lower bounds on the arcs. A minimum feasible (s, t)-ﬂow in N is a feasible (s, t)-ﬂow whose value is minimum possible among all feasible (s, t)-ﬂows. Although at ﬁrst glance this problem may seem somewhat artiﬁcial, it turns out that for many applications it is actually a minimum feasible ﬂow that is sought (see e.g. Section 5.3 and Section 5.9).
To estimate the value of a minimum (s, t)-ﬂow, let us deﬁne the demand, γ(S, S) of an (s, t)-cut (S, S) as the number

γ(S, S) = l(S, S) − u(S, S).

(3.20)

Let x be a feasible ﬂow. Then, by Lemma 3.5.1, for every (s, t)-cut (S, S) we have

|x| = x(S, S) − x(S, S) ≥ l(S, S) − u(S, S) = γ(S, S).

(3.21)

Hence the demand of any (s, t)-cut provides a lower bound for the value of a minimum feasible (s, t)-ﬂow. The next result shows that the minimum value of an (s, t)-ﬂow is exactly the maximum demand of an (s, t)-cut.

128 3. Flows in Networks

Theorem 3.9.1 (Min-ﬂow Max-demand theorem) Let N = (V, A, l, u) be a network with non-negative lower bounds on the arcs. Suppose x is a minimum feasible (s, t)-ﬂow in N . Then

|x| = max{γ(S, S) : s ∈ S, t ∈ S}.

(3.22)

Furthermore we can ﬁnd a minimum feasible (s, t)-ﬂow by two applications of any algorithm for ﬁnding a maximum (s, t)-ﬂow.

Proof: Suppose x is a feasible (s, t)-ﬂow in N . If |x| = 0, then x is clearly a minimum (s, t)-ﬂow (since all lower bounds are non-negative). Hence we may assume that |x| > 0. Suppose that y is a feasible (t, s)-ﬂow in N (x). Then x ⊕ y is a feasible ﬂow in N of value |x| − |y|, by Theorem 3.4.2 (as we remarked in the last section, this lemma is also valid in the general case of non-zero lower bounds). Now suppose that y is a maximum (t, s)-ﬂow in N (x). Apply Theorem 3.5.3 to y and N (x) and let (T, T ) be a minimum (t, s)-cut in N (x). The capacity of (T, T ) is by deﬁnition equal to r(T, T ), where r is the capacity function of N (x). By the choice of (T, T ) and the deﬁnition of the residual capacities we have

|y| = r(T, T )

= (uij − xij ) + (xqp − lqp)

ij∈(T,T )

qp∈(T ,T )

= u(T, T ) − l(T , T ) + x(T , T ) − x(T, T )

= u(T, T ) − l(T , T ) + |x|,

(3.23)

by Lemma 3.5.1. Rearranging this, we obtain that |x|−|y| = l(T , T )−u(T, T ). This implies that the ﬂow x⊕y (whose value is |x|−|y|) is a minimum feasible (s, t)-ﬂow and proves (3.22).
It remains to prove the second claim on how to ﬁnd a minimum (s, t)-ﬂow. It follows from the argument above that once we have any feasible (s, t)-ﬂow, we can ﬁnd a minimum (s, t)-ﬂow by just one max ﬂow calculation. On the other hand it follows from Lemma 3.2.1 and Lemma 3.2.2 that we can ﬁnd a feasible (s, t)-ﬂow in N (if any exists) by performing the two transformations suggested in those lemmas and then using a max ﬂow algorithm to check whether there is a feasible ﬂow in the last network constructed (now feasibility is with respect to the value of b(s) and all lower bounds are zero).

3.10 Minimum Cost Flows
We now turn to networks with costs on the arcs and study the following problem called the minimum cost ﬂow problem: Given a network N = (V, A, l, u, b, c) ﬁnd a feasible ﬂow of minimum cost (recall that the cost

3.10 Minimum Cost Flows 129
of a ﬂow is given by ij∈A xijcij). By the results in Section 3.2, without loss of generality, we may treat the problem only for networks with lower bound zero on all arcs and furthermore assume that we are looking for either an (s, t)-ﬂow of value b(s) or a circulation of minimum cost. However, for diﬀerent applications, diﬀerent ﬂow models may be more convenient than others. Hence, except for always assuming that the lower bounds are zero, we will treat the general case, and hence all the special cases also, below.
We mentioned in Section 3.2 that the shortest path problem is a special case of the minimum cost ﬂow problem. To see this, let D = (V, A, c) be an arc weighted digraph with special vertices s, t and assume that D has no cycle of negative weight. Let N = (V, A, l ≡ 0, u ≡ 1, c) be the network obtained from D by adding a lower bound of zero and a capacity of 1 to each arc of D and interpreting the weight of an arc in D as its cost in N . We claim that a shortest (s, t)-path in D corresponds to a minimum cost integer (s, t)-ﬂow of value 1 in N . Clearly, any (s, t)-path P of weight M in D can be transformed into an (s, t)-ﬂow of cost M just by sending one unit of ﬂow along P in N . Thus it suﬃces to prove that every (s, t)-ﬂow x of value one and cost M can be transformed into an (s, t)-path in D of weight at most M . By Theorem 3.3.1 we may decompose x into a path ﬂow of value one along an (s, t)-path P and a number of cycle ﬂows. All these cycles have non-negative cost since D has no negative cycle. Hence it follows that P has cost at most M . It follows from our observations above that every minimum cost (s, t)-ﬂow of value 1 in N can be decomposed into an (s, t)-path of the same cost and some cycle ﬂows along cycles of cost zero.
In Exercise 3.47 the reader is asked to show that the maximum ﬂow problem is also a special case of the minimum cost ﬂow problem. However, the minimum cost ﬂow problem is interesting not only because it generalizes these two problems, but also because a large number of practical applications can be formulated as minimum cost ﬂow problems. The very comprehensive book by Ahuja, Magnanti and Orlin [7] contains a large number of such applications. We will discuss one of these in a reformulated form below.
A small cargo company uses a ship with a capacity to carry at most r units of cargo. The ship sails on a long route (say from Southampton to Alexandria) with several stops at ports in between. At these ports cargo may be unloaded and new cargo loaded. At each port there is an amount bij of cargo which is waiting to be shipped from port i to port j > i (ports are numbered after the order in which the ship visits them). Let fij denote the income for the company from transporting one unit of cargo from port i to port j. The goal for the cargo company is to plan how much cargo to load at each port so as to maximize the total income while never exceeding the capacity of the ship. We illustrate how to model this problem, which we call the ship loading problem, as a minimum cost ﬂow problem because it shows not only that sometimes it is easier to work with the general model, but also that allowing negative costs on the arcs may simplify the formulation.

130 3. Flows in Networks
Let n be the number of stops including the starting port and the terminal port. Let N = (V, A, l ≡ 0, u, c) be the network deﬁned as follows:
V = {v1, v2, . . . , vn} ∪ {vij : 1 ≤ i < j ≤ n}, A = {v1v2, v2v3, . . . , vn−1vn} ∪ {vijvi, vij vj : 1 ≤ i < j ≤ n}. The capacity of the arc vivi+1 is r for i = 1, 2, . . . n − 1 and all other arcs have capacity ∞. The cost of the arc vijvi is −fij for 1 ≤ i < j ≤ n. All other arcs have cost zero (including those of the form vijvj). The balance vector of vij is bij for 1 ≤ i < j ≤ n and the balance vector of vi is −(b1i + b2i + . . . + bi−1i) for i = 1, 2, . . . , n. (See Figure 3.15.)
15

14 25

−f15

−f14 13

−f25 24

35

−f13 12

−f24 23

−f35 34

45

−f12 r
1

−f23 r
2

−f34 r
3

−f45 r
4

5

Figure 3.15 The network for the ship loading problem with 3 intermediate stops.
For readability vertices are named by numbers only. The costs (capacities) are
only shown when non-zero (not inﬁnite). The balance vectors are as speciﬁed in
the description in the text, i.e. the balance vector of the vertex 34 is b34 and the balance vector of the vertex 4 is −(b14 + b24 + b34).

We claim that this network models the ship loading problem. Indeed,
suppose that t12, t13, . . . , t1n, t23, . . . , tn−1n are cargo numbers, where tij(≤ bij) denote the amount of cargo the ship will transport from port i to port j and that the ship is never loaded above capacity. The total income from these
cargo loads is I = 1≤i<j≤n tijfij. Let x be the ﬂow in N deﬁned as follows. The ﬂow on an arc of the form vijvi is tij, the ﬂow on an arc of the form vijvj is bij − tij and the ﬂow on an arc of the form vivi+1, i = 1, 2, . . . , n − 1, is the sum of those tab for which a ≤ i and b ≥ i + 1. It follows from the fact that tij, 1 ≤ i < j ≤ n, are legal cargo numbers that x is feasible with respect to the balance vector and the capacity restriction. It is also easy to
see that the cost of x is −I.

3.10 Minimum Cost Flows 131

Conversely, suppose that x is a feasible ﬂow in N of cost J. We claim that we get a feasible cargo assignment sij, 1 ≤ i < j ≤ n with income −J by letting sij be the value of x on the arc vijvi. This is easy to check and we leave the details to the reader. It follows that a minimum cost ﬂow in N corresponds to an optimal loading of the ship and vice versa.
Below we consider the minimum cost ﬂow problem in some detail. Further applications are given in Section 3.11. See also Section 3.12 for two important special cases of the minimum cost ﬂow problem.
We use the notion of the cost of a path or a cycle in a network. This is simply the sum of the costs of all arcs in the path or cycle. An augmenting path (cycle) with respect to a given ﬂow x in a network N is a path (cycle) in N (x). Whenever we speak about an augmenting cycle or path P we use δ(P ) to denote the minimum residual capacity of an arc on P in N (x). Furthermore, for every β ≤ δ(P ) we denote by x := x ⊕ βP the ﬂow we obtain from x by augmenting along P with β units.
Whenever we say that a ﬂow x is optimal in a network N , we mean by this that x is a minimum cost ﬂow among all ﬂows in N with balance vector bx.

3.10.1 Characterizing Minimum Cost Flows

Recall from Theorem 3.5.3 that, when we consider maximum (s, t)-ﬂows, we

can verify optimality by showing that there is no (s, t)-path in the residual

network with respect to the current ﬂow. It turns out that we can also use

the residual network to check whether a given feasible ﬂow in a network N =

(V, A, l, u, c) has minimum cost among all ﬂows with the same balance vector.

Suppose ﬁrst that x is feasible in N and that there is some cycle W in N (x)

such that the cost c(W ) of W is negative. Let δ denote the minimum residual

capacity of an arc on W and let x be the cycle ﬂow in N (x) which sends δ

units around W . Then it follows from Theorem 3.4.2 that x⊕x is a ﬂow in N

with the same balance vector as x and cost cT x + cT x = cT x + δc(W ) < cT x.

Thus if N (x) contains a cycle of negative cost, then x is not a minimum cost

feasible ﬂow in N with respect to the balance vector bx. The interesting thing is that the other direction holds as well. Indeed,

suppose x is feasible in N = (V, A, l, u, b, c) and that N (x) contains no cycle

of negative cost. Let y be an arbitrary feasible ﬂow in N . Since we have

speciﬁed a balance vector b for N , it follows from Corollary 3.4.4 that there

exist a collection of at most m cycles W1, W2, . . . , Wk in N (x) and cycle ﬂows

f (W1), . . . , f (Wk) in N (x) such that cT y = cT x+

k i=1

c(Wi)δi,

where

δi

>

0

is the amount of ﬂow that f (Wi) sends along Wi in N (x). Since N (x) has no

negative cost cycle, c(Wi) ≥ 0 for i = 1, 2, . . . , k and we see that8 cT y ≥ cT x.

8 In fact, our argument shows that cT y = cT x if and only if y can be obtained from x by ‘adding’ zero or more cycle ﬂows, each of cost zero, in N (x).

132 3. Flows in Networks
Thus we have established the following important optimality criterion for the minimum cost ﬂow problem.
Theorem 3.10.1 Let x be a feasible ﬂow in the network N = (V, A, l, u, b, c). Then x is a minimum cost feasible ﬂow in N if and only if N (x) contains no directed cycle of negative cost.
It is natural to ask how useful this optimality criterion is. First observe that using the Bellman-Ford-Moore algorithm (Subsection 2.3.4) we can check whether an arbitrary given network contains a negative cycle in time O(nm). Thus we obtain the following algorithm, due to Klein [480], for ﬁnding a minimum cost feasible ﬂow in a network.
The cycle canceling algorithm Input: A network N = (V, A, l, u, b, c). Output: A minimum cost feasible ﬂow in N .
1. Find a feasible ﬂow x in N . 2. Search for a negative cycle in N (x). 3. If such a cycle W is found then augment x by δ(W ) units along W and
go to Step 2. 4. Return x.
Just as is the case for the Ford-Fulkerson algorithm, the cycle canceling algorithm may never terminate if the capacities are non-rational numbers. It is easy to modify the example in Exercise 3.17 to show this. However, if all lower bounds and capacities are integers (or just rational numbers) then this is indeed an algorithm, although not always a very fast one. See Figure 3.16 for an illustration of the algorithm.
Let U and C denote the maximum capacity of N and the maximum numerical value among all costs of N .
Theorem 3.10.2 If all lower bounds, capacities, costs and balance vectors of the input network N are integers, then the cycle canceling algorithm ﬁnds an optimum ﬂow in time O(nm2CU ).
Proof: By Theorem 3.8.3 we can ﬁnd a feasible ﬂow x in N in time O(n3). Hence Step 1 can be performed within the promised time bound, since we assume that all networks in this chapter have m = Ω(n). The maximum possible cost of a feasible ﬂow in N is mU C and the minimum possible cost is −mU C. Since we decrease the cost of the current ﬂow by at least one in Step 3 it follows that after at most O(mU C) executions of Step 3 we obtain a minimum cost feasible ﬂow. Now the complexity follows from the fact that Step 2 can be performed in time O(nm) using the Bellman-FordMoore algorithm.
Furthermore, just as it was the case for maximum ﬂows, we have a nice integrality property.

(4, 4, 2)

2 (2, 2, 2)

1

(6, 5, 1)

3

(3, 2, 3)

(3, 3, 2)

4
(a)

3.10 Minimum Cost Flows 133

2

(4,-2)

(2,-2)

(5,-1) 1
(1, 3)
(2,-3)

(1, 1)

3

(3,-2)

4
(b)

(2,-2)

2

(2, 2)

(2,-2)

1

(3,-1) (3, 1)

3

(3, 3)

(3,-2)

4
(c)

2

(2, 2)
(2, -2)
1 (5, -1)

(2, 2)

(1, 1) (2, 2)

3

(3, 3)

(1, -2)

4
(d)

(4, 2, 2)

2 (2, 0, 2)

1

(6, 5, 1)

3

(3, 0, 3)

(3, 1, 2)

4
(e)

Figure 3.16 An illustration of the cycle canceling algorithm. (a) A network N with a feasible ﬂow x with respect to the balance vector (b(1), b(2), b(3), b(4)) = (2, 3, 1, −6). The data on the arcs are (capacity, ﬂow, cost); (b) the residual network N (x). The data on the arcs are (residual capacity, cost); (c) the residual network after augmenting by 2 units along the cycle 1421; (d) the residual network after augmenting by 2 units along the cycle 2432; (e) the ﬁnal optimal ﬂow.

Theorem 3.10.3 (Integrality theorem for minimum cost ﬂows) If all lower bounds, capacities and balance vectors of the network N are integers, then there exists an integer minimum cost ﬂow.
Proof: This is an easy consequence of the proof of Theorem 3.10.2. By Theorem 3.8.3 we may assume that the ﬂow x after Step 1 is an integer ﬂow. Now the claim follows easily by induction of the number of augmentations made by the cycle canceling algorithm since in each augmentation we change the current ﬂow by an integer amount along the arcs of the augmenting cycle.

For arbitrary networks with integer valued data the complexity of the cycle canceling algorithm is not very impressive and the algorithm is clearly not polynomial since its running time is exponential in both the maximum capacity and the maximum (absolute value of the) cost. It is easy to construct examples for which the algorithm, without some guidance as to how the next negative cycle should be chosen, may use O(mU C) augmentations before it arrives at an optimum ﬂow (Exercise 3.52). However, for several applications,

134 3. Flows in Networks
such as when we are looking for certain structures in digraphs, both U and C are small and then the algorithm is quite attractive due to its simplicity (see e.g. some of the results in Section 3.11).
The problem of ﬁnding a strongly polynomial algorithm9 for the minimum cost ﬂow problem was posed by Edmonds and Karp [216] in 1972 and remained open until Tardos [687] found the ﬁrst such algorithm in 1985. We mentioned above that if we use just any negative cycle in Step 3, then the cycle canceling algorithm may use a non-polynomial number of iterations. Goldberg and Tarjan showed that the following variant of the algorithm is already strongly polynomial [326]. The mean cost of a cycle W is the number c(W )/|A(W )|.
Theorem 3.10.4 [326] If we always augment along a cycle of minimum mean cost (as negative mean cost as possible) in Step 3, then the cycle canceling algorithm has complexity O(n2m3 log n) even if some arcs have nonrational data.
The correctness of the algorithm, provided that it terminates, follows from Theorem 3.10.1, since there is no negative cycle in the current residual network at termination. Due to space considerations we will not prove the complexity part of the theorem here. We refer the interested reader to [7, 578] for nice accounts for the complexity of this algorithm. It is interesting to note that, although the proof of the complexity statement of Theorem 3.10.4 is quite non-trivial, it uses just the basic deﬁnitions of ﬂows along with some new concepts which are used to make the proof smoother.
3.10.2 Building up an Optimal Solution
The cycle canceling algorithm starts from a (generally) non-optimal but feasible ﬂow and continues through a sequence of feasible ﬂows until an optimal ﬂow is found (provided the algorithm ever terminates). In this subsection we describe another approach, due to Jewell [460] and Busacker and Gowen [138], in which we start from a (generally) in-feasible ﬂow which is optimal10 and continue through a sequence of optimal but in-feasible ﬂows until a feasible and optimal ﬂow is reached.
Theorem 3.10.5 (The buildup theorem) [460, 138] Suppose that x is a minimum cost feasible ﬂow in a network N = (V, A, l ≡ 0, u, c) with respect to the balance vector b = bx and let P be a minimum cost (p, q)-path in N (x). Let α ≤ δ(P ) and let f (P ) be the path ﬂow of value α in N (x). Then the ﬂow x := x ⊕ f (P ) is a minimum cost feasible ﬂow in N with respect to the balance vector b given by
9 A graph algorithm is strongly polynomial if (counting each arithmetic operation as constant time) the number of operations is bounded by a polynomial in n and m.
10 Recall that optimality is with respect to ﬂows with the same balance vector.

3.10 Minimum Cost Flows 135

  b(v)

if v ∈ {p, q}

b

(v)

=



b(p) b(q)

+ −

α α

if v = p if v = q.

Proof: By Theorem 3.10.1 it is suﬃcient to prove that there is no negative cycle in N (x ). Since x is optimal there is no negative cycle in N (x). Suppose that N (x ) contains a negative cycle W . By the deﬁnition of x , every arc in N (x ) is either an arc of N (x) or the opposite of an arc on P . Consider the directed multigraph H that we obtain from A(P ) ∪ A(W ) considered as a multiset by deleting all arcs a such that both a and the opposite arc is in A(P )∪A(W ). It is easy to see that if we add the arc qp to H then we obtain a directed multigraph M such that each connected component of M is eulerian. Hence, by Exercise 3.8, we can decompose A(H) into a (p, q)-path P and a number of cycles W1, W2, . . . , Wk. It follows from our remark above and the way we deﬁned H that all arcs of P , W1, W2, . . . , Wk are arcs of N (x). By (3.2) opposite arcs have costs which cancel and hence, using that c(W ) < 0 we obtain

c(P ) > c(P ) + c(W )
k
= c(P ) + c(Wi)
i=1
≥ c(P ),

since the cost of each Wi must be non-negative because Wi is a cycle in N (x). Thus we see that P is a (p, q)-path with a cost smaller than that of
P , contradicting the minimality of P . Hence W cannot exist and the proof
is complete.

Based on Theorem 3.10.5 we can construct an algorithm, called the

buildup algorithm [460, 138], for ﬁnding an optimal feasible ﬂow in a net-

work N = (V, A, l ≡ 0, u, b, c). The algorithm described below only works if

there are no negative cycles in the starting network. This restriction poses no

practical problems since, according to Exercise 3.49, we may reduce the gen-

eral minimum cost ﬂow problem to the case when all costs are non-negative.

Under the assumption that N has no negative cycles, the ﬂow x ≡ 0 is an

optimal circulation in N . At any time during the execution of the buildup

algorithm the sets Ux, Zx are deﬁned with respect to the current ﬂow x as follows:

Ux = {v|bx(v) < b(v)},

Zx = {v|bx(v) > b(v)}.

Observe that Ux = ∅ if and only if Zx = ∅.

The buildup algorithm Input: A network N = (V, A, l ≡ 0, u, b, c). Output: A minimum cost feasible ﬂow in N with respect to b or a proof that the problem is infeasible.

136 3. Flows in Networks

1. Let xij := 0 for every ij ∈ A; 2. If Ux = ∅ then go to Step 8; 3. If there is no (Ux, Zx)-path in N (x) go to Step 9; 4. Let p and q be chosen such that p ∈ Ux, q ∈ Zx and N (x) contains a
(p, q)-path; 5. Find a minimum cost (p, q)-path P in N (x); 6. Let = min{δ(P ), b(p)−bx(p), bx(q)−b(q)} (δ(P ) is the residual capacity
of P ); 7. Let x := x ⊕ P ; Modify Ux, Zx and go to Step 2; 8. Return x; 9. Return ‘no feasible solution’.
See Figure 3.17 for an illustration of the algorithm.

3

(4, 2) 2
(3, 3)

(2, 2)

(6, 1)

1

(3, 2)

−6
(a)

(4, 2) (3, 3)

(2, 2) (6, 1)
(2, 2)
(1,-2)

(b)

(4, 2)

(2, 2)

(3, 3) (3, 3)

(3,-1) (2, 2)

(1,-2)

(c)

(2, 2) (2,-2)

(2, 2)

(1, 1) (5,-1)

(3, 3)

(2, 2)

(1,-2)

(4, 2, 2)

(2, 0, 2) (6, 5, 1)

(3, 0, 3)

(3, 1, 2)

(d) (e)
Figure 3.17 The buildup algorithm performed on the network from Figure 3.16(a). Part (a)-(d) show the current residual network with respect to the ﬂow x, starting from x ≡ 0 in (a). For each arc (u, c) is speciﬁed and in (a) b(v) is speciﬁed for each vertex. White circles correspond to the set Ux and white boxes correspond to Zx. Black circles represent vertices that have reached the desired balance value. Part (e) shows the ﬁnal optimal ﬂow.

Theorem 3.10.6 [460, 138] Let N = (V, A, l ≡ 0, u, b, c) have all data integers and no negative costs. The buildup algorithm correctly determines a min-

3.11 Applications of Flows 137

imum cost feasible ﬂow x in N or detects that no feasible ﬂow exists in N . The algorithm can be performed in time O(n2mM ), where M = maxv∈V |b(v)|. Furthermore, if there is a feasible ﬂow in N , then the algorithm will ﬁnd an
integer optimal feasible ﬂow in N .

Proof: Exercise 3.50.
The following result shows that, when we consider minimum cost (s, t)ﬂows, the cost of successive augmenting (s, t)-paths form a monotonically increasing function. One can make a more general statement (Exercise 3.51), but for simplicity we consider only (s, t)-ﬂows here.

Proposition 3.10.7 Let N be a network with distinct vertices s, t and let x be an optimal (s, t)-ﬂow in N . Suppose x is obtained from x by augmenting along a minimum cost (s, t)-path P in N (x) and that x is obtained from x by augmenting along a minimum cost (s, t)-path P in N (x ). Then

cT x − cT x ≥ cT x − cT x .

(3.24)

Proof: Let x, x , x and P, P be as described in the proposition. Analogously to the way we argued in the proof of Theorem 3.10.5 we can show that the directed multigraph H obtained from the multiset of arcs from A(P ) ∪ A(P ) by deleting arcs that are opposite in the two paths can be decomposed into two (s, t)-paths Q, R and some cycles W1, . . . , Wp such that all arcs of these paths and cycles are in N (x). Since x is optimal each cycle Wi, i = 1, 2, . . . , p has non-negative cost by Theorem 3.10.1. Using that P is a minimum cost (s, t)-path in N (x) we conclude that each of R, Q have cost at least c(P ) implying that c(P ) ≥ c(P ). Hence (3.24) holds.

3.11 Applications of Flows
In this section we illustrate the applicability of ﬂows to a large spectrum of problems both of a theoretical and practical nature. For further applications see e.g. Section 3.12 and Chapter 7. Since we will need these results in later chapters the main focus is on ﬁnding certain substructures in digraphs.
3.11.1 Maximum Matchings in Bipartite Graphs
Let G = (V, E) be an undirected graph. Recall that a matching in G is a set of edges from E, no two of which share a vertex and a maximum matching of G is a matching of maximum cardinality among all matchings of G. Matching problems occur in many practical applications such as the following scheduling problem. We are given a set T = {t1, t2, . . . , tr} of tasks (such as handling a certain machine) to be performed and a set P = {p1, p2, . . . , ps} of persons, each of which is capable of performing some of the tasks from T . The goal

138 3. Flows in Networks

is to ﬁnd a maximum number of tasks such that each task can be performed by some person who does not at the same time perform any other task and no task is performed by more than one person. This can be formulated as a matching problem as follows. Let B = (P, T ; E) be the bipartite graph whose vertex set is P ∪ T and such that for each i, j such that 1 ≤ i ≤ s, 1 ≤ j ≤ r, E contains the edge pitj whenever person pi can perform task tj. Now it is easy to see that the answer to the problem above is a matching in B which covers the maximum possible number of vertices in T (see also Exercise 3.53). For arbitrary graphs ﬁnding a maximum matching fast is quite complicated and it was a great breakthrough when Edmonds [210] found a polynomial algorithm. For the case of bipartite graphs we describe a simple algorithm based on ﬂows.

Theorem solvable in

3ti.m11e .O1 (F√onrmb)i.partite

graphs

the

maximum

matching

problem

is

Proof: Let B = (X, Y ; E) be an undirected bipartite graph with bipartition (X, Y ). Construct a network NB = (X ∪ Y ∪ {s, t}, A, l ≡ 0, u) as follows (see Figure 3.18):
A = {ij : i ∈ X, j ∈ Y and ij ∈ E} ∪ {si : i ∈ X} ∪ {jt : j ∈ Y }, uij = ∞ for all ij ∈ (X, Y ), usi = 1 for all i ∈ X and ujt = 1 for all j ∈ Y .

st
B NB
Figure 3.18 A bipartite graph and the corresponding network. Capacities are one on all arcs of the form sv, ut and ∞ on all arcs corresponding to edges of B.
We claim that the value of a maximum (s, t)-ﬂow in NB equals the size of a maximum matching in B. To see this suppose that x is an integer ﬂow in N of value k. Let M = {ij : i ∈ X, j ∈ Y and xij > 0}. For each i ∈ X the ﬂow on the arc xsi is either zero or one. Furthermore, if xsi = 1, then it follows from the fact that x is integer valued and bx(i) = 0 that precisely one arc from i to Y has non-zero ﬂow. Similarly , for each j ∈ Y , if xjt = 1 then precisely one arc from X to j has non-zero ﬂow. It follows that M is a matching of size k in B and hence, by Theorem 3.5.5, the size of a maximum matching in B is at least the value of a maximum ﬂow in NB.

3.11 Applications of Flows 139

On the other hand, if M = {qiri : qi ∈ X, ri ∈ Y, i = 1, 2, . . . , h} is a matching in B, then we obtain a feasible (s, t)-ﬂow of value h in NB by sending one unit of ﬂow along each of the internally disjoint paths sqirit, i = 1, 2, . . . , h. This shows that the opposite inequality also holds and the
claim follows.

It follows from the arguments above that, given a maximum integer ﬂow

x, we can obtain a maximum matching M of B by taking precisely those arcs

of the form uivi, ui ∈ X, vi ∈ Y which have ﬂow value equal to 1. Note that

NB that

is a simple we can ﬁnd

network. Hence the a maximum ﬂow in

NcoimnptliemxeityO(c√lanimm)f,oullsoiwnsg

from the fact the algorithm

of Theorem 3.7.7 (recall that this complexity is also valid for simple networks

where not all capacities are 1, provided that at most one unit of ﬂow can pass

through any vertex distinct from s, t).

In the case of dense graphs a slightly faster algorithm of complexity O(n1.5 m/ log n) was given by Alt, Blum, Mehlhorn and Paul in [23]. It is still possible to obtain fast algorithms for ﬁnding a maximum matching in general graphs, see e.g. Tarjan’s book [690]. However, it does not seem possible to formulate the maximum matching problem for an arbitrary graph as an instance of the maximum ﬂow problem in some network. In [482] a generalization of ﬂows which contains the maximum matching problem for general graphs as a special case was studied by Kocay and Stone.
A vertex cover of an undirected graph G = (V, E) is a subset U ⊆ V such that every edge e ∈ E has at least one of its end vertices in U . Since no two edges of a matching share a vertex, it follows that for every vertex cover U in G, the size of U is at least the size of a maximum matching. For general graphs there does not have to be equality between the size of a maximum matching and the size of a minimum vertex cover. For instance if G is just a 5-cycle, then the size of a maximum matching is 2 and no vertex cover has less than 3 vertices. We now prove the following result, due to K¨onig [498], which shows that for bipartite graphs equality does hold. The proof illustrates the power of the Max-ﬂow Min-cut theorem.

Theorem 3.11.2 (K¨onig’s theorem) [498] Let B = (X, Y ; E) be an undirected bipartite graph with bipartition (X, Y ). The size of a maximum matching in B equals the size of a minimum vertex cover in B.

Proof: Let NB = (V ∪{s, t}, A, l ≡ 0, u) be deﬁned as in the proof of Theorem 3.11.1. Let x be a maximum ﬂow in NB and let (S, S) be the minimum cut deﬁned as in the proof of Theorem 3.5.3 with respect to x (see Figure 3.19).
Recall that S is precisely those vertices of V ∪ {s, t} which can be reached
from s in NB(x). Since the capacity of each arc from X to Y is ∞, there is no edge from S ∩ X to S ∩ Y in G. Thus U = (X ∩ S) ∪ (Y ∩ S) is a vertex
cover in B. Furthermore, it follows from the deﬁnition of S that we must
have xsi = 1 for all i ∈ X ∩ S and xjt = 1 for all j ∈ Y ∩ S. This shows

140 3. Flows in Networks X ∩S
S
x=1 s

Y ∩S

x=1 t

S

X ∩S

Y ∩S

Figure 3.19 The situation when a maximum ﬂow has been found. The thick dotted arc indicates that there is no arc between the two sets X ∩ S and Y ∩ S.

that |x| = |X ∩ S| + |Y ∩ S|. We showed in the proof of Theorem 3.11.1 that |M ∗| = |x| = |X ∩ S| + |Y ∩ S|, where M ∗ is a maximum matching in B. Hence |M ∗| = |U |, implying that U is a minimum vertex cover and the proof
is complete.

Recall that a matching is perfect if it covers all vertices. We saw above that the simple proof of Theorem 3.11.1 was easily modiﬁed to a proof of K¨onig’s theorem. Not surprisingly we can also derive the following characterization of the existence of a perfect matching in a bipartite graph. The result below is a slight weakening of a result (dealing with matchings that meet all vertices of one bipartition class of bipartite graphs) due to Hall [393]. For an undirected graph G = (V, E) and a subset U ⊂ V , we denote by N (U ) the set of vertices in V − U which have at least one edge to a vertex in U .

Theorem 3.11.3 (Hall’s theorem) [393] A bipartite graph B = (X, Y ; E) has a perfect matching if and only if |X| = |Y | and the following holds:

|N (U )| ≥ |U |

for every U ⊂ X.

(3.25)

Proof: The necessity of |X| = |Y | and (3.25) is clear since every vertex in U has a private neighbour in Y if B has a perfect matching.
Suppose now that (3.25) holds and let x be an integer maximum ﬂow in the network NB which is deﬁned as in the proof of Theorem 3.11.1. If we can prove that |x| = |X| then it follows from the proof of Theorem 3.11.1 that B has a perfect matching. So suppose |x| < |X|. By the proof of Theorem 3.11.2 we have |x| = |X ∩ S| + |Y ∩ S|, where S is the set of vertices that are reachable from s in NB(x). Since (3.25) holds and we argued in the proof of Theorem 3.11.2 that all neighbours of X ∩ S are in Y ∩ S, we also have

|X| = |X ∩ S| + |X ∩ S| ≤ |Y ∩ S| + |X ∩ S| = |x| < |X|,

a contradiction. Hence we must have |x| = |X| and the proof is complete.

3.11 Applications of Flows 141
3.11.2 The Directed Chinese Postman Problem
Suppose a postman has to deliver mail along all the streets in a small11 town. Assume furthermore that on one-way streets the mail boxes are all on one side of the street, whereas for two-way streets, there are mail boxes on both sides of the street. For obvious reasons the postman wishes to minimize the distance he has to travel in order to deliver all the mail and return home to his starting point. We show below how to solve this problem in polynomial time using minimum cost ﬂows.
We can model the problem by a directed graph D = (V, A) and a weight function w : A→R+ where V contains a vertex for each intersection of streets in the town and the arcs model the streets. A 2-cycle corresponds to a twoway street and an arc which is not in a 2-cycle corresponds to a one-way street in the obvious way. The weight of an arc corresponds to the length of the corresponding street. Now it is easy to see that an optimal route for the postman corresponds to a closed walk in D which traverses each arc at least once.
We have seen in Theorem 1.6.3 that if a digraph is eulerian, then it contains a closed trail which covers all arcs precisely once. Thus if D is eulerian the optimalwalk is simply a eulerian trail in D (using each arc exactly once). Below we show how to solve the general case by reducing the problem to a minimum cost circulation problem. First observe that there is no solution to the problem if D is not strongly connected, since any closed walk is strongly connected as a digraph. Hence we assume below that the digraph in question is strong, a realistic assumption when we think of the postman problem.
Let D = (V, A) be a strong digraph and let c be a weight function on A. The cost c(W ) of a walk W is ij∈A cijWij where Wij denotes the number of times the arc ij occurs on W . Deﬁne N as the network N = (V, A, l ≡ 1, u ≡ ∞, c), that is, all arcs have lower bounds one, capacity inﬁnity and cost equal to the weight on each arc.
Theorem 3.11.4 The cost of a minimum cost circulation in N equals the minimum cost of a Chinese postman walk in D.
Proof: Suppose W is a closed walk in D which uses each arc ij ∈ A Wij ≥ 1 times. Then it is easy to see that we can obtain a feasible circulation of cost c(W ) in N just by sending Wij units of ﬂow along each arc ij ∈ A.
Conversely, suppose x is an integer feasible circulation in N . Form a directed multigraph D = (V, A ) by letting A contain xij copies of the arc ij for each ij ∈ A. It follows from the fact that x is an integer circulation that D is an eulerian directed multigraph (see Figure 3.20). Hence, by Theorem 1.6.3, D has an eulerian tour T . The tour T corresponds to a closed walk W in D which uses each arc at least once and clearly we have c(W ) = cT x.
11 This assumption is to make sure that the postman can carry all the mail in his backpack, say. Without this assumption the problem becomes much harder.

142 3. Flows in Networks

ad

a3 d

b (a)

c

2 1
2
b1 (b)

1
c

Figure 3.20 Part (a) shows a digraph with cost 1 (not shown) on every arc. Part (b) shows the values of a minimum cost circulation in the corresponding network. This circulation corresponds to the postman tour abdacdacbda.

3.11.3 Finding Subdigraphs with Prescribed Degrees

In some algorithms on directed multigraphs an important step is to decide whether a directed multigraph D contains a subdigraph with prescribed degrees on the vertices. One such example is when we are interested in checking whether D contains a cycle factor (see Chapter 5). Below we show that such problems and more general versions of these problems can be answered using ﬂows. See Exercise 3.67 for another application of ﬂows to a similar question involving construction of directed multigraphs with speciﬁed in- and outdegrees. Another application of the techniques illustrated in this subsection can be found in Section 7.16.

Theorem 3.11.5 There exists a polynomial algorithm for the following problem. Given a directed multigraph D = (V, A) with V = {v1, v2, . . . , vn} and integers a1, a2, . . . , an, b1, b2, . . . , bn, ﬁnd a subdigraph D = (V, A∗) of D which satisﬁes d+D (vi) = ai and d−D (vi) = bi for each i = 1, 2, . . . , n, or show that no such subdigraph exists. Furthermore, if there are costs speciﬁed for each arc, then we can also ﬁnd in polynomial time the cheapest (minimum cost) subdigraph which satisﬁes the degree conditions.

Proof: We and that

mni=a1yaai ss=ume nit=h1abti .aiC≤leadr+Dly(veia),chbi

≤ of

d−D(vi) for each i these conditions

= is

1, 2, . . . , n necessary

for the existence of D and they can all be checked in time O(n). Let M =

n i=1

ai

and

deﬁne

a

network

N

as follows: N

= (V

∪V

∪{s, t}, A , l ≡ 0, u),

where V = {v1, v2, . . . , vn}, V = {v1 , v2 , . . . , vn} and A = {svi : i =

1, 2, . . . , n} ∪ {vj t : j = 1, 2, . . . , n} ∪ {vivj : vivj ∈ A}. Finally, we let

usviC=leaaril,yutvhi et

= bi for i = 1, 2, . . maximum possible

. , n and value of

all an

other arcs have (s, t)-ﬂow in N

capacity is M . We

one. claim

that N has an (s, t)-ﬂow of value M if and only if D has the desired subdi-

graph.

Suppose and d−D (vi)

ﬁrst = bi

that D for each

= (V, A∗) is a i = 1, 2, . . . , n.

subdigraph satisfying Then the following is

d+D an

(vi) = ai (s, t)-ﬂow

3.11 Applications of Flows 143

of value M in equals one if vi

N vj

:∈xAsv∗i

= ai, xvi t = bi, for and zero otherwise.

each

i

=

1, 2, . . . , n

and

xvi vj

Suppose now that x is an integer (s, t)-ﬂow of value M in N and let

A∗ = {vivj : xvivj = 1}. Then D = (V, A∗) is the desired subdigraph. It follows from our arguments above that we can ﬁnd the desired subdi-

graph D in polynomial time using any polynomial algorithm for ﬁnding a

maximum ﬂow in a network.

Observe also that, if we have a cost function c on the arcs of D and let N

inherit costs in the obvious way (arcs incident to s or t have cost zero), then

ﬁnding a minimum cost subdigraph D can be solved using any algorithm for

minimum cost ﬂows.

It follows from Theorem 3.11.5 that we can decide whether a given digraph has a spanning k-regular subdigraph for some speciﬁed natural number k in polynomial time. In fact, using minimum cost ﬂows we can even ﬁnd the cheapest such subdigraph in the case that there are costs on the arcs. What happens if we do not require the regular subdigraph to be spanning? If k = 1, then the existence version of the problem is trivial, since such a subdigraph exists unless D is acyclic. Yannakakis and Alon observed that already when k ≥ 2 the existence version of the problem becomes N P-complete. For details see [279].

3.11.4 Path-Cycle Factors in Directed Multigraphs
We saw in the last subsection that we can use ﬂows to ﬁnd a cycle factor in a given digraph or to prove that none exists. We now show that ﬂows are in fact very useful for studying the more general path-cycle factors in digraphs. Finding this type of subdigraph is an important ingredient in several polynomial algorithms for hamiltonian path and cycle algorithms for generalizations of tournaments (see Chapter 5).
We start with three necessary and suﬃcient conditions for the existence of a cycle factor in a digraph. The reason for giving all three is that in certain cases one of them provides a better way to deal with the problem under consideration than the other two. The ﬁrst two parts are given in Ore’s book [595]; the last is due to Yeo [748].
Proposition 3.11.6 Let D = (V, A) be a directed multigraph.
(a) D has a cycle factor if and only if the bipartite representation BG(D) of D contains a perfect matching.
(b) D has a cycle factor if and only if there is no subset X of V such that either | v∈X N +(v)| < |X| or | v∈X N −(v)| < |X|.
(c) D has a cycle factor if and only if V cannot be partitioned into subsets Y , Z, R1, R2 such that (Y, R1) = ∅, (R2, R1 ∪ Y ) = ∅, |Y | > |Z| and Y is an independent set.

144 3. Flows in Networks

Proof: (a): The reader was asked to prove (a) in Exercise 1.62, but we give the proof here for completeness. Suppose BG(D) has a perfect matching consisting of edges v1vπ(1), ..., vnvπ(n), where π is a permutation of the set {1, ..., n}. Then the arcs v1vπ(1), ..., vnvπ(n) form a cycle factor. Indeed, in the digraph D induced by these arcs every vertex vi has out-degree and indegree equal to one and such a digraph is precisely a disjoint union of cycles (Exercise 3.57).
Conversely, if C1 ∪ C2 ∪ . . . ∪ Ck is a cycle factor in D, then for every vi ∈ V let π(i) be the index of the successor of vi on the cycle containing vi. Then π induces a permutation of V and {vivπ(i) : vi ∈ V } is a perfect matching in BG(D).
(b): Clearly D has a cycle factor if and only if the converse of D has a cycle factor, so it suﬃces to show that D has a cycle factor if and only if there is no subset X satisfying | v∈X N +(v)| < |X|. Necessity is clear because if | v∈X N +(v)| < |X| holds for some X then there can be no cycle subdigraph which covers all vertices of X (there are not enough distinct out-neighbours). So suppose | v∈X N +(v)| ≥ |X| holds for all X ⊂ V . Then it is easy to see that |N (X )| ≥ |X | holds for every subset X ⊂ V of BG(D) (where V (BG(D)) = V ∪ V , recall Section 1.6). It follows from Theorem 3.11.3 that BG(D) has a perfect matching and now we conclude from (a) that D has a cycle factor.
(c): We ﬁrst prove the necessity. Suppose D has a cycle factor F and yet there is a partition Y, R1, R2, Z as described in (c). By deleting suitable arcs from the cycles in F we can ﬁnd a collection of |Y | vertex-disjoint paths such that all these paths start in Y and end at vertices of V − Y each of which dominate some vertex in Y (here we used that Y is an independent set). However this contradicts the existence of the partition Y, R1, R2, Z as described in (c), since it follows from the fact that |Z| < |Y | that there can be at most |Z| such paths in D (all such paths must pass through Z).
Now suppose that D has no cycle factor. Then we conclude from (b) that there exists a set X such that | v∈X N +(v)| < |X| holds. Let
Y = {v ∈ X : d−D X (v) = 0}, R1 = V −X−N +(X), R2 = X−Y, Z = N +(X).

Then (Y, R1) = ∅, (R2, R1∪Y ) = ∅ and Y is an independent set. Furthermore, since | v∈X N +(v)| < |X| we also have |Z| + |X − Y | = | v∈X N +(v)| < |X| = |X − Y | + |Y |, implying that |Z| < |Y |. This shows that Y, Z, R1, R2 form a partition as in (c).

It is not diﬃcult to show that Proposition 3.11.6 remains valid for directed pseudographs (where we allow loops) provided that we consider a loop as a cycle (Exercise 3.58). We will use that extension below.
Combining Proposition 3.11.6 with Theorem 3.11.1 we obtain

Corollary and a cycle

3.11.7 factor

foTuhnede(xiifstoenneceeoxifsatsc)yicnletfiamcetoOr (in√namdi)g.raph

can

be

checked

3.11 Applications of Flows 145
Recall that the path-cycle covering number pcc(D) of a directed pseudograph is the least positive integer k such that D has a k-path-cycle factor. The next result (whose proof is left as Exercise 3.68) and Theorem 3.11.1 imply that we can calculate pcc(D) in polynomial time for any directed pseudograph.
Proposition 3.11.8 Let n be the number of vertices in a directed pseudograph D and let ν be the number of edges in a maximum matching of BG(D). If ν = n, then pcc(D) = 1, otherwise pcc(D) = n − ν.
The following result by Gutin and Yeo generalizes Proposition 3.11.6(c).
Corollary 3.11.9 [377] A digraph D has a k-path-cycle factor (k ≥ 0) if and only if V (D) cannot be partitioned into subsets Y , Z, R1, R2 such that (Y, R1) = ∅, (R2, R1 ∪ Y ) = ∅, |Y | > |Z| + k and Y is an independent set.
Proof: Assume that k ≥ 1. Let D be an auxiliary digraph obtained from D by adding k new vertices u1, . . . , uk together with the arcs {uiw, wui : w ∈ V (D), i = 1, 2, . . . , k}. Observe that D has a k-path-cycle factor if and only if D has a cycle factor. By Proposition 3.11.6 (c), D has a cycle factor if and only if its vertex set cannot be partitioned into sets Y , Z , R1, R2 that satisfy (Y, R1) = ∅, (R2, R1 ∪ Y ) = ∅, |Y | > |Z | and Y is an independent set. Note that if Y, Z , R1, R2 exist in D then the vertices u1, . . . , uk are in Z . Let Z = Z − {u1, . . . , uk}. Clearly, the subsets Y , Z, R1, R2 satisfy (Y, R1) = ∅, (R2, R1 ∪ Y ) = ∅, |Y | > |Z| + k and Y is an independent set.
The proof above and Corollary 3.11.7 easily implies the ﬁrst part of the following proposition.
Proposition 3.11.10 Let D be a directed pseudograph and let k be a ﬁxed non-negative integer. Then (a) In time O(√nm) we can check whether D has a k-path-cycle-factor and
construct one (if it exists). (b) Given a k-path-cycle factor in D, in time O(m), we can check whether
D has a (k − 1)-path-cycle factor and construct one (if it exists).
Proof: Exercise 3.69.
3.11.5 Cycle Subdigraphs Covering Speciﬁed Vertices
In the solution of several algorithmic problems, such as ﬁnding the longest cycle in an extended semicomplete digraph or a semicomplete bipartite digraph, it is an important subproblem to ﬁnd a cycle subdigraph which covers as many vertices as possible. Below we show how to solve this problem using a reduction to the assignment problem, due to Alon (see [363]).

146 3. Flows in Networks
Theorem 3.11.11 There is an O(n3) algorithm which ﬁnds, for any given digraph D, a cycle subdigraph covering the maximum number of vertices in D.
Proof: Let D be a digraph and let D be the directed pseudograph one obtains by adding a loop at every vertex. Let B be the weighted bipartite graph one obtains from the bipartite representation BG(D ) of D by adding the following weights to the edges: the weight of an edge x y of B equals 1 if x = y and equals 2 if x = y. It is easy to see (Exercise 3.63) that, by solving the assignment problem for B (in time O(n3), see Section 3.12) and then removing all the edges with weight 2 from the solution, we obtain a set of edges of B corresponding to some 1-regular subdigraph F of D of maximum order.
Jackson and Ordaz [452] proved the following suﬃcient condition for the existence of a cycle factor in a digraph. (For undirected graphs the analogous condition implies that the graph has a hamiltonian cycle [161].)
Proposition 3.11.12 [452] If D is a k-strong digraph such that the maximum size of an independent set in D is at most k, then D has a spanning cycle subdigraph.
We now prove a generalization of this result and discuss its relevance to the problem of ﬁnding a cycle through a speciﬁed set of vertices in certain generalizations of tournaments. Deciding whether there is a cycle containing all vertices from a prescribed set X in an arbitrary digraph is an N P-complete problem already when |X| = 2 (see Theorems 9.2.3 and 9.2.6). Proposition 3.11.12 corresponds to the special case X = V in the following theorem, due to Bang-Jensen, Gutin and Yeo.
Theorem 3.11.13 [70] Let D = (V, A) be a k-strong digraph and let X ⊂ V (D) be such that α(D X ) ≤ k. Then D has a cycle subdigraph (not necessarily spanning) covering X.
Proof: This can be proved directly from Theorem 3.8.2 (Exercise 3.65). We give a simple proof based on Proposition 3.11.6 which also holds for directed pseudographs (see Exercise 3.58).
Let D and X be as deﬁned in the theorem. Form the directed pseudograph D from D by adding a loop at each vertex not in X. Then D has a cycle subdigraph covering X if and only if D has a cycle factor, because the new arcs cannot contribute to cycles which cover vertices from X. Suppose D has no cycle factor. Then by Proposition 3.11.6 (c) we can partition the vertices of V into sets R1, R2, Y, Z so that (Y, R1) = ∅, (R2, R1 ∪ Y ) = ∅, |Y | > |Z| and Y is an independent set. Note that no vertex with a loop can be in an independent set (see Section 1.6 for the deﬁnition of an independent set of vertices). Thus we have Y ⊆ X. It follows from the description of the arcs

3.12 The Assignment Problem and the Transportation Problem 147
between the sets above that there is no path from Y to R1 in D − Z. Thus we must have |Z| ≥ k since D is k-strong. But now we have the contradiction
k ≤ |Z| < |Y | ≤ α(D X ) ≤ k.
Thus D has a cycle factor, implying that D has a cycle subdigraph covering X.
Theorem 3.11.13 shows that the obvious necessary condition for the existence of a cycle covering a speciﬁed subset X, namely that there exists some collection of disjoint cycles covering X is satisﬁed in many cases. Indeed, if D is k-strong, then we may take X arbitrarily large, provided its independence number stays below k + 1.
We point out that, when |X| = k and D is k-strong, then the existence of a cycle subdigraph covering X can also be proved easily using Menger’s theorem (Theorem 7.3.1). See Exercise 7.17.
The proof above combined with that of Theorem 3.11.11 immediately implies the following result.
Theorem 3.11.14 There exists an O(n3) algorithm for checking whether a given digraph D = (V, A) with a prescribed subset X ⊆ V has a cycle subdigraph covering X.

3.12 The Assignment Problem and the Transportation Problem

In this section we study two special cases of the minimum cost ﬂow problem,

both of which occur frequently in practical applications. Being special cases

of the minimum cost ﬂow problem, they can be solved using any of the algo-

rithms described in Section 3.10. The purpose of this section is to illustrate a

general approach, the primal dual algorithm, for solving linear programming

problems while using the transportation problem as an example. In order to

read parts of this section the reader is supposed to have some basic knowledge

of linear programming and the duality theorem for linear programming (see

e.g. the book [600] by Papadimitriou and Steiglitz).

In the assignment problem, the input consists of a set of persons

P1, P2, . . . , Pn, a set of jobs J1, J2, . . . , Jn and an n × n matrix M = [Mij] whose entries are non-negative integers. Here Mij is a measure for the skill

of person Pi in performing job Jj (the lower the number the better Pi per-

forms job Jj). The goal is to ﬁnd an assignment π of persons to jobs so

that each person gets exactly one job and the sum

n i=1

Miπ(i)

is

mini-

mized. Note that it is easy to formulate the weighted bipartite matching

problem (given a complete12 undirected bipartite graph Kn,n with weights

12 Assuming that the graph is complete is no restriction since we can always replace non-edges by edges of weight ∞.

148 3. Flows in Networks

on its edges, ﬁnd a perfect matching of minimum total weight) as an instance

of the assignment problem. On the other hand, it is also easy to see that,

given any instance of the assignment problem, we may form a complete bipar-

tite graph B = (U, V ; E) where U = {P1, P2, . . . , Pn}, V = {J1, J2, . . . , Jn} and E contains the edge PiJj with the weight Mij for each i = 1, 2, . . . , m, j = 1, 2, . . . , n. This shows that the assignment problem is equivalent to the

weighted bipartite matching problem.

It is also easy to see from this observation that the assignment problem is

a (very) special case of the minimum cost ﬂow problem. In fact, if we think

of Mij as a cost, then what we are seeking is a ﬂow of minimum cost so that the balance vector is one for each Pi, i = 1, 2, . . . , m and the balance vector

is minus one for each Jj, j = 1, 2, . . . , n. In the transportation problem we are given a set of production plants

S1, S2, . . . , Sm which produce a certain product to be shipped to a set of

retailers T1, T2, . . . , Tn. For each pair (Si, Tj) there is a real-valued cost cij of

transporting one unit of the product from Si to Tj. Each plant produces ai,

i = 1, 2, . . . , m, units per time unit and each retailer needs bj, j = 1, 2, . . . , n,

units of the product per time unit. We assume below that

m i=1

ai

=

n j=1

bj

(this is no restriction of the model as shown in Exercise 3.71). The goal is to

ﬁnd a transportation schedule for the whole production (i.e. how many units

to send from Si to Tj for i = 1, 2, . . . , m, j = 1, 2, . . . , n) in order to minimize the total transportation cost.

Again the transportation problem is easily seen to be a special case of the

minimum cost ﬂow problem. Consider a bipartite network N with bipartition

classes S = {S1, S2, . . . , Sm} and T = {T1, T2, . . . , Tn} and all possible arcs from S to T where the capacity of the arc SiTj is ∞ and the cost of sending one unit of ﬂow along SiTj is cij. Now it is easy to see that an optimal transportation schedule corresponds to a minimum cost ﬂow in N with respect to

the balance vectors

b(Si) = ai, i = 1, 2, . . . , m, and b(Tj) = −bj, j = 1, 2, . . . , n.

The fact that both the assignment problem and the transportation problem are special cases of the minimum cost ﬂow problem allows one to use any algorithm for ﬁnding a minimum cost ﬂow to solve these problems. Below we are going to describe how to obtain more eﬃcient algorithms for the transportation problem and the assignment problem by using the so-called primal-dual algorithm approach to linear programming problems. First we formulate the transportation problem as a linear programming problem.

mn
min cij xij
i=1 j=1 n
s.t. xij = ai, i = 1, 2, . . . , m
j=1

(3.26)

3.12 The Assignment Problem and the Transportation Problem 149
m
xij = bj , j = 1, 2, . . . , n
i=1
xij ≥ 0 for all i, j.

The linear programming dual of the transportation problem is

mn

max

αiai + βj bj

i=1 j=1

s.t. αi + βj ≤ cij for all i, j

αi, βj unrestricted for all i, j.

(3.27)

Here the dual variables α1, . . . , αm correspond to the ﬁrst set of equalities and the dual variables β1, . . . , βn correspond to the second set of equalities in the transportation problem.
Assume that we are given a feasible solution α1, . . . , αm, β1, . . . , βn to the dual (3.27) and deﬁne a set IJ of indices by IJ = {(i, j) : αi + βj = cij}. Suppose that x is a feasible solution to the transportation problem and that
xij = 0 for all (i, j) ∈ IJ . Then we have

mn

cij xij =

cij xij

i=1 j=1

(i,j)∈IJ

= (αi + βj )xij

(i,j)∈IJ

mn

= αi(

xij ) + βj (

xij )

i=1 {j:(i,j)∈IJ }

j=1 {i:(i,j)∈IJ }

mn

= αiai + βj bj .

i=1 j=1

Combining this with the weak duality theorem for linear programming13 shows that x is an optimal solution to the transportation problem.
In order to study how to use this observation algorithmically, we deﬁne the restricted primal problem with respect to the given dual solution (α, β):

13 When the primal is a minimization problem, then the value of the dual objective function is at most the value of the primal objective function for any pair of feasible solutions to the dual and the primal.

150 3. Flows in Networks
m+n
min ri
i=1 n
s.t. xij + ri = ai, i = 1, 2, . . . , m
j=1 m
xij + rm+j = bj, j = 1, 2, . . . , n
i=1
xij ≥ 0 for all (i, j) ∈ IJ xij = 0 for all (i, j) ∈ IJ ri ≥ 0, i = 1, 2, . . . , m + n.

(3.28)

The variables r1, r2, . . . , rm+n are usually called slack variables. They ensure that (3.28) always has a feasible solution. Furthermore, the optimum
in (3.28) is zero if and only if (3.26) has a feasible solution. The dual of (3.28),
called the dual of the restricted primal problem, is as follows:

mn

max

αiai + βj bj

i=1 j=1

s.t. αi + βj ≤ 0 for all (i, j) ∈ IJ

αi, βj ≤ 1 for all i, j.

(3.29)

Let x, r be an optimal solution to the restricted primal problem (that is,

one that minimizes

m+n i=1

ri).

Observe

that

if

r

≡

0,

then

x

is

also

a

feasible

solution to the transportation problem and since xij = 0 for all (i, j) ∈ IJ ,

we see from the argument above that x is in fact an optimal solution to the

transportation problem. Furthermore, it follows from (3.28) that minimizing

m+n i=1

ri

is

equivalent

to

the

following

maximization

problem:

max s.t.

xij
(i,j)∈IJ m
xij ≤ ai i = 1, 2, . . . , m
i=1 n
xij ≤ bj j = 1, 2, . . . , n
j=1
xij ≥ 0 for (i, j) ∈ IJ xij = 0 for (i, j) ∈ IJ .

(3.30)

3.12 The Assignment Problem and the Transportation Problem 151

This is just a maximum ﬂow problem. Indeed, let N(α,β) = (V, A, l ≡ 0, u) be the network whose vertices are V = X ∪ Y ∪ {s, t}, where X =

{s1, s2, . . . , sm} and Y = {t1, t2, . . . , tn} and whose arcs are A = {ssi : i = 1, 2, . . . , m} ∪ {tjt : j = 1, 2, . . . , n} ∪ {sitj : (i, j) ∈ IJ }. The capacity of the arc ssi is ai, i = 1, 2, . . . , m, the capacity of the arc tjt is bj, j = 1, 2, . . . , n and the capacity of each arc of the form sitj is ∞. We call N(α,β) the admissible network with respect to (α, β). It is not diﬃcult to show that there is

a 1-1 correspondence between maximum (s, t)-ﬂows in N(α,β) and optimal solutions to (3.30).

What do smaller than

we do
m i=1

if ai

the value of (recall that

the this

maximum (s, t)-ﬂow in N(α,β) is equivalent to saying that the

is strictly optimum

value in (3.28) is strictly greater than zero)? In this case x, restricted to the

arcs {sitj : (i, j) ∈ IJ }, is not a feasible solution to the transportation problem. However, this is where the main step in the primal-dual algorithm

comes into play. We now show that in this case it is always possible to modify

the current dual solution (α, β) to a new feasible dual solution (α , β ) in such

a way that the value of a maximum (s, t)-ﬂow in the network N(α ,β ) is at least as large as the corresponding value in N(α,β). Furthermore, if it is the same, then after a ﬁnite number of repetitions of dual solution changes, the

value of a maximum ﬂow in the current admissible network will increase.

Let x be a maximum ﬂow in N(α,β) and suppose that |x| <

m i=1

ai.

Let S be the set of vertices that are reachable from s in N(α,β)(x). Let I =

{1, 2, . . . , m}, J = {1, 2, . . . , n} and deﬁne I∗, J∗ by

I∗ = {i ∈ I : si ∈ S}; J ∗ = {j ∈ J : tj ∈ S}.

As we saw in the proof of Theorem 3.5.3, (S, S) is a minimum (s, t)-cut in N(α,β). In particular, since all arcs of the form sitj have capacity ∞, there is no pair (i, j) ∈ IJ for which i ∈ I∗ and j ∈ J − J∗ (compare this with the proof of Theorem 3.11.2). Thus, arguing as we did in the proof of Theorem 3.11.2 and using Theorem 3.5.3 we obtain

|x| =

ai +

bj .

i∈I −I ∗

j∈J ∗

(3.31)

Going back to the problem (3.30) and using the fact that |x| is exactly the value of an optimal solution to this problem, we see from (3.31) that the optimal solution for the current problem (3.28) is given by

n+m

m

n

min ri = ai + bj − 2|x|

i=1 i=1 j=1

mn

= ai + bj − 2(

ai +

bj )

i=1 j=1

i∈I −I ∗

j∈J ∗

152 3. Flows in Networks

= ai −

ai +

bj −

bj .

i∈I ∗

i∈I −I ∗

j∈J−J ∗

j∈J ∗

This implies that the following feasible solution (α¯, β¯) is optimal for (3.29):

α¯i∗ =

1 if i ∈ I∗ −1 if i ∈ I − I∗

β¯j∗ =

−1 if j ∈ J∗ 1 if j ∈ J − J∗.

(3.32)

Let

:=

min{ cij

− α¯i

αi − + β¯j

βj

: (i, j) ∈ IJ

and

α¯i + β¯j

> 0}

=

min{ cij

− αi 2

− βj

:

i

∈

I∗, j

∈

J

− J ∗},

(3.33)

and deﬁne (α∗, β∗) as follows:

α∗i =

αi + αi −

if i ∈ I∗ if i ∈ I − I∗

β

∗ j

=

βj − βj +

if j ∈ J ∗ if j ∈ J − J∗.

(3.34)

It and J

follows −J∗ =

easily from the fact that |x| <

m i=1

ai

∅. Furthermore, since there is currently

= no

n j=1

bj

arc sitj

that with

I∗ (i,

= j)

∅ ∈

IJ , we have cij − αi − βj > 0 for all such pairs (i, j). This shows that exists

and is strictly greater than zero.

Lemma 3.12.1 Let α, β, α∗, β∗ be as above. Then the following holds:
(a) (α∗, β∗) is a feasible solution to the dual (3.27) of the transportation problem.
(b) For every arc sitj in N(α,β) such that x is non-zero the arc sitj is also an arc of N(α∗,β∗)
(c) The network N(α∗,β∗) contains at least one arc sitj for which i ∈ I∗ and j ∈ J − J∗.
(d) The value of a maximum (s, t)-ﬂow in N(α∗,β∗) is at least as large as the value of the current maximum ﬂow x in N(α,β).

3.12 The Assignment Problem and the Transportation Problem 153

Proof: Exercise 3.72.

Putting the observations we made above together, we obtain the following algorithm for the transportation problem.

The primal-dual algorithm for the transportation problem
Input: An instance of the transportation problem. Output: An optimal transportation schedule14.

1. Initialize the dual variables as follows:

For i := 1 to m let αi := min{cij : j = 1, 2, . . . , m};

For j := 1 to n let βj := min{cij − αi : i = 1, 2, . . . , m};

2. Construct the admissible network N(α,β);

3. 4.

Find If |x|

a=mamix=im1 auimthﬂeonwrextuinrnNx(;α,β);

5. Update the dual variables according to (3.33) and (3.34);

6. Construct the new admissible network and go to Step 3.

Theorem 3.12.2 The primal-dual algorithm will ﬁnd an optimum solution

for any given transportation problem with m plants and n retailers in time

O(M (n + m)2), where M =

m i=1

ai

=

n j=1

bj

.

Proof: We give a brief sketch which gives a complexity of O(M (n + m)3).

In Exercise 3.74 the reader is asked to show how to implement the algorithm

so that one obtains the desired complexity.

It is easy to check that the dual variables which are calculated in Step

1 form a feasible solution and that the admissible network will contain at

least one arc from X to Y . Forming N(α,β) can be done in time O((n + m)2) and we can ﬁnd the ﬁrst maximum ﬂow in time O((n + m)2M ) using the

Ford-Fulkerson algorithm (see Theorem 3.5.4).

We can easily construct N(α∗,β∗) from N(α,β) in time O((n + m)2). By Lemma 3.12.1(b) we do not have to start all over when we wish to calculate

a maximum ﬂow in the updated admissible network N(α∗,β∗). In fact, the current ﬂow x (interpreted in the obvious way) is a feasible (s, t)-ﬂow in

N(α∗,β∗). Thus starting from x and searching for an augmenting path in the residual network, we can either ﬁnd an augmenting path or detect that the

current x is still maximum in time O((n + m)2). This and the fact that we

always augment by an integer amount of ﬂow implies that, in order to prove

the complexity O(M (n + m)3) for the algorithm, it suﬃces to show that the

number of changes in the dual variables between two consecutive increases

in the value of the maximum ﬂow in the admissible network is at most m.

Suppose that the current ﬂow x has value less than

m i=1

ai

and

let

us

estimate the number of times we can change the dual variables without en-

abling an increase in the ﬂow value. Let (α, β) be the actual dual variables,

let S be the set of vertices that are reachable from s in N(α,β)(x) and deﬁne

14 In the form of an optimal ﬂow, from which the schedule can be read out easily.

154 3. Flows in Networks

S∗ similarly for N(α∗,β∗). By Lemma 3.12.1(b), no arc which carries ﬂow disappears when we change from N(α,β) to N(α∗,β∗). It is easy to show that this implies that S ⊂ S∗. By Lemma 3.12.1(c) we add at least one new arc sitj such that si ∈ S and tj ∈ S (in N(α,β) there is no such arc since they all have inﬁnite capacity) and hence we obtain that |S∗ ∩ Y | > |S ∩ Y |. Since |Y | = m it follows that after at most m changes of dual variables we can increase the ﬂow in the current admissible network.
For the assignment problem we have n = m and M = n, implying that the following holds (see also Exercise 3.76).
Theorem 3.12.3 The assignment problem on n persons and n jobs is solvable in time O(n3).
For the assignment problem the O(n3) implementation of the primal-dual algorithm above is due to Kuhn [505] and is also known under the name the Hungarian method. The interested reader can ﬁnd more details on the implementation of the primal-dual algorithm for the transportation and the assignment problems in e.g. the book [578] by Murty.
In practice it is not necessary to work explicitly on the network N(α,β). Suppose we keep a table containing the following information: the cost matrix, the supplies and demands for the actual instance of the transportation problem and the actual values of the dual variables (α, β). These can all be kept compactly as shown below.

αa

26 565284

10 12 10 11 11 11 12

6

3 4 55

34 43

1 10 6 8 10 1 4 3

β 0 0 1 0 10

b 5 4 3 4 55

The cost matrix can be found in the upper left part of the diagram. Each cell corresponding to an entry in the matrix is divided into an upper and a lower part. In the lower part we have speciﬁed the cost cij of sending one unit from plant i to retailer j. No numbers are speciﬁed in the upper halves of each cell at this point (see below). The values of the supplies and demands are speciﬁed as the vectors a (in the rightmost column) and b (in the bottom row of the diagram). There is also a column which speciﬁes the initial value of the α vector and a row specifying the initial value of the β vector. These have

3.12 The Assignment Problem and the Transportation Problem 155

been calculated according to Step 1 of the primal-dual algorithm. Finally, shaded cells indicate the set IJ .
Equipped with such a diagram we may ﬁrst ﬁnd a feasible ﬂow x which may or may not be maximum in the current admissible network, e.g. by a greedy approach. The search for a new augmenting path with respect to x can also be modeled by adding a small amount of information to the diagram. Namely, we show labels which indicate how a search might progress. We start by labelling those rows i ≤ m for which bx(i) < ai by ‘s, +’. Then we search for an augmenting (s, t)-path as follows (compare this with the proof of Theorem 3.5.4):

If a row i is labelled then every column j for which the cell i j is admissible (the corresponding arc is an arc of the admissible network) may be labelled (capacity is ∞ here). We label such a column by ‘i , +’. If a column j is already labelled and xij > 0, then we may label the row i by ‘j, −’. If at some point we label a column j for which bx(j) < bj then we have a breakthrough: an augmenting path corresponding to the labels we can trace backwards from j has been found. In this case we augment the ﬂow as much as possible, delete all labels and start the labelling process again. If no more rows or columns can be labelled, the process stops.

It is easy to see that the description above is merely a speciﬁcation of the

Ford-Fulkerson algorithm on the residual network with respect to x and the

current admissible network.

When a maximum ﬂow in N(α,β) has been found and it has a value less

than

m i=1

ai,

the

primal-dual

algorithm

updates

the

dual

variables.

Given

the labels above we can easily identify the sets I∗, J∗ as the set of labeled

rows and columns and calculate the new dual variables (α∗, β∗) according

to (3.34). Note that in order to avoid fractional values of α∗, β∗ it is more

convenient to use the following choice for the new dual variables α∗, β∗ (here

is as deﬁned in (3.33)). In Exercise 3.77 the reader is asked to show that

this choice for α∗, β∗ still gives a feasible solution and one which has a higher

value for the objective function in (3.27).

α∗i =

αi + 2 αi

if i ∈ I∗ if i ∈ I − I∗

β∗j =

βj − 2 βj

if j ∈ J ∗ if j ∈ J − J∗.

(3.35)

Below we show a diagram representation of the algorithm on the example
above, starting from a maximum ﬂow in the network N(α,β). Recall that shaded cells indicate the arcs of the current admissible network.

156 3. Flows in Networks

αa

5

6

4 52

8

42

6 s,+

42 12 10 11 11 11 12 10

6

4 3

4

5

5

4

33

4

6

8 10 1

4

1 10 s,+ 3

β0 0 1 0 1 0

b5 4 3 4 5 5

1,+

No augmenting path found so we make a dual change:

1 = min{5-2-0,6-2-0,5-2-1,8-2-1,4-2-0} = 2 4 = min{6-1-0,8-1-0,10-1-1,4-1-1,3-1-0} = 2 2 = min { 1, 4} = 2.
The new diagram, with updated dual variables and admissible arcs indicated by shaded cells, together with the new labelling step is shown below:

α 4 5 6 5 2 8 44 42
10 12 10 11 11 11 12
43 345543

a 6 s, + 6 4

6 8 10 1 4 3 3 10 s, + β 0 0 1 -2 1 0

b543455

1, + 1, +

1, +

breakthrough

Augment along each of the paths ss1t3t and ss1t6t by one unit along each. After this columns 4, 5 and 6 can be labelled ‘4, +’ and now we
can send 5 units along ss4t5t and 4 units along ss4t6t. After these augmentations the next labelling step results in the following labels:

3.12 The Assignment Problem and the Transportation Problem 157

14 5652
42
12 10 11 11

1 84
11 12

4 345543

54 6 8 10 1 4 3

α 4 10 3
3

β 0 0 1 -2 1 0

a 6 4,6 3,4
10 s, +

b543455

2,+ 1,+ 4,+ 4,+ 4,+

No augmenting path found so we make a dual change:

1 = min{5-4-0} = 1 2 = 12-10-0 = 2 4 = 6-3-0 = 3 2 = min { 1, 2, 4} = 1.

14 5652
42
12 10 11 11

1 84
11 12

4 345543

54 6 8 10 1 4 3

α 5 11 3 4

β 0 -1 0 -3 0 -1

a 6 4,6 4
10 s, +

b543455

1,+

1,+ 4,+ 4,+ 4,+

breakthrough

Now we can augment by one unit along the path ss4t4s1t1t.

1 5
12

6 4
10

1 5
2
11

3 2
11

1 84
11 12

4 345543

154 6 8 10 1 4 3

α 5 11 3 4

β 0 -1 0 -3 0 -1

a 6 6 4 10

b543455

158 3. Flows in Networks
A feasible solution to (3.26) has been found. Control for optimality:
m,n
cijxij = 5 + 5 + 6 + 4 + 40 + 22 + 12 + 1 + 20 + 12 = 127
i=1,j+1 mn
αiai + βjbj = 30 + 66 + 12 + 40 − 4 − 12 − 5 = 127.
i=1 j=1

Above we have illustrated the primal-dual algorithm when applied to the transportation problem. We would like to stress that this approach is quite general. It works for any linear programming problem and its dual, provided that both problems have feasible solutions. We refer the reader to the book by Papadimitriou and Steiglitz [600] for an excellent account of the primal-dual algorithm approach.

3.13 Exercises
Unless otherwise stated, all numerical data in the exercises below are integers.
3.1. Find a feasible ﬂow in the network N of Figure 3.21.

3

−3 6

3

5 −1 3 4

1 2

−1

4 7

10

7 −5

Figure 3.21 A network N with balance vector b speciﬁed at each vertex. All lower bounds and costs are zero and capacities are shown on the arcs.

3.2. Suppose the network N = (V, A, l, u, b, c) has some 2-cycle iji for which cij = −cji. Show how to transform N into another network N without 2cycles such that every feasible ﬂow in N corresponds to a feasible ﬂow in N of the same cost. What is the complexity of this transformation?
3.3. Prove Lemma 3.2.1 (a).
3.4. Prove Lemma 3.2.2.

3.13 Exercises 159

3.5. Prove Lemma 3.2.3. In particular, argue why we need to take lts = M rather than lts = 0.
3.6. Prove Lemma 3.2.4.
3.7. (+) Fast decomposition of ﬂows. Prove Lemma 3.3.2.
3.8. Decomposing an eulerian directed multigraph into arc-disjoint cycles. Prove that the arc set of every eulerian directed multigraph can be decomposed into arc-disjoint cycles. Hint: form a circulation in an appropriate network and apply Theorem 3.3.1.
3.9. Find the residual network corresponding to the network and ﬂow indicated in Figure 3.22.

(1, 2, 5)

25 (2, 3, 6)

(0, 2, 3) (2, 4, 4)

(3, 3, 3) (2, 4, 6)

1

(0, 1, 2) 3

(0, 2, 5) 6

(0, 2, 2)

8

(6, 7, 9)

(0, 0, 9)

(1, 6, 7) (1, 3, 5)

(0, 0, 1) (2, 5, 7)

4 (0, 3, 4)

7

Figure 3.22 A network with a ﬂow x. The notation for the arcs are (l, x, u).

3.10. Find the balance vector bx for the ﬂow x in Figure 3.22.
3.11. Eliminating lower bounds on arcs in maximum ﬂow problems. Show how to reduce the maximum (s, t)-ﬂow problem in a network N with some non-zero lower bounds on the arcs to the maximum (s , t )-ﬂow problem in a network N with source s and sink t and all lower bounds equal to zero.
3.12. Let x be a ﬂow in N = (V, A, l ≡ 0, u, c) and let f (W ) be a cycle ﬂow of value δ in N (x). Show that the ﬂow x∗ = x ⊕ f (W ) has the same balance vector as x in N . Show also that the cost of x∗ is given by cT x + cT f (W ).
3.13. Prove that the ﬂow x¯ deﬁned in the proof of Theorem 3.4.3 is a feasible ﬂow in N (x).
3.14. Let x be a feasible ﬂow in N = (V, A, l ≡ 0, u, c) and let y be a feasible ﬂow in N (x). Show that N (x ⊕ y) = N (x)(y), where N (x)(y) denotes the residual network of N (x) with respect to y. That is, show that the two networks contain the same arcs and with the same residual capacities.
3.15. An alternative decomposition of a ﬂow. Consider the proof of Theorem 3.3.1 and suppose that, instead of taking µ = min{bx(i0), −bx(ik), δ}, we let µ = δ. What kind of decomposition into path and cycle ﬂows will we get and what is the bound on their number?

160 3. Flows in Networks
3.16. Structure of minimum (s, t)-cuts. Decide which of the following is true or false. In each case either give a counter-example or a proof of correctness. (a) If all arcs have diﬀerent capacities, then there is a unique minimum (s, t)-cut. (b) If we multiply the capacity of each arc by a constant k, then the structure (as subset of the vertices) of the minimum (s, t)-cuts is unchanged. (c) If we add a constant k to the capacity of each arc, then the structure (as subset of the vertices) of the minimum (s, t)-cuts is unchanged.
3.17. (+) The Ford-Fulkerson algorithm may never terminate if capacities are real numbers.
1

s rt

r2

Figure 3.23 A bad network for the generic Ford-Fulkerson algorithm. All arcs except the three in the middle have capacity r + 2. Those in the middle have capacities 1, r, r2, where r is the golden ratio.

Let N be the network in Figure 3.23. Here r is the golden ratio, i.e. r2 = 1−r. Observe that rn+2 = rn − rn+1 for n = 1, 2, . . . .

(a) Show that the value of a maximum ﬂow in N is 1 + r + r2 = 2.

(b) Devise an inﬁnite sequence of augmentations along properly chosen aug-

menting paths in the current residual network so that the ﬂow value will

ctioensvaerregenotonw-raartdiosn1al+num∞ib=e2rrsi,

= 2. This shows that, when the capacithe Ford-Fulkerson algorithm may never

terminate. Hint: ﬁrst augment by one unit and then by ri units in the

ith augmentation step, i ≥ 2, along an appropriately chosen augmenting

path.

3.18. (+) Prove that the Ford-Fulkerson algorithm will always terminate if all capacities are rational numbers.
3.19. Let S be a totally unimodular p × q matrix and I the p × p identity matrix. Show that the matrix [S I] is also totally unimodular.
3.20. Exact distance labels give a height function for the preﬂow-push algorithm. Let N be a network with source s and sink t and let x be a preﬂow in N such that there is no (s, t)-path in N (x). Prove that if we let h(i) equal the distance from i to t in N (x) for i ∈ V − s and h(s) = n, then we obtain a height function.
3.21. Bad performance of the preﬂow-push algorithm. Give an example which shows that the preﬂow-push algorithm may use many applications of push and lift without sending any extra ﬂow into t or back to s.

3.13 Exercises 161

3.22. Eliminating some useless work in the preﬂow-push algorithm. Let N = (V, A, l ≡ 0, u) be a network with source s and sink t. Suppose that we execute the generic preﬂow-push algorithm on N . Let h be a height function with respect to N and x. We say that h has a hole at position i + 1, for some i < n at some point in the execution of the algorithm if at that time the following holds: |{v : h(v) = j}| > 0 for every j ≤ i and |{v : h(v) = i + 1}| = 0. Let h be deﬁned as follows: h (v) = h(v) if h(v) ∈ {1, 2, . . . , i} ∪ {n, n + 1, . . . , 2n − 1} h (v) = n + 1 if i < h(v) < n.
(a) Prove that h is a height function, that is, (3.14) is satisﬁed. (b) Describe how to implement this modiﬁcation of the height function ef-
ﬁciently so that it may be used as a subroutine in the preﬂow-push algorithm. (c) Explain why changing the height function as above when a hole is detected may help speed up the preﬂow-push algorithm.
3.23. Using the height function to detect a minimum cut after termination of the preﬂow-push algorithm. Suppose x is a maximum (s, t)ﬂow that been found by executing the preﬂow-push algorithm on a network N = (V, A, l ≡ 0, u). Describe a method to detect a minimum (s, t)-cut in O(n) steps using the values of the height function upon termination of the algorithm.
3.24. (+) Re-optimizing a maximum (s, t)-ﬂow. Suppose x is a maximum ﬂow in a network N = (V, A, l ≡ 0, u). Show how to re-optimize x (that is, to change it to a feasible ﬂow of maximum value) in each of the following cases: (a) Increase the capacity of one arc by k units. Show that the new optimal solution can be found in time O(km). (b) Decrease the capacity of one arc by k units. Show that new optimal solution can be found in time O(km). Hint: use Theorem 3.3.1.
3.25. (+) Pulling and pushing ﬂow, the MKM-algorithm. The purpose of this exercise is to introduce another, very eﬃcient, method for ﬁnding a blocking (s, t)-ﬂow in a layered network due to Malhotra, Kumar and Maheshwari [544]. Let L = (V = V0 ∪ V1 ∪ . . . ∪ Vk, A, l ≡ 0, u) be a layered network with V0 = {s} and Vk = {t}. Let y be a feasible (s, t)-ﬂow which is not blocking in L. For each vertex i ∈ V − {s, t} let αi, βi, ρi be deﬁned as follows:

αi =

uji − yji

ji∈A

(3.36)

βi =

uij − yij

ij∈A

(3.37)

ρi = min{αi, βi}.

(3.38)

Let

ρs =

usj − ysj , ρt =

ujt − yjt.

sj∈A

jt∈A

Finally let ρ = mini∈V {ρi}. Suppose that ρ > 0 and let i ∈ V be chosen such that ρ = ρi.

(3.39)

162 3. Flows in Networks
(a) Prove that it is possible to send an additional amount of ρ units from i to t (called pushing from i to t) and ρ units of ﬂow from s to i in L (called pulling from s to i). Hint: use that the network is layered.
The observation above leads to the following algorithm A for ﬁnding a blocking ﬂow in a layered network. Below the ρ-values always refer to the current ﬂow.
The MKM-algorithm 1. Start with the zero ﬂow y ≡ 0 and calculate ρi for all i ∈ V . If some i ∈ V has ρi = 0 then go to Step 6; 2. Choose i such that ρi = ρ; 3. Push ρ units of ﬂow from i to t and pull ρ units from s to i; 4. Delete all arcs which are saturated with respect to the new ﬂow. If this results in some vertex of in- or out-degree zero, then also delete that vertex and all incident arcs. Continue this until no more arcs can be deleted; 5. Calculate ρi for all vertices in the current layered network. If ρi > 0 for all vertices then go to Step 2. Otherwise go to Step 6. 6. If ρs = 0 or ρt = 0, then halt; 7. If there is a vertex i with ρi = 0, then delete all such vertices and their incident arcs; 8. Go to Step 5.
(b) Prove that the algorithm above correctly determines a blocking ﬂow in the input layered network L. The complexity of A depends on how we perform the diﬀerent steps, especially Step 3. Suppose we apply the following rule for performing Step 3. We always push/pull ρ units one layer at a time. If j is the current vertex from (to) which we wish to send ﬂow to (from) the next (previous) layer, then we always ﬁll an arc with tail (head) j completely if there is still enough ﬂow left and then continue to ﬁll the next arc as much as possible.
(c) Argue that, using the rule above, we can implement the algorithm to run in O(n2) time. Hint: at least one vertex will be deleted between two consecutive applications of Step 3. Furthermore, one can keep the ρ-values eﬀectively updated (explain how).
(d) Illustrate the algorithm on the layered network in Figure 3.10.
3.26. Finding maximum (s, t)-ﬂows by scaling. Let N = (V, A, l ≡ 0, u) be a network with source s and sink t and let U denote the maximum capacity of an arc in N . (a) (−) Prove that the capacity of a minimum (s, t)-cut is at most U |A|. (b) Let C be a constant and let x be a feasible (s, t)-ﬂow in N . Show that in time O(|A|) one can ﬁnd an augmenting path of capacity at least C, or detect that no such path exists in N (x). Hint: consider the subnetwork of N (x) containing only arcs whose capacity is at least C. (c) Consider the following algorithm:
Max-ﬂow by scaling 1. U := max{uij : ij ∈ A}; 2. xij := 0 for every ij ∈ A; 3. C := 2 log2 U ; 4. while C ≥ 1 do 5. while N (x) contains an augmenting path of capacity at least C

3.13 Exercises 163

do augment x along P ; 6. C := C/2 7. return x Prove that the algorithm correctly determines a maximum ﬂow in the input network N . (d) Argue that every time Step 4 is performed the residual capacity of every minimum (s, t)-cut is at most 2C|A|. (e) Argue that the number of augmentations performed in Step 5 is at most O(|A|) before Step 6 is executed again. (f) Conclude that Max-ﬂow by scaling can be implemented so that its complexity becomes O(|A|2 log U ). Compare this complexity to that of other ﬂow algorithms in this chapter.
3.27. Show how to ﬁnd a maximum (s, t)-ﬂow in the network of Figure 3.24 using (a) The Ford-Fulkerson method. (b) Dinic’s algorithm. (c) The preﬂow-push algorithm. (d) The MKM-algorithm described in Exercise 3.25. (e) The scaling algorithm described in Exercise 3.26.

10

5 45

30

s 20

15 25

15 5

9

10

t

6

Figure 3.24 A network with lower bounds and cost equal to zero on all arcs and capacities as indicated on the arcs.

3.28. (+) Rounding a real-valued ﬂow. Let N = (V, A, l, u) be a network with source s and sink t and all data on the arcs non-negative integers (note that some of the lower bounds may be non-zero). Suppose x is a real-valued feasible ﬂow in N such that xij is a non-integer for at least one arc. (a) Prove that there exists a feasible integer ﬂow x in N with the property that |xij − xij| < 1 for every arc ij ∈ A. (b) Suppose now that |x| is an integer. Prove that there exists an integer feasible ﬂow x in N such that |x | = |x|. (c) Describe algorithms to ﬁnd the ﬂows x , x above. What is the best complexity you can achieve?
3.29. Finding a feasible circulation. Turn the proof of Theorem 3.8.2 into a polynomial algorithm which either ﬁnds a feasible circulation, or a proof that none exists. What is the complexity of the algorithm?
3.30. Residual networks of networks with non-zero lower bounds. Show how to modify the deﬁnition of x ⊕ x˜ in order to obtain an analogue of

164 3. Flows in Networks

Theorem 3.4.2 for the case of networks where some lower bounds are nonzero.
3.31. Show that a feasible circulation (if one exists) can always be found by just one max ﬂow calculation in a suitable network. Hint: transform the network into an (s, t)-ﬂow network with all lower bounds equal to zero.
3.32. (+) Flows with balance vectors within prescribed intervals. Let N = (V, A, l, u) be a network where V = {1, 2, . . . , n} and let ai ≤ bi, i = 1, 2 . . . , n be integers. Prove that there exists a ﬂow x in N which satisﬁes

lij ≤ xij ≤ uij ∀ij ∈ A

(3.40)

ai ≤ bx(i) ≤ bi ∀i ∈ V if and only if the following three conditions are satisﬁed:

(3.41)

ai ≤ 0
i∈V

(3.42)

bi ≥ 0

(3.43)

i∈V

u(X, X) ≥ l(X, X) + max{a(X), −b(X)} ∀X ⊂ V,

(3.44)

where a(X) = i∈X ai. Hint: construct a network which has a feasible circulation if and only if (3.40) and (3.41) holds. Then apply Theorem 3.8.2.

3.33. Submodularity of the capacity function for cuts. Let N = (V, A, l, u)
be a network with source s and sink t. Prove that, if (S, S) and (T, T ) are (s, t)-cuts, then

u(S, S) + u(T, T ) ≥ u(S ∩ T, S ∩ T ) + u(S ∪ T, S ∪ T ).
Hint: consider the contribution of each arc in the network to the four cuts.
3.34. Show that, if (S, S) and (T, T ) are minimum (s, t)-cuts, then so are (S ∩ T, S ∩ T ) and (S ∪ T, S ∪ T ). Hint: use Exercise 3.33.
3.35. (+) Finding special minimum cuts. Suppose that x is a maximum (s, t)ﬂow in a network N = (V, A, l, u). Let
U = {i : there exists an (s, i)-path in N (x)},
W = {j : there exists an (j, t)-path in N (x)}.
Prove that (U, U ) and (W , W ) are minimum (s, t)-cuts. Then prove that for every minimum (s, t)-cut (S, T ) we have U ⊆ S and W ⊆ T .
3.36. (+) Let x be an (s, t)-ﬂow in a network N = (V, A, l, u). Explain how to ﬁnd an augmenting path of maximum capacity in polynomial time. Hint: use a variation of Dijkstra’s algorithm.
3.37. (+) Augmenting along maximum capacity augmenting paths. Show that, if we always augment along an augmenting path with the maximum residual capacity, then the Ford-Fulkerson algorithm becomes a polynomial algorithm (Edmonds and Karp [216]). Hint: show that the number of augmentations is O(m log U ), where U is the maximum capacity of an arc.

3.13 Exercises 165

3.38. Converting a maximum preﬂow to a maximum (s, t)-ﬂow. Let N = (V, A, l ≡ 0, u) be a network with source s and sink t. A preﬂow x in N is maximum if |bx(t)| equals the value of a maximum (s, t)-ﬂow in N .
(a) Let N = (V, A, l ≡ 0, u) be a network with source s and sink t and let y be a maximum preﬂow in N . Prove that there exists a maximum (s, t)ﬂow x in N with the property that xij ≤ yij for every arc ij ∈ A. Hint: use ﬂow decomposition.
(b) How fast can you convert a maximum preﬂow to a maximum (s, t)-ﬂow?

3.39. (−) Prove Lemma 3.7.1.

3.40. (−) Prove Lemma 3.7.6.

3.41. Show that the complexity of Dinic’s algorithm for unit capacity networks

remains

O(n

2 3

m)

even

if

we

allow

the

network

to

have

2-cycles.

Hint:

prove

a

modiﬁed version of Lemma 3.7.3 and apply that as we applied Lemma 3.7.3

in the proof of Theorem 3.7.4.

3.42. Elimination of 2-cycles from simple networks. Suppose that N = (V, A, l ≡ 0, u ≡ 1) is a simple unit capacity network with source s, sink t and that uvu is a 2-cycle in N . Show that we may always delete one of the arcs uv or vu without aﬀecting the value of a maximum (s, t)-ﬂow in N .

3.43. Prove Theorem 3.7.7. Hint: see the proof of Theorem 3.7.4.

3.44. Show how to derive Theorem 3.8.4 from Lemma 3.2.2 and Theorem 3.8.2.

3.45. Scheduling jobs on identical machines. Let J be a set of jobs which are
to be processed on a set of identical machines (such as processors, airplanes,
trucks etc). Each job is processed by one machine. There is a ﬁxed schedule
for the jobs, specifying that job j ∈ J must start at time sj and ﬁnish at time fj. Furthermore, there is a transition time tij required to set up a machine which has just performed job i to perform job j (e.g., jobs could be diﬀerent
loads for trucks and tij could be time to drive a truck from the position of load i to that of load j). The goal is to ﬁnd a feasible schedule for the
jobs which requires as few machines as possible. Show how to formulate this
problem as a minimum value (s, t)-ﬂow problem.

3.46. (+) Scheduling supervision of projects. This exercise deals with a practical problem concerning the assignment of students to various projects in a course. All projects which are chosen by at least one student are to be supervised by one or more qualiﬁed teachers. Each student is supervised by one teacher only. There are n students, m diﬀerent projects and t possible supervisors for the projects. Let bi, i = 1, 2, . . . , m, denote the maximum number of students who may choose the same project (they work alone and hence need individual supervision). For each project i, i = 1, 2, . . . , m, there is a subset Ai ⊆ {1, . . . , t} of the teachers who are capable of supervising the ith project. Finally each teacher j, j = 1, 2, . . . , t has an upper limit of kj on the number of students (s)he can supervise. Every student must be assigned exactly one project. We also assume that each student has ranked the projects from 1 to m according to the order of preference. Namely, the project the student would like best is ranked one. Denote the rank of project j by student i by rij.

166 3. Flows in Networks

The goal is to ﬁnd an assignment p(1), p(2), . . . , p(n) of students to projects

(that is student i is assigned project p(i)) which respects the demands above

and at the same time minimizes the sum

n i=1

rip(i) .

(a) Show how to formulate the problem as a minimum cost ﬂow problem.

(b) If we only wish to ﬁnd a feasible assignment (i.e. one that does not violate

the demands above), then which is the fastest algorithm you can device?

(c) Which minimum cost ﬂow algorithm among those in Section 3.10 will

give the fastest algorithm for the problem when formulated as in question

(a)?

(d) Let p(1), p(2), . . . , p(n) be an optimal assignment of students to projects.

Suppose that before the actual supervision of the projects starts, some

supervisor j ∈ {1, 2, . . . , t} lowers his/her capacity for supervision from

kj to kj < kj . Describe a fast algorithm which either proves that no feasible assignment

exists or changes the assignment p(1), p(2), . . . , p(n) to a new optimal

assignment p (1), p (2), . . . , p (n) with respect to the new restrictions.

(e) Suppose now that the change in capacity only happens after the students

have started working on the projects. The goal now is to ﬁnd a new

optimal and feasible solution or show that no feasible solution exists,

while at the same time rescheduling as few students as possible to new

projects (we assume that rescheduled students must start all over again).

Explain brieﬂy how to solve this variant of the problem. Hint: devise

some measure of cost for rescheduling a student in a minimum cost ﬂow

model.

3.47. (−) Let N = (V, A, l ≡ 0, u) be a network with source s and sink t and let N = (V, A , l ≡ 0, u , c ) be obtained from N by adding a new arc ts with uts = ∞ and cts = −1 taking uij = uij for all ij ∈ A and cij = 0 for all ij ∈ A. Prove that there is a 1-1 correspondence between the minimum cost circulations in N and the maximum (s, t)-ﬂows in N .

3.48. Let N = (V, A, l ≡ 0, u, b, c) be a network with some arcs of inﬁnite capacity and some arcs of negative cost. (i) Show that there exists a ﬁnite optimal solution to the minimum cost ﬂow problem (ﬁnding a feasible ﬂow in N of minimum cost) if and only if N has no cycle C of negative cost such that all arcs of C have inﬁnite capacity. Hint: study the diﬀerence between an arbitrary feasible solution and some ﬁxed solution of ﬁnite cost. (ii) Let K be the sum of all ﬁnite capacities and those b-values that are positive. Show that, if there exists a ﬁnite optimal solution to the minimum cost ﬂow problem for N , then there exists one for which no arc has ﬂow value more than K. Hint: use ﬂow decomposition.

3.49. Eliminating negative cost arcs from minimum cost ﬂow problems. Suppose N = (V, A, l ≡ 0, u, b, c) contains an arc uv of negative cost, but no cycle of inﬁnite capacity and negative cost (see Exercise 3.48). Derive a result similar to Lemma 3.2.1 which can be used to transform N into a new network N + in which all costs are non-negative and such that given any feasible ﬂow x+ in N + we can obtain a feasible ﬂow x in N and ﬁnd the cost of x eﬃciently, given the cost of x+. Hint: reverse arcs of negative costs, negate the costs of such arcs and update balance vectors.

3.50. Prove Theorem 3.10.6.

3.13 Exercises 167

3.51. Try to generalize the statement of Proposition 3.10.7 to the case when the paths P, P do not necessarily have the same end vertices. Hint: consider the network Nst obtained as in Lemma 3.2.2.
3.52. Show by an example that the cycle canceling algorithm may use Ω(mU C) augmentations before arriving at an optimal ﬂow.
3.53. (−) Show how to reduce the problem of ﬁnding a matching in a bipartite graph B = (X, Y, E) which maximizes the number of edges incident vertices in X to the problem of ﬁnding a maximum matching in a bipartite graph.
3.54. (+) Prove that, if D is a k-regular semicomplete digraph on n vertices, then D contains a spanning tournament T which is regular or almost regular (|∆0(T ) − δ0(T )| ≤ 1) depending on whether n is odd or even. Observe that every regular tournament has an odd number of vertices (Bang-Jensen [47]).

3.55. (+) Generalized matchings in undirected graphs. Let G = (V, E)
be an undirected graph. Recall that for any subset S ⊂ V we denote by
NG(S) the set of vertices in V − S which have at least one edge to S. Prove that every graph G either has a vertex disjoint collection of edges e1, . . . , ek and odd cycles C1, . . . , Cr covering V , or a set S ⊂ V with |NG(S)| < |S| and S is independent. Derive an algorithm from your proof which either
ﬁnds the desired generalized matching, or an independent subset S such that
|N (S)| < |S|. Hint: use Theorem 3.8.2 on an appropriate network.

3.56. Prove the following theorem due to K¨onig [499]. Every regular bipartite graph has a perfect matching.

3.57. (−) 1-regular digraphs. Prove that, if D is a 1-regular digraph, then D is precisely a collection of vertex disjoint cycles C1, . . . , Ck for some k ≥ 1.

3.58. Cycle factors of directed pseudographs. Prove that Proposition 3.11.6 also holds for directed pseudographs provided we consider a loop as a cycle.

3.59.

(+) how

Calculating to ﬁnd in time

tOh(e√pnamth) -tchye cmleincimovuemriinngtegneurmk bsuecrhotfhaatdaiggirvaepnhd.igSrhaopwh

D has a path-cycle factor with k paths. Hint: use minimum value ﬂows in an

appropriately constructed simple network.

3.60. (+) Path-cycle covering numbers of extensions of digraphs. Let R be
a digraph on r vertices, and let l1 ≤ u1, l2 ≤ u2, ..., lr ≤ ur be 2r non-negative integers. Let Ip denote an independent set on p vertices. Show how to ﬁnd min{pcc(R[Ip1 , ..., Ipr ]) : li ≤ pi ≤ ui, i = 1, ..., r} in time O(n3). Hint: generalize the network you used in Exercise 3.59 (Bang-Jensen and Gutin
[65, 365]).

3.61. Let k ∈ Z+. Show that a directed graph D = (V, A) has a k-path-cycle factor if and only if | v∈X N +(v)| ≥ |X| − k and | v∈X N −(v)| ≥ |X| − k.
3.62. Show how to decide in time O(√nm) whether or not a given input digraph D with special vertices x, y contains a 1-path-cycle factor such that the path is a path between x and y.

3.63. Complete the proof of Theorem 3.11.11.

168 3. Flows in Networks

3.64. Heaviest cycle subdigraphs in digraphs. Describe an O(n3) algorithm to ﬁnd, in a digraph with non-negative weights on the arcs, a cycle subdigraph of maximum weight. Hint: use the same approach as in the proof of Theorem 3.11.11.
3.65. (+) Prove Theorem 3.11.13 directly from Theorem 3.8.2. Show that your proof implies the existence of an algorithm, which given a k-strong digraph D and a subset X ⊆ V (D), either ﬁnds a collection of disjoint cycles covering all the vertices of X, or an independent set X ⊆ X of size more than k.
3.66. Find a minimum cost Chinese postman walk in the digraph of Figure 3.25.

1

3 4
7

10 12

6 2
8

9

Figure 3.25 A digraph with weights on the arcs.

3.67. Show how to formulate the following problem as a ﬂow problem. Given two sequences of non-negative integers a1, a2, . . . , an and b1, b2, . . . , bn decide whether or not there exists a directed multigraph D = ({v1, v2, . . . , vn}, A) such that d+D(vi) = ai and d−D(vi) = bi for each i = 1, 2, . . . , n. Hint: use Theorem 3.11.5 or the proof idea of this theorem.
3.68. Prove Proposition 3.11.8.
3.69. Prove Proposition 3.11.10. Hint: use the same network as in Exercise 3.59.
3.70. Every regular directed multigraph has a cycle factor. Prove this claim.

3.71. Show how to reduce the case when

m i=1

ai

=

n j=1

bj

to

the

case

when

the

equality holds for the transportation problem. Hint: introduce new plants or

retailers.

3.72. Prove Lemma 3.12.1.

3.73. Prove that Lemma 3.12.1 also holds when we consider the dual variables α∗, β∗ which are updated as in (3.35).

3.74. (+) Show that by using appropriate data structures and by keeping labels (used in previous searches for augmenting paths) until a new augmenting path has been found (implying that the value of the current ﬂow can be increased), one can implement the primal-dual algorithm for the transportation problem so that it runs in time O(M (n + m)2).

3.75. Solve the following assignment problem using the primal-dual method.

12 9 10 8 11 86659 13 10 10 11 11 62435 11 7 10 9 11

3.13 Exercises 169

3.76. Show that the buildup algorithm of Section 3.10 can be applied to solve the assignment problem in time O(n3).
3.77. Show that if we update the dual variables according to (3.35) we still obtain a feasible solution to (3.27) whose objective function value is strictly higher than that of α, β.
3.78. The following table shows an instance of the transportation problem after some iterations of the primal-dual method outlined in Section 3.12. Complete the algorithm on this example.

5
2 5

3 3
6

1 73
12 5

1 2
9

2 83
6 10

4 1
5

8 1
7
8
10

β 0 -2 1 -2 2

α 5 5 5 11 2 2 7 9 0

b3 3 6 2 1 2

a 4 3 3 7

3.79. Tree solution to a ﬂow problem. Let N = (V, A, l ≡ 0, u, b, c) be a network with n vertices for which there exists a feasible ﬂow and let D = (V, A) be the underlying digraph of N . Prove that there exists a feasible ﬂow x in N such that the number of arcs on which 0 < xij < uij is at most n − 1. We call such a feasible ﬂow a tree solution. Hint: show that, if C is a cycle in U G(D) where 0 < xij < uij for every arc on the cycle, then we can change the current ﬂow such that the resulting ﬂow x is either 0 or uij for at least one arc ij of C and no new arc pq with 0 < xpq < upq is created.
3.80. Let N = (V, A, l ≡ 0, u, b, c) be a network with n vertices for which there exists a feasible ﬂow. Prove that there exists an optimal feasible ﬂow which is a tree solution.

3.81. Vertex potentials and ﬂows. Let N = (V, A, l ≡ 0, u, b, c) be a network

and x a feasible ﬂow in N . Prove that x is an optimal ﬂow if and only if there

exists a function π : V

cπij are

= cij with

− π(i) + π(j) respect to cπ

→R such that cπij ≥ 0 for every arc ij in N (x). is the reduced cost function and the costs in instead of c. Hint: see Exercises 2.16-2.18.

Here N (x)

170 3. Flows in Networks

3.82. Complementary slackness conditions for optimality of a ﬂow. Let N = (V, A, l ≡ 0, u, b, c) be a network and x a feasible ﬂow in N . Prove that x is an optimal ﬂow if and only if there exists a function π : V →R such that the following holds:

cπij > 0 ⇒ xij = 0 cπij < 0 ⇒ xij = uij 0 < xij < uij ⇒ cπij = 0.

(3.45) (3.46) (3.47)

Here cπij = cij − π(i) + π(j) as above. Hint: use Exercise 3.81.
3.83. (+) A primal-dual algorithm for minimum cost ﬂows. Let N = (V, A, l ≡ 0, u, c) be a network with source s and sink t for which the value of a maximum (s, t)-ﬂow is K > 0. Let x be an optimal (feasible) (s, t)-ﬂow of value k < K and let π : V →R be chosen such that cπij ≥ 0 for every arc ij in N (x) (see Exercise 3.81). Deﬁne A0 as those arcs ij of N (x) for which we have cπij = 0 and let N0 be the subnetwork of N (x) induced by the arcs of A0.
(a) Show that if y is a feasible (s, t)-ﬂow in N0 of value p then x = x ⊕ y is an optimal (s, t)-ﬂow of value k + p in N . Hint: verify that cπij ≥ 0 holds for every arc ij in N (x ).
(b) Suppose y is a maximum (s, t)-ﬂow in N0, but x = x ⊕ y has value less than K. Let S denote the set of vertices which are reachable from s in N0(y). Let , 1, 2 be deﬁned as follows. Here we let i = ∞ if there are no arcs in the corresponding set, i = 1, 2:
1 = min {cπij |i ∈ S, j ∈ S, cπij > 0 and xij < uij , }
2 = min {−cπij |i ∈ S, j ∈ S, cπij < 0 and xij > 0}.
Let = min{ 1, 2}. Prove that < ∞. (c) Now deﬁne π as follows: π (v) := π(v) + if v ∈ S and π (v) := π(v)
if v ∈ S. Let N0 contain those arcs of N (x ) for which we have cπij = 0 and let S denote the set of vertices which are reachable from s in N0. Show that S is a proper subset of S and that cπij ≥ 0 holds for all arcs in N (x ). Hint: use Exercise 3.14. (d) If t ∈ S , then we can change π as above (based on the set S rather than S). Conclude that after at most n − 1 such updates of the vector π , the current network N0 contains an (s, t)-path. (e) Use the observations above to design an algorithm that ﬁnds a minimum cost (s, t)-ﬂow of value K in N by solving a sequence of maximum ﬂow problems. What is the complexity of this algorithm?

4. Classes of Digraphs
In this chapter we introduce several classes of digraphs. We study these, along with the classes of digraphs deﬁned already in Chapter 1, with respect to their characterization, recognition and decomposition. We also consider some basic properties of these classes. Further properties of the classes are studied in the following chapters of this book.
We start this chapter by introducing Depth-First Search (DFS), an important technique in algorithms on graphs. This technique is used in this chapter and some other chapters to design fast algorithms. In particular, DFS is used in Section 4.2, where we describe a fast algorithm to ﬁnd an acyclic ordering in an acyclic digraph. In Section 4.3, we introduce and study the transitive closure and a transitive reduction of a digraph. We use these notions in Section 4.7. A linear time algorithm for ﬁnding strong components of a digraph based on DFS is given in Section 4.4.
Several characterizations and a recognition algorithm for line digraphs are given in Section 4.5. We investigate basic properties of de Bruijn and Kautz digraphs and their generalizations in Section 4.6. These digraphs are extreme or almost extreme with respect to their diameter and vertex-strong connectivity. Series-parallel digraphs are introduced and studied in Section 4.7. These digraphs are of interest due to various applications such as scheduling. In the study of series-parallel digraphs we use notions and results of Sections 4.3 and 4.5.
An interesting generalization of transitive digraphs, the class of quasitransitive digraphs, is considered in Section 4.8. The path-merging property of digraphs which is quite important for investigation of some classes of digraphs including tournaments is introduced and studied in Section 4.9. Two classes of path-mergeable digraphs, locally in-semicomplete and locally outsemicomplete digraphs, both generalizing the class of tournaments, are deﬁned and investigated with respect to their basic properties in Section 4.10. The intersection of these two classes forms the class of locally semicomplete digraphs, which are studied in Section 4.11. There we give a very useful classiﬁcation of locally semicomplete digraphs, which is applied in several proofs in other chapters. A characterization of a special subclass of locally semicomplete digraphs, called round digraphs, is also proved.

172 4. Classes of Digraphs
Three classes of totally decomposable digraphs forming important generalizations of quasi-transitive digraphs as well as some other classes of digraphs are studied in the above-mentioned sections. We investigate recognition of these three classes in Section 4.12. Some properties of intersection digraphs are given in Section 4.13. Planar digraphs are discussed in Section 4.14. The last section is devoted to an application of digraphs to solving systems of linear equations.
4.1 Depth-First Search
In this section we will introduce a simple, yet very important, technique in algorithmic graph theory called depth-ﬁrst search. While depth-ﬁrst search (DFS) has certain similarities with BFS (see Section 2.3.1), DFS and BFS are quite diﬀerent procedures, each with its own features.
Let D = (V, A) be a digraph. In DFS, we start from an arbitrary vertex of D. At every stage of DFS, we visit some vertex x of D. If x has an unvisited out-neighbour y, we visit the vertex y1 . We call the arc xy a tree arc. If x has no unvisited out-neighbour, we call x explored and return to the predecessor pred(x) of x (the vertex from which we have moved to x). If x does not have a predecessor, we ﬁnd an unvisited vertex to ‘restart’ the above procedure. If such a vertex does not exist, we stop.
In our formal description of DFS, each vertex x of D gets two time-stamps: tvisit(x) once x is visited and texpl(x) once x is declared explored.
DFS Input: A digraph D = (V, A). Output: pred(v), tvisit(v) and texpl(v) for every v ∈ V.
1. For each v ∈ V set pred(v) := nil, tvisit(v) := 0 and texpl(v) := 0. 2. Set time := 0. 3. For each vertex v ∈ V do: if tvisit(v) = 0 then perform DFS-PROC(v).
DFS-PROC(v):
1. Set time := time + 1, tvisit(v) := time. 2. For each u ∈ N +(v) do: if tvisit(u) = 0 then pred(u) := v and perform
DFS-PROC(u). 3. Set time := time + 1, texpl(v) := time.
Clearly, the main body of the algorithm takes O(n) time. The total time for executing the diﬀerent calls of the procedure DFS-PROC is O(m) (as
x∈V d+(x) = m by Proposition 1.2.1). As a result, the time complexity of DFS is O(n + m).
1 If x has more than one unvisited out-neighbour, we choose y as an arbitrary unvisited out-neighbour.

4.1 Depth-First Search 173
Unlike BFS, in the end of DFS, the tree arcs may form a non-connected spanning subdigraph F of D (recall that we perform BFS from a prescribed vertex). The arc set of F is {(pred(v), v) : v ∈ V, pred(v) = nil}. Since each component of U G(F ) is a tree, F is a forest. We call F a DFS forest; a tree in F is a DFS tree; the root of a DFS tree is some vertex v used in Step 3 of the main body of DFS to initiate DFS-PROC. Clearly, the root r of a DFS tree T is the only vertex of T whose in-degree is zero. According to the above description of DFS every vertex in T can be reached from r by a path (hence T is an out-branching rooted at r in the subdigraph induced by V (T )). We say that a vertex x in T is a descendant of another vertex y in T (denoted by x y) if y lies on the (r, x)-path in T . Note that in general there may be many diﬀerent DFS forests for a given digraph D.
It is convenient to classify the non-tree arcs of a digraph D = (V, A) with respect to a given DFS forest of D. If we visit a vertex x and consider an already visited out-neighbour y of x, then the following possibilities may occur.
1. The vertex y is explored, i.e., texpl(y) = 0. This means that x and y belong to diﬀerent DFS trees. In this case, the arc xy is a cross arc.
2. The vertex y is not explored. If x y then xy is a backward arc. If y x then xy is a forward arc. If none of the above two variants occurs, xy is (again) a cross arc.
We illustrate the DFS algorithm and the above classiﬁcation of arcs in Figure 4.1. The tree arcs are in bold. The non-tree arcs are labeled B,C or F depending on whether they are backward, cross, or forward arcs. Every vertex u is time-stamped by tvisit(u)/texpl(u) if one or both of them have been changed from the initial value of zero.
Observe that, for every vertex v ∈ V , we have tvisit(v) < texpl(v). There is no pair u, v of vertices such that tvisit(u) = tvisit(v) or tvisit(u) = texpl(v) or texpl(u) = texpl(v) due to the fact that before assigning any time to tvisit(. . .) or texpl(. . .) the value of time is increased. We consider some additional simple properties of DFS. We denote the interval from time t to time t > t by [t, t ] and write I ⊆ I if the interval I is contained in the interval I .
Proposition 4.1.1 Let D = (V, A) and let the numbers tvisit(v), texpl(v), v ∈ V , be calculated using DFS. For every pair of vertices u and v, one of the assertions below holds:
(1) The intervals [tvisit(u), texpl(u)] and [tvisit(v), texpl(v)] are disjoint; (2) [tvisit(u), texpl(u)] ⊆ [tvisit(v), texpl(v)]; (3) [tvisit(v), texpl(v)] ⊆ [tvisit(u), texpl(u)].
Proof: Without loss of generality, we may assume that tvisit(u) < tvisit(v). If texpl(u) < tvisit(v), then the ﬁrst assertion is valid. So, assume that

174 4. Classes of Digraphs

vw 1/

z

vw 1/ 2/

z

q

xy

s

(a) time = 1

q

4/ 3/ xy

s

(b) time = 4

v 1/
B
4/5 x

w 2/7

z

3/6 ys
(c) time = 7

v 1/8
F

B

w 2/7
C

z 9/

4/5

3/6

10/

xy

s

(d) time = 10

q

v 1/8
FB
4/5 x

w 2/7

C

3/6 y

z 9/14

B

10/13 s

11/12 q

(e) time = 14

Figure 4.1 Some steps of DFS on a digraph starting from the vertex v.

texpl(u) > tvisit(v). This means that v was visited when u has been already visited but u was not explored yet. Thus, there is a directed path from u to v in the DFS forest, implying that v u. Since u cannot become explored when v is still unexplored, texpl(v) < texpl(u). This implies the third assertion.
This proposition implies immediately the following.
Corollary 4.1.2 For a pair x, y of distinct vertices of D, we have y x if and only if tvisit(x) < tvisit(y) < texpl(y) < texpl(x).
Proposition 4.1.3 Let F be a DFS forest of a digraph D = (V, A) and let x, y be vertices in the same DFS tree T of F . Then y x if and only if, at the time tvisit(x), the vertex y can be reached from x along a path all of whose internal vertices are unvisited.
Proof: Assume that y x. Let z be an internal vertex of the (x, y)-path in T . Thus, z x. By Corollary 4.1.2, tvisit(x) < tvisit(z). Hence, z is unvisited at time tvisit(x).
Suppose that y is reachable from x along a path P of unvisited vertices at time tvisit(x), but y x. We may assume that z = yP− (the predecessor of y on P ) is a descendant of x in T , that is, z x holds. By Corollary 4.1.2, texpl(z) < texpl(x). Since y is an out-neighbour of z, y is visited before z is

4.2 Acyclic Orderings of the Vertices in Acyclic Digraphs 175
explored. Hence, tvisit(y) < texpl(z). Clearly, tvisit(x) < tvisit(y). Therefore, tvisit(x) < tvisit(y) < texpl(x). By Proposition 4.1.1, it means that the interval [tvisit(y), texpl(y)] is contained in the interval [tvisit(x), texpl(x)]. By Corollary 4.1.2, we conclude that y x; a contradiction.
4.2 Acyclic Orderings of the Vertices in Acyclic Digraphs
Acyclic digraphs play a very important role in both theory and applications of digraphs (the reader will see this fact in this and the following chapters of the book). Some basic properties of acyclic digraphs have been studied in Section 1.4 where we showed that every acyclic digraph D has an acyclic ordering of the vertices (Proposition 1.4.3). The purpose of this subsection is to show how to ﬁnd an acyclic ordering fast2.
Let D be an acyclic digraph and let v1, v2, . . . , vn be an ordering of the vertices in D. We recall that this ordering is acyclic if the existence of an arc vivj in D implies i < j. By Proposition 1.4.3 every acyclic digraph has an acyclic ordering of its vertices. Now we demonstrate that using DFS one can ﬁnd an acyclic ordering of the vertices of D in (optimal) linear time.
Below we assume that the input to the DFS algorithm is an acyclic digraph D = (V, A). In the formal description of DFS let us add the following: i := n + 1 in the line 2 of the main body of DFS and i := i − 1, vi := v in the last line of DFS-PROC. We obtain the following algorithm which we denote by DFSA):
DFSA(D) Input: A digraph D = (V, A). Output: An acyclic ordering v1, . . . , vn of D.
1. For each v ∈ V set pred(v) := nil, tvisit(v) := 0 and texpl(v) := 0. 2. Set time := 0, i := n + 1. 3. For each vertex v ∈ V do: if tvisit(v) = 0 then perform DFSA-PROC(v).
DFSA-PROC(v)
1. Set time := time + 1, tvisit(v) := time. 2. For each u ∈ N +(v) do: if tvisit(u) = 0 then pred(u) := v and perform
DFSA-PROC(u). 3. Set time := time + 1, texpl(v) := time, i := i − 1, vi := v.
2 Notice that in the majority of literature an acyclic ordering is called a topological sorting. We feel that the name acyclic ordering is more appropriate, since no topology is involved. Knuth [481] was the ﬁrst to give a linear time algorithm for topological sorting.

176 4. Classes of Digraphs

Theorem 4.2.1 The algorithm DFSA correctly determines an acyclic ordering of any acyclic digraph in time O(n + m).

Proof: Since the algorithm is clearly linear (as DFS is linear), it suﬃces to

show that the ordering v1, v2, . . . , vn is acyclic. Observe that according to our algorithm

texpl(vi) > texpl(vj) if and only if i < j.

(4.1)

Assume that D has an arc vkvs such that k > s. Hence, texpl(vs) > texpl(vk). The arc vkvs is not a cross arc, because if it were, then by Proposition 4.1.1 and Corollary 4.1.2, the intervals for vk and vs would not intersect, i.e., vk would be visited and explored before vs would be visited; this and (4.1) make the existence of vkvs impossible. The arc vkvs is not a forward arc, because if it were, texpl(vs) would be smaller than texpl(vk). Therefore, vkvs must be a backward arc, i.e., vk vs. Thus, there is a (vs, vk)-path in D. This path and the arc vkvs form a cycle, a contradiction.

Figure 4.2 illustrates the result of applying DFSA to an acyclic digraph. The resulting acyclic ordering is z, w, u, y, x, v.
In Section 4.4 we apply DFSA to an arbitrary not necessarily acyclic digraph and see that the ordering v1, v2, . . . , vn obtained by DFSA is very useful to determine the strong components of a digraph.

x 1/4

z 7/12

2/3 v

y 5/6

u 8/9

10/11 w

Figure 4.2 The result of applying DFSA to an acyclic digraph

4.3 Transitive Digraphs, Transitive Closures and Reductions
Recall that a digraph D is transitive if, for every pair xy and yz of arcs in D with x = z, the arc xz is also in D. Transitive digraphs form the underlying graph-theoretical model in a number of applications. For example, transitive

4.3 Transitive Digraphs, Transitive Closures and Reductions 177
oriented graphs correspond very naturally to partial orders (see Section 5.3 for some terminology on partial orders, the correspondence between transitive oriented graphs and partial orders and some basic results). The aim of this section is to give a brief overview of some properties of transitive digraphs as well as transitive closures and reductions of digraphs.
Clearly, a strong digraph D is transitive if and only if D is complete3. We have the following simple characterization of transitive digraphs; its proof is left as Exercise 4.2.
Proposition 4.3.1 Let D be a digraph with an acyclic ordering D1, D2, . . . , Dp of its strong components. The digraph D is transitive if and only if each of Di is complete, the digraph H obtained from D by contraction of D1, . . . , Dp followed by deletion of multiple arcs is a transitive oriented graph, and D = H[D1, D2, . . . , Dp], where p = |V (H)|.
The transitive closure T C(D) of a digraph D is a digraph with V (T C(D)) = V (D) and, for distinct vertices u, v, the arc uv ∈ A(T C(D)) if and only if D has a (u, v)-path. Clearly, if D is strong then T C(D) is a complete digraph. The uniqueness of the transitive closure of an arbitrary digraph is obvious. To compute the transitive closure of a digraph one can obviously apply the Floyd-Warshall algorithm in Chapter 2. To obtain a faster algorithm for the problem one can use the fact discovered by a number of researchers (see, e.g., the paper [238] by Fisher and Meyer, or [286] by Furman) that the transitive closure problem and the matrix multiplication problem are closely related: there exists an O(na)-algorithm, with a ≥ 2, to compute the transitive closure of a digraph of order n if and only if the product of two boolean n × n matrices can be computed in O(na) time. Coppersmith and Winograd [168] showed that there exists an O(n2.376)-algorithm for the matrix multiplication. Goralcikova and Koubek [333] designed an O(nmred)algorithm to ﬁnd the transitive closure of an acyclic digraph D with n vertices and mred arcs in the transitive reduction of D (the notion of transitive reduction is introduced below). This algorithm was also studied and improved by Mehlhorn [561] and Simon [672].
An arc uv in a digraph D is redundant if there is a (u, v)-path in D which does not contain the arc uv. A transitive reduction of a digraph D is a spanning subdigraph H of D with no redundant arc such that the transitive closures of D and H coincide. Not every digraph D has a unique transitive reduction. Indeed, if D has a pair of hamiltonian cycles, then each of these cycles is a transitive reduction of D. Below we show that a transitive reduction of an acyclic digraph is unique, i.e., we may speak of the transitive reduction of an acyclic digraph. The intersection of digraphs D1, . . . , Dk with the same vertex set V is the digraph H with vertex set V and arc set
3 By the deﬁnition of a transitive digraph, a 2-cycle xyx does not force a loop at x and y.

178 4. Classes of Digraphs
A(D1) ∩ . . . ∩ A(Dk). Similarly one can deﬁne the union of digraphs with the same vertex sets (see Section 1.3). Let S(D) be the set of all spanning subdigraphs L of D for which T C(L) = T C(D).
Theorem 4.3.2 [5] For an acyclic digraph D, there exists a unique digraph D with the property that T C(D ) = T C(D) and every proper subdigraph H of D satisﬁes T C(H) = T C(D ). The digraph D is the intersection of digraphs in S(D).
The proof of this theorem, which is due to Aho, Garey and Ullman, follows from Lemmas 4.3.3 and 4.3.4.
Lemma 4.3.3 Let D and H be a pair of acyclic digraphs on the same vertex set such that T C(D) = T C(H) and A(D) − A(H) = ∅. Then, for every e ∈ A(D) − A(H), we have T C(D − e) = T C(D).
Proof: Let e = xy ∈ A(D) − A(H). Since e ∈ A(H), H must have an (x, y)path passing through some other vertex, say z. Hence, D has an (x, z)-path Pxz and a (z, y)-path Pzy. If Pxz contains e, then D has a (y, z)-path. The existence of this path contradicts the existence of Pzy and the hypothesis that D is acyclic. Similarly, one can show that Pzy does not contain e. Therefore, D − e has an (x, y)-path. Hence, T C(D − e) = T C(D).
Lemma 4.3.4 Let D be an acyclic digraph. Then the set S(D) is closed under union and intersection.
Proof: Let G, H be a pair of digraphs in S(D). Since T C(G) = T C(H) = T C(D), G ∪ H is a subdigraph of T C(D). The transitivity of T C(D) now implies that T C(G ∪ H) is a subdigraph of T C(D). Since G is a subdigraph of G ∪ H, we have T C(D) (= T C(G)) is a subdigraph of T C(G ∪ H). Thus, we conclude that T C(G ∪ H) = T C(D) and G ∪ H ∈ S(D).
Now let e1, . . . , ep be the arcs of G − A(G ∩ H). By repeated application of Lemma 4.3.3, we obtain
T C(G − e1 − e2 − . . . − ep) = T C(G).
This means that T C(G ∩ H) = T C(G) = T C(D), hence G ∩ H ∈ S(D).
Aho, Garey and Ullman [5] proved that there exists an O(na)-algorithm, with a ≥ 2, to compute the transitive closure of an arbitrary digraph D of order n if and only if a transitive reduction of D can be constructed in time O(na). Therefore, we have
Proposition 4.3.5 For an arbitrary digraph D, the transitive closure and a transitive reduction can be computed in time O(n2.376).

4.4 Strong Digraphs 179
Simon [673] described an O(n+m)-algorithm to ﬁnd a transitive reduction of a strong digraph D. The algorithm uses DFS and two digraph transformations preserving T C(D). This means that to have a linear time algorithm for ﬁnding transitive reductions of digraphs from a certain class D, it suﬃces to design a linear time algorithm for the transitive reduction of strong component digraphs of digraphs in D. (Recall that the strong component digraph SC(D) of a digraph D is obtained by contracting every strong component of D to a vertex followed by deletion of parallel arcs.) Such algorithms are considered, e.g., in the paper [385] by Habib, Morvan and Rampon.
While Simon’s linear time algorithm in [673] ﬁnds a minimal subdigraph D of a strong digraph D such that T C(D ) = T C(D), no polynomial algorithm is known to ﬁnd a subdigraph D of a strong digraph D with minimum number of arcs such that T C(D ) = T C(D). This is not surprising due to the fact that the corresponding optimization problem is N P-hard. Indeed, the problem to verify whether a strong digraph D of order n has a subdigraph D of size n such that T C(D ) = T C(D) is equivalent to the hamiltonian cycle problem, which is N P-complete by Theorem 5.0.1.
A subdigraph D of a digraph D with minimum number of arcs such that T C(D ) = T C(D) is sometimes called a minimum equivalent subdigraph of D. By the above discussion, we see that a minimum equivalent subdigraph of an acyclic digraph is unique and can be found in polynomial time. This means that the main diﬃculty of ﬁnding a minimum equivalent subdigraph of an arbitrary digraph D lies in ﬁnding such subdigraphs for the strong components of D. This issue is addressed in Section 6.11 for some classes of digraphs studied in this chapter. For the classes in Section 6.11, the minimum equivalent subdigraph problem is polynomial time solvable.
4.4 Strong Digraphs
In many problems on digraphs it suﬃces to consider the case of strong digraphs. For example, if we wish to ﬁnd a cycle through a given vertex x in a digraph D, we need only consider the strong component of D containing x. Furthermore, certain properties, such as being hamiltonian, imply that the digraph in question must be strong. The aim of this section is to develop a fast algorithm for ﬁnding strong components in a digraph and in particular to recognize strong digraphs.
Tarjan [688] was the ﬁrst to obtain an O(n + m)-algorithm to compute the strong components of a digraph. We start this section by presenting this algorithm, then we discuss its complexity and prove its correctness. Our presentation is adapted from the book [169] by Cormen, Leiserson, and Rivest.

180 4. Classes of Digraphs

SCA(D) Input: A digraph D. Output: The vertex sets of strong components of D.
1. Call DFSA(D) to compute the ‘acyclic’ ordering v1, v2, . . . , vn. 2. Compute the converse D of D. 3. Call DFS(D ), but in the main loop of DFS consider the vertices accord-
ing to the ordering v1, v2, . . . , vn. In the process of DFS(D ) output the vertices of each DFS tree as the vertices of a strong component of D.
Figure 4.3 illustrates the strong component algorithm (SCA). Clearly, the complexity of SCA is O(n+m). It is more diﬃcult to establish the correctness of SCA. Several lemmas are needed.

715

715

6 46 4

823

823

(a) (b)
Figure 4.3 (a) A digraph D; the order of vertices found by DFSA is shown. (b) The converse D of D; the bold arcs are the arcs of a DFS forest for D .

The proof of our ﬁrst lemma is simple and left as an exercise, Exercise 4.3.
Lemma 4.4.1 If a pair x, y of vertices belongs to the same strong component S of a digraph D, then the vertices of every path between x and y are in S.

Lemma 4.4.2 In any execution of DFS on a digraph, all vertices of the same strong component are placed in the same DFS tree.
Proof: Let S be a strong component of a digraph D, let r be the ﬁrst vertex of S visited by DFS and let x be another vertex of S. Consider the time tvisit(r) of DFS. By Lemma 4.4.1, all vertices on an (r, x)-path belong to S and apart from r are unvisited. Thus, by Proposition 4.1.3, x belongs to the same DFS tree as r.
In the rest of this section tvisit(u) and texpl(u) are the time-stamps calculated during the ﬁrst step of SCA (recall that these depends on the order in which the DFS routine visits the vertices). The forefather φ(u) of a vertex u is the vertex w reachable from u such that texpl(w) is maximum.

4.4 Strong Digraphs 181

Since u is reachable from itself, we have

texpl(u) ≤ texpl(φ(u)).

(4.2)

Clearly, by the deﬁnition of forefather

if v is reachable from u, then texpl(φ(v)) ≤ texpl(φ(u)). (4.3)

The next lemma gives a justiﬁcation for the term ‘forefather’.

Lemma 4.4.3 In any execution DFS on a digraph D, every vertex u ∈ V (D) is a descendant of its forefather φ(u).

Proof: If φ(u) = u, this lemma is trivially true. Thus, assume that φ(u) = u and consider the time tvisit(u) of DFS for D. Look at the status of φ(u). The vertex φ(u) cannot be already explored as that would mean texpl(φ(u)) < texpl(u), which is impossible. If φ(u) is already visited but not explored, then, by Corollary 4.1.2, u is a descendant of φ(u) and the lemma is proved.
It remains to show that φ(u) has been indeed visited before time tvisit(u). Assume it is not true and consider a (u, φ(u))-path P . If every vertex of P except for u has not been visited yet (at the time tvisit(u)), then by Proposition 4.1.3 φ(u) is a descendant of u, i.e. texpl(φ(u)) < texpl(u), which is impossible. Suppose now that there is a vertex x in P apart from u which has been visited. Assume that x is the last such vertex in P (going from u towards φ(u)). Clearly, x has not been explored yet (as x dominates an unvisited vertex). By Proposition 4.1.3 applied to P [x, φ(u)], φ(u) is a descendant of x. Thus, texpl(φ(u)) < texpl(x), which contradicts the deﬁnition of φ(u).
Thus, φ(u) has been indeed visited before time tvisit(u), which completes the proof of this lemma.

Lemma 4.4.4 For every application of DFS to a digraph D and for every u ∈ V (D), the vertices u and φ(u) belong to the same strong component of D.

Proof: There is a (u, φ(u))-path by the deﬁnition of forefather. The existence of a path from φ(u) to u follows from Lemma 4.4.3.
Now we show a stronger version of Lemma 4.4.4.

Lemma 4.4.5 For every application of DFS to a digraph D and for every pair u, v ∈ V (D), the vertices u and v belong to the same strong component of D if and only if φ(u) = φ(v).

Proof: If u and v belong to the same strong component of D, then every vertex reachable from one of them is reachable from the other. Hence, φ(u) = φ(v). By Lemma 4.4.4, u and v belong to the same strong components as their forefathers. Thus, φ(u) = φ(v) implies that u and v are in the same strong component of D.

182 4. Classes of Digraphs

Theorem 4.4.6 The algorithm SCA correctly ﬁnds the strong components of a digraph D.

Proof: We prove by induction on the number of DFS trees found in the execution of DFS on D that the vertices of each of these trees induce a strong component of D. Each step of the inductive argument proves that the vertices of a DFS tree formed in D induce a strong component of D provided the vertices of each of the previously formed DFS trees induce a strong component of D. The basis for induction is trivial, since the ﬁrst tree obtained has no previous trees, and hence the assumption holds trivially. Recall that by the description of SCA, in the second application of DFS, we always start a new DFS tree from the vertex which currently has the highest value of texpl among vertices not yet in the DFS forest under construction.
Consider a DFS tree T with root r produced in DFS(D ). By the deﬁnition of a forefather φ(r) = r. Indeed, r is reachable from itself and has the maximum texpl among the vertices reachable from r. Let S(r) = {v ∈ V (D) : φ(v) = r}. We now prove that

V (T ) = S(r).

(4.4)

By Lemmas 4.4.2 and 4.4.5, every vertex in S(r) is in the same DFS tree. Since r ∈ S(r) and r is the root of T , every vertex in S(r) belongs to T . To complete the proof of (4.4), it remains to show that, if u ∈ V (T ), then u ∈ S(r), namely, if texpl(φ(x)) = texpl(r), then x is not placed in T . Suppose that texpl(φ(x)) = texpl(r) for some vertex x. By induction hypothesis, we may assume that texpl(φ(x)) < texpl(r), since otherwise x is placed in the tree with root φ(x) = r. If x was placed in T , then r would be reachable from x. By (4.3) and φ(r) = r, this would mean texpl(x) ≥ texpl(φ(r)) = texpl(r), a contradiction.

4.5 Line Digraphs
For a directed pseudograph D, the line digraph Q = L(D) has vertex set V (Q) = A(D) and arc set
A(Q) = {ab : a, b ∈ V (Q), the head of a coincides with the tail of b}.
A directed pseudograph H is a line digraph if there is a directed pseudograph D such that H = L(D). See Figure 4.4. Clearly, line digraphs do not have parallel arcs; moreover, the line digraph L(D) has a loop at a vertex a ∈ A(D) if and only if a is a loop in D.
The following theorem provides a number of equivalent characterizations of line digraphs. Of these characterizations, (ii) is due to Harary and Norman [403], (iii) to Heuchenne [425], and (iv) and (v) to Richards [634]; conditions (ii) and (iii) have each been rediscovered several times, see the survey

3

12

4

5

4.5 Line Digraphs 23 34

183

12 45

25 54

HQ Figure 4.4 A digraph H and its line digraph Q = L(H).

[419] by Beineke and Hemminger. The proof presented here is adapted from

[419]. For an n × n-matrix M = [mik], a row i is orthogonal to a row j if

n k=1

mik mj k

=

0.

One

can

give

a

similar

deﬁnition

of

orthogonal

columns.

Theorem 4.5.1 Let D be a directed pseudograph with vertex set {1, 2, . . . , n}
and with no parallel arcs and let M = [mij] be its adjacency matrix (i.e., the n × n-matrix such that mij = 1, if ij ∈ A(D), and mij = 0, otherwise). Then the following assertions are equivalent:

(i) D is a line digraph; (ii) there exist two partitions {Ai}i∈I and {Bi}i∈I of V (D) such that A(D) =
∪i∈I Ai × Bi4; (iii) if vw, uw and ux are arcs of D, then so is vx; (iv) any two rows of M are either identical or orthogonal; (v) any two columns of M are either identical or orthogonal.

Proof: We show the following implications and equivalences: (i) ⇔ (ii), (ii) ⇒ (iii), (iii) ⇒ (iv), (iv) ⇔ (v), (iv) ⇒ (ii).
(i) ⇒ (ii). Let D = L(H). For each vi ∈ V (H), let Ai and Bi be the sets of in-coming and out-going arcs at vi, respectively. Then the arc set of the subdigraph of D induced by Ai ∪ Bi equals Ai × Bi. If ab ∈ A(D), then there is an i such that a = vjvi and b = vivk. Hence, ab ∈ Ai × Bi. The result follows.
(ii) ⇒ (i). Let Q be the directed pseudograph with ordered pairs (Ai, Bi) as vertices, and with |Aj ∩ Bi| arcs from (Ai, Bi) to (Aj, Bj) for each i and j (including i = j). Let σij be a bijection from Aj ∩ Bi to this set of arcs (from (Ai, Bi) to (Aj, Bj)) of Q. Then the function σ deﬁned on V (D) by taking σ to be σij on Aj ∩Bi is a well-deﬁned function of V (D) into V (L(Q)), since {Aj ∩ Bi}i,j∈I is a partition of V (D). Moreover, σ is a bijection since every σij is a bijection. Furthermore, it is not diﬃcult to see that σ is an isomorphism from D to L(Q) (this is left as Exercise 4.4).
4 Recall that X × Y = {(x, y) : x ∈ X, y ∈ Y }.

184 4. Classes of Digraphs
(ii) ⇒ (iii). If vw, uw and ux are arcs of D, then there exist i, j such that {u, v} ⊆ Ai and {w, x} ⊆ Bj. Hence, (v, x) ∈ Ai × Bj and vx ∈ D.
(iii) ⇒ (iv). Assume that (iv) does no hold. This means that some rows, say i and j, are neither identical nor orthogonal. Then there exist k, h such that mik = mjk = 1 and mih = 1, mjh = 0 (or vice versa). Hence, ik, jk, ih are in A(D) but jh is not. This contradicts (iii).
(iv) ⇔ (v). Both (iv) and (v) are equivalent to the statement:
for all i, j, h, k, if mih = mik = mjk = 1, then mjh = 1.
(iv) ⇒ (ii). For each i and j with mij = 1, let Aij = {h : mhj = 1} and Bij = {k : mik = 1}. Then, by (iv), Aij is the set of vertices in D whose row vectors in M are identical to the ith row vector, whereas Bij is the set of vertices in D whose column vectors in M are identical to the jth column vector (we use the previously proved fact that (iv) and (v) are equivalent). Thus, Aij × Bij ⊆ A(D), and moreover A(D) = ∪{Aij × Bij : mij = 1}. By the orthogonality condition, Aij and Ahk are either equal or disjoint, as are Bij and Bhk. For zero row vector i in M , let Aij be the set of vertices whose row vector in M is the zero vector, and let Bij = ∅. Doing the same with the zero column vectors of M completes the partition as in (ii).
The characterizations (ii)-(v) all imply polynomial algorithms to verify whether a given directed pseudograph is a line digraph. This fact is obvious regarding (iii)-(v); it is slightly more diﬃcult to see that (ii) can be used to construct a very eﬀective polynomial algorithm. We actually design such an algorithm for acyclic digraphs (as a pair of procedures illustrated by an example) just after Proposition 4.5.3. The criterion (iii) also provides the following characterization of line digraphs in terms of forbidden induced subdigraphs. Its proof is left as Exercise 4.5.
Corollary 4.5.2 A directed pseudograph D is a line digraph if and only if D does not contain, as an induced subdigraph, any directed pseudograph that can be obtained from one of the directed pseudographs in Figure 4.5 (dotted arcs are missing) by adding zero or more arcs (other than the dotted ones).
Observe that the digraph of order 4 in Figure 4.5 corresponds to the case of distinct vertices in Part (iii) of Theorem 4.5.1, and the two directed pseudographs of order 2 correspond to the cases x = u = v = w and u = w = v = x, respectively.
Clearly, Theorem 4.5.1 implies a set of characterizations of the line digraphs of digraphs (without parallel arcs and loops). This can be found in [419]. Several characterizations of special classes of line digraphs and iterated line digraphs can be found in surveys by Hemminger and Beineke [419] and Prisner [614].
Many applications of line digraphs deal with the line digraphs of special families of digraphs, for example regular digraphs, in general, and complete

4.5 Line Digraphs 185
Figure 4.5 Forbidden directed pseudographs.
digraphs, in particular, see e.g., the papers [207] by Du, Lyuu and Hsu and [236] by Fiol, Yebra and Alegre. In Section 4.7, we need the following characterization, due to Harary and Norman, of the line digraphs of acyclic directed multigraphs. It is a specialization of Parts (i) and (ii) of Theorem 4.5.1. The proof is left as (an easy) Exercise 4.6. Proposition 4.5.3 [403] A digraph D is the line digraph of an acyclic directed multigraph if and only if D is acyclic and there exist two partitions {Ai}i∈I and {Bi}i∈I of V (D) such that A(D) = ∪i∈I Ai × Bi.
We will now show how Proposition 4.5.3 can be used to recognize very eﬀectively whether a given acyclic digraph R is the line digraph of another acyclic directed multigraph H, i.e., R = L(H). The two procedures, which we construct and illustrate by Figure 4.8 can actually be used to recognize and represent (that is, to construct H such that R = L(H)) arbitrary line digraphs (see Theorem 4.5.1(i) and (ii)).
We ﬁrst use Proposition 4.5.3 to check whether H above exists. The following procedure Check-H can be applied. Initially, all arcs and vertices of R are not marked. At every iteration, we choose an arc uv in R, which is not marked yet, and mark all vertices in N +(u) by ‘B’, all vertices in N −(v) by ‘A’ and all arcs in (N −(v), N +(u))R by ‘C’. If (N −(v), N +(u))R = N −(v) × N +(u) or if we mark a certain vertex or arc twice (starting from another arc u v ) by the same symbol, then this procedure stops as there is no H such that L(H) = R. (We call these conditions obstructions.) If this procedure is performed to the end (i.e. every vertex and arc received a mark), then such H exists. It is

186 4. Classes of Digraphs
not diﬃcult to see, using Proposition 4.5.3, that Check-H correctly veriﬁes whether H exists or not.
To illustrate Check-H, consider the digraph R0 of Figure 4.8(a). Suppose that we choose the arc ab ﬁrst. Then ab is marked, at the ﬁrst iteration, together with the arcs af and ag. The vertex a receives ‘A’, the vertices b, f, g get ‘B’. Suppose that f i is chosen at the second iteration. Then the arcs f h, f i, gh, gi are all marked at this iteration. The vertices f, g receive ‘A’, the vertices h, i ‘B’. Suppose that bc is chosen at the third iteration. We see that this arc is the only arc marked at this iteration. The vertex b receives ‘A’, the vertex c ‘B’. Finally, say, ce is chosen. Then both cd and ce are marked. The vertex c gets ‘A’, the vertices d, e receive ‘B’. Thus, all arcs became marked with no obstruction happened. This means that there exists a digraph H0 such that H0 = L(R0).
Suppose now that H does exist. The following procedure Build-H constructs such a directed multigraph H. By Proposition 4.5.3, if H exists, then all arcs of R can be partitioned into arc sets of bipartite tournaments with partite sets Ai and Bi and arc sets Ai × Bi. Let us denote these digraphs by T1, . . . , Tk. (They can be computed by Check-H if we mark every (N −(v), N +(u))R not only by ‘C’ but also by a second mark ‘i’ starting from 1 and increasing by 1 at each iteration of the procedure.) We construct H as follows. The vertex set of H is {t0, t1, . . . , tk, tk+1}. The arcs of H are obtained by the following procedure. For each vertex v of R, we append one arc av to H according to the rules below:
(a) If dR(v) = 0, then av := (t0, tk+1); (b) If d+R(v) > 0, d−R(v) = 0, then av := (t0, ti), where i is the index of Ti
such that v ∈ Ai; (c) If d+R(v) = 0, d−R(v) > 0, then av := (tj, tk+1), where j is the index of Tj
such that v ∈ Bj; (d) If d+R(v) > 0, d−R(v) > 0, then av := (ti, tj), where i and j are the indices
of Ti and Tj such that v ∈ Aj ∩ Bi.
It is straightforward to verify that R = L(H). Note that Build-H always constructs H with only one vertex of in-degree zero and only one vertex of out-degree zero.
To illustrate Build-H, consider R0 of Figure 4.8 once again. Earlier we showed that there exists H0 such that R0 = L(H0). Now we will construct H0. The previous procedure applied to verify the existence of H0 has implicitly constructed the digraphs T1 = ({a, b, f, g}, {ab, af, ag}), T2 = ({f, g, h, i}, {f h, f i, gh, gi}), T3 = ({b, c}, {bc}), T4 = ({c, d, e}, {cd, ce}). Thus, H0 has vertices t0, . . . , t5. Considering the vertices of R0 in the lexicographic order, we obtain the following arcs of H0 (in this order):
t0t1, t1t3, t3t4, t4t5, t4t5, t1t2, t1t2, t2t5, t2t5.

4.6 The de Bruijn and Kautz Digraphs and their Generalizations 187
The directed multigraph H0 is depicted in Figure 4.8(c). It is easy to check that R0 = L(H0).
The iterated line digraphs are deﬁned recursively: L1(D) = L(D), Lk+1(D) = L(Lk(D)), k ≥ 1. It is not diﬃcult to prove by induction (Exercise 4.8) that Lk(D) is isomorphic to the digraph H, whose vertex set consists of walks of D of length k and a vertex v0v1 . . . vk (which is a walk in D) dominates the vertex v1v2 . . . vkvk+1 for every vk+1 ∈ V (D) such that vkvk+1 ∈ A(D). New characterizations of line digraphs and iterated line digraphs are given by Liu and West [518].
The following proposition can be proved by induction on k ≥ 1 (Exercise 4.10).
Proposition 4.5.4 Let D be a strong d-regular digraph (d > 1) of order n and diameter t. Then Lk(D) is of order dkn and diameter t + k.
4.6 The de Bruijn and Kautz Digraphs and their Generalizations
The following problem is of importance in network design. Given positive integers n and d, construct a digraph D of order n and maximum out-degree at most d such that diam(D) is as small as possible and the vertex-strong connectivity κ(D) is as large as possible. So we have a 2-objective optimization problem. For such a problem, in general, no solution can maximize/minimize both objective functions. However, for this speciﬁc problem, there are solutions, which (almost) maximize/minimize both objective functions. The aim of this section is to introduce these solutions, the de Bruijn and Kautz digraphs, as well as some of their generalizations. For more information on the above classes of digraphs, the reader may consult the survey [204] by Du, Cao and Hsu. For applications of these digraphs in design of parallel architectures and large packet radio networks, see e.g. the papers [113] by Bermond and Hell, [114] by Bermond and Peyrat and [649] by Samatan and Pradhan.
Let V be the set of vectors with t coordinates, t ≥ 2, each taken from {0, 1, . . . , d − 1}, d ≥ 2. The de Bruijn digraph DB(d, t) is the directed pseudograph with vertex set V such that (x1, x2, . . . , xt) dominates (y1, y2, . . . , yt) if and only if x2 = y1, x3 = y2, . . . , xt = yt−1. See Figure 4.6 (a). Let DB(d, 1) be the complete digraph of order d with loop at every vertex.
These directed pseudographs are named after de Bruijn who was the ﬁrst to consider them in [185]. Clearly, DB(d, t) has dt vertices and the out-pseudodegree and in-pseudodegree of every vertex of DB(d, t) equal d. This directed pseudograph has no parallel arcs and contains a loop at every vertex for which all coordinates are the same. It is natural to call DB(d, t)

188 4. Classes of Digraphs

00 10 01

02 01 20

11 10 21
12 (a) (b) Figure 4.6 (a) The de Bruijn digraph DB(2, 2); (b) The Kautz digraph DK (2, 2).

d-pseudoregular (recall that in the deﬁnition of semi-degrees we do not count loops).
Since DB(d, t) has loops at some vertices, the vertex-strong connectivity of DB(d, t) is at most d − 1 (indeed, the loops can be deleted without the vertex-strong connectivity being changed). Imase, Soneoka and Okada [444] proved that DB(d, t) is (d − 1)-strong, and moreover, for every pair x = y of vertices there exist d − 1 internally disjoint (x, y)-paths of length at most t + 1. To prove this result we will use the following two lemmas. The proof of the ﬁrst lemma, due to Fiol, Yebra and Alegre, is left as Exercise 4.11.
Lemma 4.6.1 [236] For t ≥ 2, DB(d, t) is the line digraph of DB(d, t − 1).
Lemma 4.6.2 Let x, y be distinct vertices of DB(d, t) such that x→y. Then, there are d−2 internally disjoint (x, y)-paths diﬀerent from xy, each of length at most t + 1.
Proof: Let x = (x1, x2, . . . , xt) and y = (x2, . . . , xt, yt). Consider the walk Wk given by Wk = (x1, x2, . . . , xt), (x2, . . . , xt, k), (x3, . . . , xt, k, x2), . . . , (k, x2, . . . , xt), (x2, . . . , xt, yt), where k = x1, yt. For each k, every internal vertex of Wk has coordinates forming the same multiset Mk = {x2, . . . , xt, k}. Since for diﬀerent k, the multisets Mk are diﬀerent, the walks Wk are internally disjoint. Each of these walks is of length t + 1. Therefore, by Proposition 1.4.1, DB(d, t) contains d − 2 internally disjoint (x, y)-paths Pk with A(Pk) ⊆ A(Wk). Since k = x1, yt, we may form the paths Pk such that none of them coincides with xy.
Theorem 4.6.3 [444] For every pair x, y of distinct vertices of DB(d, t), there exist d − 1 internally disjoint (x, y)-paths, one of length at most t and the others of length at most t + 1.

4.6 The de Bruijn and Kautz Digraphs and their Generalizations 189

Proof: By induction on t ≥ 1. Clearly, the claim holds for t = 1 since
↔
DB(d, 1) contains, as spanning subdigraph, Kd. For t ≥ 2, by Lemma 4.6.1,

we have that

DB(d, t) = L(DB(d, t − 1)).

(4.5)

Let x, y be a pair of distinct vertices in DB(d, t) and let ex, ey be the arcs of DB(d, t − 1) corresponding to vertices x, y due to (4.5). Let u be the head of ex and let v be the tail of ey.
If u = v, by the induction hypothesis, DB(d, t − 1) has d − 1 internally disjoint (u, v)-paths, one of length at most t − 1 and the others of length at
most t. The arcs of these paths together with arcs ex and ey correspond to d − 1 internally disjoint (x, y)-paths in DB(d, t), one of length at most t and the others of length at most t + 1.
If u = v, we have x→y in DB(d, t − 1). It suﬃces to apply Lemma 4.6.2 to see that there are d − 1 internally disjoint (x, y)-paths in DB(d, t), one of length one and the others of length at most t + 1.

By this theorem and Corollary 7.3.2, we conclude that κ(DB(d, t)) = d − 1. From Theorem 4.6.3 and Proposition 2.4.3, we obtain immediately the
following simple, yet important property.

Proposition 4.6.4 The de Bruijn digraph DB(d, t) achieves the minimum value t of diameter for directed pseudographs of order dt and maximum outdegree at most d.

For t ≥ 2, the Kautz digraph DK (d, t) is obtained from DB(d + 1, t) by deletion of all vertices of the form (x1, x2, . . . , xt) such that xi = xi+1 for some i. See Figure 4.6 (b). Deﬁne DK (d, 1) :=K↔d+1. Clearly, DK (d, t) has no loops and is a d-regular digraph. Since we have d + 1 choices for the ﬁrst coordinate of a vertex in DK(d, t) and d choices for each of the other coordinates, the order of DK (d, t) is (d + 1)dt−1 = dt + dt−1. It is easy to see that Proposition 4.6.4 holds for the Kautz digraphs as well.
The following lemmas are analogous to Lemmas 4.6.1 and 4.6.2. Their proofs are left as Exercises 4.12 and 4.13.
Lemma 4.6.5 For t ≥ 2, the Kautz digraph DK(d, t) is the line digraph of DK (d, t − 1).
Lemma 4.6.6 Let xy be an arc in DK(d, t). There are d − 1 internally disjoint (x, y)-paths diﬀerent from xy, one of length at most t + 2 and the others of length at most t + 1.
The following result due to Du, Cao and Hsu [204] shows that the Kautz digraphs are better, in a sense, than de Bruijn digraphs from the local vertexstrong connectivity point of view. This theorem can be proved similarly to Theorem 4.6.3 and is left as Exercise 4.14.

190 4. Classes of Digraphs
Theorem 4.6.7 [204] Let x, y be distinct vertices of DK(d, t). Then there are d internally disjoint (x, y)-paths in DK(d, t), one of length at most t, one of length at most t + 2 and the others of length at most t + 1.
This theorem implies that DK (d, t) is d-strong.
The de Bruijn digraphs were generalized independently by Imase and Itoh [441] and Reddy, Pradhan and Kuhl [624] in the following way. We can transform every vector (x1, x2, . . . , xt) with coordinates from Zd = {0, 1, . . . , d − 1} into an integer from Zdt = {0, 1, . . . , dt − 1} using the polynomial P (x1, x2, . . . , xt) = x1dt−1 + x2dt−2 + . . . + xt. It is easy to see that this polynomial provides a bijection from Zdt to Zdt . Moreover, for i, j ∈ Zdt , i→j in DB(d, t) if and only if j ≡ di + k (mod dt) for some k ∈ Zd.
Let d, n be two natural numbers such that d < n. The generalized de Bruijn digraph DG(d, n) is a directed pseudograph with vertex set Zn and arc set
{(i, di + k (mod n) ) : i, k ∈ Zd}.
For example, V (DG(2, 5)) = {0, 1, 2, 3, 4} and A(DG(2, 5)) = {(0, 0), (0, 1), (1, 2), (1, 3), (2, 4), (2, 0), (3, 1), (3, 2), (4, 3), (4, 4)}.
Clearly, DG(d, n) is d-pseudoregular. It is not diﬃcult to show that diam(DG(d, n)) ≤ logd n . By Proposition 2.4.3, a digraph of maximum outdegree at most d ≥ 2 and order n has a diameter at least logd n(d − 1) + 1 . Thus, the generalized de Bruijn digraphs are of optimal or almost optimal diameter. It was proved, by Imase, Soneoka and Okada [443], that DG(d, n) is (d − 1)-strong. It follows from these results that the generalized de Bruijn digraphs have almost minimum diameter and almost maximum vertex-strong connectivity.
The Kautz digraphs were generalized by Imase and Itoh [442]. Let n, d be two natural numbers such that d < n. The Imase-Itoh digraph DI (d, n) is the digraph with vertex set Zn such that i→j if and only if j ≡ −d(i+1)+k (mod n) for some k ∈ Zd. It has been shown (for a brief account, see the paper [204]) by Du, Cao and Hsu, that DI (d, n) are of (almost) optimal diameter and vertex-strong connectivity.
Du, Hsu and Hwang [206] suggested a concept of digraphs extending both generalized the de Bruijn digraphs and the Imase-Ito digraphs. Let d, n be two natural numbers such that d < n. Given q ∈ Zn − {0} and r ∈ Zn, consecutive-d digraph D(d, n, q, r) is the directed pseudograph with vertex set Zn such that i→j if and only if j ≡ qi + r + k (mod n) for some k ∈ Zd. Several results on diameter, vertex- and arc-strong connectivity and other properties of consecutive-d digraphs are given in [204]. In Section 5.11, we provide results on hamiltonicity of consecutive-d digraphs.

4.7 Series-Parallel Digraphs 191
4.7 Series-Parallel Digraphs
In this section we study vertex series-parallel digraphs and arc series-parallel directed multigraphs. Vertex series-parallel digraphs were introduced by Lawler [510], and Monma and Sidney [568] as a model for scheduling problems. While vertex series-parallel digraphs continue to play an important role for the design of eﬃcient algorithms in scheduling and sequencing problems, they have been extensively studied in their own right as well as in relations to other optimization problems (cf. the papers [36] by Baﬃ and Petreschi, [116] by Bertolazzi, Cohen, Di Battista, Tamassia and Tollis, [633] by Rendl and [682] by Steiner). Arc series-parallel directed multigraphs were introduced even earlier (than vertex series-parallel digraphs) by Duﬃn [209] as a mathematical model of electrical networks.
For an acyclic digraph D, let FD (ID) be the set of vertices of D of out-degree (in-degree) zero. To deﬁne vertex series-parallel digraphs, we ﬁrst introduce minimal vertex series-parallel (MVSP) digraphs recursively.
The digraph of order one with no arc is an MVSP digraph. If D = (V, A), H = (U, B) is a pair of MVSP digraphs (U ∩ V = ∅), so are the acyclic digraphs constructed by each of the following operations (see Figure 4.7):
(a) Parallel composition: P = (V ∪ U, A ∪ B); (b) Series composition: S = (V ∪ U, A ∪ B ∪ (FD × IH )).
It is interesting to note that we can embed every MVSP digraph D into the Cartesian plane such that if vertices u, v have coordinates (xu, yu) and (xv, yv), respectively, then there is a (u, v)-path in D if and only if xu ≤ xv and yu ≤ yv. The proof of this non-diﬃcult fact is given in the paper [726] by Valdes, Tarjan, and Lawler; see Exercise 4.15. See also Figure 4.9.
An acyclic digraph D is a vertex series-parallel (VSP) digraph if the transitive reduction of D is an MVSP digraph (see Subsection 4.3 for the deﬁnition of the transitive reduction). See Figure 4.8.
The following class of acyclic directed multigraphs, arc series-parallel (ASP) directed multigraphs, is related to VSP digraphs. The digraph P2 is an ASP directed multigraph. If D1, D2 is a pair of ASP directed multigraphs with V (D1) ∩ V (D2) = ∅, then so are acyclic directed multigraphs constructed by each of the following operations (see Figure 4.10):
(a) Two-terminal parallel composition: Choose a vertex ui of out-degree zero in Di and a vertex vi of in-degree zero in Di for i = 1, 2. Identify u1 with u2 and v1 with v2;
(b) Two-terminal series composition: Choose u ∈ FD1 and v ∈ ID2 and identify u with v.

192 4. Classes of Digraphs

bc

d

ae fh

gi

d bc ae
f h
gi

bc

d e

fh gi

df h
c b
e gi

d

f

gh

i

c

e

de
Figure 4.7 (De)construction of an MVSP digraph R0 by series and parallel (de)compositions.

We refer the reader to the book [97] by Battista, Eades, Tamassia and Tollis for several algorithms for drawing graphs nicely, in particular drawing of ASP digraphs.
The next result shows a relation between the classes of digraphs introduced above.

4.7 Series-Parallel Digraphs 193

dd

bc
ae f h

bc
ae fh

3 4
25 1
6 8
7
9

gi

gi

(a) (b)

(c)

Figure 4.8 Series-parallel directed multigraphs: (a) an MVSP digraph R0, (b) a VSP digraph R1, (c) an AVSP directed multigraph H0.

y

d c

e

b f

h i

ag

x
Figure 4.9 The MVSP digraph R0 of Figure 4.7 embedded into the Cartesian plane such that for every (u, v)-path in R0 we have xu ≤ xv and yu ≤ yv (and vice versa).

Theorem 4.7.1 An acyclic directed multigraph D with a unique vertex of out-degree zero and a unique vertex of in-degree zero is ASP if and only if L(D) is an MVSP digraph.
Proof: This can be proved easily by induction on |A(D)| using the following two facts:
(i) L(P2) = P1, which is an MVSP digraph; (ii) The line digraph of the two-terminal series (parallel) composition of D1
and D2 is the series (parallel) composition of L(D1) and L(D2).

194 4. Classes of Digraphs

3

2 1
6

4 5
8

79

3 4
2 5
1 68
79

3 4
25
34 25

68 79
68 79

4 6789
35

45
Figure 4.10 (De)construction of an ASP directed multigraph H0 by two-terminal series and parallel (de)compositions.
It is easy to check that L(H0) = R0 for directed multigraphs H0 and R0 depicted in Figure 4.8. The following operations in a directed multigraph D are called reductions:
(a) Series reduction: Replace a path uvw, where d+D(v) = d−D(v) = 1 by the arc uw;
(b) Parallel reduction: Replace a pair of parallel arcs from u to v by just one arc from u to v.
The following proposition due to Duﬃn (see also the paper [726] by Valdes, Lawler and Tarjan) gives a characterization of ASP directed multigraphs. Its proof is left as Exercise 4.16.
Proposition 4.7.2 [209] A directed multigraph is ASP if and only if it can be reduced to P2 by a sequence of series and parallel reductions.
The reader is advised to apply a sequence of series and parallel reductions to the directed multigraph H0 of Figure 4.8 to obtain a digraph isomorphic to

4.8 Quasi-Transitive Digraphs 195
P2. ¿From the algorithmic point of view, it is important that every sequence of series and parallel reductions transforms a directed multigraph to the same digraph. Indeed, this implies an obvious polynomial algorithm to verify if a given directed multigraph is ASP. The proof of the following result, due to Harary, Krarup and Schwenk, is left as Exercise 4.17.
Proposition 4.7.3 [401] For every acyclic directed multigraph D, the result of application of series and parallel reductions until one can apply such reductions is a unique digraph H.
In [726], Valdes, Tarjan and Lawler showed how to construct a lineartime algorithm to recognize ASP directed multigraphs, which is based on Propositions 4.7.2 and 4.7.3. They also presented a more complicated lineartime algorithm to recognize VSP digraphs. Since we are limited in space, we will not discuss the details of the linear-time algorithms. Instead, we will consider the following simpliﬁed polynomial algorithm to recognize VSP digraphs.
VSP recognition algorithm: Input: An acyclic digraph D. Output: YES if D is VSP and NO, otherwise.
1. Compute the transitive reduction R of D. 2. Try to compute an acyclic directed multigraph H with |IH | = |FH | = 1
such that L(H) = R. If there is no such H, then output NO. 3. Verify whether H is an ASP directed multigraph. If it is so, then YES,
otherwise, NO.
We prove ﬁrst the correctness of this algorithm. If the output is YES, then, by Theorem 4.7.1, R is MVSP and thus D is VSP. If H is Step 2 is not found, then, by Theorem 4.7.1, R is not MVSP implying that D is not VSP. If H is not ASP, then R is not MVSP by the same theorem.
Now we prove that the algorithm is polynomial. Step 1 can be performed in polynomial time by Proposition 4.3.5. Step 2 can be implemented using Procedure Build-H described in the end of Section 4.5. This procedure implies that if there is an H such that L(H) = R, then there is such an H with additional property that |IH | = |FH | = 1. The procedure is polynomial. Finally, Step 3 is polynomial by the remark after Proposition 4.7.2.
4.8 Quasi-Transitive Digraphs
Quasi-transitive digraphs were introduced in Section 1.8. The aim of this section is to derive a recursive characterization of quasi-transitive digraphs which allows one to show that a number of problems for quasi-transitive

196 4. Classes of Digraphs
digraphs including the longest path and cycle problems are polynomial time solvable (see Theorem 5.10.2). The characterization implies that every quasitransitive digraph is totally Ψ -decomposable, where Ψ is the union of all transitive digraphs and all extended semicomplete digraphs. Our presentation is based on [79].
Proposition 4.8.1 Let D be a quasi-transitive digraph. Suppose that P = x1x2 . . . xk is a minimal (x1, xk)-path. Then the subdigraph induced by V (P ) is a semicomplete digraph and xj→xi for every 2 ≤ i + 1 < j ≤ k, unless k = 4, in which case the arc between x1 and xk may be absent.
Proof: The cases k = 2, 3, 4, 5 are easily veriﬁed. As an example, let us consider the case k = 5. If xi and xj are adjacent and 2 ≤ i + 1 < j ≤ 5, then xj→xi since P is minimal. Since D is quasi-transitive, xi and xi+2 are adjacent for i = 1, 2, 3. This and the minimality of P imply that x3→x1, x4→x2 and x5→x3. From these arcs and the minimality of P we conclude that x5→x1. Now the arcs x4x5 and x5x1 imply that x4→x1. Similarly, x5→x1→x2 implies x5→x2.
The proof for the case k ≥ 6 is by induction on k with the case k = 5 as the basis. By induction, each of D {x1, x2, . . . , xk−1} and D {x2, x3, . . . , xk} is a semicomplete digraph and xj→xi for any 1 < j − i ≤ k − 2. Hence x3 dominates x1 and xk dominates x3 and the minimality of P implies that xk dominates x1.
Corollary 4.8.2 If a quasi-transitive digraph D has an (x, y)-path but x does not dominate y, then either y→x, or there exist vertices u, v ∈ V (D) − {x, y} such that x→u→v→y and y→u→v→x.
Proof: This is easy to deduce by considering a minimal (x, y)-path and applying Proposition 4.8.1.
Lemma 4.8.3 Suppose that A and B are distinct strong components of a quasi-transitive digraph D with at least one arc from A to B. Then A→B.
Proof: Suppose A and B are distinct strong components such that there exists an arc from A to B. Then for every choice of x ∈ A and y ∈ B there exists a path from x to y in D. Since A and B are distinct strong components, none of the alternatives in Corollary 4.8.2 can hold and hence x→y.
Lemma 4.8.4 [79] Let D be a strong quasi-transitive digraph on at least two vertices. Then the following holds:
(a) U G(D) is disconnected; (b) If S and S are two subdigraphs of D such that U G(S) and U G(S ) are
distinct connected components of U G(D), then either S→S or S →S, or both S→S and S →S in which case |V (S)| = |V (S )| = 1.

4.8 Quasi-Transitive Digraphs 197
Proof: The statement (b) can be easily veriﬁed from the deﬁnition of a quasi-transitive digraph and the fact that S and S are completely adjacent in D (Exercise 4.18). We prove (a) by induction on |V (D)|. Statement (a) is trivially true when |V (D)| = 2 or 3. Assume that it holds when |V (D)| < n where n > 3.
Suppose that there is a vertex z such that D − z is not strong. Then there is an arc from (to) every terminal (initial) component of D − z to (from) z. Since D is quasi-transitive, the last fact and Lemma 4.8.3 imply that X→Y for every initial (terminal) strong component X (Y ) of D − z. Similar arguments show that each strong component of D − z either dominates some terminal component or is dominated by some initial component of D − z (intermediate strong components satisfy both). These facts imply that z is adjacent to every vertex in D − z. Therefore, U G(D) contains a component consisting of the vertex z, implying that U G(D) is disconnected and (a) follows.
Assume that there is a vertex v such that D − v is strong. Since D is strong, D contains an arc vw from v to D − v. By induction, U G(D − v) is not connected. Let connected components S and S of U G(D − v) be chosen such that w ∈ S, S→S in D (here we use (b) and the fact that D − v is strong). Then v is completely adjacent to S in D (as v→w). Hence U G(S ) is a connected component of U G(D) and the proof is complete.
The following theorem completely characterizes quasi-transitive digraphs in recursive sense (see also Figure 4.11).
Theorem 4.8.5 (Bang-Jensen and Huang) [79] Let D be a digraph which is quasi-transitive.
(a) If D is not strong, then there exist a transitive oriented graph T with vertices {u1, u2, . . . , ut} and strong quasi-transitive digraphs H1, H2, . . . , Ht such that D = T [H1, H2, . . . , Ht], where Hi is substituted for ui, i = 1, 2, . . . , t.
(b) If D is strong, then there exists a strong semicomplete digraph S with vertices {v1, v2, . . . , vs} and quasi-transitive digraphs Q1, Q2, . . . , Qs such that Qi is either a vertex or is non-strong and D = S[Q1, Q2, . . . , Qs], where Qi is substituted for vi, i = 1, 2, . . . , s.
Proof: Suppose that D is not strong and let H1, H2, . . . , Ht be the strong components of D. According to Lemma 4.8.3, if there is an arc between Hi and Hj, then either Hi→Hj or Hj→Hi. Now if Hi→Hj→Hk then, by quasi-transitivity, Hi→Hk. So by contracting each Hi to a vertex hi, we get a transitive oriented graph T with vertices h1, h2, . . . , ht. This shows that D = T [H1, H2, . . . , Ht].
Suppose now that D is strong. Let Q1, Q2, . . . , Qs be the subdigraphs of D such that each U G(Qi) is a connected component of U G(D). According to Lemma 4.8.4(a), each Qi is either non-strong or just a single vertex. By

198 4. Classes of Digraphs
Figure 4.11 A decomposition of a non-strong quasi-transitive digraph. Big arcs between diﬀerent boxed sets indicate that there is a complete domination in the direction shown.
Lemma 4.8.4(b) we obtain a strong semicomplete digraph S if each Qi is contracted to a vertex. This shows that D = S[Q1, Q2, . . . , Qs].
4.9 The Path-Merging Property and Path-Mergeable Digraphs
A digraph D is path-mergeable, if for any choice of vertices x, y ∈ V (D) and any pair of internally disjoint (x, y)-paths P, Q, there exists an (x, y)-path R in D, such that V (R) = V (P ) ∪ V (Q). We will see, in several places of this book, that the notion of a path-mergeable digraph is very useful for design of algorithms and proofs of theorems. This makes it worth while studying path-mergeable digraphs. The results presented in this section are adapted from [50], where the study of path-mergeable digraphs was initiated by BangJensen.
We prove a characterization of path-mergeable digraphs, which implies that path-mergeable digraphs can be recognized eﬃciently. Theorem 4.9.1 A digraph D is path-mergeable if and only if for every pair of distinct vertices x, y ∈ V (D) and every pair P = xx1 . . . xry, P = xy1 . . . ysy, r, s ≥ 1 of internally disjoint (x, y)-paths in D, either there

4.9 The Path-Merging Property and Path-Mergeable Digraphs u1 u2 u3 u4 u5 u6

199

xy

v1 v2 v3 v4 v5 v6

Figure 4.12 A digraph which is path-mergeable. The fat arcs indicate the path xu1u2v1v2v3u3u4u5v4v5v6u6y from x to y which is obtained by merging the two (x, y)-paths xu1u2u3u4u5u6y and xv1v2v3v4v5v6y.
exists an i ∈ {1, . . . , r}, such that xi→y1, or there exists a j ∈ {1, . . . , s}, such that yj→x1.
Proof: We prove ‘only if’ by induction on r + s. It is obvious for r = s = 1, so suppose that r + s ≥ 3. If there is no arc between {x1, . . . , xr} and {y1, . . . , ys}, then clearly P, P cannot be merged into one path. Hence we may assume without loss of generality that there is an arc xiyj for some i, j, 1 ≤ i ≤ r, 1 ≤ j ≤ s. If j = 1 then the claim follows. Otherwise apply induction to the paths P [x, xi]yj, xP [y1, yj].
The proof of ‘if’ is left to the reader. It is similar to the proof of Proposition 4.9.3 below.
The proof of the following result is left as Exercise 4.23.
Corollary 4.9.2 Path-mergeable digraphs can be recognized in polynomial time.
The next result shows that, if a digraph is path-mergeable, then the merging of paths can always be done in a particularly nice way.
Proposition 4.9.3 Let D be a digraph which is path-mergeable and let P = xx1 . . . xry, P = xy1 . . . ysy, r, s ≥ 0 be internally disjoint (x, y)-paths in D. The paths P and P can be merged into one (x, y)-path P ∗ such that vertices from P (respectively, P ) remain in the same order as on that path. Furthermore the merging can be done in at most 2(r + s) steps.
Proof: We prove the result by induction on r + s. It is obvious if r = 0 or s = 0, so suppose that r, s ≥ 1. By Theorem 4.9.1 there exists an i such that either xi→y1 or yi→x1. By scanning both paths forward one arc at a time, we can ﬁnd i in at most 2i steps; suppose without loss of generality xi→y1. By applying the induction hypothesis to the paths P [xi, xr]y and xiP [y1, ys]y, we see that we can merge them into a single path Q in the required orderpreserving way in at most 2(r + s − i) steps. The required path P ∗ is obtained

200 4. Classes of Digraphs
by concatenating the paths xP [x1, xi] and Q, and we have found it in at most 2(r + s) steps, as required.
4.10 Locally In-Semicomplete and Locally Out-Semicomplete Digraphs
A digraph D is locally in-semicomplete (locally out-semicomplete) if, for every vertex x of D, the in-neighbours (out-neighbours) of x induce a semicomplete digraph. Clearly, the converse of a locally in-semicomplete digraph is a locally out-semicomplete digraph and vice versa. A digraph D is locally semicomplete if it is both locally in- and locally out-semicomplete. See Figure 4.13. Clearly every semicomplete digraph is locally semicomplete. A locally in-semicomplete digraph with no 2-cycle is a locally in-tournament digraph. Similarly, one can deﬁne locally out-tournament digraphs and locally tournament digraphs. For convenience, we will sometimes refer to locally tournament digraphs as local tournaments and to locally in-tournament (out-tournament) digraphs as local in-tournaments (local out-tournaments).
(a) (b) Figure 4.13 (a) A locally out-semicomplete digraph which is not locally insemicomplete; (b) A locally semicomplete digraph.
Proposition 4.10.1 by Bang-Jensen shows that locally in-semicomplete and locally out-semicomplete digraphs form subclasses of the class of pathmergeable digraphs. In particular, this means that every tournament is pathmergeable. In many theorems and algorithms on tournaments this property is of essential use. In some other cases, the very use of this property allows one to simplify proofs of results on tournaments and their generalizations or speed up algorithms on those digraphs. Proposition 4.10.1 [50] Every locally in-semicomplete (out-semicomplete) digraph is path-mergeable. Proof: Let D be a locally out-semicomplete digraph and let P = y1y2 . . . yk, Q = z1z2 . . . zt be a pair of internally disjoint (x, y)-paths (i.e., y1 = z1 = x

4.10 Locally In-Semicomplete and Locally Out-Semicomplete Digraphs 201
and yk = zt = y). We show that there exists an (x, y)-path R in D, such that V (R) = V (P ) ∪ V (Q). Our claim is trivially true when |A(P )| + |A(Q)| = 3. Assume now that |A(P )| + |A(Q)| ≥ 4. Since D is out-semicomplete, either y2→z2 or z2→y2 (or both) and the claim follows from Theorem 4.9.1.
The proposition holds for locally in-semicomplete digraphs as they are the converses of locally out-semicomplete digraphs.
The path-mergeability can be generalized in a natural way as follows. A digraph D is in-path-mergeable if, for every vertex y ∈ V (D) and every pair P, Q of internally disjoint paths with common terminal vertex y, there is a path R such that V (R) = V (P )∪V (Q), the path R terminates at y and starts at a vertex which is the initial vertex of either P or Q (or, possibly, both). Observe that, in this deﬁnition, the initial vertices of paths P and Q may coincide. Therefore, every in-path-mergeable digraph is path-mergeable. However, it is easy to see that not every path-mergeable digraph is in-path-mergeable (see Exercise 4.19). A digraph D is out-path-mergeable if the converse of D is in-path-mergeable. Clearly, every in-path-mergeable (out-path-mergeable) digraph is locally in-semicomplete (locally out-semicomplete). The converse is also true (hence this is another way of characterizing locally in-semicomplete digraphs). The proof of Proposition 4.10.2 is left as Exercise 4.20.
Proposition 4.10.2 Every locally in-semicomplete (out-semicomplete, respectively) digraph is in-path-mergeable (out-path-mergeable, respectively).
Some simple, yet very useful, properties of locally in-semicomplete digraphs are described in the following results (in [81], by Bang-Jensen, Huang and Prisner, these results were proved for locally tournament digraphs only, so the statements below are their slight generalizations ﬁrst stated by BangJensen and Gutin [65]). Observe that a locally out-semicomplete digraph, being the converse of a locally in-semicomplete digraph, has similar properties (see Exercise 4.26). The claim of Theorem 4.10.4 is illustrated in Figure 4.14.
Lemma 4.10.3 Every connected locally in-semicomplete digraph D has an out-branching.
Proof: By Proposition 1.6.1, it suﬃces to prove that D has only one initial strong component. Assume that D has a pair D1, D2 of initial strong components (i.e. no arc enters D1 or D2). Let yi ∈ V (Di), i = 1, 2, and let P = x1x2 . . . xs be a shortest path between V (D1) and V (D2) in the underlying graph G of D. Since no arc enters D1 or D2, there is an index k ≤ s such that x1x2 . . . xk−1 is a path in D, but xk→xk−1. Since D is in-semicomplete, the vertices xk−2 and xk are adjacent. However, this contradicts the fact that P is a shortest path between V (D1) and V (D2) in G.

202 4. Classes of Digraphs
Theorem 4.10.4 Let D be a locally in-semicomplete digraph. (i) Let A and B be distinct strong components of D. If a vertex a ∈ A
dominates some vertex in B, then a→B. (ii) If D is connected, then SC(D) has an out-branching. Proof: Let A and B be strong components of D for which there is an arc (a, b) from A to B. Since B is strong, there is a (b , b)-path in B for every b ∈ V (B). By the deﬁnition of locally in-semicomplete digraphs and the fact that there is no arc from B to A, we can conclude that a→b . This proves (i).
Part (ii) follows from the fact that SC(D) is itself a locally in-tournament digraph and Lemma 4.10.3.
Figure 4.14 The strong decomposition of a non-strong locally in-semicomplete digraph. The big circles indicate strong components and a fat arc from a component A to a component B between two components indicates that there is at least one vertex a ∈ A such that a→B.
4.11 Locally Semicomplete Digraphs
Locally semicomplete digraphs were introduced in 1990 by Bang-Jensen [44]. As shown in several places in our book, this class of digraphs has many nice properties in common with its proper subclass, semicomplete digraphs. The main aim of this section is to obtain a classiﬁcation of locally semicomplete

4.11 Locally Semicomplete Digraphs 203
digraphs ﬁrst proved by Bang-Jensen, Guo, Gutin and Volkmann [55]. In the process of deriving this classiﬁcation, we will show several important properties of locally semicomplete digraphs. We start our consideration from round digraphs, a nice special class of locally semicomplete digraphs.
4.11.1 Round Digraphs
A digraph on n vertices is round if we can label its vertices v1, v2, . . . , vn so that for each i, we have N +(vi) = {vi+1, . . . , vi+d+(vi)} and N −(vi) = {vi−d−(vi), . . . , vi−1} (all subscripts are taken modulo n). We will refer to the ordering v1, v2, . . . , vn as a round labelling of D. See Figure 4.15 for an example of a round digraph. Observe that every strong round digraph D is hamiltonian, since v1v2 . . . vnv1 form a hamiltonian cycle, whenever v1, v2, . . . , vn is a round labelling. Round digraphs form a subclass of locally semicomplete digraphs. We will see below that round digraphs play an important role in the study of locally semicomplete digraphs.
23
14
65
R Figure 4.15 A round digraph with a round labelling.
Proposition 4.11.1 [438] Every round digraph is locally semicomplete.
Proof: Let D be a round digraph and let v1, v2, . . . , vn be a round labelling of D. Consider an arbitrary vertex, say vi. Let x, y be a pair of out-neighbours of vi. We show that x and y are adjacent. Assume without loss of generality that vi, x, y appear in that circular order in the round labelling. Since vi→y and the in-neighbours of y appear consecutively preceding y, we must have x→y. Thus the out-neighbours of vi are pairwise adjacent. Similarly, we can show that the in-neighbours of vi are also pairwise adjacent. Therefore, D is locally semicomplete.
In the rest of this subsection, we will prove the following characterization of round digraphs due to Huang [438]. This characterization generalizes the corresponding characterizations of round local tournaments and tournaments, due to Bang-Jensen [44] and Alspach and Tabib [22], respectively.

204 4. Classes of Digraphs
(a) (b) (c) (d)
Figure 4.16 Some forbidden digraphs in Huang’s characterization
An arc xy of a digraph D is ordinary if yx is not in D. A cycle or path Q of a digraph D is ordinary if all arcs of Q are ordinary.
To prove Theorem 4.11.4 below, we need two lemmas due to Huang [438]. Lemma 4.11.2 Let D be a round digraph then the following is true: (a) Every induced subdigraph of D is round. (b) None of the digraphs in Figure 4.16 is an induced subdigraph of D. (c) For each x ∈ V (D), the subdigraphs induced by N +(x) − N −(x) and
N −(x) − N +(x) are transitive tournaments. Proof: Exercise 4.29.
Lemma 4.11.3 Let D be a round digraph. Then, for each vertex x of D, the subdigraph induced by N +(x) ∩ N −(x) contains no ordinary cycle.
Proof: Suppose the subdigraph induced by some N +(x)∩N −(x) contains an ordinary cycle C. Let v1, v2, . . . , vn be a round labelling of D. Without loss of generality, assume that x = v1. Then C must contain an arc vivj such that vjvi ∈ A(D) and i > j. We have v1 ∈ N −(vi) but vj ∈ N −(vi), contradicting the assumption that v1, v2, . . . , vn is a round labelling of D.
Theorem 4.11.4 (Huang) [438] A connected locally semicomplete digraph D is round if and only if the following holds for each vertex x of D: (a) N +(x) − N −(x) and N −(x) − N +(x) induce transitive tournaments and (b) N +(x) ∩ N −(x) induces a (semicomplete) subdigraph containing no or-
dinary cycle.
Proof: The necessity follows from Lemmas 4.11.2(c) and 4.11.3. To prove the suﬃciency, we consider two cases. Case 1: D has an ordinary cycle. We start by proving that D contains an ordinary Hamilton cycle. Let C = x1x2 . . . xkx1 be a longest ordinary cycle in D. Assume that k = n, the number of vertices in D. Since D is connected there is a vertex v ∈ V (D) − V (C) such that v is adjacent to some vertex of C.
Suppose that there is an ordinary arc between v and some vertex, say x1, of C. We may without loss of generality assume that the ordinary arc

4.11 Locally Semicomplete Digraphs 205
is x1v (indeed, if necessary, we may consider the converse of D instead of D). The vertices v and x2 are adjacent since they are out-neighbours of x1. The arc between v and x2 must be ordinary since D does not contain as an induced subdigraph the digraph depicted in Figure 4.16 (a). Since C is a longest ordinary cycle, v cannot dominate x2. Thus, x2→v. Similarly, we can prove that xi→v for every i = 3, 4, . . . , k. Hence, N −(v) − N +(v) contains all vertices of C, which contradicts the assumption that N −(v) − N +(v) induces a transitive tournament.
Since there is no ordinary arc between v and C, we may assume that vx1v is a 2-cycle of D. Using the fact that D is locally semicomplete, it is easy to derive that V (C) ⊆ N +(v) ∩ N −(v). This contradicts the assumption that N +(v) ∩ N −(v) contains no ordinary cycle.
Thus, we have shown that D contains an ordinary Hamilton cycle. This implies that N +(x) − N −(x) = ∅ for every x ∈ V (D).
We apply the following algorithm to ﬁnd a round labelling of D. Start with an arbitrary vertex, say y1, and, for each i = 1, 2, . . ., let yi+1 be the vertex of in-degree zero in the (transitive) tournament induced by N +(yi) − N −(yi). Let y1, y2, . . . , yr be distinct vertices produced by the algorithm such that the vertex w of in-degree zero in the tournament induced by N +(yr) − N −(yr) is in {y1, y2, . . . , yr−2}.
We show that w = y1. If w = yj with j > 1, then {yj−1, yr}→yj. Thus, yj−1 and yr are adjacent by an ordinary arc (since the digraph in Figure 4.16(b) is forbidden). But either yj−1→yr or yr→yj−1 contradicts the fact that yj is the vertex of in-degree zero in the tournament induced by N +(yj−1) − N −(yj−1) or N +(yr) − N −(yr). Thus, w = y1 and C = y1y2 . . . yry1 is an ordinary cycle.
We next show that r = n. Suppose r < n. Then, there is a vertex u, which is not in C and is adjacent to some yi of C . Suppose ﬁrst that u ∈ N +(yi) − N −(yi). Then, being out-neighbours of yi, the vertices yi+1 and u are adjacent. Since D contains no induced subdigraph isomorphic to the digraph in Figure 4.16 (a) and yi+1 is the vertex of in-degree zero in the subdigraph induced by N +(yi) − N −(yi), we have u ∈ N +(yi+1) − N −(yi+1). This implies that u and yi+2 are adjacent. Similarly, we must have u ∈ N +(yi+2)−N −(yi+2). Continuing this way, we see that u ∈ N +(yk)−N −(yk) for every k = 1, 2, . . . , r. Hence, C is contained in the subdigraph induced by N −(u) − N +(u), a contradiction.
A similar argument applies for the case u ∈ N −(yi) − N +(yi). So, we may assume that u ∈ N +(yi) ∩ N −(yi) and there is no ordinary arc between u and C . Using the fact that D is locally semicomplete, it is easy to see that C is contained in the subdigraph induced by N +(u) ∩ N −(u), a contradiction. Thus, r = n, i.e., the algorithm labels all vertices of D. To complete Case 1, it suﬃces to prove that y1, y2, . . . , yn is a round labelling. Suppose not. Then, there are three vertices ya, yb, yc listed in the circular order in the labelling such that, without loss of generality, we have

206 4. Classes of Digraphs

ya→yc and ya→yb.

Assume that the tree vertices were chosen such that the number of vertices from yb to yc in the circular order is as small as possible. This implies that c = b + 1. Since ya and yb are both in-neighbours of yc, they are adjacent. Thus, yb→ya. Since we also have yb→yc (recall that yc ∈ N +(yb) − N −(yb) by the deﬁnition of the labelling) and D contains no induced subdigraph isomorphic to the digraph given in Figure 4.16 (a), ya→yc. So, yc is not the vertex of in-degree zero in the tournament induced by N +(yb) − N −(yb), contradicting the choice of yc.
Case 2: D contains no ordinary cycle. If D has no ordinary arc, D is complete. Thus, any labelling of V (D) is round. So assume that D has an ordinary arc. Since D has an ordinary arc, but has no ordinary cycle, we claim that there is a vertex z1 with

N −(z1) − N +(z1) = ∅ and N +(z1) − N −(z1) = ∅.

Indeed, let w2w1 be an ordinary arc in D. We may set z1 = w2 unless N −(w2) − N +(w2) = ∅. In the last case there is an ordinary arc whose head is w2. Let w3w2 be such an arc. Again, either we may set z1 = w3 or there is an ordinary arc w4w3. Since D is ﬁnite and contains no ordinary cycle, the above process cannot repeat vertices and hence terminates at some vertex wj such that we may set z1 = wj.
We apply the following algorithm to ﬁnd a path in D. Begin with z1 and, for each i = 1, 2, . . . , let zi+1 be the vertex of in-degree zero in the (transitive) tournament induced by N +(zi) − N −(zi) unless this set is empty. Since D has no ordinary cycle, this produces a path P = z1z2 . . . zs with N +(zs) − N −(zs) = ∅. Applying an argument similar to that used above, we can show that z1, z2, . . . , zs is a round labelling of the subdigraph induced by V (P ). Thus, if P contains all vertices of D, then a round labelling of D is

established. So assume that there is a vertex v not in P , which is adjacent

to some vertex of P . It is easy to see that there is no ordinary arc between v

and P . This implies that v ∈ N +(zi) ∩ N −(zi) for each i = 1, 2, . . . , s. In fact, it is not hard to see that the same is true for every vertex v ∈ V (D) − V (P ).

Therefore, if we apply the above algorithm starting from an appropriate (‘z1type’) vertex not in P , we obtain a new ordinary path Q and V (Q)∩V (P ) = ∅.

By applying the above algorithm as many times as possible, we obtain a

collection Let z1t+1, .

of ..

vertex-disjoint ordinary

,

zt+1
mt+1

be

the

remaining

paths P k = z1kz2k . . vertices (these form

. zmk k , k = 1, 2, . . . , t. a complete digraph).

It is easy to verify that labelling the vertices according to the ordering

z11

,

z21

,

.

.

.

,

zm1 1

,

z12

,

z22

,

.

.

.

,

zm2 2

,

.

.

.

,

z1t+1

,

z2t+1

,

.

.

.

,

zt+1
mt+1

results in a round labelling of D. In fact the proof above implies that if we let Di, i = 1, 2, . . . , t + 1, be the subdigraph induced by the vertices

4.11 Locally Semicomplete Digraphs 207
1 8
2 9
3 10
4
5
6
7
Figure 4.17 An example of a round digraph containing 2-cycles. Undirected edges are used to indicate 2-cycles and fat edges between two boxes indicate a complete connection in both directions between the corresponding vertices.
↔
with superscript i above, then we have D =Kt+1 [D1, D2, . . . , Dt, Dt+1] (see Figure 4.17).
It is left as an exercise to show that this proof implies a polynomial algorithm to decide whether a digraph D is round and to ﬁnd a round labelling of D if D is round.
Corollary 4.11.5 (Bang-Jensen) [44] A connected local tournament D is round if and only if, for each vertex x of D, N +(x) and N −(x) induce transitive tournaments.
4.11.2 Non-Strong Locally Semicomplete Digraphs
The most basic properties of strong components of a connected non-strong locally semicomplete digraph are given in the following result, due to BangJensen.
Theorem 4.11.6 [44] Let D be a connected locally semicomplete digraph that is not strong. Then the following holds for D. (a) If A and B are distinct strong components of D with at least one arc
between them, then either A→B or B→A. (b) If A and B are strong components of D, such that A→B, then A and B
are semicomplete digraphs. (c) The strong components of D can be ordered in a unique way D1, D2, . . . ,
Dp such that there are no arcs from Dj to Di for j > i, and Di dominates Di+1 for i = 1, 2, . . . , p − 1.

208 4. Classes of Digraphs
Proof: Recall that a locally semicomplete digraph is a locally in-semicomplete digraph as well as a locally out-semicomplete digraph. Part (a) of this theorem follows immediately from Part (i) of Theorem 4.10.4 and its analogue for locally out-semicomplete digraphs. Part (b) can be easily obtained from the deﬁnition of a locally semicomplete digraph. Finally, Part (c) follows from the fact proved in Theorem 4.10.4 (and its analogue for locally out-semicomplete digraphs) that SC(D) has an out-branching and an in-branching. Indeed, a digraph which is both out-branching and in-branching is merely a hamiltonian path.
A locally semicomplete digraph D is round decomposable if there exists a round local tournament R on r ≥ 2 vertices such that D = R[S1, . . . , Sr], where each Si is a strong semicomplete digraph. We call R[S1, . . . , Sr] a round decomposition of D. The following consequence of Theorem 4.11.6, whose proof is left as Exercise 4.30, shows that connected, but not strongly connected locally semicomplete digraphs are round decomposable.
Figure 4.18 A round decomposable locally semicomplete digraph D. The big circles indicate the sets that correspond to the sets W1, W2, . . . , W6 in the decomposition D = R[W1, W2, . . . , W6], where R is the round locally semicomplete digraph one obtains by replacing each circled set by one vertex. Fat arcs indicate that there is a complete domination in the direction shown.
Corollary 4.11.7 [44] Every connected, but not strongly connected locally semicomplete digraph D has a unique round decomposition R[D1, D2, . . . , Dp], where D1, D2, . . . , Dp is the acyclic ordering of strong components of D and R is the round local tournament containing no cycle which one obtains by taking one vertex from each Di.

4.11 Locally Semicomplete Digraphs 209

Now we describe another kind of decomposition theorem for locally semicomplete digraphs due to Guo and Volkmann. The proof of this theorem is left as Exercise 4.31. The statement of the theorem is illustrated in Figure 4.19.
Theorem 4.11.8 [349, 351] Let D be a connected locally semicomplete digraph that is not strong and let D1, . . . , Dp be the acyclic ordering of strong components of D. Then D can be decomposed into r ≥ 2 induced subdigraphs D1, D2, . . . , Dr as follows:
D1 = Dp, λ1 = p,
λi+1 = min{ j | N +(Dj) ∩ V (Di) = ∅},
and Di+1 = D V (Dλi+1 ) ∪ V (Dλi+1+1) ∪ · · · ∪ V (Dλi−1) .
The subdigraphs D1, D2, . . . , Dr satisfy the properties below:
(a) Di consists of some strong components of D and is semicomplete for i = 1, 2, . . . , r
(b) Di+1 dominates the initial component of Di and there exists no arc from Di to Di+1 for i = 1, 2, . . . , r − 1
(c) if r ≥ 3, then there is no arc between Di and Dj for i, j satisfying |j −i| ≥ 2.
For a connected, but not strongly connected locally semicomplete digraph D, the unique sequence D1, D2, . . . , Dr deﬁned in Theorem 4.11.8 is called the semicomplete decomposition of D.

4.11.3 Strong Round Decomposable Locally Semicomplete Digraphs
In the previous subsection we saw that every connected non-strong locally semicomplete digraph is round decomposable. This property does not hold for strong locally semicomplete digraphs (see Lemma 4.11.14). The following assertions, due to Bang-Jensen, Guo, Gutin and Volkman, provide some important properties concerning round decompositions of strong locally semicomplete digraphs.
Proposition 4.11.9 [55] Let R[H1, H2, . . . , Hα] be a round decomposition of a strong locally semicomplete digraph D. Then, for every minimal separating set S, there are two integers i and k ≥ 0 such that S = V (Hi)∪. . .∪V (Hi+k).
Proof: We will ﬁrst prove that

if V (Hi) ∩ S = ∅, then V (Hi) ⊆ S.

(4.6)

210 4. Classes of Digraphs

15 9

12

26

13

10 16

37

14 D1

11

48

15

D5 D4

D3

D2

Figure 4.19 The semicomplete decomposition of a non-strong locally semicomplete digraph with 16 strong components (numbered 1-16 corresponding to the acyclic ordering). Each circle indicates a strong component and each box indicates a semicomplete subdigraph formed by consecutive components all of which dominate the ﬁrst component in the previous layer. For clarity arcs inside components as well as some arcs between components inside a semicomplete subdigraph Di (all going from top to bottom) are omitted.

Assume that there exists Hi such that V (Hi) ∩ S = ∅ = V (Hi) − S. Using this assumption we shall prove that D − S is strong, contradicting the deﬁnition of S.
Let s ∈ V (Hi) ∩ S. To show that D − S is strong, we consider a pair of diﬀerent vertices x and y of D − S and prove that D − S has an (x, y)path. Since S is a minimal separating set, D = D − (S − s ) is strong. Consider a shortest (x, y)-path P in D among all (x, y)-paths using at most two vertices from each Hj. The existence of such a path follows from the fact that R is strong. Since the vertices of Hi in D have the same in- and outneighbourhoods, P contains at most one vertex from Hi, unless x, y ∈ V (Hi) in which case P contains only these two vertices from Hi. If s is not on P , we are done. Thus, assume that s is on P . Then, since P is shortest possible, neither x nor y belongs to Hi. Now we can replace s with a vertex in V (Hi) − S. Therefore, D − S has an (x, y)-path, so (4.6) is proved.
Suppose that S consists of disjoint sets T1, . . . , T such that
Ti = V (Hji ) ∪ . . . ∪ V (Hji+ki ) and (V (Hji−1) ∪ V (Hji+ki+1)) ∩ S = ∅
for i ∈ {1, . . . , }. If ≥ 2, then D − Ti is strong and hence it follows from the fact that R is round that Hji−1 dominates Hji+ki+1 for every i = 1, . . . , . Therefore, D − S is strong; a contradiction.
Corollary 4.11.10 [55] If a locally semicomplete digraph D is round decomposable, then it has a unique round decomposition D = R[D1, D2, . . . , Dα].

4.11 Locally Semicomplete Digraphs 211

Proof: Suppose that D has two diﬀerent round decompositions: D =
R[D1, . . . , Dα] and D = R [H1, . . . , Hβ]. By Corollary 4.11.7, we may assume that D is strong. By the deﬁnition
of a round decomposition, this implies that α, β ≥ 3. Let S be a minimal
separating set of D. By Proposition 4.11.9, we may assume without loss of
generality that S = V (D1 ∪ . . . ∪ Di) = V (H1 ∪ . . . ∪ Hj) for some i and j. Since D − S is non-strong, by Corollary 4.11.7, Di+1 = Hj+1,. . . , Dα = Hβ (in particular, α − i = β − j). Now it suﬃces to prove that

D1 = H1,. . . ,Di = Hj (in particular, i = j).

(4.7)

If D S is non-strong, then (4.7) follows by Corollary 4.11.7. If D S is strong, then ﬁrst consider the case α = 3. Then S = V (D1), because D − S is non-strong and α = 3. Assuming that j > 1, we obtain that the subdigraph of D induced by S has a strong round decomposition. This contradicts the fact that R is a local tournament, since the in-neighbourhood of the vertex rj+1 in R contains a cycle (where rp corresponds to Hp, p = 1, . . . , β). Therefore, (4.7) is true for α = 3. If α > 3, then we can ﬁnd a separating set in D S and conclude by induction that (4.7) holds.

Proposition 4.11.9 allows us to construct a polynomial algorithm for checking whether a locally semicomplete digraph is round decomposable.

Proposition 4.11.11 [55] There exists a polynomial algorithm to decide whether a given locally semicomplete digraph D has a round decomposition and to ﬁnd this decomposition if it exists.

Proof: We only give a sketch of such an algorithm. Find a minimal separating set S in D starting with S = N +(x) for a vertex x ∈ V (D) and deleting
vertices from S until a minimal separating set is obtained. Construct the
strong components of D S and D − S and label these D1, D2, . . . , Dα, where D1, . . . , Dp, p ≥ 1, form an acyclic ordering of the strong components of D S and Dp+1, . . . , Dα form an acyclic ordering of the strong components of D − S. For every pair Di and Dj (1 ≤ i = j ≤ α), we check the following: if there exist some arcs between Di and Dj, then either Di→Dj or Dj→Di. If we ﬁnd a pair for which the above condition is false, then D is not round
decomposable. Otherwise, we form a digraph R = D {x1, x2, . . . , xα} , where xi ∈ V (Di) for i = 1, 2, . . . , α. We check whether R is round using Corollary 4.11.5. If R is not round, then D is not round decomposable. Otherwise, D
is round decomposable and D = R[D1, . . . , Dα]. It is not diﬃcult to verify that our algorithm is correct and polynomial.

4.11.4 Classiﬁcation of Locally Semicomplete Digraphs
We start this subsection with a lemma on minimal separating sets of locally semicomplete digraphs. It will be shown in Lemma 7.13.4 that for a strong

212 4. Classes of Digraphs
locally semicomplete digraph D and a minimal separating set S in D, we have that D − S is connected.
Lemma 4.11.12 [55] If a strong locally semicomplete digraph D is not semicomplete, then there exists a minimal separating set S ⊂ V (D) such that D − S is not semicomplete. Furthermore, if D1, D2, . . . , Dp is the acyclic ordering of the strong components of D and D1, D2, . . . , Dr is the semicomplete decomposition of D − S, then r ≥ 3, D S is semicomplete and we have Dp→S→D1.
Proof: Suppose D − S is semicomplete for every minimal separating set S. Then D − S is semicomplete for all separating sets S. Hence D is semicomplete, because any pair of non-adjacent vertices can be separated by some separating set S. This proves the ﬁrst claim of the lemma.
Let S be a minimal separating set such that D − S is not semicomplete. Clearly, if r = 2 (in Theorem 4.11.8), then D − S is semicomplete. Thus, r ≥ 3. By the minimality of S every vertex s ∈ S dominates a vertex in D1 and is dominated by a vertex in Dp. Thus if some x ∈ Dp was dominated by s ∈ S, then, by the deﬁnition of a locally semicomplete digraph, we would have D1→Dp, contradicting the fact that r ≥ 3. Hence (using that Dp is strongly connected) we get that Dp→S and similarly S→D1. From the last observation it follows that S is semicomplete.
Now we consider strongly connected locally semicomplete digraphs which are not semicomplete and not round decomposable. We ﬁrst show that the semicomplete decomposition of D−S has exactly three components, whenever S is a minimal separating set such that D − S is not semicomplete.
Lemma 4.11.13 [55] Let D be a strong locally semicomplete digraph which is not semicomplete. Either D is round decomposable, or D has a minimal separating set S such that the semicomplete decomposition of D − S has exactly three components D1, D2, D3.
Proof: By Lemma 4.11.12, D has a minimal separating set S such that the semicomplete decomposition of D − S has at least three components.
Assume now that the semicomplete decomposition of D − S has more than three components D1, . . . , Dr (r ≥ 4). Let D1, D2, . . . , Dp be the acyclic ordering of strong components of D − S. According to Theorem 4.11.8 (c), there is no arc between Di and Dj if |i − j| ≥ 2. It follows from the deﬁnition of a locally semicomplete digraph that
N +(Di) ∩ S = ∅ for i ≥ 3 and N −(Dj) ∩ S = ∅ for j ≤ r − 2. (4.8)
By Lemma 4.11.12, D S is semicomplete and S = N +(Dp). Let Dp+1, . . . , Dp+q be the acyclic ordering of the strong components of D S . Using (4.8)

4.11 Locally Semicomplete Digraphs 213
and the assumption r ≥ 4, it is easy to check that if there is an arc between Di and Dj (1 ≤ i = j ≤ p + q), then Di→Dj or Dj→Di. Let R = D {x1, x2, . . . , xp+q} with xi ∈ V (Di) for i = 1, 2, . . . , p + q. Now it suﬃces to prove that R is a round local tournament.
Since R is a subdigraph of D and no pair Di, Dj induces a strong digraph, we see that R is a local tournament. By Corollary 4.11.7 each of the subdigraphs R = R − {xp+1, . . . , xp+q}, R = R − V (R) ∩ V (Dr−1) and R = R − V (R) ∩ V (D2) is round. Since N +(v) ∩ V (R) (as well as N −(v) ∩ V (R)) is completely contained in one of the sets V (R ), V (R ) and V (R ) for every v ∈ V (R), we see that R is round.
Thus if r ≥ 4, then D is round decomposable.
Our next result is a characterization of locally semicomplete digraphs which are not semicomplete and not round decomposable. This characterization was proved for the ﬁrst time by Guo in [341]. A weaker form was obtained earlier by Bang-Jensen in [49]. Here we give the proof of this result from [55].
Lemma 4.11.14 Let D be a strong locally semicomplete digraph which is not semicomplete. Then D is not round decomposable if and only if the following conditions are satisﬁed:
(a) There is a minimal separating set S such that D − S is not semicomplete and for each such S, D S is semicomplete and the semicomplete decomposition of D − S has exactly three components D1, D2, D3;
(b) There are integers α, β, µ, ν with λ2 ≤ α ≤ β ≤ p − 1 and p + 1 ≤ µ ≤ ν ≤ p + q such that
N −(Dα) ∩ V (Dµ) = ∅ and N +(Dα) ∩ V (Dν ) = ∅,
or N −(Dµ) ∩ V (Dα) = ∅ and N +(Dµ) ∩ V (Dβ) = ∅,
where D1, D2, . . . , Dp and Dp+1, . . . , Dp+q are the acyclic orderings the strong components of D −S and D S , respectively, and Dλ2 is the initial component of D2.
Proof: If D is round decomposable and satisﬁes (a), then we must have D = R[D1, D2, . . . , Dp+q], where R is the digraph obtained from D by contracting each Di into one vertex. This follows from Corollary 4.11.7 and the fact that each of the digraphs D − S and D − V (D2) has a round decomposition that agrees with this structure. Now it is easy to see that D does not satisfy (b).
Suppose now that D is not round decomposable. By Lemmas 4.11.12 and 4.11.13, D satisﬁes (a), so we only have to prove that it also satisﬁes (b).
If there are no arcs from S to D2, then it is easy to see that D has a round decomposition. If there exist components Dp+i and Dj with V (Dj) ⊆ V (D2), such that there are arcs in both directions between Dp+i and Dj, then D satisﬁes (b). So we can assume that for every pair of sets from the

214 4. Classes of Digraphs
collection D1, D2, . . . , Dp+q, either there are no arcs between these sets, or one set completely dominates the other. Then, by Corollary 4.11.5, D is round decomposable, with round decomposition D = R[D1, D2, . . . , Dp+q] as above, unless we have three subdigraphs X, Y, Z ∈ {D1, D2, . . . , Dp+q} such that X→Y →Z→X and there exists a subdigraph W ∈ {D1, D2, . . . , Dp+q}− {X, Y, Z} such that either W →X, Y, Z or X, Y, Z→W .
One of the subdigraphs X, Y, Z, say without loss of generality X, is a strong component of D S . If we have V (Y ) ⊆ S also, then V (Z) ⊆ V (D2) and W is either in D S or in D2 (there are four possible positions for W satisfying that either W →X, Y, Z or X, Y, Z→W ). In each of these cases it is easy to see that D satisﬁes (b). For example, if W is in D S and W →X, Y, Z, then any arc from W to Z and from Z to X satisﬁes the ﬁrst part of (b). The proof is similar when V (Y ) ⊆ V (D3). Hence we can assume that V (Y ) ⊆ V (D2). If Z = Dp, then W must be either in D S and X, Y, Z→W , or V (W ) ⊆ V (D2) and W →X, Y, Z (which means that W = Di and Y = Dj for some λ2 ≤ i < j < p). In both cases it is easy to see that D satisﬁes (b). The last case V (Y ), V (Z) ⊆ V (D2) can be treated similarly.
We can now state a classiﬁcation of locally semicomplete digraphs.
Theorem 4.11.15 (Bang-Jensen, Guo, Gutin, Volkmann) [55] Let D be a connected locally semicomplete digraph. Then exactly one of the following possibilities holds.
(a) D is round decomposable with a unique round decomposition given by D = R[D1, D2, . . . , Dα], where R is a round local tournament on α ≥ 2 vertices and Di is a strong semicomplete digraph for i = 1, 2, . . . , α;
(b) D is not round decomposable and not semicomplete and it has the structure as described in Lemma 4.11.14;
(c) D is a semicomplete digraph which is not round decomposable.
We ﬁnish this section with the following useful proposition, whose proof is left as Exercise 4.35.
Proposition 4.11.16 [55] Let D be a strong non-round decomposable locally semicomplete digraph and let S be a minimal separating set of D such that D − S is not semicomplete. Let D1, . . . , Dp be the acyclic ordering of the strong components of D − S and Dp+1, . . . , Dp+q be the acyclic ordering of the strong components of D S . Suppose that there is an arc s → v from S to D2 with s ∈ V (Di) and v ∈ V (Dj), then
Di ∪ Di+1 ∪ . . . ∪ Dp+q→D3→Dλ2 ∪ . . . ∪ Dj .

4.12 Totally Φi-Decomposable Digraphs 215
4.12 Totally Φi-Decomposable Digraphs
Theorem 4.8.5 is a very important starting point for construction of polynomial algorithms for hamiltonian paths and cycles in quasi-transitive digraphs (see Chapter 5) and solving more general problems in this class of digraphs. This theorem shows that quasi-transitive digraphs are totally Φdecomposable, where Φ is the union of extended semicomplete and transitive digraphs. Since both extended semicomplete digraphs and transitive digraphs are special subclasses of much wider classes of digraphs, it is natural to study totally Φ-decomposable digraphs, where Φ is a much more general class of digraphs than the union of extended semicomplete and transitive digraphs. However, our choice of candidates for the class Φ should be restricted in such a way that we can still construct polynomial algorithms for some important problems such as the hamiltonian cycle problem using properties of digraphs in Φ.
This idea was ﬁrst used by Bang-Jensen and Gutin [62] to introduce the following three classes of digraphs:
(a) Φ0 is the union of all semicomplete multipartite digraphs, all connected extended locally semicomplete digraphs and all acyclic digraphs,
(b) Φ1 is the union of all semicomplete bipartite digraphs, all connected extended locally semicomplete digraphs and all acyclic digraphs, and
(c) Φ2 is the union of all connected extended locally semicomplete digraphs and all acyclic digraphs.
The aim of this section is to show that totally Φi-decomposable digraphs can be recognized in polynomial time for i = 0, 1, 2. (If these recognition problems were not polynomial, then the study of the properties of totally Φi-decomposable digraphs would be of much less interest.)
A set Φ of digraphs is hereditary if D ∈ Φ implies that every induced subdigraph of D is in Φ. Observe that every Φi, i = 0, 1, 2 is a hereditary set.
Lemma 4.12.1 Let Φ be a hereditary set of digraphs. If a given digraph D is totally Φ-decomposable, then every induced subdigraph D of D is totally Φ-decomposable. In other words, total Φ-decomposability is a hereditary property.
Proof: By induction on the number of vertices of D. The claim is obviously true if D has less than 3 vertices.
If D ∈ Φ, then our claim follows from the fact that Φ is hereditary. So we may assume that D = R[H1, . . . , Hr], r ≥ 2, where R ∈ Φ and each of H1, . . . , Hr is totally Φ-decomposable.
Let D be an induced subdigraph of D. If there is an index i so that V (D ) ⊂ V (Hi), then D is totally Φ-decomposable by induction. Otherwise, D = R [T1, . . . , Tr ], where r ≥ 2 and R ∈ Φ, is the subdigraph of R induced by those vertices i of R, whose Hi has a non-empty intersection with

216 4. Classes of Digraphs
V (D ) and the Tj’s are the corresponding Hi’s restricted to the vertices of D . Observe that R ∈ Φ, since Φ is hereditary. Moreover, by induction, each Tj is totally Φ-decomposable, hence so is D .
Lemma 4.12.2 There exists an O(mn + n2)-algorithm for checking if a digraph D with n vertices and m arcs has a decomposition D = R[H1, . . . , Hr], r ≥ 2, where Hi is an arbitrary digraph and the digraph R is either acyclic or semicomplete multipartite or semicomplete bipartite or connected extended locally semicomplete.
Proof: If D is not connected and D1,. . . ,Dc are its components, then D = Kc[D1, . . . , Dc]. Hence, in the rest of the proof we may assume that D is connected. We consider the diﬀerent possibilities for R we are interested in, one by one.
Check whether R can be acyclic: First ﬁnd the strong components D1, . . . , Dk of D. If k = 1 then R cannot be acyclic and we can stop verifying that possibility. So suppose k ≥ 2.
If we ﬁnd two strong components Di and Dj such that there is an arc between them but there are non-adjacent vertices x ∈ Di and y ∈ Dj, then we replace Di and Dj by their union. This is justiﬁed because Di and Dj cannot be in diﬀerent sets Hs and Ht in a possible decomposition. Repeat this step but now check also the possibility for a pair D and D of new ‘components’ to have arcs between D and D in diﬀerent directions. In the last case we also replace D and D by their union. Continue this procedure until all remaining sets satisfy that either there is no arc between them, or there are all possible arcs from one to the other. Let V1, . . . , Vr, r ≥ 1 denote the distinct vertex sets of the obtained ‘components’. If r = 1, then we cannot ﬁnd an acyclic graph as R. Otherwise D = R[V1, . . . , Vr], r ≥ 2, and we obtain R by taking one vertex from each Vi.
Check whether R can be a semicomplete multipartite digraph: Find the connected components G1, . . . , Gc, c ≥ 1, of the complement of the underlying graph U G(D) of D. If c = 1, then R cannot be semicomplete multipartite. So we may assume that c ≥ 2 below. Let Gj be the subgraph of U G(D) induced by the vertices Vj of the jth component Gj of the complement of U G(D). Furthermore, let Gj1, . . . , Gjnj , nj ≥ 1, be the connected components of Gj. Denote Vjk = V (Gjk).
Starting with the collection W = {V1, . . . , Vc}, we identify two of the sets Vi and Vj if there exist Via and Vjb a ∈ {1, . . . , ni}, b ∈ {1, . . . , nj} such that we have none of the possibilities Via→Vjb, Vjb→Via or Via→Vjb and Vjb→Via. Clearly the obtained set Vi ∪ Vj induces a connected subdigraph of D. Let Q1, . . . , Qr denote the sets obtained, by repeating this process until no more changes occur. If r = 1, then R cannot be semicomplete multipartite. Otherwise, R is the semicomplete multipartite digraph obtained by set-contracting each connected component of Qi into a vertex.

4.13 Intersection Digraphs 217
Checking whether R can be a semicomplete bipartite digraph or a connected extended locally semicomplete digraph is left as Exercise 4.38.
It is not diﬃcult to see that, for every R being either acyclic or semicomplete multipartite, the procedures above can be realized as an O(nm + n2)algorithm. The same complexity is proved for semicomplete bipartite digraphs and extended locally semicomplete digraphs in Exercise 4.38.
Theorem 4.12.3 [62] There exists an O(n2m+n3)-algorithm for checking if a digraph with n vertices and m arcs is totally Φi-decomposable for i = 0, 1, 2.
Proof: We describe a recursive algorithm to check Φi-decomposability. We have shown in Lemma 4.12.2 how to verify whether D = R[H1, . . . , Hr], r ≥ 2, where R is acyclic, semicomplete multipartite, semicomplete bipartite or connected extended locally semicomplete. Whenever we ﬁnd an R that could be used, the algorithm checks total Φi-decomposability of H1, . . . , Hr in recursive calls.
Notice how the algorithm exploits the fact that total Φi-decomposability is a hereditary property (see Lemma 4.12.1): if some R is found appropriate, then R can be used, because if D is totally Φi-decomposable, then each of H1, . . . , Hr (being an induced subdigraph of D) must also be totally Φidecomposable. Since there are O(n) recursive calls, the complexity of the algorithm is O(n2m + n3).
4.13 Intersection Digraphs
Let U and V be sets and let F = {(Sv, Tv) : Sv, Tv ⊆ U and v ∈ V } be a family of ordered subsets of U (one for each v ∈ V ). The intersection digraph corresponding to F is the digraph DF = (V, A) such that vw ∈ A if and only if Sv ∩ Tw = ∅. The set U is called the universal set for DF . The above family of pairs form a representation of D. The concept of an intersection digraph is a natural analogue of the notion of an intersection graph and was introduced by Beineke and Zamﬁrescu [101] and Sen, Das, Roy and West [661]. Since an arc is an ordered pair of vertices, every line digraph L(D) is the intersection digraph of the family A(D ), where D is the converse of D. It follows from the deﬁnition of an intersection digraph that every digraph D is the intersection digraph of the family {(A+(v), A−(v)) : v ∈ V (D)}, where A+(v) (A−(v)) is the set of arcs leaving v (entering v). Here the universal set is A(D).
Clearly, a digraph can be represented as the intersection digraph of various families of ordered pairs. It is quite natural to ask how large the universal set U has to be. For a digraph D the minimum number of elements in U such that D = DF for some family F of ordered pairs of subsets of U is called the intersection number, in(D) of D. Sen, Das, Roy and West [661] prove the following theorem for the intersection number of an arbitrary digraph D.

218 4. Classes of Digraphs
For a digraph D = (V, A), a set B ⊆ A is one-way if there is a pair of sets X, Y ⊂ V (called a generating pair) such that B = (X, Y )D, that is, B is the set of arcs from X to Y .
Theorem 4.13.1 [661] The intersection number of a digraph D = (V, A) equals the minimum number of one-way sets required to cover A.
Proof: Let B1, . . . , Bk be a minimum collection of one-way sets covering A and let (X1, Y1), . . . , (Xk, Yk) be the corresponding generating pairs. Let Sv = {i : v ∈ Xi}, and Tv = {i : v ∈ Yi}. Then Sv ∩ Tw = ∅ if and only if vw ∈ A, showing that in(D) ≤ k.
Now let U be a universal set of cardinality u = in(D) such that D has a representation by a set of ordered pairs (Sv, Tv) of subsets of U . We may assume that U = {1, 2, . . . , u}. Deﬁne u one-way sets covering A as follows: v ∈ Xi if and only if i ∈ Sv and v ∈ Yi if and only if i ∈ Tv. Then vw ∈ A if and only if v ∈ Xi, w ∈ Yi for some i. Thus, k ≤ in(D).
A subtree intersection digraph is a digraph representable as the intersection digraph of a family of ordered pairs of subtrees in an undirected tree. A matching diagram digraph is digraph representable as the intersection digraph of a family of ordered pairs of straight-line segments between two parallel lines. An interval digraph is a digraph representable as the intersection digraph of a family of ordered pairs of closed intervals on the real line. Subtree intersection digraphs, matching diagram digraphs and interval digraphs are ‘directed’ analogues of chordal graphs, permutation graphs and interval graphs, respectively, where subtrees, straight-line segments and real line intervals are also used for representation (see the book [331] by Golumbic). While chordal graphs form a special family of undirected graphs, Harary, Kabell and McMorris showed that every digraph is a subtree intersection digraph.
Proposition 4.13.2 [400] Every digraph is a subtree intersection digraph.
Proof: Let D = (V, A) be an arbitrary digraph. Let G = (U, E), U = V ∪{x}, E = {{x, v} : v ∈ V }, x ∈ V . Clearly, G is an undirected tree. Setting Sv = G {v} and Tv = G {x} ∪ {w : wv ∈ A} provides the required representation.
The following construction by Mu¨ller shows that every interval digraph is a matching diagram digraph [576]. Let {([av, bv], [cv, dv] : v ∈ V (D)} be a representation of an interval digraph D. To obtain a representation {(Sv, Tv) : v ∈ V (D)} of D as a matching diagram digraph we set Sv to be the line segment between points (av, 0) and (bv, 1) in the plane, and Tv to be the line segment connecting the points (cv, 1) and (dv, 0).
There are several characterizations of interval digraphs, see, e.g., the papers [650] by Sanyal and Sen and [736] by West. We restrict ourselves to just one of them.

4.14 Planar Digraphs 219
Theorem 4.13.3 [661] A digraph D is an interval digraph if and only if there exist independent row and column permutations of the adjacency matrix M (D) of D which result in a matrix M satisfying the following property: the zero entries of M can be labeled R or C such that every position above and to the right of an R is an R and every position below and to the left of a C is a C.
None of the characterizations given in [650, 736] implies a polynomial algorithm to recognize interval digraphs. Mu¨ller [576] obtained such an algorithm. A polynomial algorithm is also given in [576] to recognize unit interval digraphs, i.e., interval digraphs who have interval representations, where all intervals are of the same length.
4.14 Planar Digraphs
We now discuss planar (di)graphs, i.e. (di)graphs that can be drawn without crossings between (arcs) edges (except at endpoints). Clearly this property does not depend on the orientation of the arcs and hence we can ignore the orientation below when we give a formal deﬁnition. Furthermore, most of the results and deﬁnitions in this section are for undirected graphs, but are valid also for planar digraphs as far as their underlying graphs are concerned.
An undirected graph G = (V, E) is planar if there exists a mapping f which maps G to R2 in the following way:
Each vertex is mapped to a point in R2 and distinct vertices are mapped to distinct points. Each edge uv ∈ E is mapped to a simple (that is, not self-intersecting) curve Cuv from f (u) to f (v) and no two curves corresponding to distinct edges intersect, except possibly at their endpoints.
For algorithmic purposes as well as for arguing about planar graphs, it is inconvenient to allow arbitrary curves in the embeddings of planar graphs. A polygonal curve from u to v is a piecewise linear curve consisting of ﬁnitely many lines such that the ﬁrst line starts at u, the last line ends at v and each other line starts at the last point of the previous line. Since we can approximate any simple curve arbitrarily well by a polygonal curve we may assume that the curves used in the embedding are always polygonal curves.
A planar graph G may have many diﬀerent embeddings in the plane (each embedding corresponds to a mapping f as above). Sometimes we wish to refer to properties of a speciﬁc embedding f of G. In this case we say that G is plane (that is, already embedded) with planar embedding f . A plane graph G partitions R2 into a ﬁnite number of (topologically) connected regions called faces. Precisely one of these faces is unbounded and we call this the outer face. It is easy to see that, for any ﬁxed face F of G, we may reembed G in

220 4. Classes of Digraphs
R2 in such a way that F becomes the outer face. The boundary of a face F is denoted by bd(F ) and we normally describe a face by listing the vertices in clockwise order around the face (for the unbounded face this corresponds to listing the vertices on the boundary in the anti-clockwise order). See Figure 4.20 for an illustration of the deﬁnitions.

1 62

1 62

1 62

5 35

35

3

44

4

(a) (b)

(c)

Figure 4.20 (a) shows a non-planar embedding of a graph H; (b) shows a planar embedding of H; (c) shows a planar embedding of H where all curves are polygonal. With respect to the embedding in (c), the faces are 12341, 14561, 16321 and 36543. The outer face is 36543.

Observe that, if we add the edge 25 to the graph H in Figure 4.20, then the resulting graph, which is isomorphic to K3,3, is no longer planar. In fact planar graphs have a famous characterization, due to Kuratowski:
Theorem 4.14.1 (Kuratowski’s theorem) [507] A graph has a planar embedding if and only if it does not contain a subdivision5 of K5 or K3,3.
Based on this it is possible to show that planar graphs (and hence also planar digraphs) can be recognized eﬃciently. In fact Hopcroft and Tarjan [432] showed that it can be done in linear time and if the graph is planar, one can ﬁnd a planar embedding in the same time.
The following relation between the number of vertices, edges and faces in a plane graph, known as Euler’s formula, is easy to prove by induction on the number of faces.
Theorem 4.14.2 If G is a connected plane graph on n vertices and m edges, then
n − m + φ = 2,
where φ denotes the number of faces in the embedding on G. In particular the number of faces is the same in every embedding of G.
5 A subdivision H of a graph H is any graph that can be obtained from H by replacing each edge by a path all of whose internal vertices have degree 2 in H .

4.15 Application: Gaussian Elimination 221
We leave it to the reader to derive the following easy consequence of Theorem 4.14.2 (see Exercise 4.42):
Corollary 4.14.3 For every planar graph on n ≥ 3 vertices and m edges we have m ≤ 3n − 6.
If we allow multiple edges, then we cannot bound the number of edges as we did above. However for planar digraphs we have the following easy consequence:
Corollary 4.14.4 No planar digraph on n ≥ 3 vertices has more than 6n−12 arcs.
For much more information about drawings of graphs (in particular embeddings of planar graphs) we refer the reader to the recent book [97] by Battista, Eades, Tamassia and Tollis. This book also contains a number of results on how to use digraph techniques (in particular network ﬂows) to obtain nice drawings of (di)graphs.

4.15 Application: Gaussian Elimination

In many applications, such as modeling a problem by a system of diﬀerential

equations and then solving this system by numerical methods (cf. the book

[208] by Duﬀ, Erisman and Reid), the ﬁnal step of the solution of the problem

under consideration consists of solving a system of linear equations: Ax = b,

where A = [aij] is an n × n matrix of coeﬃcients, b is a given vector of dimension n and x is a vector of unknowns. In a considerable number of

applications the matrix A is sparse, i.e., most entries of A are zero. The

system Ax = b is often solved by the Gaussian elimination method. To use

this method, the only requirement is that all diagonal elements aii of matrix A can be made by non-zero row and column permutations.

In many cases in practice, a sparse matrix A has some special structure,

which allows one to solve the system much faster than just using Gaussian

elimination directly. One of the most important such structures is block-

triangular structure. Let n1, n2, . . . , nk be natural numbers such that 1 ≤ n1 < n2 < . . . < nk = n and let n0 = 0. We call the submatrices A(p) = [aip,jp ], with np−1 + 1 ≤ ip, jp ≤ np, the main (n1, . . . , np)-blocks (or just main blocks). We say that A has (n1, . . . , np)-block-triangular structure (or just block-triangular structure) if all entries of A below the main blocks

are zero. (More precisely, one should call this structure upper block-triangular

[208], but since we do not consider lower block-triangular structure here, we

will omit the word ‘upper’.) The matrix



3241



5 3

6 0

0 7

0 9



0003

222 4. Classes of Digraphs
has (3, 4)-block-triangular structure. See also Figure 4.21.
n0
n1 n2
n3
n4 Figure 4.21 An (n1, n2, n3, n4)-block-triangular structure. White space consists of entries equal zero.
If A has block-triangular structure, we solve ﬁrst the system A(p)x(p) = b(p), where x(p) (b(p)) is the vector consisting of np last coordinates of x (b). The values of coordinates of x(p), which we found, equal the values of the corresponding unknowns in the system Ax = b since in the last np rows of A all coeﬃcients except for some in the last np columns are zero. Taking into consideration that the values of coordinates of x(p) are already found, we can compute the values of coordinates of x(p−1) using the block A(p−1). Similarly, using all blocks of A (in the decreasing order of their indices) we can compute all coordinates in x.
However, quite often the block-triangular structure of A is hidden, i.e. A has no block-triangular structure, but A can be transformed into a matrix with block-triangular structure after certain permutations π and τ of its rows and columns, respectively. Here we are interested in using the Gaussian elimination method and thus we assume that all diagonal entries of A are non-zero (when it is possible, one can ﬁnd permutations of rows and columns of A, which bring non-zero diagonal to A using perfect matchings in bipartite graphs, see [208]). Therefore, we do not wish to change the diagonal entries of A. This can be achieved by using only simultaneous permutations of rows and columns of A, i.e. π = τ .
To reveal hidden block-triangular structure of A, the following approach can be used. Let us replace all non-zero entries of A by 1. We obtain matrix B = [bij], which can be viewed as the adjacency matrix of some directed pseudograph D with vertex set {v1, . . . , vn}, i.e. bij = 1 if and only if vi→vj in D. (Clearly, D has no parallel arcs, but due to the assumption on the diagonal elements it has a loop at every vertex.) Suppose that D is not strong, D1, . . . , Dp is the acyclic ordering of the strong components of D (i.e. there is no arc from Dj to Di if j > i) and the vertices of D are ordered vπ(1), vπ(2), . . . , vπ(n) such that

4.15 Application: Gaussian Elimination 223

V (Di) = {vπ(ni+1), vπ(ni+2), . . . , vπ(ni+1)}.
It is easy to see that B has (n1, . . . , np)-block-triangular structure. This implies that A has block-triangular structure. The above observation suggests the following procedure to reveal hidden block-triangular structure of A.

1. Replace every non-zero entry of A by 1 to obtain a (0, 1)-matrix B. 2. Construct a directed pseudograph D with vertex set {v1, . . . , vn} such
that B is the adjacency matrix of D. 3. Find the strong components of D. If D is strong, then B (and thus A)
does not have hidden block-triangular structure6. If D is not strong, let D1, . . . , Dp be the strong components of D (in acyclic order). Find a permutation π on {1, . . . , n} such that
V (Di) = {vπ(ni+1), vπ(ni+2), . . . , vπ(ni+1)}.
This permutation reveals hidden block-triangular structure of B (and thus A). Use π to permute rows and columns of A and coordinates of x and b.

To perform Step 3 one may use Tarjan’s algorithm in Section 4.4. We will illustrate the procedure above by the following example. Suppose we wish to solve the system:

x1 + 3x3 + 8x4 = 2, x2 + 5x4 = 1,
2x1 + 2x2 + 4x3 + 9x4 = 6, 3x2 + 2x4 = 3.

We ﬁrst construct the matrix B and the directed pseudograph D. We have V (D) = {v1, v2, v2, v4} and

A(D) = {v1v3, v1v4, v2v4, v3v1, v3v2, v3v4, v4v2} ∪ {vivi : i = 1, 2, 3, 4}.
The digraph D has strong components D(1) and D(2), which are subdigraphs of D induced by {v1, v3} and {v2, v4}, respectively. These components suggest the following permutation π, π(i) = i for i = 1, 4, π(2) = 3 and π(3) = 2, of rows and columns of A as well as elements of x and b, the right-hand side. As a result, we obtain the following:

x1 + 3x2

+ 8x4 = 2,

2x1 + 4x2 + 2x3 9x4 = 6,

x3 + 5x4 = 1,

3x3 + 2x4 = 3,

6 Provided we do not change the set of entries of the diagonal of A

224 4. Classes of Digraphs
where xi = xi for i = 1, 4, x2 = x3 and x3 = x2. Solving the last two equations separately, we obtain x3 = 1, x4 = 0.
Now solving the ﬁrst two equations, we see that x1 = 2, x2 = 0. Hence, x1 = 2, x2 = 1, x3 = x4 = 0.
A discussion on practical experience with revealing and exploiting blocktriangular structures is given in [208].
4.16 Exercises
4.1. Let φ(u) be the forefather of a vertex u as deﬁned in Section 4.4. Combining (4.2) and (4.3), prove that φ(φ(u)) = φ(u).
4.2. Prove Proposition 4.3.1. 4.3. Prove Lemma 4.4.1. 4.4. In part (ii) ⇒ (i) of Theorem 4.5.1, prove that σ(D) = L(Q). 4.5. Derive Corollary 4.5.2 from Theorem 4.5.1 (iii). 4.6. (−) Prove Proposition 4.5.3 using Theorem 4.5.1 (i) and (ii). 4.7. Prove the following simple properties of line digraphs:
(i) L(D) ∼= Pn−1 if and only if D ∼= Pn; (ii) L(D) ∼= Cn if and only if D ∼= Cn. 4.8. Let D be a digraph. Show by induction that Lk(D) is isomorphic to the digraph H, whose vertex set consists of walks of D of length k and a vertex v0v1 . . . vk dominates the vertex v1v2 . . . vkvk+1 for every vk+1 ∈ V (D) such that vkvk+1 ∈ A(D). 4.9. Using the results in Exercise 4.7, prove the following elementary properties of iterated line digraphs: Let D be a digraph. Then (i) Lk(D) is a digraph with no arcs, for some k, if and only if D is acyclic; (ii) if D has a pair of cycles joined by a path (possibly of length 0), then
kl→im∞ nk = ∞, where nk is the order of Lk(D); (iii) if no pair of cycles of D is joined by a path, then for all suﬃciently large values of k, each connected component of Lk(D) has at most one cycle. 4.10. Prove by induction on k ≥ 1 Proposition 4.5.4. 4.11. Prove Lemma 4.6.1. 4.12. Prove Lemma 4.6.5. 4.13. Prove Lemma 4.6.6. 4.14. Prove Theorem 4.6.7.

4.16 Exercises 225
4.15. Upwards embeddings of MVSP digraphs. Prove that one can embed every MVSP digraph D into the Cartesian plane such that, if vertices u, v have coordinates (xu, yu) and (xv, yv), respectively, and there is a (u, v)-path in D, then xu ≤ xv and yu ≤ yv. Hint: consider series composition and parallel composition separately.
4.16. Prove Proposition 4.7.2. Hint: use induction on the number of reductions applied for the ‘if’ part and the number of arcs for the ‘only if’ part.
4.17. Prove Proposition 4.7.3.
4.18. Prove part (b) of Lemma 4.8.4. Hint: if u and v are in S then there is a path from u to v in U G(S). Similarly, if x and y are in S . Use these paths (corresponding to sequences of non-adjacent vertices in D) to show that if xu and vy are arcs, then u = v and x = y must hold if D is quasi-transitive.
4.19. (−) Construct an inﬁnite family of path-mergeable digraphs, which are not in-path-mergeable.
4.20. Prove Proposition 4.10.2.
4.21. (−) Show that the following ‘claim’ is wrong. Let D be a locally insemicomplete digraph and let D contain internally disjoint paths P1, P2 such that Pi is an (xi, y)-path (i = 1, 2) and x1 = x2. Then x1 and x2 are adjacent.
4.22. Orientations of path-mergeable digraphs. Prove that every orientation of a path-mergeable digraph is a path-mergeable oriented graph.
4.23. (+) Prove Corollary 4.9.2.
4.24. Path-mergeable digraphs which are neither locally in-semicomplete nor locally out-semicomplete. Show by a construction that there exists an inﬁnite class of path-mergeable digraphs, none of which is locally in-semicomplete or locally out-semicomplete. Then extend your construction to arbitrary degrees of vertex-strong connectivity. Hint: consider extensions.
4.25. (−) Path-mergeable transitive digraphs. Prove that a transitive digraph D = (V, A) is path-mergeable if and only if for every x, y ∈ V and every pair xuy, xvy of (x, y)-path of length 2 either u→v or v→u holds.
4.26. Reformulate Lemma 4.10.3 and Theorem 4.10.4 for locally out-semicomplete digraphs.
4.27. Orientations of locally in-semicomplete digraphs. Prove that every orientation of a digraph which is locally in-semicomplete is a locally intournament digraph.
4.28. Strong orientations of strong locally in-semicomplete digraphs. Prove that every strong locally in-semicomplete digraph on at least 3 vertices has a strong orientation.
4.29. Prove Lemma 4.11.2.
4.30. Prove Corollary 4.11.7.
4.31. Prove Theorem 4.11.8.

226 4. Classes of Digraphs
4.32. Recognition of round digraphs. Show that the proof of Theorem 4.11.4 implies a polynomial algorithm to decide whether a digraph D is round and to ﬁnd a round labelling of D (if D is round).
4.33. (+) Using Lemma 4.11.13, show that, if D is a non-round decomposable locally semicomplete digraph, then the independence number of U G(D) is at most two.
4.34. (−) Give an example of a locally semicomplete digraph on 4 vertices with no 2-king.
4.35. Prove Proposition 4.11.16.
4.36. Prove the assertion stated in Exercise 4.33 using Lemma 4.11.14 and Proposition 4.11.16.
4.37. Extending in-path-mergeability. Prove that, if P, Q are internally disjoint (x, z)- and (y, z)-paths in an extended locally in-semicomplete digraph D and no vertex on P − z is similar to a vertex of Q − z, then there is a path R from either x or y to z in D such that V (R) = V (P ) ∪ V (Q).
4.38. Prove that there exists an O(mn + n2)-algorithm for checking if a digraph D with n vertices and m arcs has a decomposition D = R[H1, . . . , Hr], r ≥ 2, where Hi is an arbitrary digraph and the digraph R is either semicomplete bipartite or connected extended locally semicomplete.
4.39. (−) Let D be a connected digraph which is both quasi-transitive and locally semicomplete. Prove that D is semicomplete.
4.40. (−) Let D be a connected digraph which is both quasi-transitive and locally in-semicomplete. Prove that the diameter of U G(D) is at most 2.
4.41. (−) Prove that the intersection number in(D) ≤ n for every digraph D of order n. Show that this upper bound is sharp (Sen, Das, Roy and West [661]).
4.42. Prove Corollary 4.14.3. Hint: use that each edge is on the boundary of precisely two faces and that each face has at least 3 edges.
4.43. (−) Check which of the following 4 × 4-matrices A = [aij] have hidden blocktriangular structure (the entries not speciﬁed equal zero). Only simultaneous permutations of rows and columns are allowed. (a) a1i = i + 1 for i = 1, 2, 3, a2i = a3i = i for i = 2, 3, and a4i = 2 for i = 2, 3, 4; (b) a12 = a21 = a14 = a41 = a34 = a43 = 2 and aii = 1 for i = 1, 2, 3, 4.

5. Hamiltonicity and Related Problems
In this chapter we will consider the hamiltonian path and cycle problems for digraphs as well as some related problems such as the longest path and cycle problems and the minimum path factor problem. We describe and prove a number of results in the area as well as formulate several open questions.
We recall that a k-path factor of a digraph D is a collection of k vertexdisjoint paths covering V (D). Recall that the minimum positive integer k such that D has a k-path factor is the path covering number of D, denoted by pc(D). A pc(D)-path factor of D is also called a minimum path factor of D. Recall also that a digraph is traceable if it contains a hamiltonian path.
For arbitrary digraphs the hamiltonian path and hamiltonian cycle problems are very diﬃcult and both are N P-complete (see, e.g. the book [303] by Garey and Johnson). For convenience of later referencing we state these results as theorems.
Theorem 5.0.1 The problem to check whether a given digraph has a hamiltonian cycle is N P-complete.
Theorem 5.0.2 The problem to check whether a given digraph has a hamiltonian path is N P-complete.
It is worthwhile mentioning that the hamiltonian cycle and path problems are N P-complete even for some special classes of digraphs. Garey, Johnson and Tarjan showed [305] that the problem remains N P-complete even for planar 3-regular digraphs. It follows easily from Theorems 5.0.1 and 5.0.2 that the problem to determine the minimum path factor as well as the longest path and cycle problems are N P-hard as optimization problems for arbitrary digraphs. This is also true for several special classes of digraphs. However, for some important special classes of digraphs these problems are polynomial time solvable. One such class is the class of acyclic digraphs (see Theorem 2.3.5 and Section 5.3). The reader will see in this chapter that many more such classes can be found.
In Section 5.1, some powerful necessary conditions, due to Gutin and Yeo, are considered for a digraph to be hamiltonian. These conditions can be used for the hamiltonian path problem due to the following simple observation:

228 5. Hamiltonicity and Related Problems
Proposition 5.0.3 A digraph D has a Hamilton path if and only if the digraph D∗, obtained from D by adding a new vertex x∗ such that x∗ dominates every vertex of D and is dominated by every vertex of D, is hamiltonian.
In Section 5.2 we prove that the path covering number of an arbitrary digraph is never more than its independence number. In Section 5.3 we show that the minimum path factor problem for acyclic digraphs can be solved quite eﬃciently. Furthermore, we show that algorithms for ﬁnding minimum path factors in acyclic digraphs are useful in a number of applications.
In Section 5.4, we obtain necessary and suﬃcient conditions by BangJensen for a path-mergeable digraph to be hamiltonian. Since locally insemicomplete and out-semicomplete digraphs are proper subclasses (see Proposition 4.10.1) of path-mergeable digraphs, we may use these conditions, in Section 5.5, to derive a characterization of hamiltonian locally insemicomplete and out-semicomplete digraphs. As corollaries, we obtain the corresponding results for locally semicomplete digraphs. Digraphs with restricted degrees are considered in Section 5.6. There, a number of degreerelated suﬃcient conditions for a digraph to be hamiltonian are described. In that section, we also consider a recently introduced and powerful proof technique, called multi-insertion, that can be applied to prove many theorems on hamiltonian digraphs.
In the last decade quite a number of papers were devoted to studying the structure of longest cycles and paths of semicomplete multipartite digraphs. In Section 5.7, we consider the most important results obtained in this area so far including some striking results by Yeo. The proofs in that section provide further illustrations of the multi-insertion technique. In Section 5.8, we discuss generalizations of characterizations of hamiltonian and traceable extended semicomplete digraphs to extended locally semicomplete digraphs.
Sections 5.9 and 5.10 are devoted to quasi-transitive digraphs. We present two interesting methods to tackle the hamiltonian path and cycle problems, and the longest path and cycle problems, respectively, in this class of digraphs. The second method by Bang-Jensen and Gutin allows one to ﬁnd even vertex-heaviest paths and cycles in quasi-transitive digraphs in polynomial time (where the weights are on the vertices). The last section is devoted to results on hamiltonian paths and cycles in some classes of digraphs not considered in the previous sections. The proof of Theorem 5.11.2 by Thomassen illustrates how the properties of tournaments can be used to prove results on more general digraphs.
For additional information on hamiltonian and traceable digraphs, see e.g. the surveys [61, 66] by Bang-Jensen and Gutin, [126] by Bondy, [368] by Gutin and [728, 729] by Volkmann.

5.1 Necessary Conditions for Hamiltonicity of Digraphs 229
5.1 Necessary Conditions for Hamiltonicity of Digraphs
An obvious condition for a digraph to be hamiltonian is to be strong. Another obvious and, yet, quite powerful necessary condition for a digraph to be hamiltonian is the existence of a cycle factor1. Both conditions can be veriﬁed in polynomial time (see Sections 4.4 and 3.11.4). The purpose of this section is to describe a series of more powerful conditions, called k-quasi-hamiltonicity, which were recently introduced by Gutin and Yeo in [379]. An equivalent form of 1-quasi-hamiltonicity, pseudo-hamiltonicity, was actually investigated earlier by Babel and Woeginger in [35] for undirected graphs.
We prove that every (k + 1)-quasi-hamiltonian digraph is also k-quasihamiltonian (however, there are digraphs which are k-quasi-hamiltonian, but not (k + 1)-quasi-hamiltonian). We introduce an algorithm that checks kquasi-hamiltonicity of a given digraph with n vertices and m arcs in time O(nmk). Hence, these conditions can be eﬃciently veriﬁed for small values of k. Thus, they can be incorporated in software systems which investigate properties of digraphs (or graphs); one such system is described by Delorme, Ordaz and Quiroz in [189]. We prove that (n − 1)-quasi-hamiltonicity coincides with hamiltonicity and 1-quasi-hamiltonicity is equivalent to pseudohamiltonicity.
5.1.1 Path-Contraction
In this section we consider, for technical reasons, directed multigraphs. We use a variation of the operation of contraction of a set of vertices in a directed multigraph. This operation is called path-contraction and is deﬁned as follows. Let P be an (x, y)-path in a directed multigraph D = (V, A). Then D//P stands for the directed multigraph with vertex set V (D//P ) = V ∪ {z} − V (P ), where z ∈/ V , and µD//P (uv) = µD(uv), µD//P (uz) = µD(ux), µD//P (zv) = µD(yv) for all distinct u, v ∈ V − V (P ). In other words, D//P is obtained from D by deleting all vertices of P and adding a new vertex z such that every arc with head x (tail y) and tail (head) in V − V (P ) becomes an arc with head (tail) z and the same tail (head). Observe that a path-contraction in a digraph results in a digraph (no parallel arcs arise). We will often consider path-contractions of paths of length one, i.e. arcs e. Clearly, a directed multigraph D has a k-cycle (k ≥ 3) through an arc e if and only if D//e has a cycle through z. Observe that the obvious analogue of path-contraction for undirected multigraphs does not have this nice property which is of use in this section. The diﬀerence between (ordinary) contraction (which is also called set-contraction) and path-contraction is reﬂected in Figure 5.1.
1 H¨aggkvist [387] posed a problem to ﬁnd classes of digraphs for which strong connectivity and the existence of a cycle factor are suﬃcient for hamiltonicity. In this chapter we consider some classes with this property.

230 5. Hamiltonicity and Related Problems
a

bd

xu

vy

a

22

b2

z

3

c D
d

a b zd

c D/{x, u, v, y}

c D//P, P = xuvy

Figure 5.1 The two diﬀerent kinds of contraction, set-contraction and pathcontraction. The integers 2 and 3 indicate the number of corresponding parallel arcs.

As for set-contraction, for vertex-disjoint paths P1, P2, . . . , Pt in D, the path-contraction D//{P1, . . . , Pt} is deﬁned as the directed multigraph (. . . ((D//P1)//P2) . . .)//Pt; clearly, the result does not depend on the order of P1, P2, . . . , Pt.
5.1.2 Quasi-Hamiltonicity
The results in the remainder of this section are due to Gutin and Yeo. Let D = (V, A) be a directed multigraph. Let QH1(D) = (V, A1) be the directed multigraph with arc set
A1 = {e ∈ A : e is contained in a cycle factor of D}.
For k ≥ 2, QHk(D) = (V, Ak) is the directed multigraph with arc set Ak = {e ∈ A : QHk−1(D//e) is strong}. For k ≥ 1, a directed multigraph D is k-quasi-hamiltonian, if QHk(D) is strong. We assume (by deﬁnition) that every directed multigraph is 0-quasi-hamiltonian. The quasi-hamiltonicity number of a directed multigraph D of order n, qhn(D), is the maximum integer k(< n) such that D is k-quasi-hamiltonian.
Figure 5.2 illustrates the notion of quasi-hamiltonicity. The directed multigraph H is 0-quasi-hamiltonian, but not 1-quasi-hamiltonian (QH1(H) = H − {(3, 4), (4, 3)} is not strong). Hence, qhn(H) = 0. The directed multigraph D is 1-quasi-hamiltonian as QH1(D) = D is strong (every arc of D

5.1 Necessary Conditions for Hamiltonicity of Digraphs 231
belongs to a cycle factor of D). However, D is not 2-quasi-hamiltonian since QH2(D) is not strong (indeed, QH1(D//(3, 4)) = QH1(L) is not strong). Thus, qhn(D) = 1.

1

21

21

2

33 44

34

6 H

5

65 D
Figure 5.2 Digraphs.

6 L

5

We start with some basic facts on k-quasi-hamiltonicity.
Proposition 5.1.1 [379] Let D be a directed multigraph of order n(≥ 2) and let k ∈ {2, 3, . . . , n − 1}. Then A(QHk(D)) ⊆ A(QHk−1(D)). In particular, if D is k-quasi-hamiltonian, it is (k − 1)-quasi-hamiltonian.
Proof: We prove the claim by induction on k. Let e ∈ A(QH2(D)). Thus, QH1(D//e) is strong which, in particular, means that D//e has a cycle factor. Hence, e ∈ A(QH1(D)). Let now k ≥ 3 and let e ∈ A(QHk(D)). Then, QHk−1(D//e) is strong. By the induction hypothesis, QHk−2(D//e) is also strong. Hence, e ∈ A(QHk−1(D)).
Theorem 5.1.2 [379] A directed multigraph is hamiltonian if and only if it is (n − 1)-quasi-hamiltonian.
Proof: Clearly every hamiltonian directed multigraph of order 2 is 1-quasihamiltonian. Now assume that all hamiltonian directed multigraphs of order n − 1 are (n − 2)-quasi-hamiltonian, and let D be a hamiltonian digraph of order n. Whenever we contract an arc belonging to a hamiltonian cycle we obtain a hamiltonian digraph of order n − 1, which therefore is (n − 2)-quasihamiltonian. Hence, every arc on a Hamilton cycle lies in QHn−1(D), which implies that QHn−1(D) is strong, i.e. D is (n − 1)-quasi-hamiltonian. Thus, the ‘only if’ part is proved.
We prove the ‘if’ part. Let D be a directed multigraph, such that QHn−1(D) is strong. Let e1 be an arc in QHn−1(D). Since QHn−2(D//e1) is strong there exists an arc e2 in QHn−2(D//e1). Since QHn−3((D//e1)//e2)

232 5. Hamiltonicity and Related Problems
is strong there exists an arc e3 in QHn−3((D/e1)//e2). Continuing this procedure we obtain arcs e1, e2, . . . , en−2, such that the directed multigraph QH1((((D//e1)//e2) . . .)//en−2) is strong. Let
D = (((D//e1)//e2) . . .)//en−2,
and observe that, since QH1(D ) is strong and D has order 2, D must be hamiltonian. By inserting the arcs e1, e2, . . . , en−2 into a Hamilton cycle in D , we obtain a Hamilton cycle in D.
We leave the proof of the following theorem as a non-trivial exercise (Exercise 5.1).
Theorem 5.1.3 [379] For every k ≥ 0, there exists a digraph D such that qhn(D) = k < n.
5.1.3 Pseudo-Hamiltonicity and 1-Quasi-Hamiltonicity
For a positive integer h, a sequence of vertices Q = v1v2 . . . vhnv1 in a directed multigraph D of order n is an h-pseudo-hamiltonian walk if every vertex of D appears h times in the sequence v1v2 . . . vhn and vivi+1 ∈ A(D) for every i = 1, 2, . . . , hn (vhn+1 = v1). A directed multigraph D possessing such a sequence is called h-pseudo-hamiltonian and the minimum h for which D is h-pseudo-hamiltonian is the pseudo-hamiltonicity number ph(D) of D. If D has no h-pseudo-hamiltonian walk for any positive integer h, then ph(D) = ∞. A directed multigraph D is pseudo-hamiltonian if ph(D) < ∞.
For example, in Figure 5.2, the digraph D is 2-pseudo-hamiltonian: 1212345656431 is a 2-pseudo-hamiltonian walk of D. This digraph is not 1-pseudo-hamiltonian as D is not hamiltonian. Thus, ph(D) = 2. It is not diﬃcult to see that the digraph H in Figure 5.2 is not pseudo-hamiltonian. We have already seen that D is 1-quasi-hamiltonian, but H is not. The above conclusions on pseudo-hamiltonicity of D and H can actually be obtained from Theorem 5.1.5.
Lemma 5.1.4 follows from the fact that every regular directed multigraph has a cycle factor (see Exercise 3.70), which implies that every h-regular directed multigraph can be decomposed into h cycle factors.
Lemma 5.1.4 Every arc of a regular directed multigraph is included in a cycle factor.
Theorem 5.1.5 [379] A directed multigraph is pseudo-hamiltonian if and only if it is 1-quasi-hamiltonian.

5.1 Necessary Conditions for Hamiltonicity of Digraphs 233
Proof: Let D be a pseudo-hamiltonian directed multigraph, let Q be an h-pseudo-hamiltonian walk in D, and let A(Q) = (v1v2, v2v3, . . . , vhn−1vhn, vhnv1) be the sequence of arcs in Q. Construct a new directed multigraph H(D, Q) from D by replacing, for every pair x, y with µD(xy) > 0, all arcs from x to y in D by t(≥ 0) parallel arcs from x to y, where t is the number of appearances of xy in A(Q). By the deﬁnition of an h-pseudo-hamiltonian walk, H(D, Q) is an h-regular directed multigraph. Thus, by Lemma 5.1.4, every arc xy in H(D, Q) is in a cycle factor. Therefore, µH(D,Q)(xy) > 0 implies µQH1(D)(xy) > 0. Since H(D, Q) is strong, we obtain that QH1(D) is also strong, i.e. D is 1-quasi-hamiltonian.
Now let D be a 1-quasi-hamiltonian directed multigraph, i.e. QH1(D) is strong. For each arc e in QH1(D) let Fe be a cycle factor in D including e. Let D = ∪e∈A(QH1(D))Fe. As the union of cycle factors, D is regular. Since QH1(D) is strong, D is also strong. Therefore, D has a eulerian trail, which corresponds to a pseudo-hamiltonian walk in D.
The following theorem provides a sharp upper bound for the pseudohamiltonicity number of a digraph.
Theorem 5.1.6 [379] For a pseudo-hamiltonian digraph D, ph(D) ≤ (n − 1)/2. For every integer n ≥ 3, there exists a digraph Hn of order n such that ph(Hn) = (n − 1)/2 .
Proof: Exercise 5.2.
5.1.4 Algorithms for Pseudo- and Quasi-Hamiltonicity
It is easy to check whether a digraph is 1-quasi-hamiltonian (i.e., by Theorem 5.1.5 is pseudo-hamiltonian). Indeed, checking whether QH1(D) is strong can be done in time O(n + m) (see Section 4.4). Hence, it suﬃces to show how to verify for each arc xy if this arc is on some cycle factor. We can merely dr3e.i1gp1rlaa.7cp.ehTxhhyausbs,yawaceypcoalbetthfaaixcntzotyhr,.ewTthohetirsaelctzainmisbeneoofdtoOinn(e√Dinn,mati2nm)d.eTcOhhe(ics√kcnowmmh)eptlbheyxeirCtytohrbeoolnluaenrwdy was improved by Gutin and Yeo [379] as follows.
Theorem 5.1.7 We can check whether a directed multigraph D is pseudohamiltonian in O(nm) time.
Proof: Exercise 5.3.
The following theorem implies that one can check k-quasi-hamiltonicity for a constant k in polynomial time.
Theorem 5.1.8 [379] In O(nmk) time, one can check if a directed multigraph is k-quasi-hamiltonian.

234 5. Hamiltonicity and Related Problems
Proof: In this proof, we describe an algorithm A that, in time T (k), checks whether a directed multigraph D is k-quasi-hamiltonian. We will show that T (k) = O(nmk).
If k = 1, the algorithm A uses the algorithm B of Theorem 5.1.7. Thus, T (1) = O(nm). If k ≥ 2 then, for each arc e in D, A veriﬁes whether D//e is (k − 1)-quasi-hamiltonian. The algorithm A forms QHk(D) from all arcs e such that D//e is (k − 1)-quasi-hamiltonian. Finally, A checks whether QHk(D) is strong (in time O(m)). This implies that, for k ≥ 2,
T (k) ≤ mT (k − 1) + O(m).
Since T (1) = O(nm), we obtain that T (k) = O(nmk).
5.2 Path Covering Number
The following attainable lower bound for the path covering number of a digraph D is quite trivial: pcc(D) ≤ pc(D). We will see later in this chapter that pcc(D) = pc(D) for acyclic digraphs and semicomplete multipartite digraphs D. The aim of this short section is to obtain a less trivial attainable upper bound for pc(D). This bound is of use in several applications (see, e.g., Section 5.3).
Recall that the independence number α(D) of a digraph D is the cardinality of a maximum independent set of vertices of D (a set X ⊆ V (D) is independent if no pair of vertices in X is adjacent). R´edei’s theorem (Theorem 1.4.5) can be rephrased as saying that every digraph with independence number 1 has a hamiltonian path and hence path covering number equal 1. Gallai and Milgram generalized this as follows.
Theorem 5.2.1 (Gallai-Milgram theorem) [298] For every digraph D, pc(D) ≤ α(D).
This theorem is an immediate consequence of the following lemma by Bondy [126]:
Lemma 5.2.2 Let D be a digraph and let P = P1 ∪ P2 ∪ . . . ∪ Ps be an s-path factor of D. Let i(P) (t(P)) denote the set of initial (terminal) vertices of the paths in P. Suppose that s > α(D). Then there exists an (s − 1)-path factor P of D such that i(P ) ⊂ i(P) and t(P ) ⊂ t(P).
Proof: The proof is by induction on n, the order of D. The case n = 1 holds vacuously. Let P be as described in the lemma. Let the path Pj in P be denoted by xj1xj2 . . . xjrj , j = 1, 2, . . . , s. Since s > α(D) the subdigraph D i(P) must contain an arc xk1xj1 for some k = j (1 ≤ k, j ≤ s).
If rk = 1, then we can replace Pk, Pj by the path xk1Pj and obtain the desired path factor. So suppose that rk > 1. Now consider D∗ = D − xk1 and

5.3 Path Factors of Acyclic Digraphs with Applications 235
the path factor P∗ which we obtain from P by deleting xk1 from the path Pk. Clearly α(D∗) ≤ α(D) and we have i(P∗) = i(P) − xk1 + xk2, t(P∗) = t(P). Thus it follows by the induction hypothesis that D∗ has an (s−1)-path factor Q such that t(Q) ⊂ t(P∗), i(Q) ⊂ i(P∗).
If xk2 ∈ i(Q), let Qp be the path of Q whose initial vertex is xk2. Replacing Qp with xk1Qp we obtain a path factor in D with the desired properties. So suppose that xk2 is not an initial vertex of any of the paths in Q. Then xj1 must belong to i(Q) and we obtain the desired path factor by replacing the path Qr of Q which starts at xj1 by the path xk1Qr.
The following theorem due to Erd˝os and Szekeres [596] follows easily from Theorem 5.2.1.
Theorem 5.2.3 Let n, p, q be positive integers with n > pq, and let I = (i1, i2, . . . , in) be a sequence of n distinct integers. Then there exists either a decreasing subsequence of I with more than p integers or an increasing subsequence of I with more than q integers.
Proof: Let D = (V, A) be the digraph with V = {i1, i2, . . . , in} and A = {imik : m < k and im < ik}. Observe the obvious correspondence between independent sets of D and decreasing subsequences of I (respectively, paths of D and increasing subsequences of I). Let F = P1 ∪ . . . ∪ Ps be a minimal path factor of D. By Theorem 5.2.1, s ≤ α(D). Hence, α(D)·maxsj=1 |Pj| ≥ n > pq. Thus, either α(D) > p, i.e., there exists a decreasing subsequence with α(D) > p integers, or maxsj=1 |Pj| > q, i.e., there exists an increasing subsequence with more than q integers.
Very recently, the following improvement on Theorem 5.2.1 in the case of strong digraphs was proved by Thomass´e. This was originally conjectured by Las Vergnas (see [107]).
Theorem 5.2.4 [695] If a digraph D is strong, then pc(D) ≤ max{α(D) − 1, 1}.
Las Vergnas (see [106]) proved the following generalization of Theorem 5.2.1.
Theorem 5.2.5 Every digraph D of ﬁnite out-radius has an out-branching with at most α(D) vertices of out-degree zero.
Theorem 5.2.5 implies Theorem 5.2.1 (Exercise 5.7).
5.3 Path Factors of Acyclic Digraphs with Applications
For acyclic digraphs it turns out that the minimum path factor problem can be solved quite eﬃciently. This is important since this problem has many practical applications. One such example is as follows.

236 5. Hamiltonicity and Related Problems

A news agency wishes to cover a set of events E1, E2, . . . , En which take place within the coming week starting at a prescribed time Ti. For each event Ei its duration time ti and geographical site Oi is known. The news agency wishes to cover each of these events by having one reporter present for the full duration of the event. At the same time it wishes to use as few reporters as possible. Assuming that the travel time tij from Oi to Oj is known for each 1 ≤ i, j ≤ n, we can model this problem as follows. Form a digraph D = (V, A) by letting V = {v1, v2, . . . , vn} and for every choice of i = j put an arc from vi to vj if Tj ≥ Ti + ti + tij. It is easy to see that D is acyclic. Furthermore, if the events can be covered by k reporters then D has a k-path factor (just follow the routes travelled by the reporters). It is also easy to see that the converse also holds. Hence having an algorithm for the minimum path factor problem for acyclic digraphs will provide a solution to this and a large number of similar problems (such as airline and tanker scheduling, see Exercise 5.8).
Clearly, pc(D) = pcc(D) for every acyclic digraph D. Using ﬂows in networks, we can eﬀectively ﬁnd a pcc(D)-path-cycle factor in any digraph D (see Exercises 3.59 and 3.7). Since a k-path-cycle factor in an acyclic digraph has no cycles, this implies that the minimum path factor problem for acyclic digraphs is easy (at least from an algorithmic point of view).

Theorem solvable in

5ti.m3.e1OF(o√rnamc)y.clic

digraphs

the

minimum

path

factor

problem

is

Another application of the path covering number of acyclic digraphs is for partial orders. A partial order consists of a set X and a binary relation ‘ ≺ which is transitive (that is, x ≺ y, y ≺ z implies x ≺ z). Let P = (X, ≺) be a partial order. Two elements x, y ∈ X are comparable if either x ≺ y or y ≺ x holds. Otherwise x and y are incomparable. A chain in P is a totally ordered subset Y of X, that is, all elements in Y are pairwise comparable. An antichain on P is a subset Z of X, no two elements of which are comparable. Dilworth proved the following famous min-max result relating chains to antichains:
Theorem 5.3.2 (Dilworth’s theorem) [193] Let P = (X, ≺) be a partial order. Then the minimum number of chains needed to cover X equals the maximum number of elements in an antichain.
Proof: Given P = (X, ≺), let D = (X, A) be the digraph such that xy ∈ A for x = y ∈ X if and only if x ≺ y. Clearly, D is transitive. Furthermore, a path (an independent set) in D corresponds to a chain (antichain) in P . We need to show that pc(D) = α(D). By Theorem 5.2.1, pc(D) ≤ α(D). Let F = P1 ∪ P2 ∪ . . . ∪ Pk be a minimum path factor of D. By transitivity of D, each V (Pi) induces a complete subgraph in U G(D). Hence, α(D) = α(U G(D)) ≤ k = pc(D). Thus, pc(D) = α(D).

5.4 Hamilton Paths and Cycles in Path-Mergeable Digraphs 237
The last theorem can obviously be reformulated as follows: α(D) = pc(D) for every transitive oriented graph D. We conclude this section with an extension of the analogous result to extended semicomplete digraphs. Lemma 5.3.3 will be used in Section 6.11.
Lemma 5.3.3 Let D be an acyclic extended semicomplete digraph with α(D) = k, then the following holds:
(a) pc(D) = k. (b) One can obtain a minimum path factor of D as follows: choose a longest
path P in D, remove V (P ) and continue recursively. (c) One can ﬁnd a minimum path factor using the greedy algorithm in (b) in
total time O(n log n) (using the adjacency matrix).
Proof: By Theorem 5.2.1 pc(D) ≤ k. On the other hand no path can contain two vertices from the same independent set as that would imply that D contains a cycle. Hence pc(D) = k. To prove (b), let P be a longest path of D. By the argument above α(D − P ) ≥ k − 1. On the other hand D can be written as D = S[Ka1 , Ka2 , . . . , Kas ], where S is a semicomplete digraph and s = |V (S)|. By R´edei’s theorem (Theorem 1.4.5), S has a hamiltonian path P . In D this path corresponds to a path Q which contains precisely one vertex from each maximal independent set. Hence Q is a longest path in D by the remark above and we have α(D − Q) = k − 1. Now the second claim follows by induction on k. The third claim follows from the description of procedure MergeHamPathTour in Section 1.9.1, assuming that we have an adjacency matrix representation of D. Note that we delete the paths as we ﬁnd them and hence the total complexity is still O(n log n).
5.4 Hamilton Paths and Cycles in Path-Mergeable Digraphs
The class of path-mergeable digraphs was introduced in Section 4.9, where some of its properties were studied. In this section, we prove a characterization of hamiltonian path-mergeable digraphs due to Bang-Jensen [50].
We begin with a simple lemma which forms the basis for the proof of Theorem 5.4.2. For a cycle C, a C-bypass is a path of length at least two with both end-vertices on C and no other vertices on C.
Lemma 5.4.1 [50] Let D be a path-mergeable digraph and let C be a cycle in D. If D has a C-bypass P , then there exists a cycle in D containing precisely the vertices V (C) ∪ V (P ).
Proof: Let P be an (x, y)-path. Then the paths P and C[x, y] can be merged into one (x, y)-path R, which together with C[y, x] forms the desired cycle.

238 5. Hamiltonicity and Related Problems
Theorem 5.4.2 (Bang-Jensen) [50] A path-mergeable digraph D of order n ≥ 2 is hamiltonian if and only if D is strong and U G(D) is 2-connected.
Proof: ‘Only if’ is obvious; we prove ‘if’. Suppose that D is strong, U G(D) is 2-connected and D is not hamiltonian. Let C = u1u2 . . . upu1 be a longest cycle in D. Observe that, by Lemma 5.4.1, there is no C-bypass. For each i ∈ {1, . . . , p} let Xi (respectively Yi) be the set of vertices of D − V (C) that can be reached from ui (respectively, from which ui can be reached) by a path in D − (V (C) − ui). Since D is strong,
X1 ∪ . . . ∪ Xp = Y1 ∪ . . . ∪ Yp = V (D) − V (C).
Since there is no C-bypass, every path starting at a vertex in Xi and ending at a vertex in C must end at ui. Thus, Xi ⊆ Yi. Similarly, Yi ⊆ Xi and, hence, Xi = Yi. Since there is no C-bypass, the sets Xi are disjoint. Since we assumed that D is not hamiltonian, at least one of these sets, say X1, is non-empty. Since U G(D) is 2-connected, there is an arc with one end-vertex in X1 and the other in V (D) − (X1 ∪ u1), and no matter what its orientation is, this implies that there is a C-bypass, a contradiction.
Using the proof of this theorem, Lemma 5.4.1 and Proposition 4.9.3, it is not diﬃcult to show the following (Exercise 5.10):
Corollary 5.4.3 [50] There is an O(nm)-algorithm to decide whether a given strong path-mergeable digraph has a hamiltonian cycle and ﬁnd one if it exists.
Clearly, Theorem 5.4.2 and Corollary 5.4.3 imply an obvious characterization of longest cycles in path-mergeable digraphs and a polynomial algorithm to ﬁnd a longest cycle. Neither a characterization nor the complexity of the hamiltonian path problem for path-mergeable digraphs is currently known. The following problem was posed by Bang-Jensen and Gutin:
Problem 5.4.4 [65] Characterize traceable path-mergeable digraphs. Is there a polynomial algorithm to decide whether a path-mergeable digraph is traceable?
For a related result, see Proposition 6.3.2. This result may be considered as a characterization of traceable path-mergeable digraphs. However, this characterization seems of not much value from the complexity point of view.
5.5 Hamilton Paths and Cycles in Locally In-Semicomplete Digraphs
According to Proposition 4.10.1, every locally in-semicomplete digraph is path-mergeable. By Exercise 5.12, every strong locally in-semicomplete di-

5.5 Hamilton Paths and Cycles in Locally In-Semicomplete Digraphs 239
graph has a 2-connected underlying graph. Thus, Theorem 5.4.2 implies the following characterization of hamiltonian locally in-semicomplete digraphs2.
Theorem 5.5.1 (Bang-Jensen, Huang and Prisner) [81] A locally insemicomplete digraph D of order n ≥ 2 is hamiltonian if and only if D is strong.
This theorem generalizes Camion’s theorem on strong tournaments (Theorem 1.5.2). Bang-Jensen and Hell [75] showed that for the class of locally in-semicomplete digraphs Corollary 5.4.3 can be improved to the following result.
Theorem 5.5.2 [75] There is an O(m + n log n)-algorithm for ﬁnding a hamiltonian cycle in a strong locally in-semicomplete digraph.
In Section 5.4, we remarked that the Hamilton path problem for pathmergeable digraphs is unsolved so far. For a subclass of this class, locally in-semicomplete digraphs, an elegant characterization, due to Bang-Jensen, Huang and Prisner, exists.
Theorem 5.5.3 [81] A locally in-semicomplete digraph is traceable if and only if it contains an in-branching.
Proof: Since a Hamilton path is an in-branching, it suﬃces to show that every locally in-semicomplete digraph D with an in-branching T is traceable. We prove this claim by induction on the number b of vertices of T of in-degree zero.
For b = 1, the claim is trivial. Let b ≥ 2. Consider a pair of vertices x, y of in-degree zero in T . By the deﬁnition of an in-branching there is a vertex z in T such that T contains both (x, z)-path P and (y, z)-path Q. Assume that the only common vertex of P and Q is z.
By Proposition 4.10.2, there is a path R in D that starts at x or y and terminates at z and V (R) = V (P ) ∪ V (Q). Using this path, we may replace T with an in-branching with b − 1 vertices of in-degree zero and apply the induction hypothesis of the claim.
Clearly, Theorem 5.5.3 implies that a locally out-semicomplete digraph is traceable if and only if it contains an out-branching. By Proposition 1.6.1, we have the following:
Corollary 5.5.4 A locally in-semicomplete digraph is traceable if and only if it contains only one terminal strong component.
2 Actually, this characterization, as well as the other results of this section, were originally proved only for oriented graphs. However, as can be seen from Exercises 4.27 and 4.28, the results for oriented graphs immediately imply the results of this section.

240 5. Hamiltonicity and Related Problems
Using Corollary 5.5.4, Bang-Jensen and Hell [75] proved the following:
Theorem 5.5.5 A longest path in a locally in-semicomplete digraph D can be found in time O(m + n log n).
Corollary 5.5.4 and Lemma 4.10.3 imply the following:
Corollary 5.5.6 (Bang-Jensen) [44] A locally semicomplete digraph has a hamiltonian path if and only if it is connected.
Notice that there is a nice direct proof of this corollary (using Proposition 4.10.2), which is analogous to the classical proof of R´edei’s theorem displayed in procedure HamPathTour in Section 1.9.1. See Exercise 5.14.
5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs
In Subsection 5.6.1 we formulate certain suﬃcient degree-constrained conditions for hamiltonicity of digraphs. Several of these conditions do not follow from the others, i.e. there are certain digraphs that can be proved to be hamiltonian using some condition but none of the others. (The reader will be asked to show this in the exercises.)
In Subsection 5.6.3 we provide proofs to some of these conditions to illustrate the power of a recently introduced approach, which we call the multiinsertion technique. (This technique can be traced back to Ainouche [9] for undirected graphs and to Bang-Jensen [48] for digraphs, see also the paper [68] by Bang-Jensen, Gutin and Huang). The technique itself is introduced in Subsection 5.6.2. The strength of the multi-insertion technique lies in the fact that we can prove the existence of a hamiltonian cycle without actually exhibiting it. Moreover, our hamiltonian cycles may have quite a complicated structure. For example, compare the hamiltonian cycles in the proof of Theorem 5.6.1 to the hamiltonian paths constructed in the inductive proof of Theorem 1.4.5. The multi-insertion technique is used in some other parts of this book, see e.g. Section 5.7.
Let x, y be a pair of distinct vertices in a digraph D. The pair {x, y} is dominated by a vertex z if z→x and z→y; in this case we say that the pair {x, y} is dominated. Likewise, {x, y} dominates a vertex z if x→z and y→z; we call the pair {x, y} dominating.
5.6.1 Suﬃcient Conditions
Considering the converse digraph and using Theorem 5.5.1, we see that a locally out-semicomplete digraph is hamiltonian if and only if it is strong. This can be generalized as follows. We prove Theorem 5.6.1 in Subsection 5.6.3.

5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs 241
Theorem 5.6.1 (Bang-Jensen, Gutin and Li) [69] Let D be a strong digraph of order n ≥ 2. Suppose that, for every dominated pair of non-adjacent vertices {x, y}, either d(x) ≥ n and d(y) ≥ n−1 or d(x) ≥ n−1 and d(y) ≥ n. Then D is hamiltonian.
The following example shows the sharpness of the conditions of Theorem 5.6.1 (and Theorem 5.6.5), see Figure 5.3. Let G and H be two disjoint transitive tournaments such that |V (G)| ≥ 2, |V (H)| ≥ 2. Let w be the vertex of out-degree 0 in G and w the vertex of in-degree 0 in H. Form a new digraph by identifying w and w to one vertex z. Add four new vertices x, y, u, v and the arcs {xv, yv, ux, uy} ∪ {xz, zx, yz, zy} ∪ {rg : r ∈ {x, y, v}, g ∈ V (G) − w} ∪ {hs : h ∈ V (H) − w , s ∈ {u, x, y}}. Denote the resulting digraph by Qn, where n is the order of Qn. It is easy to check that Qn is strong and non-hamiltonian (Exercise 5.17). Also x, y is the only pair of non-adjacent vertices which is dominating (dominated, respectively). An easy computation shows that
d(x) = d(y) = n − 1 = d+(x) + d−(y) = d−(x) + d+(y).

v

yx

u

G−w

z

H −w

Figure 5.3 The digraph Qn. The two unoriented edges denote 2-cycles.

Combining Theorem 5.6.1 with Proposition 5.0.3 one can obtain suﬃcient conditions for a digraph to be traceable (see also Exercise 5.16). Theorem 5.6.1 also has the following immediate corollaries.
Corollary 5.6.2 (Ghouila-Houri) [315] If the degree of every vertex in a strong digraph D of order n is at least n, then D is hamiltonian.
Corollary 5.6.3 Let D be a digraph of order n. If the minimum semi-degree of D, δ0(D) ≥ n/2, then D is hamiltonian.
It turns out that even a slight relaxation of Corollary 5.6.3 brings in nonhamiltonian digraphs. In particular, Darbinyan [177] proved the following:

242 5. Hamiltonicity and Related Problems

Proposition 5.6.4 Let D be a digraph of even order n ≥ 4 such that the degree of every vertex of D is at least n − 1 and δ0(D) ≥ n/2 − 1. Then
either D is hamiltonian or D belongs to a non-empty ﬁnite family of non-
hamiltonian digraphs.

By Theorem 5.5.1, a locally semicomplete digraph is hamiltonian if and only if it is strong [44]. This result was generalized by Bang-Jensen, Gutin and Li [69] as follows.
Theorem 5.6.5 Let D be a strong digraph of order n. Suppose that D satisﬁes min{d+(x) + d−(y), d−(x) + d+(y)} ≥ n for every pair of dominating non-adjacent and every pair of dominated non-adjacent vertices {x, y}. Then D is hamiltonian.

We prove this theorem in Subsection 5.6.3. Theorem 5.6.5 implies Corollary 5.6.3 as well as the following theorem by Woodall [739]:
Corollary 5.6.6 Let D be a digraph of order n ≥ 2. If d+(x) + d−(y) ≥ n for all pairs of vertices x and y such that there is no arc from x to y, then D is hamiltonian.

The following theorem generalizes Corollaries 5.6.2, 5.6.3 and 5.6.6. The

inequality

of

Theorem

5.6.7

is

best

possible:

Consider

↔
K n−2

(n

≥

5)

and

ﬁx

↔

a vertex u in this digraph. Construct the digraph Hn by adding to Kn−2 a

pair

v, w

of

vertices

such

that

both

v

and

w

dominate

every

vertex

in

↔
K n−2

and are dominated by only u, see Figure 5.4. It is easy to see that Hn is

strong and non-hamiltonian (Hn − u is not traceable). However, v, w is the

only pair of non-adjacent vertices in Hn and d(v) + d(w) = 2n − 2.

wv

u

↔
K n−3
Figure 5.4 The digraph Hn.
Theorem 5.6.7 (Meyniel’s theorem) [564] Let D be a strong digraph of order n ≥ 2. If d(x) + d(y) ≥ 2n − 1 for all pairs of non-adjacent vertices in D, then D is hamiltonian.

5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs 243

Short proofs of Meyniel’s theorem were given by Overbeck-Larisch [597] and Bondy and Thomassen [128]. The second proof is slightly simpler than the ﬁrst one and can also be found in the book [735] by West (see Theorem 8.4.38). Using Proposition 5.0.3 one can easily see that replacing 2n − 1 by 2n − 3 in Meyniel’s theorem we obtain suﬃcient conditions for traceability. (Note that for traceability we do not require strong connectivity.) Darbinyan [180] proved that by weakening the degree condition in Meyniel’s theorem only by one, we obtain a stronger result:
Theorem 5.6.8 [180] Let D be a digraph of order n ≥ 3. If d(x) + d(y) ≥ 2n − 2 for all pairs of non-adjacent vertices in D, then D contains a hamiltonian path in which the initial vertex dominates the terminal vertex.
Berman and Liu [111] extended Theorem 5.6.7 as formulated below. For a digraph D of order n, a set M ⊆ V (D) is Meyniel if d(x) + d(y) ≥ 2n − 1 for every pair x, y of non-adjacent vertices in M . The proof of Theorem 5.6.9 in [111] is based on the multi-insertion technique.
Theorem 5.6.9 [111] Let M be a Meyniel set of vertices of a strong digraph D of order n ≥ 2. Then D has a cycle containing all vertices of M .

Another extension of Meyniel’s theorem was given by Heydemann [428].

Theorem 5.6.10 [428] Let h be a non-negative integer and let D be a strong

digraph of order n ≥ 2 such that, for every pair of non-adjacent vertices x

and y, we have d(x) + d(y) ≥ 2n − 2h + 1. Then D contains a cycle of length

greater than or equal to

n−1 h+1

+ 1.

Manoussakis [547] proved the following suﬃcient condition that involves triples rather than pairs of vertices. Notice that Theorem 5.6.11 does not imply either of Theorems 5.6.1, 5.6.5 and 5.6.7 [69].

Theorem 5.6.11 [547] Suppose that a strong digraph D of order n ≥ 2 satisﬁes the following conditions: for every triple x, y, z ∈ V (D) such that x and y are non-adjacent
(a) If there is no arc from x to z, then d(x) + d(y) + d+(x) + d−(z) ≥ 3n − 2. (b) If there is no arc from z to x, then d(x) + d(y) + d−(x) + d+(z) ≥ 3n − 2.
Then D is hamiltonian.

The next theorem resembles both Theorem 5.6.5 and Theorem 5.6.7. How-
ever, Theorem 5.6.12 does not imply any of these theorems. The sharpness of
the inequality of Theorem 5.6.12 can be seen from the digraph Hn introduced before Theorem 5.6.7.

244 5. Hamiltonicity and Related Problems

Theorem 5.6.12 (Zhao and Meng) [758] Let D be a strong digraph of order n ≥ 2. If
d+(x) + d+(y) + d−(u) + d−(v) ≥ 2n − 1
for every pair x, y of dominating vertices and every pair u, v of dominated vertices, then D is hamiltonian.

Theorems 5.6.5 and 5.6.12 suggest that the following conjecture by BangJensen, Gutin and Li, may be true.
Conjecture 5.6.13 [69] Let D be a strong digraph of order n ≥ 2. Suppose that d(x)+d(y) ≥ 2n−1 for every pair of dominating non-adjacent and every pair of dominated non-adjacent vertices {x, y}. Then D is hamiltonian.

Bang-Jensen, Guo and Yeo [57] proved that, if we replace the degree

condition

d(x) + d(y)

≥

2n − 1

with

d(x) + d(y)

≥

5 2

n

−

4

in

Conjecture

5.6.13, then D is hamiltonian. They also provided additional support for

Conjecture 5.6.13 by showing that every digraph satisfying the condition of

Conjecture 5.6.13 has a cycle factor.

Perhaps Conjecture 5.6.13 can even be generalized to the following which

was conjectured by Bang-Jensen, Gutin and Li:

Conjecture 5.6.14 [69] Let D be a strong digraph of order n ≥ 2. Suppose that, for every pair of dominated non-adjacent vertices {x, y}, d(x) + d(y) ≥ 2n − 1. Then D is hamiltonian.

↔
Let F be the digraph obtained from the complete digraph Kn−3 by adding three new vertices {x, y, z} and the following arcs {xy, yx, yz, zy, zx}∪ {xu, ux, yu : u ∈ V (K↔n−3)}, see Figure 5.5. Clearly F is strongly connected and the underlying undirected graph of F is 2-connected. However, F is not
hamiltonian as all hamiltonian paths in F − x start at z, but x does not dom-
inate z. The only pairs of non-adjacent vertices in D are z and any vertex
↔
u ∈ V (Kn−3) and here we have d(z) + d(u) = 2n − 2. Thus both conjectures above would be the best possible.
One of the oldest conjectures in the area of hamiltonian digraphs is the
following conjecture by Nash-Williams.

Conjecture 5.6.15 [586, 587] Let D be a digraph of order n ≥ 3 satisfying the following conditions:
(i) For every positive integer k less than (n − 1)/2, the number of vertices of out-degree less than or equal to k is less than k.
(ii) The number of vertices of out-degree less than or equal to (n − 1)/2 is less than or equal to (n − 1)/2.

5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs z

245

xy

↔
K n−3

Figure 5.5 The digraph F .

(iii) For every positive integer k less than (n − 1)/2, the number of vertices of in-degree less than or equal to k is less than k.
(iv) The number of vertices of in-degree less than or equal to (n − 1)/2 is less than or equal to (n − 1)/2.
Then D is hamiltonian.

Conjecture 5.6.15 seems to be very diﬃcult (see comments by Nash-

Williams in [587, 588]). This conjecture was inspired by the corresponding

theorem by P´osa [610] on undirected graphs. P´osa’s result implies that the as-

sertion of this conjecture is true at least for symmetric digraphs, i.e. digraphs

D such that xy ∈ A(D) implies yx ∈ A(D).

One may also try to obtain digraph analogues of various other suﬃcient

degree conditions for graphs, such as Chv´atal’s theorem [159], which asserts

that, if the degree sequence d1 ≤ d2 ≤ . . . ≤ dn of an undirected graph

satisﬁes

the

condition

dk

≤

k

<

n 2

⇒dn−k

≥

n−k

for

each

k,

then

the

graph

is hamiltonian. Similarly, one may ask whether every strong digraph whose

non-decreasing degree sequence d1 ≤ d2 ≤ . . . ≤ dn satisﬁes the following condition is hamiltonian:

dk ≤ 2k < n⇒dn−k ≥ 2(n − k), k = 1, 2, . . . , n − 1.

(5.1)

For a digraph D we can obtain the non-decreasing out-degree and indegree sequences: d+1 ≤ d+2 ≤ . . . ≤ d+n and d−1 ≤ d−2 ≤ . . . ≤ d−n (orderings of vertices of D in these two sequences are usually diﬀerent). Using the two sequences, one may suggest conditions similar to (5.1):

d+k

≤

k

<

n 2

⇒

d+n−k

≥

n−k

and

(5.2)

246 5. Hamiltonicity and Related Problems

d−k

≤k<

n 2

⇒ d−n−k

≥ n − k,

1≤k

≤ (n − 1)/2.

It is not diﬃcult to construct an inﬁnite family of non-hamiltonian strong digraphs that satisfy both (5.1) and (5.2) (Exercise 5.25). However, if we ‘mix’ the out-degrees with the in-degrees in (5.2), we obtain the following conjecture due to Nash-Williams:

Conjecture 5.6.16 [588] If the non-decreasing out-degree and in-degree sequences of a strong digraph D satisfy the conditions

d+k

≤

k

<

n 2

⇒

d−n−k

≥

n−

k

and

d−k

≤k<

n 2

⇒ d+n−k ≥ n − k,

1 ≤ k ≤ (n − 1)/2,

then D is hamiltonian.

One may expect that for oriented graphs (i.e., digraphs with no 2-cycles)
a result much stronger than Corollary 5.6.3 holds. H¨aggkvist [387] proved
the following theorem and made a much stronger conjecture. Notice that H¨aggkvist [387] constructed non-hamiltonian oriented graphs D with δ0(D) ≥
n/3 (these oriented graphs do not even contain cycle factors).

Theorem 5.6.17 [387] Let D be an oriented graph of order n and let

δ0(D)

≥

(

1 2

−

2−18)n.

Then

D

is

hamiltonian.

Conjecture 5.6.18 [387] Let D be an oriented graph of order n and let δ+(D) ≥ (3n − 2)/8. Then D is hamiltonian.

Jackson conjectured that for regular oriented graphs an even stronger assertion holds.
Conjecture 5.6.19 [449] Every k-regular oriented graph of order at most 4k + 1, where k = 2, contains a Hamilton cycle.

5.6.2 The Multi-Insertion Technique
Let P = u1u2 . . . us be a path in a digraph D and let Q = v1v2 . . . vt be a path in D−V (P ). The path P can be inserted into Q if there is a subscript i ∈ {1, 2, . . . , t − 1} such that vi→u1 and us→vi+1. Indeed, in this case the path Q can be extended to a new (v1, vt)-path Q[v1, vi]P Q[vi+1, vt]. The path P can be multi-inserted into Q if there are integers i1 = 1 < i2 < . . . < im = s+1 such that, for every k = 2, 3, . . . , m, the subpath P [uik−1 , uik−1] can be inserted into Q. The sequence of subpaths P [uik−1 , uik−1], k = 2, . . . , m,

5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs 247
is a multi-insertion partition of P . Similar deﬁnitions can be given for the case when Q is a cycle.
The complexity of algorithms in this subsection is measured in terms of the number of queries to the adjacency matrix of a digraph. In this subsection we prove several simple results, which are very useful while applying the multi-insertion technique. Some of these results are used in this section, others will be applied in other parts of this book. The following lemma is a simple extension of a lemma by Bang-Jensen, Gutin and Li [69].
Lemma 5.6.20 Let P be a path in D and let Q = v1v2 . . . vt be a path (a cycle, respectively) in D −V (P ). If P can be multi-inserted into Q, then there is a (v1, vt)-path R (a cycle, respectively) in D so that V (R) = V (P ) ∪ V (Q). Given a multi-insertion partition of P , the path R can be found in time O(|V (P )||V (Q)|).
Proof: We consider only the case when Q is a path, as the other case (Q is a cycle) can be proved analogously. Let P = u1u2 . . . us. Suppose that integers i1 = 1 < i2 < . . . < im = s + 1 are such that the subpaths P [uik−1 , uik−1], k = 2, 3, . . . , m, form a multi-insertion partition of P .
We proceed by induction on m. If m = 2 then the claim is obvious, hence assume that m ≥ 3. Let xy ∈ A(Q) be such that the subpath P [ui1 , ui2−1] can be inserted between x and y on Q. Choose r as large as possible such that uir−1→y. Clearly, P [ui1 , uir−1] can be inserted into Q to give a (v1, vt)-path Q∗. Thus, if r = m we are done. Otherwise apply the induction hypothesis to the paths P [uir , us] and Q∗ (observe that by the choice of r none of the subpaths of the multi-insertion partition of P [uir , us] can be inserted between x and y in Q, and thus every such subpath can be inserted into Q∗).
If we postpone the actual construction of R till we have found a new multi-insertion partition M of P and all (distinct) pairs of vertices between which the subpaths of M can be inserted, then the complexity claim of this lemma follows easily.
The next two corollaries due to Bang-Jensen, Gutin and Huang, respectively, Yeo can easily be proved using Lemma 5.6.20; their proofs are left as an easy exercise (Exercise 5.21).
Corollary 5.6.21 [68] Let D be a digraph. Suppose that P = u1u2 . . . ur is a path in D and C is a cycle in D − P . Suppose that for each i = 1, 2, . . . , r − 1, either the arc uiui+1 or the vertex ui can be inserted into C, and, in addition, assume that ur can be inserted into C. Then D contains a cycle Z with the vertex set V (P ) ∪ V (C) and Z can be constructed in time O(|V (P )||V (C)|).
Corollary 5.6.22 [744] Let D be a digraph. Suppose that P = u1u2 . . . ur is a path in D and C is a cycle in D − P . Suppose also that for each odd index i the arc uiui+1 can be inserted into C, and if r is odd, ur can be inserted

248 5. Hamiltonicity and Related Problems
into C. Then D contains a cycle Z with the vertex set V (P ) ∪ V (C) and Z can be constructed in time O(|V (P )||V (C)|).
Corollary 5.6.23 [68] Let D be a digraph. Suppose that C is a cycle of even length in D and Q is a cycle in D − C. Suppose also that for each arc uv of C either the arc uv or the vertex u can be inserted into Q. Then D contains a cycle Z with the vertex set V (Q) ∪ V (C) and Z can be constructed in time O(|V (Q)||V (C)|).
Proof: If there is a vertex x on C that can be inserted into Q then apply Corollary 5.6.21 to C[x+, x] and Q. Otherwise, all the arcs of C can be inserted into Q and we can apply Corollary 5.6.22 to C[y+, y] and Q, where y is any vertex of C.
5.6.3 Proofs of Theorems 5.6.1 and 5.6.5
The following lemma is a slight modiﬁcation of a lemma by Bondy and Thomassen [128]; its proof is not too diﬃcult and is left as an exercise to the reader (Exercise 5.18).
Lemma 5.6.24 Let Q = v1v2 . . . vt be a path in D and let w, w be vertices of V (D) − V (Q) (possibly w = w ). If there do not exist consecutive vertices vi, vi+1 on Q such that viw, w vi+1 are arcs of D, then d−Q(w)+d+Q(w ) ≤ t+ξ, where ξ = 1 if vt→w and 0, otherwise.
In the special case when w = w above, we get the following interpretation of the statement of Lemma 5.6.24.
Lemma 5.6.25 Let Q = v1v2 . . . vt be a path in D, and let w ∈ V (D)−V (Q). If w cannot be inserted into Q, then dQ(w) ≤ t + 1. If, in addition, vt does not dominate w, then dQ(w) ≤ t.
Let C be a cycle in D. Recall that an (x, y)-path P is a C-bypass if |V (P )| ≥ 3, x = y and V (P ) ∩ V (C) = {x, y}. The length of the path C[x, y] is the gap of P with respect to C.
Proof of Theorem 5.6.1: Assume that D is non-hamiltonian and C = x1x2 . . . xmx1 is a longest cycle in D. We ﬁrst show that D contains a Cbypass. Assume D does not have one. Since D is strong, D must contain a cycle Z such that |V (Z) ∩ V (C)| = 1. Without loss of generality, we may assume that V (Z) ∩ V (C) = {x1}. Let z be the successor of x1 on Z. Since D has no C-bypass, z and x2 are non-adjacent. Since z and x2 are a dominated pair, d(z) + d(x2) ≥ 2n − 1. On the other hand, since D has no C-bypass, we have dC−x1 (z) = dZ−x1 (x2) = 0 and |({z, x2}, y) ∪ (y, {z, x2})| ≤ 2 for every y ∈ V (D) − (V (C) ∪ V (Z)). Thus, d(z) + d(x2) ≤ 2(n − 1); a contradiction.

5.6 Hamilton Cycles and Paths in Degree-Constrained Digraphs 249

Let P = u1u2 . . . us be a C-bypass (s ≥ 3). Without loss of generality, let u1 = x1, us = xγ+1, 0 < γ < m. Suppose also that the gap γ of P is minimum among the gaps of all C-bypasses.
Since C is a longest cycle of D, γ ≥ 2. Let C = C[x2, xγ], C = C[xγ+1, x1], R = D − V (C), and let xj be any vertex in C such that x1→xj. Let also xk be an arbitrary vertex in C .
We ﬁrst prove that

dC (xj) ≥ |V (C )| + 2.

(5.3)

Since C is a longest cycle and P has the minimum gap with respect to C,
u2 is not adjacent to any vertex on C , and there is no vertex y ∈ V (R)−{u2} such that either u2→y→xk or xk→y→u2. Therefore,

dC (xk) + dC (u2) ≤ 2(|V (C )| − 1) and

(5.4)

dR(xk) + dR(u2) ≤ 2(n − m − 1).

(5.5)

By the maximality of C, u2 cannot be inserted into C , so by Lemma 5.6.25,

dC (u2) ≤ |V (C )| + 1.

(5.6)

The fact that the pair of non-adjacent vertices {xj, u2} is dominated by x1 along with (5.4), (5.5) and (5.6), implies that

2n − 1 ≤ d(xj) + d(u2) ≤ dC (xj) + 2n − |V (C )| − 3.
This implies (5.3).
By (5.3) and Lemma 5.6.25, x2 can be inserted into C . Since C is a longest cycle, it follows from Lemma 5.6.20 that there exists β ∈ {3, . . . , γ} so that the subpath C[x2, xβ−1] can be multi-inserted into C , but C[x2, xβ] cannot. In particular, xβ cannot be inserted into C . Thus, by (5.3) and Lemma 5.6.25, x1 does not dominate xβ and dC (xβ) ≤ |V (C )|. This along with (5.4)-(5.6) gives d(xβ) + d(u2) ≤ 2n − 3. Since u2 forms a dominated pair with x2, we have that d(u2) ≥ n − 1. Hence,

d(xβ) ≤ n − 2.

(5.7)

By the deﬁnition of multi-insertion, there are α ∈ {2, 3, . . . , β − 1} and
i ∈ {γ + 1, . . . , m} such that xi→xα and xβ−1→xi+1. Observe that the pair {xβ, xi+1} is dominated by xβ−1. Thus, by (5.7) and the assumption of the theorem, either xβ→xi+1 or xi+1→xβ. If xβ→xi+1, then the path P [x2, xβ] can be multi-inserted into C which contradicts our assumption. Hence, xi+1→xβ. Considering the pair xβ, xi+2, we conclude analogously that

250 5. Hamiltonicity and Related Problems

xi+2→xβ. Continuing this process, we ﬁnally conclude that x1→xβ, contradicting the conclusion above that the arc x1xβ does not exist.

Proof of Theorem 5.6.5: Assume that D is not hamiltonian and C =

x1x2 . . . xmx1 is a longest cycle in D. Set R = D − V (C). We ﬁrst prove that D has a C-bypass with 3 vertices.

Since D is strong, there is a vertex y in R and a vertex x in C such

that y→x. If y dominates every vertex on C, then C is not a longest cycle,

since a path P from a vertex xi on C to y such that V (P ) ∩ V (C) = {xi} together with the arc y→xi+1 and the path C[xi+1, xi] form a longer cycle in D. Hence, either there exists a vertex xr ∈ V (C) such that xr→y→xr+1, in which case we have the desired bypass, or there exists a vertex xj ∈ V (C) so that y and xj are non-adjacent, but y→xj+1. Since the pair {y, xj} dominates xj+1, d+(xj) + d−(y) ≥ n. This implies the existence of a vertex z ∈ V (D) − {xj, xj+1, y} such that xj→z→y. Since C is a longest cycle, z ∈ V (C). So, B = zyxj+1 is the desired bypass.
Without loss of generality, assume that z = x1 and the gap j of B with respect to C is minimum among the gaps of all C-bypasses with three vertices.

Clearly, j ≥ 2.

Let C = C[x2, xj] and C = C[xj+1, x1]. Since C is a longest cycle, C cannot be multi-inserted into C . It follows from Lemma 5.6.24 that

d+C (xj) + d−C (x2) ≤ |V (C )| + 1. By Lemma 5.6.25 and the maximality

of C, dC (y) ≤ |V (C )| + 1. Analogously to the way we derived (5.4) in the

previous proof, we get that d+C (xj) + d−C (x2) ≤ 2|V (C

dR(y) + d+R(xj ) + d−R(x2) )| − 2. Since dC (y) = 0,

≤ 2(n − m − 1). Clearly, the last four inequalities

imply

d(y) + d+(xj) + d−(x2) ≤ 2n − 2.

(5.8)

Since y is adjacent to neither x2 nor xj, the assumption of the theorem implies that d+(y) + d−(x2) ≥ n and d−(y) + d+(xj) ≥ n, which contradicts (5.8).

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs
While both Hamilton path and Hamilton cycle problems are polynomial time solvable for semicomplete multipartite digraphs (the latter was a diﬃcult open problem for a while and was proved recently by Bang-Jensen, Gutin and Yeo [72] using several deep results on cycles and paths in semicomplete multipartite digraphs, see also [746]), only a characterization of traceable semicomplete multipartite digraphs is known. In Subsection 5.7.1, we give basic results on hamiltonian and longest paths and cycles in semicomplete multipartite digraphs. Several results of Subsection 5.7.1 are proved in Subsection

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 251
5.7.3 using the most important assertion of Subsection 5.7.2. In Subsection 5.7.4, we formulate perhaps the most important known result on Hamilton cycles in semicomplete multipartite digraphs, Yeo’s Irreducible Cycle Subdigraph Theorem, and prove some interesting consequences of this powerful result. Due to the space limit our treatment of hamiltonian semicomplete multipartite digraphs is certainly restricted. The reader can ﬁnd more information on the topic in the survey papers [65, 66] by Bang-Jensen and Gutin [368] by Gutin and [728] by Volkmann, the theses [345, 362, 692, 745], by Guo, Gutin, Tewes and Yeo respectively and the papers cited there.
5.7.1 Basic Results
We start by considering the longest path problem for semicomplete multipartite digraphs. The following characterization is proved in Subsection 5.7.3.
Theorem 5.7.1 (Gutin) [358, 363] A semicomplete multipartite digraph D is traceable if and only if it contains a 1-path-cycle factor. One can verify whether D is traceable and ﬁnd a hamiltonian path in D (if any) in time O(n2.5).
This theorem can be reformulated as pc(D) = 1 if and only if pcc(D) = 1 for a semicomplete multipartite digraph D. Using the result of Exercise 3.59, the last statement can be easily extended to the following result by Gutin:
Theorem 5.7.2 [362] For a semicomplete multipartite digraph D, pc(D) = pcc(D). The path covering number of D can be found in time O(n2.5).
The non-complexity part of the next result by Gutin follows from Theorem 5.7.1. The complexity part is a simple consequence of Theorem 3.11.11.
Theorem 5.7.3 [363] Let D be a semicomplete multipartite digraph of order n.
(a) Let F be a 1-path-cycle subdigraph with maximum number of vertices in D. Then D contains a path P such that V (P ) = V (F).
(b) A longest path in D can be constructed in time O(n3).
We see from Theorem 5.7.1 that the hamiltonian path problem for semicomplete multipartite digraphs turns out to be relatively simple. The hamiltonian cycle problem for this class of digraphs seems to be much more diﬃcult. One could guess that similarly to Theorem 5.7.1, a semicomplete multipartite digraph is hamiltonian if and only if it is strong and has a cycle factor. Even though these two conditions (strong connectivity and the existence of a cycle factor) are suﬃcient for semicomplete bipartite digraphs and extended semicomplete digraphs (see Theorems 5.7.4 and 5.7.5), they are not suﬃcient

252 5. Hamiltonicity and Related Problems
for semicomplete k-partite digraphs (k ≥ 3) (see, e.g., an example later in this subsection). The following characterization was obtained independently by Gutin [353] and H¨aggkvist and Manoussakis [389].
Theorem 5.7.4 A semicomplete bipartite digraph D is hamiltonian if and only if D is strong and contains a cycle factor. One can check whether D is hamiltonian and construct a Hamilton cycle of D (if one exists) in time O(n2.5).
Some suﬃcient conditions for the existence of a hamiltonian cycle in a bipartite tournament are described in the survey paper [368] by Gutin.
Theorem 5.7.5 [359] An extended semicomplete digraph D is hamiltonian if and only if D is strong and contains a cycle factor. One can check whether D is hamiltonian and construct a Hamilton cycle of D (if one exists) in time O(n2.5).
These two theorems can be generalized as follows.
Theorem 5.7.6 (Gutin) [357, 362] Let D be strong semicomplete bipartite digraph. The length of a longest cycle in D is equal to the number of vertices in a cycle subdigraph of D of maximum order. One can ﬁnd a longest cycle in D in time O(n3).
Theorem 5.7.7 [362] Let D be a strong extended semicomplete digraph and let F be a cycle subdigraph of D. Then D has a cycle C which contains all vertices of F . The cycle C can be found in time O(n3). In particular, if F is maximum, then V (C) = V (F), i.e., C is a longest cycle of D.
Proofs of the last two theorems are given in Subsection 5.7.3. One can see that the statement of Theorem 5.7.7 is stronger than Theorem 5.7.6. In fact, the analogue of Theorem 5.7.7 for semicomplete bipartite digraphs does not hold [362], see Exercise 5.29. The following strengthening of Theorem 5.7.7 is proved in [82]:
Theorem 5.7.8 (Bang-Jensen, Huang and Yeo) [82] Let D = (V, A) be a strong extended semicomplete digraph with decomposition given by D = [H1, H2, . . . , Hs], where s = |S| and every V (Hi) is a maximal independent set in V . Let mi, i = 1, 2, . . . , s, denote the maximum number of vertices from Hi which are contained in a cycle subdigraph of D. Then every longest cycle of D contains precisely mi vertices from each Hi, i = 1, 2, . . . , t.
One may ask whether there is any degree of strong connectivity, which together with a cycle factor is suﬃcient to guarantee a hamiltonian cycle in a semicomplete multipartite digraph (or a multipartite tournament). The

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 253
answer is negative. In fact, there is no s such that every s-strong multipartite tournament with a cycle factor has a Hamilton cycle. Figure 5.6 shows a nonhamiltonian multipartite tournament T which is s-strong (s is the number of vertices in each of the sets A, B, C, D and X, Y, Z), and has a cycle factor. We leave it to the reader to verify that there is no Hamilton cycle in T (Exercise 5.28).
A BCD ...• ...• ...• •... ••••
...• ...• ...• ••• X YZ
Figure 5.6 An s-strong non-hamiltonian multipartite tournament T with a cycle factor. Each of the sets A, B, C, D and X, Y, Z induces an independent set with exactly s vertices. All arcs between two sets have the direction shown.
We conclude the description of basic results on hamiltonian semicomplete digraphs by the following important result which we mentioned above.
Theorem 5.7.9 (Bang-Jensen, Gutin and Yeo) [72] One can verify whether a semicomplete multipartite digraph D has a hamiltonian cycle and ﬁnd one (if it exists) in time O(n7).
Very recently Yeo [746] proved that the problem can be solved in time O(n5).
5.7.2 The Good Cycle Factor Theorem
The purpose of this subsection, based on the paper [68] by Bang-Jensen, Gutin and Huang, is to prove some suﬃcient conditions for a semicomplete multipartite digraph to be hamiltonian.
Let F = C1 ∪ C2 be a cycle factor or a 1-path-cycle factor in a digraph D, where C1 is a cycle or a path in D and C2 is a cycle. A vertex v ∈ V (Ci) is called out-singular (in-singular) with respect to C3−i if v⇒C3−i (C3−i⇒v); v is singular with respect to C3−i if it is either out-singular or in-singular with respect to C3−i.

254 5. Hamiltonicity and Related Problems

Lemma 5.7.10 [68] Let Q ∪ C be a cycle factor in a semicomplete multipartite digraph D. Suppose that the cycle Q has no singular vertices (with respect to C) and D has no hamiltonian cycle, then for every arc xy of Q either the arc xy itself can be inserted into C, or both vertices x and y can be inserted into C.

Proof: Assume without loss of generality that there is some arc xy on Q
such that neither x nor xy can be inserted into C. Since D is a semicom-
plete multipartite digraph and x is non-singular and cannot be inserted into C, there exists a vertex v on C which is not adjacent to x and v−→x→v+.
Furthermore, v is adjacent to y since x and y are adjacent. Since xy can-
not be inserted into C, we have v→y. Then D contains a Hamilton cycle Q[y, x]C[v+, v]y, which contradicts the assumption.

Lemma 5.7.11 [68] Let D be a semicomplete multipartite digraph contain-
ing a cycle factor C1 ∪ C2 such that Ci has no singular vertices with respect to C3−i, for both i = 1, 2; then D is hamiltonian. Given C1 and C2, a hamiltonian cycle in D can be found in time O(|V (C1)||V (C2)|).

Proof: If at least one of the cycles C1, C2 is even, then by Corollary 5.6.23 and Lemma 5.7.10 we can ﬁnd a Hamilton cycle in D in time O(|V (C1)||V (C2)|).

Thus, assume that both of C1, C2 are odd cycles. If some vertex in Ci can be inserted into C3−i for some i = 1 or 2, then by Corollary 5.6.21 and Lemma 5.7.10, we can construct a Hamilton cycle in D in time O(|V (C1)||V (C2)|). Thus, we may also assume that no vertex in Ci can be inserted into C3−i for both i = 1, 2. So, by Lemma 5.7.10, every arc of Ci can be inserted into C3−i.
Now we show that either D is hamiltonian or we may assume that every

arc of Ci can be inserted between two diﬀerent pairs of vertices in C3−i

(i = 1, 2). Consider an arc x1x2 of C1. Since both x1 and x2 are non-singular

and cannot be inserted into C2, there exist vertices v1 and v2 on C2 such that

vi is not adjacent to xi and vi−→xi→vi+, i = 1, 2. If v1→x2, then we obtain

a Hamilton cycle. So we may assume that the only arc between x2 and v1 is

x2v1. For the same reason, we may assume that v2 dominates x1 but is not

dominated by x1. Now between v2 and v2+.

the

arc

x1x2

can

be

inserted

between

v1−

and

v1

and

Hence, x1x2 cannot be inserted between two pairs of vertices only in the

Cctrxxhea11omse.neaHasvntrteedhrkrnuatxcaictce2ttev,,,st1−tsahhioten=efcﬁbaDevrer2sgvctbi1a,nvundan1−tdoivncvev1ygs1−1cc,onl=aevfon1ttCv.hb2+d∗Teeo.hmp=iWnerisoneCaeoarrs1fctth.[eexoBvd2wx1−u,2ixvtnt11athvo]na1C−cdtaCv2ni[1v∗nv1−1+bcttaoe,h=nvigisn2−nviovcs]2xteaer2sibsateeewnhdDihoantiimisncsehdtirolhottcmaeoComdnin1niitab,laatnebtiotneyncwdsyietacbahenllnyee.l

of D. This completes the proof that either D is hamiltonian or every arc on

Ci can be inserted between two diﬀerent pairs of vertices in C3−i. Assume without loss of generality that the length of C2 is not greater
than that of C1. Then C1 has two arcs xiyi (i = 1, 2) that can be inserted

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 255
between the same pair u, v of vertices in C2. Since C1 is odd, one of the paths Q = C1[y1+, x−2 ] and C1[y2+, x−1 ] has odd length. Without loss of generality, suppose that Q is odd. Obviously, C∗ = C2[v, u]C1[x2, y1]v is a cycle of D. By the fact shown above each arc of the path Q can be inserted into C2 between a pair of vertices diﬀerent from u, v. Therefore, each arc of Q can be inserted into C∗. Hence, by Corollary 5.6.22 we conclude that D has a hamiltonian cycle H. It is not diﬃcult to verify that H can be found in time O(|V (C1)||V (C2)|).
Let D be a semicomplete multipartite digraph and let C ∪ C be a cycle subdigraph of D. We write that C >C if C contains singular vertices with respect to C and they all are out-singular, and C has singular vertices with respect to C and they all are in-singular. A cycle factor F = C1 ∪C2 ∪. . . ∪Ct is good if for every pair i, j, 1 ≤ i < j ≤ t, neither Ci >Cj nor Cj >Ci.
Since this deﬁnition and the proof of Lemma 5.7.12 are quite important, we illustrate them in Figure 5.7. Observe that if C, C are a pair of disjoint cycles in a semicomplete multipartite digraph D, then (up to switching the role of the two cycles) at least one of the following four cases apply (see Figure 5.7):
(a) Every vertex on C has an arc to and from C . (b) There exist vertices x ∈ V (C), y ∈ V (C ) such that x⇒V (C ) and
y⇒V (C), or V (C )⇒x and V (C)⇒y. (c) C contains distinct vertices x, y such that x⇒V (C ) and V (C )⇒y. (d) C >C .
The alternatives (a)-(c) are covered by the deﬁnition of a good cycle factor (for cycle factors containing only two cycles); the alternative (d) is not.

CC
(a)

x y
CC
(b)

x y
CC
(c)

x y
CC
(d)

Figure 5.7 The four possible situations (up to switching the role of the two cycles or reversing all arcs) for arcs between two disjoint cycles in a semicomplete multipartite digraph. In (a) every vertex on C has arcs to and from C . In (b)-(d) a fat arc indicates that all arcs go in the direction shown from or to the speciﬁed vertex (i.e. in (b) all arcs between x and C leave x).

The following lemma gives the main result for a good cycle factor containing two cycles.
Lemma 5.7.12 [68] If D is a semicomplete multipartite digraph containing a good factor C1 ∪ C2, then D is hamiltonian. A Hamilton cycle in D can be constructed in time O(|V (C1)||V (C2)|).

256 5. Hamiltonicity and Related Problems
Proof: The ﬁrst case is that at least one of the cycles C1 and C2 has no singular vertices (Situation (a) in Figure 5.7). If both C1, C2 have no singular vertices then D is hamiltonian by Lemma 5.7.11 and we can ﬁnd a Hamilton cycle in D in time O(|V (C1)||V (C2)|). Assume now that only one of them has no singular vertices. Suppose without loss of generality that C1 contains an out-singular vertex x and C2 has no singular vertices. Since C2 contains no singular vertices, C1 has at least one vertex which is not out-singular. Suppose that x ∈ V (C1) was chosen such that x+ is not out-singular. Hence there is a vertex y on C2 dominating x+. If x→y, then y can be inserted into C1 and hence, by Lemma 5.7.10 and Corollary 5.6.21, D is hamiltonian (consider C2[y+, y] and C1). Otherwise, x is not adjacent to y. In this case, x→y+ and D has the hamiltonian cycle C1[x+, x]C2[y+, y]x. The above arguments can be easily converted into an O(|V (C1)||V (C2)|)-algorithm.
Consider the second case: each of C1, C2 has singular vertices with respect to the other cycle. Assume without loss of generality that C1 has an outsingular vertex x1. If C2 also contains an out-singular vertex x2 (Situation (b) in Figure 5.7), then x1 is not adjacent to x2 and xi→x+3−i for both i = 1, 2. Hence D is hamiltonian. If C2 contains no out-singular vertices then it has insingular vertices. Since C1 ∪C2 is a good factor, C1 contains both out-singular and in-singular vertices (Situation (c) in Figure 5.7). Since both C1 and C2 have in-singular vertices, the digraph D obtained from D by reversing the orientations of the arcs of D has two cycles C1 and C2 containing out-singular vertices. We conclude that D (and hence D) is hamiltonian. Again, the above arguments can be converted into an O(|V (C1)||V (C2)|)-algorithm.
The main result on good cycle factors is the following theorem by BangJensen, Gutin and Huang. This theorem can be proved by induction on t, the number of cycles in a good cycle factor. We leave the details to the reader (see Exercise 5.39).
Theorem 5.7.13 (Bang-Jensen, Gutin and Huang) [68] If D is a strong semicomplete multipartite digraph containing a good cycle factor F = C1 ∪ C2 ∪ . . . ∪ Ct (t ≥ 1), then D is hamiltonian. Furthermore, given F one can ﬁnd a hamiltonian cycle in D in time O(n2).
5.7.3 Consequences of Lemma 5.7.12
In this subsection mostly based on [68], we will show that several important results on semicomplete multipartite digraphs are consequences of Lemma 5.7.12.
Proof of Theorem 5.7.1: It is suﬃcient to prove that if P is a path and C is a cycle of D such that V (P ) ∩ V (C) = ∅, then D has a path P with V (P ) = V (P )∪V (C). Let P and C be such a pair, and let u be the initial and v the terminal vertex of P . If u is non-singular or in-singular with respect to C, then obviously the path P exists. Similarly if v is non-singular or

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 257
out-singular with respect to C. Assume now that u is out-singular and v is in-singular with respect to C.
Add a new vertex w to D and the arcs zw, for all z = u and the arc wu to obtain the semicomplete multipartite digraph D . Then w forms a cycle C with P in D and C ∪ C is a good cycle factor of D . Therefore, by Lemma 5.7.12, D has a hamiltonian cycle. Then D contains a hamiltonian path.
It is easy to see that the proof above supplies a recursive O(n2)-algorithm for ﬁnding a hamiltonian path in D given a 1-path-cycle factor F. Thus, the complexity result of this theorem is due to the fact that we can either construct a 1-path-cycle factor in a digraph or discover that it does not exist in time O(n2.5): see Exercise 3.59.
To obtain the rest of the proofs in this subsection, we need the following:
Lemma 5.7.14 [68] Let D be a strong semicomplete multipartite digraph containing a cycle subdigraph F = C1 ∪ C2 ∪ . . . ∪ Ct such that for every pair i, j (1 ≤ i ≤ j ≤ t) Ci⇒Cj or Cj⇒Ci holds. Then D has a cycle C of length at least |V (F )| and one can ﬁnd C in time O(n2) for a given F. If D is an extended semicomplete digraph, then we can choose C such that V (F) ⊆ V (C).
Proof: Deﬁne a tournament T (F) as follows: {C1, . . . , Ct} forms the vertex set of T (F ) and Ci→Cj in T (F ) if and only if Ci⇒Cj in D. Let H be the subdigraph of D induced by the vertices of F and let W be a partite set of D having a representative in C1.
First consider the case that T (F) is strong. Then it has a hamiltonian cycle. Without loss of generality assume that C1C2 . . . CtC1 is a hamiltonian cycle in T (F ). If each of Ci (i = 1, 2, . . . , t) has a vertex from W then for every i = 1, 2, . . . , t choose any vertex wi of V (Ci) ∩ W . Then C1[w1, w1−]C2[w2, w2−] . . . Ct[wt, wt−]w1 is a hamiltonian cycle in H. If there exists a cycle Ci containing no vertices of W , then we may assume (shifting the cyclic order if needed) that Ct has no vertices from W . Obviously, H has a hamiltonian path starting at a vertex w ∈ W ∩ V (C1) and ﬁnishing at some vertex v of Ct. Since v→w, H is hamiltonian.
Now consider the case where T (F) is not strong. Replacing in F every collection X of cycles which induce a strong component in T (F) by a hamiltonian cycle in the subdigraph induced by X, we obtain a new cycle subdigraph L of D such that T (L) has no cycles. The subdigraph T (L) contains a unique hamiltonian path Z1Z2 . . . Zs, where Zi is a cycle of L. Since D is strong there exists a path P in D with the ﬁrst vertex in Zs and the last vertex in Zq (1 ≤ q < s) and the other vertices not in L. Assume that q is as small as possible. Then we can replace the cycles Zq, . . . , Zs by a cycle consisting of all the vertices of P ∪Zq ∪. . .∪Zs except maybe one and derive a new cycle subdigraph with less cycles. Continuing in this manner, we obtain ﬁnally a single cycle.

258 5. Hamiltonicity and Related Problems
In the case of an extended semicomplete digraph D, if D V (F) is not strong, then T (F ) is not strong. Also, Ci⇒Cj implies that Ci→Cj. This, combined with the above argument on semicomplete multipartite digraphs, allows one to construct a cycle C such that V (F) ⊂ V (C).
Using the above proof together with an O(n2)-algorithm for constructing a hamiltonian cycle in a strong tournament (see Theorem 5.5.2 or Exercise 5.15) and obvious data structures one can obtain an O(n2)-algorithm.
Lemma 5.7.15 [68] Let C ∪ C be a cycle factor in a strong semicomplete multipartite digraph D of order n. Then D has a cycle Z of length at least n − 1 containing all vertices of C. The cycle Z can be found in time O(|V (C)||V (C )|).
Proof: Suppose that the (existence) claim is not true. By Lemma 5.7.12, this means that each of C and C has singular vertices with respect to the other cycle, and all singular vertices on one cycle are out-singular and all singular vertices on the other cycle are in-singular. Assume without loss of generality that C has only out-singular vertices with respect to C . Since D is strong C has a non-singular vertex x. Furthermore we can choose x such that its predecessor x− on C is singular. Let y be some vertex of C such that y→x. If x− is adjacent to y+, the successor of y on C , then D has a hamiltonian cycle. Otherwise x−→y++ and D has a cycle of length n − 1 containing all vertices of C. The complexity result easily follows from the above arguments.
The next two results due to Gutin are easy corollaries of Lemma 5.7.15:
Corollary 5.7.16 [353] Let C ∪C be a cycle factor in a strong semicomplete bipartite digraph D. Then D has a hamiltonian cycle Z. The cycle Z can be found in time O(|V (C)||V (C )|).
Proof: Since D is bipartite, it cannot have a cycle of length n − 1.
Corollary 5.7.17 [359] Let C ∪ C be a cycle factor in a strong extended semicomplete digraph D. Then D has a hamiltonian cycle Z. The cycle Z can be found in time O(|V (C)||V (C )|).
Proof: If C and C have a pair x, y of non-adjacent vertices (x ∈ V (C), y ∈ V (C )) then obviously x→y+, y→x+ and D has a Hamilton cycle that can be found in time O(|V (C)|V (C )|). Assuming that any pair of vertices from C and C is adjacent, we complete the proof as in Lemma 5.7.15.
Corollaries 5.7.16 and 5.7.17 imply immediately the following useful result.
Proposition 5.7.18 If F = C1 ∪ C2 ∪ . . . ∪ Ck is a cycle factor in a digraph which is either semicomplete bipartite or extended semicomplete and there is no F = C1 ∪ C2 ∪ . . . ∪ Cr such that for every i = 1, 2, . . . , k, V (Ci) ⊂ V (Cj) for some j ∈ {1, 2, , . . . , r}, then without loss of generality Ci⇒Cj for every i < j.

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 259

Lemma 5.7.15 implies immediately the following result ﬁrst proved by Ayel (see [449]).
Corollary 5.7.19 If C is a longest cycle in a strong semicomplete multipartite digraph D, then D − V (C) is acyclic.
Proof of Theorem 5.7.6: Let F = C1 ∪ . . . ∪ Ct be a cycle subdigraph of maximum order in a strong semicomplete bipartite digraph D. We construct a semicomplete digraph S, a generalization of the tournament T in Lemma 5.7.14, as follows. The vertices of S are the cycles in F , Ci→Cj in S if and only if there is an arc from Ci to Cj in D. Cycles of length two in S indicate what cycles in F can be merged together by Corollary 5.7.16. Therefore, we can merge cycles in F till S becomes oriented, i.e. without 2-cycles. Now we can apply Lemma 5.7.14.
Complexity details are left to the reader.
Proof of Theorem 5.7.7: The proof is similar to that of Theorem 5.7.6, applying Corollary 5.7.17 instead of Corollary 5.7.16. Details are left to the reader as Exercise 5.35.

5.7.4 Yeo’s Irreducible Cycle Subdigraph Theorem and its Applications

While Lemma 5.7.12 is strong enough to imply short proofs of results on longest cycles in some special families of semicomplete multipartite digraphs such as semicomplete bipartite graphs and extended semicomplete digraphs, this lemma does not appear strong enough to be used in proofs of longest cycle structure results for other families of semicomplete multipartite digraphs. In this subsection based on Yeo’s paper [744], we formulate the very deep theorem of Yeo on irreducible cycle subdigraphs in semicomplete multipartite digraphs, the main theorem in [744], that is more powerful than Lemma 5.7.12. We give a proof of the main lemma (Lemma 5.7.20) in the original proof of Yeo’s theorem, but do not provide the rest of the lemmas since these would require signiﬁcant space. We provide short proofs of some important consequences of this theorem.
Recall that for two subdigraphs X, Y of D, a path P is an (X, Y )-path if P starts at a vertex x ∈ V (X), terminates at a vertex y ∈ V (Y ) and V (P ) ∩ (V (X) ∪ V (Y )) = {x, y}.

Lemma 5.7.20 [744] Let D be a semicomplete multipartite digraph, and let

C1 and C2 be a pair of disjoint cycles in D, such that C1 >C2 and C1⇒C2.

Assume that there is no cycle in D, with vertex set V (C1)∪V (C2). Then there

exists a unique partite set V of D such that for every (V (C2), V (C1))-path

P starting at there exists a

vertex u cycle C∗

and terminating at vertex v in D, with V (C∗) = V (C1)

either {u+C2 , ∪ V (C2) ∪ V

vC−1 } (P ).

⊆

V

or

260 5. Hamiltonicity and Related Problems

Proof: Since C1 >C2 and C1⇒C2, there is a vertex x ∈ V (C1), with x⇒C2 and x+⇒C2. Let V be the partite set containing the vertex x. Let y ∈ V (C2) be chosen such that y−→x+. Then y ∈ V , since otherwise C = C2[y, y−]C1[x+, x]y is a cycle with V (C) = V (C1) ∪ V (C2). We will now show the following assertion:

V (C1)⇒y.

(5.9)

Label the vertices in C2 such that C2 = y1y2 . . . ymy1, where y1 = y, and assume that (5.9) is not true, i.e. V (C1)⇒y1. Deﬁne the statements αK and βK as follows.

αK : The vertex yk ∈ V and V (C1)⇒yk, for every k = 1, 3, 5, . . . , K. βK : The arc ykyk+1 can be inserted into C1[x+, x], for every k = 1, 3, 5, . . . , K.

We will now show that αK and βK are true for every odd K, with 1 ≤ K < m. Clearly α1 holds, so if we prove the following two implications, we are done by induction.

αK and βK−2 imply βK (when K = 1, αK implies βK ): If we can insert yK into C1, then it can be inserted into C1[x+, x], since yK cannot be inserted between x and x+ (by αK , yK ∈ V ). Also, by βK−2 and Corollary 5.6.22 we can insert the path C2[y1, yK ] into the cycle C1[x+, x]C2[yK+ , ym]x+. So we may assume that yK cannot be inserted into C1. Since C1⇒yK , there smDaziKn−nudwcs=etiztbtKhxhe,eV(arzw(eKz−ChKoi∈)ct∈hh=VeVirV)mw.((pCisCle1i1e)w)ss∪outuhcVhlad(ttChby2aeK)t.ayzTK+Kchyuc∈caslenVy, KCbaeyn=K+dinzCcsK−ae2rn→[tyebK+ydeK, yii→nnKtszo]eCK+rtC1.e[1Ndz[K+xob+w,ez,tyKwxK+]e],ye→K+sniz,nzKciK−ne,
αK−2 and βK−2 imply αK : yK ∈ V , since otherwise by βK−2 and Corollary 5.6.22 we can insert the path P = y1y2 . . . yK−1 into the cycle
C1[x+, x]C2[yK , ym]x+

and obtain a cycle in D with vertex set V (C1) ∪ V (C2). If V (C1)⇒yK , then zK−−2→yK , where zK−2 was deﬁned when we proved βK−2. When we deﬁned zK−2, we found that yK+−2→zK−2. The cycle
C = C1[zK−2, zK−−2]C2[yK , yK+−2]zK−2
has V (C) = V (C1) ∪ V (C2), a contradiction. This completes the proof that αK holds.
Since ym can be inserted into C1 (namely between x and x+), Corollary 5.6.22 implies that we can insert the path C2[y1, ym] into C1 to obtain a new cycle in D with vertex set V (C1) ∪ V (C2). This is a contradiction, which implies that (5.9).

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 261

Let suﬃces

tuo+co=nsuid+Ce2r

and the

fvo−llo=winvgC−1t.woTocacsoems. plete

the

proof

of

this

lemma

it

Case 1: {u+, v−} ∩ V = ∅. The cycle

C∗ = C1[x+, v−]C2[y, u]P [u+P , vP−]C1[v, x]C2[u+, y−]x+

has V (C∗) = V (C1) ∪ V (C2) ∪ V (P ).

Case 2: The vertices u+ and v− are in diﬀerent partite sets.

We claim that D contains a cycle C∗, with V (C∗) = V (P ) ∪ V (C1) ∪ V (C2). Assume that C∗ does not exist. According to Case 1, we have that either u+ ∈

V or v− ∈ V , but not both. Now we may assume that u+→v−, since otherwise

C∗ = C1[v, v−]C2[u+, u−C2 Now according to Case 1,

]P would have V (C∗) = V (P used for the path P = u+v−,

)∪ we

V (C1) ∪ V (C2). have that either

u++ ∈ V or v−− ∈ V , but not both, since either u+ ∈ V or v− ∈ V .

Continuing this process and using the fact that D has no cycle with vertex

set V (P )∪V (C1)∪V (C2) we obtain that u+→v−, u++→v−−, . . . which clearly is impossible since C1 has an out-singular vertex with respect to C2. This is a contradiction, and thus C∗ exists.

Lemma 5.7.20 and several other results in [744] imply the following powerful theorem. Notice that, in fact, Yeo [744] proved three sets of properties of irreducible subdigraph. We include only the two most important ones.

Theorem 5.7.21 (Yeo’s irreducible cycle subdigraph theorem) [744] Let D be a semicomplete multipartite digraph with partite sets V1, V2, . . . , Vc. Let X ⊆ V (D) and let F be a cycle subdigraph of D consisting of t cycles that covers X, such that t is minimum. Then the following holds.
(a) We can label the cycles C1, C2, . . . , Ct of F , such that Ci >Cj, whenever 1 ≤ i < j ≤ t.
(b) Assume that C1, C2, . . . , Ct are ordered as stated in (a), then there are cycles Cn0 , Cn1 , . . . , Cnm (n0 = 1, nm = t), and integers q1, q2, . . . , qm ∈ {1, 2, . . . , c}, such that the following is true. For every (Cj, Ci)-path P starting at u and terminating at v with V (P ) ∩ V (F) = {u, v} and 1 ≤ i < j ≤ t, there exists an integer k ∈ {1, 2, . . . , m}, such that nk−1 ≤ i < j ≤ nk and {u+Cj , vC−i } ⊆ Vqk ∩ X.

By a careful analysis of the complete proof of Theorem 5.7.21 in [745] one can obtain the following:
Theorem 5.7.22 [745] Let D be a semicomplete multipartite digraph, and let X ⊆ V (D) be arbitrary. Let F be a cycle subdigraph of D that covers X. Then in O(|V (D)|3) time we can ﬁnd a new cycle subdigraph, F , of D, that covers X, such that F has the properties (a) and (b) given in Theorem 5.7.21. Furthermore we can ﬁnd F , such that for every cycle C in F, the vertices X ∩ V (C) are included in some cycle of F .

262 5. Hamiltonicity and Related Problems

Theorems 5.7.21 and 5.7.22 are very important starting points of [72], where polynomial solvability of the Hamilton cycle problem for semicomplete multipartite digraphs is established. We will prove some important consequences of Theorem 5.7.21 and state several more of them.

Theorem 5.7.23 [744] Every regular semicomplete multipartite digraph is hamiltonian.

Proof: Let D be a regular semicomplete multipartite digraph. By Exercise
3.70, D contains a cycle factor F = C1 ∪ C2 ∪ . . . ∪ Ct. We may assume that F is chosen, such that t is minimum. If t = 1 then D is hamiltonian, so assume
that t > 1.
Let X = V (D). Let Cn0 , Cn1 , . . . , Cnm and q1, q2, . . . , qm be deﬁned as in Theorem 5.7.21. Let yx ∈ A(D) be an arc from y ∈ V (Ci), with i ∈ {2, 3, . . . , t} to x ∈ V (C1). Part (b) of Theorem 5.7.21 implies that x−, y+ ∈ Vq1 . Now we deﬁne the two distinct arcs a1(yx) = xy+ and a2(yx) = x−y. By Theorem 5.7.21, a1(yx) and a2(yx) are arcs in D. Indeed, x and y+ (x− and y) are adjacent. If y+→x then y++ ∈ Vq1 , which is impossible.
If y x and yx are distinct arcs from V (D) − V (C1) to V (C1), then we see that a1(yx), a2(yx), a1(y x ) and a2(y x ) are four distinct arcs from V (C1) to V (D) − V (C1). We have now shown that the number of arcs leaving V (C1) is at least twice as large as the number of arcs entering V (C1). However this contradicts the fact that D is an eulerian digraph (see Corollary 1.6.4).

Theorem 5.7.24 (Yeo) [744] Let D be a ( k/2 + 1)-strong semicomplete multipartite digraph, and let X be an arbitrary set of vertices in D such that X includes at most k vertices from each partite set of D. If there is a cycle subdigraph F = C1 ∪ . . . ∪ Ct, which covers X, then there is a cycle C in D, such that X ⊆ V (C).

Proof: We may clearly assume that F has the properties described in The-

orem 5.7.21, and t ≥ 2, since otherwise we are done. Let Cn0 , Cn1 , . . . , Cnm

and q1, q2, . . . , qm be deﬁned as in Theorem 5.7.21. Since X contains at

most k vertices from each partite set, we have that min{|Vq1 ∩ V (C1) ∩

X|, |Vq1 ∩ V (Cn1 ) ∩ X|} = r ≤ k/2 . Assume without loss of generality

that |Vq1 ∩ V (Cn1 ) ∩ X| = r. Since D is ( k/2 + 1)-strong we get that there exists a (V (Cn1 ) − (Vq1 ∩ V (Cn1 ) ∩ X)−, V (C1) ∪ . . . ∪ V (Cn1−1))-path in D − (Vq1 ∩ V (Cn1 ) ∩ X)−, P = p1 . . . pl. Assume that pl ∈ V (Ci) (1 ≤ i < n1).

BsinycTe hne0o≤remi <5.n71.2a1n, dthpe+1 (∈CnX1 ,

Ci)-path ∩ Vq1 .

P

contradicts

the

minimality

of

F,

A family of semicomplete multipartite digraphs described in [744] shows that one cannot weaken the value k/2 + 1 of strong connectivity in this theorem. Using the fact that every k-strong digraph of independence number at most k has a cycle factor (see Proposition 3.11.12) and applying Theorem 5.7.24, we obtain the following two corollaries:

5.7 Longest Paths and Cycles in Semicomplete Multipartite Digraphs 263

Corollary 5.7.25 [744] If a k-strong semicomplete multipartite digraph D has at most k vertices in each partite set, then D contains a Hamilton cycle.

Corollary 5.7.26 [744] A k-strong semicomplete multipartite digraph has a cycle through any set of k vertices.

Theorem 5.7.23 was generalized by Yeo [748] as follows (its proof also uses Theorem 5.7.21). Let il(D) = max{|d+(x) − d−(x)| : x ∈ V (D)} and ig(D) = ∆0(D) − δ0(D) for a digraph D (the two parameters are called the local irregularity and the global irregularity, respectively, of D [748]). Clearly, il(D) ≤ ig(D) for every digraph D.
Theorem 5.7.27 [748] Let D be a semicomplete c-partite digraph of order n with partite sets of cardinalities n1, n2, . . . , nc such that n1 ≤ n2 ≤ . . . ≤ nc. If ig(D) ≤ (n − nc−1 − 2nc)/2 + 1 or il(D) ≤ min{n − 3nc + 1, (n − nc−1 − 2nc)/2 + 1}, then D is hamiltonian.

The result of this theorem is best possible in a sense: Yeo [748] constructed
an inﬁnite family D of non-hamiltonian semicomplete multipartite digraphs
such that every D ∈ D has il(D) = ig(D) = (n − nc−1 − 2nc + 1)/2 + 1 ≤ n − 3nc + 2.
Another generalization of Theorem 5.7.23, whose proof is based on The-
orem 5.7.21, was obtained by Guo, Tewes, Volkmann and Yeo [348]. For a
digraph D and a positive integer k, deﬁne

f (D, k) =

(d+(x) − k) +

(k − d−(x)).

x∈V (D),d+(x)>k

x∈V (D),d−(x)<k

Theorem 7.5.3 in Ore’s book [595] on the existence of a perfect matching in a bipartite graph can easily be transformed into a suﬃcient condition for a digraph to contain a cycle factor. This condition is as follows. If, for a digraph D and positive integer k, we have f (D, k) ≤ k − 1, then D has a cycle factor. For a positive integer k ≥ 2, let Gk be a semicomplete 3-partite digraph with the partite sets V1 = {x}, V2 = {y1, y2, . . . , yk−1}, and V3 = {z1, z2, . . . , zk} and arc set

{yx, xz, zy, yv : y ∈ V2, z ∈ V3, v ∈ V3 − z1} ∪ {z1x}.
The digraph Gk is the converse of Gk. We observe that f (Gk, k) = k − 1 (Exercise 5.43), but Gk is not hamiltonian, as a hamiltonian cycle would contain the arc xz1 and every second vertex on the cycle would belong to the partite set V3. Since x has no in-neighbour in V3 − z1, this is not possible. Clearly, Gk is not hamiltonian either.
Theorem 5.7.28 [348] Let D be a semicomplete multipartite digraph such that f (D, k) ≤ k − 1 for some positive integer k. If D is not isomorphic to Gk or Gk, then D is Hamiltonian.

264 5. Hamiltonicity and Related Problems

The authors of [348] introduced the following family of semicomplete mul-

tipartite digraphs. Let D be a semicomplete multipartite digraph with par-

tite

sets

V1, V2,

. . . , Vk.

If

min{|(xi, Vj)|, |(Vj, xi)|}

≥

1 2

|Vj

|

for

every

ver-

tex xi ∈ Vi and for every 1 ≤ i, j ≤ k, j = i, then D is called a

semi-partitioncomplete digraph. Several suﬃcient conditions to guar-

antee hamiltonicity of semi-partitioncomplete digraphs were derived in [348].

In particular, the following result was proved.

Theorem 5.7.29 If a strong semi-partitioncomplete digraph D of order n has less than n/2 vertices in every partite set, then D is hamiltonian.

5.8 Longest Paths and Cycles in Extended Locally Semicomplete Digraphs
¿From Section 5.5, we know that characterizations of hamiltonian and traceable locally semicomplete digraphs are practically the same as those of semicomplete digraphs: every strong locally semicomplete digraph is hamiltonian and every connected locally semicomplete digraph is traceable. In the previous section, we derived characterizations of hamiltonian and traceable extended semicomplete digraphs. The reader may suspect that similar characterizations hold for extended locally semicomplete digraphs. This is indeed true. Moreover, the hamiltonicity characterization can be generalized even to extended locally in-semicomplete digraphs. However, the traceability one does not hold for extended locally in-semicomplete digraphs. In this section we brieﬂy consider these characterizations and their generalizations to the longest path and cycle problems. We start from the following characterization by Bang-Jensen and Gutin [62].
Theorem 5.8.1 An extended locally semicomplete digraph is hamiltonian if and only if it is strongly connected and has a cycle factor. Given a cycle factor of a strong extended locally semicomplete digraph D, a hamiltonian cycle of D can be found in time O(n2), where n is the number of vertices in D.
This theorem can be generalized to extended locally in-semicomplete digraphs [59]. Theorem 5.8.2, whose proof is left as Exercise 5.44, shows that extended locally semicomplete digraphs are still ‘nicer’ with respect to the longest cycle than semicomplete bipartite digraphs (see the remark after Theorem 5.7.7).
Theorem 5.8.2 [62] Let D be a strongly connected extended locally semicomplete digraph. Given a cycle subdigraph F = C1 ∪ . . . ∪ Ct of D of maximum order, one can ﬁnd a (longest) cycle C of D such that V (C) = V (C1) ∪ . . . ∪ V (Ct) in time O(n2).

5.9 Hamilton Paths and Cycles in Quasi-Transitive Digraphs 265
Theorem 5.8.3 [62] A connected extended locally semicomplete digraph D has a hamiltonian path if and only if it contains a 1-path-cycle factor. Given a 1-path-cycle factor of D, one can construct a hamiltonian path of D in time O(n2).
Proof: Exercise 5.45.
1 5
3 2
46
Figure 5.8 The digraph L.
Unlike Theorem 5.8.1, Theorem 5.8.3 cannot be generalized to extended locally in-semicomplete digraphs as one can see from the following example [59]. The extended locally in-semicomplete digraph L in Figure 5.8 contains a 1-path-cycle factor consisting of path 1234 and cycle 565 (and even an inbranching rooted in the vertex 6), but has no hamiltonian path. It is natural to pose the following problem:
Problem 5.8.4 [65] (a) Find a characterization of traceable extended locally in-semicomplete di-
graphs. (b) Establish the complexity of the problem of deciding whether an extended
locally in-semicomplete digraph has a hamiltonian path.
Theorem 5.8.3 can easily be generalized to longest paths.
Theorem 5.8.5 [62] The order of a longest path in an extended locally semicomplete digraph D equals to the maximum order of a 1-path-cycle subdigraph of D. Moreover, given a 1-path-cycle subdigraph F of an extended locally semicomplete digraph D, a path P such that V (P ) = V (F) can be found in time O(n2).
5.9 Hamilton Paths and Cycles in Quasi-Transitive Digraphs
The methods developed in [79] by Bang-Jensen and Huang and [365] by Gutin to characterize hamiltonian and traceable quasi-transitive digraphs as well as

266 5. Hamiltonicity and Related Problems
to construct polynomial algorithms for verifying the existence of Hamilton paths and cycles in quasi-transitive digraphs can be easily generalized to much wider classes of digraphs [65]. Thus, in this section, along with quasitransitive digraphs, we consider totally Φ-decomposable digraphs for various sets Φ of digraphs.
By Theorem 4.8.5, every strong quasi-transitive digraph D has a decomposition D = S[Q1, Q2, . . . , Qs], where S is a strong semicomplete digraph, s = |V (S)|, and each Qi, i = 1, 2, . . . , s, is either just a single vertex or a nonstrong quasi-transitive digraph. Also, a non-strong quasi-transitive digraph D with at least two vertices has a decomposition D = T [H1, H2, . . . , Ht], where T is a transitive oriented graph, t = |V (T )|, and every Hi is a strong semicomplete digraph. These decompositions are called canonical decompositions. The following characterization of hamiltonian quasi-transitive digraphs is due to Bang-Jensen and Huang [79].
Theorem 5.9.1 [79] A strong quasi-transitive digraph D with canonical decomposition D = S[Q1, Q2, . . . , Qs] is hamiltonian if and only if it has a cycle factor F such that no cycle of F is a cycle of some Qi.
Proof: Clearly, a Hamilton cycle in D crosses every Qi. Thus, it suﬃces to show that, if D has a cycle factor F such that no cycle of F is a cycle of some Qi, then D is hamiltonian. Observe that V (Qi) ∩ F is a path factor Fi of Qi for every i = 1, 2, . . . , s. For every i = 1, 2, . . . , s, delete the arcs between endvertices of all paths in Fi except for the paths themselves, and then perform the operation of path-contraction for all paths in Fi. As a result, one obtains an extended semicomplete digraph S (since S is semicomplete). Clearly, S is strong and has a cycle factor. Hence, by Theorem 5.7.5, S has a Hamilton cycle C. After replacing every vertex of S with the corresponding path from F, we obtain a Hamilton cycle in D.
Similarly to Theorem 5.9.1, one can prove the following characterization of traceable quasi-transitive digraphs (see Exercise 5.47).
Theorem 5.9.2 [79] A quasi-transitive digraph D with at least two vertices and with canonical decomposition D = R[G1, G2, . . . , Gr] is traceable if and only if it has a 1-path-cycle factor F such that no cycle or path of F is completely in some D V (Gi) .
It appears that Theorems 5.9.1 and 5.9.2 do not imply polynomial algorithms to verify hamiltonicity and traceability, respectively (see Exercise 5.46). The following characterization of hamiltonian quasi-transitive digraphs is given implicitly in the paper [365] by Gutin:
Theorem 5.9.3 (Gutin) [365] Let D be a strong quasi-transitive digraph with canonical decomposition D = S[Q1, Q2, . . . , Qs]. Let n1, . . . , ns be the orders of the digraphs Q1, Q2, . . . , Qs, respectively. Then D is hamiltonian if and only if the extended semicomplete digraph S = S[Kn1 , Kn2 , . . . , Kns ]

5.9 Hamilton Paths and Cycles in Quasi-Transitive Digraphs 267
has a cycle subdigraph which covers at least pc(Qj) vertices of Knj for every j = 1, 2, . . . , s.
Proof: Suppose that D has a Hamilton cycle H. For every j = 1, 2, . . . , s, V (Qj)∩H is a kj-path factor Fj of Qj. By the deﬁnition of the path covering number, we have kj ≥ pc(Qj). For every j = 1, 2, . . . , s, the deletion of the arcs between end-vertices of all paths in Fj except for the paths themselves, and then path-contraction of all paths in Fj transforms H into a cycle of S having at least pc(Qj) vertices of Knj for every j = 1, 2, . . . s.
Suppose now that S has a cycle subdigraph L containing pj ≥ pc(Qj) vertices of Knj for every j = 1, 2, . . . s. Since S is a strong extended semicomplete digraph, by Theorem 5.7.7, S has a cycle C such that V (C) = V (L). Clearly, every Qj has a pj-path factor Fj. Replacing, for every j = 1, 2, . . . s, the pj vertices of Knj in C with the paths of Fj, we obtain a hamiltonian cycle in D.
Theorem 5.9.3 can be used to show that the Hamilton cycle problem for quasi-transitive digraphs is polynomial time solvable.
Theorem 5.9.4 (Gutin) [365] There is an O(n4) algorithm which, given a quasi-transitive digraph D, either returns a hamiltonian cycle in D or veriﬁes that no such cycle exists.
The approach used in the proofs of Theorems 5.9.3 and 5.9.4 in [365] can be generalized to a much wider class of digraphs as was observed by Bang-Jensen and Gutin [65]. We follow the main ideas of [65].
Theorem 5.9.5 Let Φ be an extension-closed set of digraphs, i.e. Φext = Φ, including the trivial digraph K1 on one vertex. Suppose that for every digraph H ∈ Φ we have pcc(H) = pc(H). Let D be a totally Φ-decomposable digraph. Then, given a total Φ-decomposition of D, the path covering number of D can be calculated and a minimum path factor found in time O(n4).
Proof: We prove this theorem by induction on n. For n = 1 the claim is trivial.
Let D be a totally Φ-decomposable digraph and let D = R[H1, . . . , Hr] be a Φ-decomposition of D such that R ∈ Φ, r = |V (R)| and every Hi (of order ni) is totally Φ-decomposable. A pc(D)-path factor of D restricted to every Hi corresponds to a disjoint collection of some pi paths covering V (Hi). Hence, we have pc(Hi) ≤ pi ≤ ni. Therefore, arguing similarly to that in the proof of Theorem 5.9.3, we obtain
pc(D) = min{pc(R[Kp1 , . . . , Kpr ]) : pc(Hi) ≤ pi ≤ ni, i = 1, . . . , r}.
Since Φ is extension-closed, and since, for every digraph Q ∈ Φ, pc(Q) = pcc(Q), we obtain

268 5. Hamiltonicity and Related Problems
pc(D) = min{pcc(R[Kp1 , . . . , Kpr ]) : pc(Hi) ≤ pi ≤ ni, i = 1, . . . , r}. (5.10)
By the result of Exercise 3.60, given the lower and upper bounds pc(Hi) and ni (i = 1, . . . , r), we can ﬁnd the minimum in (5.10) and thus pc(D) in time O(n3). Let T (n) be the time needed to ﬁnd the path covering number of a totally Φ-decomposable digraph of order n. Then, by (5.10),
r
T (n) = O(n3) + T (ni).
i=1
Furthermore, T (1) = O(1). Hence T (n) = O(n4).
Recall (see Section 4.12) that Φ0 (Φ2) is the family of all semicomplete multipartite, extended locally semicomplete and acyclic digraphs (semicomplete bipartite, extended locally semicomplete and acyclic digraphs). Clearly, both families of digraphs are extension-closed. As we know, pc(D) = pcc(D) for every semicomplete multipartite digraph D (see Theorem 5.7.2), for every extended locally semicomplete digraph D (by Theorem 5.8.3) and every acyclic digraph D (which is trivial). Notice that one can check whether a digraph D is totally Φ0-decomposable (totally Φ2-decomposable) and, if this is the case, ﬁnd a total Φ0-decomposition (Φ2-decomposition) in time O(n4) (see Section 4.12). Therefore, Theorem 5.9.5 implies the following theorem by Bang-Jensen and Gutin:
Theorem 5.9.6 [66] The path covering number of a totally Φ0-decomposable digraph can be calculated in time O(n4).
Corollary 5.9.7 [66] One can verify whether a totally Φ2-decomposable digraph is hamiltonian in time O(n4).
Proof: Let D = R[H1, . . . , Hr], r = |R|, be a decomposition of a strong digraph D (r ≥ 2). Then, D is hamiltonian if and only if the following family S of digraphs contains a hamiltonian digraph:
S = {R[Kp1 , . . . , Kpr ] : pc(Hi) ≤ pi ≤ |V (Hi)|, i = 1, . . . , r}.
Now suppose that D is a totally Φ2-decomposable digraph. Then, every digraph of the form R[Kp1 , . . . , Kpr ] is in Φ2. We know (see Theorems 5.7.4 and 5.8.1) that every digraph in Φ2 is hamiltonian if and only if it is strong and contains a cycle factor. Thus, all we need is to verify whether there is a digraph in S containing a cycle factor. It is easily seen that there is a digraph in S containing a cycle factor if and only if there is a circulation in the network formed from R by adding lower bounds pc(Hi) and upper bounds |V (Hi)| to the vertex vi of R for every i = 1, . . . , r. Since the lower bounds can be

5.10 Vertex-Heaviest Paths and Cycles in Quasi-Transitive Digraphs 269
found in time O(n4) (see Theorem 5.9.5) and the existence of a circulation checked in time O(n3) (see Exercise 3.31), we obtain the required complexity O(n4).
Since every quasi-transitive digraph is totally Φ2-decomposable this theorem immediately implies Theorem 5.9.4. Note that the minimum path factors in Theorem 5.9.5 can be found in time O(n4). Also, a hamiltonian cycle in a hamiltonian totally Φ2-decomposable digraph can be constructed in time O(n4).

5.10 Vertex-Heaviest Paths and Cycles in Quasi-Transitive Digraphs

The approach described in the previous section seems to be of not suﬃcient power to allow us to construct polynomial time algorithms for longest paths and cycles in quasi-transitive digraphs and their generalizations. A more powerful method that leads to such algorithms was ﬁrst suggested by Bang-Jensen and Gutin [63]. In this section, we describe the method in [63].
¿From now on, assume that every digraph D we consider has non-negative weights w(.) on the vertices. Recall that the (vertex-)weight w(H) of a subdigraph of D is the sum of the weights of its vertices. For a positive integer k, the symbol wk(D) denotes the weight of a heaviest k-path subdigraph of D, i.e. one with the maximum weight among all k-path subdigraphs. For convenience we deﬁne w0(D) = 0. We consider the following problem which we call the HPS problem. Given a digraph D on n vertices, ﬁnd a heaviest k-path subdigraph of D for every k = 1, 2, . . . , n.

Theorem 5.10.1 [63] Let Φ be a set of digraphs including the digraph on one vertex. Suppose that Φ = Φext and, for every D ∈ Φ on n vertices,

wk+1(D) − wk(D) ≤ wk(D) − wk−1(D),

(5.11)

where k = 1, 2, . . . , n − 1. If there is a constant s ≥ 2 so that, for every L ∈ Φ, the HPS problem can be solved in time O(|V (L)|s), then, for every
totally Φ-decomposable digraph D, the HPS problem can be solved in time O(|V (D)|s+1), provided we are given a total Φ-decomposition of D.

Proof: Let D = R[H1, . . . , Hr] be a decomposition of D, where R ∈ Φ and Hi is totally Φ-decomposable and has ni vertices (i = 1, . . . , r). Set D0 = R[E1, . . . , Er], where Ei is the digraph with ni vertices and no arcs. Assign new weights to the vertices of D0 as follows. The ith vertex of Ej is assigned the weight

wij = wi(Hj) − wi−1(Hj), j = 1, . . . , r; i = 1, . . . , nj.

270 5. Hamiltonicity and Related Problems

We show that, given solutions of the HPS problem for H1, . . . , Hr and D0, one can easily construct a solution of the HPS problem for D. This will lead
to a recursive algorithm as desired.
Let Fk be a heaviest k-path subdigraph of D0 and let mj be the number of vertices in Fk, which belong to Ej (j = 1, . . . , r). By (5.11), wij ≥ wqj whenever q > i. Therefore, using that all vertices in Ej are similar, we can always change the vertices of Fk so that Fk contains precisely the ﬁrst mj vertices of Ej for each j = 1, . . . , r. Assume now that this is the case. Now, for each j = 1, . . . , r, replace the vertices of Ej in Fk by a heaviest mj-path subdigraph of Hj. This replacement provides a k-path subdigraph Tk of D. It is easy to check that

r mj

r

w(Fk) =

wij = wmj (Hj ) = w(Tk) ≤ wk(D).

j=1 i=1

j=1

So, the weight of a heaviest k-path subdigraph of D0 is at most wk(D). Analogously, starting with a heaviest k-path subdigraph of D, one can prove that the weight of a heaviest k-path subdigraph of D0 is at least wk(D). Therefore, Tk is a heaviest k-path subdigraph of D.
The arguments above lead to the following recursive algorithm called AHPS .
1. Use the total Φ-decomposition of D to ﬁnd the decomposition D = R[H1, . . . , Hr].
2. Solve the HPS problem for H1, . . . , Hr using AHPS . 3. Form D0 (with the weights wij) and solve the HPS problem for D0 using
an O(|V (D)|s)-time algorithm. Change the solutions Fk (if it is necessary) so that each of Fk contains the ﬁrst vertices of Ej without ‘blanks’, for each j = 1, . . . , r. 4. Using the solutions obtained in Step 2, transform every Fk into a k-path subdigraph Tk of D as in the discussion above.
It is easy to check that the complexity of Algorithm AHPS is O(|D|s+1).

Using Theorem 5.10.1, we will prove the following:
Theorem 5.10.2 (Bang-Jensen and Gutin) [63] For a quasi-transitive digraph D on n vertices, the following two problems can be solved in time O(n5):
(a) For every k = 1, 2, . . . , n, ﬁnd a heaviest k-path subdigraph of D. (b) Find a heaviest cycle of D.

Let Ψ be the class of all transitive oriented graphs and all extended semicomplete digraphs. It follows from Theorem 4.8.5 that every quasi-transitive

5.10 Vertex-Heaviest Paths and Cycles in Quasi-Transitive Digraphs 271
digraph is totally Ψ -decomposable. Thus, to prove the ﬁrst part of Theorem 5.10.2, it suﬃces to show that every digraph D ∈ Ψ satisﬁes the conditions of Theorem 5.10.1 with s = 4.
Proof of Part (a) of Theorem 5.10.2: Consider a digraph D ∈ Ψ ext on n vertices. We show that D satisﬁes the conditions of Theorem 5.10.1 with s = 4. A total Ψ -decomposition of D can be found in O(n4), see Section 4.12. For a non-negative integer k, let wk(D) denote the weight of a heaviest k-path-cycle subdigraph of D.
Let D be the digraph obtained from D by the vertex splitting procedure. In other words, we replace every vertex v of D by the arc v v such that v dominates a vertex u if and only if v→u. Also, we deﬁne w(v v ) = w(v) for every v ∈ V (D) and w(v u ) = 0 for every pair u, v of distinct vertices of D. Construct a network ND as follows. Add a pair s, t of new vertices to D . For each vertex v of D, we add the arcs (s, v ) and (v , t) to D . Assign capacity one to each arc of ND. Finally, assign cost zero to every arc adjacent to either s or t and cost c(a) = −w(a) for each arc a ∈ A(D ).
By Exercise 3.64, we can ﬁnd a maximum weight cycle subdigraph L in D in time O(n3). Since s and t cannot be on any cycle in ND, the digraph L corresponds to the minimum cost circulation f0 in ND (see Theorem 3.3.1). Starting from f0 and using the buildup algorithm introduced in Section 3.10 we can construct, in time O(n4), minimum cost ﬂows f1, . . . , fn of values 1, . . . , n in ND. By Theorem 3.3.1, every fk is the sum of k ﬂows of value 1 along paths from the source s to the sink t and a number of cycle ﬂows. Hence, fk provides a collection Fk of k paths and a number of cycles such that the paths and the cycles have no common vertices, except the source and the sink of the network. Moreover, by the deﬁnition of ND, none of the cycles contain the source or the sink. It follows from the deﬁnition of ND and the fact that fk is a minimum cost ﬂow in ND that the paths and the cycles in {Q − {s, t} : Q ∈ Fk} form a heaviest k-path-cycle subdigraph Lk in D. In particular, c(fk) = −wk(D) for every k = 1, . . . , n.
If D is an extended semicomplete digraph then, by Theorem 5.7.1, for every k = 1, . . . , n, we can construct a k-path subdigraph Qk so that V (Qk) = V (Lk). If D is acyclic then just let Qk = Lk. Obviously, Qk is a heaviest kpath subdigraph of D. Note that Q1, . . . , Qn can be found in time O(n4). Since wk(D) = wk(D) = −c(fk), it follows from Proposition 3.10.7 that (5.11) holds.
The proof of the complexity bound O(n5) is left as Exercise 5.50.
Proof of Part (b) of Theorem 5.10.2: Let D be a strong quasi-transitive digraph on n ≥ 2 vertices and let D = R[H1, . . . , Hr], where R is semicomplete, H1, . . . , Hr are quasi-transitive digraphs and r ≥ 2. (If D is not strong, then we consider the strong components of D one by one.) We claim that D has a heaviest cycle C containing vertices from more than one of the digraphs H1, . . . , Hr. Indeed, let C be a heaviest cycle of D completely contained in a Hi. Since D is strong, there is a path in D, of length at least 2, starting

272 5. Hamiltonicity and Related Problems
at a vertex x of C , terminating at a vertex y of C and containing no other vertices from Hi. Hence, by the deﬁnition of R[H1, . . . , Hr], there is a path of length at least 2, starting at x, terminating at the successor x of x (in C ) and containing no other vertices from Hi. Clearly, the last path and C minus the arc (x, x ) form a cycle as desired.
Now it is easy to see the correctness of the following algorithm for ﬁnding a heaviest cycle of D. Note that our approach ﬁnds a heaviest cycle C which contains vertices from at least two Hi’s. By the remark above this is also a heaviest cycle of D.
1. Solve the HPS problem for H1, . . . , Hr using Algorithm AHPS . 2. Form D0 with the weights wij, as in the proof of Theorem 5.10.1, and
the network ND0 . 3. Construct a minimum cost circulation f0 in ND0 . Deleting the source and
sink of ND0 , form a heaviest cycle subdigraph Z of D0. 4. Using Theorem 5.7.7, construct a heaviest cycle C of D0 by merging the
cycles in Z. 5. Using the solutions of Step 1 and the cycle C, form a heaviest cycle of D
(analogously to what we did in the proof of Theorem 5.10.1).
The proof that the complexity bound is O(n5) is left as Exercise 5.50.
Theorem 5.10.2 implies the following:
Corollary 5.10.3 [63] For a quasi-transitive digraph D on n vertices, the following problems can be solved in time O(n5).
(a) Find a longest path of D. (b) Find a longest cycle of D. (c) For a set X ⊆ V (D), check if D contains a cycle through X and construct
one (if it exists).
Proof: Exercise 5.51.
Theorem 5.10.2 can be generalized to the following result by Bang-Jensen and Gutin (see the deﬁnitions of Φi-decomposable digraphs in Section 4.12):
Theorem 5.10.4 [62] Let D be a digraph of order n with non-negative weights on the vertices. Then
(a) If D is totally Φ0-decomposable, then for all k = 1, . . . , n, some maximum weight k-path subdigraphs of D can be found in time O(n5).
(b) If D is totally Φ0-decomposable and X ⊆ V (D), then we can check if D has a path covering all the vertices of X and ﬁnd one (if it exists) in time O(n5).
(c) If D is totally Φ2-decomposable, then a maximum weight cycle of D can be found in time O(n5).
(d) If D is totally Φ2-decomposable and X ⊆ V (D), then a cycle of D containing all vertices of X can be found in time O(n5) (if it exists).

5.11 Hamilton Paths and Cycles in Various Classes of Digraphs 273
(e) If D is totally Φ1-decomposable, then a longest cycle of D can be found in time O(n5).
5.11 Hamilton Paths and Cycles in Various Classes of Digraphs
Gr¨otschel and Harary [336] showed that only very few bridgeless graphs have the property that every strong orientation is hamiltonian.
Theorem 5.11.1 [336] Let G be a bridgeless graph. If G is neither a cycle nor a complete graph, then G contains a strong non-hamiltonian orientation.
However, there are quite a number of graphs with the property that every strong orientation is traceable.
Theorem 5.11.2 (Thomassen) [699] Let G be a 2-edge-connected undirected graph such that every connected component of G is either bipartite or an odd cycle of length at least 5. Also assume that G has at most one non-bipartite component. Then every strong orientation of G is traceable.
To prove Theorem 5.11.2, we need the following lemma whose proof is left as Exercise 5.49.
Lemma 5.11.3 Let L be the complement of an odd cycle u1u2 . . . u2k+1u1, k ≥ 2, and let F be an orientation of L. Then, there are i = j ∈ {1, 2, . . . , 2k+ 1} such that uiujui+1 or ui+1ujui is a path in F .
Proof of Theorem 5.11.2: Let G1, . . . , Gr be bipartite connected components of G such that Ai, Bi are partite sets of Gi, i = 1, . . . , r. Let Z = u1u2 . . . u2k+1u1 be the odd cycle in G, if one exists.
Let H be a strong orientation of G. Deﬁne a partition A, B of V (G) as follows. Let A∗ = A1 ∪ . . . ∪ Ar and B∗ = B1 ∪ . . . ∪ Br. If Z does not exist (in G), then A = A∗, B = B∗. Otherwise, by Lemma 5.11.3, without loss of generality, we have that there exists a j such that u1uju2 is a directed path in H. Let A = A∗ ∪ {u3, u5, . . . , u2k+1}, B = B∗ ∪ {u2, u4, . . . , u2k} ∪ {u1}. By this construction, H A is a tournament and H B is either a tournament (if Z does not exist) or H has a path xzy such that x, y ∈ B and xy ∈ G B .
We now show that H has a cycle C including all vertices of A. If H A is strong, then C exists by Camion’s theorem (see Theorem 1.5.2). If H A is not strong, then there is a shortest path P in H from the terminal strong component of H A to its initial strong component. Let P start at u and terminate at w. (Clearly, P does not have vertices other than u and w in

274 5. Hamiltonicity and Related Problems
these two components.) It is easy to check that H (A − V (P )) ∪ {u, w} has a hamiltonian (w, u)-path Q. The paths P and Q form a cycle containing A. Let C be a longest cycle containing A.
If H − V (C) is a tournament, then some vertex of C dominates a vertex v of the initial strong component of H − V (C). The tournament H − V (C) has a hamiltonian path starting at v; this path can be extended to a hamiltonian path in H. Thus, we may assume that H − V (C) is not a tournament. In particular, x, y ∈ V (H) − V (C). Let C = v1v2 . . . vmv1. We consider two cases.
Case 1: z ∈ V (C). We ﬁrst prove that C contains vertices vi, vi+j such that vi dominates one of x, y and vi+j is dominated by the other one and 1 ≤ j ≤ m − 1. Since G has no triangles, each of z+ and z− is adjacent to at least one of x, y. By the maximality of C, if z+ and y are adjacent, we must have z+→y and then z, z+ is the desired pair. Hence, we may assume that z+ is adjacent to x and, hence, either z, z+ is the desired pair or z+→x. Now considering z− one can prove that either z−, z is the desired pair or z−, z+ is the desired pair.
Among all pairs vi, vi+j satisfying the above property choose one such that j is the smallest possible. We may assume (by interchanging x and y if needed) that vi→x and y→vi+j. We show that j = 1. Assume that j > 1. Because of the minimality of j, x is not dominated by vi+s when 1 ≤ s < j and because of the maximality of C, x does not dominate vi+1. Hence, x is not adjacent to vi+1. Similarly, we can see that y is not adjacent to vi+j−1 and none of the vertices vi+s, 1 ≤ s < j, is dominated by y. Since G has no triangle, j ≥ 3 and vi+1→y and x→vi+j−1; a contradiction to the minimality of j. Thus, we may assume that vi→x, y→vi+1.
We add to the oriented graph H −V (C) the arc yx obtaining a tournament T . Let v be a vertex in the initial strong component of T dominated by a vertex u in C. By Camion’s theorem, T has a hamiltonian path P starting at v and terminating at some vertex w. If yx is not on P , then C[u+, u]P is a hamiltonian path of H. If yx is on P , then P [v, y]C[vi+1, vi]P [x, w] is a hamiltonian path of H.
Case 2: z ∈ V (C). If H − V (C) is strong, then we consider any arc of H between x and C (such an arc exists as the degree of x in G equals 2). If this arc starts (terminates) at x, we add to H − V (C) the arc xy (yx) and consider a hamiltonian cycle in the resulting tournament. Using this together with C and the arc between x and C, it is easy to ﬁnd a hamiltonian path in H.
So we assume that H − V (C) is not strong. Let H1, H2, . . . , Hp be an acyclic ordering of strong components of H − V (C). We may assume without loss of generality (consider the converse of H if needed) that at most one of x, y belongs to V (H1). Clearly, some vertex v in H1 is dominated by a vertex in C. We can ﬁnd a hamiltonian path in H as in the case when H − V (C)

5.11 Hamilton Paths and Cycles in Various Classes of Digraphs 275
is a tournament unless for some i, V (Hi) = {x} and V (Hi+1) = {y} or V (Hi−1) = {y}. But this is impossible due to the existence of xzy.
In this theorem it is important that G does not contain a 3-cycle. Indeed, let M be a multipartite tournament consisting of a strong tournament T with ﬁxed vertex y and triple x1, x2, x3 of independent vertices such that N +(xi) = {y} for every i = 1, 2, 3. Since |N +({x1, x2, x3})| < 2 (see Exercise 3.61), M has no 1-path-cycle factor. (Recall that a multipartite tournament is traceable if and only if it has a 1-path-cycle factor, see Theorem 5.7.1.) However, Thomassen [699] remarks that Theorem 5.11.2 is perhaps far from being the best possible. He claims that by using the method of the proof of this theorem, it is not diﬃcult to show that any strong orientation of a graph, whose complement is a disjoint union of two 5-cycles and independent vertices, has a hamiltonian path.
Problem 5.11.4 Find a non-trivial extension of Theorem 5.11.2.
We recall that a digraph D is unilateral if for every pair x, y of distinct vertices of D there is a path between x and y (not necessarily both (x, y)-path and (y, x)-path). For some of the graphs in Theorem 5.11.2 not only all strong orientations are traceable, but also all unilateral ones satisfy this property. This was shown by Fink and Lesniak-Foster in the following theorem.
Theorem 5.11.5 [235] Let G be a graph and let F = Q1 ∪ . . . ∪ Qk be a path subgraph of G in which every path Qi is of length 1 or 2. Then an orientation of G − ∪ki=1E(Qi) is traceable if and only if it is unilateral.
Erd˝os and Trotter [223] investigated when the Cartesian product of two directed cycles is hamiltonian. They proved the following (below gcd means the greatest common divisor):
Theorem 5.11.6 Let d = gcd(k, m). The Cartesian product Ck × Cm is hamiltonian if and only if d ≥ 2 and there exist positive integers d1, d2 such that d1 + d2 = d and gcd(k, d1) = gcd(m, d2) = 1.
For a generalization of Theorem 5.11.6, see Theorem 10.10.5.
In Section 4.6, we introduced de Bruijn digraphs DB(d, t), Kautz digraphs DK (d, t) as well as their generalizations: DG(d, n), DI (d, n), D(d, n, q, r). (The digraphs D(d, n, 1, r) are special circulant digraphs.) The consecutive-d digraphs D(d, n, q, r) are the most general among the digraphs listed above. Thus, we restrict our attention to these digraphs. Du, Hsu and Hwang [206] proved the following result for digraphs D(d, n, q, r).
Theorem 5.11.7 If gcd(n, q) ≥ 2, or gcd(n, q) = 1 and q ≥ 5, then D(d, n, q, r) is hamiltonian.

276 5. Hamiltonicity and Related Problems
Hwang [439] as well as Du and Hsu [205] characterized hamiltonian digraphs D(d, n, q, r) for gcd(n, q) = 1 and d = 1 (d = 2, respectively). Chang, Hwang and Tong [143] showed that every digraph D(4, n, q, r) is hamiltonian. They also gave examples of digraphs D(3, n, q, r), which are not hamiltonian [142].
We ﬁnish this chapter by the following result by Cooper, Frieze and Molloy. For a ﬁxed integer r and a property P , we say that almost all r-regular digraphs satisfy P if the fraction of r-regular digraphs of order n with P (among all r-regular digraphs of order n) tends to 1 when n→∞.
Theorem 5.11.8 [167] For a ﬁxed integer r ≥ 3, almost all r-regular digraphs are hamiltonian.
It is easy to show that almost all 1-regular digraphs are non-hamiltonian (Exercise 5.54). The fact that almost all 2-regular digraphs have no hamiltonian cycle follows directly from the fact that the expected number of hamiltonian cycles in a randomly and uniformly chosen 2-regular digraph tends to zero (for details see Section 3 of Chapter 4 in the book [14] by Alon and Spencer).
5.12 Exercises
5.1. (+) Let Gk be an undirected graph with vertex set X ∪ Z ∪ Y , where X = {x1, x2, . . . , xk}, Y = {y1, y2, . . . , yk+1} and Z = {z1, z2, . . . , zk+1}, and edge set {xv : x ∈ X, v ∈ Y ∪ Z} ∪ {yizi : i = 1, 2, . . . , k + 1}.
↔
Let Dk =Gk. Prove that qhn(Dk) = k (Gutin and Yeo [379]).
5.2. Prove Theorem 5.1.6.
5.3. Prove Theorem 5.1.7.
5.4. Let a digraph Z have V (Z) = {1, 2, . . . , 6} and A(Z) = {ij : j − i = 2 or 3 (mod) 6}. Find qhn(Z). Is Z hamiltonian?
5.5. (+) Prove without using Theorem 5.2.1 that every acyclic digraph D has an α(D)-path factor. Hint: use Theorem 3.8.2.
5.6. A reﬁnement of the Gallai-Milgram theorem. We say that a path P from x to y is end-extendable if there exists another path P such that P = P [x, y]. If no such path P exists then P is non-end-extendable. Prove the following slight strengthening of the Gallai-Milgram theorem.
Proposition 5.12.1 Every digraph D with independence number α(D) = α has a path factor P1, P2, . . . , Pt, t ≤ α, such that P1 is a non-end-extendable path in D and Pi is a non-end-extendable path in D − V (P1) ∪ . . . ∪ V (Pi−1) for 2 ≤ i ≤ t.
Hint: show how to modify a given path factor into one with the property above.

5.12 Exercises 277
5.7. Show that Theorem 5.2.5 implies Theorem 5.2.1.
5.8. Scheduling airplanes. An airport has a certain number of runways that can be used for landing of airplanes. How would you schedule airplanes to use the minimum number of the runways (in order to possibly have some spare ones permanently ready for emergency landings) if every use of a runway can be determined as a ﬁxed time interval ?
5.9. (−) Show by examples that property (1) and (2) of Lemma 5.3.3 need not hold for arbitrary acyclic digraphs.
5.10. Using the proof of Theorem 5.4.2, Lemma 5.4.1 and Proposition 4.9.3, prove Corollary 5.4.3.
5.11. Prove Theorem 5.2.4 for path-mergeable digraphs.
5.12. Prove that every strong locally in-semicomplete digraph has a 2-connected underlying graph.
5.13. Give a direct proof of the following result. A locally semicomplete digraph has a hamiltonian cycle if and only if it is strong (Bang-Jensen [44]).
5.14. Give a direct proof of the following result. A locally semicomplete digraph has a hamiltonian path if and only if it is connected (Bang-Jensen [44]). Hint: use Lemma 4.10.2.
5.15. Give a direct proof of the following result. One can ﬁnd a longest cycle is a semicomplete digraph in time O(n2) (Manoussakis [546]).
5.16. (−) Using Proposition 5.0.3 and Theorem 5.6.1 prove the following:
Proposition 5.12.2 Let D be a digraph of order n. Suppose that, for every dominated pair of non-adjacent vertices {x, y}, either d(x) ≥ n−1 and d(y) ≥ n − 2 or d(x) ≥ n − 2 and d(y) ≥ n − 1. Then D is traceable.
5.17. Prove that the digraph Qn introduced before Theorem 5.6.1 is strong and non-hamiltonian.
5.18. Prove Lemma 5.6.24.
5.19. Find an inﬁnite family of hamiltonian digraphs that satisfy the conditions of both Theorem 5.6.1 and Theorem 5.6.5, but do not satisfy the conditions of Theorem 5.6.7 and are neither locally out-semicomplete nor locally insemicomplete (Bang-Jensen, Gutin and Li [69]).
5.20. Find an inﬁnite family of hamiltonian digraphs that satisfy the conditions of Theorem 5.6.12, but do not satisfy the conditions of Theorem 5.6.7 (Zhao and Meng [758]).
5.21. Prove Corollaries 5.6.21 and 5.6.22.
5.22. Using Meyniel’s theorem, prove that if a strong digraph D has at least n2 − 3n + 5 arcs, then D is hamiltonian (Lewin [514]).
5.23. Prove that every digraph with more than (n − 1)2 arcs is hamiltonian (Lewin [514]).
5.24. Prove that, if the minimum semi-degree of a digraph D of order n is at least (n + 1)/2, then every arc of D is contained in a Hamilton cycle of D.

278 5. Hamiltonicity and Related Problems
5.25. Construct an inﬁnite family of non-hamiltonian strong digraphs that satisfy both (5.1) and (5.2) (Bermond and Thomassen [115]).
5.26. Prove that every vertex of a semicomplete multipartite digraph D belongs to a longest path in D (Volkmann [729]).
5.27. (+) Give a direct proof of the ﬁrst (non-algorithmic) part of Theorem 5.7.1 (Gutin [358, 363]).
5.28. Show that the multipartite tournament in Figure 5.6 is non-hamiltonian.
5.29. Show that the analogue of Theorem 5.7.7 for semicomplete bipartite digraphs does not hold, i.e., there are a strong semicomplete bipartite digraph D and a maximum cycle subdigraph F in D such that D V (F ) is not hamiltonian (Gutin [362]).
5.30. An oriented graph D = (V, A) is an arc-locally tournament digraph if it has the following two properties: (i) Whenever x, y are distinct vertices and there exists an arc uv ∈ A such that xu, yv ∈ A, there is at least one arc between x and y in D. (ii) Whenever x, y are distinct vertices and there exists an arc zw ∈ A such that zx, wy ∈ A, there is at least one arc between x and y in D. Prove that, if D = (V, A) is a connected arc-local tournament digraph and C is a cycle, then every vertex of V − C is adjacent to a vertex of C.
5.31. (+) Hamiltonian paths and cycles in arc-locally tournament digraphs. Prove the following two theorems by Bang-Jensen [48]:
Theorem 5.12.3 An arc-locally tournament digraph is hamiltonian if and only if it is strong and has a cycle factor.
Theorem 5.12.4 A connected arc-locally tournament digraph is traceable if and only if it has a 1-path-cycle factor.
Hint: use Exercise 5.30 and study the structure of the arcs between disjoint cycles.
5.32. (−) Arc-local tournament digraphs were deﬁned above. Prove that every bipartite tournament is an arc-local tournament digraph.
5.33. Prove Theorem 5.7.13 by induction on t.
5.34. By inspecting all intermediate steps in the proof of Corollary 5.7.16, show that the following statement holds. Let D be a bipartite digraph obtained by taking two disjoint even cycles C = u1u2 . . . u2k−1u2ku1 and Z = v1v2 . . . v2r−1v2rv1 and adding an arc between v2i−1 and u2j and between v2i and u2j−1 (in any direction, possibly one in each direction) for all i = 1, 2, . . . , k and j = 1, 2, . . . , r. D is hamiltonian if and only if it is strong. Moreover, if D is strong, then, given cycles C and Z as above, a hamiltonian cycle of D can be found in time O(|V (C)||V (Z)|) (Gutin [362]).
5.35. Prove Theorem 5.7.7.
5.36. Prove the following generalization of Lemma 5.7.15. If a strong semicomplete multipartite digraph D has a cycle subdigraph F = C1 ∪ . . . ∪ Ct with p(≤ n) vertices, then, for every i, D has a cycle of length at least p − t + 1 covering all vertices of Ci (Bang-Jensen, Gutin and Huang [68]).

5.12 Exercises 279
5.37. Construct an inﬁnite family of semicomplete multipartite digraphs showing that the result of Exercise 5.36 is best possible (Bang-Jensen, Gutin and Huang [68]).
5.38. Using the result of Exercise 5.36, prove that every strong semicomplete multipartite digraph D with 1-path-cycle subdigraph F = P ∪ C1 ∪ . . . ∪ Ct of order p has a path of length at least p − t − 1 starting at the initial vertex of P (Bang-Jensen, Gutin and Huang [68]).
5.39. Prove Theorem 5.7.13.
5.40. Prove the following proposition. Let D be a strong semicomplete multipartite digraph of order n and let r be the cardinality of minimum partite set of D. If for each pair of dominated non-adjacent vertices x, y, d(x) + d(y) ≥ min{2(n − r) + 3, 2n − 1}, then D is hamiltonian (Zhou and Zhang [760]).
5.41. (−)Prove that every oriented graph of minimum in-degree and out-degree k ≥ 2, on at most 2k + 2 vertices, is a multipartite tournament with at most two vertices in each partite set.
5.42. Prove the following theorem due to Jackson:
Theorem 5.12.5 [449] Every oriented graph of minimum in-degree and outdegree k ≥ 2, on at most 2k + 2 vertices, is hamiltonian.
5.43. (−) Check that f (Gk, k) = k − 1, where the digraph Gk and the function f are introduced after Theorem 5.7.27.
5.44. Prove Theorem 5.8.2.
5.45. Characterization of traceable extended locally semicomplete digraphs. Prove Theorem 5.8.3.
5.46. (−) Prove that the following problem is N P-complete: Given a digraph D = (V, A) and a partition V = V1 ∪ . . . ∪ Vp, check whether D has a cycle factor C1 ∪ . . . ∪ Ck such that no cycle Ci is contained in a set Vj, j = 1, 2, . . . , p. Hint: consider an arbitrary vertex x in D and let V1 = V (D) − {x}, V2 = {x}.
5.47. (−) Characterization of traceable quasi-transitive digraphs. Prove Theorem 5.9.2 using Theorem 5.7.1. Hint: see the proof of Theorem 5.9.1.
5.48. (−) Another characterization of traceable quasi-transitive digraphs. Formulate and prove a characterization of traceable quasi-transitive digraphs similar to Theorem 5.9.3.
5.49. Prove Lemma 5.11.3.
5.50. Prove the complexity bound for both parts of Theorem 5.10.2.
5.51. (−) Deduce the results of Corollary 5.10.3 from Theorem 5.10.2.
5.52. Prove that if D is a strong oriented graph of order at least three and D does not contain, as induced subdigraph, any digraph in Figure 5.9, then D is hamiltonian (Kemnitz and Greger [477]). Hint : show that D is locally out-semicomplete and use the characterization of hamiltonian locally out-semicomplete digraphs (Gutin and Yeo [380]).

280 5. Hamiltonicity and Related Problems
Figure 5.9 Forbidden digraphs. Unoriented arcs can be oriented arbitrarily.
5.53. A counterexample to a conjecture from [477]. Consider the tournament D with V (D) = {x1, x2, x3, x4, x5} and A(D) = {x1x2, x2x3, x3x4, x4x5, x5x1, x1x3, x2x4, x3x5, x4x1, x5x2} and any 2-strong tournament T , containing three vertices y1, y2, y3 such that {y1y2, y2y3, y3y1} ⊆ A(T ). Let us construct an oriented graph T ∗ with vertex set V (D) ∪ V (T ) and arc set A(D) ∪ A(T ) ∪ {y1x2, x4y1, y2x2, x4y2, y3x4, x2y3}. Prove that (a) T ∗ is strong. (b) T ∗ does not contain, as induced subdigraph, any orientation of K1,3. (c) For every vertex v in T ∗, T ∗ N (v) is strong. (d) T ∗ is not hamiltonian. (Gutin and Yeo [380])
5.54. (−) Prove that almost all 1-regular digraphs are non-hamiltonian. 5.55. Connected (g, f )-factors in some semicomplete multipartite di-
graphs. Given a digraph D and two positive integers f (x), g(x) for every x ∈ V (D), a subgraph H of D is called a (g, f )-factor if g(x) ≤ d+H (x) = d−H (x) ≤ f (x) for every x ∈ V (D). If f (x) = g(x) = 1 for every x, then a connected (g, f )-factor is a hamiltonian cycle. Prove the following result by Gutin [370]: Theorem 5.12.6 Let D be a semicomplete bipartite digraph or an extended locally in-semicomplete digraph. Then D has a connected (g, f )-factor if and only if D is strongly connected and contains a (g, f )-factor. One can check whether D has a connected (g, f )-factor in O(n3) time.
5.56. Connected (g, f )-factors in quasi-transitive digraphs. The additional terminology used in this exercise are introduced in the previous exercise. Prove the following assertion. The connected (g, f )-factor problem is polynomial time solvable for quasi-transitive digraphs (Gutin [370]).
5.57. Let G be the complete graph on 5 vertices with one edge deleted. Find a strong orientation of G which is not hamiltonian.

6. Hamiltonian Reﬁnements
In this chapter we discuss results which in one way or another generalize the notion of hamiltonicity. As can be seen from the content of the chapter, there are quite a number of such topics. In fact many more could be added, but we feel that the ones included here are representative.
We start by studying hamiltonian paths with one or more end vertices prescribed, that is, we study paths which start in a prescribed vertex, paths which connect two prescribed vertices and ﬁnally paths which start and end in prescribed vertices. Not surprisingly, the level of diﬃculty of these problems increase when we ﬁx more and more end vertices. Even for tournaments the last problem is still not completely solved.
The next topic is pancyclicity, which may be seen as a generalization of hamiltonicity. We ﬁrst study digraphs of order n which have cycles of all lengths from 3 to n and subsequently digraphs in which every vertex is in a k-cycle for every k ∈ {3, 4, . . . , n}. After that we discuss brieﬂy arcpancyclicity where we want cycles of all possible lengths from 3 to n through each arc. These problems are very hard and almost all known results deal with tournaments, generalizations of tournaments or digraphs which are almost complete.
Another topic covered is hamiltonian cycles which either avoid or contain certain prescribed arcs. These problems are very diﬃcult even for tournaments. As we will show in Section 6.7, some of these results imply that the problem of deciding the existence of a hamiltonian cycle in a digraph obtained from a semicomplete digraph by adding just a few new vertices and some arcs is already very diﬃcult. In fact the problem is highly non-trivial even if we add just one extra vertex. We also discuss various results concerning arc-disjoint hamiltonian paths and cycles, in particular the conjecture by Kelly that the arcs of every regular tournament can be decomposed into arc-disjoint hamiltonian cycles.
We then move on to orientations of hamiltonian cycles. We discuss in some detail one of the main tools in a recent proof by Havet and Thomass´e of the deep result that every tournament on at least 8 vertices contains every orientation of a hamiltonian undirected path.
After this we brieﬂy discuss another relative of the hamiltonian cycle problem: the problem of ﬁnding a set of few cycles that cover all vertices of a

282 6. Hamiltonian Reﬁnements
digraph. We study both the case when these cycles are allowed to intersect, pairwise but only in a path, and the case when we want the cycles to be disjoint.
The last two sections deal with applications. First we show that for every strong digraph D belonging to one of several classes of generalizations of tournaments, one can ﬁnd a spanning subgraph which is strongly connected and has the minimum number of arcs among all such subdigraphs of D in polynomial time. For general digraphs this problem is N P-complete since it generalizes the hamiltonian cycle problem. Finally we address the TSP problem and show that some widely used heuristics for the problem ﬁnd tours which are better than a fraction (depending on n) of all possible tours, thus indicating that the solutions they ﬁnd may be expected to be of reasonable quality.
6.1 Hamiltonian Paths with a Prescribed End-Vertex
We begin with hamiltonian paths starting or ending at a prescribed vertex. Besides being of independent interest, results of this type are also useful in connection with results on hamiltonian paths with both end vertices prescribed (but not necessarily the direction of the path).
To get a feeling for arguing with extended tournament structure, we start with the following easy result.
Proposition 6.1.1 Suppose that a strong extended tournament D has an (x, y)-path P such that D − P has a cycle factor. Then D has a hamiltonian path starting at x and a hamiltonian path ending at y.
Proof: Choose a path P starting at x as long as possible so that D − P has a factor which consists of minimal number of cycles C1, C2, . . . , Cq. Then, by Proposition 5.7.18, we may assume that Ci⇒Cj when i < j. Let P = u1u2 . . . ur where u1 = x. If q = 0, then, by the assumption on P , ur is completely dominated by C1. Since D is strong, there is an arc from P to C1. Let ui be the vertex of P with largest index i < r such that there is an arc uiz from ui to C1. Let z− be the predecessor of z on C1. Since ui+1 has no arc to C1, we obtain z−→ui+1. Here we used the property that nonadjacent vertices of an extended semicomplete digraph are similar (deﬁned in Chapter 1). Hence C1[z, z−] can be inserted between ui and ui+1, contradicting the choice of P . So q = 0 and P is a hamiltonian path starting at x. A similar argument can be applied to show that D has a hamiltonian path ending at y.
The following result, due to Bang-Jensen and Gutin, shows that, for digraphs that are either semicomplete bipartite or extended locally semicomplete, there is a nice necessary and suﬃcient condition for the existence of a hamiltonian path starting at a prescribed vertex.

6.1 Hamiltonian Paths with a Prescribed End-Vertex 283
Theorem 6.1.2 [66] Let D = (V, A) be a digraph which is either semicomplete bipartite or extended locally out-semicomplete and let x ∈ V . Then D has a hamiltonian path starting at x if and only if D contains a 1-path-cycle factor F of D such that the path of F starts at x, and, for every vertex y of V − {x}, there is an (x, y)-path1 in D. Moreover, if D has a hamiltonian path starting at x, then, given a 1-path-cycle factor F of D such that the path of F starts at x, the desired hamiltonian path can be found in time O(n2).
Proof: As the necessity is clear, we will only prove the suﬃciency. Suppose that F = P ∪ C1 ∪ ... ∪ Ct is a 1-path-cycle factor of D that consists of a path P starting at x and cycles Ci, i = 1, ..., t. Suppose also that every vertex of D is reachable from x. Then, without loss of generality, there is a vertex of P that dominates a vertex of C1. Let P = x1x2 . . . xp, C1 = y1y2 . . . yqy1, where x = x1 and xk→ys for some k ∈ {1, 2, . . . , p}, s ∈ {1, 2, . . . , q}. We show how to ﬁnd a new path starting at x which contains all the vertices of V (P ) ∪ V (C1). Repeating this process we obtain the desired path. Clearly, we may assume that k < p and that xp has no arc to V (C1).
Assume ﬁrst that D is an extended locally out-semicomplete digraph. If P has a vertex xi which is similar to a vertex yj in C1, then xiyj+1, yjxi+1 ∈ A and using these arcs we see that P [x1, xi]C[yj+1, yj]P [xi+1, xp] is a path starting from x and containing all the vertices of P ∪ C1. If P has no vertex that is similar to a vertex in C1, then we can apply the result of Exercise 4.37 to P [xk, xp] and xkC1[ys, ys−1] and merge these two paths into a path R starting from xk and containing all the vertices of P [xk, xp] ∪ C1. Now, P [x1, xk−1]R is a path starting at x and containing all the vertices of P ∪ C1.
Suppose now that D is semicomplete bipartite. Then either ys−1→xk+1, which implies that P [x1, xk]C1[ys, ys−1]P [xk+1, xp] is a path starting at x and covering all the vertices of P ∪ C1, or xk+1→ys−1. In the latter case, we consider the arc between xk+2 and ys−2. If ys−2→xk+2 we can construct the desired path, otherwise we continue to consider arcs between xk+3 and ys−3 and so on. If we do not construct the desired path in this way, then we ﬁnd that the last vertex of P dominates a vertex in C1, contradicting our assumption above.
Using the process above and breadth-ﬁrst search, one can construct an O(n2)-algorithm for ﬁnding the desired hamiltonian path starting at x.
Just as the problem of ﬁnding a minimum path factor generalizes the hamiltonian path problem, we may generalize the problem of ﬁnding a hamiltonian path starting at a certain vertex to the problem of ﬁnding a path factor with as few paths as possible such that one of these paths starts at a speciﬁed vertex x. We say that a path factor starts at x if one of its paths starts at x and denote by pcx(D) the minimum number of paths in a path factor that
1 This is equivalent to saying that D has an out-branching with root x.

284 6. Hamiltonian Reﬁnements
starts at x. The problem of ﬁnding a path factor with pcx(D) paths which starts at x in a digraph D is called the PFx problem2.
Let Φ1 be the union of all semicomplete bipartite, extended locally semicomplete and acyclic digraphs. Using an approach similar to that taken in Section 5.10, Bang-Jensen and Gutin proved the following.
Theorem 6.1.3 [66] Let D be a totally Φ1-decomposable digraph. Then the PFx problem for D can be solved in time O(|V (D)|4).
6.2 Weakly Hamiltonian-Connected Digraphs
Recall that an [x, y]-path in a digraph D = (V, A) is a path which either starts at x and ends at y or oppositely. We say that D is weakly hamiltonian-connected if it has a hamiltonian [x, y]-path (also called an [x, y]-hamiltonian path) for every choice of distinct vertices x, y ∈ V . Obviously deciding whether a digraph contains an [x, y]-hamiltonian path for some x, y is not easier than determining whether D has any hamiltonian path and hence for general digraphs this is an N P-complete problem by Theorem 5.0.2 (see also Exercise 6.3). In this section we discuss various results that have been obtained for generalizations of tournaments. All of these results imply polynomial algorithms for ﬁnding the desired paths.
6.2.1 Results for Extended Tournaments
We start with a theorem due to Thomassen [698] which has been generalized to several classes of generalizations of tournaments as will be seen in the following subsections.
Theorem 6.2.1 [698] Let D = (V, A) be a tournament and let x1, x2 be distinct vertices of D. Then D has an [x1, x2]-hamiltonian path if and only if none of the following holds.
(a) D is not strong and either none of x1, x2 belongs to the initial strong component of D or none of x1, x2 belongs to the terminal strong component (or both).
(b) D is strong and for i = 1 or 2, D − xi is not strong and x3−i belongs to neither the initial nor the terminal strong component of D − xi.
(c) D is isomorphic to one of the two tournaments in Figure 6.1 (possibly after interchanging the names of x1 and x2).
The following easy corollary is left as Exercise 6.4:
2 Observe that pcx(D) ≤ pc(D) + 1 holds for every digraph D.

6.2 Weakly Hamiltonian-Connected Digraphs 285
x1
x2
Figure 6.1 The exceptional tournaments in Theorem 6.2.1. The edge between x1 and x2 can be oriented arbitrarily.
Corollary 6.2.2 [698] Let D be a strong tournament and let x, y, z be distinct vertices of D. Then D has a hamiltonian path connecting two of the vertices in the set {x, y, z}.
Thomassen [698] used a nice trick in his proof of Theorem 6.2.1 by using Corollary 6.2.2 in the induction proof. We will give his proof below. Proof of Theorem 6.2.1: Let x1, x2 be distinct vertices in a tournament D. It is easy to check that if any of (a)-(c) holds, then there is no [x1, x2]hamiltonian path in D.
Suppose now that none of (a)-(c) hold. We prove by induction on n that D has an [x1, x2]-hamiltonian path. This is easy to show when n ≤ 4 so assume now that n ≥ 5 and consider the induction step with the obvious induction hypothesis. If D is not strong then let D1, D2, . . . , Ds, s ≥ 2 be the acyclic ordering of the strong components of D. Since (a) does not hold, we may assume without loss of generality that x1 ∈ V (D1) and x2 ∈ V (Ds). Observe that D1 has a hamiltonian path P1 starting at x1 (Exercise 6.1) and Ds has a hamiltonian path Ps ending at x2. Let Pi be a hamiltonian path in Di for each i = 2, 3, . . . , s−1. Then P1P2 . . . Ps−1Ps is an (x1, x2)-hamiltonian path.
If D − xi is not strong for i = 1 or 2, then we may assume without loss of generality that i = 1. Let D1, . . . , Dp, p ≥ 2 be the acyclic ordering of the strong components of D − x1. Since (b) does not hold we may assume, by considering the converse of D if necessary, that x2 belongs to Dp. Let y be any out-neighbour of x1 in D1. Our argument for the previous case implies that there is a (y, x2)-hamiltonian path P in D − x1, implying that x1P is an (x1, x2)-hamiltonian path in D. Hence we may assume that D − xi is strong for i = 1, 2.
If D − {x1, x2} is not strong, then it is easy to prove that D has an (xi, x3−i)-hamiltonian path for i = 1, 2 (Exercise 6.2). Hence we only need

286 6. Hamiltonian Reﬁnements

to consider the case when D = D − {x1, x2} is strong. Let u1u2 . . . un−2u1 be a hamiltonian cycle of D . By considering the converse if necessary, we
may assume that x1 dominates u1. Then D has an (x1, x2)-hamiltonian path unless x2 dominates un−2 so we may assume that is the case. By the same argument we see that either the desired path exists or x1 dominates un−3 and x2 dominates un−4. Now it is easy to see that either the desired path exists, or n − 2 is even and we have x1→{u1, u3, . . . , un−3}, x2→{u2, u4, . . . , un−2}. If x1 or x2 dominates any vertex other than those described above, then by repeating the argument above we see that either the desired path exists or
{x1, x2}→V (C), which is impossible since D is strong. Hence we may assume that

{u2, u4, . . . , un−2}→ x1 →{u1, u3, . . . , un−3}, {u1, u3, . . . , un−3}→ x2 →{u2, u4, . . . , un−2}

(6.1)

If n = 6, then using that (c) does not hold, it is easy to see that the desired path exists. So we may assume that n ≥ 8. By induction, the theorem and hence also Corollary 6.2.2 holds for all tournaments on n − 2 vertices. Thus D has a hamiltonian path P which starts and ends in the set {u1, u3, u5} and by (6.1), P can be extended to an (x1, x2)-hamiltonian path of D.
We now turn to extended tournaments. An extended tournament D does not always have a hamiltonian path, but, as we saw in Theorem 5.7.1, it does when the following obviously necessary condition is satisﬁed: there is a 1-path-cycle factor in D. Thus if we are looking for a suﬃcient condition for the existence of an [x, y]-hamiltonian path, we must require the existence on an [x, y]-path P such that D − P has a cycle factor (this includes the case when P is already hamiltonian). Checking for such a path factor in an arbitrary digraph can be done in polynomial time using ﬂows, see Exercise 3.62.
The next result is similar to the structure we found in the last part of the proof of Theorem 6.2.1.
Lemma 6.2.3 [67] Suppose that D is a strong extended tournament containing two adjacent vertices x and y such that D − {x, y} has a hamiltonian cycle C but D has no hamiltonian [x, y]-path. Then C is an even cycle, N +(x) ∩ V (C) = N −(y) ∩ V (C), N −(x) ∩ V (C) = N +(y) ∩ V (C), and the neighbours of x alternate between in-neighbours and out-neighbours around C.
Proof: Exercise 6.5.
Bang-Jensen, Gutin and Huang obtained the following characterization for the existence of an [x, y]-hamiltonian path in an extended tournament. Note the strong similarity with Theorem 6.2.1.

6.2 Weakly Hamiltonian-Connected Digraphs 287
Theorem 6.2.4 [67] Let D be an extended tournament and x1, x2 be distinct vertices of D. Then D has an [x1, x2]-hamiltonian path if and only if D has an [x1, x2]-path P such that D − P has a cycle factor and D does not satisfy any of the conditions below:
(a) D is not strong and either the initial or the terminal component of D (or both) contains none of x1 and x2;
(b) D is strong and the following holds for i = 1 or i = 2: D−xi is not strong and either x3−i belongs to neither the initial nor the terminal component of D−xi, or x3−i does belong to the initial (terminal) component of D−xi but there is no (x3−i, xi)-path ((xi, x3−i)-path) P such that D − P has a cycle factor.
(c) D, D − x1, and D − x2 are all strong and D is isomorphic to one of the tournaments in Figure 6.1.
The proof of this theorem in [67] is constructive and implies the following result (the proof is much more involved than that of Theorem 6.2.1). We point out that the proof in [67] makes explicit use of the fact that the digraphs have no 2-cycles. Hence the proof is only valid for extended tournaments and not for general extended semicomplete digraphs, for which the problem is still open. Theorem 6.2.5 [67] There exists an O(√nm) algorithm to decide if a given extended tournament has a hamiltonian path connecting two speciﬁed vertices x and y. Furthermore, within the same time bound a hamiltonian [x, y]-path can be found if it exists.
Theorem 6.2.4 implies the following characterization of extended tournaments which are weakly hamiltonian-connected (see Exercise 6.7).
Theorem 6.2.6 [67] Let D be an extended tournament. Then D is weakly hamiltonian-connected if and only if it satisﬁes each of the conditions below.
(a) D is strongly connected. (b) For every pair of distinct vertices x and y of D, there is an [x, y]-path
P such that D − P has a cycle factor. (c) For each vertex x of D, D − x has at most two strong components and
if D − x is not strong, then for each vertex y in the initial (respectively terminal) strong component, there is a (y, x)-path (respectively an (x, y)path) P such that D − P has a cycle factor. (d) D is not isomorphic to any of the two tournaments in Figure 6.1.
The following result generalizes Corollary 6.2.2. Note that we must assume the existence of the paths described below in order to have any chance of having a hamiltonian path with end vertices in the set {x, y, z}. The proof below illustrates how to argue with extended tournament structure.

288 6. Hamiltonian Reﬁnements
Corollary 6.2.7 [67] Let x, y and z be three vertices of a strong extended tournament D. Suppose that, for every choice of distinct vertices u, v ∈ {x, y, z}, there is a [u, v]-path P in D so that D − P has a cycle factor. Then there is a hamiltonian path connecting two of the vertices in {x, y, z}.
Proof: If both D − x and D − y are strong, then, by Theorem 6.2.4, either D has a hamiltonian path connecting x and y, or D is isomorphic to one of the tournaments in Figure 6.1, in which case there is a hamiltonian path connecting x and z. There is a similar argument if both D − x and D − z, or D − y and D − z are strong. So, without loss of generality, assume that neither D − x nor D − y is strong. Let S1, S2, . . . , St be an acyclic ordering of the strong components of D − x. Note that St has an arc to x, since D is strong.
Suppose ﬁrst that y ∈ V (Si) for some 1 < i < t. We show that this implies that D − y is strong, contradicting our assumption. Consider an [x, y]-path P and a cycle factor F of D − P . It is easy to see that P cannot contain any vertex of Si+1, . . . , St. Hence each of these strong components contains a cycle factor consisting of those cycles from F that are in Sj for j = i+1, . . . , t. In particular (since it contains a cycle), each Sj has size at least 3 for j = i + 1, . . . , t. It also follows from the existence of P and F that every vertex in Si is dominated by at least one vertex from U = V (S1)∪. . .∪V (Si−1). Indeed, if some vertex z ∈ V (Si) is not dominated by any vertex from U , then using that Sr⇒Sp for all 1 ≤ r < p ≤ t we get that z is similar to all vertices in U . However, this contradicts the existence of P and F. Now it is easy to see that D − y is strong since every vertex of Si − y is dominated by some vertex from V (S1) ∪ . . . ∪ V (Si−1) and dominates a vertex in V (Si+1) ∪ . . . ∪ V (St). Hence we may assume that y belongs to S1 or St.
By considering the converse of D if necessary, we may assume that y ∈ V (S1). By Theorem 6.2.4(b) we may assume that there is no (y, x)-path W such that D − W has a cycle factor. Thus it follows from the assumption of the corollary that there is an (x, y)-path P = v1v2 . . . vr, v1 = x, vr = y such that D − P has a cycle factor F . Since P − x is contained in S1, we can argue as above that each Si, i > 1, has a cycle factor (inherited from F ) and hence each Si contains a hamiltonian cycle Ci, by Theorem 5.7.7.
Note that every vertex of S1 which is not on P belongs to some cycle of F that lies entirely inside S1. Hence, if r = 2 (that is, P is just the arc x→y), then it follows from Proposition 6.1.1 (which is also valid when the path in question has length zero) that S1 contains a hamiltonian path starting at y. This path can easily be extended to a (y, x)-hamiltonian path in D, since each Si, i > 1, is hamiltonian. Thus we may assume that r ≥ 3.
If S1−y is strong then D−y is strong, contradicting our assumption above. Let T1, T2, . . . , Ts, s ≥ 2, be an acyclic ordering of the strong components of S1 − y. Note that each V (Ti) is either covered by some cycles from the cycle factor F of D − P and hence Ti has a hamiltonian cycle (by Theorem 5.7.5), or is covered by a subpath of P [v2, vr−1] and some cycles (possibly

6.2 Weakly Hamiltonian-Connected Digraphs 289
zero) from F and hence Ti has a hamiltonian path (by Theorem 5.7.1). Note also that there is at least one arc from y to T1 and at least one arc from Ts to y. If T1 contains a portion of P [v2, vr−1], then it is clear that T1 contains v2. But then D − y is strong since x→v2, contradicting our assumption. So T1 contains no vertices of P [v1, vr−1] and hence, by the remark above, T1 has a hamiltonian cycle to which there is at least one arc from y. Using the structure derived above, it is easy to show that D has a (y, x)-hamiltonian path (Exercise 6.6).
It can be seen from the results above that, when we consider weak hamiltonian-connectedness, extended tournaments have a structure which is closely related to that of tournaments. To see that Theorem 6.2.4 does not extend to general multipartite tournaments, consider the multipartite tournament D obtained from a hamiltonian bipartite tournament B with classes X and Y , by adding two new vertices x and y along with the following arcs: all arcs from x to X and from Y to x, all arcs from y to Y and X to y and an arc between x and y in any direction. It is easy to see that D satisﬁes none of the conditions (a)-(c) in Theorem 6.2.4, yet there can be no hamiltonian path with end vertices x and y in D because any such path would contain a hamiltonian path of B starting and ending in X or starting and ending in Y . Such a path cannot exist for parity reasons (|X| = |Y |). Note also that we can choose B so that the resulting multipartite tournament is highly connected.
Bang-Jensen and Manoussakis [86] characterized weakly hamiltonianconnected bipartite tournaments. In particular, they proved a necessary and suﬃcient condition for the existence of an [x, y]-hamiltonian path in a bipartite tournament. The statement of this characterization turns out to be quite similar to that of Theorem 6.2.4. The only diﬀerence between the statements of these two characterizations is in Condition (c): in the characterization for bipartite tournaments the set of forbidden digraphs is absolutely diﬀerent and moreover inﬁnite.
6.2.2 Results for Locally Semicomplete Digraphs
Our next goal is to describe the solution of the [x, y]-hamiltonian path problem for locally semicomplete digraphs. Notice that this solution also covers the case of semicomplete digraphs and so, in particular, it generalizes Theorem 6.2.1 to semicomplete digraphs.
We start by establishing notation for some special locally semicomplete digraphs. Up to isomorphism there is a unique strong tournament with four vertices. We denote this by T41. It has the following vertices and arcs:
V (T41) = {a1, a2, a3, a4}, A(T41) = {a1a2, a2a3, a3a4, a4a1, a1a3, a2a4}.
The semicomplete digraphs T42, T43, and T44 are obtained from T41 by adding some arcs, namely:

290 6. Hamiltonian Reﬁnements
A(T42) = A(T41) ∪ {a3a1, a4a2},
A(T43) = A(T41) ∪ {a3a1}, A(T44) = A(T41) ∪ {a1a4}. Let T4 = {T41, T42, T43, T44}. It is easy to see that every digraph of T4 has a unique hamiltonian cycle and has no hamiltonian path between two vertices which are not consecutive on this hamiltonian cycle (such two vertices are called opposite).
Let T6 be the set of semicomplete digraphs with the vertex set {x1, x2, a1, a2, a3, a4}, each member D of T6 has a cycle a1a2a3a4a1 and the digraph D {a1, a2, a3, a4} is isomorphic to one member of T4, in addition, xi → {a1, a3} → x3−i → {a2, a4} → xi for i = 1 or i = 2. It is straightforward to verify that T6 contains only two tournaments (denoted by T6 and T6 ), namely the ones shown in Figure 6.1, and that |T6| = 11. Since none of the digraphs of T4 has a hamiltonian path connecting any two opposite vertices, no digraph of T6 has a hamiltonian path between x1 and x2.
For every even integer m ≥ 4 there is only one 2-strong, 2-regular locally semicomplete digraph on m vertices, namely the second power Cm2 of an m-cycle (Exercise 6.8). We deﬁne
T ∗ = { Cm2 | m is even and m ≥ 4}.
It is not diﬃcult to prove that every digraph of T ∗ has a unique hamiltonian cycle and is not weakly hamiltonian-connected (Exercise 6.9, see also [47]). For instance, if the unique hamiltonian cycle of C62 is denoted by u1u2u3u4u5u6u1, then u1u3u5u1 and u2u4u6u2 are two cycles of C62 and there is no hamiltonian path between any two vertices of {u1, u3, u5} or of {u2, u4, u6}.
Let T81 be the digraph consisting of C62 together with two new vertices x1 and x2 such that x1 → {u1, u3, u5} → x2 → {u2, u4, u6} → x1. Furthermore, T82 (T83, respectively) is deﬁned as the digraph obtained from T81 by adding the arc x1x2 (the arcs x1x2 and x2x1, respectively). Let T8 = {T81, T82, T83}. It is easy to see that every element of T8 is a 3-strong locally semicomplete digraph and has no hamiltonian path between x1 and x2.
Before we present the main result, we state the following two lemmas that were used in the proof of Theorem 6.2.10 by Bang-Jensen, Guo and Volkmann in [56]. The ﬁrst lemma generalizes the structure found in the last part of the proof of Theorem 6.2.1.

6.2 Weakly Hamiltonian-Connected Digraphs 291
Lemma 6.2.8 [56] Let D be a strong locally semicomplete digraph on n ≥ 4 vertices and x1, x2 two distinct vertices of D. If D − {x1, x2} is strong, and N +(x1) ∩ N +(x2) = ∅ or N −(x1) ∩ N −(x2) = ∅, then D has a hamiltonian path connecting x1 and x2.
Proof: Exercise 6.10.
Another useful ingredient in the proof of Theorem 6.2.10 is the following linking result. An odd chain is the second power, P22k+1 for some k ≥ 1, of a path on an odd number of vertices.
Lemma 6.2.9 [56] Let D be a connected, locally semicompletedigraph with p ≥ 4 strong components and acyclic ordering D1, D2, ..., Dp of these. Suppose that V (D1) = {u1} and V (Dp) = {v1} and that D − x is connected for every vertex x. Then for every choice of u2 ∈ V (D2) and v2 ∈ V (Dp−1), D has two vertex disjoint paths P1 from u2 to v1 and P2 from u1 to v2 with V (P1) ∪ V (P2) = V (D) if and only if D is not an odd chain from u1 to v1.
Proof: If D is an odd chain, it is easy to see that D has no two vertex disjoint (ui, v3−i)-path for i = 1, 2 (Exercise 6.11). We prove by induction on p that the converse is true as well. Suppose that D is not an odd chain from u1 to v1. Since the subdigraph D − x is connected for every vertex x, |N +(Di)| ≥ 2 for all i ≤ p − 2 and |N −(Dj)| ≥ 2 for all j ≥ 3. If p = 4, then it is not diﬃcult see that D has two vertex disjoint paths P1 from u2 to v1 and P2 from u1 to v2 with V (P1) ∪ V (P2) = V (D) (Exercise 6.13). If p = 5, it is also not diﬃcult to check that D has the desired paths, unless D is a chain on ﬁve vertices. So we assume that p ≥ 6. Now we consider the digraph D , which is obtained from D by deleting the vertex sets {u1, v1}, V (D2 − u2) and V (Dp−1 − v2).
Using the assumption on D, it is not diﬃcult to show that D is a connected, but not strongly connected locally semicompletedigraph with the acyclic ordering {u2}, D3, D4, . . . , Dp−2, {v2} of its strong components. Furthermore, for every vertex y of D , the subdigraph D − y is still connected. Let u be an arbitrary vertex of D3 and v an arbitrary vertex of Dp−2. Note that there is a (u1, u)-hamiltonian path P in D {u1, u} ∪ V (D2 − u2) and similarly there is a (v, v1)-hamiltonian path Q in D {v, v1} ∪ V (Dp−1 − v2) . Hence if D has disjoint (u2, v)-, (u, v2)-paths which cover all vertices of D , then D has the desired paths. So we can assume D has no such paths. By induction, D is an odd chain from u2 to v2. Now using that D is not an odd chain from u1 to v1 it is easy to see that D has the desired paths. We leave the details to the reader.
A weaker version of Lemma 6.2.9 was proved in [47, Theorem 4.5].
Below we give a characterization, due to Bang-Jensen, Guo and Volkmann for the existence of an [x, y]-hamiltonian path in a locally semicomplete digraph. Note again the similarity to Theorem 6.2.1.

292 6. Hamiltonian Reﬁnements
Theorem 6.2.10 [56] Let D be a connected locally semicomplete digraph on n vertices and x1 and x2 be two distinct vertices of D. Then D has no hamiltonian [x1, x2]-path if and only if one of the following conditions is satisﬁed:
(1) D is not strong and either the initial or the terminal component of D (or both) contains none of x1, x2.
(2) D is strongly connected, but not 2-strong, (2.1) there is an i ∈ {1, 2} such that D−xi is not strong and x3−i belongs to neither the initial nor the terminal component of D − xi; (2.2) D − x1 and D − x2 are strong, s is a separating vertex of D, D1, D2, ..., Dp is the acyclic ordering of the strong components of D − s, xi ∈ V (Dα) and x3−i ∈ V (Dβ) with α ≤ β − 2. Furthermore, V (Dα+1) ∪ V (Dα+2) ∪ ... ∪ V (Dβ−1) contains a separating vertex of D, or D = D V (Dα) ∪ V (Dα+1) ∪ ... ∪ V (Dβ) is an odd chain from xi to x3−i with N −(Dα+2) ∩ V (D − V (D )) = ∅ and N +(Dβ−2) ∩ V (D − V (D )) = ∅.
(3) D is 2-strong and is isomorphic to T42 or to one member of T6 ∪ T8 ∪ T ∗ and x1, x2 are the corresponding vertices in the deﬁnitions.
As an easy consequence of Theorem 6.2.10, we obtain a characterization of weakly hamiltonian-connected locally semicomplete digraphs. The proof is left to the interested reader as Exercise 6.12.
Theorem 6.2.11 [56] A locally semicomplete digraph D with at least three vertices is weakly hamiltonian–connected if and only if it satisﬁes (a), (b) and (c) below:
(a) D is strong, (b) the subdigraph D − x has at most two components for each vertex x of
D, (c) D is not isomorphic to any member of T6 ∪ T8 ∪ T ∗.
6.3 Hamiltonian-Connected Digraphs
We now turn to hamiltonian paths with speciﬁed initial and terminal vertices. An (x, y)-hamiltonian path is a hamiltonian path from x to y. Clearly, asking for such a path in an arbitrary digraph is an even stronger requirement than asking for an [x, y]-hamiltonian path3. A digraph D = (V, A) is hamiltonian-connected if D has an (x, y)-hamiltonian path for every choice of distinct vertices x, y ∈ V .
3 We know of no class of digraphs for which the [x, y]-hamiltonian path problem is polynomially solvable, but the (x, y)-hamiltonian path problem is N P-complete. For arbitrary digraphs they are equivalent from a complexity point of view (see Exercise 6.3).

6.3 Hamiltonian-Connected Digraphs 293
No characterization for the existence of an (x, y)-hamiltonian path is known even for the case of tournaments4. Note however, that we sketch a polynomial algorithm for the problem in the next section, so in the algorithmic sense a good characterization does exist. The following very important partial result due to Thomassen will be used in the algorithm of the next section.
Theorem 6.3.1 (Thomassen) [698] Let D = (V, A) be a 2-strong semicomplete digraph with distinct vertices x, y. Then D contains an (x, y)hamiltonian path if either (a) or (b) below is satisﬁed.
(a) D contains three internally disjoint (x, y)-paths each of length at least two,
(b) D contains a vertex z which is dominated by every vertex of V − x and D contains two internally disjoint (x, y)-paths each of length at least two.
In his proof Thomassen explicitly uses the fact that the digraph is allowed to have cycles of length 2. This simpliﬁes the proof (which is still far from trivial), since one can use contraction to reduce to a smaller instance and then use induction.
An important ingredient in the proof of Theorem 6.3.1 as well as in several other proofs concerning the existence of an (x, y)-hamiltonian path in a semicomplete digraph D is to prove that D contains a spanning acyclic graph in which x can reach all other vertices and y can be reached by all other vertices. The reason for this can be seen from the following result which generalizes an observation by Thomassen in [698].
Proposition 6.3.2 [50] Let D be a path-mergeable digraph. Then D has a hamiltonian (x, y)-path if and only if D contains a spanning acyclic digraph H in which d−H (x) = d+H (y) = 0 and such that, for every vertex z ∈ V (D), H contains an (x, z)-path and a (z, y)-path.
Proof: Exercise 6.15.
Theorem 6.3.1 and Menger’s theorem (see Theorem 7.3.1) immediately imply the following result. For another nice consequence see Exercise 6.16.
Theorem 6.3.3 [698] If a semicomplete digraph D is 4-strong, then D is hamiltonian-connected.
Thomassen constructed an inﬁnite family of 3-strongly connected tournaments with two vertices x, y for which there is no (x, y)-hamiltonian path [698]. Hence, from a connectivity point of view, Theorem 6.3.3 is the best possible.
4 By this we mean a structural characterization involving only conditions that can be checked in polynomial time.

294 6. Hamiltonian Reﬁnements
Theorem 6.3.3 is a very important result with several consequences. Thomassen has shown in several papers how to use Theorem 6.3.3 to obtain results on spanning collections of paths and cycles in semicomplete digraphs. See e.g. the papers [699, 701] by Thomassen and also Section 6.7. The following extension of Theorem 6.3.3 to extended tournaments has been conjectured by Bang-Jensen, Gutin and Huang:
Conjecture 6.3.4 [67] If D is a 4-strong extended tournament with an (x, y)-path P such that D − P has a cycle factor, then D has an (x, y)hamiltonian path.
Extending Theorem 6.3.3 to locally semicomplete digraphs, Guo [342] proved the following:
Theorem 6.3.5 (Guo) [342] Let D be a 2-strong locally semicomplete digraph and let x, y be two distinct vertices of D. Then D contains a hamiltonian path from x to y if (a) or (b) below is satisﬁed.
(a) There are three internally disjoint (x, y)-paths in D, each of which is of length at least 2 and D is not isomorphic to any of the digraphs T81 and T82 (see the deﬁnition in the preceding section).
(b) The digraph D has two internally disjoint (x, y)-paths P1, P2, each of which is of length at least 2 and a path P which either starts at x, or ends at y and has only x or y in common with P1, P2 such that V (D) = V (P1) ∪ V (P2) ∪ V (P ). Furthermore, for any vertex z ∈ V (P1) ∪ V (P2), z has a neighbour on P1 − {x, y} if and only if it has a neighbour on P2 − {x, y}.
Since neither of the two exceptions in (a) is 4-strong, Theorem 6.3.5 implies the following:
Corollary 6.3.6 [342] If a locally semicomplete digraph is 4-strong, then it is hamiltonian-connected.
In [341] Guo used Theorem 6.3.5 to give a complete characterization of those 3-strongly connected arc-3-cyclic (that is, every arc is in a 3-cycle) locally tournament digraphs with no hamiltonian path from x to y for speciﬁed vertices x and y. In particular this characterization shows that there exist inﬁnitely many 3-strongly connected digraphs which are locally tournament digraphs (but not semicomplete digraphs) and are not hamiltonian-connected. Thus, as far as this problem is concerned, it is not only the subclass of semicomplete digraphs which contain diﬃcult instances within the class of locally semicomplete digraphs. It should be noted that Guo’s proof does not rely on Theorem 6.3.3. However, due to the non-semicomplete exceptions mentioned above, it seems unlikely that a much simpler proof of Corollary 6.3.6 can be found using Theorem 6.3.3 and Theorem 4.11.15.
Not surprisingly, there are also several results, such as the following by Lewin, on hamiltonian-connectivity in digraphs with many arcs.

6.4 Finding a Hamiltonian (x, y)-Path in a Semicomplete Digraph 295

Theorem 6.3.7 [514] Every digraph on n ≥ 3 vertices and at least (n − 1)2 + 1 arcs is hamiltonian-connected.

If a digraph D is hamiltonian-connected, then D is also hamiltonian (since every arc is in a hamiltonian cycle). The next result, due to Bermond, shows that we only need a slight strengthening of the degree condition in Theorem 5.6.3 to get a suﬃcient condition for strong hamiltonian-connectivity.

Theorem 6.3.8 [108] Every digraph D on n vertices which satisﬁes δ0(D) ≥

n+1 2

is

hamiltonian-connected.

If we just ask for weak hamiltonian-connectness then Overbeck-Larisch showed that we can replace the condition on the semi-degrees by a condition on the degrees:

Theorem 6.3.9 [597] Every 2-strong digraph on n vertices and minimum degree at least n + 1 is weakly hamiltonian-connected.

Thomassen asked whether all 3-strong digraphs D = (V, A) on n vertices with d+(x) + d−(x) ≥ n + 1 for all x ∈ V are necessarily hamiltonian-
connected. However, this is not the case, as was shown by Darbinyan [179].

6.4 Finding a Hamiltonian (x, y)-Path in a Semicomplete Digraph
In this section we discuss algorithmic aspects of the (x, y)-hamiltonian path problem for semicomplete digraphs. The main result is the following by BangJensen, Manoussakis and Thomassen:
Theorem 6.4.1 [87] The (x, y)-hamiltonian path problem is polynomially solvable for semicomplete digraphs.
We will not give the proof of this diﬃcult result here, but rather outline the most interesting ingredients in the non-trivial proof in [87]. As usual, we will always use n to denote the number of vertices of the digraph in question.
The ﬁrst lemma is quite simple to prove, but it turns out to be very useful for the design of the algorithm of Theorem 6.4.1.
If x, w, z are distinct vertices of a digraph D, then we use the notation Qx,z, Q.,w to denote two disjoint paths such that the ﬁrst path is an (x, z)path, the second path has terminal vertex w, and V (Qx,z)∪V (Q.,w) = V (D). Similarly Qz,x and Qw,. denote two disjoint paths, such that the ﬁrst path is a (z, x)-path, the second path has initial vertex w, and V (Qz,x) ∪ V (Qw,.) = V (D).
Lemma 6.4.2 [87] Let x, w, z be distinct vertices in a semicomplete digraph T , such that there exist internally disjoint (x, w)-, (x, z)-paths P1, P2 in T . Let R = T − V (P1) ∪ V (P2).

296 6. Hamiltonian Reﬁnements
(a) There are either Qx,w, Q.,z or Qx,z, Q.,w in T , unless there is no arc from Rt to V (P1) ∪ V (P2) − x, where Rt is the terminal component of T R.
(b) In the case when there is an arc from Rt to V (P1) ∪ V (P2) − x we can ﬁnd one of the pairs of paths, such that the path with only one end vertex speciﬁed has length at least one, unless V (P1) ∪ V (P2) = {w, x, z}.
(c) Moreover there is an O(n2) algorithm to ﬁnd one of the pairs of paths above if they exist.
Proof: If R = ∅ then both pairs of paths exist. Hence we may assume that R = ∅. Assume there is an arc uv where u ∈ Rt and v ∈ (V (P1) ∪ V (P2)) − x. Assume without loss of generality that v ∈ P1. Since u ∈ Rt, T R has a hamiltonian path Q ending at u and starting at some vertex y. By Proposition 4.10.2, the semicomplete digraph T R ∪ V (P1) − x has a hamiltonian path starting either at y or the successor of x on P1 and ending in w. This path together with P2 forms the desired pair of paths Qx,z, Q.,w. This proves (a). It is easy to verify (b) by the same argument. As the strong components of T R and a hamiltonian cycle in each of them can be found in O(n2) time (Theorem 5.5.2), we can ﬁnd Q and Qx,z, Q.,w in O(n2) time.
We point out that the proof above shows that Lemma 6.4.2 is valid also for digraphs that are locally in-semicomplete.
The following lemma allows one to use symmetry and thereby reduces the number of cases to consider when looking for an (x, y)-hamiltonian path.
Lemma 6.4.3 Let T be a semicomplete digraph and x, y vertices of T , such that there exist 2 internally disjoint (x, y)-paths and an (x, y)-separator {u, v} in T . Suppose that u, v do not induce a 2-cycle, say, v→u. Let T denote the semicomplete digraph obtained from T , by adding the arc v→u. Then T has an (x, y)-hamiltonian path if and only if T has an (x, y)-hamiltonian path.
Proof: Exercise 6.18.
The next result shows that either T is 2-strong or we can reduce the problem to smaller instances.
Lemma 6.4.4 [87] If T is not 2-strong then either the desired path exists in T , or we can reduce the problem to one or two smaller problems, such that in the latter case the total size of the subproblems is at most n + 1.
We now outline the major steps of the algorithm in [87] for the (x, y)hamiltonian path problem. First we make some assumptions which do not change the problem.
We assume that there is no arc from x to y and that neither x nor y are contained in a 2-cycle (if there is such a cycle containing x (y), then delete the arc entering x (leaving y)). It is easy to see that the new semicomplete digraph has an (x, y)-hamiltonian path if and only if the original digraph has

6.4 Finding a Hamiltonian (x, y)-Path in a Semicomplete Digraph 297
one. So we assume that the input is a semicomplete digraph T which has the form above. In order to refer to smaller versions of the same problem we refer to the problem as the hamiltonian problem. Note that by Lemma 6.4.4 we may assume that T is 2-strong (otherwise we just consider smaller subproblems).
With the assumptions above it follows from Theorem 6.3.1 that, if there are three internally disjoint (x, y)-paths in T , then the desired hamiltonian path exists. Thus, by Lemma 6.4.4, the interesting part is when T is 2-strong and there are two but not three internally disjoint (x, y)-paths. By Menger’s theorem (which we study in Chapter 7) we may thus assume that there exists an (x, y)-separator of size two in T .
The next theorem by Bang-Jensen, Manoussakis and Thomassen generalizes Theorem 6.3.1. It is very important for the proof of Theorem 6.4.1, because it corresponds to a case when no reduction is possible (see the description of the algorithm below) and hence one has to prove the existence of the desired path directly. Recall that for speciﬁed distinct vertices s, t, an (s, t)-separator is a subset S ⊆ V − {s, t} such that D − S has no (s, t)-path. An (s, t)-separator is trivial if either s has out-degree zero or t has in-degree zero in D − S.
Theorem 6.4.5 [87] Let T be a 2-strong semicomplete digraph on at least 10 vertices and let x, y be vertices of T such that y→x. Suppose that T − x, T − y are both 2-strong. If all (x, y)-separators consisting of two vertices (if any exist) are trivial, then T has an (x, y)-hamiltonian path.
Besides the results mentioned above the algorithm uses the following results:
Lemma 6.4.6 [87] Suppose T is 2-strong and there exists a non-trivial separator {u, v} of x, y. Let A, B denote a partition of T − {u, v} such that y ∈ A, x ∈ B and A→B. Let T = T A ∪ {u, v} , T = T B ∪ {u, v} . We can reduce the hamiltonian problem to at most four hamiltonian problems such that one has size max{|A|, |B|} + 2 or max{|A|, |B|} + 3 and the others (if any) have size at most min{|A|, |B|} + 3.
Lemma 6.4.7 [87] Suppose that T is 2-strong, n ≥ 6, and all (x, y)separators of size 2 x, y are trivial. If T − x or T − y is not 2-strong, then either the desired path exists in T , or we can reduce the problem to one or two smaller problems, such that in the latter case, the total size of the subproblems is at most n + 2.
The hamiltonian algorithm
1. If n ≤ 9, then settle the problem in constant time. 2. If T is not 2-strong, then using Lemma 6.4.4 we settle the problem, or
reduce to smaller instances of the hamiltonian problem.

298 6. Hamiltonian Reﬁnements
3. If there are no (x, y)-separators of size 2, then T has the desired path, by Theorem 6.3.1.
4. If all (x, y)-separators of size 2 are trivial, we check if T − x and T − y are 2-strong. Then we settle or reduce the problem using Theorem 6.4.5 or Lemma 6.4.7.
5. Let {u, v} be a non-trivial (x, y)-separator and let A, B form a partition of T − {u, v}, such that y ∈ A, x ∈ B and A→B. (Such a partition can be found in time O(n2), by letting B be the vertices which in T − {u, v} can be reached from x by a directed path and then taking A = V −B−{u, v}.) Also, if necessary, add an arc to make u, v induce a 2-cycle. This does not change the problem, by Lemma 6.4.3.
6. Use the algorithmic version of Lemma 6.4.2 to ﬁnd Qx,u, Q.,v or Qx,v, Q.,u in T = T (B ∪ {u, v}), and use an analogous algorithm to ﬁnd Qu,y, Qv,. or Qv,y, Qu,. in T = T (A ∪ {u, v}). These paths exist, since T is 2-strong, and the paths with one end vertex unspeciﬁed can be chosen of length at least one, since A, B both have size at least 2 (here we used that {u, v} is a non-trivial separator).
7. If these paths match then T has the desired (x, y)-hamiltonian path. So suppose (by renaming u, v if necessary) that we ﬁnd Qx,u, Q.,v in T and Qu,y, Qv,. in T .
8. Using Lemma 6.4.6 we can now reduce the problem to smaller instances of the hamiltonian problem.
In Step 7 we say that the two sets of paths in T and T match if the following holds: the paths are P1 from x to w and P2 from p to z in T and R1 from r to y and R2 from s to q in T where {w, z} = {r, s} = {u, v} and w = s and z = r. In this case the path P1R2P2R1 is the desired hamiltonian path since q→p by the deﬁnition of B in Step 5.
The complexity of the algorithm outlined above is O(n5) (in fact, it is O(n4+ ) for every > 0). No attempt was made in [87] to improve the complexity, but it seems quite diﬃcult to improve it very much.
It is interesting to note that the algorithm described above cannot be easily modiﬁed to solve the problem of ﬁnding the longest path with speciﬁed initial and terminal vertex in a semicomplete digraph. In several places we explicitly use that we are searching for a hamiltonian path. There also does not seem to be any simple reduction of this problem to the problem of deciding the existence of a hamiltonian path from x to y.
Conjecture 6.4.8 [65] There exists a polynomial algorithm which, given a semicomplete digraph D and two distinct vertices x and y of D, ﬁnds a longest (x, y)-path.
Note that, if we ask for the longest [x, y]-path in a tournament, then this can be answered using Theorem 6.2.1 (see Exercise 6.19).

6.5 Pancyclicity of Digraphs 299
Conjecture 6.4.9 [65] There exists a polynomial algorithm which, given a digraph D that is either extended semicomplete or locally semicomplete, and two distinct vertices x and y of D, decides whether D has an (x, y)hamiltonian path and ﬁnds such a path if one exists.

6.5 Pancyclicity of Digraphs
A digraph D of order n is pancyclic if it has cycles of all lengths 3, 4, . . . , n. We say that D is vertex-pancyclic if for any v ∈ V (D) and any k ∈ {3, 4, ..., n} there is a cycle of length k containing v. We also say that D is (vertex-)m-pancyclic if D contains a k-cycle (every vertex of D is on a k-cycle) for each k = m, m + 1, . . . , n. Note that some early papers on pancyclicity in digraphs require that D is (vertex-)2-pancyclic in order to be (vertex-)pancyclic (see e.g. the survey [115] by Bermond and Thomassen). We feel that this deﬁnition is too restrictive, since often one can prove pancyclicity results for much broader classes of digraphs when the 2-cycle is omitted from the requirement.

6.5.1 (Vertex-)Pancyclicity in Degree-Constrained Digraphs

The following claim is due to Alon and Gutin:

Lemma 6.5.1 [11] Every directed graph D = (V, A) on n vertices for which δ0(D) ≥ n/2 + 1 is vertex-2-pancyclic.

Proof: Let v ∈ V be arbitrary. By Corollary 5.6.3 there is a Hamilton cycle u1u2 . . . un−1u1 in D − v. If there is no cycle of length k through v then for every i, |N +(v) ∩ {ui}| + |N −(v) ∩ {ui+k−2}| ≤ 1, where the indices are computed modulo n − 1. By summing over all values of i, 1 ≤ i ≤ n − 1, we conclude that |N −(v)| + |N +(v)| ≤ n − 1, contradicting the assumption that all in-degrees and out-degrees exceed n/2.
Thomassen [696] proved that just by adding one to the degree condition for hamiltonicity in Theorem 5.6.7 one obtains cycles of all possible lengths in the digraphs satisfying the degree condition.

Theorem 6.5.2 [696] Let D be a strong digraph on n vertices such that

d(x) + d(y) ≥ 2n whenever x and y are nonadjacent. Then either D has

cycles of all lengths 2, 3, . . . , n, or D is a tournament (in which case it has

↔

cycles

of

all

lengths

3, 4, . . . , n)

or

n

is

even

and

D

is

isomorphic

to

K

.n
2

,

n 2

The following example from [696] shows that 2n cannot be replaced by 2n − 1 in Theorem 6.5.2. For some m ≤ n let Dn,m = (V, A) be the digraph

300 6. Hamiltonian Reﬁnements

with vertices V = {v1, v2, . . . , vn} and arcs A = {vivj|i < j or i = j + 1} − {vivi+m−1|1 ≤ i ≤ n−m+1}. We leave it as Exercise 6.20 to show that Dn,m is strong, has no m-cycle and if m > (n + 1)/2, then Dn,m satisﬁes Meyniel’s condition for hamiltonicity (Theorem 5.6.7). In [176] Darbinyan characterizes
those digraphs which satisfy Meyniel’s condition, but are not pancyclic.
Theorem 6.5.2 extends Moon’s theorem (Theorem 1.5.1) and Corollaries
5.6.2 and 5.6.6. However, as pointed out by Bermond and Thomassen in
[115], Theorem 6.5.2 does not imply Meyniel’s theorem (Theorem 5.6.7). The
following result is due to H¨aggkvist:

Theorem 6.5.3 [391] Every hamiltonian digraph on n vertices and at least

1 2

n(n

+

1)

−

1

arcs

is

pancyclic.

Song [679] generalized the result of Jackson given in Theorem 5.12.5 and proved the following theorem.

Theorem 6.5.4 [679] Let D = (V, A) be an oriented graph on n ≥ 9 vertices with minimum degree n − 2. Suppose that D satisﬁes the following property:

xy ∈ A ⇒ d+(x) + d−(y) ≥ n − 3.

(6.2)

Then D is pancyclic.

Song [679] pointed out that, if the minimum degree condition in Theorem 6.5.4 is relaxed, then it is no longer guaranteed that D is hamiltonian.
Using Theorem 6.5.4 and Theorem 10.7.3, Bang-Jensen and Guo proved that under the same conditions as in Theorem 6.5.4 the digraph is in fact vertex-pancyclic.

Theorem 6.5.5 [54] Let D be an oriented graph on n ≥ 9 vertices and suppose that D satisﬁes the conditions in Theorem 6.5.4. Then D is vertex pancyclic.

It should be noted that every digraph which satisﬁes the condition of Theorem 6.5.4 is a multipartite tournament with independence number at most 2.
There are several other results on pancyclicity of digraphs with large minimum degrees, see e.g. the papers [174, 175, 178] by Darbinyan.

6.5.2 Pancyclicity in Extended Semicomplete and Quasi-Transitive Digraphs
In this subsection we show how to use the close relationship between the class of quasi-transitive digraphs and the class of extended semicomplete digraphs to derive results on pancyclic and vertex-pancyclic quasi-transitive digraphs from analogous results for extended semicomplete digraphs.

6.5 Pancyclicity of Digraphs 301
A digraph D is triangular with partition V0, V1, V2, if the vertex set of D can be partitioned into three disjoint sets V0, V1, V2 with V0→V1→V2→V0. Note that this is equivalent to saying that D = C3[D V0 , D V1 , D V2 ].
Gutin [367] characterized pancyclic and vertex-pancyclic extended semicomplete digraphs. Clearly no extended semicomplete digraph of the form D = C2[Kn1 , Kn2 ] with at least 3 vertices is pancyclic since all cycles are of even length. Hence we must assume that there are at least 3 partite sets in order to get a pancyclic extended semicomplete digraph. It is also easy to see that the (unique) strong 3-partite extended semicomplete digraph on 4 vertices is not pancyclic (since it has no 4-cycle). These observations and the following theorem completely characterize pancyclic and vertex-pancyclic extended semicomplete digraphs.
Theorem 6.5.6 [367] Let D be a hamiltonian extended semicomplete digraph of order n ≥ 5 with k partite sets (k ≥ 3). Then
1. (a) D is pancyclic if and only if D is not triangular with a partition V0, V1, V2, two of which induce digraphs with no arcs, such that either |V0| = |V1| = |V2| or no D Vi (i = 0, 1, 2) contains a path of length 2.
2. (b) D is vertex-pancyclic if and only if it is pancyclic and either k > 3 or k = 3 and D contains two cycles Z, Z of length 2 such that Z ∪ Z has vertices in the three partite sets.
It is not diﬃcult to see that Theorem 6.5.6 extends Theorem 1.5.1, since no semicomplete digraph on n ≥ 5 vertices satisﬁes any of the exceptions from (a) and (b).
The next two lemmas by Bang-Jensen and Huang [79] concern cycles in triangular digraphs. They are used in the proof of Theorem 6.5.9 which characterizes pancyclic and vertex-pancyclic quasi-transitive digraphs.
Lemma 6.5.7 [79] Suppose that D is a triangular digraph with a partition V0, V1, V2 and suppose that D is hamiltonian. If D V1 contains an arc xy and D V2 contains an arc uv, then every vertex of V0 ∪ {x, y, u, v} is on cycles of lengths 3, 4, . . . , n.
Proof: Let C be a hamiltonian cycle of D. We construct an extended semicomplete digraph D from D in the following way. For each of i = 0, 1, 2, ﬁrst path-contract5 each maximal subpath of C which is contained in D Vi and then delete the remaining arcs of D Vi . It is clear that D is a subdigraph of D, and in this process, C is changed to a hamiltonian cycle C of D . Hence D is also triangular with a partition V0 , V1 , V2 such that |V0 | = |V1 | = |V2 | = r, for some r (the last fact follows from the existence of a hamiltonian cycle in D ). Then each vertex of D is on a cycle of length k with 3r ≤ k ≤ |V (D)| (to see this, just use suitable pieces of the r subpaths of C in each Vi).
5 Recall the deﬁnition of path-contraction from Subsection 5.1.1.

302 6. Hamiltonian Reﬁnements
Now we may assume that r ≥ 2 and we show that each vertex of V0 ∪ {x, y, u, v} is on a cycle of length k with 3 ≤ k ≤ 3r−1. To see this, we modify D to another digraph D as follows. If x and y are in distinct maximal subpaths Px, Py of C in D V1 , then we add (in D ) an arc from the vertex to which Px was contracted to the vertex to which Py was contracted. If x and y are in the same maximal subpath P of C in D V1 , then we add (in D ) an arc from the vertex to which P was contracted to an arbitrary other vertex of V1 . For the vertices u and v we make a similar modiﬁcation. Hence we obtain a digraph D which is isomorphic to a subdigraph of D. The digraph D is also triangular with a partition V0 , V1 , V2 such that |V0 | = |V1 | = |V2 | = r. Moreover D V1 contains an arc x y and D V2 contains an arc u v . It is clear now that each vertex of V0 ∪ {x , y , u , v } is on a cycle of length k where 3 ≤ k ≤ 3r − 1. Using the same structure as for these cycles we can see that in D each vertex of V0 ∪ {x, y, u, v} is on a cycle of length k with 3 ≤ k ≤ 3r − 1.
Lemma 6.5.8 [79] Suppose that D is a triangular digraph with a partition V0, V1, V2 and D has a hamiltonian cycle C. If D V0 contains an arc of C and a path P of length 2, then every vertex of V1 ∪ V2 ∪ V (P ) is on cycles of lengths 3, 4, . . . , n.
Proof: Exercise 6.24.
It is easy to check that a strong quasi-transitive digraph on 4 vertices is pancyclic if and only if it is a semicomplete digraph. For n ≥ 5 we have the following characterization due to Bang-Jensen and Huang:
Theorem 6.5.9 [79] Let D = (V, A) be a hamiltonian quasi-transitive digraph on n ≥ 5 vertices.
1. (a) D is pancyclic if and only if it is not triangular with a partition V0, V1, V2, two of which induce digraphs with no arcs, such that either |V0| = |V1| = |V2|, or no D Vi (i = 0, 1, 2) contains a path of length 2.
2. (b) D is not vertex-pancyclic if and only if D is not pancyclic or D is triangular with a partition V0, V1, V2 such that one of the following occurs:
(b1) |V1| = |V2|, both D V1 and D V2 have no arcs, and there exists a vertex x ∈ V0 such that x is not contained in any path of length 2 in D V0 (in which case x is not contained in a cycle of length 5).
(b2) one of D V1 and D V2 has no arcs and the other contains no path of length 2, and there exists a vertex x ∈ V0 such that x is not contained in any path of length 1 in D V0 (in which case x is not contained in a cycle of length 5).
Proof: To see the necessity of the condition in (a), suppose that D is triangular with a partition V0, V1, V2, two of which induce digraphs with no arcs. If |V0| = |V1| = |V2|, then D contains no cycle of length n − 1. If no D Vi

6.5 Pancyclicity of Digraphs 303
(i = 0, 1, 2) contains a directed path of length 2, then D contains no cycle of length 5.
Now we prove the suﬃciency of the condition in (a). According to Theorem 4.8.5, there exists a semicomplete digraph T on k vertices for some k ≥ 3 such that D is obtained from T by substituting a quasi-transitive digraph Hv for each vertex v ∈ V (T ) (here Hv is non-strong if it has more than one vertex). Let C be a hamiltonian cycle of D. We construct an extended semicomplete digraph D from D in the following way: for each Hv, v ∈ V (T ), ﬁrst path-contract each maximal subpath of C which is contained in Hv and then delete the remaining arcs of Hv. In this process C is changed to a hamiltonian cycle C of D .
Suppose D is not pancyclic. Then it is easy to see that D is not pancyclic. By Theorem 6.5.6, D is triangular with a partition V0 , V1 , V2 . Let Vi ⊂ V be obtained from Vi , i = 0, 1, 2, by substituting back all vertices on contracted subpaths of C. Then D is triangular with partition V0, V1, V2. Moreover each D Vi is covered by r disjoint subpaths of C for some r.
By Lemma 6.5.7, two of V0, V1, V2, say V1 and V2, induce subdigraphs with no arcs in D. If |V0| = |V1| = |V2| we have the ﬁrst exception in (a). Hence we may assume that |V0| > |V1| = |V2|. Then D V0 contains an arc of C. From Lemma 6.5.8, we see that D V0 contains no path of length 2. This completes the proof of (a).
The proof of (b) is left to the reader as Exercise 6.25.
6.5.3 Pancyclic and Vertex-Pancyclic Locally Semicomplete Digraphs
We saw in the last subsection how the structure theorem for quasi-transitive digraphs (i.e., Theorem 4.8.5) was helpful in ﬁnding a characterization for (vertex-)pancyclic quasi-transitive digraphs. Now we show that the structure theorem for locally semicomplete digraphs (Theorem 4.11.15) is also very useful for ﬁnding a characterization of those locally semicomplete digraphs which are (vertex-)pancyclic. Our ﬁrst goal (Lemma 6.5.13) is a characterization of those round decomposable locally semicomplete digraphs which are (vertex-)pancyclic.
Lemma 6.5.10 Let R be a strong round local tournament and let C be a shortest cycle of R and suppose C has k ≥ 3 vertices. Then for every round labelling v0, v1, . . . , vn−1 of R such that v0 ∈ V (C) there exist indices 0 < a1 < a2 < . . . < ak−1 < n so that C = v0va1 va2 . . . vak−1 v0.
Proof: Let C be a shortest cycle and let L = v0, v1, . . . , vn−1 be a round labelling of R so that v0 ∈ V (C). If the claim is not true, then there exists a number 2 ≤ l < k − 1 so that C = v0va1 va2 . . . vak−1 v0, where 0 < a1 < . . . < al−1 and al < al−1. Now the fact that L is a round labelling of R implies that vl−1→v0, contradicting the fact that C is a shortest cycle.

304 6. Hamiltonian Reﬁnements
Recall that the girth g(D) of a digraph is the length of a shortest cycle in D = (V, A). For a vertex v ∈ V we let gv(D) denote the length of a shortest cycle in D that contains v. The next lemma shows that every round local tournament R is g(R)-pancyclic.
Lemma 6.5.11 A strong round local tournament digraph R on r vertices has cycles of length k, k + 1, ..., r, where k = g(R).
Proof: By Lemma 6.5.10 we may assume that R contains a cycle of the form vi1 vi2 ...vik vi1 , where 0 = i1 < i2 < ... < ik < r. Because D is strong, vim dominates all the vertices vim+1, . . . , vim+1 for m = 1, 2, ..., k. Now it is easy to see that D has cycles of lengths k, k + 1, ..., r through the vertices vi1 , vi2 , ..., vik .
There is also a very nice structure on cycles through a given vertex in a round local tournament digraph. We leave the proof as Exercise 6.26.
Lemma 6.5.12 If a strong round locally tournament digraph with r vertices has a cycle of length k through a vertex v, then it has cycles of all lengths k, k + 1, . . . , r through v.
Lemma 6.5.13 [55] Let D be a strongly connected round decomposable locally semicomplete digraph with round decomposition D = R[S1, . . . , Sp]. Let V (R) = {r1, r2, . . . , rp}, where ri is the vertex of R corresponding to Si. Then
(1) D is pancyclic if and only if either the girth of R is 3 or g(R) ≤ max1≤i≤p |V (Si)| + 1.
(2) D is vertex-pancyclic if and only if, for each i = 1, ..., p, either gri (R) = 3 or gri (R) ≤ |V (Si)| + 1.
Proof: As each Si is semicomplete, it has a hamiltonian path Pi. Furthermore, since R is a strong locally semicomplete digraph, it is hamiltonian by Theorem 5.5.1. Thus, starting from a p-cycle with one vertex from each Si, we can get cycles of all lengths p+1, p+2, . . . , n, by taking appropriate pieces of hamiltonian paths P1, P2, . . . , Pp in S1, . . . , Sp. Thus, if g(R) = 3 then D is pancyclic by Lemma 6.5.11. If g(R) ≤ max1≤i≤r |V (Si)| + 1, then D is pancyclic by Lemma 6.5.11 and the fact that (by Moon’s theorem) every Si has cycles of lengths 3, 4, . . . , |V (Si)|. If g(R) > 3 and, for every i = 1, ..., r, g(R) > |V (Si)| + 1, then D is not pancyclic since it has no (g(R) − 1)-cycle. The second part of the lemma can be proved analogously by ﬁrst proving that for each i = 1, 2, . . . , p, every vertex in Si is on cycles of all lengths gri (R), gri (R) + 1, . . . , n (using Lemma 6.5.12) and then applying Theorem 1.5.1.
The main part of the characterization of (vertex-)pancyclic locally semicomplete digraphs is to prove the following lemma (recall Theorem 4.11.15).

6.5 Pancyclicity of Digraphs 305
Lemma 6.5.14 [55] Let D be a strong locally semicomplete digraph on n vertices which is not round decomposable. Then D is vertex-pancyclic.
Proof: If D is semicomplete, then the claim follows from Moon’s theorem. So we assume that D is not semicomplete. Thus, D has the structure described in Lemma 4.11.14.
Let S be a minimal separating set of D such that D − S is not semicomplete and let D1, D2, ..., Dp be the acyclic ordering of the strong components of D − S. Since the subdigraph D S is semicomplete, it has a unique acyclic ordering Dp+1, ..., Dp+q with q ≥ 1 of its strong components. Recalling Lemma 4.11.14 (a), the semicomplete decomposition of D − S contains exactly three components D1, D2, D3. Recall that the index of the initial component of D2 is λ2. From Theorem 4.11.8 and Lemma 4.11.12, we see that D2 ⇒ D1 ⇒ S ⇒ D1 and there is no arc between D1 and D3.
We ﬁrst consider the spanning subdigraph D∗ of D which is obtained by deleting all the arcs between S and D2. By Lemma 4.11.14, D∗ is a round decomposable locally semicompletedigraph and D∗ = R∗[D1, D2, . . . , Dp+q], where R∗ is the round locally semicomplete digraph obtained from D∗ by contracting each Di to one vertex (or, equivalently, R∗ is the digraph obtained by keeping an arbitrary vertex from each Di and deleting the rest). It can be checked easily that gv(R∗) ≤ 5 for every v ∈ V (R∗). Thus D∗ is vertex 5-pancyclic by the remark in the proof of Lemma 6.5.13 (in the case when n = 4, D is easily seen to be vertex-pancyclic so we may assume n ≥ 5). Thus, it remains to show that every vertex of D lies on a 3-cycle and a 4-cycle.
We deﬁne
t = max{ i |N +(S) ∩ V (Di) = ∅, λ2 ≤ i < p},
A = V (Dλ2 ) ∪ ... ∪ V (Dt),
t = min{ j |N +(Dj) ∩ V (D2) = ∅, p + 1 ≤ j ≤ p + q}
and B = V (Dt ) ∪ ... ∪ V (Dp+q).
It follows from Proposition 4.11.16 that B→D3→A. Since we have S→D1→Dλ2 →D1→S, every vertex of S is in a 4-cycle and since we have B→D3→A→D1→S, each vertex of V (D3) ∪ A ∪ V (D1) is contained in a 4-cycle. By the deﬁnition of t and A, there is an arc sa from Dt to A. It follows from Lemma 4.11.14 (b) that there is an arc a s from A to B. Let v ∈ V (D1) and w ∈ V (D3) be arbitrarily chosen. Then savs and s wa s are 3-cycles. Suppose D2 contains a vertex x that is not in A, then A→x. We also have x, s ∈ N +(a ) and this implies that x→s . From this we get that x→Dt , in particular, x→s. Hence xsax is a 3-cycle and xvsax is a 4-cycle. Thus, there only remains to show that every vertex of S ∪ A is contained in a 3-cycle. Let u be a vertex of S and let D be the strong component containing u. If D has at least three vertices, then u lies on a 3-cycle by Theorem 1.5.1.

306 6. Hamiltonian Reﬁnements
So we assume |V (D )| ≤ 2. If < t , then u and a are adjacent because D dominates the vertex s of B. If ≥ t , then either u = s or s → u (if V (D ) = {s, u}, then usu is a 2-cycle) and hence u, a are adjacent. Therefore, in any case, u is adjacent to one of {a, a }. Assume without loss of generality that a and u are adjacent. If u → a, then uavu is a 3-cycle. If a → u, then uwau is a 3-cycle because of D3 → A. Hence, every vertex of S has the desired property.
Finally, we note that S = N +(D3) is a subset of V (D2) and it is also a minimal separating set of D. Furthermore, D − S is not semicomplete. From the proof above, every vertex of S is also in a 3-cycle. So the proof of the theorem is completed by the fact that A ⊆ S .
Combining Lemmas 6.5.13 and 6.5.14 we have the following characterization of pancyclic and vertex-pancyclic locally semicomplete digraphs due to Bang-Jensen, Guo, Gutin and Volkmann:
Theorem 6.5.15 [55] A strong locally semicomplete digraph D is pancyclic if and only if it is not of the form D = R[S1, . . . , Sp], where R is a round local tournament digraph on p vertices with g(R) > max{2, |V (S1)|, ..., |V (Sp)|} + 1. D is vertex-pancyclic if and only if D is not of the form D = R[S1, . . . , Sp], where R is a round local tournament digraph with gri (R) > max{2, |V (Si)|}+ 1 for some i ∈ {1, ..., p}, where ri is the vertex of R corresponding to Si.

6.5.4 Further Pancyclicity Results

To characterize pancyclic locally in-semicomplete digraphs seems a much harder problem than that of characterizing pancyclic locally semicomplete digraphs. Tewes [692] studied this problem and obtained several partial results of which we will state a few below.

Theorem 6.5.16 [692, Theorem 4.4] Let D be a locally in-tournament di-

graph on n vertices and let 3 ≤ k ≤ n be an integer such that δ−(D) >

3n 2(k+1)

−

1 2

.

Furthermore,

l√et

D

be

strong

if

k

≥

2δ−(D)

+

2.

Then

D

has

a

cycle of length k. For k ≥ n + 1 this bound is sharp.

Let the function f (k) be deﬁned as follows for ﬁxed n:

f (k) =

n+1 n+k 2
k

+ +

k−1 k−2 5
2

if k is even if k is odd.

Theorem 6.5.17 [692, Theorem 4.13] Let D be a strongly connected locally in-tourna√ment digraph on n vertices such that δ−(D) > f (k) for some integer 3 ≤ k ≤ n + 1. Then D has cycles of all lengths k, k + 1, . . . , n.

6.5 Pancyclicity of Digraphs 307
Since every regular tournament is strong (Exercise 6.23) it is also pancyclic by Moon’s theorem. Note that by Theorem 5.7.23, every regular multipartite tournament is hamiltonian. This motivated Volkmann to make the following conjecture.
Conjecture 6.5.18 [728] Every regular p-partite tournament with p ≥ 4 is pancyclic.
Note that in the 3-partite tournament D = C3[Kk, Kk, Kk] all cycles have length some multiple of 3. Hence the condition p ≥ 4 above is necessary.
For p ≥ 5 Conjecture 6.5.18 follows from the following stronger result due to Yeo [747] (For an outline of Yeo’s proof see [728]).
Theorem 6.5.19 [747] Every regular multipartite tournament with at least 5 partite sets is vertex-pancyclic.
Using a probabilistic approach, Yeo [749] also proved that all, except possibly a ﬁnite number of exceptions, regular 4-partite tournaments are vertexpancyclic (in particular, every regular 4-partite tournament on at least 488 vertices is vertex-pancyclic). The inﬁnite family of regular and non-pancyclic 3-partite tournaments described above shows that no such result holds for 3-partite tournaments.
Clearly, the results above give strong support for the following conjecture by Yeo:
Conjecture 6.5.20 [749] If a 4-partite tournament is regular, then it is vertex-pancyclic.
We conjecture that the only non-vertex-pancyclic regular 3-partite tournaments are the triangular ones:
Conjecture 6.5.21 Every regular semicomplete 3-partite digraph D which is not of the form D = C3[Kk, Kk, Kk] for any k is vertex-pancyclic.
There are also many results on suﬃcient conditions in terms of the number of arcs for a digraph to contain a cycle of length precisely k. We refer the reader to the survey of Bermond and Thomassen [115] for a number of references to such results.
Recall that for a given directed pseudograph D = (V, A), the line digraph L(D) of D has vertex set A and a→a is an arc in L(D) precisely when the head of a equals the tail of a in D (note that a loop in D gives rise to a loop in L(D)). Let D = (V, A) be a directed pseudograph; D is pancircular if it contains a closed trail of length q for every q ∈ {3, 4, ..., |A|}. Due to a natural bijection between the set of closed trails in D and the set of cycles in L(D), we obtain the following:
Proposition 6.5.22 L(D) is pancyclic if and only if D is pancircular.

308 6. Hamiltonian Reﬁnements

Imori, Matsumoto and Yamada [445], who introduced the notion of pancircularity, proved the following theorem.
Theorem 6.5.23 Let D be a regular and pancircular directed pseudograph. Then, L(D) is also regular and pancircular.

This theorem was used in [445] to show that de Bruijn digraphs are pancyclic and pancircular.

Theorem 6.5.24 [445] Every de Bruijn digraph DB(d, t) is pancyclic and pancircular.

Proof: de Bruijn digraphs DB(d, t) were introduced for d ≥ 2 and t ≥ 1. Let DB(d, 0) be the directed pseudograph consisting of a singular vertex and d loops. Clearly, DB(d, 1) = L(DB(d, 0)). Since

DB(d, t + 1) = L(DB(d, t))

(6.3)

for t ≥ 1 by Proposition 4.6.1, we conclude that (6.3) holds for all t ≥ 0. We
prove the theorem by induction on t ≥ 0. Clearly, DB(d, 0) is pancyclic and pancircular. Assume that DB(d, t) is pancyclic and pancircular. By Theorem 6.5.23, L(DB(d, t)) is pancircular. By Proposition 6.5.22, L(DB(d, t)) is pancyclic. By (6.3), DB(d, t + 1) = L(DB(d, t)). Thus, DB(d, t + 1) is pancyclic and pancircular.

6.5.5 Cycle Extendability in Digraphs
The following deﬁnitions are due to Hendry [420]. A non-hamiltonian cycle C in a digraph D is extendable if there is some cycle C with V (C ) = V (C)∪{y} for some vertex y ∈ V −V (C). A digraph D which has at least one cycle is cycle extendable if every non-hamiltonian cycle of D is extendable. Clearly a cycle extendable digraph is pancyclic if and only if it contains a 3-cycle and vertex-pancyclic if and only if every vertex is in a 3-cycle.
The following is an easy consequence of the proof of Theorem 1.5.1:
Theorem 6.5.25 [571] A strong tournament T = (V, A) is cycle extendable unless V can be partitioned into sets U, W, Z such that W →U →Z and T U is strong.
Hendry [420] studied cycle extendability in digraphs with many arcs and obtained the next two results.
Theorem 6.5.26 [420] Every strong digraph on n vertices and at least n2 − 3n + 5 arcs is cycle extendable.

6.6 Arc-Pancyclicity 309

Hendry showed that digraphs may have very large in- and out-degree and still not be cycle extendable. This contrasts to the situation for undirected graphs. Hendry has shown in [421, Corollary 8] that, apart from certain exceptions, every graph satisfying Dirac’s condition for hamiltonicity (d(x) ≥ n/2 for every vertex [198]) is also cycle extendable (with the obvious analogous deﬁnition of cycle extendability for undirected graphs). The main result of [420] is the following.

Theorem 6.5.27 [420] Let D be a digraph on n ≥ 7 vertices such that

δ0(D)

≥

2n−3 3

.

Then

D

is

cycle

extendable

unless

n

=

3r

for

some

r

and

D contains Fn as a spanning subdigraph and D is a spanning subdigraph of

Gn. See Figure 6.2 for the deﬁnition of Fn, Gn.

↔↔
Kk Kk

↔
Kk

↔↔
Kk Kk

↔
Kk

F3k G3k
Figure 6.2 The digraphs Fn and Gn. All arcs indicate complete domination in the direction shown.

6.6 Arc-Pancyclicity
A digraph D of order n is arc-k-cyclic for some k ∈ {3, 4, . . . , n} if each arc of D is contained in a cycle of length k. A digraph D = (V, A) is arc-pancyclic if it is arc-k-cyclic for every k = 3, 4, . . . , n. Demanding that a digraph is arc-pancyclic is a very strong requirement, since in particular every arc must be in a hamiltonian cycle. Hence it is not surprising that most results on arcpancyclic digraphs are for tournaments and generalizations of tournaments. However, Moon proved that almost all tournaments are arc-3-cyclic [571], so for tournaments this is not such a hard requirement, in particular in the light of Theorem 6.6.1 below.
Tian, Wu and Zhang characterized all tournaments that are arc-3-cyclic but not arc-pancyclic. See Figure 6.3 for the deﬁnition of the classes D6, D8.
Theorem 6.6.1 [718] An arc-3-cyclic tournament is arc-pancyclic unless it belongs to one of the families D6, D8 (in which case the arc yx does not belong to a hamiltonian cycle).

310 6. Hamiltonian Reﬁnements UW

xy

xy

D6 D8
Figure 6.3 The two families of non-arc-pancyclic arc-3-cyclic tournaments. Each of the sets U and W induce an arc-3-cyclic tournament. All edges that are not already oriented may be oriented arbitrarily, but all arcs between U and W have the same direction.
It is not diﬃcult to derive the following two corollaries from this result:
Corollary 6.6.2 [718] At most one arc of every arc-3-cyclic tournament is not in cycles of all lengths 3, 4, . . . , n.
Proof: Exercise 6.31.
Corollary 6.6.3 [741] A tournament is arc-pancyclic if and only if it is arc3-cyclic and arc-n-cyclic.
Proof: Exercise 6.32. The following result due to Alspach is also an easy corollary:
Corollary 6.6.4 [19] Every regular tournament is arc-pancyclic.
Finally, observe that since each tournament in the inﬁnite family D6 is 2-strong and the arc yx is not in any hamiltonian cycle we have the following result due to Thomassen:
Theorem 6.6.5 [698] There exist inﬁnitely many 2-strong tournaments containing an arc which is not in any hamiltonian cycle.

6.6 Arc-Pancyclicity 311
In [341, 343] Guo studied arc-pancyclic locally tournament digraphs and obtained several results which generalize those above. In particular he made the important observation that one can in fact get a more general result by studying paths from x to y for all such pairs where the arc xy is not present rather than just those for which the arc yx is present (which is the case for tournaments of course).
Theorem 6.6.6 [343] Let D be an arc-3-cyclic local tournament and let x, y be distinct vertices such that there is no arc from x to y. Then D contains an (x, y)-path of length k for every k such that 2 ≤ k ≤ n − 1 unless D is isomorphic to one of the local tournaments T81, T82 (from Section 6.2) or D belongs to one of the families D6 or D8, possibly with the arc from y to x missing.
The proofs of Theorems 6.6.1 and 6.6.6 are very technical and consist of a long case analysis. Hence it makes no sense to give any of these proofs here. However, we will ﬁnish the section with a proof of the following partial result which Guo used in his proof of Theorem 6.6.6.
Theorem 6.6.7 [343] Let D be a connected, arc-3-cyclic local tournament which is not 2-strong. Then D is isomorphic to C3[T1, T2, {s}] where Ti is an arc-3-cyclic tournament for i = 1, 2 and s is a vertex. Furthermore, D is arc-pancyclic.
Proof: First observe that D is strongly connected since it is connected and arc-3-cyclic. Since D is not 2-strong, it has a separating vertex s. Let T1, T2, . . . , Tk denote the acyclic ordering of the strong components of D − s. If there is an arc xs from V (T1) to s, then no arc from x to V (T2) can be in a 3-cycle. Hence we must have s→V (T1) and similarly V (Tk)→s. Since D is arc-3-cyclic, each of T1, Tk must be an arc-3-cyclic tournament.
If k ≥ 3 then for every vertex u ∈ V (T2), either no arc from V (T1) to u or no arc from u to V (T3) can be in a 3-cycle, contradicting our assumption. Thus we must have k = 2 and we have proved that D = C3[T1, T2, {s}].
It remains to prove that D is arc-pancyclic. Since T1 and T2 have hamiltonian paths, it is easy to see that each arc which does not belong to either T1 or T2 is on cycles of all possible lengths. So we just have to consider arcs inside T1, T2. If |V (T1)| = |V (T2)| = 1 there is nothing more to prove. So suppose without loss of generality that |V (T1)| ≥ 3. Let u1u2 . . . uru1, r ≥ 3, be a hamiltonian cycle of T1. Let uiuj be an arbitrary arc of T1. If T1 − ui is strong, then T1 − ui has a hamiltonian cycle and hence T1 has a hamiltonian path starting with the arc uiuj. Using this and a hamiltonian path in T2 we can easily obtain cycles of all lengths 3, 4, . . . , n through uiuj in D. Suppose now that T1 − ui is not strong. Then T1 − ui satisﬁes the assumption of the theorem, so by induction it has the same structure as D and uj must belong to the initial component of T1 − ui. Hence again we ﬁnd a hamiltonian path starting with the arc uiuj in T1 and ﬁnish as above.

312 6. Hamiltonian Reﬁnements
Similarly, if |V (T2)| ≥ 3 the same proof as above can be applied to every arc of T2. Thus we have shown that D is arc-pancyclic.
It is interesting to note that the problem of characterizing arc-pancyclic semicomplete digraphs is still open and seems quite diﬃcult. A partial result was obtained by Darrah, Liu and Zhang [181].
6.7 Hamiltonian Cycles Containing or Avoiding Prescribed Arcs
We now turn our attention to hamiltonian cycles in digraphs with the extra condition that these cycles must either contain or avoid all arcs from a prescribed subset A of the arcs. Not surprisingly, problems of this type are quite diﬃcult even for semicomplete digraphs. If we have no restriction on the size of A , then we may easily formulate the hamiltonian cycle problem for arbitrary digraphs as an avoiding problem for semicomplete digraphs. Hence the avoiding problem without any restrictions is certainly N P-complete. Below, we study both types of problems from a connectivity as well as from a complexity point of view. We also show that when the number of arcs to be avoided respectively, contained in a hamiltonian cycle is some constant, then, from a complexity point of view, the avoiding version is no harder than the containing version. Finally, we show that for digraphs which can be obtained from a semicomplete digraph by adding a few new vertices and some arcs, the hamiltonian cycle problem is very hard and even if we just added one new vertex, the problem is highly non-trivial.
6.7.1 Hamiltonian Cycles Containing Prescribed Arcs
We start by studying the problem of ﬁnding a hamiltonian cycle that contains certain prescribed arcs e1, e2, . . . , ek. This problem, which we call the k-HCA problem, is clearly very hard for general digraphs. We show below that even for semicomplete digraphs this is a diﬃcult problem. For k = 1 the k-HCA problem is a special case of the (x, y)-hamiltonian path problem and it follows from the result in Section 6.4 that there is a polynomial algorithm to decide the existence of a hamiltonian cycle containing one prescribed arc in a semicomplete digraph.
Based on the evidence from Theorem 6.4.1, Bang-Jensen, Manoussakis and Thomassen raised the following conjecture. As mentioned above, when k = 1 the conjecture follows from Theorem 6.4.1.
Conjecture 6.7.1 [87] For each ﬁxed k, the k-HCA problem is polynomially solvable for semicomplete digraphs.
When k = 2 the problem already seems very diﬃcult. This is interesting, especially in view of the discussion below concerning hamiltonian cycles in

6.7 Hamiltonian Cycles Containing or Avoiding Prescribed Arcs 313
digraphs obtained from semicomplete digraphs by adding a few new vertices. Bang-Jensen and Thomassen proved that when k is not ﬁxed the k-HCA problem becomes N P-complete even for tournaments [89]. The proof of this result in [89] contains an interesting idea which was generalized by BangJensen and Gutin in [60]. Consider a digraph D containing a set W of k vertices such that D − W is semicomplete. Construct a new semicomplete digraph DW as follows. First, split every vertex w ∈ W into two vertices w1, w2 such that all arcs entering w now enter w1 and all arcs leaving w now leave w2. Add all possible arcs from vertices of index 1 to vertices of index 2 (whenever the arcs in the opposite direction are not already present). Add all edges between vertices of the same index and orient them randomly. Finally, add all arcs of the kind w1z and zw2, where w ∈ W and z ∈ V (D) − W . See Figure 6.4. It is easy to show that the following holds:
W W1 W2
SS
D DW
Figure 6.4 The construction of DW from D and W . The fat arc from W1 to W2 indicates that all arcs not already going from W2 to W1 (as copies of arcs in D) go in the direction shown. The four other fat arcs indicate that all possible arcs are present in the direction shown.
Proposition 6.7.2 [60] Let W be a set of k vertices of a digraph D such that D − W is a semicomplete digraph. Then D has a cycle of length c ≥ k containing all vertices of W , if and only if the semicomplete digraph DW has a cycle of length c + k through the arcs {w1w2 : w ∈ W }. Proof: Exercise 6.36.
Let D = (V, A) be a semicomplete digraph and A = {u1v1, . . . , ukvk} be a subset of A. Let D be the digraph obtained from D by replacing each

314 6. Hamiltonian Reﬁnements
arc uivi ∈ A by a path uiwivi, i = 1, 2, . . . , k, where wi is a new vertex. Then every cycle C in D that uses all arcs in A corresponds to a cycle C in D which contains all vertices of W = {w1, w2, . . . , wk} and conversely. This observation and Proposition 6.7.2 allows us to study cycles through a speciﬁed set W of vertices in digraphs D such that D − W is semicomplete instead of studying cycles containing k = |W | ﬁxed arcs in semicomplete digraphs.
Note that, if k is not ﬁxed, then it is N P-complete to decide the existence of a cycle through k given vertices in a digraph which can be obtained from a semicomplete digraph by adding k new vertices and some arcs. Indeed, take k = |V (D)|, then this is the Hamilton cycle problem for general digraphs. This proves that the k-HCA is N P-complete for semicomplete digraphs.
Now we can reformulate Conjecture 6.7.1 to the following equivalent statement:
Conjecture 6.7.3 [60] Let k be a ﬁxed natural number. There exists a polynomial algorithm to decide if there is a hamiltonian cycle in a given digraph D which is obtained from a semicomplete digraph by adding at most k new vertices and some arcs.
The truth of this conjecture when k = 1 follows from Proposition 6.7.2 and Theorem 6.4.1. Surprisingly, when |W | = 2 the problem already seems very diﬃcult (recall from Section 6.4 and the remark above that even the case |W | = 1 is highly non-trivial).
We conclude this subsection with some results on the k-HCA problem for highly connected tournaments. Thomassen [701] obtained the following theorem for tournaments with large strong connectivity (the function f (k) is deﬁned recursively by f (1) = 1 and f (k) = 2(k − 1)f (k − 1) + 3 for k ≥ 2). The proof is by induction on k and uses Theorem 6.3.3 to establish the case k = 1 (this is another illustration of the importance of Theorem 6.3.3).
Theorem 6.7.4 [701] If {x1, y1, ..., xk, yk} is a set of distinct vertices in an h(k)-strong tournament T , where h(k) = f (5k)+12k +9, then T has a k-path factor P1 ∪ P2 ∪ ... ∪ Pk such that Pi is an (xi, yi)-path for i = 1, ..., k.
Theorem 6.7.4 implies the following:
Theorem 6.7.5 [701] If a1, ..., ak are arcs with no common head or tail in an h(k)-strong tournament T , then T has a hamiltonian cycle containing a1, ..., ak in that cyclic order.
Combining the ideas of avoiding and containing, Thomassen proved the following:
Theorem 6.7.6 [701] For any set A1 of at most k arcs in an h(k)-strong tournament T and for any set A2 of at most k independent arcs of T − A1, the digraph T − A1 has a hamiltonian cycle containing all arcs of A2.

6.7 Hamiltonian Cycles Containing or Avoiding Prescribed Arcs 315

6.7.2 Avoiding Prescribed Arcs with a Hamiltonian Cycle

How many arcs can we delete from a strong tournament and still have a hamiltonian cycle no matter what set of arcs is deleted? This is a diﬃcult question, but it is easy to see that for some tournaments the answer is that even one missing arc may destroy all hamiltonian cycles. If some vertex has in- or out-degree 1, then deleting that arc clearly suﬃces to destroy all hamiltonian cycles. On the other hand, it is also easy to construct for every p an inﬁnite set S of strong tournaments in which δ0(T ) ≥ p for every T ∈ S and yet there is some arc of T which is on every hamiltonian cycle of T (see Exercise 6.35). It follows from Theorem 6.7.7 below that all such tournaments are strong but not 2-strong.
We can generalize the question to k-strong tournaments and again it is obvious that if some vertex v has in- or out-degree k (this is the smallest possible by the connectivity assumption), then deleting all k arcs out of or into v, we can obtain a digraph with no hamiltonian cycle. Thomassen [699] conjectured that in a k-strong tournament, k is the minimum number of arcs one can delete in order to destroy all hamiltonian cycles. The next theorem due to Fraisse and Thomassen answers this in the aﬃrmative.

Theorem 6.7.7 [249] For every k-strong tournament D = (V, A) and every set A ⊂ A such that |A| ≤ k−1, there is a hamiltonian cycle C in D−A .

The proof is long and non-trivial; in particular it uses Theorem 6.3.3. Below we describe a stronger result due to Bang-Jensen, Gutin and Yeo [71]. The authors proved Theorem 6.7.8 using results on irreducible cycle factors in multipartite tournaments, in particular Yeo’s irreducible cycle factor theorem (Theorem 5.7.21). This is just one more illustration of the power of Theorem 5.7.21.

Theorem 6.7.8 [71] Let T = (V, A) be a k-strong tournament on n vertices,

and let X1, X2, . . . , Xp (p ≥ 1) be a partition of V such that 1 ≤ |X1| ≤

|X2| ≤ . . . ≤ |Xp|. Let D be the digraph obtained from T by deleting all arcs

which have both head and tail in the same Xi (i.e. D = T − ∪pi=1A(T Xi )).

If |Xp| ≤ n/2 and k ≥ |Xp| +

p−1 i=1

|Xi|/2

,

then

D

is

hamiltonian.

In

other

words, T has a hamiltonian cycle which avoids all arcs with both head and

tail in some Xi.

We will not give the proof here since it is quite technical, but we give the main idea of the proof. The ﬁrst observation is that D is a multipartite tournament, which follows from the way we constructed it. Our goal is to apply Theorem 5.7.21 to D. Hence we need to establish that D is strong (see Exercise 6.40) and has a cycle factor (Exercise 6.41). Now we can apply Theorem 5.7.21 to prove that every irreducible cycle factor in D is a hamiltonian cycle. This last step is non-trivial (Exercise 6.42).
The following result shows that the bound for k in Theorem 6.7.8 is sharp:

316 6. Hamiltonian Reﬁnements

Theorem 6.7.9 [71] Let 2 ≤ r1 ≤ r2 ≤ . . . ≤ rp be arbitrary integers. Then there exists a tournament T and a collection X1, X2, ..., Xp of disjoint sets of vertices in T such that

(a) T is (rp − 1 +

p−1 i=1

ri/2

)-strong;

(b) |Xi| = ri for i = 1, 2, . . . , p;

(c) D = T − ∪pi=1A(T Xi ) is not hamiltonian.

In fact, the paper [71] is concerned with aspects of the following more general problem:

Problem 6.7.10 [71] Which sets B of edges of the complete graph Kn have the property that every k-strong orientation of Kn induces a hamiltonian digraph on Kn − B?

The Fraisse-Thomassen theorem says that this is the case whenever B con-

tains at most k−1 edges. Theorem 6.7.8 says that a union of disjoint cliques of

sizes r1, . . . , rp has the property whenever

l i=1

ri/2

+ max1≤i≤l{

ri/2

}≤

k. By Theorem 6.7.9, this is the best possible result for unions of cliques.

Let us show that Theorem 6.7.8 implies Theorem 6.7.7. Let T be a k-

strong tournament on n vertices and let A = {e1, e2, . . . , ek−1} be a given set of k − 1 arcs of T . In U G(T ) these arcs induce a number of connected

components X1, X2, . . . , Xp, 1 ≤ p ≤ k − 1. Denote by ai, i = 1, 2, . . . , p

the number of arcs form A which join two vertices from Xi. Then we have

p i=1

ai

=

k

−

1

and

|Xi|

≤

ai

+

1,

i

=

1, 2, . . . , p.

We

may

assume

that

the

numbering is chosen so that |X1| ≤ |X2| ≤ . . . ≤ |Xp|. Note that |Xp| ≤ k <

n/2. Furthermore, since each ai ≥ 1 we also have |Xp| ≤ (k −1)−(p−1)+1 =

k − p + 1. Now we can make the following calculation:

p−1
|Xp| +

|Xi| 2

i=1

=

|Xp| 2

+

p

|Xi| 2

i=1

≤

|Xp| 2

+

1 2

p
|Xi|

i=1

≤

k−p+1 2

+

1 2

p
(ai + 1)

i=1

=

k−p+1 2

+

k−1+p 2

= k.

Now it follows from Theorem 6.7.8 that T has a hamiltonian cycle which
avoids every arc with both head and tail in some Xi and in particular it avoids all arcs in A . This shows that Theorem 6.7.8 implies Theorem 6.7.7.

6.7 Hamiltonian Cycles Containing or Avoiding Prescribed Arcs 317
Note that if A induces a tree and possibly some disjoint edges in U G(T ), then Theorem 6.7.8 is no stronger than Theorem 6.7.7. This can be seen from the fact that in this case we have equality everywhere in the calculation above. In all other cases Theorem 6.7.8 provides a stronger bound.
In relation to Problem 6.7.10, it seems natural to investigate bounds for k in diﬀerent cases of the set B. In particular, what are sharp bounds for k when B is a spanning forest of Kn consisting of m disjoint paths containing r1, ..., rm vertices, respectively ? The same question can be asked if we replace ‘paths’ by ‘stars’ or by ‘cycles’ (in the last case ‘spanning forest’ should also be replaced by ‘spanning cycle subdigraph’).
How easy is it to decide given a semicomplete digraph D = (V, A) and a subset A ⊆ A whether D has a hamiltonian cycle C which avoids all arcs of A ? As we mentioned earlier, this problem is N P-complete if we pose no restriction on the arcs in A . In thecase when A is precisely the set of those arcs that lie inside the sets of some partition X1, X2, . . . , Xr of V , then the existence of C can be decided in polynomial time. This follows from the fact that D A − A is a semicomplete multipartite digraph and, by Theorem 5.7.9, the hamiltonian cycle problem is polynomially solvable for semicomplete multipartite digraphs. The same argument also covers the case when k = 1 in the conjecture below.
Conjecture 6.7.11 For every k there exists a polynomial algorithm which, for a given semicomplete digraph D = (V, A) and a subset A ⊆ A such that |A | = k, decides whether D has a hamiltonian cycle that avoids all arcs in A.
At ﬁrst glance, cycles that avoid certain arcs seem to have very little to do with cycles that contain certain speciﬁed arcs. Hence, somewhat surprisingly, if Conjecture 6.7.1 is true, then so is6 Conjecture 6.7.11.
Suppose that Conjecture 6.7.1 is true. Then it follows from the discussion of Subsection 6.7.1 that also Conjecture 6.7.3 holds. Hence, for ﬁxed k, there is a polynomial algorithm Ak which, given a digraph D = (V, A) and a subset W ⊂ V for which D − W is semicomplete and |W | ≤ k, decides whether or not D has a hamiltonian cycle. Let k be ﬁxed and D be a semicomplete digraph and let A , |A | ≤ k, be a prescribed set of arcs in D. Let W be the set of all vertices such that at least one arc of A has head or tail in W . Then |W | ≤ 2|A | and D has a hamiltonian cycle avoiding all arcs in A if and only if the digraph D − A has a hamiltonian cycle. By the remark above we can test this using the polynomial algorithm Ar, where r = |W |.
6.7.3 Hamiltonian Cycles Avoiding Arcs in 2-Cycles
Recall from Chapter 4 that we call an arc xy ordinary if it is not contained in a 2-cycle. Deciding whether a given digraph has a hamiltonian cycle C such
6 We thank Thomassen for pointing out this consequence to us (private communication, August 1999).

318 6. Hamiltonian Reﬁnements
that all arcs of C are ordinary is of course an N P-complete problem since the hamiltonian cycle problem for oriented graphs is N P-complete. This implies that the problem is N P-complete even for semicomplete digraphs.
Tuza [724] studied this problem for semicomplete digraphs and posed the following conjecture:
Conjecture 6.7.12 [724] Let s be a positive integer and suppose that D = (V, A) is a semicomplete digraph such that for every Y ⊂ V , |Y | < s, the induced semicomplete digraph D V − Y is strong and has at least one ordinary arc. Then there exists a hamiltonian cycle in T which has at least s ordinary arcs.
The following result shows that it is enough to prove that there is a cycle of length at least s + 1 with this property.
Proposition 6.7.13 [724] If a strong semicomplete digraph T has a cycle of length at least s + 1 which contains at least s ordinary arcs, then T has a hamiltonian cycle with at least s ordinary arcs.
Tuza has proved the existence of such a cycle for s = 1, 2, see [724]. It is easy to see that s + 1 cannot be replaced by s in Proposition 6.7.13 (Exercise 6.43).

6.8 Arc-Disjoint Hamiltonian Paths and Cycles

From Euler’s theorem (Theorem 1.6.3) one easily derives the following result attributed to Veblen in [115] (see also Exercise 6.44).

Theorem 6.8.1 The arcs of a digraph can be partitioned into cycles if and only if, for each vertex x, we have d+(x) = d−(x).

The proof of the following strengthening of Theorem 6.8.1 for regular digraphs by Kotzig is left as Exercise 6.46.

Theorem 6.8.2 [503] If D is a regular digraph, then the arc set of D can be partitioned into cycle factors.

We now consider decompositions of the arc set of a digraph into hamil-

tonian cycles. Deciding whether such a decomposition exists for an arbitrary

digraph is an extremely hard problem. Even for complete digraphs this is

non-trivial. It is an old result due to Walecki (see [20]) that the edge set

of the complete undirected graph Kn has a decomposition into hamiltonian cycles if and only if n is odd (if n is even then each vertex has odd degree

and no decomposition can exist). Using this result we easily conclude that

the

arc

set

of

↔
Kn

can

be

decomposed

into

hamiltonian

cycles

when

n

is

odd.

However for even n another approach is needed by the remark above.

6.8 Arc-Disjoint Hamiltonian Paths and Cycles 319
↔
It is easy to check that the arcs of K4 cannot be decomposed into hamiltonian cycles. Indeed, without loss of generality, the ﬁrst cycle in such a
↔
decomposition is 12341 where the vertices of K4 are labeled 1,2,3,4. After removing these arcs one obtains a strong semicomplete digraph with a unique hamiltonian cycle 14321 and hence the desired decomposition cannot exist.
↔
With a little more eﬀort one can also prove that the arc set of K6 cannot be decomposed into 5 hamiltonian cycles (Exercise 6.45). On the other hand Tillson proved that for all other values of n such a decomposition does indeed exist.
Theorem 6.8.3 (Tillson’s decomposition theorem) [719] The arcs of
↔
Kn can be decomposed into hamiltonian cycles if and only if n = 4, 6.
Theorem 6.8.3 will be used in Section 6.12. Answering a question of Alspach, Bermond and Sotteau, Ng [591] extended Theorem 6.8.3 to the following:
↔
Theorem 6.8.4 [591] The arcs of Kr,r,...,r (s times) can be decomposed into hamiltonian cycles if and only if (r, s) = (4, 1) and (r, s) = (6, 1).
The following conjecture, due to Kelly (see [571]), is probably one of the best known conjectures in tournament theory:
Conjecture 6.8.5 (Kelly’s conjecture) The arcs of a regular tournament of order n can be partitioned into (n − 1)/2 hamiltonian cycles.
This conjecture was veriﬁed for n ≤ 9 by Alspach [115, page 28]. Jackson [449] proved that every regular tournament of order at least 5 contains a hamiltonian cycle C and a hamiltonian path arc-disjoint from C. Zhang proved in [754] that there are always two arc-disjoint hamiltonian cycles for n ≥ 5. A digraph D is almost regular if ∆0(D) − δ0(D) ≤ 1. Thomassen [699] proved the following:
Theorem 6.8.6 [699] Every regular or almost regular tournament of order n has at least n/1000 arc-disjoint hamiltonian cycles.
This result was improved by H¨aggkvist to the following:
Theorem 6.8.7 [387] There is a positive constant c (in fact c ≥ 2−18) such that every regular tournament of order n contains at least cn arc-disjoint hamiltonian cycles.
Thomassen [703] proved that the arcs of every regular tournament of order n can be covered by 12n hamiltonian cycles.

320 6. Hamiltonian Reﬁnements

So far the Kelly conjecture remains unsettled as far as a published proof goes. Thus it remains a serious challenge to ﬁnd a proof of this long standing and very interesting conjecture.
For further results on decompositions into hamiltonian cycles we refer the reader to the paper [20] by Alspach, Bermond and Sotteau and the paper [592] by Ng.

Let T be the tournament on n = 4m+2 vertices obtained from two regular

tournaments T1 and T2, each on 2m + 1 vertices, by adding all arcs from the vertices of T1 to T2 (i.e. V (T1)→V (T2) in T ). Clearly T is not strong and so has no hamiltonian cycle. The minimum in-degree and minimum out-degree

of

T

is

m

which

is

about

n 4

.

Bollob´as

and

H¨aggkvist

[123]

showed

that

if

we

increase the minimum in- and out-degree slightly, then, not only do we obtain

many arc-disjoint hamiltonian cycles, we also obtain a very structured set of

such cycles.

Theorem 6.8.8 [123] For every > 0 and every natural number k there is

a natural number n( , k) with the following property. If T is a tournament of

order

n

>

n(

, k)

such

that

δ0(T )

≥

(

1 4

+

)n, then T

contains the kth power

of a hamiltonian cycle.

It is easy to prove that every tournament on n vertices with minimum in-

and

out

degree

at

least

n 4

is

strongly

connected

(see

Exercise

1.36).

We now turn our attention to other results concerning arc-disjoint hamil-

tonian paths and cycles in tournaments. Thomassen [699] completely char-

acterized tournaments having at least two arc-disjoint hamiltonian paths. A

tournament is almost transitive if it is obtained from a transitive tourna-

ment with acyclic ordering u1, u2, . . . , un (i.e. ui→uj for all 1 ≤ i < j ≤ n) by reversing the arc u1un. Let T be a non-strong tournament with the acyclic ordering T1, T2, . . . , Tk of its strong components. Two components Ti, Ti+1 are called consecutive for i = 1, 2, . . . , k − 1.

Theorem 6.8.9 [699] A tournament T fails to have two arc-disjoint hamiltonian paths if and only if T has a strong component which is an almost transitive tournament of odd order or T has two consecutive strong components of order 1.

Deciding whether a given tournament T has a hamiltonian path P and a hamiltonian cycle C such that P and C are arc-disjoint seems to be a diﬃcult problem. Thomassen found the following partial solution involving arc-3-cyclic tournaments:

Theorem 6.8.10 [699] Let T be an arc-3-cyclic tournament of order at least 3. Then T has a hamiltonian path P and a hamiltonian cycle arc-disjoint from P , unless T is a 3-cycle or the tournament of order 5 obtained from a 3-cycle by adding two vertices x, y and the arc xy and letting y (respectively x) dominate (respectively, be dominated by) the vertices of the 3-cycle.

6.9 Oriented Hamiltonian Paths and Cycles 321
It is easy to see that regular tournaments are arc-3-cyclic (Exercise 6.47). Hence Theorem 6.8.10 generalizes the result of Jackson above. But Theorem 6.8.10 goes much further since, as we mentioned in Section 6.6, almost all tournaments satisfy the assumption of the theorem (see [571]). The following conjecture in some sense generalizing Kelly’s conjecture was proposed by Thomassen: Conjecture 6.8.11 [699] For any > 0 almost all tournaments of order n have (0.5 − )n arc-disjoint hamiltonian cycles.
Erd˝os (see [699]) raised the following problem: Problem 6.8.12 Do almost all tournaments have δ0(T ) arc-disjoint hamiltonian cycles?
As we mentioned in the beginning of Section 6.7 there is no degree condition which guarantees that a strong tournament contains two arc-disjoint hamiltonian cycles. In fact one can easily show that even high arc-strong connectivity does not exclude the existence of one arc which is in all hamiltonian cycles (see Exercise 6.35). Thomassen posed the following conjecture. Conjecture 6.8.13 [699] For each integer k ≥ 2 there exists an integer α(k) such that every α(k)-strong tournament has k arc-disjoint hamiltonian cycles. Thomassen [699] showed by an example that α(2) > 2 and conjectured that α(2) = 3. His example also shows that α is not bounded by any linear function.
6.9 Oriented Hamiltonian Paths and Cycles
Since every tournament has a hamiltonian directed path, it is natural to ask whether every tournament contains every orientation of a hamiltonian undirected path. This is not true, as one can see from the examples in Figure 6.5.
Figure 6.5 The unique tournaments with no anti-directed hamiltonian path.

322 6. Hamiltonian Reﬁnements
A path is anti-directed if the orientation of each arc on the path is opposite to that of its predecessor. The reader can easily verify that none of the three tournaments in Figure 6.5 contains an anti-directed hamiltonian path (Exercise 6.48). Gru¨nbaum [340] proved that, except for the three tournaments of Figure 6.5, every tournament contains an anti-directed hamiltonian path. Rosenfeld [644] strengthened this to the following statement:
Theorem 6.9.1 [644] In a tournament on at least 9 vertices, every vertex is the origin of an anti-directed hamiltonian path.
Rosenfeld conjectured that there exists a natural number N such that every tournament on at least N vertices contains every orientation of a hamiltonian undirected path. Gru¨nbaum’s examples show that we must have N ≥ 8. Rosenfeld’s conjecture has been studied extensively and many partial results were obtained until it was proved by Thomason [694] (see also Theorem 6.9.3). We will mention one of these partial results here (see also the papers [21] by Alspach and Rosenfeld and [683] by Straight).
Forcade found the following beautiful result which generalizes Redei’s theorem for tournaments whose number of vertices is a power of two.
Theorem 6.9.2 [244] If T is a tournament on n = 2r vertices for some r, then for every orientation P of a path on n vertices, T contains an odd number of occurrences of P .
Thomason [694] proved Rosenfeld’s conjecture by showing that N is less than 2128. He also conjectured that N = 8 should be the right number. This was conﬁrmed very recently by Havet and Thomass´e [408].
Theorem 6.9.3 (Havet-Thomass´e theorem) [408] Every tournament on at least 8 vertices contains every orientation of a hamiltonian path.
The proof of Theorem 6.9.3 in [408] is very long (involving a lot of cases), but it uses a very nice partial result which we shall describe below. First we need some new notation. Let P = u1u2 . . . un be an oriented path. The vertex u1 (un) is the origin (terminus) of P . An interval of P is a maximal subpath P = P [ui, uj]7 such that P is a directed path (i.e. either a (ui, uj)path or a (uj, ui)-path). See an illustration in Figure 6.6. The intervals are labeled I1, I2, . . . , It(P ) starting from u1. The length i(P ) of the ith interval is the number of arcs in the directed subpath corresponding to Ii. If the ﬁrst interval of P is directed out of u1, then P is an out-path, otherwise P is an in-path. Now we can describe any oriented path P by a signed sequence sgn(P )( 1, 2, . . . , t(P )), where sgn(P ) is ‘+’ is P is an out-path and otherwise sgn(P ) is ‘−’. We also use the notation ∗P to denote the subpath P [u2, un].
7 We use the same notation here as for directed paths, i.e. P [ui, uj] = uiui+1 . . . uj when i ≤ j.

6.9 Oriented Hamiltonian Paths and Cycles 323
1 2 3 4 5 6 7 8 9 10 11 12
Figure 6.6 An oriented path with intervals [1, 3], [3, 6], [6, 7], [7, 8], [8, 10], [10, 11], [11, 12].
For every set X ⊆ V in a tournament T = (V, A), we deﬁne the sets R+(X) (R−(X)) to be those vertices that can be reached from (can reach) the set X by a directed path. By deﬁnition X ⊆ R+(X) ∩ R−(X). A vertex u is an out-generator (in-generator) of T if R+(u) = V (R−(u) = V ). Recall that by Theorem 1.4.5, every tournament T has at least one out-generator and at least one in-generator. In fact, by Proposition 4.10.2, a vertex is an out-generator (in-generator) if and only if it is the initial (terminal) vertex of at least one hamiltonian path in T .
The next result, due to Havet and Thomass´e, deals with oriented paths covering all but one vertex in a tournament. It plays an important role in the proof of Theorem 6.9.3 in [408].
Theorem 6.9.4 [408] Let T = (V, A) be a tournament on n + 1 vertices. Then
(1) For every out-path P on n vertices and every choice of distinct vertices x, y such that |R+({x, y})| ≥ 1(P ) + 1, either x or y is an origin of (a copy of ) P in T .
(2) For every in-path P on n vertices and every choice of distinct vertices x, y such that |R−({x, y})| ≥ 1(P ) + 1, either x or y is an origin of (a copy of ) P in T .
The following is an easy corollary of Theorem 6.9.4. We state it now since we shall use it in the inductive proof below.
Corollary 6.9.5 [694] Every tournament T on n vertices contains every oriented path P on n−1 vertices. Moreover, every subset of 1(P )+1 vertices contains an origin of P . In particular, there are at least two distinct origins of P in T .
Proof of Theorem 6.9.4: (We follow the proof in [408]). The proof is by induction on n and clearly holds for n = 1. Now suppose that the theorem holds for all tournaments on at most n vertices. It suﬃces to prove (1) since (2) can be reduced to (1) by considering the converses of T and P .
Let P = u1u2 . . . un be given and let x, y be distinct vertices such that |R+({x, y})| ≥ 1(P ) + 1. We may assume that x→y and hence R+(x) = R+({x, y}). We consider two cases.

324 6. Hamiltonian Reﬁnements
Case 1 1(P ) ≥ 2: If |N +(x)| ≥ 2, let z ∈ N +(x) be an out-generator of T R+(x) − x and let t ∈ N +(x) be distinct from z. By the deﬁnition of z we have that |RT+−x({t, z})| = |R+(x)| − 1 > 1(∗P ). Note that ∗P is an out-path, since 1(P ) > 1. By the induction hypothesis, either z or t is the origin of ∗P in T − x, implying that x is an origin of P in T .
Thus we may assume that N +(x) = {y}. Since |R+({x, y})| ≥ 1(P )+1 ≥ 3 we see that N +(y) = ∅. Let q be an out-generator of T N +(y) . Then q is also an out-generator of T R+({x, y}) − y , q→x and |RT+−y({x, q})| = |R+({x, y})| − 1 > 1(∗P ). By induction, either x or q is the origin of ∗P in T − y and since x has no out-neighbour in T − y it must be q that is the origin. Now we see that y is the origin of P in T . Case 2 1(P ) = 1: We consider ﬁrst the subcase when |N +(x)| ≥ 2. Let X := RT−−x(N +(x)) and consider the partition (X, Y, {x}) of V , where Y = V − X − x. By the deﬁnition of these sets we have Y →x, X→Y and y ∈ X. If |X| ≥ 2(P ) + 1, then we claim that x is an origin of P in T ; indeed, let p ∈ N +(x) be an in-generator of T X and take u ∈ N +(x) − p. By the induction hypothesis, either p or u is an origin of ∗P in T − x and hence x is an origin of P in T .
So we may assume that |X| ≤ 2(P ). Note that 2(P ) ≤ n − 2 holds always (remember we count arcs). Hence |Y | > 1, since T has n + 1 vertices. Let s be an in-generator of T Y . Since d+(x) > 1 and X→Y we have RT−−y(s) = V − y. Let w ∈ Y − s be arbitrary. By the induction hypothesis either w or s is an origin of ∗P in T − y and hence y is an origin of P in T .
Now consider the case when N +(x) = {y}. Suppose ﬁrst that |NT−−x(y)| ≥ n − 2. By induction, Theorem 6.9.4 and hence Corollary 6.9.5 holds for T − {x, y}. Thus some vertex in NT−(y) is an origin of ∗∗P . Hence x is an origin of P in T (using x→y and an arc into y from the origin of ∗∗P in T − {x, y}). So we may assume that |N +(y)| ≥ 2. Let U = RT−−y(N +(y)) and W = V − U − {x, y}. Then W →{x, y} and U →W ∪ {x}. If |U | ≥ 2(P ) + 1, then by the same proof as we used above (beginning of Case 2), we get that y is an origin of P . So suppose |U | ≤ 2(P ). This implies in particular that 2(P ) ≥ |N +(y)| ≥ 2.
If |W | ≥ 2 then we let w ∈ W be an in-generator of T − {x, y} and take w ∈ W − w arbitrary. By induction either w or w is an origin of the in-path ∗∗P (recall that 2(P ) ≥ 2 and hence ∗∗P is an in-path). Thus using the arc xy and an arc into y from the origin of ∗∗P in W we see that x is the origin of P . Finally consider the case when |W | = 1 (note that |W | = n − 1 − |U | ≥ 1, since |U | ≤ 2(P ) ≤ n − 2). Then |U | = n − 2 and 2(P ) = n − 2 (since we assumed above that 2(P ) ≥ |U |). Thus ∗P is a directed in-path. Using that y is an in-generator of T − x, we get that x is an origin of P . This completes the proof of the theorem.
If the path in Theorem 6.9.4 has n+1 vertices instead of n, then the statement is no longer true. However, the exceptions (to the n + 1, n + 1 version of Theorem 6.9.4) can be characterized [408] and based on this characterization

6.9 Oriented Hamiltonian Paths and Cycles 325
Havet and Thomass´e were able to prove that the tournaments in Figure 6.5 are indeed the only tournaments that do not contain every orientation of a hamiltonian path.
In [408] Havet and Thomass´e also proved the following nice result which is of independent interest.
Proposition 6.9.6 [408] Let P be an out-path on n1 vertices and Q an inpath on n2 vertices. Let T = (V, A) be a tournament on n = n1 + n2 vertices. If x ∈ V is the origin of a copy of P and of Q in T , then we may choose copies of P and Q such that V (P ) ∩ V (Q) = {x} and x is the origin of both copies.
How easy is it to ﬁnd an occurrence of a prescribed orientation of a hamiltonian path P in a tournament? If P is a directed path, then this can be done in time8 O(n log n) (see Section 1.9.1). Some patterns can be found faster; Bampis, Hell, Manoussakis and Rosenfeld [42] showed that one can ﬁnd an anti-directed hamiltonian path in O(n) time. This is the best possible as shown in [415]. The following somewhat surprising result by Hell and Rosenfeld shows that ﬁnding distinct patterns requires quite diﬀerent complexities:
Theorem 6.9.7 [415] For every 0 ≤ α ≤ 1 there exists an orientation P of a path on n vertices so that every algorithm which checks for an occurrence of P in a tournament T with n vertices must make Ω(n log αn) references to the adjacency matrix of T in the worst case.
Based on Theorem 6.9.3 Havet proved the following result:
Theorem 6.9.8 [405] There is an O(n2) algorithm that takes as input a tournament on n ≥ 8 vertices and an oriented path P on at most n vertices and returns an occurrence of P in T .
It is not known whether there are orientations of paths that in the worst case need Ω(n1+ ) references (for some > 0) to the adjacency matrix to be found in a tournament. By this we mean that in some cases one needs that many steps to either ﬁnd the desired path or conclude that no such path exists.
Instead of considering orientations of hamiltonian paths in tournaments, one may just as well consider orientations of hamiltonian cycles in tournaments. However, one particular cycle, namely the directed hamiltonian cycle, can only be found in strong tournaments. Rosenfeld [645] conjectured that the directed hamiltonian cycle is the only orientation of a hamiltonian cycle that can be avoided by tournaments on arbitrarily many vertices. This conjecture was settled by Thomason who proved the following:
8 We remind the reader that in measuring the complexity, we only count how many times we have to ask about the orientation of a given arc.

326 6. Hamiltonian Reﬁnements
Theorem 6.9.9 [694] Every tournament on n ≥ 2128 vertices contains every oriented cycle of length n except possibly the directed hamiltonian cycle.
Thomason also conjectured that the correct value of the lower bound on n is 9. One easily obtains a tournament with 8 vertices having no anti-directed hamiltonian cycle by adding a new vertex v to the tournament on 7 vertices in Figure 6.5 and joining v arbitrarily to the other 7 vertices. Hence 9 would be best possible if true.
Using the methods developed in [408] along with a number of new ideas, Havet [406] proved the following result. Recall that every strong tournament has a hamiltonian cycle.
Theorem 6.9.10 [406] Every tournament T on n ≥ 68 vertices contains every oriented cycle of length n, except possibly the directed hamiltonian cycle.
Not surprisingly, if a digraph is almost complete, then it will contain all orientations of a hamiltonian undirected path. The following result is due to Heydemann, Sotteau and Thomassen:
Theorem 6.9.11 [427] Let D be a digraph on n vertices and at least (n − 1)(n − 2) + 3 arcs and let C be an arbitrary orientation of a cycle of length n. Then D contains a copy of C, except for the case when D is not strong and C is a directed hamiltonian cycle.
6.10 Covering All Vertices of a Digraph by Few Cycles
Now we discuss another analogue of the hamiltonian cycle problem, namely that of covering the vertices of a digraph with few cycles. In some cases we insist that these are disjoint and that there is a prescribed number of cycles, whereas in other cases we allow the cycles to intersect, but only in a prescribed pattern.
6.10.1 Cycle Factors with a Fixed Number of Cycles
Two cycles X, Y in a digraph D = (V, A) are complementary if V (X) ∩ V (Y ) = ∅ and V (X) ∪ V (Y ) = V , that is, these cycles form a 2-cycle factor in D.
Since every strong tournament has a hamiltonian cycle, a tournament T contains a 2-cycle factor if and only if T can be partitioned into two strong subtournaments. Thomassen posed the following problem which generalizes the problem of the existence of a 2-cycle factor in a tournament.

6.10 Covering All Vertices of a Digraph by Few Cycles 327
Problem 6.10.1 (Thomassen) [629] Is it true that for all natural numbers r, s, there exists a natural number f (r, s) with the following property: except for ﬁnitely many exceptions for each r, s, every f (r, s)-strong tournament T can be partitioned into an r-strong tournament T1 and an s-strong tournament T2?
Considering the case r = s = 1, Reid proved the following (see also Exercise 6.52):
Theorem 6.10.2 [629] Every 2-strong tournament on at least 8 vertices has a 2-cycle factor consisting of a 3-cycle and an (n − 3)-cycle.
This was extended by Song to all pairs of cycle lengths k, n − k, where k = 3, 4, . . . , n − 3 [678]. It follows from these results that f (1, 1) = 2. It is worth noticing that the problem of determining the analogue f (1, 1) of f (1, 1) for semicomplete digraphs is open. Since every 3-strong semicomplete digraph contains a spanning 2-strong tournament (Proposition 7.14.5), we obtain that 2 ≤ f (1, 1) ≤ 3 holds for semicomplete digraphs.
There are a number of results on 2-cycle factors in bipartite tournaments. One of these is the following due to Song:
Theorem 6.10.3 [677] Let R be a bipartite tournament with 2k + 1 vertices in each partite set (k ≥ 4). If every vertex of R has out-degree and in-degree at least k, then for any vertex x in R, R contains a 2-cycle factor C ∪ C such that C includes x and the length of C is at most 6 unless R is isomorphic to C4[Kk+1, Kk+1, Kk, Kk].
For further results on 2-cycle factors in semicomplete bipartite digraphs see e.g. the paper [757] by Zhang and Wang and [756] by Zhang, Manoussakis and Song.
It seems that the problem deciding the existence of a 2-cycle factor in semicomplete p-partite digraphs with p ≥ 3 is quite diﬃcult and we do not know any non-trivial partial results about that. The following conjecture has been proposed by Volkmann. For a semicomplete multipartite digraph D with p partite sets V1, V2, . . . , Vp, the independence number α(D) is equal to the size of a largest set among the Vi’s.
Conjecture 6.10.4 [728] Let D be a p-partite tournament with partite sets V1, V2, ..., Vp and let α = α(D). If D is (α + 1)-strong, then D has a 2-cycle factor, unless D is a member of a ﬁnite family of multipartite tournaments.
In fact Conjecture 6.10.4 is just one instance of the following metaconjecture due to Volkmann (private communication, 1997). Several results which hold for k-strong tournaments should also hold for every semicomplete multipartite digraph D provided that D is (α(D) + k − 1)-strong. One instance where this is known to be true is for the hamiltonian cycle problem (see Theorem 5.7.25).

328 6. Hamiltonian Reﬁnements
An obvious necessary condition for a digraph D to contain a 2-cycle factor is that the girth of D is at most n/2. The second power D = C22k+1 of an odd cycle has girth k + 1 and D is a 2-strong locally semicomplete digraph. This shows that Theorem 6.10.2 cannot be extended to locally semicomplete digraphs. Conﬁrming a conjecture by Bang-Jensen [47],Guo and Volkmann proved that powers of odd cycles are the only exceptions when n ≥ 8.
Theorem 6.10.5 [351] Let D be a 2-strong locally semicomplete digraph on n ≥ 8 vertices. Then D has a 2-cycle factor such that both cycles have length at least 3 if and only if D is not the second power of an odd cycle.
Guo and Volkmann have shown that, although Theorem 6.10.2 cannot be extended to locally semicomplete digraphs, there is still enough structure to allow 2-cycle factors with many diﬀerent lengths. We refer the reader to [352] for details.
The next conjecture by Bang-Jensen, Guo and Yeo goes further than Problem 6.10.1. It may be seen as a ﬁrst step towards studying partitions into subtournaments containing prescribed vertices in highly connected tournaments.
Conjecture 6.10.6 [58] For all natural numbers r, s there exists a natural number g(r, s) such that the following is true with no more than ﬁnitely many exceptions for each choice of r, s: for every tournament T which is g(r, s)strong and every choice of distinct vertices x, y ∈ V (T ), there exist vertexdisjoint subtournaments Tx, Ty of T such that V (T ) = V (Tx) ∪ V (Ty), Tx is r-strong, Ty is s-strong and x ∈ V (Tx), y ∈ V (Ty).
Note that it is easy to decide in polynomial time whether a tournament T contains two disjoint cycles Cx and Cy such that x ∈ V (Cx) and y ∈ V (Cy). This follows from the fact that, by Moon’s theorem, every strongly connected tournament is vertex-pancyclic. Hence Cx and Cy exist if and only if T contains disjoint 3-cycles, one containing x and the other y. It follows from this that every 4-strong tournament contains cycles Cx, Cy as above. Bang-Jensen, Guo and Yeo proved that this already holds for 3-strong tournaments and an inﬁnite family of 2-strong counter examples was given [58]. Hence g(1, 1) = 3.
The existence of a 2-cycle factor such that each cycle contains a prescribed vertex and has a prescribed length in a bipartite graph has been studied in the papers [516, 733] by Little, Teo and Wang.
We now turn to cycle factors with more than two cycles. Bollob´as (see [678]) posed the following problem:
Problem 6.10.7 Let k be a positive integer. What is the least integer g(k) so that all but a ﬁnite number of g(k)-strong tournaments contain a k-cycle factor?

6.10 Covering All Vertices of a Digraph by Few Cycles 329

Chen, Gould and Li [147] answered this problem by proving that g(k) ≤ 3k2 +k. In relation to Problem 6.10.7 Song made the following much stronger
conjecture:

Conjecture 6.10.8 [678] For any k integers n1, n2, ..., nk with ni ≥ 3 for

i = 1, 2, ..., k and

k i=i

ni

=

n,

all

but

a

ﬁnite

number

of

k-strong

tourna-

ments on n vertices contain a k-cycle factor such that the k cycles have the

lengths n1, n2, ..., nk, respectively.

If, instead of tournaments, we consider digraphs which are almost complete, then, by the following result, due to Amar and Raspaud, we may almost completely specify the lengths of the cycles in a cycle factor.

Theorem 6.10.9 [24] Let D be a strong digraph on n vertices and at least (n − 1)(n − 2) + 3 arcs. For every partition n = n1 + n2 + . . . + nk such that ni ≥ 3, i = 1, 2, . . . , k, D contains a k-cycle factor C1 ∪ C2 ∪ . . . ∪ Ck such that Ci has length ni for i = 1, 2, . . . , k except in two cases:
n = 6, n1 = n2 = 3 and α(D) = 3, or n = 9, n1 = n2 = n3 = 3 and α(D) = 4.

6.10.2 The Eﬀect of α(D) on Spanning Conﬁgurations of Paths and Cycles
Since semicomplete digraphs have a lot of structure, it is natural to believe that some of this structure is present in digraphs with small independence number, in particular for digraphs of independence number two.
Two cycles C, C are consistent if they are either disjoint or their intersection is a subpath in both cycles. Chen and Manalastras proved the following:
Theorem 6.10.10 [146] If D is strong and α(D) ≤ 2, then D is either hamiltonian or it has a pair of consistent cycles which is spanning.
Bondy [125] gave a short proof of this theorem based on Lemma 5.2.2. In Chapter 7 we introduce the concept of an ear decomposition of a strong digraph. Using this concept we see that, if D has a pair of consistent cycles C, C which are spanning and not disjoint, then these along with all remaining arcs of D (not on C, C ) form an ear decomposition with precisely two nontrivial ears. Clearly the converse also holds. Theorem 6.10.10 immediately implies the following result, which implies Theorem 5.2.4 in the case α(D) = 2:
Corollary 6.10.11 [146] If D is strong and α(D) ≤ 2, then D is traceable.

330 6. Hamiltonian Reﬁnements
It is tempting to ask whether one can generalize Corollary 6.10.11 to the statement that every k-strong digraph D with α(D) ≤ k + 1 is traceable. However, the example in Figure 6.7 by Bondy [125] shows that such a generalization is not possible. See Conjecture 12.6.2 for a weaker conjecture which may still be true.
Figure 6.7 A 2-strong digraph D with α(D) = 3 and no hamiltonian path. The vertical edges correspond to directed 2-cycles.
Note that, if a digraph D = (V, A) has a hamiltonian path, then pc(D − X) ≤ |X| + 1 for every X ⊂ V (see also Proposition 1.4.6). In the digraph in Figure 6.7 we have pc(D − X) = 3 = |X| + 1 when X consists of the two left vertices. Hence, the example in Figure 6.7 also shows that the condition above is not always suﬃcient to guarantee a hamiltonian path in a digraph.
Gallai posed the following conjecture. For α = 2 the conjecture follows from Theorem 6.10.10. Conjecture 6.10.12 [296] Every strong digraph D has a spanning collection of α(D) not necessarily disjoint cycles.
The cyclomatic number of an (un)directed graph D = (V, A) is the parameter |A| − |V | + c(D), where c(D) denotes the number of connected components of U G(D). A digraph is cyclic if every vertex belongs to a cycle.
The following conjecture, which Bondy [125] attributes to Chen and Manalastras [146], generalizes Gallai’s conjecture above and Theorem 5.2.4: Conjecture 6.10.13 [125, 146] Every strong digraph D contains a cyclic spanning subdigraph with cyclomatic number at most α(D).
The example below due to Favaron (see [125]) shows that one cannot hope to ﬁnd, for every strong digraph D, a strong spanning subdigraph of D with cyclomatic number at most α(D). Let r ≥ 2 and take r copies T1, T2, . . . , Tr

6.11 Minimum Strong Spanning Subdigraphs 331
of the strong tournament on four vertices. Let the vertices be labelled so that the unique hamiltonian cycle in the ith copy is uixiviyiui, i = 1, 2, . . . , r. Let Dr be the digraph obtained from the disjoint union of T1, T2, . . . , Tr by adding the arcs uiui+1 and vi+1vi for all odd i, respectively, ui+1ui and vivi+1 for all even i, 1 ≤ i ≤ r. Then Dr is strong, α(D) = r and it can be shown that Dr has no strong spanning subdigraph with cyclomatic number less than 2r − 1 (Exercise 6.53). Moreover, every cyclic spanning subdigraph of D with cyclomatic number r consists of r disjoint 4-cycles.

6.11 Minimum Strong Spanning Subdigraphs
We consider the following problem, which we call the MSSS problem (MSSS stands for Minimum Spanning Strong Subdigraph): given a strongly connected digraph D, ﬁnd a strongly connected spanning subdigraph D of D such that D has as few arcs as possible. This problem, which generalizes the hamiltonian cycle problem and hence is N P-hard, is of practical interest and has been studied extensively in the literature, see e.g. [5, 317, 434, 478, 479, 673]. We will address this problem again in Section 7.16, where we also discuss the related problem for higher connectivities.
Since the MSSS problem is N P-hard, it is natural to study the problem under certain extra assumptions. In order to ﬁnd classes of digraphs for which we can solve the MSSS problem in polynomial time, we have to consider classes of digraphs for which we can solve the hamiltonian cycle problem in polynomial time. This follows from the fact that the hamiltonian cycle problem can be solved in polynomial time if we can solve the MSSS problem in polynomial time.

6.11.1 A Lower Bound for General Digraphs

Recall that pcc(D), the path-cycle covering number of D, is the smallest
(positive) number of paths in a k-path-cycle factor of D. Deﬁne, for every digraph D, the number pcc∗(D) by

pcc∗(D) =

0 if D has a cycle factor pcc(D) otherwise.

Proposition 6.11.1 For every strongly connected digraph D = (V, A) of order n, every spanning strong subdigraph of D has at least n + pcc∗(D) arcs.
Proof: Let D be strong and let D be a spanning strong subdigraph with n+k arcs. We may assume (by deleting some arcs if necessary) that no proper subdigraph of D is spanning and strong. It is easy to prove, by induction on k, that D can be decomposed into a cycle P0 = C and k arc-disjoint paths

332 6. Hamiltonian Reﬁnements

or cycles P1, P2, . . . , Pk with the following properties (here Di denotes the

digraph with vertices

i j=0

V

(Pj )

and

arcs9

i j=0

A(Pj

)):

1. For each i = 1, . . . k, if Pi is a cycle, then it has precisely one vertex

in common with V (Di−1). Otherwise the end-vertices of Pi are distinct

vertices of V (Di−1) and no other vertex of Pi belongs to V (Di−1).

2.

k j=0

A(Pj )

=

A(D

).

By the minimality assumption on D , each Pi has length at least two. It follows that D has a k-path-cycle factor consisting of C and k paths Pi , i = 1, 2, . . . , k, where Pi is the path one obtains from Pi by removing the vertices it has in common with V (Di−1) (deﬁned above). It follows that pcc∗(D) ≤ k.

We prove in the next subsection that the inequality of Proposition 6.11.1 is in fact an equality for extended semicomplete digraphs. It was shown in [90] that this is also the case for semicomplete bipartite digraphs. The inequality of Proposition 6.11.1 is not always an equality for general semicomplete multipartite digraphs, as such digraphs can have a cycle factor and still not be hamiltonian (see Section 5.7).

Figure 6.8 A quasi-transitive digraph D with pcc∗(D) = 0 and no hamiltonian cycle.
Even for quasi-transitive digraphs strict inequality may hold in Proposition 6.11.1. The quasi-transitive digraph D in Figure 6.8 has a cycle factor consisting of two 3-cycles and hence pcc∗(D) = 0, but D is not hamiltonian and it is easy to see that the minimum spanning strong subdigraph has 7 arcs.
6.11.2 The MSSS Problem for Extended Semicomplete Digraphs
The next result by Bang-Jensen and Yeo shows that the inequality in Proposition 6.11.1 is actually an equality for digraphs that are extensions of a
9 This coincides with the deﬁnition of an ear decomposition in Section 7.2.

6.11 Minimum Strong Spanning Subdigraphs 333

semicomplete digraph. The main tool in the proof below is the characterization of the longest cycle in an extended semicomplete digraph given in Theorem 5.7.8.

Theorem 6.11.2 [90] Let D = (V, A) be a strong extended semicomplete digraph and let D˜ = (V, A˜) be a minimum strong spanning subdigraph of D. Then |A˜| = n + pcc∗(D).

Proof: (Sketch) Let D = S[H1, H2, . . . , Hs], s = |V (S)|, be a strong extended semicomplete digraph, where the decomposition is such that S is semicom-
plete. For each i = 1, 2, . . . , s we let mi denote the maximum number of vertices from Hi that can be covered by any cycle subdigraph of D. Let C be a longest cycle of D. By Theorem 5.7.8, C contains precisely mi vertices from Hi for each i = 1, 2, . . . , s. If D is hamiltonian, then pcc∗(D) = 0 and there is nothing to prove. Hence we may assume below that pcc∗(D) > 0. By
Corollary 5.7.19, the extended semicomplete digraph D = D − C is acyclic.
Let k = α(D ). By Lemma 5.3.3, D has a path-factor P1 ∪ P2 ∪ . . . ∪ Pk where P1 is a longest path in D , P2 is a longest path in D − P1 and so on.
Start by letting H := (V (C), A(C)). Since P1 is a longest path in D , its initial (terminal) vertex x (y) has no arc entering (going out) in D . Thus,
since D is strong there exist arcs ux, yv such that u, v are vertices of H.
Change H by adding the vertices of P and all arcs of P along with the arcs
ux, yv to H. Now consider the path P2 in D − P1. Using that P2 is a longest path in D − P1, we again conclude that there must exist an arc from V (H) to the initial vertex of P2 and an arc from the terminal vertex of P2 to H. Now it is easy to see how to continue and end up with a subdigraph H which
is strong, spanning and has n + k arcs. It remains to prove that this is optimal. By the remark above pcc∗(D) > 0,
so by Proposition 6.11.1 it suﬃces to prove that k = pcc(D). Let p = pcc(D)
and let R1, R2, . . . , Rp, Q be an arbitrary p-path-cycle factor of D where Q consists of one or more cycles and Ri is a path for i = 1, 2, . . . , p. If some Ri contains two vertices from the same Hi, then we can replace it with a new path Ri and a cycle Ci (Exercise 6.54). Doing this for all the paths R1, R2, . . . , Rp until none of these contains two independent vertices we end up with a collection of paths R1, R2, . . . , Rp, where Ri is the result of removing zero or more cycles from D Ri 10. Now consider the cycle subdigraph Q we obtain by taking Q and all the cycles we extracted above. By the deﬁni-
tion of mi, Q contains at most mi vertices from Hi. Thus α(D − V (Q )) ≥ k and since no Ri contains two independent vertices, it follows that p ≥ k must hold.

Corollary 6.11.3 [90] The minimum spanning strong subdigraph of a strong

extended

semicomplete

digraph

can

be

found

in

time

O

(n

5 2

).

Proof: Exercise 6.55.
10 Observe that by the deﬁnition of p, no Ri is empty.

334 6. Hamiltonian Reﬁnements

6.11.3 The MSSS Problem for Quasi-Transitive Digraphs
We ﬁrst give a lower bound for the number of arcs in any minimum spanning strong subdigraph of an arbitrary given strong quasi-transitive digraph. This bound can be calculated in polynomial time using Gutin’s algorithm for ﬁnding a hamiltonian cycle in a quasi-transitive digraph (Theorem 5.9.4) as well as the algorithm of Theorem 5.9.5. We prove that this lower bound is also attainable for quasi-transitive digraphs. The proof of this uses Theorem 5.7.8.
Deﬁnition 6.11.4 Let D be a strong quasi-transitive digraph and deﬁne pc∗(D) by pc∗(D) = 0 if D is hamiltonian and pc∗(D) = pc(D) otherwise.

Lemma 6.11.5 For every strongly connected quasi-transitive digraph D, every spanning strong subdigraph of D has at least n + pc∗(D) arcs.

Proof: Exercise 6.57.

In fact Lemma 6.11.5 holds for arbitrary digraphs. This is not in contradiction with Theorem 6.11.2 since pcc∗(D) = pc∗(D) for every strong extended
semicomplete multipartite digraph by Theorems 5.7.2 and 5.7.5. Below we
characterize the optimal solution to the MSSS problem for quasi-transitive
digraphs and show that the problem is polynomially solvable.

Theorem 6.11.6 [82] Every minimum spanning strong subdigraph of a quasi-transitive digraph has precisely n + pc∗(D) arcs. Furthermore, we can ﬁnd a minimum spanning strong subdigraph in time O(n4).

Proof: Let D = S[W1, W2, . . . , Ws], s = |S| ≥ 2, be the decomposition of a strong quasi-transitive digraph D according to Theorem 4.8.5. Using the
algorithm of Theorem 5.9.4 we can check whether D is hamiltonian and ﬁnd
a hamiltonian cycle if one exists. If D is hamiltonian, then any hamiltonian
cycle is the optimal spanning strong subdigraph. Suppose below that D is not hamiltonian. Then in particular we have pc∗(D) = pc(D) by Deﬁnition
6.11.4.
Let D0 = S[H1, H2, . . . , Hs] be the extended semicomplete digraph one obtains by deleting all arcs inside each Wi (that is, |V (Hi)| = |V (Wi)| and Hi is obtained from Wi by deleting all arcs).
For each i = 1, 2, . . . , s, let mi denote the maximum number of vertices which can be covered in Hi by any cycle subdigraph of D0. According to Theorem 5.7.8 every longest cycle C in D0 contains exactly mi vertices from Hi, i = 1, 2, . . . , s. By Theorem 5.7.8 we can ﬁnd C in time O(n3). Let

k = max{pc(Wi) − mi : i = 1, 2, . . . , s}.

(6.4)

Note that by Theorem 5.9.3, k ≥ 1 since D has no hamiltonian cycle. Let m∗i = max{pc(Wi), mi}, i = 1, 2, . . . , s and deﬁne the extended semicomplete subdigraph D∗ of D by D∗ = S[H1∗, H2∗, . . . , Hs∗], where Hi∗ is an

6.11 Minimum Strong Spanning Subdigraphs 335

independent set containing m∗i vertices for i = 1, 2 . . . , s. Since vertices inside an independent set of D have the same in- and out-neighbours, we may think of C as a longest cycle in D∗ (i.e. C contains precisely mi vertices from Hi∗, i = 1, 2, . . . , s). By Corollary 5.7.19, D∗ − C is acyclic and by Lemma 5.3.3, D∗ − C can be covered by k paths P1∗, P2∗, . . . , Pk∗ such that Pi∗ is a longest path in D∗ − (V (P ∗) ∪ . . . ∪ V (Pi∗−1)) for i = 1, 2, . . . , k.
It follows from the proof of Theorem 6.11.2 that we can glue P1∗ onto C and then P2∗ onto the resulting graph etc., until we obtain a spanning strong subdigraph D∗∗ of D∗ with |V ∗| + k arcs.
Now we obtain a spanning strong subdigraph of the quasi-transitive digraph D as follows. Since m∗i ≥ pc(Wi) for i = 1, 2, . . . , s, each Wi contains a collection of ti = m∗i paths Pi1, Pi2, . . . , Piti such that these paths cover all vertices of Wi. Such a collection of paths can easily be constructed from a given collection of pc(Wi) paths which cover V (Wi). Let xi1, xi2, . . . , xiti be the vertex set of Hi∗, i = 1, 2, . . . , s. Replace xij in D∗∗ by the path Pij for each j = 1, 2, . . . , ti, i = 1, 2, . . . , s. We obtain a spanning strong subdigraph D of D. The number of arcs in D is

s
A(D ) = (|Wi| − m∗i ) + (|V ∗| + k)
i=1
= (n − |V ∗|) + (|V ∗| + k)
= n+k

(6.5)

It remains to argue that D is the smallest possible. By Lemma 6.11.5, it suﬃces to prove that pc∗(D) ≥ k.
Since this part is similar to the proof of Theorem 6.11.2 we only sketch
how to prove it. Let P1, P2, . . . , Pr be an optimal path cover of D. Pathcontract all subpaths that lie inside some Wi and let P1, . . . , Pr denote the resulting paths. Delete all arcs that still remain inside each Wi after this contraction. That way we obtain a path cover of an extended semicomplete
digraph which we may consider as a subdigraph of D0. As in the proof of Theorem 6.11.2 we can continue replacing paths in
the current collection by a cycle or a path until every path in the current
collection contains at most one vertex from Hi. Let P1 , P2 . . . , Pr be the ﬁnal collection after removing all such cycles. Using an argument analogous
to the last part of the proof of Theorem 6.11.2, we now conclude that r ≥ k
implying that the subdigraph D is optimal.

6.11.4 The MSSS Problem for Decomposable Digraphs
In fact the proof of Theorem 6.11.6 is valid for a much larger class of digraphs as we show below. For every natural number t, let Ψ t be the class of all digraphs for which a minimum path-factor can be found in polynomial time

336 6. Hamiltonian Reﬁnements
O(nt). For every natural number t, let Ωt be the class of all digraphs of the form D = S[H1, H2, . . . , Hs], s = |S| ≥ 2, where S is a strong semicomplete digraph and Hi ∈ Ψ t, i = 1, 2, . . . , s. By Theorem 5.9.5 the class Ω4 contains all quasi-transitive digraphs.
The next result is an extension of Theorem 5.9.3 to a much larger class of digraphs.
Theorem 6.11.7 Let t be a natural number and let D be a strong digraph from the class Ωt with decomposition D = S[W1, W2, . . . , Ws], where s = |S|, Wi ∈ Ψ t, i = 1, 2, . . . , s and S is a strong semicomplete digraph. Let D0 = S[H1, H2, . . . , Hs] be the extended semicomplete digraph obtained by deleting all arcs inside each Wi (that is, |V (Hi)| = |V (Wi)|). Then D is hamiltonian if and only if D0 has a cycle subdigraph which covers at least pc(Wi) vertices of Hi, i = 1, 2, . . . s.
Proof: Exercise 6.58.
Gutin’s approach to solving the hamiltonian cycle problem for quasitransitive digraphs can be extended to a proof of the following result.
Theorem 6.11.8 For every natural number t, the hamiltonian cycle problem is solvable in time O(nmax{3,t}) for digraphs that belong to Ωt.
Proof: Exercise 6.59.
Let D = S[H1, H2, . . . , Hs] be a digraph in Ωt. To ﬁnd a minimum strong spanning subdigraph in D, let D be the extended semicomplete digraph obtained from D by deleting all arcs within each Hi for i = 1, 2, . . . , s. By Theorem 5.7.7, we can ﬁnd a longest cycle C in D . Let mi = |V (Hi) ∩ V (C)| for i = 1, 2, . . . , s and let
k = max{pc(Hi) − mi : i = 1, 2, . . . , s}.
Using a proof analogous to that of Theorem 6.11.6, we can show that the minimum strong spanning subdigraph of D contains n + k arcs when k ≥ 1 and is a hamiltonian cycle when k ≤ 0. Combining this with Theorems 6.11.7 and 6.11.8 we obtain the following result:
Theorem 6.11.9 For every natural number t, the MSSS problem is solvable in time O(nmax{3,t}) for all digraphs in Ωt.
We close this section with the following conjecture by Bang-Jensen and Yeo:
Conjecture 6.11.10 [90] There exists a polynomial algorithm for the MSSS problem in the case of semicomplete multipartite digraphs.

6.12 Application: Domination Number of TSP Heuristics 337

6.12 Application: Domination Number of TSP Heuristics

The (asymmetric) travelling salesman problem (TSP) is formulated in Section

1.9. Here, the word asymmetric simply refers to the fact that in a 2-cycle the

costs of the two arcs may be diﬀerent.

A heuristic for an optimization problem R is an algorithm which given

an instance R of R ﬁnds some solution s to R for which there is generally

no guarantee on the quality of s compared to an optimal solution s∗ to R.

So for the TSP problem a heuristic is any algorithm which returns some
↔
permutation of the vertices of the input complete graph Kn. For more on heuristics see Section 12.8.

An equivalent of the following notion of the domination number of an

algorithm was introduced by Glover and Punnen [320]. The domination

number, domn(A, n), of a heuristic A for the TSP is the maximum integer

d = d(n) such that, for every instance I of the TSP on n cities, A produces

a tour T which is not worse than at least d tours in I including T itself.

Clearly, every exact TSP algorithm has domination number (n − 1)!. Thus,

the domination number of an algorithm close to (n − 1)! may be taken as an

indication that the algorithm is of high quality.

Glover and Punnen [320] asked whether there exists an algorithm A

whose running time is polynomial in n and which has domination number

domn(A, n) ≥ n!/p for some p being a constant or even polynomial in n.

They conjectured that, unless P = N P, the answer to this question is nega-

tive. In [381], Gutin and Yeo proved that the answer to the Glover-Punnen

question is, in fact, positive. They showed the existence of such an algorithm

for p = n − 1. The proof of the main result in [381] (see Theorem 6.12.1) uses

Tillson’s Theorem 6.8.3.

Using Theorem 6.12.1, Punnen and Kabadi [615] proved that several well-

known and widely used TSP construction heuristics, such as various vertex

insertion algorithms and Karp’s cycle patching algorithm, have domination

number at least (n − 2)!.

In this section, we prove Theorem 6.12.1 and the Punnen-Kabadi result

on vertex insertion algorithms, Theorem 6.12.2.

↔
Let (Kn, c) denote a complete digraph on n vertices whose arcs are

weighted according to a weight function c. The total cost of all Hamilton

↔

cycles in (Kn, c) is denoted by σ(n, c). Denote the sum of the costs of all

↔↔

arcs in (Kn, c) by c(Kn). The average cost of a Hamilton cycle in

(K↔n, c)

is

denoted

by

τ (n, c).

As

every

arc

of

↔
Kn

is

contained

in

(n

− 2)!

Hamilton cycles, τ (n, c) = σ(n, c)/(n − 1)! = (n − 2)!c(K↔n)/(n − 1)!, hence,

↔

τ (n, c) = c(Kn)/(n − 1). This formula can also be shown using linearity of

expectation (see [14]). Recall that by a tour we mean a Hamilton cycle in

338 6. Hamiltonian Reﬁnements

↔
Kn. An automorphism of a digraph D is a bijection φ : V (D)→V (D) such that xy ∈ A(D) if and only if φ(x)φ(y) ∈ A(D).

Theorem

6.12.1

[381]

Let

H

be

a

tour

in

↔
Kn

such

that

c(H )

≤

τ (n, c).

If

↔

n = 6, then there are at least (n − 2)! tours in Kn whose cost is at least c(H).

Proof: The result is trivial for n = 2, 3. If n = 4, the result follows from the

simple

fact

that

the

most

expensive

tour

T

in

↔
Kn

has

cost

c(T ) ≥ c(H).

Assume that n ≥ 5 and n = 6. Let D1 = {C1, ..., Cn−1} be a decom-

↔

position of the arcs of Kn into tours (such a decomposition exists by The-

↔

orem 6.8.3). Given a tour T in Kn, clearly there is an automorphism of

↔
Kn

that

maps

C1

into

T.

Therefore,
↔

if

we

consider

D1

together

with

the

decompositions (D1, ..., D(n−1)!) of Kn obtained from D1 using all automor-

↔

phisms
↔

of

Kn

which

map

the

vertex

1

into

itself,

we

will

have

every

tour

of Kn in one of the Di’s. Moreover, every tour is in exactly n − 1 of the

decompositions D1, D2, . . . , D(n−1)! (by mapping a tour Ci into a tour Cj (i, j ∈ {1, 2, ..., n − 1}) we ﬁx the automorphism).

Choose the most expensive tour in each of Di and form a set E from

all distinct tours obtained in this manner. Clearly, |E| ≥ (n − 2)!. As

n−1 i=1

c(Ci)

=

↔
c(K n ),

every

tour

T

of

E

has

cost

c(T )

≥

τ (n, c).

There-

fore, c(H) ≤ c(T ) for every T ∈ E.

Vertex insertion algorithms for the TSP work as follows. First, we ﬁnd some ordering v1, ..., vn of vertices of (K↔n, c). Then, we perform n − 1 steps. On the ﬁrst step we form the cycle v1v2v1. On step k, 2 ≤ k ≤ n − 1, given
the k-cycle vπ(1)vπ(2)...vπ(k)vπ(1) from the previous step, we ﬁnd j0, which minimizes the expression

c(vπ(j)vk+1) + c(vk+1vπ(j+1)) − c(vπ(j)vπ(j+1)),
1 ≤ j ≤ k, and insert vk+1 between vπ(j0) and vπ(j0+1) forming a (k +1)-cycle. The fastest such algorithm is the random insertion algorithm, in which the
initial vertex ordering is random (see the paper [319] by Glover, Gutin, Yeo and Zverovich for computational experiments with this and other heuristics for the (asymmetric) TSP).
Now we can prove the Punnen-Kabadi result:

Theorem 6.12.2 [615] Let Hn be a tour constructed by a vertex insertion algorithm A for the TSP on (K↔n, c). Then c(Hn) ≤ τ (n, c).
Proof: We prove this result by induction on n. The theorem is trivially true for n = 2. Let Hn−1 = vπ(1)vπ(2)...vπ(n−1)vπ(1) be the cycle constructed in Step n − 2 of the algorithm and assume that in Step n − 1, it was decided to insert vn between vπ(j0) and vπ(j0+1) in order to obtain Hn. Then, we have

6.13 Exercises 339

c(Hn) = c(Hn−1) + c(vπ(j0)vn) + c(vnvπ(j0+1)) − c(vπ(j0)vπ(j0+1))

≤ c(Hn−1) +

in=−11[c(vπ(i)vn) + c(vnvπ(i+1)) − c(vπ(i)vπ(i+1))] n−1

=

c(Hn−1) +

c(V

− vn, vn) + c(vn, V n−1

− vn) − c(Hn−1)

≤

(n − 2)τ (n − 1, c) + c(V − vn, vn) + c(vn, V n−1

− vn)

=

c(K↔n

−vn) + c(V

− vn, vn) + c(vn, V n−1

− vn)

=

c(K↔n) n−1

= τ (n, c),

↔
where τ (n − 1, c) is the average cost of a tour in Kn −vn.
Theorems 6.12.1 and 6.12.2 imply the following result by Punnen and Kabadi:
Theorem 6.12.3 [615] For every vertex insertion algorithm A we have domn(A, n) ≥ (n − 2)!.

6.13 Exercises
6.1. (−) Prove that a strong semicomplete digraph D has a hamiltonian path starting at x for every x ∈ V (D).
6.2. Prove that, if D is a strong semicomplete digraph with distinct vertices x, y such that D − x and D − y are strong but D − {x, y} is not strong, then D has an (x, y)-hamiltonian path and a (y, x)-hamiltonian path.
6.3. (−) Prove that, from a complexity point of view, the hamiltonian path problem, the [x, y]-hamiltonian path problem and the (x, y)-hamiltonian path problem are all equivalent. That is, each of them can be reduced in polynomial time to each of the two others.
6.4. Derive Corollary 6.2.2 from Theorem 6.2.1.
6.5. Prove Lemma 6.2.3.
6.6. Prove the last claim in the proof of Corollary 6.2.7.
6.7. Derive Theorem 6.2.6 from Theorem 6.2.4.

340 6. Hamiltonian Reﬁnements

6.8. 2-regular 2-strong locally semicomplete digraphs. Prove that for every n ≥ 5 there exists (up to isomorphism) precisely one 2-strong and 2-regular locally semicomplete digraph, namely the second power Cn2 of an n-cycle.
6.9. Prove that, if D is the second power of an even cycle, then D contains a unique hamiltonian cycle. Next, prove that D is not weakly hamiltonian-connected.

6.10. Prove Lemma 6.2.8.

6.11. Prove that if D is the second power P22k+1 of an odd path P = u1u2 . . . u2k+1, then there is no pair of disjoint (u1, u2k)-, (u2, u2k+1)-paths in D.

6.12. Prove Theorem 6.2.11.

6.13. Suppose D = (V, A) is a non-strong locally semicomplete digraph with strong
decomposition D1, D2, D3, D4 such that D − x is connected for every x ∈ V . Let ui ∈ V (Di) be speciﬁed for each i = 1, 2, 3, 4. Prove that D contains disjoint (u1, u3)-,(u2, u4)-paths P, Q so that V = V (P ) ∪ V (Q).

6.14. (+) Prove the following. Let T be a 2-strong semicomplete digraph and x, y vertices of T , such that T − x and T − y are both 2-strong, x→y, and neither x nor y is contained in a 2-cycle. If T − {x, y} is not 2-strong then T has an (x, y)-hamiltonian path.Hint: consider a minimal separator of the form {u, x, y}.

6.15. (+) Prove Proposition 6.3.2.

6.16. (−) Hamiltonian cycles containing a prescribed arc in semicomplete digraphs. Use Theorem 6.3.1 to show that every 3-strong semicomplete digraph D = (V, A) has a cycle containing the arc a for any prescribed arc a ∈ A.

6.17. (++) Prove Theorem 6.4.5.

6.18. Prove Lemma 6.4.3.

6.19. Longest [x, y]-paths in tournaments. Find a characterization for the length of a longest [x, y]-path in a tournament. Hint: use Theorem 6.2.1.

6.20. Non-pancyclic digraphs satisfying Meyniel’s condition. Prove that if
m > (n + 1)/2, then the digraph Dn,m described after Theorem 6.5.2 satisﬁes Meyniel’s condition for hamiltonicity but has no m-cycle.

6.21. Pancyclic digraphs satisfying Woodall’s condition for hamiltonicity.

Prove that, if D satisﬁes the condition in Corollary 5.6.6, then either D is

↔

pancyclic,

or

n

is

even

and

D

=K

n 2

,

n 2

.

Hint:

use

Theorem

6.5.2.

6.22. Prove the following result due to Overbeck-Larisch [598]. If a digraph D = (V, A) satisﬁes d(x) + d(y) ≥ 2n + 1 for every pair of non-adjacent vertices x, y ∈ V , then D is pancyclic. Hint: use Theorem 6.5.2.

6.23. (−) Prove that every regular tournament is strong.

6.24. (+) Prove Lemma 6.5.8. Hint: use a similar approach as that taken in the proof of Lemma 6.5.7.

6.25. (+) Vertex-pancyclic quasi-transitive digraphs. Prove part (b) of Theorem 6.5.9. Hint: use a similar approach as taken in the proof of (a) to reduce

6.13 Exercises 341

the problem to one for extended semicomplete digraphs and then apply Theorem 6.5.6.
6.26. Prove Lemma 6.5.12. Hint: consider a shortest cycle through v (which by the assumption has length at most k).
6.27. [420] Prove the following: let C = v1v2 . . . vkv1 be a non-extendable cycle in a digraph D = (V, A) on n vertices where 2 ≤ k ≤ n − 1 and let u ∈ V − V (C). Then (a) for every 1 ≤ i ≤ k, D contains at most one of the arcs viu and uvi+1. (b) |(u, V (C))| + |(V (C), u)| ≤ k, (c) for every 1 ≤ i ≤ k, |(vi, V − V (C))| + |(V − V (C), vi+1)| ≤ n − k, and (d) if vi−1u, uvi+1 ∈ A, then for 1 ≤ h ≤ i − 2 or i + 1 ≤ h ≤ k, D contains at most one of the arcs vhvi and vivh+1 and hence |(vi, V (C) − vi)| + |(V (C) − vi, vi)| ≤ k.
6.28. Cycle extendable regular tournaments. Characterize these.
6.29. Cycle extendable locally semicomplete digraphs. Characterize cycle extendable locally semicomplete digraphs.
6.30. (+) Weakly cycle extendable digraphs. Call a digraph D weakly cycle extendable if every cycle C which is not a longest cycle of D is contained in some larger cycle C , i.e. V (C) ⊂ V (C ). For each of the following classes characterize weakly cycle extendable digraphs: • Extended semicomplete digraphs. • Path-mergeable digraphs. • In-semicomplete digraphs.
6.31. Prove Corollary 6.6.2.
6.32. Prove Corollary 6.6.3.
6.33. (+) A bipartite digraph D = (V, A) on an even number n of vertices is even (vertex-)pancyclic if it has cycles of all lengths 4, 6, 8, . . . , n (through every vertex v ∈ V ). Prove the following theorem due to Zhang [755]:

Theorem 6.13.1 A bipartite tournament D is even vertex-pancyclic if and

only

if

D

is

hamiltonian

and

is

not

isomorphic

to

C4

[K

n 4

,

K

n 4

,

K

n 4

,

K

n ].
4

6.34. Extend Theorem 6.13.1 to semicomplete bipartite digraphs (Gutin [367]).
6.35. For every p ≥ 1, construct an inﬁnite family S of strong tournaments which satisfy that δ0(T ) ≥ p for each T ∈ S and there is some arc a ∈ A(T ) which belongs to every hamiltonian cycle of T . Extend your construction to work also for arbitrary high arc-strong connectivity.
6.36. Prove Proposition 6.7.2.
6.37. (+) Hamiltonian cycles in almost acyclic digraphs. Prove that for every ﬁxed k there is a polynomial algorithm to decide whether there is a hamiltonian cycle in a given digraph D, which is obtained from an acyclic digraph H = (V, A) by adding a set S of k new vertices and some arcs of the form st where s ∈ S and t ∈ V ∪ S. Hint: use the fact that the k-path problem is polynomial for acyclic digraphs (see Theorem 9.2.14).

342 6. Hamiltonian Reﬁnements

6.38. Let D be constructed as in Exercise 6.37. Show that, if k is not ﬁxed (that is, k is part of the input), then the problem above is N P-complete.

6.39. Let T be a tournament, let Y1, Y2, . . . , Ys (s ≥ 1) be disjoint sets of vertices in

T and let x and y be arbitrary distinct vertices in V (T ) − (Y1 ∪ Y2 ∪ . . . ∪ Ys).

Prove that, if there exist k disjoint (x, y)-paths in T , then there exist at least

k−

s i=1

|Yi|/2

disjoint (x, y)-paths in T − ∪si=1A(T Yi ).

6.40. (+) Let X1, X2, . . . , Xp and D be deﬁned as in Theorem 6.7.8. Prove that D is strong. Hint: ﬁrst prove the following two claims and then combine them into a proof that D is strong:
(a) If x ∈ Xi and y ∈ Xj (1 ≤ i = j ≤ l), then there are |Xi|/2 + |Xj|/2 + |Xl|/2 disjoint (x, y)-paths in Di,j.
(b) If x, y ∈ Xi (x = y), then there are |Xi| disjoint (x, y)-paths in Di. Furthermore there is an (x, y)-path in D (Bang-Jensen, Gutin and Yeo [71]).

6.41. (+) Prove that the digraph D in Theorem 6.7.8 has a cycle factor [71]. Hint:
let D be obtained from D by the vertex-splitting technique (Section 3.2).
Form a network from D by putting lower bound 1 on arcs of the kind vtvs, v ∈ V (D) and zero elsewhere. Put capacity 1 on arcs of the kind vtvs and ∞ on all other arcs. Now apply Theorem 3.8.2 and deduce the result from the
structure one can derive using a presumed bad cut (S, S).

6.42. (+) Prove that the digraph D in Theorem 6.7.8 is hamiltonian [71]. Hint: consider any irreducible factor. Apply Theorem 5.7.21 and conclude that the cycle factor is a hamiltonian cycle.

6.43. Show by an example that s + 1 cannot be replaced by s in Proposition 6.7.13.

6.44. Show that Theorem 6.8.1 follows from Theorem 1.6.3.
↔
6.45. Prove that the arcs of K6 cannot be decomposed into 5 hamiltonian cycles.
6.46. (−) Prove Theorem 6.8.2. Hint: use Exercise 3.70.

6.47. (−) Prove that every regular tournament is arc-3-cyclic. Show that this is not always true for regular semicomplete digraphs.

6.48. (−) Verify that none of the three tournaments in Figure 6.5 contain an antidirected hamiltonian path.

6.49. Prove Theorem 6.8.9.

6.50. Orientations of paths in strong tournaments. Prove the following statement. Let T be a strong tournament on n vertices and P an out-path on n−1 vertices. Then (a) every vertex of T except possibly one is an origin of P and (b) if 1(P ) ≥ 2, then every vertex of out-degree at least 2 is an origin of P .
6.51. Orientations of paths in 2-strong tournaments. Let T be a 2-strong tournament on n vertices and let P be an oriented path on n − 1 vertices. Prove that every vertex of T is an origin of P .

6.52. Show that there is only one 2-strong tournament on 7 vertices which has no 2-cycle factor.

6.13 Exercises 343
6.53. Let Dr be the digraph which is deﬁned in the end of Subsection 6.10.2. Show that every strong spanning subdigraph of Dr has cyclomatic number at least 2r − 1. Next show that every cyclic spanning subdigraph of Dr with cyclomatic number r is an r-cycle factor in which all cycles are 4-cycles.
6.54. Prove that if a path P in an extended semicomplete digraph D contains two vertices from an independent set I of D, then there exists a path P and a cycle C in D with V (P ) = V (P ) ∪ V (C ).
6.55. First derive a direct O(n3) algorithm from the proof of Theorem 6.11.2. Then show ((+) exercise) how to improve this to O(n2.5) starting from a pcc(D)path-cycle factor.
6.56. Show that the proof of Theorem 6.11.6 can be turned into an O(n4) algorithm for ﬁnding a minimum strong spanning subdigraph of a quasi-transitive digraph.
6.57. (+) Prove Lemma 6.11.5. Hint: consider the way we argued in the proof of Proposition 6.11.1.
6.58. (+) Prove Theorem 6.11.7. Hint: use the same approach as in the proof of Theorem 5.9.1.
6.59. (+) Prove Theorem 6.11.8. Hint: use the same approach as in the proof of Theorem 5.9.4.

7. Global Connectivity
The concept of connectivity is one of the most fundamental concepts in (directed) graph theory. There are numerous practical problems which can be formulated as connectivity problems for digraphs and hence a signiﬁcant part of this theory is also important from a practical point of view. Results on connectivity are often quite diﬃcult and a deep insight may be required before one can obtain results in the area. The purpose of this chapter is to convey some of that insight by illustrating several important topics as well as techniques that have been successful in solving global connectivity problems. Several of these problems, such as the connectivity augmentation problems in Sections 7.6 and 7.7, are of signiﬁcant practical interest. Because of the very large number of important results on connectivity, we will devote this chapter as well as Chapters 8 and 9 to this area. This chapter will mainly deal with global connectivity aspects. That is, the directed multigraph in question is k-(arc)-strong for some k ≥ 0, or we want to make it k-(arc)-strong by adding new arcs.
We will often consider directed multigraphs rather than directed graphs, since several results on arc-strong connectivity hold for this larger class and also it becomes easier to prove many results. However, when we consider vertex-strong connectivity, multiple arcs play no role and then we may assume that we are considering digraphs. Note that, unless we explicitly say otherwise, we will assume that we are working with a directed graph (i.e there are no multiple arcs).
After introducing some new terminology and an eﬃcient way of representing a directed multigraph as a network we proceed to ear-decompositions of strong directed multigraphs. We show how to use this useful concept to obtain short proofs of several basic connectivity results. Then we state and prove Menger’s theorem which is one of the most fundamental results in graph theory. Based on Menger’s theorem, we describe various algorithms to determine the arc-strong and vertex-strong connectivity of a directed multigraph. In Section 7.5 we introduce the operation of splitting oﬀ a pair of arcs incident with a vertex. We prove Mader’s splitting theorem which allows one to give inductive proofs for several important results on directed multigraphs. Using Mader’s theorem we describe a solution due to Frank for the problem of ﬁnding a minimum set of new arcs to add to a directed multigraph

346 7. Global Connectivity
such that the result is a k-arc-strong multigraph. In Section 7.7 we describe a solution by Frank and Jord´an of the analogous problem for vertex-strong connectivity.
Another way of increasing the arc-strong or vertex-strong connectivity of a digraph is by reversing the orientation of certain arcs. In Section 7.9 we discuss this approach and describe an interesting result for semicomplete digraphs by Bang-Jensen and Jord´an. In Section 7.10 we study the structure of directed multigraphs which are k-(arc)-strong but removing any arc destroys that property. We prove deep results by Mader on the structure of such directed multigraphs. Section 7.11 deals with digraphs which are k-strong but no vertex can be deleted without decreasing the vertex-strong connectivity. In Section 7.12 we brieﬂy discuss directed multigraphs for which the degree of arc-strong connectivity is as large as possible, that is, equal to the minimum degree. In Section 7.13 we show that decomposable digraphs have an interesting connectivity structure.
In Section 7.14 we study an interesting problem due to Jackson and Thomassen concerning the existence of highly connected orientations of digraphs with high connectivity. We show that such orientations exist in the case of locally semicomplete digraphs and quasi-transitive digraphs. In Section 7.15 we give a proof due to Lov´asz of the Lucchesi-Younger theorem concerning arc-disjoint dicuts in directed multigraphs. Finally, in Section 7.16 we consider the problem of ﬁnding a small spanning subdigraph of a directed multigraph D with the same degree of arc-strong, respectively vertex strong, connectivity as D.
7.1 Additional Notation and Preliminaries
Let D = (V, A) be a directed multigraph and let X, Y ⊆ V be subsets of V . We denote by d+(X, Y ) the number of arcs with tail in X − Y and head in Y − X, i.e d+(X, Y ) = |(X − Y, Y − X)D|. Furthermore we let d(X, Y ) = d+(X, Y ) + d+(Y, X). Hence we have d+(X) = d+(X, V − X) and d−(X) = d+(V − X, X). An arc xy leaves a set X if x ∈ X and y ∈ V − X. The sets X, Y are intersecting if each of the sets X − Y, X ∩ Y, Y − X is non-empty. If also V − (X ∪ Y ) = ∅, then X and Y are crossing.
Let F be a family of subsets of a set S. We call a set A ∈ F a member of F. The family F is an intersecting family (a crossing family) if A, B ∈ F implies A ∪ B, A ∩ B ∈ F whenever A, B are intersecting (crossing) members of F. A family F of subsets of a set S is laminar if it contains no two intersecting members. That is, if A, B ∈ F and A ∩ B = ∅ then either A ⊆ B or B ⊆ A holds. A family of sets is cross-free if it contains no two crossing members.
For an arbitrary directed multigraph D = (V, A) and vertices x, y ∈ V we denote by λ(x, y) (κ(x, y)) the maximum number of arc-disjoint (internally disjoint) (x, y)-paths in D. The numbers λ(x, y), κ(x, y) are called the local

7.1 Additional Notation and Preliminaries 347
arc-strong connectivity, respectively, the local vertex-strong connectivity from x to y. Furthermore we let

λ (D) = min λ(x, y)
x,y∈V
κ (D) = min κ(x, y).
x,y∈V

(7.1)

Analogously to the way we deﬁned a cut with respect to an (s, t)-ﬂow in Chapter 3 we deﬁne an (s, t)-cut to be a set of arcs of the form (U, U¯ ), where U¯ = V − U and s ∈ U, t ∈ U¯ . Recall that an (s, t)-separator is a subset X ⊆ V (D) − {s, t} with the property that D − X has no (s, t)-path. We also say that X separates s from t. Thus a separator of D is a set of vertices S such that S is an (s, t)-separator for some pair s, t ∈ V (D) (recall the deﬁnition of a separator from Subsection 1.5). A minimum separator of D is a minimum cardinality separator X of D.
The following simple observation plays a central role in many proofs of connectivity results.

Proposition 7.1.1 Let D = (V, A) be a directed multigraph and let X, Y be subsets of V . Then the following holds:

d+(X) + d+(Y ) = d+(X ∪ Y ) + d+(X ∩ Y ) + d(X, Y ) d−(X) + d−(Y ) = d−(X ∪ Y ) + d−(X ∩ Y ) + d(X, Y ).

(7.2)

Furthermore, if d−(X ∩ Y ) = d+(X ∩ Y ), then we also have

d+(X) + d+(Y ) = d+(X − Y ) + d+(Y − X) + d−(X) + d−(Y ) = d−(X − Y ) + d−(Y − X) + ,

(7.3)

where = d(X ∩ Y, V − (X ∪ Y )).

Proof: Each of these equalities can easily be proved by considering the contribution of the diﬀerent kinds of arcs that are counted on at least one side of the equality. For example Figure 7.1 shows the possible edges contributing to at least one side of the ﬁrst equality.
A set function f on a groundset S is submodular if f (X) + f (Y ) ≥ f (X ∪ Y ) + f (X ∩ Y ) for all X, Y ⊆ S. The next corollary which follows directly from Proposition 7.1.1 is very useful, as we shall see many times in this chapter.
Corollary 7.1.2 For an arbitrary directed multigraph D, d+D, d−D are submodular functions on V (D).

Recall that for a proper subset X of V (D) we denote by N +(X) the set of out-neighbours of X. The next result shows that the functions |N −|, |N +|
are also submodular.

348 7. Global Connectivity X

Y

Figure 7.1 The various types of arcs contributing to the out-degrees of the sets X, Y, X ∩ Y and X ∪ Y .
Proposition 7.1.3 Let D = (V, A) be a digraph and let X, Y be subsets of V . Then the following holds:
|N +(X)| + |N +(Y )| ≥ |N +(X ∩ Y )| + |N +(X ∪ Y )| |N −(X)| + |N −(Y )| ≥ |N −(X ∩ Y )| + |N −(X ∪ Y )|.
Proof: These inequalities can easily be checked by considering the contributions of the diﬀerent kind of neighbours of the sets X, Y, X ∩ Y and X ∪ Y (Exercise 7.1).
7.1.1 The Network Representation of a Directed Multigraph
In many proofs and algorithms concerning directed multigraphs, it is convenient to think of a directed multigraph as a (ﬂow) network. Here we will formalize this and prove an elementary result which will be applied in later sections.
Deﬁnition 7.1.4 Let D = (V, A) be a directed multigraph. The network representation of D, denoted N (D), is the following network: N (D) = (V, A , ≡ 0, u) where A contains the arc ij precisely when D contains at least one arc from i to j. For every arc ij ∈ A uij is equal to the number of arcs from i to j in D. See Figure 7.2.
The next lemma shows a useful connection between arc-disjoint paths in D and ﬂows in N (D).
Lemma 7.1.5 Let D = (V, A) be a directed multigraph and let s, t be distinct vertices of V . Then λ(s, t) equals the value of a maximum (s, t)-ﬂow in N (D).
Proof: Let P1, . . . , Pr be a collection of pairwise arc-disjoint (s, t)-paths in D. These paths may use diﬀerent copies of an arc between the same two

7.2 Ear Decompositions 349

3
21 1
4 2
2

1 2
1
3 1

D N (D)
Figure 7.2 A directed multigraph D and its network representation N (D). Numbers on arcs indicate capacity in N (D).

vertices i and j, but, since the paths are arc-disjoint, in total they use no
more than uij copies of the arc ij. Hence we can construct a feasible (s, t)ﬂow of value r in N (D) just by sending one unit of ﬂow along each of the
paths P1, . . . , Pr. Conversely, if x is any integral (s, t)-ﬂow of value k in N (D) (recall Theorem 3.5.5), then by Theorem 3.3.1, x can be decomposed into k
(s, t)-path-ﬂows f (P1), . . . , f (Pk) of value 1 (those that have a higher value r > 1 can be replaced by r (s, t)-path-ﬂows of value 1 along the same path)
and some cycle ﬂows. By the capacity constraint on the arcs, at most uij of these path ﬂows use the arc ij. Hence we can replace the arcs used by each
f (Pi) by arcs in D in such a way that we obtain k arc-disjoint (s, t)-paths in D. This completes the proof of the lemma.

7.2 Ear Decompositions
In this section we study the structure of strongly connected digraphs by introducing the concept of an ear decomposition (see Figure 7.3) and derive a number of interesting results from this deﬁnition. Among other things, we reprove some of the results from Chapter 1.
Deﬁnition 7.2.1 An ear decomposition of a directed multigraph D = (V, A) with at least two vertices is a sequence E = {P0, P1, P2, . . . , Pt}, where P0 is a cycle1 and each Pi is a path or a cycle with the following properties:
(a) Pi and Pj are arc-disjoint when i = j.
1 Some authors take P0 to be just a vertex, but it is easy to see that the two deﬁnitions are equivalent for strong directed multigraphs with at least one arc.

350 7. Global Connectivity

(b) For each i = 1, . . . t: If Pi is a cycle, then it has precisely one vertex

in common with V (Di−1). Otherwise the end-vertices of Pi are distinct

vertices of V (Di−1) and no other vertex of Pi belongs to V (Di−1). Here

Di denotes the digraph with vertices

i j=0

V

(Pj )

and

arcs

i j=0

A(Pj

).

(c)

t j=0

A(Pj )

=

A.

Each Pi, 0 ≤ i ≤ t is called an ear of E. The number of ears in E is the number t + 1. An ear Pi is trivial if |A(Pi)| = 1. All other ears are non-trivial.

6

0 1 10

0 45

02 0

2

33 3

1 0

0

2

02

Figure 7.3 An ear decomposition E = {P0, P1, . . . , P6} of a digraph. The number on each arc indicates the number of the ear to which it belongs. The ears
P0, P1, P2, P3 are non-trivial and the ears P4, P5, P6 are trivial.

Theorem 7.2.2 Let D be a directed multigraph with at least two vertices. Then D is strong if and only if it has an ear decomposition. Furthermore, if D is strong, then every cycle C of D can be used as starting cycle P0 for an ear decomposition of D.
Proof: We may assume that |V (D)| ≥ 3 since otherwise the claim is trivial. Suppose ﬁrst that D has an ear decomposition E = {P0, P1, P2, . . . , Pt}. Note that the digraph P0 is strong. Now it is easy to prove, by induction on the number of ears in E, that D is strong. If Di is strong, then Di+1 is also strong since it is obtained by adding a path with two end-vertices x, y in Di or a cycle having a common vertex with Di.
Conversely, assume that D is strong and let C = u1u2 . . . ur (u1 = ur) be a cycle of D. Let P0 := C, i := 0 and execute Phases 1 and 2 below:
Phase 1:
1. If every vertex of V (D) is in V (Di), then go to Phase 2. 2. Let i := i + 1 and let u be a vertex not in V (Di−1) such that there is
some arc xu from V (Di−1) to u. 3. Let Pi be a shortest path from u to V (Di−1).

7.2 Ear Decompositions 351

4. Take xPi as the next ear and repeat Phase 1.
Phase 2:
1. For each remaining arc vw of D which was not included in A(Di) (i is the counter above) do the following:
2. Let i := i + 1 and let Pi = vw (that is, include all these arcs as trivial ears).
To see that the algorithm above ﬁnds an ear decomposition of D, it suﬃces to check that we can always ﬁnd an arc xu and a path from u to V (Di) as claimed in Phase 1. This follows easily from the fact that D is strong.
There are several interesting consequences of Theorem 7.2.2 and its proof.

Corollary 7.2.3 Every ear-decomposition of a strong digraph on n vertices and m arcs has m − n + 1 ears.

Proof: Exercise 7.2.

Corollary 7.2.4 Every strong directed multigraph D on n vertices contains a spanning strong subgraph with at most 2n − 2 arcs. Furthermore, there are directed multigraphs for which every spanning strong subgraph has at least 2n − 2 arcs.

Proof: First observe that we can remove all trivial ears in any ear decomposi-
tion of D without destroying strong connectivity. Thus it suﬃces to estimate
the number of arcs in the non-trivial ears. Let E = P0, P1, . . . , Pr, Pr+1, . . . , Pt be an ear decomposition of D where P0, P1, . . . , Pr are the non-trivial ears. Let Pi be the path Pi − V (Di−1). Since each Pi, i = 1, 2, . . . , r adds at least one new vertex, there can be no more than n−|V (P0)| of these. Each new ear Pi adds |V (Pi )| + 1 new arcs and hence we can make the following estimate:

r
|A(Dr)| = |V (P0)| + (|V (Pi )| + 1)
i=1 r
= |V (P0)| + r + (|V (Pi )|)
i=1
= n+r

≤ n + n − |V (P0)| ≤ 2n − 2,

(7.4)

where equality only holds if |V (P0)| = 2 and each Pi, i = 1, 2, . . . , r, has length 2. To see that the estimate 2n−2 is best possible, it suﬃces to consider
the complete biorientation of a path on n vertices.

Corollary 7.2.5 There is a linear algorithm to ﬁnd an ear decomposition of a strong directed multigraph D.

352 7. Global Connectivity
Proof: This can be seen from the proof of Theorem 7.2.2. The proof itself is algorithmic and it is not too hard to see that if we use breadth ﬁrst search (see Section 2.3.1) together with a suitable data structure to ﬁnd the path from u to V (Di−1), then we can obtain a linear algorithm. Details are left to the interested reader as Exercise 7.21.
Corollary 7.2.6 It is an N P-complete problem to decide whether a given digraph D has an ear decomposition with at most r non-trivial ears. It is N P-complete to decide if a given digraph D has an ear decomposition with at most q arcs in the non-trivial ears.
Proof: Note that in both cases the numbers r (respectively q) are assumed to be part of the input to the problem. A strong digraph D has an ear decomposition with only one non-trivial ear (respectively, precisely n arcs in the non-trivial ears) if and only if D has a Hamilton cycle. Hence both claims follow from Theorem 5.0.1.
The next two Corollaries were proved in Chapter 1, but we reprove them here to illustrate an application of ear-decompositions. Recall that a bridge of an undirected graph G is an edge e such that G − e is not connected.
Corollary 7.2.7 [637] A strong digraph D contains a spanning oriented subgraph which is strong if and only if U G(D) has no bridge.
Proof: If U G(D) has a bridge, xy, then D contains the 2-cycle xyx, since D is strong. Observe that no matter which of these two arcs we delete we obtain a non-strong digraph. Suppose conversely that U G(D) has no bridge. Consider again the proof of Theorem 7.2.2. If we can always choose the path from u to V (Di−1) in such a way that it does not end in x, or contains at least one inner vertex, then it follows from the fact that we use shortest paths that no ear Pi, i ≥ 1 contains a 2-cycle. In the remaining case, the only path from u to V (Di−1) is the arc ux and hence the 2-cycle xux is a bridge in U G(D). It remains to avoid using a 2-cycle as starting point (that is, as the cycle P0). This can be done, unless all cycles in D are 2-cycles. If this is the case then U G(D) is a tree and every edge of U G(D) is a bridge, contradicting the assumption.
Corollary 7.2.8 [120] A mixed graph M has a strong orientation if and only if M is strongly connected and has no bridge.
Proof: This follows from Corollary 7.2.7, since we may associate with any mixed graph M = (V, A, E) the directed graph D one obtains by replacing each edge in M by a 2-cycle. Clearly deleting an arc of a 2-cycle in D corresponds to orienting the corresponding edge in M .
Ear decompositions of undirected graphs can be similarly deﬁned. These play an important role in many proofs on undirected graphs, in particular in Matching Theory; see e.g. the book by Lov´asz and Plummer [525].

7.3 Menger’s Theorem 353
7.3 Menger’s Theorem
The following theorem, due to Menger [562], is one of the most fundamental results in graph theory.
Theorem 7.3.1 (Menger’s theorem) [562] Let D be a directed multigraph and let u, v ∈ V (D) be a pair of distinct vertices. Then the following holds:
(a) The maximum number of arc-disjoint (u, v)-paths equals the minimum number of arcs covering all (u, v)-paths and this minimum is attained for some (u, v)-cut (X, X¯ ).
(b) If the arc uv is not in A(D), then the maximum number of internally disjoint (u, v)-paths equals the minimum number of vertices in a (u, v)separator.
Proof: First let us see that version (b) involving vertex disjoint paths can be easily derived from the arc-disjoint version (a). First recall that multiple arcs play no role in questions regarding (internally) vertex disjoint paths and hence we can assume that the directed multigraph in question is actually a digraph. Given a digraph D = (V, A) and u, v ∈ V construct the digraph DST by the vertex splitting procedure (see Section 3.2.4). Now it is easy to check that arc-disjoint (us, vt)-paths in DST correspond to internally disjoint (u, v)-paths in D (if an (us, vt)-path in DST contains the vertex xt (xs) for some x = u, v, then it must also contain xs (xt)). Furthermore, for any set of
arcs that cover all (us, vt)-paths in DST , there exists a set of arcs of the form wt1ws1, . . . , wt ws with the same property and such a set corresponds to an (u, v)-separator X = {w1, . . . , w } in D. Hence it suﬃces to prove (a).
Because of the similarity between Menger’s theorem (in the form (a)) and the Max-ﬂow Min-cut theorem (Theorem 3.5.3), it is not very surprising that we can prove Menger’s theorem in version (a) using Theorem 3.5.3. We did part of the work already in Section 7.1.1 where we showed that λ(u, v) equals the value of a maximum (u, v)-ﬂow in N (D). Similarly it is easy to see that every (u, v)-cut (X, X¯ ) in D corresponds to a (u, v)-cut (X, X¯ ) in N (D) of capacity |(X, X¯ )| and conversely. Now (a) follows from Theorem 3.5.3.
As we shall see in Exercise 7.16, for networks where all capacities are integers, we can also derive the Max-ﬂow Min-cut theorem from Menger’s theorem.
In order to illustrate the use of submodularity in proofs concerning connectivity for digraphs we will give a second proof of Theorem 7.3.1 (a) due to Frank [260] (note that this proof requires no prerequisites other than Proposition 7.1.1):
Second proof of Menger’s theorem part (a): Clearly the maximum number of arc-disjoint (s, t)-paths can be no more
than the minimum size of an (s, t)-cut. The proof of the other direction is by induction on the number of arcs in
D. Let k denote the size of a minimum (s, t)-cut. The base case is when D has

354 7. Global Connectivity

precisely k arcs. Then these all go from s to t and thus D has k arc-disjoint (s, t)-paths. Hence we can proceed to the induction step. Call a vertex set U tight if s ∈ U, t ∈ U and d+(U ) = k. If some arc xy does not leave any tight set, then we can remove it without creating an (s, t)-cut of size (k − 1) and the result follows by induction. Hence we can assume that every arc in D leaves a tight set.
Claim: If X and Y are tight sets, then so are X ∩ Y and X ∪ Y .

To see this we use the submodularity of d+. First note that each of X ∩ Y and X ∪Y contains s and none of them contains t. Hence, by our assumption, they both have degree at least k in D. Now using (7.2) we conclude
k + k = d+(X) + d+(Y ) ≥ d+(X ∪ Y ) + d+(X ∩ Y ) ≥ k + k, (7.5)

by the remark above. It follows that each of X ∪ Y and X ∩ Y is tight and

the claim is proved.

If every arc in D is of the from st, then we are done, so we may assume

that D has an arc su where u = t. Let T be the union of all tight sets that

do not contain u. Then T = ∅, since the arc su leaves a tight set. By the

claim, T is also tight. Now consider the set T ∪ {u}. If there is no arc from u

to V − T , then d+(T ∪ {u}) ≤ k − 1, a contradiction since T ∪ {u} contains

s but not t. Hence there must be some v ∈ V − T − u such that uv ∈ A(D).

Now let D be the directed multigraph we obtain from D by replacing the

two arcs su, uv by the arc sv. Suppose D contains an (s, t)-cut of size less

than k. That means that some set X containing s but not t has out-degree

at most s, v ∈ X

k− and

1 u

in ∈

D X.

.HSeinncceedd+D+D((XX))=≥kkanitd

is easy to see that we must have now we get a contradiction to the

deﬁnition of T (since we know that v ∈ T ). Thus every (s, t)-cut in D has

size at least k. Since D has fewer arcs than D it follows by induction that

D contains k arc-disjoint (s, t)-paths. At most one of these can use the new

arc sv (in which case we can replace this arc by the two we deleted). Thus it

follows that D also has k arc-disjoint (s, t)-paths.

Corollary 7.3.2 Let D = (V, A) be a directed multigraph. Then the following holds:
(a) D is k-arc-strong if and only if it contains k-arc-disjoint (s, t)-paths for every choice of distinct vertices s, t ∈ V .
(b) D is k-strong if and only if |V (D)| ≥ k + 1 and D contains k internally vertex disjoint (s, t)-paths for every choice of distinct vertices s, t ∈ V .

Proof: Recall that, by deﬁnition, a directed multigraph D = (V, A) is k-arcstrong if and only if D − A is strong for every A ⊂ A with |A | ≤ k − 1. Now we see that (a) follows immediately from Theorem 7.3.1(a). To prove (b) we argue as follows: By deﬁnition (see Chapter 1) D is k-strong if and only if |V (D)| ≥ k + 1 and D − X is strong for every X ⊂ V such that |X| ≤ k − 1.

7.4 Application: Determining Arc- and Vertex-Strong Connectivity 355
Suppose that D has at least k + 1 vertices but is not k-strong. Then we can ﬁnd a subset X ⊂ V of size at most k − 1 such that D − X is not strong. Let D1, . . . , Dr, r ≥ 2 be any acyclic ordering of the strong components in D − X. Taking s ∈ V (Dr) and t ∈ V (D1) it follows that there is no arc from s to t and that X is an (s, t)-separator of size less than k. Now it follows from Theorem 7.3.1(b) that D does not contain k internally vertex disjoint paths from s to t.
Suppose conversely that there exists s, t ∈ V (D) such that there are no k internally disjoint (s, t)-paths in D. If there is no arc from s to t, then it follows from Theorem 7.3.1(b) that D contains an (s, t)-separator X of size less than k. Then D − X is not strong and, by deﬁnition, D is not k-strong. Hence we may assume that there is an arc st in D. Let r be the number of arcs from s to t in D (i.e. µ(s, t) = r). If r ≥ k, then k of these arcs form the desired (s, t)-paths, so by our assumption on s, t we have r < k. Now consider the digraph D obtained from D by removing all arcs from s to t. In D there can be no k − r internally disjoint (s, t)-paths (since otherwise these together with the r arcs from s to t would give a collection of k internally disjoint (s, t)-paths). Thus, by Theorem 7.3.1(b), there exists a set X ⊂ V of size less than k − r which forms an (s, t)-separator in D .
Let A, B denote a partition of V − X in such a way that s ∈ B, t ∈ A and there is no arc from B to A in D . Since |V | ≥ k + 1, at least one of the sets A, B contains more than one vertex. Without loss of generality we may assume that A contains a vertex v distinct from t. Now we see that X ∪ {t} is an (s, v)-separator of size less than k − r + 1 ≤ k in D and there is no arc from s to v in D. Applying Theorem 7.3.1(b) to this pair we conclude as above that D is not k-strong.
Recall the numbers λ (D), κ (D) which were deﬁned in (7.1).
Corollary 7.3.3 Let D be a directed multigraph. The number λ (D) equals the maximum number k for which D is k-arc-strong. The number κ (D) equals the maximum number k for which k ≤ |V | − 1 and D is k-strong. Hence we have λ (D) = λ(D) and κ (D) = κ(D).
7.4 Application: Determining Arc- and Vertex-Strong Connectivity
In applications it is often important to be able to calculate the degree of arc-strong or vertex-strong connectivity of a directed multigraph. We can reduce the problem of ﬁnding κD(x, y) to that of ﬁnding the local arc-strong connectivity from xs to yt in the digraph DST which we obtain by applying the vertex splitting procedure to D (see the proof of Theorem 7.3.2). Thus it is suﬃcient to consider arc-strong connectivity. It follows from Menger’s

356 7. Global Connectivity

theorem and Lemma 7.1.5 that λ(D) can be found using O(n2) ﬂow calculations. Namely, determine λ(x, y) for all choices of x, y ∈ V (D). However, as we shall see below we can actually ﬁnd λ(D) with just O(n) ﬂow calculations. For a similar result see Exercise 7.7.

Proposition 7.4.1 [654] For any directed multigraph D = (V, A) with V = {v1, v2, . . . , vn} the arc-strong connectivity of D satisﬁes

λ(D) = min {λ(v1, v2), . . . , λ(vn−1, vn), λ(vn, v1)}.

Proof: Let k = λ(D). By (7.1) and Corollary 7.3.3, λ(D) is no more than the minimum of the numbers λ(v1, v2), . . . , λ(vn−1, vn), λ(vn, v1). Hence it suﬃces to prove that k = λ(vi, vi+1) for some i = 1, 2, . . . , n (where vn+1 = v1). By Corollary 7.3.3 and Theorem 7.3.1, some X ⊂ V has out-degree k. If there is an index i ≤ n − 1 such that vi ∈ X and vi+1 ∈ V − X, then, by Menger’s theorem, λ(vi, vi+1) ≤ k and the claim follows. If no such index exists, then we must have X = {vr, vr+1, . . . , vn} for some 1 < r ≤ n. Now we get by Menger’s theorem that λ(vn, v1) ≤ k and the proof is complete.
Combining this with Lemma 7.1.5, we get the following result due to Schnorr [654]:

Corollary 7.4.2 We can calculate the arc-strong connectivity of a directed multigraph by O(n) maximum ﬂow calculations in N (D).

If D has no multiple arcs, then its network representation N (D) has all

capacities equal to 1 and it follows from Theorem 3.7.4 that we can ﬁnd a

maximum

ﬂow

in

N (D)

in

time

O(n

2 3

m)

and

hence

we

can

calculate

λ(D)

in

time

O(n

5 3

m).

Esfahanian and Hakimi [224] showed that the bound, n, on the number of

max-ﬂow calculations that is needed can be improved by a factor of at least

2.

Note that, if we are only interested in deciding whether λ(D) ≥ k for

some value of k which is not too big compared to m, then it may be better

to use the simple labelling algorithm of Ford and Fulkerson (see Chapter 3).

In that case it is suﬃcient to check for ﬂows of value at least k, which can be

done with k ﬂow-augmenting paths and hence in time O(km) per choice of

source and terminal. Thus the overall complexity of ﬁnding λ(D) is O(knm)

(see also the book by Even [229]). This can be improved slightly; see the

paper [295] by Galil. For other connectivity algorithms based on ﬂows, see

e.g. [228, 232].

One may ask if there is a way of deciding whether a given directed multi-

graph D is k-(arc)-strong without using ﬂows. Extending work by Linial,

Lov´asz and Wigderson [515] (see also [523]), Cheriyan and Reif [150] gave

7.4 Application: Determining Arc- and Vertex-Strong Connectivity 357

Monte-Carlo and Las Vegas2 type algorithms for k-strong connectivity in digraphs. Both algorithms in [150] are based on a characterization of k-strong digraphs via certain embeddings in the Euclidean space Rk−1. The algorithms are faster than the algorithms described above, but the price is the chance of an error (for the Monte Carlo algorithm), respectively only the expected running time can be given (for the Las Vegas Algorithm). We refer the reader to [150] for details.
The currently fastest algorithm to determine the arc-strong connectivity uses matroid intersection (see Section 12.7 for the deﬁnition of the matroid intersection problem) and is due to Gabow [287]. This algorithm ﬁnds the arcstrong connectivity of a digraph D in time O(λ(D)m log (n2/m)). It is based on Edmonds’ branching theorem (Theorem 9.5.1). In Chapter 9 we discuss the relation between arc-strong connectivity and arc-disjoint branchings, which is used in Gabow’s algorithm. Gabow’s approach also works very eﬃciently for the case when we want to decide if λ(D) ≥ k for some number k.
The currently fastest algorithm to determine κ(D) is due to Henzinger, Rao and Gabow [422]. This algorithm is based on ﬂows and combines ideas from [228, 232, 295, 398]. The complexity of the algorithm is O(min{κ(D)3 + n, κ(D)n}m).
For undirected graphs Ibaraki and Nagamochi [579] found a very elegant and eﬀective way to calculate the edge-connectivity without using ﬂow algorithms. We describe their method brieﬂy below (see also [269, 580]).
A maximum adjacency ordering of an undirected graph G = (V, E) is an ordering v1, v2, . . . , vn of its vertices, satisfying the following property

d(vi+1, Vi) ≥ d(vj, Vi) for i = 1, 2, . . . , n, i < j ≤ n,

(7.6)

where Vi = {v1, v2, . . . , vi} and d(X, Y ) denotes the number of edges with one end in X − Y and the other in Y − X.

Theorem 7.4.3 [579]
(a) Given any undirected graph G on n vertices, one can ﬁnd a maximum adjacency ordering of G starting at a prescribed vertex v1 in time O(n + m).
(b) For every maximum adjacency ordering v1, v2, . . . , vn of G we have λ(vn−1, vn) = dG(vn).

Corollary 7.4.4 [579] There is an O(nm + n2) algorithm to determine the edge-connectivity of a graph with n vertices and m edges.
2 A Monte-Carlo algorithm always terminates, but may make an error with some small probability, whereas a Las Vegas algorithm may (with some small probability) never terminate, but if it does, then the answer it provides is correct; see the book [134] by Brassard and Bratley.

358 7. Global Connectivity

Proof: This is an easy consequence of (b) and the fact that for every choice

of x, y ∈ V (G):

λ(G) = min{λ(x, y), λ(G/{x, y})},

(7.7)

where G/{x, y} is the graph we obtain from G by contracting the set {x, y}.
The equality (7.7) follows from the fact that λ(G) equals the size of a mini-
mum cut (X, V − X) in G. If this cut separates x, y, then λ(G) = λ(x, y) by
Menger’s theorem, and otherwise X is still a cut in G/{x, y}, implying that
λ(G) = λ(G/{x, y}) (contractions do not decrease edge-connectivity). Hence
we can start from an arbitrary maximum adjacency ordering v1, v2, . . . , vn. This gives us λ(vn−1, vn). Save this number, contract {vn−1, vn} and continue with a maximum adjacency ordering of G/{vn−1, vn}. The edge-connectivity of G is the minimum of the numbers saved. We leave the remaining details
to the interested reader (see also the paper [581] by Nagamochi and Ibaraki).

yx

xy

D D/{x, y}
Figure 7.4 A digraph D with λ(D) = 0, λ(x, y) = 2 and λ(D/{x, y}) = 1.
It is an interesting open problem whether some similar kind of ordering can be used to ﬁnd the arc-strong connectivity of a directed multigraph. Note that (7.7) does not hold for arbitrary directed multigraphs. To see this consider Figure 7.4.

7.5 The Splitting oﬀ Operation

In Frank’s proof of Menger’s theorem in Section 7.3, we saw how one could apply the idea of replacing two arcs incident to some vertex by one and thereby apply induction. In this section we shall see yet another indication that this type of operation can be very useful. We consider a directed multigraph D with a special vertex s. We always assume that

d+D(s) = d−D(s).

(7.8)

7.5 The Splitting oﬀ Operation 359

To emphasize that s is a special vertex we specify D as D = (V + s, A) or D = (V + s, E ∪ F ) where F is the set of arcs with one end-vertex in s (s ∈ V and E ∩ F = ∅). Furthermore we will assume that the local arc-strong connectivity between every pair x, y of vertices in V is at least k. By Menger’s theorem this is equivalent to

d+(U ), d−(U ) ≥ k for all ∅ = U ⊂ V.

(7.9)

Whenever a digraph D = (V + s, A) satisﬁes (7.9) for some k we say that
D is k-arc-strong in V .
We consider the operation of replacing a pair (us, sv) of arcs incident with
s by one new arc uv. The operation of performing this replacement is called
splitting oﬀ or just splitting the pair (us, sv) and the resulting directed
multigraph is denoted by Duv. The splitting of a pair (us, sv) is admissible if (7.9) holds in Duv. If this is the case we will also say that the pair (us, sv) is an admissible pair (or an admissible splitting).
A set ∅ = X ⊂ V is k-in-critical (k-out-critical) if d−(X) = k (d+(X) = k). When we do not want to specify whether X is k-in-critical
or k-out-critical, we say that X is k-critical.
The following useful lemma is due to Frank:

Lemma 7.5.1 [258] If X and Y are intersecting k-critical sets then one of the following holds:
(a) X ∪ Y is k-critical, (b) Y − X is k-critical and d(X ∩ Y, V + s − (X ∪ Y )) = 0.

Proof: We consider three cases: Case 1: X ∪ Y = V and X, Y are either both k-out-critical or both k-in-critical.
Assume that X, Y are both k-out-critical. It follows from (7.9) that d+(X ∪ Y ), d+(X ∩ Y ) ≥ k. Using the submodularity of d+D, we obtain:

k + k = d+(X) + d+(Y ) ≥ d+(X ∪ Y ) + d+(X ∩ Y )
≥ k + k,

(7.10)

and from this we get that X ∪ Y is k-critical and hence (a) holds. The same conclusion is reached if X, Y are both k-in-critical. Case 2: X ∪ Y = V and X, Y are either both k-out-critical or both k-in-critical.
We will assume that X, Y are both k-out-critical, the proof is analogous in the other case. Let S = V +s−X and T = V +s−Y . Then d−(S) = d−(T ) = k and S ∩ T = {s}. Since S − T = Y − X and T − S = X − Y we get from (7.9)

360 7. Global Connectivity
that d−(S − T ), d−(T − S) ≥ k. Since d−(s) = d+(s), we can apply (7.3) and obtain:

k + k = d−(S) + d−(T )

= d−(S − T ) + d−(T − S) + d(S ∩ T, V + s − (S ∪ T ))

≥ k + k + d(V − S, T ),

(7.11)

from which we see that Y −X = S −T is k-in-critical and that d(S ∩T, V +s−
(S ∪T )) = 0. Since X ∩Y = V +s−(S ∪T ) and V +s−(X ∪Y ) = {s} = S ∩T
we also see that d(X ∩ Y, V + s − (X ∪ Y )) = 0. Thus (b) holds.
Case 3: One of X, Y is k-in-critical and the other is k-out-critical.
We consider the case when X is k-in-critical and Y is k-out-critical, the other case is analogous. Let Z = V +s−X. Then we have d+(Y ) = d+(Z) = k, Y ∩Z = Y −X and Y ∪Z = V +s−(X−Y ). Hence d+(Y ∩Z) = d+(Y −X) ≥ k and d+(Y ∪ Z) = d−(V + s − (Y ∪ Z)) = d−(X − Y ) ≥ k. Now we can apply
(7.2) and we get

k + k = d+(Y ) + d+(Z) = d+(Y ∩ Z) + d+(Y ∪ Z) + d(Y, Z)
≥ k + k + d(Y, Z),

(7.12)

implying that d+(Y − X) = d+(Y ∩ Z) = k and that d(Y, Z) = 0. Since Z − Y = V + s − (X ∪ Y ) and Y − Z = X ∩ Y , the last equality shows that d(X ∩ Y, V + s − (X ∪ Y )) = 0. Thus (b) holds.
We are now ready to prove the following important result by Mader.

Theorem 7.5.2 (Mader’s directed splitting theorem) [537] Suppose that D = (V + s, E ∪ F ) satisﬁes (7.9) and that d+(s) = d−(s). Then for
every arc sv there is an arc us such that the pair (us, sv) is an admissible
splitting.

Proof: The proof we give is due to Frank [258]. First note that a pair (us, sv) can be split oﬀ preserving (7.9) if and only if there is no k-critical set which contains both u and v. Hence if there is no k-critical set containing v, then we are done. If X and Y are intersecting k-critical sets containing v, then only alternative (i) can hold in Lemma 7.5.1, because the existence of the arc sv implies that d(V + s − (X ∪ Y ), X ∩ Y ) ≥ 1. Hence the union T of all k-critical sets containing v is also k-critical. If we can ﬁnd an in-neighbour u of s in V − T , then we are done, since by the choice of T , there is no k-critical set which contains u and v. So suppose that all in-neighbours of s are in T . If T is k-out-critical then

7.5 The Splitting oﬀ Operation 361
d−(V − T ) = d+(T ) − d+(T, s) + d+(s, V − T ) ≤ k − (d−(s) − d+(s) + 1) = k − 1,
since s has no in-neighbour in V − T and sv is an arc from s to T (we also used d−(s) = d+(s)). This contradicts (7.9) so we cannot have that T is k-out-critical. But if T is k-in-critical, then
d+(V − T ) = d−(T + s) = d−(T ) − d+(s, T ) + d+(V − T, s) ≤ k − 1 + 0 < k,
a contradiction again. Hence we have shown that (us, sv) is an admissible pair and the proof is complete.
s Figure 7.5 A digraph D = (V + s, A) which is 2-arc-strong in V and has no admissible splitting at s. Note that d−(s) = 2 = 1 = d+(s).
Note that the assumption that d−(s) = d+(s) in Theorem 7.5.2 cannot be removed. Figure 7.5 shows an example of a digraph D = (V + s, A) with no admissible splitting at s. Corollary 7.5.3 Suppose that D = (V + s, E + F ) satisﬁes (7.9) and that d+(s) = d−(s). Then there exists a pairing ((u1s, sv1), . . . , (urs, svr)), r = d−(s), of the arcs entering s with the arcs leaving s such that replacing all arcs incident with s by the arcs u1v1, . . . , urvr and then deleting s, we obtain a k-arc-strong directed multigraph D .
See Figure 7.6 for an example of a complete splitting in a digraph. Frank and Jackson showed that for eulerian directed multigraphs one can get a stronger result. Namely, it is possible to split oﬀ all arcs incident with the special vertex s in such a way that all local arc-strong connectivities within V are preserved.

362 7. Global Connectivity s

b
ac X

e df

b ac

e d

f

Figure 7.6 A digraph D = (V + s, A) which is 2-arc-strong in V . A complete splitting of the arcs is shown in the right ﬁgure after removal of s. The set X shows that we cannot split oﬀ both of the pairs (as, sb), (cs, sa), since that would leave X with out-degree one.

Theorem 7.5.4 [257, 451] Let D = (V + s, A) be an eulerian directed multigraph. Then for every arc us ∈ A there exists an arc sv ∈ A such that λDuv (x, y) = λD(x, y) for all x, y ∈ V .
A similar result concerning local connectivity preserving splittings holds for general undirected graphs. This very powerful result was proved by Mader [536]. Such a similarity between eulerian digraphs and general undirected graphs with respect to certain properties seems to be quite common. To say it popularly: Eulerian digraphs often behave like undirected graphs. For another example of this phenomenon see Section 9.7.2.
Bang-Jensen, Frank and Jackson showed that it is possible to give a common generalization of Theorem 7.5.4 and Mader’s directed splitting theorem (Theorem 7.5.2) to mixed graphs. Since the statement of this result is rather technical, we refer the interested reader to the paper [53].
It was pointed out by Enni in [218] that Theorem 7.5.4 cannot be extended to arbitrary digraphs, not even if one only wants to preserve the minimum of λ(x, y) and λ(y, x). For two other generalizations of Theorem 7.5.2 see the papers [684] by Su and [288] by Gabow and Jord´an.

7.6 Increasing the Arc-Strong Connectivity Optimally
We will consider the following problem. Given a directed multigraph D = (V, E) which is not k-arc-strong, ﬁnd a minimum cardinality set of new arcs F to add to D such that the resulting directed multigraph D = (V, E ∪ F ) is k-arc-strong. This D is called an optimal augmentation of D. We will present a solution to this problem due to Frank [258]. Frank solved the problem by supplying a min-max formula for the minimum number of new arcs as well as a polynomial algorithm to ﬁnd such a minimum set of new

7.6 Increasing the Arc-Strong Connectivity Optimally 363

arcs. First let us make the simple observation that such a set F indeed exists, since we may just add k parallel arcs in both directions between a ﬁxed vertex v ∈ V and all other vertices in V (it is easy to see that the resulting directed multigraph will be k-arc-strong).

Deﬁnition 7.6.1 Let D = (V, A) be a directed multigraph. Then γk(D) is the smallest integer γ such that

(k − d−(Xi)) ≤ γ and
Xi ∈F
(k − d+(Xi)) ≤ γ,
Xi ∈F
for every subpartition F = {X1, . . . , Xt} of V with ∅ ⊂ Xi ⊂ V , i = 1, . . . , t.
We call γk(D) the subpartition lower bound for arc-strong connectivity. By Menger’s theorem, D is k-arc-strong if and only if γk(D) ≤ 0. Indeed, if D is k-arc-strong, then d+(X), d−(X) ≥ k holds for all proper subsets of V and hence we see that γk(D) ≤ 0. Conversely, if D is not k-arcstrong, then let X be a set with d−(X) < k. Take F = {X}, then we see that γk(D) ≥ k − d−(X) > 0.
Lemma 7.6.2 [258] Let D = (V, A) be a directed multigraph and let k be a positive integer such that γk(D) > 0. Then D can be extended to a new directed multigraph D = (V + s, A ∪ F ), where F consists of γk(D) arcs whose head is s and γk(D) arcs of whose tail is s such that (7.9) holds in D .
Proof: We will show that, starting from D, it is possible to add γk(D) arcs from V to s so that the resulting graph satisﬁes

d+(X) ≥ k for all ∅ = X ⊂ V.

(7.13)

Then it will follow analogously (by considering the converse of D) that it is
also possible to add γk(D) new arcs from s to V so that the resulting graph satisﬁes

d−(X) ≥ k for all ∅ = X ⊂ V.

(7.14)

First add k parallel arcs from v to s for every v ∈ V . This will certainly make the resulting directed multigraph satisfy (7.13). Now delete as many new arcs as possible until removing any further arc would result in a digraph where (7.13) no longer holds (that is, every remaining new arc vs leaves a k-out-critical set). Let D˜ denote the current directed multigraph after this deletion phase and let S be the set of vertices v which have an arc to s in D˜ . Let F = {X1, . . . , Xr} be a family of k-out-critical sets such that every v ∈ S is contained in some member Xi of F and assume that F has as few members as possible with respect to this property. Clearly this choice implies that either F is a subpartition of V , or there is a pair of intersecting sets Xi, Xj in F .

364 7. Global Connectivity

Case 1: F is a subpartition of V . Then we have

r

kr =

d+D˜ (Xi)

i=1

r

= (d+D(Xi) + d+D˜ (Xi, s))
i=1

r

= d+D(Xi) + d−D˜ (s),
i=1

implying that d−D˜ (s) = γ k (D).

ri=1(k − d+D(Xi)) ≤ γk(D), by the deﬁnition of

Case 2: Some pair Xi, Xj ∈ F is intersecting.

If Xi, Xj that Xi ∪ Xj

are crossing, then the submodularity of is also k-out-critical and hence we could

dre+D˜plaacned

(7.9) imply the two sets

Xi, Xj by the set Xi ∪ Xj in F , contradicting the choice of F . Hence we

must have Xi ∪ Xj = V and F = {X1, X2}, where without loss of generality

i = 1, j = 2. Let X = V − X1 = X2 − X1 and Y = V − X2 = X1 − X2. Then

d−D(X) = d+D(X1) and d−D(Y ) = d+D(X2) and hence we get

γk(D) ≥ (k − d−D(X)) + (k − d−D(Y )) = k − d+D(X1) + k − d+D(X2) ≥ k − d+D˜ (X1) + k − d+D˜ (X2) + d−D˜ (s)
= d−D˜ (s),

since X1, X2 are k-out-critical in D˜ . Thus d−D˜ (s) ≤ γk(D) as claimed.

Theorem 7.6.3 (Frank’s arc-strong connectivity augmentation theorem) [258] Let D = (V, A) be a directed multigraph and k a positive integer such that γk(D) > 0. The minimum number of new arcs that must be added to D in order to give a k-arc-strong directed multigraph D = (V, A ∪ F ) equals γk(D).

Proof: To see that we must use at least γk(D) arcs, it suﬃces to observe that if X and Y are disjoint sets then no new arc can increase the out-degree
(in-degree) of both sets. Hence a subpartition F realizing the value of γk in Deﬁnition 7.6.1 is a certiﬁcate that we must use at least γk(D) new arcs.
To prove the other direction we use Mader’s splitting theorem and Lemma
7.6.2. According to this lemma we can extend D to a new directed multigraph D˜ by adding a new vertex s and γk(D) arcs from V to s and from s to V . Note that we may not need γk(D) arcs in both directions, but we will need it in one of the directions by our remark in the beginning of the proof. In

7.6 Increasing the Arc-Strong Connectivity Optimally 365
the case where fewer arcs are needed, say from V to s, we add arbitrary arcs from V to s so that the resulting number becomes γk(D).
Now it follows from Corollary 7.5.3 that all arcs incident with s can be split oﬀ without violating (7.9). This means that, if we remove s, then the resulting directed multigraph D is k-arc-strong.
See Figure 7.7 for an example illustrating the theorem.

b ac

e df

b ac

e d

f

DD
Figure 7.7 A digraph D with γ2(D) = 5. The big circles indicate a subpartition which realizes γ2(D). The right part of the ﬁgure shows an optimal 2-arc-strong augmentation D of D obtained by adding 5 new arcs. Compare this with Figure 7.6. Here the digraph in the right part is the same as the augmented digraph D .
The reader may have noticed that in the proof of Lemma 7.6.2, we never used exactly how we obtained the minimal set of arcs from V to s so that (7.13) held. The proof is valid for every such set of arcs that is minimal with respect to deletion of arcs. This means in particular that we can use a greedy approach to ﬁnd such a set of arcs starting from the conﬁguration with k parallel arcs from every vertex v ∈ V to s. This gives rise to the following algorithm, by Frank [258], for augmenting the arc-strong connectivity optimally to k for any directed multigraph D which is not already k-arc-strong:
Frank’s arc-strong connectivity augmentation algorithm Input: A directed multigraph D = (V, A) and a natural number k such that γk(D) > 0. Output: A k-arc-strong optimal augmentation D∗ of D.
1. Let v1, v2 . . . , vn be a ﬁxed ordering of V and let s be a new vertex. 2. Add k parallel arcs from vi to s and from s to vi for each i = 1, 2, . . . , n. 3. Starting from i := 1, remove as many arcs from vi to s as possible without
violating (7.13); If i < n then let i := i + 1 and repeat this step; Let γ− denote the number of remaining arcs from V to s in the resulting directed multigraph. 4. Starting from i := 1, remove as many arcs from s to vi as possible without violating (7.14); If i < n then i := i + 1 and repeat this step;

366 7. Global Connectivity

Let γ+ denote the number of remaining arcs from s to V in the resulting

directed multigraph.

5. Let γ = max{γ−, γ+}. If γ− < γ+, then add γ+ − γ− arcs from v1 to s;

If γ+ < γ−, then add γ− − γ+ arcs from s to v1.

6.

Let D d+D (s)

denote the current directed multigraph. and (7.9) holds. Split oﬀ all arcs incident

In D with s

we have in D by

d−D (s) = applying

Theorem 7.5.2 γ times. Let D∗ denote the resulting directed multigraph.

7. Return D∗.

Using ﬂows this algorithm can be implemented as a polynomial algorithm for augmenting the arc-strong connectivity of a given directed multigraph [258]. See Exercises 7.28 and 7.30.
Frank [258] pointed out that his algorithm also works for the so-called vertex-weighted arc-strong connectivity augmentation problem. Here there are weights c(v) on the vertices and the cost of adding an arc from u to v is equal to c(u) + c(v). The only change needed in the algorithm above is that now the ordering of the vertices should be so that c(v1) ≤ c(v2) ≤ . . . ≤ c(vn). The reason why this greedy approach works is outlined in [258] and comes from the fact that a certain polymatroidal structure is present [258, 274].
If instead we allow weights on the arcs and ask for a minimum weight (rather than just minimum cardinality) set of new arcs to add to D in order to obtain a k-arc-strong directed multigraph D , then we have the weighted arc-strong connectivity augmentation problem.

Theorem 7.6.4 The weighted arc-strong connectivity augmentation problem is N P-hard.

Proof: We show that the Hamilton cycle problem can be reduced to the weighted arc-strong connectivity augmentation problem in polynomial time. This will imply the claim by Theorem 5.0.1.
Let D = (V, A) be a digraph on n vertices V = {1, 2, . . . , n}. Deﬁne
↔
weights c(ij) on the arcs of the complete digraph Kn with vertex set V as follows:

c(ij) =

1 if ij ∈ A 2 if ij ∈ A.

(7.15)

Let D0 = (V, ∅) (that is, the digraph on V with no arcs). Since every vertex of a strong digraph is the tail of at least one arc, we need at least n arcs to
make D0 strong. Now it is easy to see that D0 can be made strongly connected using arcs with total weight at most n if and only if D has a Hamilton cycle.
Thus we have reduced the Hamilton cycle problem to the weighted arc-strong
connectivity augmentation problem. Clearly our reduction can be carried out
in polynomial time.

7.7 Increasing the Vertex-Strong Connectivity Optimally 367
We complete this section with an interesting result by Cheng and Jord´an. It implies that the so-called successive augmentation property holds for arc-strong connectivity.
Theorem 7.6.5 [148] Let D be a directed multigraph with λ(D) = . Then there exists an inﬁnite sequence D = D0, D1, D2, . . . of directed multigraphs such that, for every i ≥ 0, Di+1 is a superdigraph of Di, V (Di) = V (D) and Di is an optimal ( + i)-arc-strong augmentation of D.
It is shown by an example in [148] that a similar property does not hold for the vertex-strong connectivity augmentation problem which we consider below.

7.7 Increasing the Vertex-Strong Connectivity Optimally

We now turn to the vertex-strong connectivity augmentation problem: given a digraph D = (V, A) on at least k + 1 vertices, ﬁnd a smallest set F of new arcs for which D = (V, A ∪ F ) is k-strong.
Note that when it comes to studying vertex-strong connectivity, multiple arcs play no role and hence we shall always consider digraphs (knowing that our results extend to directed multigraphs). In particular, in this section d+D(v) = |ND+(v)| for any vertex v in a digraph D.
Let us ﬁrst observe that, even if we do not allow multiple arcs, we cannot bound the number of arcs we need to add to make a digraph D k-strong by some function of γk(D) (recall Deﬁnition 7.6.1). To see this, it suﬃces to note that there are k-arc-strong digraphs which are not k-strong and one can construct such digraphs where the number of new arcs one needs to add in order to obtain a k-strong superdigraph is arbitrarily high (see Exercise 7.31).

Suppose X is a set of vertices in a digraph D such that N +[X] = V

and |N +(X)| < k (recall that N +[X] = X ∪ N +(X)). Then it follows from

Menger’s theorem that D is not k-strong because the set N +(X) separates

every vertex in X from every vertex in V − N +[X]. Furthermore, in order

to obtain a k-strong digraph by adding arcs to D we must add at least

k − |N +(X)| new arcs with tail in X and head in V − N +[X].

Similarly

to

the

deﬁnition

of

γ

k

(D)

in

Deﬁnition

7.6.1

we

can

deﬁne

γ

∗ k

(D)

as follows:

Deﬁnition 7.7.1 Let D = (V, A) be a directed graph. Then γ∗k(D) is the smallest integer γ such that

368 7. Global Connectivity

(k − |N −(X)|) ≤ γ and
X∈F −
(k − |N +(X)|) ≤ γ,
X∈F +

for every choice of subpartitions F −, F+ of V with the property that every X ∈ F − satisﬁes N −[X] = V and every X ∈ F + satisﬁes N +[X] = V .

As with arc-strong connectivity it is not hard to see that γ∗k(D) is a lower bound for the number of new arcs we must add to D to obtain a k-strong

digraph. This follows from the fact that the sets in F − are disjoint and hence

no new arc can increase the in-neighbourhoods (out-neighbourhoods) of two

sets

from

F−

(F +).

We

call

the

number

γ

∗ k

(D)

the

subpartition

lower

bound for vertex-strong connectivity.

Let ak(D) denote the minimum number of new arcs that must be added to a digraph D = (V, A) in order to obtain a k-strong digraph. It is easy to

see that ak(D) is well-deﬁned provided that D has at least k + 1 vertices. We also call ak(D) the k-strong augmentation number of D.

7.7.1 One-Way Pairs

First we point out that for vertex-strong connectivity augmentation, the subpartition lower bound is no longer suﬃcient, that is, it may not be possible to make D k-strong by adding γ∗k(D) arcs. An example illustrating this is given in Figure 7.8(a). Here k = 2 and it is not diﬃcult to check that γ∗k(D) = 2. However, it is not possible to make D 2-strong by adding just two new arcs. In order to explain this, we need a few new deﬁnitions. Let X, Y be disjoint non-empty proper subsets of V . The ordered pair (X, Y ) is a one-way pair in D = (V, A) if D has no arc with tail in X and head in Y (that is, Y ⇒X). This deﬁnition is due to Frank and Jord´an [272]. For such a pair (X, Y ) we refer to X (Y ) as the tail (head) of the pair. Let h(X, Y ) = |V −X −Y |. The deﬁciency of a one-way pair (X, Y ) with respect to k-strong connectivity is

ηk(X, Y ) = max{0, k − h(X, Y )}.

(7.16)

For instance, if N +[X] = V then the pair (X, V − N +[X]) is a one-way pair with deﬁciency ηk(X, V − N +[X]) = max{0, k − |N +(X)|}. One-way pairs are closely related to k-strong connectivity.
Lemma 7.7.2 [272] A digraph D = (V, A) is k-strong if and only if we have h(X, Y ) ≥ k for every one-way pair (X, Y ) in D.
Proof: Suppose ﬁrst that D is k-strong. By Corollary 7.3.2, there are k internally disjoint (s, t)-paths for every choice of distinct vertices s, t ∈ V . Now let (X, Y ) be a one-way pair and take s ∈ X, t ∈ Y . For every collection

7.7 Increasing the Vertex-Strong Connectivity Optimally 369

ef

ab

cd

H3 T2

H1 T3
T1 H2

(a) (b)

Figure 7.8 An example, due to Jord´an [468, Figure 3.9.1], showing that the subpar-

tition lower bound is not always attainable. The desired connectivity is k = 2 and

the

value

γ

∗ 2

(D)

is

2

and

it

is

realized

by

the

subpartitions

{{d}, {e}}, {{a}, {f }},

respectively (see (a)). Part (b) shows three pairwise independent one-way pairs

(T1, H1), (T2, H2), (T3, H3) (tails are indicated by boxes). This shows that a2(D) ≥

3. In fact a2(D) = 3, since adding the arcs af, ed, da will result in a 2-strong digraph.

of the k internally disjoint paths from s to t, each such path must use a vertex in V − X − Y and hence h(X, Y ) ≥ k. Conversely, assume that h(X, Y ) ≥ k for every one-way pair (X, Y ). Let S be a minimal separator of D. By the deﬁnition of a separator, V − S can be divided into two sets X, Y so that there is no arc from X to Y in D − S (namely let s, t be separated by S and let X denote those vertices that can be reached from s in D − S and Y = V − X − S). Thus (X, Y ) is a one-way pair and h(X, Y ) = |S| showing that |S| ≥ k and hence D is k-strong.
Two one-way pairs (X, Y ), (X , Y ) are independent if either their heads or their tails are disjoint. Hence one-way pairs that contribute to the sums in Deﬁnition 7.7.1 are always independent since either all heads or all tails are disjoint for those pairs. As we saw in Figure 7.8, the sum of deﬁciencies over one way pairs for which either all tails are disjoint or all heads are disjoint does not always provide the right lower bound for the number of new arcs needed in order to make the digraph k-strong.
By Lemma 7.7.2, in order to obtain a k-strong superdigraph of D, we must add enough new arcs to eliminate all one-way pairs with ηk(X, Y ) > 0 (we must add at least ηk(X, Y ) arcs from X to Y ). Clearly, if (X, Y ), (X , Y ) are independent one-way pairs, then no new edge can decrease both ηk(X, Y ) and ηk(X , Y ). This shows that, if F is any family of pairwise independent one-way pairs in D, then we must add at least

ηk(F ) =

ηk(X, Y )

(X,Y )∈F

(7.17)

new arcs to D in order to obtain a k-strong digraph. We call the number ηk(F ) the deﬁciency of F. Now consider Figure 7.8(b). Here we have indicated one-
way pairs (Ti, Hi), i = 1, 2, 3. These are pairwise independent and have total

370 7. Global Connectivity
deﬁciency 3. Thus it follows from our arguments above that we need at least 3 new arcs to make D k-strong. In fact 3 arcs are suﬃcient in this case as pointed out in the caption of the ﬁgure.
7.7.2 Optimal k-Strong Augmentation
The following theorem, due to Frank and Jord´an, shows that the maximum deﬁciency over families of independent one-way pairs gives the right lower bound for the vertex-strong connectivity augmentation problem.
Theorem 7.7.3 (The Frank-Jord´an vertex-strong connectivity augmentation theorem) [272] For every digraph D on at least k + 1 vertices we have
ak(D) = max {ηk(F ) : F is a family of independent one-way pairs in D}. (7.18)
In Section 7.8 we will show how to derive Theorem 7.7.3 from a more general result concerning a generalization of arc-connectivity augmentation.
Theorem 7.7.4 [272] There exists a polynomial algorithm which, given a digraph D = (V, A) and a natural number k, ﬁnds a minimum cardinality set F of new arcs to add to D so that the resulting graph is k-strong.
This algorithm relies on Theorem 7.7.3 and the ellipsoid method3and hence it is not a combinatorial algorithm. In [273] a combinatorial polynomial algorithm was found for ﬁxed k. It is beyond the scope of this book to describe any of these algorithms here. The combinatorial algorithm in [273] relies on a detailed study of the structure of one-way pairs. We refer to the proof of Lemma 7.10.6 for an example of a proof that uses the structure of one-way pairs.
Although we may have ak(D) > γ∗k(D) as we saw in Figure 7.8, Frank and Jord´an proved (see below) that the diﬀerence cannot be arbitrary large. A family F of independent one-way pairs is subpartition-type if either all the tails in F are pairwise disjoint, or all the heads in F are pairwise disjoint. It is easy to see that if F is subpartition-type, then ηk(F ) ≤ γ∗k(D).
Proposition 7.7.5 [273] For any digraph D = (V, A) and any target connectivity k there exists a family F of independent one-way pairs such that the deﬁciency, ηk(F ), of F equals ak(D) and F is either subpartition-type or the disjoint union of two families of subpartition-type. Thus ak(D) ≤ 2γ∗k(D).
The next result shows that if we need to add many arcs to D (in terms of k) to make it k-strong, then the subpartition lower bound is attainable.
3 For a thorough treatment of the ellipsoid method and its consequences for Combinatorial Optimization, see the book [339] by Gr¨otschel, Lova´sz and Schrijver.

7.7 Increasing the Vertex-Strong Connectivity Optimally 371
Proposition 7.7.6 [273] If F is a family of independent one-way pairs and ηk(F ) ≥ 2k2 − 1, then F is subpartition-type. Hence if ak(D) ≥ 2k2 − 1, then γ∗k(D) = ak(D).
Now let us consider the special case of the vertex-strong connectivity augmentation problem when we want to increase κ(D) from k to k + 1. The following result is due to Frank and Jord´an:
Theorem 7.7.7 [273] If κ(D) = k and ak+1(D) ≥ 2k + 2, then ak+1(D) = γ∗k+1(D).
Frank and Jord´an also showed that when we augment the connectivity by just one, then we can restrict the structure of the set of new arcs.
Theorem 7.7.8 [272] If κ(D) = k, then D can be optimally augmented to a (k + 1)-strong digraph by adding disjoint cycles and paths. In particular if D is a k-strong and k-regular digraph, then there are disjoint cycles covering V whose addition to D gives a (k + 1)-strong and (k + 1)-regular digraph.
It is instructive to compare this result with Theorem 7.10.7. Recently, Frank has shown that the problem of augmenting the connectivity by one can be solved in polynomial time without using the ellipsoid method.
Theorem 7.7.9 [266] There exists a combinatorial polynomial algorithm for increasing the vertex-strong connectivity of a digraph by one.
7.7.3 Special Classes of Digraphs
For general digraphs one cannot say much about the structure of families of independent one-way pairs, but as we are going to see, there are (nontrivial) classes of digraphs for which nice structure can be found and hence a good estimate on the value of ak(D) can be given. The ﬁrst result, due to Masuzawa, Hagihara and Tokura, deals with in-branchings.
Theorem 7.7.10 [555] Let B = (V, A) be an in-branching. Then ak(B) is given by
ak(B) = max{0, k − d−(v)}.
v∈V
The proof of this result in [555] is long, but Frank and Jord´an found a short proof based on Theorem 7.7.3, see [273].
For an arbitrary digraph we deﬁne ηk−, ηk+ by

372 7. Global Connectivity

η

− k

(D)

=

max{0, k − d−(v)},

v∈V

η+k (D) = max{0, k − d+(v)}.
v∈V

(7.19) (7.20)

Frank made the following conjecture, which would imply that we have ak(D) = γk(D) for every acyclic digraph D:
Conjecture 7.7.11 [261] For any acyclic digraph D on at least k+1 vertices ak(D) = max{ηk−(D), ηk+(D)}.
A partial result was obtained by Frank and Jord´an in [273].

Lemma 7.7.12 [273] Let D = (V, A) be an acyclic digraph for which ak(D) = γ∗k(D). Then ak(D) = max{ηk−(D), ηk+(D)}.

Proof:

Since

ak (D)

=

γ

∗ k

(D)

there

exists

some

family

F

of

independent

one-way pairs with ηk(F ) = ak(D) such that all tails, or all heads, in F

are pairwise disjoint. By considering the converse of D if necessary, we may

assume that the tails {T1, . . . , Tt} of F are pairwise disjoint. Because D is acyclic, the subgraph induced by Ti is acyclic for each i =
1, 2, . . . , t. Hence each Ti contains a vertex xi of out-degree zero in D Ti . Thus N +(xi) ⊆ N +(Ti) and hence k − d+(xi) ≥ k − |N +(Ti)| ≥ k − h(Ti, Hi) for each i = 1, 2, . . . , t. Now we obtain

ak(D) ≥ ηk+(D)
t
≥ (k − d+(xi))
i=1 t
≥ (k − h(Ti, Hi))
i=1
≥ ak(D),

showing that ak(D) = ηk+(D).
Bang-Jensen made the following conjecture at a meeting in Budapest in 1994:

Conjecture 7.7.13 For every semicomplete digraph D on at least k + 1

vertices

ak (D)

≤

k(k + 2

1) .

If true this would be the best possible since a transitive tournament T on n ≥ k + 1 vertices needs this many arcs. To see this it suﬃces to observe that, if v1, v2, . . . , vn is the unique acyclic ordering of the vertices in T , then the ﬁrst k vertices need k, k − 1, . . . , 2, 1 new arcs entering them in order to satisfy the condition that the in-degree is at least k. It is not diﬃcult to check

7.7 Increasing the Vertex-Strong Connectivity Optimally 373

(Exercise 7.20) that one can always make a transitive tournament k-strong

by

adding

k(k+1) 2

new

arcs.

The

following

partial

result

follows

from

the

work

of Frank and Jord´an [273]:

Proposition 7.7.14 For every semicomplete digraph D on at least k + 1 vertices we have ak(D) ≤ k2.
Proof: We prove this by showing that if D is an r-strong semicomplete digraph which has at least r + 2 vertices, then we need at most 2r + 1 new arcs to make it (r + 1)-strong. This will imply that we need at most k2 arcs to make any semicomplete digraph k-strong.
Suppose ﬁrst that D is not strongly connected. Since every semicomplete digraph has a Hamilton path (by Theorem 1.4.5), it follows that we can make D strong by adding one arc.
Suppose now that r ≥ 1 and that there is some r-strong semicomplete digraph D for which we need at least 2r + 2 arcs to obtain an (r + 1)-strong semicomplete digraph from D. Thus ar+1(D) ≥ 2r + 2 and then we conclude from Theorem 7.7.7 that ar+1(D) = γ∗r+1(D). Hence, by the deﬁnition of γ∗r+1(D), there exist 2r + 2 pairwise disjoint sets X1, X2, . . . , X2r+2, such that either each of these has |N +(Xi)| = r or each has |N −(Xi)| = r. By considering the converse of D if necessary, we may assume that |N +(Xi)| = r for each Xi. Let X be obtained by taking one vertex xi from each Xi and let D = D X . Since D is semicomplete and has 2r + 2 vertices, it is easy to see that some xi has at least r + 1 out-neighbours in D . However each of these contributes to |ND+(Xi)|, contradiction.

7.7.4 Splittings Preserving k-Strong Connectivity
In Section 7.5 we saw that, with respect to arc-strong connectivity, it is always possible to split oﬀ all arcs incident to a vertex v without decreasing the arc-strong connectivity of the resulting directed multigraph provided that d+(v) = d−(v). To see that this does not extend to vertex-strong connectivity, consider the digraph D in Figure 7.8. If we add a new vertex s and arcs ds, es, sa, sf , then we obtain a 2-strong digraph D . However, it follows from the fact that a2(D) = 3 (as we argued previously, see Figure 7.8) that there cannot exist a complete splitting oﬀ at s in D such that the resulting digraph (after removing s) is 2-strong.
Below we prove a splitting result for vertex-strong connectivity, due to Frank and Jord´an. We do this to illustrate some of the proof techniques that can be used in this area. The reader will notice that they are diﬀerent from the arc-strong connectivity proofs, although they do have common ingredients.
An arc a in a k-strong digraph D is k-critical if it cannot be deleted without destroying the property of D being k-strong. Note that if an arc is k-critical then it enters a set X with |ND−(X)| = k and |ND−−a(X)| = k − 1 and leaves a set Y with |ND+(Y )| = k and |ND+−a(Y )| = k − 1.

374 7. Global Connectivity
A subset U ⊂ V in a k-strong digraph D = (V, A) is out-tight (in-tight) if |V − U | ≥ k + 1 and |ND+(U )| = k (|ND−(U )| = k).
Lemma 7.7.15 [84] Let D = (V, A) be a k-strong digraph and let e = xy be a k-critical arc in D. Then there exists a unique minimal out-tight set K in D − e and a unique minimal in-tight set B in D − e. There is no arc from K to B in D − e, and in addition, (D − e) + f is k-strong for any arc f = uv with u ∈ K and v ∈ B.
Proof: Since e is k-critical, κ(D − e) = k − 1. Suppose that there exist two diﬀerent minimal out-tight sets K1 and K2 in D − e. Let H1 = V − K1 − ND+−e(K1) and H2 = V − K2 − ND+−e(K2). Then (K1, H1) and (K2, H2) are one-way pairs in D − e with hD−e(Ki, Hi) = k − 1, i = 1, 2. Since we can make D − e k-strong by adding the arc e, these one-way pairs cannot be independent. This implies that x ∈ K1 ∩ K2 and y ∈ H1 ∩ H2. Thus in D − e we have ND−−e(y) ⊆ V − K1 ∪ K2. Hence, by Menger’s theorem, |V − (K1 ∪ K2)| ≥ k and |N +(K1 ∩ K2)|, |N +(K1 ∪ K2)| ≥ k − 1, since D − e is (k − 1)-strong. Thus, using Proposition 7.1.3 and the fact that D − e is (k − 1)-strong,
k − 1 + k − 1 = |ND+−e(K1)| + |ND+−e(K2)| ≥ |ND+−e(K1 ∩ K2)| + |ND+−e(K1 ∪ K2)| ≥ k − 1 + k − 1.
This gives |N +(K1 ∩ K2)| = k − 1, contradicting the minimality of K1. The uniqueness of B follows similarly.
To see the second statement, observe that for any out-tight set L and the unique minimal out-tight set K we have K ⊆ L and B ⊆ (V − L − N +(L)). (In particular, K ∩ B = ∅.) Hence, adding any arc from K to B will eliminate all one-way pairs (X, Y ) with h(X, Y ) = k − 1.
The following splitting result for vertex-strong connectivity is due to Frank and Jord´an:
Theorem 7.7.16 [271] Let D = (V + s, A ∪ F ) be a k-strong digraph for which |N +(s)| = |N −(s)| = d ≥ 2k − 1 holds and every arc e incident with s is k-critical. Then the arcs incident to s can be split oﬀ completely such that the resulting digraph D obtained by deleting s is k-strong.
Proof: If k = 1, then d−D(s) = d+D(s), since D has no multiple arcs, and the claim follows from Theorem 7.5.2. Hence we may assume that k ≥ 2.
Let N −(s) = {u1, . . . , ud} and N +(s) = {v1, . . . , vd}. Since each arc incident with s is k-critical, it follows from Lemma 7.7.15 that there exist unique out-tight sets O1, O2, . . . Od and unique in-tight sets I1, I2, . . . , Id such that ui ∈ Oi and Oi is the unique minimal out-tight set in D − uis, respectively, vi ∈ Ii and Ii is the unique minimal in-tight set in D − svi, for i = 1, 2, . . . , d. We claim that Oi ∩ Oj = ∅ for 1 ≤ i < j ≤ d and Ii ∩ Ij = ∅ for 1 ≤ i < j ≤ d.

7.7 Increasing the Vertex-Strong Connectivity Optimally 375

Suppose this is not true. Then without loss of generality Oi ∩Oj = ∅ for some i = j. Note that urs is the only arc from Or to s in D for r = 1, 2, . . . , d, since Or has only k−1 out-neighbours in D−urs. Hence it follows that ui ∈ Oi−Oj and uj ∈ Oj − Oi and Oi ∩ Oj has no arc to s. Since |N −(s)| ≥ 2k − 1 > k (because k ≥ 2), we have |V − (Oi ∪ Oj)| ≥ k − 1. This and Menger’s theorem imply that |ND+−s(Oi ∩ Oj)|, |ND+−s(Oi ∪ Oj)| ≥ k − 1. However, applying Proposition 7.1.3 to Oi, Oj in D − s (which is (k − 1)-strong) we conclude

(k − 1) + (k − 1) = |ND+−s(Oi)| + |ND+−s(Oj)| ≥ |ND+−s(Oi ∩ Oj )| + |ND+−s(Oi ∪ Oj )| ≥ (k − 1) + (k − 1).

(7.21)

It follows from (7.21) that |ND+−s(Oi ∩ Oj)| = k − 1 and since Oi ∩ Oj has no arc to s we get the contradiction |ND+(Oi ∩ Oj)| = k − 1. Thus we have shown that O1, O2, . . . Od are disjoint and similarly I1, I2, . . . , Id are all disjoint.
This implies that γ∗k(D − s) ≥ d = 2k − 1 and hence, by Theorem 7.7.7 ak(D − s) = γ∗k(D − s). Since D is k-strong it follows that γ∗k(D − s) cannot be greater than d, since the d arcs to and from s eliminate all sets with fewer
than k neighbours. Thus ak(D −s) = d. It remains to prove that we can make D − s k-strong by adding a set of d arcs which form a pairing of {u1, . . . , ud} with {v1, . . . , vd}.
Let F be any optimal augmenting set consisting of d arcs so that adding these arcs to D − s results in a k-strong digraph D∗. Then F must contain
exactly one arc whose tail is in Oi and exactly one arc whose head is in Ii, i = 1, 2, . . . , d, since O1, O2, . . . Od are disjoint and I1, I2, . . . , Id are disjoint. This gives a pairing (O1, Iπ(1)), . . . , (Od, Iπ(d)), where π is a permutation of {1, 2, . . . , d}. Note that the set O˜i = V − (Oi ∪ ND+−s(Oi)) is in-tight in D − s. Let ei be the unique arc in F which has tail in Oi and head in Iπ(i). Then ei must have its head in O˜i (because after adding F , O˜i has an inneighbour in Oi). Then the minimality of Iπ(i) and Proposition 7.1.3 implies that Iπ(i) ⊆ O˜i.
Clearly the arc ei is k-critical in D∗, since it is the only arc from F which leaves Oi. Thus, by Lemma 7.7.15, there is a unique minimal out-tight set O containing the tail of ei and a unique minimal in-tight set I containing the head of ei in D∗ − ei. We claim that O = Oi and I = Iπ(i). Clearly Oi is out-tight in D∗ − ei, so O ⊆ Oi. If we do not have equality, then this would contradict the minimality of Oi in D − uis (here we used that s has precisely one in-neighbour in Oi). Now it follows from Lemma 7.7.15 that we can replace the arc ei by any arc from Oi to Iπ(i), in particular, the arc uivπ(i), and still have an optimal augmenting set F . This shows that we can replace the arcs in F one by one, until we get the optimal augmenting set F ∗ = {u1vπ(1), . . . , udvπ(D)} and the proof is complete.

376 7. Global Connectivity
For further results on splittings that preserve vertex-strong connectivity the reader is referred to the papers [271, 272] by Frank and Jord´an, the paper [467] by Jord´an and Jord´an’s PhD thesis [468].

7.8 A Generalization of Arc-Strong Connectivity

Below we show how to reduce the vertex-strong connectivity augmentation to a generalization of the arc-strong connectivity augmentation problem.
Let D = (V, A) be a directed multigraph with two speciﬁed (not necessarily disjoint) subsets S, T of vertices. We say that D is k-(S, T )-arc-strong if there are k arc-disjoint (s, t)-paths in D for every choice of s ∈ S, t ∈ T . Thus if S = T = V this corresponds to D being k-arc-strong.
Recall that in the proof of Menger’s theorem (Theorem 7.3.1) we reduced local vertex-strong connectivity to local arc-strong connectivity via the vertex-splitting technique (recall Figure 3.4). It follows from the proof of Theorem 7.3.1 that a digraph D = (V, A) is k-strong if and only if DST is k-(S, T )-arc-strong, where S = {vs : v ∈ V }, T = {vt : v ∈ V }. Two subsets X, Y are (S, T )-independent if X ∩ Y ∩ T = ∅, or S ⊆ X ∪ Y . A family F of subsets of V is (S, T )-independent if the sets in F are pairwise (S, T )-independent. A set X ⊂ V is essential if X ∩ T = ∅ and S − X = ∅.
Frank and Jord´an [272] characterized the size of a minimum cardinality set of new arcs to add to a digraph D = (V, A) with speciﬁed subsets S, T ⊆ V in order to make the resulting digraph k-(S, T )-arc-strong.

Theorem 7.8.1 [272] Let D = (V, A) be a digraph with a pair of non-empty

(not necessarily disjoint) subsets S, T ⊆ V . Then D can be made k-(S, T )-

arc-strong by adding at most γ arcs with tails in S and heads in T if and only

if

(k − d−(Z)) ≤ γ

(7.22)

Z∈H

holds for every (S, T )-independent family H of essential subsets of V .

To see that we really need to consider deﬁciencies of (S, T )-independent families (and not just a kind of subpartition lower bound), consider the digraph with four vertices {s1, s2, t1, t2} and no arcs. If we take k = 1, then it is easy to see that, if we can add arcs from S to T only, we need four arcs sitj, i, j = 1, 2 to obtain a 1-(S, T )-arc-strong digraph. The only (S, T )independent family with four members is {{si, tj} : i, j = 1, 2}.
So far no combinatorial polynomial algorithm is known for the (S, T )arc-strong connectivity augmentation problem for general k. For k = 1 Enni described such an algorithm in [219].
Theorem 7.8.1 is not only a generalization of the arc-strong connectivity augmentation result in Theorem 7.6.3 (and hence implies Theorem 7.6.3 as

7.8 A Generalization of Arc-Strong Connectivity 377

can be veriﬁed by solving Exercise 7.39). Theorem 7.8.1 also implies Theorem 7.7.3 as we shall see below.

Proof of Theorem 7.7.3 [273]:

Let D = (V, A) be a digraph with κ(D) < k which we want to make

k-strong. We ﬁrst construct the digraph D = (S ∪ T, A ) by the vertex

splitting procedure (splitting each v into vs, vt, see Figure 3.4). By the remark in the beginning of this section D is l-(S, T )-arc-strong if and only if D

is l-strong. Let γk,S,T (D ) denote the k-(S, T )-arc-strong connectivity augmentation number of D , that is, the minimum number of new arcs

with tails in S and heads in T , one has to add to DST in order to make it k-

(S, T )-arc-strong. Furthermore let ηk(D) (ηk,S,T (D )) denote the maximum deﬁciency, with respect to k, over all independent families of one-way pairs

in D (respectively, (S, T )-independent families of essential sets in D ).

From the construction of D and the proof of Theorem 7.3.1, it follows

easily that, if F is a new set of arcs all with tails in S and heads in T such

that adding F to D makes the resulting digraph k-(S, T )-arc-strong, then

the corresponding set of arcs added to D will result in a k-strong digraph.

Hence we have

ak(D) ≤ γk,S,T (D ).

(7.23)

Below we will demonstrate that ηk(D) ≥ ηk,S,T (D ). We show that there is some family F of (S, T )-independent essential sets with deﬁciency
ηk,S,T (F ) = ηk,S,T (D ) from which we can construct an independent family F of one-way pairs in D with ηk(F ) = ηk,S,T (F ). For this choose F = {Z1, . . . , Zr} with deﬁciency ηk,S,T (D ) to satisfy the following property:

r
|F | is minimal and with respect to this (|T − Zj| + |S ∩ Zj|) is maximal.
j=1
(7.24) Claim A: For every Zj ∈ F there is no arc from S − Zj to T ∩ Zj. Proof of Claim A: Suppose there is some j with 1 ≤ j ≤ r for which there is an arc st from S − Zj to T ∩ Zj. If |T ∩ Zj| ≥ 2, then replacing Zj by Zj − t we obtain a new (S, T )-independent family F of essential sets and since d+D (t) = 1 it follows that the deﬁciency of F is at least that of F . But now F contradicts the choice of F so as to satisfy (7.24). Hence T ∩ Zj = {t}. Since vt ∈ T dominates vs ∈ S for each v ∈ V , we have |S − Zj| ≥ 2, (as otherwise d−(Zj) ≥ |T | − 1 = |V | − 1 ≥ k and we could have deleted Zj from F without decreasing the deﬁciency, contradicting (7.24)). Now replace Zj by Zj ∪ {s} in F . The new family F ∗ still consists of essential sets and has at least the same deﬁciency. This contradiction to (7.24) completes the proof of the claim.
Note that by Claim A,

378 7. Global Connectivity

d−D (Zj) = |{vt : vt ∈ Zj and vs ∈ Zj}|.

(7.25)

Claim B: For every Zj ∈ F there is some v ∈ V so that both vs and vt belong to Zj. Proof Claim B: Suppose some Zj does not satisfy this property. Choose vs ∈ Zj so that vt ∈ Zj. If S − Zj = {vs}, then replace Zj by Zj ∪ {s} in F . The new family F ∗ still consists of essential sets and has at least the same
deﬁciency. This contradicts (7.24). Hence we may assume that S − Zj = {vs}. By the assumption that Zj does not contain any pair vs, vt, we get that T ∩ Zj = {vt} and as above we see that Zj can be deleted from F , contradicting (7.24).

Now we can ﬁnish the proof of Theorem 7.7.3: Let

Xj = {v ∈ V : vs ∈ Zj}, Yj = {v ∈ V : vs ∈ Zj and vt ∈ Zj}, 1 ≤ j ≤ r.
It follows from the fact that each Zj is essential and Claim B that Xj, Yj = ∅. Furthermore, by Claim A, (Xj, Yj) is a one-way pair and, by (7.25), it has deﬁciency k − d−D (Zj). Let
F = {(X1, Y1), . . . , (Xr, Yr)}.
Since F is (S, T )-independent, F consists of independent one-way pairs and by the remark above, the deﬁciency of F equals ηk,S,T (D ). This shows that ηk(D) ≥ ηk,S,T (D ). Combining this with (7.23), we get
ηk,S,T (D ) ≤ ηk(D) ≤ ak(D) ≤ γk,S,T (D ).
By Theorem 7.8.1 equality holds everywhere and Theorem 7.7.3 follows.

7.9 Arc Reversals and Vertex-Strong Connectivity
Suppose now that we want to increase the vertex-strong connectivity of a digraph by re-orienting arcs rather than adding new ones. This gives rise to the following problem.
Problem 7.9.1 Given natural number k and a digraph D = (V, A) on at least k + 1 vertices, ﬁnd a minimum set F ⊂ A of arcs in D such that the digraph D obtained from D by reversing every arc in F is k-strong.
If such a subset exists, then we let rk(D) = |F |, where F is a minimum cardinality subset of A, whose reversal makes the resulting digraph k-strong. Otherwise we let rk(D) = ∞.
For arbitrary digraphs it is not clear how we can decide whether such a reversal even exists, let alone ﬁnd an optimal one (unless we try all possibilities which clearly requires exponential time). Indeed, this seems to be a very

7.9 Arc Reversals and Vertex-Strong Connectivity 379

diﬃcult problem (see also Conjecture 8.6.7). Clearly, if rk(D) < ∞, then we have

ak(D) ≤ rk(D),

(7.26)

since, instead of reversing in D we may add exactly those new arcs we would obtain by reversing and keep the original ones.

We will now show that for semicomplete digraphs D, the function rk(D) behaves nicely.

Lemma 7.9.2 [84] If a semicomplete digraph D has at least 2k + 1 vertices then rk(D) is ﬁnite and is bounded by a function depending only on k.
Proof: To see this it suﬃces to use the following two simple observations, the proofs of which are left to the reader as Exercises 7.26 and 7.36.

(a) If D is a k-strong digraph and D is obtained from D by adding a new vertex x and arcs from x to every vertex in a set X of k distinct vertices of D and arcs from every vertex of a set Y of k distinct vertices of D to x, then D is also k-strong.
(b) If T is a semicomplete digraph on at least 4k −1 vertices, then T contains a vertex with in-degree and out-degree at least k.

By observations (a) and (b), for every semicomplete digraph T , rk(T ) ≤ rk(T ) for some subgraph T of T with |V (T )| ≤ 4k − 2. Continue removing vertices as long as we can ﬁnd a vertex of in- and out-degree at least k,

or the current graph has 2k + 1 vertices. When this process stops we have 2k + 1 ≤ |V (T )| ≤ 4k − 2 in the current semicomplete digraph T . Then

we can make T k-strong by reversing some arcs and add back each of the

removed vertices in the reverse order of the deletion. This provides a simple

upper bound for rk(T ) (and hence for ak(T )) as a function of k: we need to

reverse

at

most

(4k−2)(4k−3) 4

arcs.

Note that the process above may not lead to an optimal reversal for the

original semicomplete digraph(in terms of the number of arcs to reverse), not

even if we reverse optimally in T (see also Exercise 7.40). Bang-Jensen and

Jorda´n showed that, somewhat surprisingly, as soon as the number of vertices

in the given semicomplete digraph D is suﬃciently high (depending only on

k), the minimum number of arcs in D we need to reverse in order to achieve a k-strong semicomplete digraph equals the minimum number of new arcs we

need to add to D to obtain a k-strong semicomplete digraph.

Theorem 7.9.3 [84] If D is a semicomplete digraph on at least 3k − 1 vertices for some k ≥ 2 then ak(D) = rk(D).
The idea is to show that rk(D) ≤ ak(D), by demonstrating that a certain optimal augmenting set F of D has the property that, if we reverse the

380 7. Global Connectivity
existing (opposite) arcs of F in D, then we obtain a k-strong semicomplete digraph. As we point out later, even for semicomplete digraphs, it is by no means the case that just an arbitrary optimal augmenting set will have this property. It was shown in [84] that 3k−1 is the best possible for semicomplete digraphs. However, in the case when D is tournament, the question as to whether or not the bound is best possible was left open and the following conjecture was implicitly formulated.
Conjecture 7.9.4 [84] For every tournament D on at least 2k + 1 vertices, we have ak(D) = rk(D).
One may argue that perhaps if we restrict ourselves to only adding arcs between adjacent vertices, then we could have ak(D) = rk(D) for arbitrary digraphs D, provided both numbers are ﬁnite and the number of vertices in D is large enough. This is not true, however, as can be seen from the following example:
y

T1-u

T2-v

u T1

v T2

xz
Figure 7.9 A digraph with a2(D) = 1 and r2(D) = 2. The digraphs T1 and T2 are 2-strong. Fat arcs between sets of vertices indicate that all arcs between these sets are present and have the direction shown.

Let T1 and T2 be disjoint 2-strong digraphs, let u ∈ V (T1), v ∈ V (T2) be ﬁxed vertices and let D be the digraph obtained from T1 and T2 by adding new vertices x, y, z and the following arcs (see Figure 7.9):
{r→y : r ∈ V (T1)} ∪ {y→s : s ∈ V (T2)} ∪ {s→r : s ∈ V (T2), r ∈ V (T1)} ∪ {r→x : r ∈ V (T1) − u} ∪ {s→z : s ∈ V (T2) − v} ∪ {x→u, z→v, z→x}

7.10 Minimally k-(Arc)-Strong Directed Multigraphs 381

It is not diﬃcult to see that a2(D) = 1 and that any arc whose addition to D results in a 2-strong digraph has tail x and head in T2 ∪ z. On the other hand it is also easy to see that r2(D) ≥ 2 (Exercise 7.34). This example can be modiﬁed to work for any k ≥ 1 (Exercise 7.35).
If we add arcs to the digraph D described above without increasing the number of out-neighbours of x and of z, we can construct a semicomplete digraph D of any given size for which xz is an optimal augmentation but reversing xz does not make D 2-strong.This – and similar constructions for higher connectivity – show that even for semicomplete digraphs we cannot reverse along an arbitrary optimal augmenting set for k ≥ 2.
The following conjecture which is stronger than Conjecture 7.7.13 was made by Bang-Jensen at a meeting in Budapest in 1994. Again the transitive tournament on n ≥ 2k + 1 vertices shows that the bound would be best possible if true.

Conjecture 7.9.5 For every tournament T on n vertices and every positive

integer

k

such

that

n

≥

2k

+1

we

have

rk(T )

≤

k(k+1) 2

.

The problem of determining the optimal number of arcs to be reversed to make an arbitrary digraph k-arc-strong was shown by Frank to be polynomially solvable in [254]. We will return to this in Section 8.8.4, where we shall see how to solve this problem using submodular ﬂows.

We complete this section with the following useful observation, which we use in Section 7.14.

Lemma 7.9.6 [44, 344] Let D = (V, A) be a k-strong digraph and let xy be an arc of D. If D has at least (k + 1)-internally disjoint (x, y)-paths each of length at least 2, then the digraph D obtained from D by replacing the arc xy by the arc yx (or just deleting xy if yx ∈ A) is k-strong. Furthermore, if D is not (k + 1)-strong, then every minimum separating set S of D is also separating in D.

Proof: Suppose that D is not (k +1)-strong. Let S be a minimum separator of D . Then |S | ≤ k and there is some pair a, b of vertices separated by S in D . It follows from the assumption on κ(x, y) that either S ∩ {x, y} = ∅, or S does not separate x, y. From this we get that {a, b} = {x, y} and that a, b are also separated by S in D. This shows that every minimum separating set of D is also separating in D. Since D is k-strong we have |S | = k and hence D is k-strong.

7.10 Minimally k-(Arc)-Strong Directed Multigraphs
A directed multigraph D = (V, A) is minimally k-(arc)-strong if D is k(arc)-strong, but for every arc e ∈ A, D − e is not k-(arc)-strong. From an

382 7. Global Connectivity
application point of view it is very important to be able to identify a small subgraph of a k-(arc)-strong directed multigraph which is spanning and still k-(arc)-strong. The reason for this could be as follows. If many arcs of D are redundant, then it may make sense to discard these. If one is writing an algorithm for ﬁnding a certain structure that is based on k-(arc)-strong connectivity, then working with the smaller subgraph could speed up the algorithm, especially if k is relatively small compared to n.
Note however that, if we are given a k-(arc)-strong directed multigraph D = (V, A) and ask for the smallest number of arcs in a spanning k-(arc)strong subgraph of D, then this is an N P-hard problem. Indeed, a strong digraph D on n vertices has a strong spanning subgraph on n arcs if and only if D has a hamiltonian cycle. Hence, we must settle for ﬁnding spanning subgraphs with relatively few arcs. Since every k-arc-strong directed multigraph on n vertices has at least kn arcs, the proof of Theorem 7.10.1 together with Exercise 9.27 implies that there is a polynomial algorithm to ﬁnd a spanning k-arc-strong subgraph with no more than twice the optimum number of arcs. We discuss this topic in more detail in Section 7.16.
7.10.1 Minimally k-Arc-Strong Directed Multigraphs
We present some important degree results by Mader [535]. Combining these results with Theorem 7.5.2 we obtain a construction method (also due to Mader) to generate all k-arc-strong directed multigraphs. We start with a result by Dalmazzo which gives an upper bound on the number of arcs in any minimally k-arc-strong directed multigraph of order n.
Theorem 7.10.1 [172] A minimally k-arc-strong directed multigraph has at most 2k(n − 1) arcs and this is the best possible.
Proof: Let D = (V, A) be k-arc-strong and let s be a ﬁxed vertex of V . By Corollary 7.3.2 d+(U ), d−(U ) ≥ k for every ∅ = U ⊂ V . Hence, by Edmonds’ branching theorem (Theorem 9.5.1), D contains k arc-disjoint in-branchings Fs−,1, . . . , Fs−,k rooted at s and k arc-disjoint out-branchings Fs+,1, . . . , Fs+,k rooted at s. Let A = A(Fs−,1) ∪ . . . ∪ A(Fs−,k) ∪ A(Fs+,1) ∪ . . . ∪ A(Fs+,k) and let D = (V, A ). Then D is k-arc-strong and has at most 2k(n − 1) arcs. Thus if D is minimally k-arc-strong, then A = A . To see that this bound cannot be sharpened it suﬃces to consider the directed multigraph obtained from a tree T (as an undirected graph) and replacing each edge uv of T by k arcs from u to v and k arcs from v to u.
It it easy to see that, if D = (V, A) is minimally k-arc-strong, then every arc uv leaves a k-out-critical set4 and enters a k-in-critical set. Applying (7.2) we obtain Lemma 7.10.2 below which implies that every arc uv leaves
4 Recall that this means that there is some X ⊂ V such that u ∈ X, v ∈ V − X and d+(X) = k.

7.10 Minimally k-(Arc)-Strong Directed Multigraphs 383

precisely one minimal k-out-critical set Xu and enters precisely one minimal k-in-critical set Yu. Here minimal means with respect to inclusion.
Lemma 7.10.2 If X, Y are crossing k-in-critical sets in D, then X ∩ Y and X ∪ Y are also k-in-critical sets and d(X, Y ) = 0.

Proof: Suppose X, Y are crossing and k-in-critical. Using (7.2) we get

k + k = d−(X) + d−(Y ) = d−(X ∪ Y ) + d−(X ∩ Y ) + d(X, Y )
≥ k + k,

implying that X ∩ Y and X ∩ Y are both k-in-critical and d(X, Y ) = 0. Intuitively, Lemma 7.10.2 implies that minimally k-arc-strong directed
multigraphs have vertices of small in-degree and vertices small out-degree. The next result by Mader shows that this is indeed the case. In fact, a much stronger statement holds.

Theorem 7.10.3 [535] Every minimally k-arc-strong directed multigraph has at least two vertices x, y with d+(x) = d−(x) = d+(y) = d−(y) = k.

Proof: We give a proof due to Frank [260]. Let R be a family of k-in-critical sets with the property that

every arc in D enters at least one member of R.

(7.27)

By our remark above such a family exists since D is minimally k-arc-strong. Our ﬁrst goal is to make R cross-free (that is, we want to replace R
by a new family R∗ of k-in-critical sets such that R∗ still satisﬁes (7.27) and no two members of R∗ are crossing). To do this we apply the so-called uncrossing technique which is quite useful in several proofs. If there are crossing members X, Y in R, then by Lemma 7.10.2, X∩Y and X∪Y are k-incritical and d(X, Y ) = 0. Hence every arc entering X or Y also enters X ∪ Y , or X ∩ Y . Thus we can replace the sets X, Y by X ∩ Y, X ∪ Y in R (we only add sets if they are not already there). Since |X ∩Y |2 +|X ∪Y |2 > |X|2 +|Y |2 and the number of sets in R does not increase, we will end up with a family R which is cross-free. Note that we could have obtained such a family directly by choosing the members in R as the unique minimal k-in-critical sets entered by the arcs of A. However, this choice would make the proof more complicated, since we lose the freedom of just working with a cross-free family satisfying (7.27). We shall use this freedom in Case 2 below. Assume below that

R is cross-free.

(7.28)

Now the trick is to consider an arbitrary ﬁxed vertex s and show that V − s contains a vertex with in-degree and out-degree k. This will imply the theorem.

384 7. Global Connectivity

Let s be ﬁxed and deﬁne the families S and U as follows

S = {X ∈ R : s ∈ X}, U = {V − X : s ∈ X ∈ R}.

(7.29)

Let L = L(R) = S ∪ U. Claim A: The family L is laminar.
Proof of Claim A: We must show that no two members of L are intersecting. Suppose X, Y ∈ L are intersecting. Then X and Y cannot both be from S since then they are crossing and this contradicts (7.28). Similarly X and Y cannot both be from U , since then V − X, V − Y are crossing members of R, a contradiction again. Finally, if X ∈ S and Y ∈ U, then X and V − Y are crossing members of R, contradicting (7.28). This proves that L is laminar.

By the choice of S and U we have the following property:

Every arc either enters a member of S or leaves a member of U (or both). (7.30)
Suppose R is chosen such that (7.27) and (7.28) hold and furthermore

|X| is minimal.
X ∈L
To complete the proof of the theorem we consider two cases.
Case 1 Every member of L has size one:

(7.31)

Let X = {x ∈ V − s : {x} ∈ S} and Y = {y ∈ V − s : {y} ∈ U}. Then X cannot be empty, since every arc leaving s enters X. Similarly Y is non-empty. Now if X ∩ Y = ∅, then there can be no arc leaving X, by the deﬁnition of X and (7.30). However d+(X) ≥ k, since D is k-arc-strong and hence we have shown that X ∩ Y = ∅. Let t be any element in X ∩ Y , then we have d+(t) = d−(t) = k.
Case 2 Some member Z of L has size at least two:

Choose Z such that |Z| is minimal among all members of L of size at
least two. Note that, if we consider the converse D∗ of D and let R∗ = {V − X :
X ∈ R} and then deﬁne S∗, U ∗ as we deﬁned S and U from R, then S∗ = U and U ∗ = S. Furthermore, the corresponding family L∗ satisﬁes (7.30) and
(7.31). This shows that we may assume without loss of generality that Z ∈ S.
We claim that

the directed multigraph D Z is strongly connected.

(7.32)

Suppose this is not the case and let Z1, Z2 be a partition of Z with the property that there are no arcs from Z2 to Z1. Then we have k ≤ d−(Z1) ≤

7.10 Minimally k-(Arc)-Strong Directed Multigraphs 385

d−(Z) = k, implying that Z1 is k-in-critical and that every arc that enters Z also enters Z1. Let R = R − {Z} + {Z1}, S = S − {Z} + {Z1} and let L = S ∪ U. Then L still satisﬁes (7.30) and

|X| < |X|.

X ∈L

X ∈L

However, this contradicts the choice of R. Thus we have shown that D Z is strongly connected. This establishes (7.32).

We return to the proof of the theorem. Let

A = {z ∈ Z : {z} ∈ S}, B = {z ∈ Z : {z} ∈ U}.
If A ∩ B = ∅ then any vertex t ∈ A ∩ B has d+(t) = d−(t) and we are done. Suppose A ∩ B = ∅. Then we claim that

A = ∅.

(7.33)

Suppose A = ∅. By the choice of R so that L satisﬁes (7.31), we cannot leave out any set without violating (7.30). Hence we cannot have A = Z, because then we could leave out Z without violating (7.30). Now (7.32) implies that there is an arc uv from A to Z − A. Since L satisﬁes (7.30), the arc uv either enters some member of S or leaves a member of U. If it enters a member M of S, then by the deﬁnition of A, M cannot be of size one. On the other hand, by the fact that L is laminar and the minimality of Z, M also cannot have size at least two. Hence uv must leave a member W of U. Since we have assumed A ∩ B = ∅, this must be a set of size more than one. Using that L is laminar it follows that W ⊂ Z, contradicting the choice of Z. Hence we must have A = ∅ and (7.33) is established. Next we claim that

B = Z.

(7.34)

Since A = ∅ and Z is minimal among all members of L of size at least 2, every arc with both ends in Z must leave a member of B (using the same arguments as above). Hence B = ∅ and we must have B = Z, since otherwise (7.32) would imply the existence of an arc from Z − B to B, contradicting what we just concluded.

Now we are ready to complete the proof of the theorem. Since B = Z, every vertex in Z has out-degree k. Thus we have

k|Z| = d+(v)
v∈Z
= d+(Z) + |A(D Z )|
≥ k + |A(D Z )|

386 7. Global Connectivity

= k + ( d−(v)) − d−(Z)
v∈Z
= d−(v)
v∈Z
≥ k|Z|.
Hence equality holds everywhere, in particular, every vertex in Z has inand out-degree k.

22

2

11 1

3 1

43 1

Figure 7.10 A construction of a 2-arc-strong directed multigraph starting from a single vertex.

Using Theorem 7.5.3 and Theorem 7.10.3 one can obtain the following complete characterization of k-arc-strong directed multigraphs, due to Mader [537].
Theorem 7.10.4 [537] A directed multigraph D is k-arc-strong if and only if it can be obtained starting from a single vertex by applying the following two operations (in any order):
Operation A: Add a new arc connecting existing vertices. Operation B: Choose k distinct arcs u1v1, . . . ukvk and replace these by 2k
new arcs u1s, . . . , uks, sv1, . . . , svk, where s is a new vertex.
Proof: Clearly Operation A preserves the property of being k-arc-strong. To see that this also holds for Operation B we apply Menger’s theorem. Suppose D is k-arc-strong and D is obtained from D by one application of Operation B but D is not k-arc-strong. Let U ⊂ V (D ) be some subset such that d+D (U ) ≤ k − 1. Then we must have U = {s} and U = V (D), since clearly s has in- and out-degree k in D . Now it is easy to see that the corresponding set U −s has out-degree less than k in D, a contradiction. From these observations it is easy to prove by induction on the number of vertices that every directed multigraph that can be constructed via operations A and B is k-arc-strong. Here we assume by deﬁnition that every directed pseudograph having just one vertex is k-arc-strong.
The other direction can be proved using induction on the number of arcs. If D is k-arc-strong and not minimally k-arc-strong, then we can remove an arc and apply induction. Otherwise it follows from Theorem 7.10.3 that D

7.10 Minimally k-(Arc)-Strong Directed Multigraphs 387
contains a vertex s such that d+(s) = d−(s) = k. According to Theorem 7.5.3 this vertex and the 2k arcs incident with it can be replaced by k new arcs in such a way that the resulting directed multigraph D is k-arc-strong. By induction D can be constructed via operations A and B. Since we can go from D back to D by using operation B once, D can be constructed using operations A and B.
See Figure 7.10 for an illustration of the theorem.
7.10.2 Minimally k-Strong Digraphs
In this section D = (V, A) is always a digraph (i.e. no multiple arcs) and hence we know that d+(v) = |N +(v)| for each v ∈ V .
We saw in the last section that every minimally k-arc-strong directed multigraph has at least two vertices with in- and out-degree equal to k. Mader conjectures that this is also the case for vertex-strong connectivity in digraphs.
Conjecture 7.10.5 [538] Every minimally k-strong digraph contains at least two vertices such that both have in- and out-degree k.
This conjecture is still open and seems very diﬃcult. For k = 1 the truth of Conjecture 7.10.5 follows from Theorem 7.10.3. Mader [541] has proved the conjecture for k = 2. For all other values of k the conjecture is open. Examples by Mader [535] show that one cannot replace two by three in the conjecture.
Recall (from Subsection 7.7.4) that an arc e of a k-strong digraph is kcritical if D − e is not k-strong. By Lemma 7.7.2, for each k-critical arc uv we can associate sets Tuv, Huv such that (Tuv, Huv) is a one-way pair in D − uv and h(Tuv, Huv) = k − 1. This one-way pair may not be unique, but below we always assume that we have chosen a ﬁxed one-way pair for each k-critical arc in D. Compare this with Lemma 7.7.15.
Lemma 7.10.6 Let D = (V, A) be a k-strong digraph. Then the following is true:
(a) If D has two k-critical arcs ux, uy, such that d+(u) ≥ k + 1, then |Tuy| > |Hux|.
(b) If D has two k-critical arcs xu, yu, such that d−(u) ≥ k +1, then |Hxu| > |Tyu|.
Proof: Since (b) follows from (a) by considering the converse of D, it suﬃces to prove (a). Hence we assume that ux, uy are k-critical arcs of D and that d+(u) ≥ k + 1. Let (Tux, Hux), (Tuy, Huy) be the pairs associated with ux, uy above. Note that these are not one-way pairs in D, since there is a (unique) arc, namely ux (uy) which goes from Tux (Tuy) to Hux (Huy). Let also Sux = V − (Tux ∪ Hux) and Suy = V − (Tuy ∪ Huy). Then |Sux| = |Suy| = k − 1 and

388 7. Global Connectivity II

II

u Tux

w

b

u Tux

w

b

Sux a

cy e

I

y c ae

Hux

xd z

Hux

xd M

Tuy Suy

Huy

Tuy Huy

(A) (B)
Figure 7.11 Illustration of the proof of Lemma 7.10.6. Part (A) illustrates the case when Hux ∩ Huy = ∅. Part (B) illustrates the case when Hux ∩ Huy = ∅. The ﬁrst row of each 3 × 3 diagram corresponds to the set Tux. The ﬁrst column corresponds to Tuy and so on. The positions of x, y indicate that they can be in either of the two neighbouring cells. The numbers a, b, c, d, e denote the cardinality of the sets corresponding to their cell.

x ∈ Hux − Huy, y ∈ Huy − Hux. It will be useful to study Figure 7.11 while reading the proof.
Let a, b, c, d, e be deﬁned as in Figure 7.11. Since each of the sets Sux, Suy has size k − 1 we see that

a + b + 2c + d + e = 2k − 2.

(7.35)

We claim that Hux ∩ Huy = ∅. Suppose this is not the case and let z ∈ Hux ∩ Huy be arbitrarily chosen. Now it follows from the fact that (Tux, Hux) is a one-way pair in D − ux and (Tuy, Huy) is a one-way pair in D−uy, that the set CI , indicated by the line I in Figure 7.11, separates u from z in D. Hence c + d + e ≥ k, since D is k-strong. Now (7.35) implies that the set CII , indicated by the line II, has size at most k − 2. Since d+(u) ≥ k + 1 and u has precisely two arcs, namely ux, uy out of Tux ∩ Tuy in D − CII , we see that there is some out-neighbour w of u inside Tux ∩ Tuy. But now it is easy to see that CII ∪ {u} separates w from z, contradicting that D is k-strong. Hence we have shown that Hux ∩ Huy = ∅.
To complete the proof, we only need to show that a ≥ d. Suppose this
is not the case. Then in particular d ≥ 1 and the size of the set CII is at most |Suy| + a − d ≤ k − 2. Thus as above we can argue that u has an outneighbour w inside Tux ∩ Tuy. Now CII ∪ {u} separates w from x in D, a contradiction.

7.10 Minimally k-(Arc)-Strong Directed Multigraphs 389
An anti-directed trail is the digraph T¯ one obtains from a closed undirected trail T of even length by ﬁxing a traversal of T and orienting the edges so that every second vertex v has in-degree zero when we consider just the two arcs between v and its successor and predecessor on T . We denote the anti-directed trail T¯ by T¯ = v1v¯1v2v¯2 . . . vrv¯rv1, where v¯i indicates that the vertex v¯i is dominated by both its successor and its predecessor on the trail T . A vertex which dominates (is dominated by) both its successor and its predecessor on T¯ is a source (sink) of T¯. Note that if a vertex v is repeated on T¯ then v may be both a source and a sink. An anti-directed cycle is an anti-directed trail in which no vertex occurs twice (that is, the underlying graph is just a cycle). See Figure 7.12 for an illustration of the deﬁnitions.
v¯1 v1

v2 = v¯3

v3 v¯2

Figure 7.12 An anti-directed is both a source and a sink of

tT¯ra. iNl vo1tv¯e1tvh2av¯t2

vT¯3

v¯3v1 on 6 contains

vertices. The vertex v2 no anti-directed cycle.

=

v¯3

Now we can prove the following important result due to Mader:

Theorem 7.10.7 [538] Let D be a k-strong digraph containing an antidirected trail T¯ = v1v¯1v2v¯2 . . . vrv¯rv1. Then at least one of the following holds:

(a) Some arc e ∈ A(T¯) is not k-critical in D.

(b) (c)

Some Some

source sink v¯j

voifoT¯f

T¯ has out-degree k has in-degree k in

in D.

D.

Proof: If (b) or (c) holds there is nothing to prove so suppose that d+(vi) ≥ k + 1 for each source and d−(v¯j) ≥ k + 1 for each sink of T¯. We shall prove that (a) holds.
Suppose to the contrary that every arc e on T¯ is k-critical. Applying
Lemma 7.10.6 (a) to the arcs v1v¯r, v1v¯1, we obtain |Tv1v¯r | > |Hv1v¯1 |. Similarly, we get from Lemma 7.10.6 (b) that |Hv1v¯1 | > |Tv2v¯1 |. Repeating this argument around the trail we reach the following contradiction

|Tv1v¯r | > |Hv1v¯1 | > |Tv2v¯1 | > |Hv2v¯2 | > . . . > |Hvrv¯r | > |Tv1v¯r |. Hence we have shown that (a) holds.

The following is an easy consequence (see Exercise 7.48).

390 7. Global Connectivity
Corollary 7.10.8 [538] Every minimally k-strong digraph contains a vertex x of in-degree k, or a vertex y of out-degree k.
Using Theorem 7.10.7, Mader proved the following much stronger statement.
Theorem 7.10.9 [541] Every minimally k-strong digraph contains at least k + 1 vertices of out-degree k and at least k + 1 vertices of in-degree k.
Theorem 7.10.7 has many other nice consequences. Here is one for undirected graphs.
Corollary 7.10.10 [533] Let C be a cycle of a k-connected undirected graph G. Then either C contains an edge e which can be removed without decreasing the connectivity of G, or some vertex v ∈ V (C) has degree k in G.
Proof: To see this, it suﬃces to consider the complete biorientation D of G and notice that D − xy is k-strong if and only if D − {xy, yx} is k-strong (Exercise 7.25) which happens if and only if G − e is k-connected, where e = xy. Next, observe that in D, the cycle C either corresponds to one antidirected trail C , obtained by alternating the orientation on the arcs taken twice around the cycle C, when |C| is odd, or to two anti-directed cycles C , C when |C| is even. Now the claim follows from Theorem 7.10.7.
One reason why Corollary 7.10.10 is important is the following easy consequence concerning augmentations of undirected graphs, which was pointed out by Jord´an.
Corollary 7.10.11 [469] Let G = (V, E) be an undirected graph which is k-connected, but not (k + 1)-connected. Then every minimal set of edges F which augments the connectivity of G to (k + 1) induces a forest.
For directed graphs one obtains the following result, due to Jord´an, on augmentations from k-strong to (k + 1)-strong connectivity. Compare this with Theorem 7.7.8.
Corollary 7.10.12 [467] Let D = (V, A) be a directed graph which is kstrong, but not (k + 1)-strong and let F be a minimal set of new arcs, whose addition to D gives a (k + 1)-strong digraph. Then the digraph induced by the arcs in F contains no anti-directed trail.
One can also apply Theorem 7.10.7 to questions like: how many arcs can be deleted from a k-strong digraph, so that it still remains (k −1)-strong [540] (for undirected graphs see [122]). One easy consequence is the following.
Corollary 7.10.13 [540] If D = (V, A) is minimally k-strong and D = (V, A ) is a spanning (k − 1)-strong subgraph of D, then the diﬀerence D0 = (V, A − A ) contains no anti-directed trail.

7.11 Critically k-Strong Digraphs 391

Proof: Suppose T¯ = v1v¯1v2v¯2 . . . vrv¯rv1 is an anti-directed trail in D0. Since

D is minimally k-strong, (a) cannot hold in Theorem 7.10.7. Suppose without

loss of generality that (b) holds, since d+T¯ (vi) = 2, this implies

then that

some source d+D (vi) = k

vi −

has d+D(vi) = k. However, 2, contradicting the fact

that D is (k − 1)-strong.

Theorem 7.10.7 has many other important applications. We illustrate one such application in Section 7.16. We ﬁnish this section with a conjecture by Mader.

Conjecture 7.10.14 [540] Every minimally k-strong digraph on n vertices

contains

at

least

n−k k+1

+k

vertices

with

out-degree

equal

to

k.

Mader

has

proved

[540,

page

437]

that

there

are

at

least

1 3

n k+1

such

vertices. For more on the topic see the very informative survey [540] by Mader.

7.11 Critically k-Strong Digraphs
In this section we always consider directed graphs (no multiple arcs). A vertex v of a digraph D is critical if κ(D − v) < κ(D). The goal of this section is to illustrate some conditions under which we can always ﬁnd a non-critical vertex in a digraph D. First observe that there can be no function f (k) with the property that every k-strong digraph D with at least f (k) vertices has a vertex v such that D − v is still k-strong. This is not even the case for tournaments. To see this consider the example due to Thomassen (private communication, 1985) in Figure 7.13.
The example in Figure 7.13 can easily be generalized to arbitrary degrees of vertex-strong connectivity, by replacing each of the tournaments on seven vertices (right and left side of the ﬁgure) by the kth power of a (2k + 1)-cycle and replacing the three long paths by k long paths starting at the top k vertices in the left copy and ending at the top k vertices in the right copy.
Below we discuss some results by Mader on suﬃcient conditions for a k-strong digraph to contain a non-critical vertex.
Deﬁnition 7.11.1 Let D have κ(D) = k. A fragment in D is a subset X ⊂ V with the property that either |N +(X)| = k and X ∪ N +(X) = V , or |N −(X)| = k and X ∪ N −(X) = V .
Thus a fragment X corresponds to a one-way pair (X, Y ) with h(X, Y ) = k. Mader proved the following important result:
Theorem 7.11.2 [539] Every critically k-strong digraph contains a fragment of size at most k.

392 7. Global Connectivity

xy

Figure 7.13 A family T of 3-strong tournaments (the three paths from left to right can be arbitrary long). The big arc indicates that all arcs not explicitly shown go from right to left. It can be veriﬁed (Exercise 7.46) that each tournament in T is 3-strong and has the property that every vertex other than x, y is critical. Thus after removing at most two vertices we obtain a 3-strong tournament in which every vertex is critical.

This was conjectured by Hamidoune [394, Conjecture 4.8.3] who also conjectured the next two results, both of which are easy consequences of Theorem 7.11.2.
Corollary 7.11.3 [539] Every critically k-strong digraph contains a vertex x with in-degree, or out-degree less than 2k.
Proof: Let D = (V, A) be a critically k-strong digraph. By Theorem 7.11.2, D contains a fragment X with |X| ≤ k. By considering the converse of D if necessary, we may assume that |N +(X)| = k. We prove that every vertex of X has out-degree at most 2k−1. Let x ∈ X be arbitrary. Note that every outneighbour of x outside X contributes to |N +(X)|, implying that there are at most k of these. Now the claim follows from the fact that d+D X (x) ≤ k − 1.

We leave the proof of the next easy consequence as Exercise 7.41.

Corollary 7.11.4 [539] Every critically k-strong oriented graph contains a

vertex x with in-degree, or out-degree less than

3k−1 2

.

7.12 Arc-Strong Connectivity and Minimum Degree
Let D = (V, A) be a digraph and let δ(v) = min{d+(v), d−(v)} for v ∈ V .
Obviously, the highest arc-strong connectivity a digraph can possibly have is δ0(D). It is not easy to classify those digraphs for which the equality λ(D) = δ0(D) actually holds. However, since we can calculate λ(D) in polynomial

7.13 Connectivity Properties of Special Classes of Digraphs 393
time (see Subsection 7.4), it is easy to verify whether a given digraph D satisﬁes λ(D) = δ0(D).
In this section we will give two suﬃcient conditions for this equality. The ﬁrst result is due to Dankelmann and Volkmann.
Theorem 7.12.1 [173] Let D = (V, A) be a directed graph on n vertices without multiple arcs and let v1, v2, . . . , vn be ordered so that δ(v1) ≥ δ(v2) ≥ . . . ≥ δ(vn) = δ0(D). If δ0(D) ≥ n/2 , or δ0(D) < n/2 and there exists a k, 1 ≤ k ≤ δ0(D) such that
k
(δ(vi) + δ(vn+i−δ0(D)−1)) ≥ k(n − 2) + 2δ0(D) − 1,
i=1
then λ(D) = δ0(D).
Theorem 7.12.1 implies the following result by Xu which is a generalization of a result for undirected graphs in [329].
Corollary 7.12.2 [742] Let D be a digraph on n vertices. If there are n/2 disjoint pairs of vertices (vi, wi) with
δ(vi) + δ(wi) ≥ n for all i = 1, 2, . . . , n/2 ,
then λ(D) = δ0(D).
For further results on the relation between λ(D) and δ0(D) see [38, 173].
7.13 Connectivity Properties of Special Classes of Digraphs
In this section we describe a few results on the connectivity of various classes of digraphs introduced in Section 1.8 and Chapter 4. Some of these results will be used in other sections and chapters in this book.
The next lemma implies that almost all minimally k-strong decomposable digraphs are subdigraphs of extensions of digraphs.
Lemma 7.13.1 [52] Let D = F [S1, S2, . . . , Sf ] where F is a strong digraph on f ≥ 2 vertices and each Si is a digraph with ni vertices and let D0 = F [Kn1 , Kn2 , . . . , Knf ] be the digraph obtained from D by deleting every arc which lies inside some Si (recall that Kni is the digraph on ni vertices and no arcs). Let S be a minimal (with respect to inclusion) separating set of D0. Then S is also a separating set of D, unless each of the following holds:
(a) S = V (S1) ∪ V (S2) . . . ∪ V (Sf ) \ V (Si) for some i ∈ {1, 2, . . . , f }, and (b) D Si is a strong digraph, and

394 7. Global Connectivity H2
H1 H3

K3 K2 K3

H4 K3
Figure 7.14 A 2-strong digraph D with decomposition D = Q[H1, H2, H3, H4]. Fat arcs indicate that all possible arcs are present and have the direction shown. The right ﬁgure shows the 2-strong digraph D0 = Q[K2, K3, K3, K3] obtained from D by deleting all arcs inside each Hi.
(c) D = C2[S, Si].
In particular, if F has at least three vertices, then D is k-strong if and only if D0 is k-strong.
Proof: Let S be a minimal separating set of D0 and assume S is not separating in D. It is easy to see that, if x and y with x, y ∈ S belong to diﬀerent Si, then D − S has an (x, y)-path if and only if D0 − S has such a path. Thus, since S is separating in D0 but not in D, we must have S = V (S1) ∪ V (S2) . . . ∪ V (Sf ) \ V (Si) for some i ∈ {1, 2, . . . , f }. Note that here we used the minimality of S to get that S ∩ Sj = ∅ for some j. Now it follows trivially that D Si must be a strong digraph, since D − S is strong and the minimality of S implies that D = C2[S, Si] (if some Sj ⊂ S does not have arcs in both directions to Si, then S − Sj is also separating, contradicting the choice of S).
See Figure 7.14 for an example illustrating the lemma.
Combining Lemma 7.13.1 with Theorem 4.8.5 we obtain.
Corollary 7.13.2 If D is a k-strong quasi-transitive digraph with decomposition D = Q[W1, . . . , W|Q|], then the digraph D0 = Q[K|W1|, . . . , K|W|Q||] (that is, the digraph obtained by deleting all arcs inside each Wi) is also kstrong.
Another easy consequence of Lemma 7.13.1 is the following result by Bang-Jensen, Gutin and Yeo:

7.14 Highly Connected Orientations of Digraphs 395
Lemma 7.13.3 [70] Suppose that D is a digraph which can be decomposed as D = F [S1, S2, ..., Sf ], where f = |V (F )| ≥ 2, and let D0 = D − ∪fi=1{uv : u, v ∈ V (Si)}. Then D is strong if and only if D0 is strong.
Here is a useful observation on locally semicomplete digraphs due to BangJensen. The proof is left as Exercise 7.38.
Lemma 7.13.4 [44] Let D be a strong locally semicomplete digraph and let S be a minimal (not necessarily minimum) separating set of D. Then D − S is connected.
Lemma 7.13.5 Let D = (V, A) be a k-strong digraph and let D be obtained from D by adding a new set of vertices X and joining each vertex of X to V in such a way that |ND+ (v)|, |ND− (v)| ≥ k + 1 for each v ∈ X. Then D is k-strong. If D is not also (k + 1)-strong, then every minimum separating set of D is also a minimum separating set of D.
Proof: Suppose D is not (k + 1)-strong and let S be a minimum separating set of D . Then |S | ≤ k. Let S = S ∩ V (D). Since every vertex of X − S has an in-neighbour and an out-neighbour in V − S we get that D − S is not strong and hence S = S must hold and S is also separating in D. This implies that |S | = k, D is k-strong and every minimum separating set of D is also a minimum separating set of D.

7.14 Highly Connected Orientations of Digraphs

We saw in Corollary 7.2.7 that every strong digraph without a bridge has

a strong orientation. In this section we investigate how much of the degree

of arc-strong or vertex-strong connectivity of a digraph D comes from its 2-

cycles. More precisely, suppose we must delete one arc of every 2-cycle (thus

obtaining an orientation of D), can we always maintain a high arc-strong,

respectively vertex-strong, connectivity if the starting digraph has high arc-

strong, respectively vertex-strong, connectivity? It is not diﬃcult to see that

we may not be able to preserve the same degree of arc-strong, respectively

vertex-strong, connectivity, not even if D is semicomplete. See Figure 7.15

for an example. So the question is whether there exist functions f (k), g(k)

with the property that every f (k)-strong ((g(k)-arc-strong) digraph contains

a spanning k-strong (k-arc-strong) subgraph without cycles of length 2.

Let us ﬁrst consider arc-strong connectivity. Note that every k-arc-strong

oriented graph D must have U G(D) 2k-edge-connected. In particular, if G

is

an

undirected

graph

with

edge-connectivity

λ(G)

=

2k

−

1

and

↔
G

is

the

complete biorientation of G, then D does not contain a spanning k-arc-strong

subgraph. Hence the following result due to Jackson and Thomassen implies

that g(k) = 2k and this is the best possible by the remark above.

396 7. Global Connectivity
Figure 7.15 A 2-strong semicomplete digraph which has no 2-arc-strong spanning subtournament. Undirected edges correspond to directed 2-cycles.
Theorem 7.14.1 [451, 708] Every 2k-arc-strong digraph has a k-arc-strong orientation.
Since we may convert a digraph to a mixed graph by replacing each 2-cycle with an undirected edge, Theorem 7.14.1 follows from Theorem 8.9.1.
The vertex-strong connectivity case seems much harder. Jackson and Thomassen posed the following conjecture (see [708]): Conjecture 7.14.2 Every 2k-strong digraph has a k-strong orientation.
If true this would be the best possible (meaning that we cannot weaken the vertex-strong connectivity demand by one, without adding further requirements). To see this let G be the k’th power of an undirected cycle C = v1v2 . . . v2rv1 on 2r, r > k vertices. It is not diﬃcult to prove that G is 2k-connected and that the only separating sets of size 2k in G are those obtained by taking two sets of k consecutive vertices on C, each separated by at least one vertex on both sides. From this it follows that, if we add the diagonals v1vr+1, v2vr+2, . . . , vrv2r, then we obtain a (2k + 1)-connected graph H. Now let D be the complete biorientation of H. Then κ(D) = 2k + 1 and it is clear that D cannot have a (k + 1)-strong orientation, since U G(D) is not 2(k + 1)-edge-connected. See Figure 7.16 and Exercise 7.43.
Note that, if an oriented graph D is k-strong, then U G(D) is k-connected and 2k-edge-connected. However, the converse is not true, that is, it is not enough to require that D is k-strong and that U G(D) is 2k-edge-connected in order to guarantee that D has a k-strong orientation. The semicomplete digraph in Figure 7.15 shows this and the example can be generalized to an arbitrary odd number of vertices by taking the second power on an odd cycle C and orienting the original edges as in Figure 7.15. This shows that Conjecture 8.6.7 can neither be extended to mixed graphs, nor to digraphs. Another example, due to Alon and Ziegler [708, page 406]–showing that U G(D) may be k-connected and 2k-edge-connected and still D has no k-strong orientation–is obtained from the complete biorientation of the graph constructed by taking two large complete graphs G1, G2 sharing just one vertex v and adding k − 1 independent edges with one end in V (G1) − v and the other in V (G2) − v.

7.14 Highly Connected Orientations of Digraphs 397
Figure 7.16 A 7-connected 7-regular graph obtained from the third power of a 10-cycle by adding longest diagonals
Very little progress has been made on Conjecture 7.14.2 and it is not even known if there is some function f (k) so that every f (k)-strong digraph has a k-strong orientation. Below we shall describe some results on special classes of digraphs.
Using the structure theorem (Theorem 4.11.15) for locally semicomplete digraphs Guo proved that every (2k −1)-strong locally semicomplete digraph which is not semicomplete can be oriented as a k-strong local tournament.
This was improved by Huang [437] who proved that the following much stronger statement holds: Theorem 7.14.3 [437] Every k-strong locally semicomplete digraph which is not semicomplete can be oriented as a k-strong local tournament.
Bang-Jensen and Thomassen [44] proved that for semicomplete digraphs the function f (k) indeed exists. The value of this function was later improved by Guo.
Theorem 7.14.4 [344] For every natural number k, every (3k−2)-strong locally semicomplete digraph has an orientation as a k-strong local tournament digraph.
We will not prove the bound 3k − 2 here, but instead give the proof by BangJensen and Thomassen that f (k) ≤ 5k for semicomplete digraphs. That proof illustrates the main ideas and Guo’s proof is a reﬁnement of the proof we give. Note that by Theorem 7.14.3 it is enough to consider semicomplete digraphs.
We prove by induction on k that every 5k-strong semicomplete digraph D contains a spanning k-strong tournament. The case k = 1 is easy, since by Theorem 1.5.1, every strong semicomplete digraph has a Hamilton cycle. Let C be a Hamilton cycle in D. For every 2-cycle of D delete an arbitrary arc of that 2-cycle, unless one of its arcs is used by C. In the latter case we delete one arc of the 2-cycle so as to preserve C. We obtain a spanning strong tournament T of D. Note that the case k = 1 also follows easily from Corollary 7.2.7.

398 7. Global Connectivity
Suppose we have proved the statement for all r ≤ k − 1, that is, every 5rstrong semicomplete digraph contains a spanning r-strong tournament. Let D be a 5k-strong semicomplete digraph and suppose D does not contain a spanning k-strong tournament. We derive a contradiction to this assumption. First observe that we must have |V (D)| ≥ 5k + 2 since otherwise D is the complete digraph on 5k + 1 vertices and this clearly contains a k-connected spanning tournament.
By induction D contains a (k − 1)-strong spanning tournament. Let T be chosen among all (k − 1)-strong spanning tournaments of D such that the following holds:
(i) The number s of separating sets of size k − 1 in T is minimum over all k − 1-strong spanning subtournaments of D.
(ii) T has a separating set S of size k − 1 such that the number m of strong components of T − S is minimum taken over all separating sets of size k − 1 of T .
Let S be some separating set of T such that T − S has precisely m strong components T1, . . . , Tm (written in the unique acyclic order). Let U = V (T1)∪ . . . ∪ V (Tm−1) and W = V (Tm). Since D is 5k-strong it follows easily from Menger’s theorem (Corollary 7.3.2) that in D there are 5k internally disjoint paths from W to U (see Exercise 7.19). At most k − 1 of these can pass through S. Thus in D − S there are at least 4k + 1 arcs from W to U . Let U ⊂ U (W ⊂ W ) be those vertices v of U (W ) for which some arc in D from W to U has v as its head (tail). Since D − S has at least 4k + 3 vertices, either U or W has size at least 2k + 2. Using this and the fact that D − S has 4k + 1-internally disjoint (w, u)-paths for every choice of u ∈ U, w ∈ W , we get from Corollary 7.3.2 that either |U | ≥ 2k + 1 or |W | ≥ 2k + 1. By considering the converse of D if necessary, we may assume |U | ≥ 2k + 1.
The digraph T U is a tournament on at least 2k + 1 vertices and hence it has a vertex x with at least k out-neighbours in U . Let y be a vertex in W such that yx is an arc of D (y exists since x ∈ U ). In T we have the arc xy (since every vertex in U dominates every vertex in W ) and since x has out-degree at least k in T U , there are at least k (x, y)-paths of length 2 in T . Let T be the spanning tournament in D that we obtain from T by replacing the arc xy by the arc yx. Applying Lemma 7.9.6 we get that T has no more than s minimum separating sets. However, it is easy to see that T − S is either strong (if x ∈ V (T1)), or it has fewer strong components than T − S and hence we obtain a contradiction to the choice of T according to (i), (ii).
It can be seen by inspecting Guo’s proof in [344] that (3k − 2)-strong connectivity is the best bound one can prove using his approach. However, at least for k = 2 this is not sharp when we have more than 2k vertices:
Proposition 7.14.5 [83] Every 3-strong semicomplete digraph on at least 5 vertices contains a spanning 2-strong tournament.

7.14 Highly Connected Orientations of Digraphs 399
tCh
y A
uv B
x TH Figure 7.17 A k-strong semicomplete digraph D. All arcs between H and T go from H to T , except the 2-cycle xyx shown as an edge. All other arcs not shown are in 2-cycles. A, B, C represent arbitrary complete digraphs on at least one vertex each. The set C has k − 3 vertices and hence k is deﬁned as |C| + 3. The one-way pair T, H (in D − xy) shows that we cannot delete xy and the one-way pair (T , H ) with T = A ∪ {y, t}, H = B ∪ {h, x} shows that we cannot delete yx.
It is perhaps worthwhile to notice that it does not seem easy to construct k-strong semicomplete digraphs with many vertices such that both arcs of some 2-cycle are critical with respect to k-strong connectivity (that is, deleting any of these arcs, the digraph is no longer k-strong). In order to obtain such a semicomplete digraph we must construct it so that we can prove that it is k-strong and that some 2-cycle xyx has the property that none of D − {xy} and D − {yx} is k-strong. Here the concept of one-way pairs and Lemma 7.7.2 is a useful tool. Suppose that none of D − {xy} and D − {yx} are k-strong. Then each of these must be (k − 1)-strong and there must exist one-way pairs (T1, H1), (T2, H2) in D − xy, respectively D − yx with h(T1, H1) = h(T2, H2) = k − 1 and x ∈ T1 ∩ H2, y ∈ T2 ∩ H1. Based on these ﬁndings one can construct a semicomplete digraph with the desired property. See Figure 7.17. We leave it to the reader to verify that D is indeed k-strong (Exercise 7.42).
Let us call a 2-cycle xyx in a semicomplete digraph D critical if we cannot delete any of the arcs xy, yx without decreasing the vertex-strong connectivity of D.
Problem 7.14.6 Investigate the structure of the critical 2-cycles in semicomplete digraphs.

400 7. Global Connectivity
As an illustration of the usefulness of the structural characterization of quasi-transitive digraphs in Theorem 4.8.5 we show how Theorem 7.14.4 implies the same statement for quasi-transitive digraphs.
Corollary 7.14.7 For every natural number k, every (3k − 2)-strong quasitransitive digraph has an orientation as a k-strong quasi-transitive digraph.
Proof: Let D be a (3k − 2)-strong quasi-transitive digraph and let D = Q[W1, . . . , Wq], q = |Q|, be a decomposition of D according to Theorem 4.8.5. By Corollary 7.13.2, the digraph D0 obtained from D by deleting all arcs inside each Wi is also (3k − 2)-strong. By Theorem 4.8.5, if Q contains a 2-cycle qiqjqi, then each of Wi, Wj have size one. Now let H be a semicomplete digraph obtained from D0 by adding an arbitrary arc between every pair of vertices inside each V (Wi). Clearly H is (at least) (3k − 2)strong and hence, by Theorem 7.14.4, it contains a spanning k-connected tournament T (which is obtained from H by deleting one arc from every 2-cycle, that is, T is an orientation of H). By the way we constructed H, we have T = Q [T1, . . . , Tq] for some choice of tournaments T1, . . . , T|Q| on |W1|, . . . , |Wq| vertices respectively. Here Q is a spanning tournament in Q. Applying Corollary 7.13.2 to T = Q [T1, . . . , Tq], we get that the quasitransitive digraph D = Q [K|W1|, . . . , K|Wq|] is k-strong and by the remark above on 2-cycles in Q we see that D is a spanning subgraph of D. It is easy to see that, if we delete an arc from every 2-cycle of a quasi-transitive digraph, then the result is a quasi-transitive digraph. Let Wi be obtained from Wi by deleting one arc from every 2-cycle in Wi for i = 1, 2, . . . , Wq. Now we see that D = Q [W1, W2, . . . , Wq] is the desired k-strong orientation of D.
Note that it also follows from the proof above that every (3k − 2)-strong quasi-transitive digraph contains a spanning k-strong extended tournament.
7.15 Packing Cuts
In this section we consider directed multigraphs. Let D = (V, A) be a directed multigraph which is connected, but not strongly connected. A directed cut (or just a dicut) in D is a set of arcs of the form (X, V − X), where X is a non-empty proper subset of V such that there are no arcs from V − X to X (i.e. (V − X, X) is a one-way pair with h(X, V − X) = 0). Two directed cuts are arc-disjoint if they do not share an arc. Note that two dicuts (X, V − X) and (Y, V − Y ) may be arc-disjoint but still X ∩ Y = ∅. As an example consider a directed path x1x2 . . . xk. Here {({x1, . . . , xi}, {xi+1, . . . , xk}) : 1 ≤ i ≤ k − 1} is a family of k − 1 arc-disjoint cuts (each having precisely one arc). Clearly these cuts overlap considerably when we consider their vertex sets. For simplicity we will sometimes denote a dicut (X, V − X) just by the set X.

7.15 Packing Cuts 401

A dijoin is a subset A ⊂ A which covers all dicuts. Deﬁne Ω(D) and τ (D) as follows

Ω(D) = the maximum number of arc-disjoint dicuts in D.

τ (D) = min {|A | : A is a dijoin}.

(7.36)

Suppose D = (V, A) is connected but not strongly connected. Then it is

clear that we can obtain a strong directed multigraph by contracting certain

arcs. It is also clear that, if we contract an arc a which is not an arc of a

dicut (X, V −X), then in the resulting directed multigraph D = (V , A ), the

corresponding pair (X , V − X ) is still a dicut. On the other hand, if A is a

dijoin and we contract all arcs of A , then the resulting directed multigraph

is strong. Let ρ(D) denote the minimum number of arcs whose contraction in

D leads to a strong directed multigraph. Then it follows from the discussion

above that

Ω(D) ≤ ρ(D) ≤ τ (D).

(7.37)

Note that, if D is a directed (x, y)-path on r vertices, then a1(D) = 1, since we may add a new arc yx and get a strong digraph. However, in order
to obtain a strong directed multigraph by contracting arcs, we must contract
r − 1 arcs, showing that ρ(D) = r − 1. This proves that ρ(D) and a1(D) may be arbitrarily far apart.

Let D be a directed multigraph. Recall that the operation of subdividing an arc consists of replacing the arc xy in question by the path xuy of length two, where u is a new vertex. If several arcs are subdivided, then all the new vertices (used to subdivide these arcs) are distinct.

Lemma 7.15.1 Let D = (V, A) be a directed multigraph and let D be obtained from D by subdividing each arc once. If D has k arc-disjoint dicuts, then D has 2k arc-disjoint dicuts.

Proof: Let D = (V , A ) be obtained from D by subdividing each arc once. Let X1, . . . , Xk be chosen such that the dicuts (X1, V −X1), . . . , (Xk, V −Xk) are arc-disjoint in D. For each dicut (Xi, V − Xi) we denote by Xi the set we obtain in D by taking the union of Xi and the new vertices that subdivide the arcs leaving Xi. Now it is easy to see that each of the dicuts (X1, V − X1), (X1, V − X1), . . . , (Xk, V − Xk), (Xk, V − Xk) are arc-disjoint.
The next theorem, due to Lucchesi and Younger shows that in fact equality holds everywhere in (7.37).

Theorem 7.15.2 (the Lucchesi-Younger theorem) [528] Let D = (V, A) be a directed multigraph which is connected and either D has just one vertex, or it is not strongly connected. Then Ω(D) = τ (D).

Proof: We give a proof due to Lov´asz [521]. The proof is by induction on the number of arcs in A. If A = ∅, then D has precisely one vertex and there are no dicuts. Hence the statement of the theorem is vacuously true.

402 7. Global Connectivity

Now let a ∈ A be an arbitrary arc. Contract a and consider the resulting directed multigraph D/a. Note that the dicuts of D/a are exactly those in D which do not contain the arc a. By induction, τ (D/a) = Ω(D/a). Hence if Ω(D/a) ≤ Ω(D)−1, then we can cover all dicuts in D by τ (D/a)+1 ≤ Ω(D) arcs and the theorem is proved. Hence we may assume that

Ω(D/a) = Ω(D) for every arc a ∈ A.

(7.38)

By Lemma 7.15.1, if we subdivide all arcs in A, then the resulting digraph
has at least Ω(D) + 1 arc-disjoint dicuts (with equality only if Ω(D) = 1).
Hence, starting from D and subdividing arbitrary (not previously subdivided)
arcs, we will get a sequence of directed multigraphs D0 = D, D1, . . . , Dh, where Ω(Di) = Ω(D) for each i ≤ h − 1 and Ω(Dh) = Ω(D) + 1. Let f be the last arc we subdivided in this process and let H = Dh−1. Now H contains Ω(D) + 1 dicuts X1, X2, . . . , XΩ(D)+1 such that only two of them have an arc in common and that arc is f .
Observe that H/f arises from G/f by subdivision. Hence, by the as-
sumption (7.38), Ω(H/f ) = Ω(D) and so H contains Ω(D) arc-disjoint di-
cuts Y1, Y2, . . . , YΩ(D) none of which contains the arc f . This implies that X1, X2, . . . , XΩ(D)+1, Y1, Y2, . . . , YΩ(D) is a collection of 2Ω(D) + 1 dicuts in H such that no arc belongs to more than two of these. Thus the following
lemma will give us a contradiction, implying that (7.38) cannot hold and
hence the theorem follows.

Lemma 7.15.3 If a digraph D contains at most k arc-disjoint dicuts, and C is any collection of dicuts in D such that no arc belongs to more than two dicuts in C, then |C| ≤ 2k.

Proof of Lemma 7.15.3: Call two dicuts (X, V − X), (Y, V − Y ) crossing if X and Y are crossing as sets. The ﬁrst step is to uncross crossing dicuts in the family.
It follows from (7.2) that, if (X, V −X), (Y, V −Y ) are crossing dicuts, then each of (X ∪Y, V −(X ∪Y )), (X ∩Y, V −(X ∩Y )) are dicuts and d(X, Y ) = 0. Furthermore, the dicuts (X ∪ Y, V − (X ∪ Y )) and (X ∩ Y, V − (X ∩ Y )) cover each arc of D the same number of times as the dicuts (X, V − X), (Y, V − Y ) (here we used that d(X, Y ) = 0). Let C = C − {(X, V − X), (Y, V − Y )} + {(X ∪ Y, V − (X ∪ Y )), (X ∩ Y, V − (X ∩ Y ))}. Then C has the same property as C that no arc covers more than two dicuts in C and furthermore we have

|X|2 ≤

|Z |2 ,

(7.39)

(X,V −X)∈C

(Z,V −Z)∈C

because |X ∪ Y |2 + |X ∩ Y |2 > |X|2 + |Y |2 when X, Y cross. Hence, if we
replace crossing dicuts pairwise as we did above, then we will eventually reach a new family C∗ of size |C| such that the dicuts in C∗ are pairwise non-crossing and no arc of D belongs to more than two dicuts in C∗. Hence it suﬃces to prove that C∗ contains at most 2k dicuts.

7.15 Packing Cuts 403
Let C∗ = {Z1, Z2, . . . , ZM } and let Ai = (Zi, V − Zi), i = 1, 2, . . . , M be the corresponding arc sets. Construct an undirected graph G(C∗) = (V, E) as follows: V = {v1, v2, . . . , vM } and there is an edge between vi and vj if and only if Ai ∩ Aj = ∅. Since D contains at most k arc-disjoint dicuts, it follows that G(C∗) has at most k independent vertices. Hence it suﬃces to show that G(C∗) is a bipartite graph since then we get |C| = |C∗| ≤ 2k.
Let v1v2 . . . vsv1 be an arbitrary cycle in G(C∗). Note that the arc sets of the corresponding dicuts A1, . . . , As must be diﬀerent, since if (Zi, V − Zi) = (Zj, V − Zj) for some 1 ≤ i < j ≤ s, then every arc in (Zi, V − Zi) is covered twice (by (Zi, V − Zi) and by (Zj, V − Zj)) and hence the vertices vi, vj each have degree one in G(C∗), contradicting the fact that they are on a cycle. Note also that if two dicuts (X, V − X) and (Y, V − Y ) have X ∪ Y = V , then they are arc-disjoint and hence are not adjacent in G(C∗).
X XY
Y
(a)
Y XY X
(b)
Figure 7.18 Illustration of the deﬁnition of being to the right and left for cuts. In the two situations in part (a) (part (b)) the dicut (X, V − X) is to the left (right) of the dicut (Y, V − Y ). In the right part of (a) we have X ∪ Y = V .
Since Ai ∩ Ai+1 = ∅ for i = 0, 1, . . . , s − 1, where A0 = As, it follows from our remarks above that we have either Zi ⊂ Zi+1 or Zi+1 ⊂ Zi. We prove that the two possibilities occur alternatingly and hence s is even. Suppose not, then without loss of generality we have Z0 ⊂ Z1 ⊂ Z2. Let us say that a dicut Ai is to the left of another dicut Aj if either Zi ⊂ Zj, or Zi ∪ Zj = V (which is equivalent to V − Zi ⊂ Zj) and that Ai is to the right of Aj if Zi ∩ Zj = ∅ (which is equivalent to Zi ⊂ V − Zj), or Zj ⊂ Zi (which is equivalent to V −Zi ⊂ V −Zj). See Figure 7.18. Since C∗ contains no crossing members, each Ai = Aj is either to the right or to the left of Aj. Since A2 is to the right of A1 and A0 = As is to the left of A1, it follows that there is some 2 ≤ j ≤ s − 1 such that Aj is to the right of A1 and Aj+1 is to the left of A1. Suppose ﬁrst that Zj ∩ Z1 = ∅, then we cannot have Zj+1 ⊂ Z1 as Aj+1 and Aj have a common arc. So we must have Z1 ∪ Zj+1 = V , but then any arc a common to Aj and Aj+1 enters Z1, contradicting that d−(Z1) = 0.

404 7. Global Connectivity
Hence we must have Z1 ⊂ Zj. The fact that Aj, Aj+1 have a common arc a (and hence either Zj ⊂ Zj+1 or Zj+1 ⊂ Zj) implies that, by the choice of j, we have Zj+1 ⊂ Z1 ⊂ Zj+1. But now the arc a belongs to three dicuts A1, Aj and Aj+1, a contradiction. This completes the proof of the lemma and, by the remark above, also the proof of the theorem.
Combining (7.37) and Theorem 7.15.2, we obtain:
Corollary 7.15.4 Let D be a non-strong directed multigraph whose underlying graph is connected. Then ρ(D) = τ (D), that is, D can be made strongly connected by contracting τ (D) arcs.
The proof of Theorem 7.15.2 is not constructive but using submodular ﬂows one can ﬁnd a minimum dijoin A ⊆ A of D in polynomial time. See Corollary 8.8.10.
7.16 Application: Small Certiﬁcates for k-(Arc)-Strong Connectivity
We complete the chapter with a topic that is, of practical interest and at the same time illustrates important applications of several of the concepts from the chapter.
Let D = (V, A) be a directed multigraph which is k-(arc)-strong. What is the cost (measured in the number of arcs, or the sum of arc costs if these are present) of a minimum cost spanning subgraph D = (V, A ) of D such that D is k-(arc)-strong? A spanning k-(arc)-strong subgraph D of D is called a certiﬁcate for k-(arc)-strong connectivity of D. Finding an optimal certiﬁcate (that is, one with the smallest cost) for k-(arc)-strong connectivity is a diﬃcult problem, even when k = 1. Namely, if all costs are 1 (that is, we only count the number of arcs), then the optimal D has n arcs if and only if D has a Hamilton cycle. Thus the problem is N P-hard already when k = 1 and we have uniform costs. By the remark above, the Hamilton cycle problem is a special case of the problem of ﬁnding an optimal certiﬁcate for strong connectivity. This makes it interesting to consider classes of digraphs for which we know that the Hamilton cycle problem is polynomially solvable and to see what we can say about the complexity of ﬁnding the optimal certiﬁcate for vertex-strong connectivity. This was done in Section 6.11 for some classes of generalizations of tournaments.
In practical applications, e.g. to speed up algorithms, it is often important to work with a small certiﬁcate for k-(arc)-connectivity. This means that one is interested in ﬁnding polynomial algorithms which ﬁnd a certiﬁcate D for

7.16 Application: Small Certiﬁcates for k-(Arc)-Strong Connectivity 405
k-(arc)-strong connectivity with the property that the cost of D is not more than some constant (larger than 1) times the cost of the optimal certiﬁcate5.
In this section we present some recent results by Cheriyan and Thurimella [151] which show that we can approximate the size of a smallest k-(arc)-strong spanning subgraph better, the higher k is.
7.16.1 Finding Small Certiﬁcates for Strong Connectivity
For k = 1, the 2-approximation algorithm sketched in the proof of Theorem 7.10.1 could be used since D is 1-strong if and only if it is 1-arc-strong. However, one can do better than this. When k = 1 the problem of ﬁnding a small certiﬁcate for strong connectivity is a special case6 of a problem which is also called the problem of ﬁnding the minimum equivalent subdigraph of a directed multigraph. That is, given D, ﬁnd a spanning subgraph D with as few arcs as possible such that D contains an (x, y)-path if and only if D does for every choice of x, y ∈ V (D) (it is clear that D will not contain multiple arcs and hence must be a digraph). This problem, which has many practical applications, has been considered several times in the literature, see e.g. [5, 317, 434, 478, 479, 554, 636, 673]. See also Section 4.3.
Now let D be a strongly connected digraph (recall that we may assume that D has no multiple arcs since multiple arcs will not be present in a minimally strong directed multigraph). Khuller, Raghavachari and Young [478] gave a 1.65-approximation algorithm for the size of a smallest strongly connected subgraph of any strongly connected digraph. The idea in the algorithm from [478] is to ﬁnd a long cycle, contract it and continue recursively. The authors were able to show that this approach can be performed in such a way that one obtains a solution in polynomial time with no more than 1.65 times the size of an optimum solution. This was later improved to about 1.61 using results from [479].
Khuller, Raghavachari and Young also considered the restriction when the digraph in question has no cycle with more than r arcs. Then the problem is known under the name SCCSr [478]. In [479] it is shown that if one only considers digraphs with no cycle longer than 3, then the optimal certiﬁcate can be found in polynomial time. The algorithm is based on the following result.
5 Such an algorithm which is polynomial and ﬁnds a solution (for a minimization problem) whose cost is at most µ times the value of an optimal solution (µ ≥ 1) is called an µ-approximation algorithm for the problem.
6 It is in fact the most important ingredient since once we know the best subgraph inside each strong component, we can contract each strong component to a vertex and consider the problem of ﬁnding a minimum equivalent subdigraph of an acyclic directed multigraph. That problem is solvable in polynomial time by Proposition 4.3.5.

406 7. Global Connectivity
Theorem 7.16.1 [479] The SCCS3 problem reduces in time O(n2) to the problem of ﬁnding a minimum edge-cover7 in a bipartite graph.
This gives an O(n2 + m√n) time algorithm for the SCCS3 problem, since the problem of ﬁnding a minimum edge cover in a bipartite graph is equivalent tlaotttehrepprroobblelemmcoafnﬁbnedsinoglveadminaxtiimmuemO(m√antmch)in(gseienTsuhcehoraemgr3a.p1h1.1[4)9. 7]. The
However, already the SCCS5 problem is N P-hard and the SCCS17 is even MAX SN P-hard, implying that there cannot exist a polynomial time approximation scheme for this problem, unless P = N P [478]. Khuller, Raghavachari and Young posed the following problem concerning the weighted version. Here the goal is to ﬁnd a spanning strong subdigraph of minimum weight.
Problem 7.16.2 [478] Does there exist a µ-approximation algorithm for minimum weight strong connectivity certiﬁcates with µ < 2?
The existence of a polynomial algorithm with approximation guarantee 2 follows from the fact that ﬁnding a minimum cost in-branching (outbranching) with a given root can be done in polynomial time (see Section 9.10). Indeed, if Fr− (Fr+) is a minimum cost in-branching (out-branching) rooted at r, then D = (V, A(Fr−) ∪ A(Fr+)) is strong and clearly has cost at most twice the optimum. In Exercise 7.49 the reader is asked to show that the approximation guarantee of this approach cannot be lower than 2.
Once again we remind the reader that in Section 6.11 we showed that an optimal strong subdigraph of a digraph D can be found in polynomial time in case D belongs to one of several classes of generalizations of tournaments.
7.16.2 Finding k-Strong Certiﬁcates for k > 1
Cheriyan and Thurimella recently gave an approximation algorithm with a very good approximation guarantee by combining some fairly elementary results on subgraphs of (di)graphs with Mader’s powerful result on antidirected trails and k-critical arcs (Theorem 7.10.7). We start with the two subgraph results and then describe the simple algorithm from [151].
Proposition 7.16.3 [151] Let B = (V, E) be a bipartite graph with minimum degree k. Let E ⊂ E be a minimum cardinality subset of E with the property that B = (V, E ) has minimum degree k −1. Then |E | ≤ |E|−|V |/2 and this bound is best possible.
Proposition 7.16.4 There exists a polynomial algorithm A which, given a directed multigraph D = (V, A) with minimum semi-degree δ(D) ≥ r, returns a minimum cardinality subset A ⊆ A such that the directed multigraph D = (V, A ) has δ(D ) ≥ r.
7 An edge-cover of an undirected graph G = (V, E) is a set of edges E ⊂ E such that every v ∈ V is incident with at least one edge from E .

7.16 Application: Small Certiﬁcates for k-(Arc)-Strong Connectivity 407

Proof: This (as well as the more general minimum arc cost version) can be solved using a minimum value (minimum cost) ﬂow algorithm on a suitable network constructed from D (see Exercise 7.47).

Theorem 7.16.5 [151] There exists a polynomial algorithm which, given a

digraph D = (V, A) which is k-strong, returns a spanning k-strong subgraph

D = (V, minimum

A ) of D cardinality

such that |A arc set A∗opt

| ⊆

≤ A

(1 + such

tk1ha)|tAD∗op∗t|=,

where A∗opt (V, A∗opt) is

denotes a k-strong.

Proof: Let B be the following algorithm:

Input: A directed graph D = (V, A) and a number k such that D is k-strong. Output: A small certiﬁcate D˜ = (V, A˜) for k-strong connectivity of D.

1. Use the algorithm A of Proposition 7.16.4 to ﬁnd a minimum cardinality subset A ⊂ A such that the digraph D = (V, A ) has δ(D ) ≥ k − 1;
2. Let A¯ = A − A ; 3. Find a minimal (with respect to inclusion) subset A ⊂ A¯ with the prop-
erty that D˜ = (V, A ∪ A ) is k-strong; 4. Return D˜ .

Clearly D˜ = (V, A ∪ A ) is k-strong, so we can concentrate on the ap-

proximation factor and the running time.

To see that the approximation factor is as claimed, let D∗ = (V, A∗opt) denote an arbitrary optimal certiﬁcate for k-strong connectivity of D. Clearly

we have

|A | ≤ |A∗opt|.

(7.40)

To bound the size of A we use Theorem 7.10.7. We claim that D = (V, A ) has no anti-directed trail. Suppose it does and let T be an antidirected trail in D . Note that T is a subdigraph of D˜ . Hence we can apply Theorem 7.10.7 to D˜ . Now it follows from the fact that every arc of A is k-critical in D˜ that only (b) or (c) can hold in Theorem 7.10.7 when applied to D˜ . However by the choice of A , neither (b), nor (c) can hold in D˜ since every source (sink) of T has out-degree (in-degree) at least k + 1 in D. Thus T cannot exist and D has no anti-directed trail. From this it follows, by considering the bipartite representation BG(D ), that

|A | ≤ 2|V | − 1.

(7.41)

We leave the proof of this as Exercise 7.48 (recall the deﬁnition of BG(D) in

Chapter 1).

Combining (7.40) and (7.41), it is easy to see that the approximation

guarantee of B is at least as good 7.16.3 we can do a little better. Let

as (1 + A∗∗ be

2 k

).

However,

using

Proposition

a minimum cardinality subset of

A∗opt so that the spanning subgraph D∗∗ = (V, A∗∗) has δ(D∗∗) ≥ k − 1.

408 7. Global Connectivity

Consider BG(D∗) and the edge sets E∗, E∗∗ corresponding to A∗opt and A∗∗. By Proposition 7.16.3

|A∗∗| = |E∗∗| ≤ |E∗| − |V (BG(D∗))|/2 = |A∗opt| − |V |.

(7.42)

By the choice of A we have |A | ≤ |A∗∗| and combining (7.41) and (7.42) gives

|A˜| |A∗opt|

≤

|A∗opt| − |V | + (2|V |A∗opt|

|−

1)

≤

1

+

1 k

,

(7.43)

since clearly |A∗opt| ≥ k|V |. It remains to prove that B can actually be performed in polynomial time.
Step 1 is performed by the polynomial algorithm A whose existence is proved in Exercise 7.47. Step 3 can be implemented by starting from D and deleting arcs of A¯ one by one until every remaining arc from A¯ is k-critical. Clearly this part can be done in polynomial time, using any algorithm for checking whether a digraph is k-strong.
The authors claimed in [151] that the running time of the algorithm can be made O(k|A|2).

7.16.3 Certiﬁcates for k-Arc-Strong Connectivity
In Theorem 7.10.1 we saw that for k-arc-strong connectivity one can approximate the size (measured in number of arcs) of an optimal certiﬁcate for k-arc-strong connectivity within a factor of 2, using arc-disjoint in- and out-branchings. In Chapter 9 we shall see that one can even handle the case when there are costs on the arcs and still get a 2-approximation algorithm. Since D is 1-arc-strong if and only if it is strong, we covered the case k = 1 in the discussion above for vertex-strong connectivity.
Cheriyan and Thurimella showed that also for arc-strong connectivity one can approximate the size of an optimal certiﬁcate better the higher the arc-strong connectivity is.
Theorem 7.16.6 [151] There exists a polynomial algorithm which given a digraph D = (V, A) which is k-arc-strong returns a√spanning k-arc-strong subgraph D = (V, A ) of D such that |A | ≤ (1 + 4/ k)|Aopt|, where |Aopt| denotes the number of arcs in an optimal certiﬁcate for k-arc-strong connectivity. The running time of the algorithm is O(k3|V |3 + |A|1.5(log (|V |)2).

7.17 Exercises 409

Proof: The idea is similar to the vertex-strong connectivity case so we will

only sketch the proof here. Let D = (V, A) be k-arc-strong. First ﬁnd, using

the algorithm A, a minimum cardinality subset U ⊂ A such that H = (V, U )

has δ(H) ≥ k. Then ﬁnd an inclusion-wise minimal subset U ⊂ (A − U ) such that H˜ = (V, U ∪ U ) is k-arc-strong. As in the proof of Theorem 7.16.5, the

key step is to estimate the size of U , since |U | is clearly at most the size of

an optimal solution.

To estimate |U | we use the following deﬁnition. An arc uv of a k-arc-

strong digraph W is special if W − uv is not k-arc-strong and furthermore

Hd˜+W.

(u), d−W (v) ≥ k + 1. Clearly each arc in the set Hence we can apply the following estimate.

U

is special in the digraph

Theorem 7.16.7 [151] Let k ≥ 1 be an integer and let√W = (V, A) be karc-strong. The number of special arcs in W is at most 4 k|V |.

Combining this with the fact that |A | is no more than the size of an optimal certiﬁcate the theorem follows. For the complexity bound we refer to [151].
See also [152] for an expanded version of [151].

7.17 Exercises
7.1. Submodularity of |N −| and |N +|. Prove Proposition 7.1.3.
7.2. (−) Prove Corollary 7.2.3.
7.3. Complexity of converting between a directed multigraph and its network representation. Show that given a directed multigraph D one can construct its network representation N (D) in polynomial time. Show that converting in the other direction cannot always be done in a time which is polynomial in the size of the network representation. Hint: recall that we assume that capacities are represented as binary numbers.
7.4. Prove that, if D = (V, A) is an eulerian directed multigraph and X is a proper non-empty subset of V , then d+(X) = d−(X).
7.5. Show that every k-regular tournament is k-arc-strong.
7.6. (−) Prove that every eulerian directed multigraph is strong.
7.7. Let D be a digraph, let s be a vertex of D and let k be a natural number. Suppose that min{λ(s, v), λ(v, s)} ≥ k for every vertex v ∈ V (D) − s. Prove that λ(D) ≥ k.
7.8. (−) Vertex-strong connectivity of planar digraphs. In a planar undirected graph G on n vertices and m edges we always have m ≤ 3n − 6 by Euler’s formula (see Corollary 4.14.3). Conclude that no planar digraph is 6-strong.
7.9. (−) Let D be a k-strong digraph and let a be an arbitrary arc of D. Prove that D − a is (k − 1)-strong.

410 7. Global Connectivity

7.10. (−) Let D be a k-strong digraph and let a be an arbitrary arc of D. Let D be obtained from D by reversing a. Prove that D is (k − 1)-strong.

7.11. Connectivity of powers of cycles. Recall that the kth power of a cycle
C = v1 . . . vnv1 is the digraph with vertex set {v1, . . . , vn} and arc set {vivj : i + 1 ≤ j ≤ i + k, i = 1, 2, . . . , n}. Prove that the kth power of a cycle on
n ≥ k + 1 vertices is k-strong.

7.12. (−) For every natural number k describe a k-strong digraph D for which reversing any arc of D results in a digraph with vertex-strong connectivity less than k.

7.13. (+) Finding k arc-disjoint (x, y)-paths of minimum total weight. Let D = (V, A, w) be a directed multigraph with weights on the arcs, let x, y ∈ V be distinct vertices and let k be a natural number. Describe a polynomial algorithm which either ﬁnds a minimum weight collection of k arc-disjoint (x, y)-paths, or demonstrates that D does not have k arc-disjoint (x, y)-paths. Hint: use ﬂows. Argue that you can ﬁnd k internally disjoint (x, y)-paths of minimum total weight using a similar approach.

7.14. (+) Minimum augmentations to ensure k arc-disjoint (s, t)-paths. Let D = (V, A, w) be a directed multigraph, let s, t be special vertices of D and let k be a natural number such that D does not have k arc-disjoint (s, t)-paths. Prove that it is possible to augment D optimally so that the new directed multigraph has k arc-disjoint (s, t)-paths and all new arcs go from s to t. Now consider the same problem when there are weights on the arcs. Devise an algorithm to ﬁnd the cheapest set of new arcs whose addition to D gives a directed multigraph with k arc-disjoint (s, t)-paths. Hint: use min cost ﬂows.

7.15. (+) Minimum number of new edges to add so that the new digraph has k arc-disjoint out-branchings at s. Show how to reduce this problem to the general k-arc-connectivity augmentation. Try to derive a min-max formula for the optimal number of new arcs.

7.16. Equivalence of Menger’s theorem and the Max Flow Min Cut theorem. Prove that Menger’s theorem implies the Max-ﬂow Min-cut theorem for network in which all capacities are integer valued.

7.17. Reﬁning Menger’s theorem. Let D be a k-strong directed multigraph.
Let x1, x2, . . . , xr, y1, y2, . . . , ys be distinct vertices of D and let a1, a2, . . . , ar, b1, b2, . . . , bs be natural numbers such that

rs

ai = bj = k.

i=1

j=1

Prove that D contains k internally disjoint paths P1, P2, . . . , Pk with the property that precisely ai (bj) of these start at xi (end at yj). Argue that the analogous statement concerning arc-disjoint paths is true if we replace
vertex-strong connectivity by arc-strong connectivity.

7.18. Reﬁning Menger’s theorem for undirected graphs. Prove the analogous statement of Exercise 7.17 for undirected graphs.

7.19. Menger’s theorem for sets of vertices. Let D be k-strong and let X, Y be distinct subsets of V (D). Prove that D contains k internally disjoint paths

7.17 Exercises 411

which start in X and end in Y and have only their starting (ending) vertex in X (Y ).

7.20. Augmenting acyclic tournaments to k-strong connectivity. Prove

that an acyclic tournament on n ≥ k + 1 vertices can be made k-strong by

adding

k(k+1) 2

arcs.

Hint:

use

Exercise

7.11.

7.21. (+) Ear decomposition in linear time. Supply the algorithmic details missing in the proof of Corollary 7.2.5. In particular, describe how to store the arcs in such a way that the ear decomposition can be found in linear time.

7.22. (+) Strong orientations of mixed multigraphs in linear time. Give an O(n + m) algorithm for ﬁnding a strong orientation of a mixed multigraph or a proof that no such orientation exists (Chung, Garey and Tarjan [157]).

7.23. (+) Cycle subdigraphs containing speciﬁed arcs. Prove the following.
Suppose D is k-strong (respectively, k-arc-strong) and e1, e2, . . . , ek are arcs of D such that no two arcs have a common head or tail. Then D has a cycle
subgraph (respectively, a collection of arc-disjoint cycles) F = {C1, . . . , Cr}, 1 ≤ r ≤ k such that each arc ei is an arc of precisely one of the cycles in F . Hint: add two new vertices s, t, connect these appropriately to D and then
apply Menger’s theorem to s and t.

7.24. Prove the following: Every s-regular round digraph has strong vertex- and arc-connectivity equal to s (Ayoub and Frisch [34]).

7.25. Connectivity of complete biorientations of undirected graphs. Let G be a k-connected undirected graph for some k ≥ 1 and let D be the complete biorientation of G. Prove that for every arc xy of D the digraph D − xy is k-strong if and only if D − {xy, yx} is k-strong.

7.26. Obtaining new k-strong digraphs by adding vertices. Let D be a kstrong digraph, let x be a new vertex and let D be obtained from D and x by adding k arcs from x to distinct vertices of D and k arcs from distinct vertices of D to x. Prove that D is k-strong.

7.27. Obtaining new k-arc-strong directed multigraphs by adding new vertices. Let D be a k-arc-strong directed multigraph, let x be a new vertex and let D be obtained from D and x by adding k arcs from x to arbitrary vertices of D and k arcs from arbitrary vertices of D to x. Prove that D is k-arc-strong.

7.28. (+) Greedy deletion of arcs in Frank’s algorithm. Show how to imple-
ment Steps 2 and 3 of Frank’s algorithm in Section 7.6 by using ﬂows to ﬁnd
the maximum number of arcs that can be deleted for each vertex vi (Frank [258]). Hint: let t be a vertex of V − vi, identify s and t to one vertex t and then calculate λ(vi, t ) in the resulting directed multigraph. Do this for all t ∈ V −vi and let ρ be the smallest of the numbers calculated. Using Menger’s theorem, show that we may delete precisely min{µ(vi, s), ρ − k} arcs from vi to s without violating (7.9).

7.29. Perform Frank’s algorithm on the digraph in Figure 7.19 when the goal is to obtain a 2-arc-strong directed multigraph.

412 7. Global Connectivity

Figure 7.19 A directed graph H.

7.30. (+) Finding an admissible split. Show that Step 5 of Frank’s algorithm in Section 7.6 can be implemented using ﬂows. That is, show how to decide if a given splitting (us, sv) is admissible, that is, it preserves k-arc-strong connectivity in V (Frank [258]). Hint: we need to decide if there is a set U ⊂ V such that u, v ∈ U and d+(U ) = k or d−(U ) = k. This can be done using ﬂows in a way similar to that outlined in the hint above.

↔↔

↔

7.31. (+) Let D = Cn[Kk, I1, Kk, . . . , Kk, I1], where I1 denotes the digraph, that

is, just an isolated vertex and n is an even number. Prove that γk(D) = k.

Try to determine ak(D).

7.32. Let H be the digraph in Figure 7.19. Determine a2(H) and a set of a2(H) arcs whose addition to H results in a 2-strong digraph. Use one-way pairs to
verify optimality.

7.33.

Let D be a digraph with κ(D)

Prove

that

ak+1(D)

=

γ

∗ k+1

(D).

=

k

and

suppose

that

γ

∗ k+1

(D)

=

2k + 1.

7.34. Let D be the digraph illustrated in Figure 7.9. Prove that r2(D) ≥ 2.

7.35. Generalize the example in Figure 7.9 to obtain a set of digraphs D = {D1, D2, . . . , } such that rk(Dk) > ak(Dk), k = 1, 2, . . ..

7.36. Vertices with high in- and out-degree in semicomplete digraphs. Prove that every semicomplete digraph on at least 4k − 1 vertices has a vertex x with d+(x), d−(x) ≥ k. Show that this is the best possible.

7.37. Minimal k-out-critical sets are strongly connected. Prove that, if D is a directed multigraph and X is a minimal k-out-critical set, then the directed multigraph D X is strongly connected.

7.38. Removing a minimal separating set from a locally semicomplete digraph. Prove Lemma 7.13.4.

7.39. Deriving Theorem 7.6.3 from Theorem 7.8.1. Show that Theorem 7.6.3 follows from Theorem 7.8.1. Hint: use (7.22) and the two ways of being (S, T )independent to derive Theorem 7.6.3.

7.40. Let T be the tournament on 7 vertices shown in Figure 7.20. Show that r2(T ) = 1 and that r2(T − v) = 3.
7.41. Derive Corollary 7.11.4 from Theorem 7.11.2.

7.42. Semicomplete digraphs with a k-critical 2-cycle. Prove that the semicomplete digraph D in Figure 7.17 is k-strong, but that neither D − xy nor D − yx is k-strong.

7.43. Constructing k-(strongly)-connected k-regular (di)graphs. Prove that the rth power of an undirected cycle is (2r)-connected. Prove that, if n is even and G is obtained from an even cycle v1v2 . . . v2kv1 by taking the rth power

7.17 Exercises 413 v

XY
Figure 7.20 A strong tournament T on 7 vertices. The fat arcs indicate that all arcs between the sets indicated have the directions shown.

and then adding longest diagonals (v1vk+1, v2vk+2 etc), then G is (2r + 1)connected. These graphs are due to Harary [399], see also the book [717, page
202-205] by Thulasiraman and Swamy.

7.44. Bi-submodularity of the function h(X, Y ) on one-way pairs. Let D = (V, A) be a digraph. Recall that a pair (X, Y ), where X, Y ⊂ V , is a one-way pair if there are no edges from X to Y and that h(X, Y ) is deﬁned by h(X, Y ) := |V −(X∪Y )|. Prove that the function h(X, Y ) is bi-submodular, i.e. for every choice of one-way pairs (X, Y ), (X , Y ) the following holds:

h(X, Y ) + h(X , Y ) ≥ h(X ∪ X , Y ∩ Y ) + h(X ∩ X , Y ∪ Y ).

Hint: consider the contribution of a vertex v ∈ V to each side of the inequality.

7.45. Let D be a digraph that is k-strong but not (k + 1)-strong. Call a one-way pair (X, Y ) critical if h(X, Y )=k. By Lemma 7.7.2 the family

F = {(X, Y ) : (X, Y ) is a critical one-way pair}

is non-empty. Prove that F is a crossing family of pairs of sets, i.e. if (X, Y ), (X , Y ) ∈ F satisfy X ∩ X = ∅ and Y ∩ Y = ∅, then (X ∪ X , Y ∩ Y ), (X ∩ X , Y ∪ Y ) ∈ F . Hint: use Exercise 7.44.

7.46. Large 3-strong tournaments with every vertex critical. Prove that every tournament in the class T from Figure 7.13 is 3-strong and that every vertex diﬀerent from x, y is critical.

7.47. Finding subgraphs with speciﬁed bounds on degrees. Describe a poly-

nomial algorithm which takes as input a digraph D = (V, A) on n vertices

and non-negative integers a1, a2, . . . , an, b1, b2, . . . , bn such that d+D(vi) ≥ ai

and d−D(vi) ≥ bi for i = 1, 2, . . . , n and returns a minimum cardinality subset

A of A such that the digraph D = (V, A ) satisﬁes that d+D (vi) ≥ ai and

dth−Dat(vuis)e≥d

bi in

for the

i = 1, proof

2, . . . , n. Hint: use ﬂows of Theorem 3.11.5.

and

use

a

similar

network

to

7.48. Prove that if a digraph D = (V, A) contains no anti-directed trail, then |A| ≤ 2|V | − 1. Hint: consider the bipartite representation BG(D) of D and show that this has no cycle.

414 7. Global Connectivity
7.49. (+) Show that for every p with 1 < p < 2 there exists a weighted digraph D = D(p) for which the weight of D = (V, A(Fr−) ∪ A(Fr+)), where Fr− (Fr+) is a minimum cost in-branching (out-branching) rooted at r in D is at least p times the weight of a minimum cost strong spanning subdigraph of D.
7.50. (−) Let D be a k-arc-strong semicomplete digraph on at least 2k +2 vertices. Prove that there exists an arc a of D such that D − a is k-arc-strong. Hint: prove that D cannot be minimally k-arc-strong.
7.51. (−) Describe a polynomial algorithm which given a directed multigraph D decides whether λ(D) = δ0(D).

8. Orientations of Graphs
The purpose of this chapter is to discuss various aspects of orientations of (multi)graphs. There are many ways of looking at such questions. We can ask which graphs can be oriented as a digraph of a certain type (e.g. a locally semicomplete digraph). We can try to obtain orientations containing no directed cycles of even length, or no long paths. We can try to relate certain parameters of a graph to the family of all orientations of this graph (e.g. what does high chromatic number imply for orientations of a graph). We can also look for conditions which guarantee orientations with high arc-strong connectivity or high in-degree at every vertex, etc. There are hundreds of papers dealing with orientations of graphs in one way or another and we can only cover some of these topics. Hence we have chosen some of those mentioned above. Finally we also study brieﬂy the theory of submodular ﬂows which generalizes standard ﬂows in networks and turns out to be a very useful tool (not only theoretically, but also algorithmically) for certain types of connectivity questions as well as orientation problems. We illustrate this by applying the submodular ﬂow techniques to questions about orientations of mixed graphs as well as to give short proofs of the Lucchesi-Younger Theorem and Nash-Williams’ orientation theorem. We recall that n and m usually stand for the number of vertices and arcs (edges) of the (di)graph in question.
8.1 Underlying Graphs of Various Classes of Digraphs
In this section we discuss the underlying undirected graphs of several generalizations of tournaments. As can be seen, these include classes of undirected graphs that are very interesting in practical applications such as comparability graphs, proper circular arc graphs and chordal graphs. For much more information about these classes and their relations to each other, the reader is encouraged to consult the books [133] by Brandst¨adt, [331] by Golumbic, and [613] by Prisner. Here we will just deﬁne those classes that we need. A graph G is a circular arc graph if there exists a family of circular arcs indexed by the vertices of the graph such that two vertices are adjacent if and only if the two corresponding arcs intersect. This family of circular arcs form a representation of G. A proper circular arc graph is a circular arc graph which has a representation by circular arcs, none of which is properly

416 8. Orientations of Graphs
contained in another. A graph G is chordal if every cycle of length at least 4 has a chord, that is, G has no induced cycle of length four or more. Finally, G is a comparability graph if it has a transitive orientation (that is, there exists a transitive oriented graph T such that U G(T ) is isomorphic to G).
We will always use ∆ to denote the maximum degree of the undirected graph in question.
8.1.1 Underlying Graphs of Transitive and Quasi-Transitive Digraphs
Since every transitive digraph is also quasi-transitive, every comparability graph has a quasi-transitive orientation. The next theorem by Ghouila-Houri shows that the other direction also holds.
Theorem 8.1.1 [316] A graph G has a quasi-transitive orientation if and only if it has a transitive orientation.
Proof: To illustrate the usefulness of the decomposition theorem for quasitransitive digraphs (Theorem 4.8.5), we give a proof which is quite diﬀerent from the one in [316]. We prove the non-trivial part of the statement by induction on the number of vertices. The claim is easily veriﬁed when n ≤ 3 so we proceed to the induction step, assuming n ≥ 4. Suppose D is a quasitransitive orientation of G and that D is not transitive. If D is not strongly connected then it follows from Theorem 4.8.5 that we can decompose D as D = T [W1, W2, . . . , Wt], t = |V (T )| ≥ 2, where T is transitive and each Wi is a strong quasi-transitive digraph. As t ≥ 2 it follows by induction that we can reorient each U G(Wi) as a transitive digraph Ti, i = 1, 2, . . . , t. This gives a transitive orientation D = T [T1, T2, . . . , Tt] of G.
Suppose now that D is strong. By Theorem 4.8.5, D can be decomposed as D = S[W1, W2, . . . , Ws], s = |V (S)| ≥ 2, where S is a strong semicomplete digraph and each Wi is either a single vertex or a non-strong quasi-transitive digraph. It follows by induction (as above) that we can orient each U G(Wi) as a transitive digraph Ti , i = 1, 2, . . . , s. Let T Ts be the transitive tournament on s vertices. Then D = T Ts[T1, T2, . . . , Ts] is a transitive orientation of G.
The following construction is due to Ghouila-Houri [316]. Let G = (V, E) be an undirected graph. Construct a graph Gqtd from G as follows: V (Gqtd) =
uv∈E(G){xuv, xvu} and there is an edge from xuv to xwz precisely if w = v and uz ∈ E, or u = z and vw ∈ E. In particular there is an edge xuvxvu for each uv ∈ E. See Figure 8.1 for an illustration of this construction. Note that, if xuvxvw is an edge of Gqtd, then so is xwvxvu. Every edge of Gqtd corresponds to a forbidden pair of oriented edges of G. The interest in this construction lies in the following very useful fact.
Theorem 8.1.2 [316] A graph G is a comparability graph (and hence has a transitive orientation) if and only if Gqtd is bipartite.

8.1 Underlying Graphs of Various Classes of Digraphs 417

b ac

ad de df

ab

ba

d bd cd ac ca

f G

e

db dc bc
ef ed f d
da Gqtd

cb fe

a
b cf
de

cb ba bf f e ed dc

bc

ab f b ef de

cd

H Hqtd
Figure 8.1 An illustration of the construction of Gqtd for two graphs. Due to space considerations we have dropped the x’s in the name of the vertices of Gqtd, Hqtd. The graph G is a comparability graph. The graph H is not a comparability graph. Note that bf, cb, dc, ed, f e, bf is a 5-cycle in Hqtd.

Proof: Suppose G = (V, E) is a comparability graph and let T = (V, A) be
a transitive orientation of G. In Gqtd the vertices X1 corresponding to the arcs of T (that particular orientation of the edge uv for each uv ∈ E) form
an independent set. By symmetry of the deﬁnition of the edges of Gqtd, the remaining vertices X2 of Gqtd also induce an independent set. Hence Gqtd is bipartite with bipartition (X1, X2).
Conversely, suppose that Gqtd is bipartite with bipartition (X, Y ). Because Gqtd contains a perfect matching consisting of edges of the form xuvxvu it follows that |X| = |Y | and X contains precisely one of the vertices xuv, xvu for each uv ∈ E. It follows from the deﬁnition of Gqtd that orienting the

418 8. Orientations of Graphs
edges corresponding to the vertices in X (Y ) results in a quasi-transitive orientation D of G. (If xuv ∈ X, then orient uv from u to v, otherwise orient it from v to u.) By Theorem 8.1.1, G has a transitive orientation.
Corollary 8.1.3 Comparability graphs can be recognized in time O(∆m), where m is the number of edges in the input graph.
Proof: This follows from Theorem 8.1.2 and the fact that the number of edges in Gqtd is O(∆|E|). Note that we can check whether a given undirected graph is bipartite in linear time using BFS (Exercise 8.2).
For various results on recognition of comparability graphs see the papers [330] by Golumbic, [411] by Hell and Huang, [574] by Morvan and Viennot and [577] by Muller and Spinrad.
Consider the comparability graph G in Figure 8.1 and suppose that our goal is to obtain a quasi-transitive orientation of G. If we choose the orientation a→d, then this forces the edge between d and e to be oriented as e→d. This in turn forces the orientations c→d and b→d and each of these force f →d. Similarly it can be seen that the ﬁve edges ad, bd, cd, de, df force each other. It is easy to see that the corresponding ten vertices in Gqtd form one connected component of Gqtd.
It is not diﬃcult to see that this observation holds for arbitrary comparability graphs, i.e. if xuv and xwz are in the same connected component of Gqtd and wz = vu, then once we decide on an orientation for the edge uv in G, that orientation forces one on the edge wz. An implication class for G = (V, E) is a maximal set of edges E with the property that in every orientation of G as a quasi-transitive digraph the choice of an orientation of one edge e ∈ E forces the orientation of all other edges in E .
By our remark above the implication classes for G coincide with the connected components of Gqtd. More precisely the connected component C of Gqtd corresponds to the implication class E = {uv ∈ E : xuv ∈ V (C)}. It is not diﬃcult to see that the implication classes form a partition of E. Given Gqtd we can obtain the implication classes of G just by ﬁnding the connected components of Gqtd. Hence we can ﬁnd the implication classes in time O(∆m) (recall that Gqtd has O(∆m) edges).
Let G be a comparability graph and suppose we want to ﬁnd a transitive orientation of G. We can obtain a quasi-transitive orientation just by picking an arbitrary edge from each implication class, choosing an orientation for this edge and then orient the remaining edges in that class the way they are forced to be oriented. The problem is that this orientation will in general not be transitive. Consider for example the graph G in Figure 8.1. Since each of the edges ab, bc and ac form an implication class of size one, there is nothing that prevents us from orienting these three edges as the 3-cycle a→b→c→a.
We now describe a simple and very useful technique, due to Hell and Huang [411], for obtaining a transitive orientation of a given comparability

8.1 Underlying Graphs of Various Classes of Digraphs 419
graph G. Let 1, 2, . . . , n be a ﬁxed labelling of the vertices of G. We say that a vertex xij of Gqtd is lexicographically smaller than a vertex xrs if either i < r or i = r and j < s.
The lexicographic 2-colouring of Gqtd is the unique 2-colouring (on colours A, B) which is obtained as follows. Mark all vertices of Gqtd noncoloured. Next, as long as there are uncoloured vertices, choose the lexicographically smallest vertex xij which is not coloured yet and colour it A. Colour all other vertices in the same connected component as they are forced (that is, by A if the distance from xij is even and by B otherwise). When all vertices of Gqtd are coloured the process stops.
The usefulness of lexicographic 2-colourings comes from the following result (see also Theorem 8.1.9).
Theorem 8.1.4 [411] Let G be a comparability graph with vertices 1, 2, . . . , n and let f : V (Gqtd)→{A, B} be the lexicographic 2-colouring of V (Gqtd). Deﬁne an orientation D of G such that an edge ij is oriented as i→j precisely when xij receives colour A by the colouring f . Then D is a transitive orientation of G.
Proof: Exercise 8.4.
Note that, if we apply the lexicographic 2-colouring procedure to a noncomparability graph, then this will be discovered after Gqtd has been formed when we try to 2-colour a non-bipartite connected component H of Gqtd. The algorithm will discover that H is not bipartite and hence G does not have any orientation as a quasi-transitive digraph. Thus we have obtained another proof of Theorem 8.1.1 (the lexicographic 2-colouring algorithm either ﬁnds a transitive orientation of G, or concludes that G has no quasi-transitive orientation).
The whole algorithm (including the construction of Gqtd) can be performed in time O(∆m), where m is the number of edges of G, since we can ﬁnd the connected components of Gqtd using BFS.
8.1.2 Underlying Graphs of Locally Semicomplete Digraphs
For a given proper circular-arc graph G with a prescribed circular-arc representation we get a natural order on the vertices of G by ﬁxing a point on the circle and labeling the vertices v1, v2, . . . , vn according to the clockwise ordering of the right endpoints of their intervals (circular arcs) on the circle with respect to this point. Since every proper circular-arc graph has a representation in which no two arcs cover the whole circle [331], we may assume that we are working with such a representation. Now it is not diﬃcult to see that the following process leads to a round local tournament orientation of G (see Chapter 4 for the deﬁnition of a round local tournament1): orient
1 Hell and Huang use the name local transitive tournament instead of round local tournament [411].

420 8. Orientations of Graphs
the edge between vi and vj from vi to vj just if the left endpoint of the jth interval is contained in the ith interval. Thus we have the following result due to Skrien (see also [44, 410, 436]):
Proposition 8.1.5 [675] Every proper circular-arc graph has an orientation as a round local tournament.
In fact, Hell and Huang showed that the other direction holds as well.
Theorem 8.1.6 [411] A connected graph is a proper circular arc graph if and only if it is orientable as a round local tournament.
Proof: We proved one direction above. To prove the other direction assume that D is a round local tournament and that v1, v2, . . . , vn is a round enumeration of V (D). If no such labelling is given, then we can ﬁnd one in time O(n + m) (Exercise 8.6). Now represent U G(D) by circular arcs as follows. Let be a ﬁxed number such that 0 < < 1. Make an n-scale-clock on a cycle and associate with the vertex vi the circular arc from i to i + d+D(i) + in the clockwise order for i = 1, 2, . . . , n (indices modulo n). It is easy to check that this gives a proper circular arc representation of U G(D). Note that here we use the fact that the out-neighbours of every vertex of D induce a transitive tournament (see Chapter 4) to see that no arc is properly contained in any other arc.
By Theorem 8.1.6, the class of underlying graphs of locally semicomplete digraphs contains the class of proper circular arc graphs. The next result, due to Skrien [675] (see also [410, 436]) says that there are no other graphs that can be oriented as locally semicomplete digraphs.
Theorem 8.1.7 [675] The underlying graphs of locally semicomplete digraphs are precisely the proper circular arc graphs.
Bang-Jensen, Hell and Huang [410] showed that, just as in the case of comparability graphs, there is a useful auxiliary graph Gltd related to orientations as a local tournament digraph: Let G = (V, E) be given and deﬁne Gltd as follows: V (Gltd) = uv∈E(G){xuv, xvu} and there is an edge from xuv to xwz precisely if v = z and uw ∈ E, or u = w and vz ∈ E. Furthermore, the edge xuvxvu is in E(Gltd) for each uv ∈ E. The proof of the following result is left as Exercise 8.7.
Theorem 8.1.8 [410] The graph G has an orientation as a local tournament digraph if and only if the graph Gltd is bipartite.
Suppose G is a proper circular arc graph. Then it follows from Theorem 8.1.7 and Theorem 8.1.8 that Gltd is bipartite. Again each connected component of Gltd corresponds to an implication class E of edges of G. Hence we can ﬁnd a local tournament orientation of G by ﬁxing the orientation of one

8.1 Underlying Graphs of Various Classes of Digraphs 421
arc from each implication class arbitrarily and then giving all remaining arcs the forced orientation.
If our goal is to ﬁnd a representation of G as a proper circular arc graph, then we are not interested in just any local tournament orientation of G, but we need an orientation as a round local tournament (compare with Theorem 8.1.6). Again we can use the lexicographic method which was deﬁned in Section 8.1.1 for this. Since Gltd is bipartite, we can apply the lexicographic 2-colouring procedure which was deﬁned in Section 8.1.1. It follows from the next theorem and the proof of Theorem 8.1.6 that the lexicographic method is also of use in recognition of proper circular arc graphs.
Theorem 8.1.9 [411] Let G be a proper circular arc graph and let f : V (Gltd)→{A, B} be the lexicographic 2-colouring of V (Gltd). Deﬁne an orientation D of G such that an edge ij is oriented as i→j precisely when xij receives colour A by the colouring f . Then D is a round local tournament orientation of G.
This shows that using the lexicographic method one can obtain an O(∆m) algorithm for recognizing and representing proper circular arc graphs.
In fact an even faster and optimal algorithm for recognizing proper circular arc graphs has been found by Deng, Hell and Huang [190]. This algorithm also uses the fact that a graph is a proper circular arc graph if and only if it has an orientation as a round local tournament.
Theorem 8.1.10 [190] There is an O(n + m) algorithm to ﬁnd a local tournament orientation of a graph G or to report that G does not admit such an orientation. Moreover, if a local tournament orientation exists, the algorithm also identiﬁes all balanced arcs.
We will deﬁne the notion of a balanced arc in the next subsection.
8.1.3 Local Tournament Orientations of Proper Circular Arc Graphs
In this subsection we describe a deep result by Huang [435, 436] which gives a complete characterization of all the possible local tournament orientations of a given proper circular arc graph. In order to state Theorem 8.1.12 below we need several deﬁnitions.
Let G = (V, E) be an undirected graph. An edge xy of G is balanced if every vertex z ∈ V − {x, y} is adjacent to both or none of x and y. An edge is unbalanced if it is not balanced. If all edges of G are unbalanced, then G is reduced and otherwise G is reducible. It follows from this deﬁnition that a graph which is not reduced can be decomposed as described in the next lemma. See Figure 8.2 for an illustration.

422 8. Orientations of Graphs

b a

c

ab cf

fd
e GG

de H

Figure 8.2 A reduced graph G and a reducible graph G . The graph G can be reduced to the graph H by identifying the pairs {a, b}, {c, f } and {d, e}.

Lemma 8.1.11 If G is not a reduced graph, i.e. it has a balanced edge, then there exist a reduced subgraph H of G and complete subgraphs Ka1 , Ka2 , . . . , Kah of G such that G = H[Ka1 , Ka2 , . . . , Kah ], h = |V (H)| 2. Furthermore we can ﬁnd this (unique) decomposition in time O(n3).
Proof: We leave the easy proof to the reader.
Actually such a decomposition can be found even faster in O(n2) time, see the paper [217] by Ehrenfeucht, Gabow, McConnell, and Sullivan.
Let G = (V, E) be a proper circular arc graph. As we mentioned in the last subsection one can partition E into disjoint non-empty subsets E1, . . . , Er with the property that, if we ﬁx the orientation of one edge in each Ei, then there is precisely one way to orient all the remaining edges in E so that the resulting digraph is a local tournament digraph. In other words, the orientation of one edge in Ei implies the orientation of all other edges in Ei. As in the last section we call the sets E1, . . . , Er the implication classes of G (see Theorem 8.1.12 and Theorem 8.1.13 below).
Theorem 8.1.12 [436, Huang] Let G be a connected proper circular arc graph and let C1, . . . , Ck be the connected components of G. Then one of the following two statements holds.
(a) G is bipartite, the set of all unbalanced edges of G with both ends in a ﬁxed Ci form an implication class and the set of all unbalanced edges of G between two distinct Ci and Cj form an implication class (see Figure 8.3).
(b) G is not bipartite, k = 1, and all unbalanced edges of G form one implication class.
Observe that an edge forms an implication class by itself if and only if it is balanced. Hence Theorem 8.1.12 can be reformulated as follows.
2 Here the composition H[G1, G2, . . . , G|V (H)|] is deﬁned analogously to the composition of digraphs in Section 1.3.

8.1 Underlying Graphs of Various Classes of Digraphs 423
Ai Aj Ap
Bi Bj Bp
Ci Cj Cp
Figure 8.3 Implication classes for orientations of a graph G as a local tournament digraph.The sets Ci, Cj, Cp denote distinct connected components of G. For each component a bipartition Ar, Br is shown. The edges shown inside Ci form one implication class and the edges shown between Cj and Cp form another implication class.
Theorem 8.1.13 (Huang) [436] Let G be a proper circular-arc graph which is reduced (that is, every edge is unbalanced), let G¯ denote the complement graph of G and let C1, . . . , Ck denote the connected components of G¯. (a) If G¯ is not bipartite, then k = 1 and (up to a full reversal) G has only
one orientation as a locally tournament digraph, namely the round orientation. (b) If G¯ is bipartite then every orientation of G as a locally tournament digraph can be obtained from the round locally tournament digraph orientation D of G by repeatedly applying one of the following operations: (I) reverse all arcs in D that go between two diﬀerent Ci’s, (II) reverse all arcs in D that have both ends inside some Ci.
It is also possible to derive a similar result characterizing all possible orientations of G as a locally semicomplete digraph. We refer the reader to [436] for the details.
As an example of the power of Huang’s result (Theorems 8.1.12 and 8.1.13) we state and prove the following corollary which was implicitly stated in [436] (see also Exercise 4.33).
Corollary 8.1.14 If D is a locally tournament digraph such that U G(D) is not bipartite, then D = R[S1, . . . , Sr], where R is a round locally tournament digraph on r vertices and each Si is a strong tournament.
Proof: If U G(D) is reduced, then this follows immediately from Theorem 8.1.13, because according to Theorem 8.1.13, there is only one possible locally tournament digraph orientation of U G(D). So suppose that U G(D) is not reduced. By Lemma 8.1.11, U G(D) = H[Ka1 , . . . , Kah ], h = |V (H)|, where H is a reduced proper circular arc graph, each Kai is a complete graph,

424 8. Orientations of Graphs
and some ai ≥ 2. Because we can obtain an isomorphic copy of H as a subgraph of U G(D) by choosing an arbitrary vertex from each Kai , we conclude, from Theorem 8.1.12, that in D all arcs between two distinct Kai , Kaj have the same direction (note that H is non-bipartite). Thus D = R[S1, . . . , Sr], where (up to reversal of all arcs) R is the unique round locally tournament digraph orientation of H and each Si is the tournament D V (Kai ) . Note that D V (Kai ) may not be a strong tournament, but according to Corollary 4.11.7 we can ﬁnd a round decomposition of D so that this is the case.
8.1.4 Underlying Graphs of Locally In-Semicomplete Digraphs
The structure of the underlying graphs of locally in-tournament digraphs is more complicated than in the case of local tournaments and quasi-transitive digraphs. In [725] Urrutia and Gavril studied locally in-tournament digraphs under another name fraternally oriented graphs. This name, although used in several papers (e.g. [292] by Galeana-S´anchez, [307] by Gavril, [308] by Gavril, Toledano Laredo and de Werra and [309, 725] by Gavril and Urritia), is somewhat misleading, since it may easily be confused with the name fraternally orientable which is used for an undirected graph with an orientation as a fraternally oriented graph.
In [725] an algorithm for recognizing graphs orientable as locally intournament digraphs (as well as ﬁnding a locally in-tournament digraph orientation if one exists) is given. The complexity is O(nm) which is worse than the simple algorithm based on 2-satisﬁability given in Proposition 8.1.15 below.
In the paper [725] Urrutia and Gavril also gave a characterization in terms of forbidden subgraphs of graphs orientable as locally in-tournament digraphs. Unfortunately, the characterization is not in terms of minimal forbidden subgraphs. In fact, the characterization is merely a structural observation of what happens when the algorithm of [725] fails to ﬁnd a locally in-tournament digraph orientation.
In Section 1.10 we mentioned that algorithms for the 2-SAT problem are useful for certain orientation problems. The proposition below gives one example of this.
Proposition 8.1.15 [81] Graphs that are orientable as locally in-tournament digraphs can be recognized in O(∆m) time.
Proof: Let a graph G = (V, E) be given, and let D = (V, A) be an arbitrary orientation of the edges of G, where A = {a1, a2, . . . , am}. If ai is an orientation of an edge yz of G, then the reverse orientation of that edge is denoted by a←i. We now construct an instance of the 2-SAT problem as follows. The set of variables is X = {x1, . . . , xm}. The variables are interpreted as follows. If

8.1 Underlying Graphs of Various Classes of Digraphs 425

txait=ion1,a←tih. eTnhwe eclkaeuespesthcoenosriisetnotaf ttihoonseaip,aoitrhseorfwliisteerwales

take the ( i + j)

opposite orienfor which i, j

correspond to arcs with the same terminal vertex and nonadjacent initial

vertices in D. It is easy to see that G is orientable as a locally in-tournament

digraph if and only if the above-deﬁned instance of 2-SAT is satisﬁable. By

Theorem 1.10.5 the complexity of 2-SAT is O(K) where K is the number of

clauses. Hence, it follows from the way we construct the clauses above that

we can recognize graphs orientable as locally in-tournament digraphs in time

O(∆m).

The construction used in the proof above is illustrated in Figure 8.4. Part (a) shows an undirected graph G; part (b) an arbitrary orientation D of G. The instance of 2-satisﬁability corresponding to this orientation contains one variable for each arc of D and the following clauses:

(x¯ab + x¯cb), (x¯ad + x¯cd), (xcb + xce), (xcd + xce), (x¯ce + x¯fe), (x¯ce + x¯he), (x¯fe + x¯he), (x¯fg + x¯hg), (x¯ce + xeg).
Part (c) shows an orientation of G as an in-tournament digraph corresponding to the truth assignment (xab, xad, xcb, xcd, xce, xdb, xeg, xfe, xfg, xhe, xhg) = (0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0).

bf a ce

g

d (a) h

bf a ce

g

bf a ce g

dh (b)

d (c) h

Figure 8.4 An undirected graph G and two orientations of G.

In Exercise 1.68 a useful correspondence between the 2-SAT problem and the problem of deciding the existence of an independent set of size n/2 in graphs with a perfect matching was indicated. Using this correspondence, it is no surprise that for graphs which are orientable as in-tournament digraph

426 8. Orientations of Graphs
there is a construction similar to the one used in Theorem 8.1.2 for comparability graphs. (In Theorem 8.1.8 we saw a similar one for the underlying graphs of locally semicomplete digraphs.)
Let G = (V, E) be an undirected graph and deﬁne the undirected graph Gitd as follows: V (Gitd) = uv∈E(G){xuv, xvu} and there is an edge from xuv to xwz precisely if w = v and z = u, or v = z and uw ∈ E.
The proof of the following lemma is left to the reader as Exercise 8.1. As mentioned above, it is useful to compare this lemma with Exercise 1.68.
Lemma 8.1.16 A graph G = (V, E) of order n is orientable as a locally in-tournament digraph if and only if the graph Gitd has an independent set of size n.
B1 B2 B3 Figure 8.5 The digraphs B1, B2, B3
Let B be the family of the three digraphs shown in Figure 8.5 and let F be any subset of B other than {B1} or {B2}. Skrien [675] characterized the classes of those graphs which can be oriented without a member of F as an induced subdigraph. These are the classes of complete graphs, comparability graphs, proper circular arc graphs, and nested interval graphs. Since each of the forbidden conﬁgurations contains just two arcs, 2-SAT could be used to solve the recognition problem for each of these four classes, all in time O(∆m).
The intersection graph Γ (F ) of a family F = {Sx : x ∈ V } of sets has vertex set V and two distinct vertices x, y are adjacent whenever Sx ∩ Sy = ∅. A graph G is representable in the graph H if G is isomorphic to the intersection graph of a family of connected subgraphs {Hx : x ∈ V (G)} of H. It seems interesting that three of the four classes above can be deﬁned by representability. In the case of the underlying graphs of locally in-tournament digraphs, we do not know of a similar characterization (see Theorem 8.1.19 for a partial result).
If we consider another kind of representability involving pointed sets, then such a representation does indeed exist. A pointed set is a pair (X, p) consisting of a set X and one element p ∈ X. Maehara [542] deﬁnes the catch digraph Ω(F ) of a family F = {(Sx, px) : x ∈ V } of pointed sets as the digraph with vertex set V and an arc from x to y if py ∈ Sx, for x = y ∈ V . Obviously the underlying graph of Ω({(Sx, px) : x ∈ V }) is a

8.1 Underlying Graphs of Various Classes of Digraphs 427
spanning subgraph of Γ ({Sx : x ∈ V }) for any family of pointed sets. The converse only holds in special cases:
Lemma 8.1.17 [81, 725] If D is a locally in-semicomplete digraph, then Ω({(ND+[x], x) : x ∈ V }) = D and Γ ({ND+[x] : x ∈ V }) = U G(D).
Proof: The ﬁrst statement is obvious. Let now x and y be distinct vertices of D such that ND+[x] ∩ ND+[y] = ∅. Then x → y or y → x or x and y have some common successor z. In the last case again x → y or y → x, since D is locally in-semicomplete. Then U G(D) = Γ ({ND+[x] : x ∈ V }) by the remarks above.
Gavril and Urrutia found the following characterization of locally insemicomplete digraphs in terms of catch digraphs and representability:
Theorem 8.1.18 [725] A digraph D = (V, A) is locally in-semicomplete if and only if it is the catch digraph of a family ({(Sx, px) : x ∈ V }) such that U G(D) equals Γ ({Sx : x ∈ V }).
Proof: Let D be the catch digraph of ({(Sx, px) : x ∈ V }) such that U G(D) is the intersection graph G of ({Sx : x ∈ V }). Choose any predecessors x, z of a vertex y. Then py ∈ Sx ∩ Sz, which implies xz ∈ E(G). But then x → z or z → x in D. The converse follows from Lemma 8.1.17.
An undirected graph is unicyclic if it has precisely one cycle. The next result, due to Prisner, and the corollaries below show that the class of graphs orientable as in-tournament digraphs is quite large.
Theorem 8.1.19 [612] Every graph G that is representable in a unicyclic graph is orientable as a locally in-tournament digraph.
Proof: We give a proof due to Bang-Jensen, Huang and Prisner [81]. Let {Hx : x ∈ V (G)} be a representation of G in a unicyclic graph H with cycle C = z0, z1, . . . , z −1, z0. The numbering is done clockwise around the cycle (the reader should think of this as drawn in the plane). We may assume that H is connected. For vertices x of G whose representative Hx contains all vertices of the cycle C, we deﬁne px := z0. If Hx contains some but not all of the vertices of C, then it contains just a subpath, since Hx is connected. For such vertices x we take px as the ﬁrst vertex of this path in the clockwise orientation. If Hx ∩ C = ∅, then there is a unique vertex of Hx separating the rest of Hx from C and we let px be that vertex.
By Theorem 8.1.18, it suﬃces to show that the catch digraph D of the family {(V (Hx), px) : x ∈ V (G)} is an orientation of G. Let xy be an edge of G, that is, Hx ∩ Hy = ∅. Let z be a vertex of Hx ∩ Hy. If Hx ∩ C and Hy ∩ C are nonempty, then it is easy to see that py ∈ V (Hx ∩ C) or px ∈ V (Hy ∩ C). Thus x → y or y → x in D.
So suppose without loss of generality that Hx ∩ C = ∅. Then there is exactly one path from z to C. The vertex px must lie on this path, and if

428 8. Orientations of Graphs
Hy ∩ C = ∅, then so must the vertex py. We may assume without loss of generality that px lies on the (py, z)-subpath. Now px ∈ V (Hy) and y → x in D. If Hy ∩ C = ∅, then the whole path from z to C must lie inside Hy, whence y → x in D.
Figure 8.6 A locally in-tournament digraph whose underlying graph is not representable in a unicyclic graph
The converse is not true: Figure 8.6 shows a locally in-tournament digraph whose underlying graph is not representable in any unicyclic graph. It can be easily shown that in any graph G representable in an unicyclic graph the following must hold. Any vertex x of an induced cycle of length at least 4 must be adjacent to at least one vertex from any other induced cycle in G − x (Exercise 8.12). But this property is certainly not obeyed by the underlying graph of the digraph of Figure 8.6.
A cactus is a connected graph in which every block3 is a cycle or an edge (see Figure 8.7). The following conjecture was stated implicitly by BangJensen, Huang and Prisner in [81]. Conjecture 8.1.20 [81] Every graph orientable as a locally in-tournament digraph is representable in a cactus. Note that the opposite is not true: no cactus with at least two induced cycles of length ≥ 4 can be oriented as a locally in-tournament digraph. This implies the claim since every graph can be represented in some subdivision of itself. Just subdivide each edge once and take the set representing a vertex v as the star at that vertex in the subdivided graph.
Theorem 8.1.19 has several consequences. We list some of them below.
3 A block of an undirected graph G is a maximal connected subgraph without a cut-vertex.

8.2 Fast Recognition of Locally Semicomplete Digraphs 429
Figure 8.7 A cactus.
Corollary 8.1.21 Every chordal graph and every circular arc graph is orientable as a locally in-tournament digraph. Proof: Chordal graphs are representable in trees (see [331, page 82]) and hence in unicyclic graphs. By deﬁnition, every circular arc graph is representable in some unicyclic graph. Now the claim follows from Theorem 8.1.19.
Another (non-trivial) corollary is the following by Bang-Jensen, Huang and Prisner. For a proof see [81]. Corollary 8.1.22 [81] Every graph with exactly one induced cycle of length greater than 3 is orientable as a locally in-tournament digraph.
We close this subsection with a characterization, due to Bang-Jensen, Huang and Prisner, of those line graphs which are orientable as locally intournament digraphs (a graph G is a line graph if there exists an undirected graph H such that G is the intersection graph of the edges in H (considered as subsets of V (H) of size two). We write G = L(H) if G is the line graph of H.
Let C = x0, x1, . . . , x −1, x0 be a cycle. A chord xixj with i, j ∈ {0, 1, . . . , − 1}, i < j, is called a p-chord for p = min{j − i, i + − j}. Two chords xixj and xkxm are crossing if without loss of generality0 ≤ i < k < j < m ≤ − 1. Theorem 8.1.23 [81] For any connected graph G, the following are equivalent: (i) L(G) is orientable as a locally in-tournament digraph, (ii) With at most one exception, every block of G is K2 or K3, and the exception is either K4 or a cycle with (possibly) non-crossing 2-chords.
8.2 Fast Recognition of Locally Semicomplete Digraphs
In this section we study the recognition of locally semicomplete digraphs. We show how to obtain an O(n2) algorithm using the structural characterizations

430 8. Orientations of Graphs
of Theorems 8.1.12 and 8.1.13 as well as the linear algorithm of Theorem 8.1.10 for recognizing and representing proper circular arc graphs. We include this section to show another application of the main results from Subsection 8.1.3.
We will concentrate on local tournaments, but the results can be extended to general locally semicomplete digraphs (see Exercise 8.10 and [76]).
It is easy to see that local tournaments can be recognized in polynomial time. Given an oriented graph D, to test whether D is a local tournament it is enough to verify the following property for each arc (x, y) of D: the vertex x must be adjacent to every vertex which dominates y and the vertex y must be adjacent to every vertex which is dominated by x. If the property is satisﬁed for each arc of D, then D is a local tournament; otherwise D is not a local tournament. It is easy to see that this veriﬁcation can be done in O(∆(D)m) time, where ∆(D) is the maximum degree of D.
Below we shall show how to obtain an O(n2) algorithm to recognize local tournaments. The description follows [76]. We point out that in [76] it was claimed that the algorithm is linear. This is not quite true, since we use the transformation to the complement graph as an important subroutine and the size of the complement graph is generally not linear in the size of the original graph.
In our algorithms, we assume that digraphs D are represented by the lists of in-neighbours and out-neighbours. This allows us to get all in- and outneighbours of a vertex v with O(d(v)) operations, where d(v) is the degree of v in U G(D). We also need additional information suitable to decide, in time O(1), whether, for given vertices u and v, it is the case that u dominates v, or v dominates u, or neither. It is possible to obtain, in time O(m), a version of the adjacency matrix of D (with valid entries certiﬁed by the means of an additional stack), which allows us to do this, cf. [6, Exercise 2.12]. If we ignore the complexity of taking the complement graph, then this representation is needed to give a linear algorithm.
Suppose that D is a local tournament. If D is obtained from D by reversing a balanced arc4, then D is also a local tournament. Thus we can arbitrarily and independently reverse any balanced arc and still have a local tournament. We can also reverse unbalanced arcs, in suitable combinations. Let C1, C2, . . . , Ck be the components of U G(D). We deﬁne a partial reversal of D to be an operation which reverses all unbalanced arcs within some Ci, or reverses all unbalanced arcs between two ﬁxed Ci and Cj. Partial reversals also preserve the property of being a local tournament. This follows from Theorem 8.1.13, but to see it directly, suppose that D is obtained from D by performing a partial reversal. If D is not a local tournament, then D contains three vertices x, y, z such that y and z are two non-adjacent in-neighbours or out-neighbours of x. Assume that y and z are non-adjacent in-neighbours of x. (A similar discussion applies when y and z
4 An arc is balanced if the corresponding edge is balanced in U G(D).

8.2 Fast Recognition of Locally Semicomplete Digraphs 431
are non-adjacent out-neighbours of x.) Note that both (y, x) and (z, x) are unbalanced and y and z are in the same component of G(D). Thus a partial reversal either reverses both or neither of the arcs (y, x) and (z, x). Hence D contains either both (y, x) and (z, x) or both (x, y) and (x, z), contradicting the fact that D is a local tournament.
It follows from Theorem 8.1.13 that the two operations described above are suﬃcient to obtain all local tournament orientations of a ﬁxed proper circular arc graph G, starting from any one ﬁxed local tournament orientation of G.
Our strategy to obtain an O(n2) algorithm to recognize local tournaments combines Theorems 8.1.13 and 8.1.10.
Suppose that D is the input oriented graph. We assume that D is connected as otherwise we can consider each component of D separately. Let G = U G(D). By Theorem 8.1.7, G is a proper circular arc graph if and only if it can be oriented as a local tournament. Thus we ﬁrst test whether G admits a local tournament orientation. This can be done in time O(n + m), by Theorem 8.1.10. If G does not admit a local tournament orientation, then we simply report that D is not a local tournament. Otherwise the algorithm of Theorem 8.1.10 ﬁnds a local tournament orientation D of G, and identiﬁes all balanced arcs.
We mark an edge by T if it has the same direction in both D and D and by F if it has opposite orientations in D and D . By the earlier observation that balanced arcs can be reversed arbitrarily, we only need to check the T − F assignment for the unbalanced edges of G. If there are two unbalanced edges of G in one component or between two ﬁxed components of G, such that one is marked by T and the other is marked by F , then D is a not local tournament by Theorem 8.1.12. Otherwise D is a local tournament because, according to the observations made above, D can be obtained from D by performing partial reversals and changing directions of some balanced arcs. It is easy to see that the above veriﬁcations can be implemented in time O(n2) (again we stress that the only reason why the algorithm is not of complexity O(n+m) is that we need to ﬁnd the connected components of the complement graph). Summarizing, we have the following algorithm:
Local tournament recognition algorithm Input: An oriented graph D. Output ‘yes’ if D is a local tournament digraph and ‘no’ otherwise.
1. If the underlying graph G of D does not admit a local tournament orientation, then D is not a local tournament. Return the answer ‘no’.
2. Find a local tournament orientation D of G. 3. For every edge e of U G(D) mark e by T if it has the same orientation in
both D and D and by F if it has opposite orientations in D and D . 4. Construct the complement graph U G(D) of U G(D) and ﬁnd the con-
nected components of U G(D).

432 8. Orientations of Graphs
6. Find the set of unbalanced edges in U G(D). 7. If there are two unbalanced edges e, e of G such that e is marked by
T and e is marked by F and end vertices of e, e are all within one component or both edges go between two ﬁxed components of U G(D), then D is not a local tournament. Return the answer ‘no’. 8. Otherwise D is a local tournament. Return the answer ‘yes’
In the case of digraphs that are not strongly connected one can obtain a simpler O(n + m) algorithm to decide whether the given digraph is locally semicomplete based on Theorem 4.11.6. We leave this as an exercise (Exercise 8.11), see also [76].
8.3 Orientations With no Even Cycles
It can be seen from Section 10.6 that the problem of deciding whether a given digraph has an even cycle is polynomially solvable, but very complicated. The corresponding problem for undirected graphs is easy (see Exercise 8.17). Here we will consider a somewhat opposite orientation problem where we wish to achieve orientations with no even cycles. Since we can concentrate on strong components when looking for even cycles, we only consider strong orientations without even cycles. Clearly we can also concentrate on graphs that are nonbipartite since otherwise every cycle will be even and the answer is trivial. It is also clear that it suﬃces to consider graphs which are 2-connected.
Let G be an undirected graph and let us call an orientation D of G odd if there is no directed cycle of even length in D. The following problem was posed by Bang-Jensen in 1992 (see e.g. [313]).
Problem 8.3.1 Is there a polynomial algorithm which given an undirected graph G either returns a strong odd orientation D of G or a proof (in the form of a certiﬁcate that can be checked in polynomial time) that G has no such orientation?
This seems to be a very hard problem and so far only a partial answer (Theorem 8.3.3 below) is known. In order to state Theorem 8.3.3, we need the following deﬁnitions. An odd-K4 is an undirected graph which is a subdivision of the complete graph on four vertices in which each of the four 3-cycles of K4 become odd cycles (see Figure 8.8 (a)). An odd necklace is any undirected graph which can be obtained from an odd number t of odd cycles C1, C2, . . . , Ct by identifying one vertex of Ci with one vertex of Ci+1 (modulo t) in such a way that |V (Ci) ∩ V (Cj)| = 1 if |i − j| = 1 (mod k) and |V (Ci) ∩ V (Cj)| = 0 otherwise (see Figure 8.8(b)).
The proof of the following lemma is left as Exercise 8.16.
Lemma 8.3.2 [313] Let G be a graph which is either an odd-K4, or an odd necklace. Then every strong orientation of G has an even cycle.

8.3 Orientations With no Even Cycles 433

odd odd odd

odd odd odd

odd odd

(a) (b)
Figure 8.8 Illustration of an odd-K4 and an odd necklace. Each of the six dashed lines in the odd-K4 in part (a) correspond to internally disjoint paths and the word odd inside a cycle in part (b) indicates that the length of the bounding cycle is odd

However graphs that contain odd-K4’s may have strong odd orientations as shown in Figure 8.9. Note that in this orientation the 2-connected subgraph
corresponding to the odd-K4 is not oriented as a strong digraph.

Figure 8.9 A strong odd orientation of a graph with an odd-K4 (shown as fat arcs).
Gerards and Shepherd proved the following result:
Theorem 8.3.3 [313] Let G be 2-connected and non-bipartite. If G contains neither an odd-K4 nor an odd necklace as a subgraph, then G has a strong odd orientation.
By Lemma 8.3.2, Theorem 8.3.3 can be reformulated as
Theorem 8.3.4 [313] Let G be an undirected graph. Then each 2-connected non-bipartite subgraph of G has a strong odd orientation if and only if G contains neither an odd-K4 nor an odd necklace as a subgraph.
The proof of Theorem 8.3.3 is based on a constructive characterization of graphs with no odd-K4’s and no odd necklaces [313, Theorem 7, Corollary 8] (see also [311]).

434 8. Orientations of Graphs
It is shown in [313] that graphs which contain no odd-K4 and no odd necklace can be recognized in polynomial time. Furthermore the proof of Theorem 8.3.3 in [313] is constructive and implies that there is a polynomial algorithm for Problem 8.3.1 for graphs with no odd-K4 and no odd chain.
For further results on orientations of graphs with no odd-K4 see the papers [310, 312] by Gerards.
How many edges can a graph G have before every strong orientation of G has an even cycle? Since every strong orientation of a complete graph on n vertices is pancyclic by Theorem 1.5.1 it is clear that there is some upper bound on the number of edges (as a function on n) for graphs which have strong orientations without even cycles.
Let A and B be disjoint sets of size (n−1)/2 and (n−1)/2 respectively. Form a graph Hn by taking V (Hn) = A ∪ B ∪ v, where v is a new vertex and E(Hn) = {ab : a ∈ A, b ∈ B} ∪ {vc : c ∈ A ∪ B}. Then |E(Hn)| = (n + 1)2/4 − 1 and we can orient Hn so that it is strong and all cycles are 3-cycles just by orienting all arcs from v to A, from A to B and from B to v.
Let Cn = v0v1 . . . vn−2vn−1v0 be a cycle. Let Ln be obtained from Cn by adding all chords vivj such that i − j is a positive even number. It is not diﬃcult to check that each graph Ln has |E(Ln)| = (n + 1)2/4 − 1 and that Ln has a strong orientation with no even cycles (Exercise 8.18).
These two classes show that the following result, due to Chung, Goddard and Kleitman, is best possible in terms of the number of edges. We formulate it as a theorem for oriented graphs.
Theorem 8.3.5 [158] Every strong oriented graph for which the number of arcs is at least (n + 1)2/4 = f (n) + 1 contains an even cycle. Furthermore every strong oriented graph D with f (n) arcs which has no even cycle consists of a maximal hamiltonian arc-critical subdigraph H of D on an odd number (2r + 1, for some r) of vertices and an acyclic bipartite tournament B on the remaining vertices, having the partite sets as equal in size as possible, each vertex of which is joined to r + 1 vertices of H.
By a maximal hamiltonian arc-critical subdigraph of D we mean a subdigraph on, say, n vertices which has f (n ) edges, is hamiltonian, and is maximal with respect to these conditions (that is, every subdigraph of D with n > n vertices is either non-hamiltonian or has less than f (n ) arcs).
Although Theorems 8.3.3 and 8.3.5 do give some information as to which graphs have strong orientations without even cycles, there are large classes of graphs for which they give no information. One such class is the cubic graphs one can obtain by joining two odd cycles of the same length by a perfect matching. The Petersen graph5 is one of these graphs. It is easy to see that the Petersen graph (an orientation of which is shown in Figure 8.10) contains
5 The Petersen graph, due to the Danish pioneer of graph theory, Julius Petersen (1839-1910), is very important in several problems on undirected graphs (see e.g. [735]).

8.4 Colourings and Orientations of Graphs 435
an odd-K4 and hence is not covered by Theorem 8.3.3. In Exercise 8.15 the reader is asked to prove that every strong orientation of the Petersen graph contains an even cycle.
Obviously an oriented graph has an even cycle if it has two cycles whose length diﬀer by one. Hence the following problem may be interesting to study. The analogous problem was considered for undirected graphs by Bondy and Vince in [129].
Problem 8.3.6 Is there a polynomial algorithm to decide whether a given 2-connected graph has a strong orientation without two cycles whose length diﬀer by one?
8.4 Colourings and Orientations of Graphs
In this section we discuss connections between a very important parameter of an undirected graph G, its chromatic number, and properties of orientations of G.
Recall that the chromatic number of an undirected graph G = (V, E), denoted χ(G) is the smallest natural number k for which V can be partitioned into disjoint independent sets V1, V2, . . . , Vk. A more popular and obviously equivalent deﬁnition is that χ(G) is the smallest number k such that we can assign each vertex v ∈ V a colour from the set {1, 2, . . . , k} without ever using the same colour for vertices that are adjacent (joined by an edge) in G. A k-colouring of an undirected graph G is any function mapping V (G) to {1, 2, . . . , k}. A k-colouring is proper if f (u) = f (v) for every edge uv ∈ E(G). For convenience we also deﬁne χ(D) for every digraph as χ(D) = χ(U G(D)).
For an arbitrary digraph lp(D) denotes the length of a longest path in D. The ﬁrst relation we will discuss is between the number lp(D) and χ(G) for an arbitrary orientation D of G.
If χ(G) = k, then we can obtain an acyclic orientation D of G with lp(D) = k − 1 just by orienting all edges between Vi and Vj from Vi to Vj for all 1 ≤ i < j ≤ k, where V1, V2, . . . , Vk is a partition of V into k disjoint independent sets. Hence if χ(G) is small then G has an orientation without long directed paths. The interesting thing is that the opposite direction also holds as was discovered independently by Gallai, Roy and Vitaver.
Theorem 8.4.1 (The Gallai-Roy-Vitaver theorem) [297, 646, 727] For every digraph D, χ(D) ≤ lp(D) + 1.
Proof: Let D = (V, A) be given and let T = (V, A ) be a maximal acyclic subdigraph of D. Deﬁne the function f : V → Z0 by letting f (v) equal the

436 8. Orientations of Graphs
number of vertices in a longest path starting in v in T . Clearly, f is welldeﬁned. Assume that f takes values in the set {1, 2, . . . , k} (it is easy to see that all values in this set are taken by f ). Let Vi = {v ∈ V : f (v) = i}.
We claim that Vi is an independent set in D for each i = 1, 2, . . . , k. Clearly this will imply that χ(D) ≤ lp(D) + 1. Suppose u, v ∈ Vi for some i and that there is an arc from u to v in D. Let P be a path with i vertices starting at v in T . Clearly, the arc uv does not belong to T , since otherwise uP is a path with i + 1 vertices, contradicting the fact that f (u) = i (here we used that T is acyclic to see that uP is indeed a path). By the maximality of T we get that T + uv contains a cycle consisting of a path P from v to u in T and the arc uv. Let P be a path with i vertices starting at u in T . Since T is acyclic the paths P and P have only u in common. But now P P is a path starting in v in T with more than i vertices, a contradiction.
Gallai asked [297] whether every graph G has an orientation with precisely one path of length χ(G). This is not true, as shown by an example by Youngs [752]. For a detailed discussion of this topic and related problems see the book by Jensen and Toft [459].
An alternative formulation of Theorem 8.4.1 is that the chromatic number of a graph is given by
χ(G) = min{lp(D) + 1 : D is an orientation of G}.6
For any orientation D of an undirected graph G, we obtain an upper bound k on χ(G) from Theorem 8.4.1. It follows from the fact that the problem of ﬁnding the minimum k such that an undirected graph has a kcolouring is N P-hard (as shown by Karp [474]) that it is an N P-hard problem to ﬁnd an orientation D of a given undirected graph G which minimizes lp(D). The next theorem by Tuza shows that given an orientation D of G one can ﬁnd a colouring using at most lp(D) + 1 colours fast.
Theorem 8.4.2 [723] If D is a digraph such that lp(D) < k, then a proper k-colouring of U G(D) can be found in time O(n + m).
Bondy obtained the following generalization of Theorem 8.4.1 to strong digraphs. Note that Camion’s theorem is a direct consequence of Theorem 8.4.3.
Theorem 8.4.3 [124] Every strong digraph contains a directed cycle of length at least χ(D).
Minty showed that one can also measure the chromatic number of a graph by how much one can balance oriented cycles in orientations.
6 Combining this with the famous 4-Colour Theorem by Appel and Haken [27] which says that every planar graph has chromatic number at most four, we see that the 4-Colour Theorem is equivalent to the statement that every planar graph has an orientation such that no directed path has length more than 3.

8.5 Orientations and Nowhere Zero Integer Flows 437
Theorem 8.4.4 [567] If G has an orientation such that every oriented cycle C contains at least |V (C)|/k arcs in each direction, then χ(G) ≤ k.
This was strengthened by Tuza as follows.
Theorem 8.4.5 [723] If G has an orientation such that every oriented cycle C of length |V (C)| ≡ 1 (modulo k) contains at least |V (C)|/k arcs in each direction, then χ(G) ≤ k.
For more relations between chromatic number and paths and cycles in digraphs see Bondy’s survey [126, Section 4.4] and the paper [685] by Szigeti and Tuza.
8.5 Orientations and Nowhere Zero Integer Flows
In this section, unless otherwise stated, we assume that all undirected multigraphs in question are connected.
Let G = (V, E) be an undirected multigraph. A k-ﬂow on G is an assignment of an orientation a to each edge e ∈ E as well as an integer x(a) from the set {1, 2, . . . , k − 1} such that for each vertex v the sum of the values of x on arcs into v equals the sum of the values of x on arcs leaving v. That is, x is a circulation in the resulting oriented multigraph D. Hence we can think of a k-ﬂow on a multigraph G as a pair (D, x) where D = (V, A) is an orientation of G and x is an integer circulation in D with the property that x(a) ∈ {1, 2, . . . , k − 1} for each a ∈ A. Below we use this notation. The ﬂow x is sometimes called a nowhere-zero k-ﬂow to stress the fact that x never takes the value zero on an arc. We say that G has a k-ﬂow if there exists a k-ﬂow on G. It is easy to see that a multigraph G has a k-ﬂow for some k if and only if each connected component of G has a k-ﬂow. Furthermore, it is easy to show that a connected multigraph with a cut-edge (λ(G) = 1) cannot have a k-ﬂow for any k (see Exercise 8.22). It is easy to see that a pseudograph G has a k-ﬂow if and only if the multigraph H that we obtain by deleting all loops from G has a k-ﬂow. This is why we assume that we are working with a multigraph rather than a pseudograph below.
For convenience, we will always specify the value of a ﬂow x on an arc uv by x(uv), rather than xuv as we did in Chapter 3. We start with a very easy result on 2-ﬂows.
Proposition 8.5.1 A multigraph G has a 2-ﬂow if and only if all degrees of G are even.
Proof: Clearly, if G has a 2-ﬂow x then all degrees are even, since x is a circulation which only takes the value 1. Suppose now that all degrees of G are even. We may assume that G is connected as otherwise we consider each component in turn. By Euler’s theorem, G has a closed walk W =

438 8. Orientations of Graphs

w0w1w2w3 . . . wm−1wm, where w0 = wm which uses each edge precisely once. Let D be the orientation obtained by orienting the edge wiwi+1 from wi to wi+1 for i = 0, 1, . . . , m − 1. Then (D, x ≡ 1) is a 2-ﬂow in G.

For any abelian7 group (Γ, +) we can deﬁne a ﬂow in a multigraph G =

(V, E) as follows. A Γ -ﬂow in G is a pair (D, x) where D is an orientation

of G, x maps A(D) to the non-zero elements {g1, g2, . . . , g|Γ |−1} of Γ and x satisﬁes

x(uv) =

x(vw)

for all v ∈ V,

(8.1)

uv∈A(D)

vw∈A(D)

where addition is in the group Γ and |Γ | denotes the number of elements in
the group Γ . That is, x is a circulation which takes values from Γ − g0, where g0 is the neutral element of (Γ , +).
Tutte proved the following important theorem, relating k-ﬂows on a multi-
graph G to arbitrary group valued circulations on orientations of G.

Theorem 8.5.2 (Tutte) [720] If (Γ , +) is a ﬁnite abelian group, then an undirected multigraph G has a Γ -ﬂow if and only if it has a k-ﬂow, where k = |Γ |.

An important step in proving Theorem 8.5.2 is to demonstrate the fol-
lowing theorem by Tutte. Although we do not prove Theorem 8.5.2, we still
prove Theorem 8.5.3 and then use it below. The group Zk is the additive group of integers modulo k.

Theorem 8.5.3 [720] Let G = (V, E) be an undirected multigraph and k ≥ 1 an integer. Then G has a k-ﬂow if and only if G has a Zk-ﬂow.

Proof: If (D, x) is a k-ﬂow in G, then x(a) ∈ {1, 2, . . . , k − 1} for each a ∈ A

and

x(uv) −

x(vw) = 0 ≡ 0

(modulo k).

uv∈A(D)

vw∈A(D)

Hence (D, x) is also a Zk-ﬂow in G.
Suppose now that (D , x ) is a Zk-ﬂow in G. Since all calculations are modulo k, we may assume that x (a) ∈ {1, 2, . . . , k − 1} for each a ∈ A. By the deﬁnition of a Zk-ﬂow we also have

x (uv) −

x (vw) ≡ 0 (modulo k).

uv∈A(D )

vw∈A(D )

For a given Zk-ﬂow (D = (V, A), x), we let the balance vector bx be deﬁned as in (3.5), that is,

7 Recall that an additive group (Γ , +) is abelian if a + b = b + a holds for all elements a, b of Γ .

8.5 Orientations and Nowhere Zero Integer Flows 439

bx(v) =

x(vw) −

x(uv).

vw∈A(D)

uv∈A(D)

Now assume that (D , x ) is chosen among all Zk-ﬂows in G such that the sum

φ(D , x ) =

|bx (v)|

(8.2)

v∈V (D )

is minimized. We show that φ(D , x ) = 0, implying that (D , x ) is a k-ﬂow in G. Suppose this is not the case. Then let

P = {v ∈ V : bx (v) > 0}, M = {v ∈ V : bx (v) < 0}.
It follows from standard ﬂow considerations (compare with Section 3.1) that P, M = ∅. By Theorem 3.3.1 we conclude that there is a path Q from P to M in D . Let (D , x ) be obtained by reversing all arcs of Q and changing the ﬂow of each arc a ∈ A(Q) to k − x (a) while leaving the ﬂow on all arcs not on Q unchanged. It is easy to see that (D , x ) is a Zk-ﬂow in G and that φ(D , x ) = φ(D , x ) − 2k (which is still at least zero since every vertex in P (M ) contributes a positive (negative) multiple of k to the balance vector). This contradicts the choice of (D , x ) and hence we must have φ(D , x ) = 0 implying that (D , x ) is a k-ﬂow.
The usefulness of Theorem 8.5.2 is illustrated several times below. The point is that, as we shall see below, it is sometimes considerably easier to establish that a multigraph has a Γ -ﬂow than it is to prove directly that it has a |Γ |-ﬂow.
A multigraph is cubic if every vertex has degree 3.

Proposition 8.5.4 A cubic multigraph G has a 3-ﬂow if and only if G is bipartite.

Proof: Suppose ﬁrst that G is cubic and bipartite with bipartition (X, Y ). Let D be the orientation obtained by orienting all edges from X to Y . Let x ≡ 1, then (D, x) is a Z3-ﬂow in G. By Theorem 8.5.3, G has a 3-ﬂow (D , x ).
Suppose now that G is cubic and has a 3-ﬂow (D, x). Since the only values of x are 1 and 2, it is easy to see that taking X (Y ) as those vertices which are the tail (head) of an arc whose x-value is 2, we obtain a partition of V (G) into two independent sets. Thus G is bipartite with bipartition (X, Y ).
A multigraph G is r-edge-colourable if one can assign each edge a number from the set {1, 2, . . . , r} in such a way that all edges incident to the same vertex receive diﬀerent numbers. Such an assignment is also called an r-edge-colouring of G. By Exercise 3.56, every cubic bipartite multigraph is 3-edge-colourable. For general 3-edge-colourable cubic multigraphs it may not be possible to ﬁnd a 3-ﬂow (see Exercise 8.29), but one can always ﬁnd a 4-ﬂow as the next result shows.

440 8. Orientations of Graphs
Theorem 8.5.5 A cubic multigraph G has a 4-ﬂow if and only if G is 3edge-colourable.
Proof: By Theorem 8.5.2, G has a 4-ﬂow if and only if it has a Z2 × Z2ﬂow8 . Observe that the non-zero elements of Z2 × Z2 are their own inverses. Furthermore these three elements sum up to the zero element in Z2 × Z2. This shows that at every vertex of G precisely one edge has ﬂow equal to (1, 0), (0, 1) and (1, 1) respectively. Thus if (D, x) is a Z2 × Z2-ﬂow in G, then we can consider the elements (0, 1), (1, 0), (1, 1) as edge colours and we obtain that G is 3-edge-colourable. This argument works the other way also and hence the claim is proved.
Theorem 8.5.6 A multigraph G has a 4-ﬂow if and only if it contains two eulerian subgraphs G1, G2 such that E(G) = E(G1) ∪ E(G2).
Proof: Exercise 8.28.
Theorem 8.5.7 [455] Every 4-edge-connected multigraph G has a 4-ﬂow.
Proof: Let G = (V, E) be 4-edge-connected. By Theorem 9.5.5, G has two edge-disjoint spanning trees T1, T2. Every edge e ∈ E − E(T1) forms a unique cycle Ce with E(T1). Let E1 be the modulo 2 sum of the edge sets of all cycles of the form Ce, e ∈ E − E(T1). Then the subgraph G1 of G induced by E1 is eulerian and contains all edges of E − E(T1). Similarly there is an eulerian subgraph G2 which contains all edges of E − E(T2). Hence E(G) = E(G1) ∪ E(G2), because T1 and T2 are edge-disjoint, and the claim follows from Theorem 8.5.6.

2 42

11

2

1

12

3

1

2

1 2

3

Figure 8.10 The Petersen graph with a 5-ﬂow (D, x) indicated. Notice that the value 4 is only used once.

By Theorem 8.5.5 and the existence of 2-edge-connected cubic multigraphs which are not 3-edge-colourable (the most famous example being the
8 The additive group (Z2 × Z2, +) has elements {(0, 0), (1, 0), (0, 1), (1, 1)} and addition is coordinate-wise.

8.5 Orientations and Nowhere Zero Integer Flows 441

Petersen graph, see Figure 8.10 for an orientation of the Petersen graph) we conclude that not all 2-edge-connected multigraphs have a 4-ﬂow. However Tutte conjectured that 4 can be replaced by 5.

Conjecture 8.5.8 (Tutte’s 5-ﬂow conjecture) [720] Every multigraph which is 2-edge-connected has a 5-ﬂow.

The next lemma (described as a folklore result by Seymour in [663]) shows that it is suﬃcient to prove the conjecture for multigraphs which are cubic and 3-connected.

Lemma 8.5.9 If k ≥ 3 and G = (V, E) is a 2-edge-connected multigraph which does not have a k-ﬂow, but every 2-edge-connected multigraph H = (V , E ) with |V | + |E | < |V | + |E| has a k-ﬂow, then G is cubic and 3-connected.

Proof: Suppose ﬁrst that G has a cut-vertex z such that V −z has connected components H1, . . . , Hp, p ≥ 2. By the minimality of G, each of the multigraphs Hi + z, i = 1, . . . , p have a k ﬂow and using these we easily obtain a k-ﬂow for G. Hence we may assume that G is 2-connected.
Suppose {e, e } is a 2-edge-cut in G. Let e = st and let U ∪ W be a bipartition of V such that s ∈ U , t ∈ W and there is no edge between U and W in G − {e, e }. Let U = U − s and W = W − t. By the deﬁnition of U, W and the fact that G has no cut-vertex there is precisely one edge between U and W in G, namely e . Now let the multigraph G = (V , E ) be obtained from G by contracting e into one vertex ve and deleting the loop created this way. Since |V |+|E | < |V |+|E| and contraction cannot decrease edge-connectivity, it follows from the assumption on G that there is a k-ﬂow (D , x ) in G .
In D we may assume without loss of generality that e is oriented as an arc a from W to U . Let r = x (a ). Since x is a circulation the following must hold:

x (vew) −

x (w ve) = r

w∈W

w ∈W

x (veu) − x (u ve) = − r .

u∈U

u ∈U

In G − e the vertex s (t) is adjacent only to vertices in U (W ). Let D be the orientation obtained by using the orientations prescribed by D on the edges of G and orienting the edge st from s to t. Deﬁne x by x (a) = x (a) for all arcs except st where we take x (st) = r. Then (D , x ) is a k-ﬂow in G, contradicting the assumption. Hence it follows that G is 3-edge-connected.
If G has a vertex s of degree at least 4, then it follows from a result of Fleischner [239] (see Exercise 8.38) that s has neighbours u, v so that replacing

442 8. Orientations of Graphs
the edges su, sv by the edge uv we obtain a 2-edge-connected multigraph G∗9. By the minimal choice of G, there is a k-ﬂow (D∗, x∗) in G∗ and it is easy to obtain a k-ﬂow in G from this (just replace the arc between u and v in D∗ by a path of length 2 via s in G, using the two edges su, sv and send the appropriate amount of ﬂow along that path). This contradicts the choice of G and hence we conclude that G is cubic. It follows from Exercise 8.23 that G is 3-connected.
A major breakthrough on Tutte’s 5-ﬂow conjecture came when Jaeger [455] proved that every 2-edge-connected multigraph has an 8-ﬂow. His proof was surprisingly short and elegant. The reader is asked to give a proof of Jaeger’s result in Exercise 8.31.
The strongest result so far is due to Seymour.
Theorem 8.5.10 [663, Seymour] Every 2-edge-connected multigraph has a nowhere zero 6-ﬂow.
Since the proof is based on arguments that do not involve directed graphs, we will not give the proof in detail here (see Seymour’s original paper [663] or the books by Diestel [191] and Fleischner [241]). It follows from Lemma 8.5.9 that it suﬃces to prove the result for 3-connected cubic multigraphs. Seymour proves that the edge set of such a multigraph G can be covered by two multigraphs G1, G2 such that G1 is eulerian and G2 has a 3-ﬂow x . It follows from Theorem 8.5.1 that G1 has a 2-ﬂow. Since E(G) = E(G1)∪E(G2) it is easy to obtain a Z2 × Z3-ﬂow in G using x, x and hence, by Theorem 8.5.2, G has a 6-ﬂow.
An algorithmic version of Seymour’s proof, leading to a polynomial algorithm for ﬁnding a 6-ﬂow in any 2-edge-connected multigraph, was given by Younger [751].
Recently, Bienia, Goddyn, Gvozdjak, Seb˝o and Tarsi proved the following interesting result. The case when k ≥ 5 is an obvious consequence of Theorem 8.5.10.
Theorem 8.5.11 [118] If G has a nowhere-zero ﬂow with at most k − 1 distinct values, then G has a k-ﬂow.
For much more information on nowhere-zero ﬂows we refer the reader to the books by Fleischner [241] and Jensen and Toft [459], the papers [456, 457] by Jaeger as well as [664] by Seymour. In particular Chapter 13 in the book by Jensen and Toft [459] contains a lot of useful information about the subject and the important open problems.
9 In the language of Section 7.5 the result says that there is a feasible splitting su, sv (with respect to 2-edge-connectivity) for some pair of neighbours u, v of s.

8.6 Orientations Achieving High Arc-Strong Connectivity 443
8.6 Orientations Achieving High Arc-Strong Connectivity
Let us recall that an orientation D of a multigraph G = (V, E) is obtained by assigning one of the two possible orientations to each edge of G (in particular two parallel edges may receive opposite orientations). By Robbins’ theorem, an undirected multigraph G = (V, E) has a strongly connected orientation if and only if G is 2-edge-connected.
Below we describe two generalizations of Robbins’ theorem, due to NashWilliams, both of which are much deeper than Robbins’ theorem, especially the one in Theorem 8.6.4.
In order to illustrate to usefulness of the splitting technique which was discussed in Chapter 7, we prove Theorem 8.6.3 below using a splitting result for undirected graphs. This theorem, due to Lov´asz, is analogous to Theorem 7.5.2. The reader is asked to prove this theorem in Exercise 8.37. Analogously to the directed case, we denote by λ(x, y) the maximum number of edgedisjoint xy-paths in G and we say that a graph G = (V + s, E) with a special vertex s is k-edge-connected in V if λ(x, y) ≥ k holds for all x, y ∈ V .
Theorem 8.6.1 (Lov´asz’s splitting theorem) [522] Let G = (V + s, E) be a multigraph with a designated vertex s of even degree and suppose that G is k-edge-connected in V , for some k ≥ 2. Then for every edge st there exists an edge su such that after splitting oﬀ the pair st, su the new graph is still k-edge-connected in V 10.
An undirected multigraph G = (V, E) is minimally k-edge-connected if G is k-edge-connected (λ(G) = k), but λ(G − e) = k − 1 for every edge e ∈ E. The following theorem by Mader is analogous to Theorem 7.10.3. The proof is left to the reader as Exercise 8.36.
Theorem 8.6.2 [532] Every minimally k-edge-connected multigraph has a vertex of degree k.
Now we can prove the following famous result of Nash-Williams:
Theorem 8.6.3 (Nash-Williams’ orientation theorem) [583] An undirected multigraph G = (V, E) has a k-arc-strong orientation D if and only if G is 2k-edge-connected.
Proof: The proof idea used below is due to Lov´asz [522]. Suppose G has a k-arc-strong orientation D. Thus for every non-empty proper subset X of V we have d+D(X), d−D(X) ≥ k. This implies that in G we have d(X) ≥ 2k and hence, G is 2k-edge-connected.
10 As for directed graphs (see Section 7.5), splitting oﬀ the pair (su, sv) means that we replace the edges su, sv by a new edge uv (or a copy of that edge if it already exists).

444 8. Orientations of Graphs

To prove the other direction we proceed by induction on the number of edges in G. Let G = (V, E) be 2k-edge-connected. If |E| = 2k, then G is just two vertices x, y joined by 2k copies of the edge xy. Clearly this multigraph has a k-arc-strong orientation. Thus we may proceed to the induction step. Since adding arcs to a directed multigraph cannot decrease its arc-strong connectivity, it suﬃces to consider the case when G is minimally 2k-edgeconnected.
By Theorem 8.6.2, G contains a vertex s such that dG(s) = 2k. Apply Lov´asz’s splitting theorem to G with s as the special vertex and conclude that we can pair oﬀ the 2k edges incident to s in G in k pairs (su1, sv1), . . . , (suk, svk) in such a way that deleting s and adding the edges u1v1, . . . , ukvk to G − s results in a 2k-edge-connected graph H. Since H has fewer edges than G it follows by induction that H has an orientation D which is k strong.
By Exercise 7.27, we can obtain a k-arc-strong orientation of G by adding the arcs u1s, u2s, . . . , uks and the arcs sv1, sv2, . . . , svk to H.
Actually, Nash-Williams proved the following much stronger result which clearly contains Theorem 8.6.3 as a special case.

Theorem 8.6.4 (Nash-Williams’ strong orientation theorem) [583]

An undirected graph G has an orientation D such that there are

1 2

λG(x,

y)

arc-disjoint (x, y)-paths in D for every pair of vertices x, y ∈ V .

It is beyond the scope of this book to give a complete proof here. The original proof by Nash-Williams [583] is quite complicated and so are alternative proofs by Mader (using a local edge-connectivity version of Theorem 8.6.1 [536]) and Frank [259]. It remains a real challenge to ﬁnd a short and transparent proof for this important theorem.
We will outline the main idea of Nash-Williams’ proof (the two other proofs use the same approach). The ﬁrst observation is that, if G is eulerian, then the statement is easy to prove (Exercise 8.34). So we may assume that G is not eulerian. We can make it eulerian by adding any matching on the odd degree vertices11. If we could add a matching M on the odd vertices in such a way that after orienting G + M as an eulerian digraph D and then removing the arcs corresponding to M we still have

λD(x, y) =

1 2

λG(x,

y)

for all x, y ∈ V,

(8.3)

where D = D − M 12, then we would have obtained the desired orientation.

11 Recall that by Exercise 1.5, every graph has an even number of vertices of odd degree.
12 By this we mean the oriented graph obtained from D by removing the arcs corresponding to M .

8.6 Orientations Achieving High Arc-Strong Connectivity 445

Let us see which conditions the matching M should satisfy in order to give rise to the desired orientation D as above. Following Frank [259] we use the notation f˜ = 2 f /2 whenever f is an integer valued function. Let R be deﬁned as follows: R(∅) = R(V ) = 0 and for every ∅ = X = V we let R(X) = max{λG(x, y) : x ∈ X, y ∈ V − X}. We call R the requirement function for G. By Menger’s Theorem for undirected edge-connectivity (8.3) is equivalent to requiring that

d−D(X) ≥ R˜G(X)/2

for all X ⊂ V.

(8.4)

A matching M on the odd vertices of G is a good odd-vertex pairing

if

dM (X) ≤ dG(X) − R˜G(X)

for all X ⊂ V.

(8.5)

Here dM (X) denotes the number of edges from M with precisely one end in X. Suppose M is a good odd-vertex pairing for G. Let D be an eulerian
orientation of G + M and let D = D − M . Then we have

d−D(X) ≥ d−D (X) − dM (X) = (dG(X) + dM (X))/2 − dM (X)
= (dG(X) − dM (X))/2 ≥ R˜G(X)/2,

(8.6)

implying that (8.4) and hence (8.3) holds. Thus if we can ﬁnd a good odd-vertex pairing, then we get the desired
orientation easily. The main point then is to prove the next theorem.

Theorem 8.6.5 [583, Nash-Williams] Every undirected graph has a good odd-vertex pairing.

Instead of trying to ﬁnd orientations where λD(x, y) and λD(y, x) are as close as possible for all pairs of vertices, one may also look for diﬀerent
measures for the quality of an orientation. Pek´ec (private communication,
October 1997) posed the following problem:

Problem 8.6.6 Let G be an undirected graph and deﬁne Mopt as

Mopt = max{

λD(x, y) : D is an orientation of G}.

x,y∈V (D)

Is there a nice characterization for Mopt? In particular, can Mopt be calculated in polynomial time?

Not much is known about orientations that achieve high vertex-strong connectivity. The following conjecture by Frank is still open. Note that for k = 1 the conjecture follows from Robbins’ theorem. Compare also with Section 7.14.

446 8. Orientations of Graphs
Conjecture 8.6.7 [262, Frank] A graph G = (V, E) has a k-strong orientation if and only if G − X is 2(k − j)-edge-connected for every set X of j vertices (0 ≤ j ≤ k).

8.7 Orientations Respecting Degree Constraints
In this section we ﬁrst consider orientations of multigraphs which satisfy prescribed constraints on their semi-degrees. Then we consider the more general case when we have restrictions on certain subsets of the vertices (possibly all proper subsets of the vertex set). A set function f on a groundset S is supermodular if f (X) + f (Y ) ≤ f (X ∩ Y ) + f (X ∪ Y ) holds for every choice of sets X, Y ⊆ S. Recall that f is submodular on S if f (X) + f (Y ) ≥ f (X ∩ Y ) + f (X ∪ Y ) holds for every choice of sets X, Y ⊆ S. The function f is modular if it is both submodular and supermodular13.

8.7.1 Orientations with Prescribed Degree Sequences

We saw in Section 3.11.3 that given a directed multigraph D = (V, A) and

numbers a1, a2, . . . , an such that

n i=1

ai

≤

|A|,

we

can

use

algorithms

for

maximum ﬂows to decide whether D has an spanning subdigraph D such

that d−D (vi) = ai for i = 1, 2, . . . , n. We start by showing that we can also solve a similar orientation prob-

lem using ﬂows. Namely, given an undirected multigraph G = (V, E),

V G

= {1, 2, . . . , n}, and have an orientation

numbers a1, a2, . . . , an such that D for which d−D(i) = ai, for i = 1,

n i=1

ai

=

2, . . . , n?

|E|,

does

First, form the reference orientation H = (V, A) of G by orienting an edge

ij from i to j whenever i < j. Form the network N = (V, A, l ≡ 0, u ≡ 1) by

giving each arc of A capacity one and lower bound zero. Let us interpret a

feasible integer ﬂow x in N as an orientation D = (V, A ) of G as follows.

If xij = 1 then A contains the arc ij and otherwise it contains the arc ji. Then for a given ﬂow x we see that for each i = 1, 2, . . . , n, the vertex i will

satisfy

d−D (i) =

xji + (d+H (i) −

xij ).

ji∈A

ij∈A

Since we want D to have in-degree ai at vertex i, for i = 1, 2, . . . , n, we obtain the following restriction on the balance vector bx of x:

d+H (i) − ai =

xij −

xji = bx(i),

ij∈A

ji∈A

for i = 1, 2, . . . , n. (8.7)

13 Note that a modular function f with f (∅) = 0 satisﬁes f (X) = x∈X f (x).

8.7 Orientations Respecting Degree Constraints 447

Thus we have reduced the orientation problem to that of deciding whether there exists a feasible ﬂow x in N which has balance vector bx as in (8.7). Hence, by Lemma 3.2.2, we can use any polynomial algorithm for maximum ﬂow to solve the orientation problem and ﬁnd the desired orientation if one exists.
Based on the reduction above and the feasibility theorem for ﬂows (Theorem 3.8.4) one may derive necessary and suﬃcient conditions for the existence of an orientation with a prescribed in-degree sequence (or equivalently, out-degree sequence). One such feasibility theorem which is particularly wellknown is for orientations of complete graphs as tournaments. The score of a vertex in a tournament is its out-degree. Landau proved the following characterization for score sequences of tournaments (the reader is asked to give a proof in Exercise 8.41):
Theorem 8.7.1 (Landau’s theorem) [508] A sequence (s1, s2, . . . , sn) of integers satisfying 0 ≤ s1 ≤ s2 ≤ . . . ≤ sn is the score sequence of some tournament on n vertices if and only if

k
si ≥
i=1

k 2

,

k = 1, 2, . . . , n, with equality when k = n.

For a very nice collection of diﬀerent proofs of Landau’s theorem we refer the reader to the survey paper [630] by Reid.
Harary and Moser [402] characterized score sequences of strong tournaments.

Theorem 8.7.2 [402] A sequence s1 ≤ s2 ≤ . . . ≤ sn of non-negative integers with n ≥ 3 is the out-degree sequence of some strong tournament if and
only if for each j, 1 ≤ j ≤ n − 1,

j
si >

j 2

and

n
si =

n 2

.

i=1 i=1

Let f be a function deﬁned on the vertex set V of a (di)graph H. In the rest of this subsection, we will always extend f to a modular function on 2V
by letting f (X) = v∈X f (v) for every X ⊆ V . Below we denote for an undirected graph G = (V, E) and a subset X ⊂ V ,
the number of edges of E with at least one end (both ends) in X by eG(X) (iG(X)). Furthermore we denote by c(G) the number of connected components of G. Frank proved the following theorem which deals with bounds on
the in-degrees of an orientation:

448 8. Orientations of Graphs

Theorem 8.7.3 [268] Let G = (V, E) be an undirected graph. Let f : V →
Z0 and g : V → Z+ ∪ {∞} be functions on V such that f ≤ g. Then the following holds:

(a) There exists an orientation D of G such that

d−D(v) ≥ f (v)

for all v ∈ V

(8.8)

if and only if

eG(X) ≥ f (X)

for all X ⊆ V.

(b) There exists an orientation D of G such that

(8.9)

d−D (v) ≤ g(v)

for all v ∈ V

(8.10)

if and only if

iG(X) ≤ g(X)

for all X ⊆ V.

(8.11)

(c) There exists an orientation D∗ of G satisfying both (8.8) and (8.10) if and only if there is one satisfying (8.8) and one satisfying (8.10)14.

Proof: We consider (a) ﬁrst. If D satisﬁes (8.8) then (8.9) follows easily from the following calculation

f (X) = f (v) ≤ d−D(v)

v∈X

v∈X

= eG(X) − d+(X) ≤ eG(X).

(8.12)

Suppose now that (8.9) holds but there is no orientation which satisﬁes (8.8). Choose D among all possible orientations of G as one which minimizes

(f (v) − d−D(v)).
{v∈V :f (v)>d−D(v)}

(8.13)

Let x be a vertex for which f (x) > d−D(x). Let X consist of those vertices u ∈ V for which there is a directed (x, u)-path in D. Note that by the deﬁnition of X we have d+D(X) = 0 or X = V . Since f (X) ≤ eG(X) it is easy to see (using that x ∈ X) that there is some vertex u ∈ X such that d−(u) > f (u). Let P be any (x, u)-path in D. Let D be obtained from D
by reversing the orientation of every arc on P . Now it is easy to see that D
either satisﬁes (8.8) or achieves a smaller count for (8.13). This contradiction
completes the proof that (8.8) holds.

14 Frank calls the phenomenon formulated in part (c) of the theorem the linking principle [259, 263].

8.7 Orientations Respecting Degree Constraints 449

To prove (b) we do as follows. Deﬁne g on V as follows: g (v) = min{dG(v), g(v)}. It is easy to see that G has an orientation D satisfying d−D(v) ≤ g (v) for all v ∈ V if and only if it has one satisfying d−D(v) ≤ g(v) for all v ∈ V . On the other hand G has an orientation satisfying (8.10) with respect to g if and only if it has an orientation satisfying (8.8) with respect to f (v) = dG(v) − g (v), v ∈ V (just consider the converse of such an orientation). By (a) such an orientation exists if and only if eG(X) ≥ f (X) for each X ⊆ V . Using that x∈X dG(x) = eG(X) + iG(X) we conclude that eG(X) ≥ f (X) if and only if iG(X) ≤ g (X). This proves (b).
To prove that (c) holds, we choose among all orientations satisfying (8.10) an orientation D which minimizes (8.13). If the sum for this D is zero, then we are done. Otherwise observe that the only vertex whose in-degree is increased by reversing the path P (as in the proof of (a)) is the vertex x for which we have d−D(x) < f (v) ≤ g(v) and hence we still have d−D (x) ≤ g(v) and get the same contradiction as in the proof of (a).
The non-constructive proof above can easily be turned into a polynomial algorithm which ﬁnds the desired orientations or a proof that none exists (Exercise 8.42).
We also point out that using the approach from the beginning of this subsection, Theorem 8.7.3 can be proved using ﬂows (Exercise 8.43).
Although Theorem 8.7.3 is fairly simple to prove, it has several consequences. One of these is Hall’s theorem which characterizes the existence of a perfect matching in a bipartite graph (Theorem 3.11.3). To see that Theorem 8.7.3 implies Hall’s theorem, it suﬃces to see that a bipartite graph B = (U, V, E) has a perfect matching if and only if it has an orientation D in which every vertex in U has in-degree one and every vertex in v ∈ V has in-degree dB(v) − 1. We leave the details to the reader as Exercise 8.44. The next result, due to Ford and Fulkerson, can also be derived from Theorem 8.7.3. The proof of this is left as Exercise 8.40.

Corollary 8.7.4 [246] Let M = (V, A, E) be a mixed graph. Let G = (V, E)

be the undirected part and let D = (V, A) be the directed part of M . The edges

from G can be oriented so that the resulting directed multigraph15is eulerian

if and only if dG(v) + d−D(v) + d+D(v) is even for each v ∈ V and the following holds:

dG(X) ≥ d−(X) − d+(X)

for all X ⊆ V.

(8.14)

The following common generalization of Robbins’ theorem (Theorem 1.6.2) and Theorem 8.7.3 was obtained by Frank in [268].
15 Recall that a mixed graph may have an edge and an arc with the same end vertices.

450 8. Orientations of Graphs

Theorem 8.7.5 [268] Let G = (V, E) be an undirected graph which is 2-
edge-connected. Let f : V → Z0 and g : V → Z+ ∪ {∞} be functions on V such that f ≤ g. Then the following holds:

(a) There exists a strong orientation D of G such that

d−D(v) ≥ f (v)

for all v ∈ V

(8.15)

if and only if

eG(X) ≥ f (X) + c(G − X)

for all ∅ = X ⊂ V.

(b) There exists a strong orientation D of G such that

d−D (v) ≤ g(v)

for all v ∈ V

if and only if

(8.16) (8.17)

iG(X) + c(G − X) ≤ g(X)

for all ∅ = X ⊂ V.

(8.18)

(c) There exists a strong orientation D∗ of G satisfying both (8.15) and (8.17) if and only if there is one satisfying (8.15) and one satisfying (8.17).

8.7.2 Restrictions on Subsets of Vertices

The purpose of this subsection is to study more general problems on ori-
entations with degree conditions on subsets of vertices rather than just the
vertices themselves. Let G = (V, E) be an undirected graph and let h : 2V → Z+ ∪ {0} satisfy
h(∅) = h(V ) = 0. The function h is fully G-supermodular16 if

h(X) + h(Y ) ≤ h(X ∩ Y ) + h(X ∪ Y ) + dG(X, Y )

(8.19)

holds for all pairs of subsets of V (recall that dG(X, Y ) denotes the number of edges in G with one end in X − Y and the other in Y − X). If (8.19) is required to hold only for intersecting (crossing) sets, then we say that h is intersecting (crossing) G-supermodular. A set function h on G is symmetric if h(X) = h(V − X) for every X ⊂ V . The following quite general theorem was proved in [251]. It allows one to ﬁnd conditions for the existence of k-arc-strong orientations satisfying certain degree constraints on the vertices (see e.g. [259, page 98]).
16 This strange looking deﬁnition will be easier to understand when one considers the relation between orientations of mixed graphs and submodular ﬂows in Section 8.9. In particular, see (8.43).

8.8 Submodular Flows 451

Theorem 8.7.6 (Frank’s orientation theorem) [251] Let G be an undirected graph and let h be a non-negative crossing G-supermodular function on subsets of V. There exists an orientation D of G which satisﬁes

d−D(X) ≥ h(X)

for all X ⊂ V

(8.20)

if and only if both

eF ≥

h(Vi)

Vi ∈F

(8.21)

and

eF ≥

h(V − Vi)

(8.22)

Vi ∈F

hold for every partition F = {V1, V2, . . . , Vt} of V , where eF denotes the number of edges connecting diﬀerent Vi’s. If h is intersecting G-supermodular, then (8.21) alone is necessary and suﬃcient. If h is fully G-supermodular, or
h is symmetric and crossing supermodular, then it suﬃces to require (8.21)
and (8.22) only for partitions of V into two sets.

It is an easy exercise (Exercise 8.51) to show that Frank’s orientation theorem implies Nash-Williams’ orientation theorem.
Frank shows in [259] how to derive Theorem 8.7.6 from the theory of submodular ﬂows discussed in Section 8.8. See also Exercise 8.66.

8.8 Submodular Flows

In all of this section we consider set functions which are integer valued and zero on the empty set. The purpose of this section is to introduce a very useful generalization of ﬂows, due to Edmonds and Giles [215] and to show how many important theorems in graph theory and combinatorial optimization are special cases of this theory.
Let D = (V, A) be a directed multigraph and let r : A → R be a function on A. We use the notation

r+(U ) =

r(a),

a∈(U,U¯ )

r−(U ) =

r(a).

a∈(U¯ ,U )

(8.23)

That is, r+(U ) (r−(U )) is the sum of the r values on arcs leaving (entering) U and U = V − U 17.
In Chapter 3 it is shown that every feasible ﬂow in a network N = (V, A, l, u, b) can be modeled as a circulation in an augmented network. Recall that for a circulation x in a network N we require that for every vertex v,
17 Note that the function r+ is a generalization of d+ for any directed multigraph D, since taking r ≡ 1 we obtain d+.

452 8. Orientations of Graphs

the ﬂow into v equals the ﬂow out of v. This easily translates to non-empty proper subsets of the vertex set V , i.e. for every circulation x and every nonempty proper subset U of V , x−(U ) = x+(U ). The ﬂows we will consider below do not in general satisfy this property, but there is a bound b(U ) on the diﬀerence between the ﬂow into U and the ﬂow out of U .
Let F be a family of subsets of V closed under union and intersection and let b : F → Z ∪ {∞} be a function deﬁned on F. The function b is fully submodular on F if the inequality

b(X) + b(Y ) ≥ b(X ∩ Y ) + b(X ∪ Y )

(8.24)

holds for every choice of members X, Y of F. If (8.24) is only required to hold for intersecting (crossing) members of F, then b is intersecting (crossing) submodular on F. By an intersecting (crossing) pair (F, b) we mean a family F which is intersecting (crossing) and a function b which is submodular on intersecting (crossing) subsets of F.

8.8.1 Submodular Flow Models

Let f : A → Z ∪ {−∞} and g : A → Z ∪ {∞} be functions on the arc set of a directed multigraph D = (V, A). Let F be a family of subsets of V such that ∅, V ∈ F and let b : F → Z ∪ {∞} be fully submodular on F. A function x : A → R is a submodular ﬂow with respect to F if it satisﬁes

x−(U ) − x+(U ) ≤ b(U )

for all U ∈ F.

(8.25)

A submodular ﬂow x is feasible with respect to f, g if f (a) ≤ x(a) ≤ g(a) holds for all a ∈ A. The set of feasible submodular ﬂows (with respect to given f, g and (F, b) form a polyhedron called the submodular ﬂow polyhedron) Q(f, g; (F, b)) [259].
Submodular ﬂows were introduced by Edmonds and Giles in [215]. In that paper it was only required that the function b is crossing submodular on a crossing family F, something which gives much more ﬂexibility in applications (see Subsection 8.8.4). However, as remarked in [259] the crossing submodular functions deﬁne the same class of polyhedra as do fully submodular functions.
Submodular ﬂow polyhedra have very nice properties which makes submodular ﬂows a very powerful tool in combinatorial optimization (see e.g. Subsection 8.8.4).

Theorem 8.8.1 (The Edmonds-Giles theorem) [215] Let D = (V, A) be a directed multigraph. Let F be a crossing family of subsets of V such that ∅, V ∈ F, let b : F → Z ∪ {∞} be crossing submodular on F with b(∅) = b(V ) = 0, and let f ≤ g be functions on A such that f : A → Z ∪{−∞} and g : A → Z ∪ {∞}. The linear system

{f ≤ x ≤ g and x−(U ) − x+(U ) ≤ b(U )

for all U ∈ F} (8.26)

8.8 Submodular Flows 453

is totally dual integral. That is, if f, g, b are all integer valued, then the linear program min {cT x : x satisﬁes (8.26)} has an integer optimum solution
(provided it has a solution). Furthermore, if c is integer valued, then the dual
linear program has an integer valued optimum solution (provided it has a so-
lution).

In the deﬁnition of a submodular ﬂow, we have followed Frank [254, 255, 259, 263, 264, 274] and Schrijver [655]. Sometimes the deﬁnition of a submodular ﬂow is slightly diﬀerent (see e.g. the original paper by Edmonds and Giles [215] or the book by Fujishige [280]), namely x is required to satisfy

f ≤ x ≤ g and x+(U ) − x−(U ) ≤ b(U )

for all U ∈ F. (8.27)

There is really no diﬀerence in these two deﬁnitions, since we see that if x satisﬁes (8.26), then −x satisﬁes (8.27) with respect to the same submodular function b and the bounds −g ≤ − f .
One can also use supermodular functions in the deﬁnition as shown in the next lemma. Hence there are several models to choose from when one wants to model a problem as a submodular ﬂow problem. Depending on the problem at hand, one model may be easier to use than another. For an illustration of this see Section 8.8.4, where we use several diﬀerent deﬁnitions.

Lemma 8.8.2 Let D = (V, A) be a directed multigraph and let F be a crossing family of subsets of V such that ∅, V ∈ F. If p is a crossing supermodular function on F with p(∅) = p(V ) = 0, then any x : A → R which satisﬁes

x−(U ) − x+(U ) ≥ p(U )

for all U ∈ F

(8.28)

is a submodular ﬂow.

Proof: To see this, observe that the function b(U ) = −p(U ) is crossing
submodular on the crossing family F deﬁned as the complements of sets in F. Furthermore, by (8.23), (8.28) is equivalent to x−(U ) − x+(U ) ≤ −p(U ) =
b(U ) for all U ∈ F.

8.8.2 Existence of Feasible Submodular Flows

The following theorem, characterizing when a feasible submodular ﬂow exists with respect to functions f, g and b, is due to Frank:

Theorem 8.8.3 (Feasibility theorem for fully submodular ﬂows)
[254] Let D = (V, A) be a directed multigraph, let f ≤ g be modular func-
tions on A such that f : A → Z ∪ {−∞} and g : A → Z ∪ {∞} and let b be a fully submodular function on 2V . There exists an integer valued feasible
submodular ﬂow if and only if

f −(U ) − g+(U ) ≤ b(U )

for all U ⊆ V.

(8.29)

In particular there exist a feasible integer valued submodular ﬂow if and only if there exists any feasible submodular ﬂow.

454 8. Orientations of Graphs

Proof: We follow the proof by Frank in [259]. Suppose ﬁrst that there exists a feasible submodular ﬂow x. Then we have f −(U )−g+(U ) ≤ x−(U )−x+(U ) ≤
b(U ), showing that (8.29) holds.
Suppose now that (8.29) holds. Deﬁne the set function p as follows

p(U ) = f −(U ) − g+(U ).

(8.30)

Claim: The function p is fully supermodular, that is, p(U ) + p(W ) ≤ p(U ∩ W ) + p(U ∪ W ) for all U, W ⊆ V . Furthermore, equality only holds if f (a) = g(a) for all arcs with one end in U − W and the other in W − U . Proof of Claim: Since f and g are modular as set functions, we get, by considering the contribution of each arc in A:

p(U ) + p(W ) = (f −(U ) − g+(U )) + (f −(W ) − g+(W )) = (f −(U ) + f −(W )) − (g+(U ) + g+(W )) = (f −(U ∩ W ) + f −(U ∪ W ) + f (U, W )) −(g+(U ∩ W ) + g+(U ∪ W ) + g(U, W ))
= (p(U ∩ W ) + p(U ∪ W )) − (g(U, W ) − f (U, W )),

where f (U, W ) counts the f values on arcs with one end in U − W and the other in W − U 18.
From this it follows that p is supermodular (since f ≤ g) and that equality only holds if f (a) = g(a) for all arcs with one end in U − W and the other in W − U . This completes the proof of the claim.
An arc a ∈ A is tight if f (a) = g(a) and a subset U ⊂ V is tight if p(U ) = b(U ). Suppose that there is no feasible ﬂow with respect to f, g and b in D and that f, g are chosen so that the number of tight arcs plus the number of tight sets is maximum.
If every arc a ∈ A is tight, then take x(a) = f (a) = g(a) for every a ∈ A. Now we have x−(U ) − x+(U ) = f −(U ) − g+(U ) ≤ b(U ) and hence x is a feasible submodular ﬂow in D, a contradiction.
Hence we may assume that there is some arc a0 such that f (a0) < g(a0). Suppose that there is no tight set which is entered by a0. Then we can increase f (a0), until either the new value f (a0) equals g(a0), or we ﬁnd a tight set U (with respect to f , g) which is entered by a0. It follows that the new functions f , g have a higher count of tight arcs plus tight sets. Hence, by the choice of f, g, there exists a feasible submodular ﬂow x with respect to f , g. Obviously x is also feasible with respect to f, g, contradicting the assumption. Hence the arc a0 must enter a tight set U .
Similarly we can prove (by lowering g otherwise) that the arc a0 must also leave some tight set W . Now we have, using the Claim, (8.29) and the fact that p(U ) = b(U ), p(W ) = b(W ):
18 Again this deﬁnition generalizes the corresponding deﬁnition of d(X, Y ) in Chapter 7.

8.8 Submodular Flows 455
p(U ∩ W ) + p(U ∪ W ) ≥ p(U ) + p(W )
= b(U ) + b(W )
≥ b(U ∩ W ) + b(U ∪ W )
≥ p(U ∩ W ) + p(U ∪ W ),
implying that equality holds everywhere above. However this contradicts the second part of the Claim since f (a0) < g(a0) and we have argued that the arc a0 leaves U and enters W . This contradiction completes the proof.
Note that the special case of Theorem 8.8.3 when b ≡ 0 says that x−(U )− x+(U ) = 0 for all subsets U ⊆ V . In particular x−(v) = x+(v) for all v ∈ V . That is, every feasible submodular ﬂow with respect to f, g and b ≡ 0 is circulation and conversely. It is easy to see that the characterization in Theorem 8.8.3 in the case b ≡ 0 is exactly the condition in Hoﬀman’s circulation Theorem (Theorem 3.8.2).
In fact, the proof of Theorem 8.8.3 in some sense resembles that of Theorem 3.8.2. Thus it is natural to ask how easy it is to ﬁnd a feasible solution, or detect that none exists. This can be read out of the proof above: the essential step is to decide whether an arc enters or leaves a tight set (or both). This requires that we can ﬁnd min{b(U ) − p(U ) : a ∈ (U, U )} and min{b(U ) − p(U ) : a ∈ (U , U )} for every arc a of the directed multigraph D. This is a special case of the problem of minimizing a submodular function, that is, ﬁnding the minimum value of the submodular function in question over a prescribed family of sets. This can be done in polynomial time for arbitrary submodular functions using the ellipsoid method as shown by Gr¨otschel, Lov´asz, and Schrijver [338]. However, the ellipsoid method, though polynomial, is not of practical use, since it is highly ineﬃcient.
It was an open problem for several decades whether there exists a polynomial combinatorial algorithm for minimizing a submodular function b over a family F, that is, to ﬁnd min{b(U ) : U ∈ F}. For submodular functions which are symmetric (that is, b(X) = b(V − X)) Queyranne [617] has given such a polynomial algorithm (Nagamochi and Ibaraki proved a slightly more general result [582]). Queyranne’s algorithm is a generalization of the algorithm by Nagamochi and Ibaraki [580] for ﬁnding the edge-connectivity of a graph via maximum adjacency orderings which was mentioned in Section 7.4. Recently Schrijver [660] solved the problem completely by describing a strongly polynomial time algorithm for minimizing an arbitrary submodular function given by a value-giving oracle. Schrijver’s algorithm does not use the ellipsoid method or any other linear programming method. A similar result was obtained independently by Iwata, Fleischer and Fujishige [447].
It should be noted that even though the special problem we described above of ﬁnding the minimum of b(U ) over those U ∈ F that contain either the head or the tail, but not both, of a ﬁxed arc a ∈ A, and b is fully

456 8. Orientations of Graphs

submodular seems to be a very special case of the problem of minimizing an arbitrary submodular function, it is in fact equivalent to that problem. Let F be a crossing family on a ground-set S and let b be a crossing submodular function on F. Let D be the complete directed multigraph on the vertex set S. Let Fuv = {X ∈ F : u ∈ X, v ∈ X}. Then Fuv is a crossing family and clearly

min{b(X) : X ∈ F } = min{min{b(Y ) :∈ Fuv} : u, v ∈ S}.

(8.31)

Hence if we have a polynomial algorithm to minimize arbitrary submodular functions over families of the type Fuv, then there is one for arbitrary crossing families.
As mentioned earlier, one can also deﬁne submodular ﬂows for functions b that are intersecting, respectively crossing, submodular functions (deﬁned on a family of subsets of the directed multigraph D which is intersecting, respectively crossing). In the case of intersecting and in particular for crossing submodular ﬂows the feasibility theorem is much more complicated. A collection U1, U2, . . . , Uk of subsets of a ground set S are co-disjoint if their complements are pairwise disjoint (that is, Ui ∪ Uj = S for all i = j). Frank proved the following two feasibility theorems for intersecting and crossing submodular ﬂows:

Theorem 8.8.4 (Feasibility theorem for intersecting submodular ﬂows) [255] Let D = (V, A) be a directed multigraph and let f, g be real valued modular functions such that f ≤ g. Let F be an intersecting family of subsets of V such that ∅, V ∈ F and let b be an intersecting submodular function on F . Then there exists a feasible submodular ﬂow with respect to f, g and b if and only if

t tt
f −( Xi) − g+( Xi) ≤ b (Xi)
i=1 i=1 i=1

(8.32)

holds whenever X1, X2, . . . , Xt are disjoint members of F . Furthermore, if f, g, b are all integer valued functions and (8.32) holds, then there exists a
feasible integer valued submodular ﬂow with respect to f, g and b .

Theorem 8.8.5 (Feasibility theorem for crossing submodular ﬂows)

[255] Let D = (V, A) be a directed multigraph and let f, g be real valued

modular functions such that f ≤ g. Let F be a crossing family of subsets of

V such that ∅, V ∈ F and let b be a crossing submodular function on F .

Then there exists a feasible submodular ﬂow with respect to f, g and b if and

only if

t t t qi

f −( Xi) − g+( Xi) ≤

b (Xij )

(8.33)

i=1 i=1 i=1 j=1

8.8 Submodular Flows 457
holds for every subpartition {X1, X2, . . . , Xt} of V such that each Xi is the intersection of co-disjoint members Xi1, Xi2, . . . , Xiqi of F . Furthermore, if f, g, b are all integer valued functions and (8.33) holds, then there exists a feasible integer valued submodular ﬂow with respect to f, g and b .
Finding a feasible submodular ﬂow or a conﬁguration which shows that none exists is much more diﬃcult than ﬁnding a feasible circulation in a network (recall Section 3.8). Frank [255] gave a combinatorial algorithm for ﬁnding a feasible integer valued submodular ﬂow with respect to bounds f, g and a pair (F, b) which is either intersecting or crossing submodular. The algorithm is polynomial provided one has an algorithm for minimizing the involved submodular functions. For this task we can apply the recent algorithms of Schrijver and Iwata, Fleischer and Fujishige which we mentioned above.
8.8.3 Minimum Cost Submodular Flows
Let D = (V, A) be a directed multigraph and let f : A → Z ∪ {−∞}, g : A → Z ∪ {∞} be functions on the arc set of D. Let c : A → R be a cost function on the arcs of D. Let B ⊆ 2V be a crossing family with ∅, V ∈ B. Let b : 2V → Z ∪{∞} be crossing submodular on B with b(∅) = b(V ) = 0. Denote the network deﬁned by D and these functions by NS = (V, A, f, g, (B, b), c). The minimum cost submodular ﬂow problem is as follows:

Minimize

c(a)x(a)

a∈A
subject to

x−(U ) − x+(U ) ≤ b(U )

f (a) ≤ x(a) ≤ g(a)

for all U ∈ B for all a ∈ A.

A feasible submodular ﬂow with respect to f, g and b which achieves this minimum is called an optimal submodular ﬂow in NS.
This problem, which again generalizes the minimum cost circulation problem from Chapter 3, is very interesting because it forms a common extension of many problems on (di)graphs as well as problems from other areas (see e.g. the book [280] by Fujishige). Recall also Theorem 8.8.1.
Fujishige proved the following (see also the papers [170] by Cunningham and Frank and Frank’s paper [254]):
Theorem 8.8.6 [281] The minimum cost submodular ﬂow problem can be solved in polynomial time provided a polynomial algorithm for minimizing the relevant submodular functions is available.

458 8. Orientations of Graphs

8.8.4 Applications of Submodular Flows
In this section we will illustrate the usefulness of submodular ﬂows as a tool to obtain short proofs of important results as well as algorithms for various connectivity problems.
We start with Nash-Williams’ orientation theorem (Theorem 8.6.3). The approach taken is due to Frank [256] (the same idea was used by Jackson [451]). Let G = (V, E) be an undirected graph. Let D be an arbitrary orientation of G. Clearly G has a k-arc-strong orientation if and only if it is possible to reorient some arcs of D so as to get a k-arc-strong directed multigraph. Suppose we interpret the function x : A → {0, 1} as follows: x(a) = 1 means that we reorient a in D and x(a) = 0 means that we leave the orientation of a as it is in D. Then G has a k-arc-strong orientation if and only if we can choose x so that the following holds:

d−D(U ) + x+(U ) − x−(U ) ≥ k This is equivalent to

for all ∅ = U ⊂ V.

(8.34)

x−(U ) − x+(U ) ≤ (d−D(U ) − k) = b(U )

for all U ⊂ V, U = ∅, V, (8.35)

b(∅) = b(V ) = 0.

(8.36)

Observe that the function b is crossing submodular on F = 2V (it is not

fully submodular in general, since we have taken b(∅) = b(V ) = 0). Thus we

have shown that G has a k-arc-strong orientation if and only if there exists

a feasible integer valued submodular ﬂow in D with respect to the functions

f ≡ 0, g ≡ 1 and b.

Suppose now that G is 2k-edge-connected, that is, dG(X) ≥ 2k for all

proper

non-empty

subsets

of

V.

We

claim

that

x

≡

1 2

is

a

feasible

submodular

ﬂow. This follows from the following calculation:

d−D(U )

+

x+(U )

−

x−(U )

=

d−D(U )

+

1 2

d+D

(U

)

−

1 2

d−D

(U

)

=

1 2

d−D

(U

)

+

1 2

d+D

(U

)

≥

1 2

(2k

− d+D(U )) +

1 2

d+D

(U

)

= k.

Hence it follows from the integrality statement of Theorem 8.8.5 and the equivalence between (8.34) and (8.35) that there is a feasible integer valued submodular ﬂow x in D with respect to f, g and b. As described above this implies that G has a k-arc-strong orientation where the values of x prescribe which arcs to reverse in order to obtain such an orientation from D.

8.8 Submodular Flows 459
Notice that by formulating the problem as a minimum cost submodular ﬂow problem, we can also solve the weighted version where the two possible orientations of an edge may have diﬀerent costs and the goal is to ﬁnd the cheapest k-arc-strong orientation of the graph (Exercise 8.64). By Theorem 8.8.6, the optimal (minimum cost feasible) submodular ﬂow in D with respect to the functions f ≡ 0, g ≡ 1 and b (as deﬁned in (8.35)) can be found in polynomial time (see Exercise 8.63).
The following useful result, mentioned by Frank in [254], follows from the discussion above and Theorem 8.8.6
Corollary 8.8.7 [254] There is a polynomial algorithm for ﬁnding the minimum number of arcs to reverse in a directed multigraph D in order to obtain a k-arc-strong reorientation of D.
Similarly, combining the discussion above with Frank’s algorithm for ﬁnding a feasible submodular ﬂow (or deciding that none exists) with respect to a crossing submodular function, we obtain the following result (see Exercise 8.39 for a diﬀerent proof based on Lov´asz’s splitting theorem):
Corollary 8.8.8 [254] There is a polynomial algorithm for ﬁnding a k-arcstrong orientation of a given undirected multigraph G or verify that G has no such orientation.
The following theorem by Frank can also be derived from the formulation of the k-arc-strong orientation as a submodular ﬂow problem (see Fujishige’s book [280]).
Theorem 8.8.9 [253] If D and D are k-arc-strong orientations of an undirected graph G, then there exists a sequence of k-arc-strong orientations D = D0, D1, . . . , Dr = D of G such that for each i = 1, 2, . . . , r, Di is obtained from Di−1 by reversing all arcs in a directed path or a directed cycle.
Frank [253] gives a direct and short proof of this without using submodular ﬂows, but his proof uses submodular arguments (see Exercises 8.47-8.50).
In [275] Frank and Tard´os showed how to reduce the following problem to a submodular ﬂow problem. Given a directed graph D = (V, A) and a special vertex s, ﬁnd a minimum set of new arcs to add to D such that the resulting directed multigraph contains k internally disjoint paths from s to v for every v ∈ V − s. The similar problem where we only want arc-disjoint (s, v)-paths is solvable via matroid intersection algorithms (see Exercise 9.57). In the special case when D has already k − 1 arc-disjoint (s, v)-path for all v ∈ V the problem can also be solved by the Frank-Fulkerson algorithm, which is discussed in Section 9.11.

460 8. Orientations of Graphs

As another prominent illustration of the generality of submodular ﬂows, let us now show how the Lucchesi-Younger theorem on coverings of arcdisjoint directed cuts19 (Theorem 7.15.2 ) can be proved using a formulation of the problem as a minimum cost submodular ﬂow problem and the duality theorem for linear programming. This application of submodular ﬂows was ﬁrst pointed out by Edmonds and Giles [215].
We wish to ﬁnd a minimum set of arcs which cover all directed cuts in D. We assume that D is connected, since otherwise some dicut has no arcs at all and clearly no cover exists (recall Section 7.15). Let x : A → {0, 1} and let us interpret the value of x(a) as follows. If x(a) = 1 then we choose a to be in the cover and otherwise (if x(a) = 0) a is not chosen. Since the set of chosen arcs must cover all directed cuts, we have the requirement

x−(W ) ≥ 1

for all ∅ = W ⊂ V such that d+D(W ) = 0.

(8.37)

Let F = {W : d+D(W ) = 0}. Then ∅, V ∈ F and (8.37) is equivalent to

x+(W ) − x−(W ) ≤ b(W )

for all W ∈ F ,

(8.38)

where b(∅) = b(V ) = 0 and b(W ) = −1 for all W ∈ F − {∅, V }. By our remark on diﬀerent formulations of submodular ﬂow problems,
we see that this (having the form of (8.27)) is indeed a submodular ﬂow formulation. Hence by assigning cost one to each arc we can formulate the problem of ﬁnding an optimal cover of the directed cuts as the following minimum cost submodular ﬂow problem (in the form of (8.27)).

LY : Minimize

x(a)

a∈A
subject to x−(W ) ≥ 1

0 ≤ x(a) ≤ 1

for all W ∈ F − {∅, V } for all a ∈ A.

Taking dual variables yW for each member W of F and (a) for each arc a ∈ A, we get that the dual of LY is

LY∗ : Maximize

yW −

(a)

W ∈F −{∅,V }

a∈A

subject to

− (a) +

yW ≤ 1

a∈(W ,W )

yW ≥ 0

for all W ∈ F

for all a ∈ A

19 Recall from Chapter 7 that a directed cut is a set of arcs of the form (U, V − U ) where d−(U ) = 0.

8.8 Submodular Flows 461

(a) ≥ 0

for all a ∈ A.

Eliminate the variables (a) from LY∗ and notice that, if yW = 0 for all members W ∈ F which are entered by a, then the optimal choice for (a) is (a) = 0. We get that LY∗ is equivalent to the problem

LY∗∗ : Maximize

yW + min{0, [1 −

yW ]}(8.39)

W ∈F −{∅,V }

a∈A

a∈(W ,W )

subject to

yW ≥ 0

for all W ∈ F.

(8.40)

By the Edmonds-Giles theorem, there exist an integer valued optimum solution {yW : w ∈ F } ∪ { (a) : a ∈ A} to LY∗ and hence to L∗∗. Notice that, if some variable yW in such a solution is 2 or more, then we can decrease its value to 1 without changing the value of the objective function in (8.39). Hence there exists an optimal solution to LY∗∗ in which all values are 0 or 1.
It follows from the optimality of the solution that, if yW = yW = 1, then we can assume that no arc enters both of W, W (otherwise we may put yW = 0 without changing the value of the objective function). This shows that the
cuts corresponding to the non-zero values of y are arc-disjoint and hence we
have shown that the size of an optimal cover equals the maximum number of
arc-disjoint directed cuts, which is exactly the statement of Theorem 7.15.2.
Furthermore, by Theorem 8.8.6, we obtain the following corollary:

Corollary 8.8.10 There exists a polynomial algorithm which given a directed multigraph D = (V, A) ﬁnds a minimum dijoin A ⊆ A of D.

Note that we can minimize the function b from (8.38) over a given collection of sets in polynomial time (using ﬂows). Namely, the minimum value is -1 if the collection contains a member of F and 0 otherwise.
It follows from the formulation of the minimum directed cut covering problem as a submodular ﬂow problem and Theorem 8.8.6 that we can also solve the minimum cost version of the problem even if there are non-uniform costs on the arcs and we want to ﬁnd a minimum cost cover of the directed cuts. Furthermore, we can also solve the problem of ﬁnding a set of arcs which cover each directed cut at least k times for each k (simply replace the number −1 by −k in (8.38)).
For much more material on submodular ﬂows the reader is referred to the papers [254, 255, 259, 263, 264] by Frank, [274] by Frank and Tardos, Fujishige’s book [280] and the paper [655] by Schrijver. In particular [274] and [280] give a lot of interesting results on the structure of submodular ﬂows and the relation between submodular ﬂows and other models such as independent ﬂows and polymatroidal ﬂows. Finally Schrijver’s paper [655] is a very useful overview of the various models and their interrelations.

462 8. Orientations of Graphs

8.9 Orientations of Mixed Graphs
We conclude this chapter with some remarks on the orientation of mixed graphs where the goal is to satisfy degree and/or connectivity requirements. Note that in this section a mixed graph may contain multiple edges and/or arcs. Also recall that when we speak of orienting a mixed (multi)graph this means that we assign an orientation to every edge and leave the original arcs unchanged (implying that the result may not be an oriented graph).
Orientation problems for mixed graphs are generally much harder than for undirected graphs. One illustration of this is displayed in Figure 8.11. This example, due to Tardos (see [263]), shows that the linking principle for strong connectivity orientations does not hold for general mixed graphs (compare this with Theorem 8.7.5).

a [0, 1]

b [0, 0]

[1, 1] c

[0, 1] d

Figure 8.11 A mixed graph M with prescribed lower and upper bounds on the desired in-degrees in the directed multigraph induced by the arc between a and c and the arc between b and d in an orientation D of M . It is easy to see that by orienting the edges ac, bd as a→c, d→b we obtain a strong orientation satisfying the lower bounds on the directed multigraph induced by the newly oriented arcs. Similarly if we orient the same edges as c→a, b→d we obtain a strong orientation which satisﬁes the upper bounds on the directed multigraph induced by the newly oriented arcs. However, there is no strong orientation which satisﬁes the lower and upper bounds simultaneously on the directed multigraph induced by the newly oriented arcs.

Not every 2k-arc-strong mixed graph has a k-arc-strong orientation (Exercise 8.54) but Jackson proved the following extension of Theorem 8.6.3. The proof is left to the reader as Exercise 8.53.

Theorem 8.9.1 [451] Let M = (V, A, E) be a mixed graph. Let G = (V, E) and D = (V, A) denote the undirected, respectively the directed part of M and deﬁne k by

k = min{

1 2

dG

(X

)

+ d+D(X) : X is a proper, non-empty subset of V }.

Then the edges of E can be oriented in such a way that the resulting directed multigraph is k-arc-strong.

8.9 Orientations of Mixed Graphs 463

It is not diﬃcult to see that one can formulate the problem of orienting a mixed graph so as to get a k-arc-strong directed multigraph as a submodular ﬂow problem. We can use the same approach as in Subsection 8.8.4. The only change is that we insist that x(a) = 0 for original arcs (Exercise 8.53).
Jackson [451] conjectured that Theorem 8.9.1 could be extended to local connectivities and hence providing a generalization of Nash-Williams’ strong orientation theorem (Theorem 8.6.4). However, examples by Enni [218] show that this conjecture is false. In the case when the directed part of M = (V, A, E) is eulerian such an extension is indeed possible. In [218] Enni shows how to extend Theorem 8.6.5 to the case of mixed graphs when the directed part D = (V, A) is eulerian.
We remark that there seems to be no easy way of formulating orientation problems concerning local connectivities as submodular ﬂow problems.
When we consider orientation problems where the input is a mixed graph M = (V, A, E) which we wish to orient so as to satisfy a certain lower bound h(X) on the in-degree of every subset X of vertices, then we cannot in general apply a theorem like Frank’s orientation theorem (Theorem 8.7.6). The reason for this is that even if the function h(X) ‘behaves nicely’, we have to take into account the arcs in A because these will contribute to the in-degree of the ﬁnal oriented graph D . To give an example, consider a mixed graph M = (V, A, E) and let h(X) = k for all non-empty proper subsets of V and h(∅) = h(V ) = 0. That is, we are looking for a k-arc-strong orientation of M . When we want to apply a theorem like Theorem 8.7.6 we have to consider the revised in-degree lower bound h given by h (X) = k −d−D(X), where D = (V, A) is the directed graph induced by the arcs already oriented in M . The function h is easily seen to be crossing G-supermodular, where G = (V, E) is the undirected part of M (Exercise 8.62). However h is typically negative on certain sets and hence Theorem 8.7.6 cannot be applied.
As we mentioned above, for the particular lower bound h(X) = k, whenever ∅ = X = V , the problem can be formulated as a submodular ﬂow problem. This is no coincidence as we show below.
Let G = (V, E) be an undirected graph. Let h : 2V → Z ∪ {−∞} be crossing G-supermodular with h(∅) = h(V ) = 0. Let D = (V, A) be an arbitrary but ﬁxed orientation of G. Let x : A(D)→{0, 1} be a vector and deﬁne an orientation D = (V, A ) of G by taking A = {a : a ∈ A, x(a) = 0} ∪ {←a : a ∈ A, x(a) = 1}. Here ←a denotes the opposite orientation of the arc a (compare with Section 8.8.4). Then D will satisfy

d−D (U ) ≥ h(U )

for all U ⊂ V

(8.41)

if and only if d−D(U ) − x−(U ) + x+(U ) ≥ h(U ) for all U ⊂ V , or equivalently

x−(U ) − x+(U ) ≤ d−D(U ) − h(U ) = b (U ) for all U ⊂ V.

(8.42)

464 8. Orientations of Graphs

Since d−D satisﬁes (7.2) and h is crossing G-supermodular20, we conclude that whenever U, W are crossing sets the following holds:

b (U ) + b (W ) = (d−D(U ) − h(U )) + (d−D(W ) − h(W )) = d−D(U ∩ W ) + d−D(U ∪ W ) + dG(U, W ) − (h(U ) + h(W )) ≥ d−D(U ∩ W ) + d−D(U ∪ W ) + dG(U, W ) − (h(U ∩ W )

+ h(U ∪ W ) + dG(U, W ))

= b (U ∩ W ) + b (U ∪ W ).

(8.43)

Thus the function b is crossing submodular on F = 2V − {∅, V } and the equivalence of (8.41) and (8.42) shows that there is a one to one correspondence between orientations satisfying (8.41) and integer valued solutions to the submodular ﬂow problem deﬁned by (8.42) and 0 ≤ x ≤ 1. This shows that we can use submodular ﬂow algorithms to solve the orientation problem. We can also derive a characterization of the existence of an orientation satisfying (8.41) from Theorem 8.8.5. We do this below as an illustration of how to use the feasibility theorem for crossing submodular ﬂows (Theorem 8.8.5).
Suppose there exists an integer valued feasible submodular ﬂow with respect to the crossing submodular function b deﬁned above. By (8.33) this means that

t t t qi

f −( Xi) − g+( Xi) ≤

b (Xij )

i=1 i=1 i=1 j=1

(8.44)

holds for every subpartition P = {X1, X2, . . . , Xt} of V such that each Xi is the intersection of co-disjoint subsets Xi1, Xi2, . . . , Xiqi of V .
We derive an expression that relates only to G and h using (8.44). To do so, it is helpful to study Figure 8.12.
Using that f ≡ 0 and g ≡ 1 and the deﬁnition of b we see that (8.44) is equivalent to

t t qi

−d+D( Xi) ≤

(d−D(Xij ) − h(Xij )).

i=1 i=1 j=1

(8.45)

For ﬁxed i the sum

qi j=1

d−D(Xij )

counts

the

following

arcs:

(1) Those arcs which enter Xi (the common intersection of all Xij’s) from its complement, plus

20 Note how we use the deﬁnition of a crossing G-supermodular function here to get rid of the contribution from edges with one end in X − Y and the other in Y − X.

8.9 Orientations of Mixed Graphs 465

Xi1
Xi2
Xi3
Xi4 Xi
Xi5
Xi
Figure 8.12 The situation when deriving Theorem 8.9.2 from Theorem 8.8.5. The set Xi is part of a subpartition P of V and Xi is the intersection of the ﬁve codisjoint sets Xi1, . . . , Xi5 whose complements (which form a partition of Xi) are indicated in the ﬁgure. The arcs shown are those between diﬀerent sets Xij, Xir (which are the same as those arcs that go between diﬀerent Xij’s!) and those arcs that enter Xi.

(2) those arcs which go between diﬀerent Xij’s (which is the same as arcs that go from some Xij to some other Xir). This is the same as the number of edges in G that go between two Xij’s. Denote the total number of edges of this kind in G by ei.
Using this observation we conclude that (8.45) is equivalent to

t t qi
d+D(∪ti=1Xi) + d−D(Xi) ≥ ( h(Xij ) − ei).
i=1 i=1 j=1

(8.46)

Finally, observe that the left hand side of (8.46) counts precisely those
edges of G which enter some Xi ∈ P. Now we have proved the following orientation theorem due do Frank:

Theorem 8.9.2 (Frank’s general orientation theorem) [259] Let G =

(V, E) be an undirected graph. Let h : 2V → Z ∪ {−∞} be crossing G-

supermodular with h(∅) = h(V ) = 0. There exists an orientation D of G

satisfying

d−D(X) ≥ h(X)

for all X ⊂ V

(8.47)

if and only if

t qi
eP ≥ ( h(Xij) − ei)
i=1 j=1

(8.48)

holds for every subpartition P = {X1, X2, . . . , Xt} of V such that each Xi is the intersection of co-disjoint sets Xi1, Xi2, . . . , Xiqi . Here eP counts the

466 8. Orientations of Graphs
number of edges which enter some member of P and ei counts the number of edges which go between diﬀerent sets Xij, Xir.
By our previous remark on the function k − d−D, Theorem 8.9.2 can be used to derive a necessary and suﬃcient condition for the existence of a k-arc strong orientation of a mixed graph. This is left to the reader as Exercise 8.56.
One might ask whether such a complicated condition involving partitions and copartitions is really necessary in Theorem 8.9.2. The following example due to Frank [263] shows that one cannot have a condition which only involves partitions or subpartitions.
X1
ab

X3 c

d X2

Figure 8.13 Frank’s example showing that no (sub)partition type condition for the existence of an orientation satisfying (8.47) exists.
Let G = (V, E) be the graph in Figure 8.13 and let the sets X1, X2, X3 be as deﬁned there. Deﬁne h by h(∅) = h(V ) = 0, h(X1) = h(X3) = 1, h(X2) = 2 and h(X) = −∞ for all other subsets of V . Then h is crossing G-supermodular since no two crossing sets X, Y have h(X), h(Y ) > −∞. It is easy to check that G has no orientation satisfying (8.47) with respect to h. On the other hand, if we decrease h(Xi) by one for any i = 1, 2, 3, then there exists a feasible orientation with respect to the new hi. This shows that every certiﬁcate for the non-existence of an orientation with respect to h must include all the sets X1, X2, X3. It is easy to see that these three sets neither form a subpartition nor do they form a co-partition.
The example from Figure 8.13 also shows that there is no 2-arc-strong orientation of the mixed graph in Figure 8.14. Hence even for orientations of mixed graphs to obtain a uniform degree of arc-strong connectivity we cannot hope for a much simpler condition.
Since we derived Theorem 8.9.2 from Theorem 8.8.5, it is possible to get a simpler characterization if one can ﬁnd such a characterization of feasibility of submodular ﬂows with respect to a crossing pair (F , b ). This was done

8.10 Exercises 467 ab

cd
Figure 8.14 A mixed graph which has no 2-arc-strong orientation and for which every certiﬁcate for the non-existence of such an orientation must involve the three sets {a}, {b, d}, {a, b, c} [263, Figure 2.3].
recently by Frank in [263] where a somewhat simpler (but still far from easy) characterization was found.

8.10 Exercises

8.1. Prove Lemma 8.1.16.

8.2. Show how to check whether an undirected graph is bipartite in linear time using BFS. Does your method extend to strongly connected digraphs? That is, can you check whether a strong digraph is bipartite using BFS? Hint: consider the proof of Theorem 1.8.1.

8.3. Show that, if a locally semicomplete digraph D contains a 2-cycle xyx, then the edge xy is balanced in U G(D).

8.4. (+) Lexicographic 2-colouring gives a transitive orientation of comparability graphs. Prove Theorem 8.1.4.

8.5. Prove that, if G is a reduced proper circular-arc graph, then, up to reversing the orientation of all arcs, G has a unique orientation as a round local tournament.

8.6. (+) Linear algorithm for recognizing round local tournaments. Prove that there is an O(n+m) algorithm which either ﬁnds a round labelling of an oriented graph D or decides that D is not a round local tournament (Huang [436]).

8.7. Prove Theorem 8.1.8.

8.8. Using the same approach as in the proof of Proposition 8.1.15 formulate the instance of 2-SAT which corresponds to the oriented graph D in Figure 8.15. Show that U G(D) has no orientation as a locally in-tournament digraph.

8.9. An orientation characterization of proper interval graphs. A straight

enumeration of an oriented graph is a linear ordering v1, v2, . . . , vn such

that for each i and dominates

the vertex vi+1, vi+2,

vi is dominated by . . . , vi+d+(vi). Here

ivni−didc−e(svia)r,evin−odt−(mvio)+d1u,lo.

.., n,

vi−1 that

is, 1 ≤ i − d−(vi) and i + d+(vi) ≤ n for each i = 1, 2, . . . , n. A digraph

is straight if it has a straight enumeration (Deng, Hell and Huang [190]).

468 8. Orientations of Graphs 2
3 1

6 5

7

48
Figure 8.15 An oriented graph D.
A graph is a proper interval graph if it is the intersection graph of an inclusion-free family of intervals on the real line. (a) Prove that, if D has a straight enumeration, then D is an acyclic round
local tournament digraph. (b) Prove that an undirected graph G is a proper interval graph if and only
if it has a straight orientation. Hint: compare this with Theorem 8.1.6.
8.10. (+) Recognizing locally semicomplete digraphs in O(n2) time. Extend the results from Section 8.2 to locally semicomplete digraphs. Hint: use Exercise 8.3.(Bang-Jensen, Hell and Huang [76]).
8.11. Recognizing non-strong locally semicomplete digraphs in linear time. Give a simple linear algorithm to recognize non-strong locally semicomplete digraphs based on Theorem 4.11.6 (Bang-Jensen, Hell and Huang [76]).
8.12. (+) Adjacencies between induced cycles in graphs that are representable in unicyclic graphs. Suppose that the undirected graph G is representable in the unicyclic graph H. Prove that, if C is an induced cycle of length at least 4 in G, then every vertex x of C is adjacent to at least one vertex from every induced cycle of length at least 4 in G − x.
8.13. Derive Theorem 8.4.1 from Theorem 8.4.3.
8.14. (+) Acyclic orientations such that every vertex is on an (s, t)-path. Let G = (V, E) be an undirected graph. Let s, t be special vertices and assume that, if G has a cut-vertex, then every cut-vertex v of G separates G − v into two connected components, one containing s and one containing t. Prove that G has an acyclic orientation D such that every vertex of D is on an (s, t)-path (Gerards and Shepherd [313]).
8.15. Strong orientations of the Petersen graph contain an even cycle. Prove that every strongly connected orientation of the Petersen graph has an even cycle.
8.16. Strong orientations of odd-K4’s and odd necklaces contain even cycles. Prove Lemma 8.3.2.
8.17. Undirected graphs without even cycles. Describe the structure of those connected undirected graphs that have no even cycle.

8.10 Exercises 469
8.18. Graphs with strong orientations without even cycles and with the maximum number of vertices. Prove that the graph Ln deﬁned in Section 8.3 has a strong orientation without even cycles.
8.19. (−) Prove that Theorem 8.4.3 implies that every strong tournament has a hamiltonian cycle.
8.20. 3-colouring the Petersen graph. Find an orientation of the Petersen graph which has no directed path of length 3. Use this to ﬁnd a 3-colouring of the Petersen graph by colouring as in the proof of Theorem 8.4.1.
8.21. Figure 8.16 shows a graph G known as the Gr¨otzsch graph. Prove that every orientation of G has a path of length 3. Find an orientation D of G such that lp(D) = 3. Finally, show that, if e is any edge of G, then we can ﬁnd an orientation of G − e with no path of length 3.
Figure 8.16 The Gr¨otzsch graph.
8.22. Prove that, if a connected graph G has a k-ﬂow (D, x) for some k, then D is strongly connected.
8.23. Prove that a cubic graph is 3-edge-connected if and only if it is 3-connected. 8.24. (+) Prove that the Petersen graph has no 4-ﬂow. 8.25. Hamiltonian graphs have a 4-ﬂow. Prove that every hamiltonian graph
has a 4-ﬂow. Hint: use Theorem 8.5.6. 8.26. Find a 4-ﬂow in the cubic graph in Figure 8.17. 8.27. Converting a Zk-ﬂow to a k-ﬂow. The proof of Theorem 8.5.3 gives rise
to a polynomial algorithm to convert a given Zk-ﬂow to a k-ﬂow. Describe such an algorithm and illustrate it by converting the Z5-ﬂow in the Petersen graph in Figure 8.18 to a 5-ﬂow. 8.28. (+) Prove Theorem 8.5.6. Hint: deﬁne a Z2 × Z2-ﬂow from G1, G2 and vice versa. 8.29. Show that that the complete graph on 4 vertices is 3-edge-colourable and has no 3-ﬂow. 8.30. (+) Three spanning trees with no common edges in graphs which are 3-edge-connected. Prove that every 3-edge-connected graph has 3

470 8. Orientations of Graphs

Figure 8.17 A hamiltonian cubic graph

2 1

2 1
1 2

2

1 12

1

22

1

1

Figure 8.18 A Z5-ﬂow in the Petersen graph.

spanning trees T1, T2, T3 with the property that E(T1) ∩ E(T2) ∩ E(T3) = ∅. Hint: use Theorem 9.5.5.
8.31. (+) Jaeger’s 8-ﬂow theorem. Prove, without using Theorem 8.5.10, that every 2-edge-connected graph G has an 8-ﬂow. Hint: ﬁrst observe that it suﬃces to prove the statement for 3-edge-connected graphs. By Exercise 8.30, G has three spanning trees such that no edge lies in all of these. Use this to construct a Z2 × Z2 × Z2-ﬂow in G (compare this with the proof of Theorem 8.5.7).
8.32. A minimum counterexample to Tutte’s 5-ﬂow conjecture has no 3cycle. Show that, if G is cubic 3-edge-connected and C is a 3-cycle of G, then the graph H obtained by contracting C to one vertex v in G and deleting the loops created is also cubic and 3-edge-connected. Show that every 5-ﬂow in H can be extended to a 5-ﬂow in G.
8.33. Show by an example that the idea of Exercise 8.32 does not always work for cycles longer than 5.
8.34. (−) Nash-Williams’ strong orientation theorem for eulerian multigraphs. Prove Theorem 8.6.4 for eulerian graphs. Hint: consider an eulerian tour.
8.35. Almost balanced k-arc-connected orientations. Prove the following slight extension of Nash-Williams’ orientation theorem. If G = (V, E) is 2kconnected, then it has a k-arc-strong orientation D such that max{|d+D(x) −

8.10 Exercises 471
d−D(x)| : x ∈ V (D)} ≤ 1. Hint: follow the proof of Theorem 8.6.3 and change it appropriately when needed.
8.36. (+) Vertices of degree k in minimally k-edge-connected graphs. Prove that every minimally k-edge-connected graph contains a vertex of degree k. Hint: use the results analogous to Proposition 7.1.1 for undirected graphs.
8.37. (+) Lov´asz’s splitting theorem for undirected edge-connectivity. Prove Theorem 8.6.1. Hint: deﬁne a set of vertices X not containing the special vertex s to be k-dangerous if d(X) ≤ k + 1. Clearly a splitting (su, sv) preserves k-edge-connectivity unless there is some k-dangerous set X ⊂ V with u, v ∈ X. Observe that the degree function of an undirected graph has properties analogous to Proposition 7.1.1. Use this to show that there are at most two distinct maximal k-dangerous sets X, Y which contain a given neighbour t of s. Let X, Y be distinct maximal k-dangerous sets containing t but not s if such sets exist. Otherwise, either let X be the unique maximal k-dangerous set containing t but not s and Y = ∅ or, if no k-dangerous sets containing t but not s exists, then take X = Y = ∅. Conclude that s has a neighbour t in V − (X ∪ Y ) and show that (st, st ) is an admissible splitting.
8.38. (+) Splittings that do not create cut-edges. Prove the following result due to Fleischner [239]. If G is a 2-edge-connected undirected graph and s is a vertex of degree at least 4, then there exist neighbours u, v of s such that replacing the edges su, sv by one edge uv results in a graph which is 2-edge-connected. Hint: this follows from Theorem 8.6.1 if dG(s) is even. If dG(s) is odd, then study maximal 2-dangerous sets containing neighbours of s (see also the hints for Exercise 8.37).
8.39. (+) A polynomial algorithm for ﬁnding a k-arc-strong orientation of a 2k-edge-connected multigraph. Convert the proof of Theorem 8.6.3 into a polynomial algorithm which ﬁnds a k-arc-strong orientation of an arbitrary input multigraph, or outputs a proof that none exists.
8.40. Prove Corollary 8.7.4.
8.41. (+) Show how to derive Theorem 8.7.1 from Theorem 3.8.4.
8.42. Show how to convert the proof of Theorem 8.7.3 into a polynomial algorithm which either ﬁnds an orientation with the desired property, or a set violating the corresponding necessary condition.
8.43. Show how to derive Theorem 8.7.3 using the approach taken in the beginning of Subsection 8.7.1 and Exercise 3.32.
8.44. Prove that Theorem 8.7.3 implies Hall’s theorem (Theorem 3.11.3).
8.45. Prove that the condition in Conjecture 8.6.7 is necessary in order to have a k-strong orientation.
8.46. Reversing the orientation of a cycle preserves arc-strong connectivity. Prove that, if D is k-arc-strong and C is a cycle in D, then the digraph obtained by reversing the orientation of all arcs on C is also k-arc-strong.
8.47. (+) Converting one k-arc-strong orientation into another via reversal of cycles. Suppose that D and D are k-arc-strong orientations of

472 8. Orientations of Graphs

G = (V, E) and that d−D(v) = d−D (v) for every v ∈ V . Prove that one can obtain D from D by successive reversals of the orientation of a cycle in the current digraph.

8.48. Reversal of a path while preserving k-arc-strong connectivity. Sup-

pose that D and D are k-arc-strong orientations of a graph G and that there

exists a vertex u such that d−D(u) < d−D (u). Show that D contains a vertex

v such that we obtain a

dn−Dew(v)k->ardc−D-st(rvo)nganodriaen(tua,tvio)n-poafthGPb.yUrnevdeerrsiwnhgatthceoanrdcistioofnPs

can ?

8.49. (+) Finding a good path to reverse. Suppose that D and D are k-

arc-strong orientations of a graph G and that there exists a vertex u such

that d−D(u) < d−D (u). Prove that there is always a vertex v such that

d−D P

(wvi)th>oudt −Dde(svt)roaynindgath(ue,

v)-path P such that one k-arc-strong connectivity.

can reverse all Hint: use your

arcs of obser-

vation in Exercise 8.48. Assume that all paths are bad. Use submodularity

of d−D to show that the maximal sets X1, X2, . . . , Xh containing v but not u and which have in-degree k in D are pairwise disjoint. Count those arcs

that have at most one end vertex in ∪hi=1Xi in both D and D and obtain a contradiction (Frank [253]).

8.50. Proof of Theorem 8.8.9. Combine your observations in Exercises 8.47, 8.48 and 8.49 into a proof of Theorem 8.8.9.

8.51. Show that Theorem 8.6.3 is a special case of Theorem 8.7.6.

8.52. Let D = (V, A) be a digraph and x : A → R a function on the arc set of D. Show that the function x−(U ) − x+(U ) is a modular function.

8.53. (+) Prove Theorem 8.9.1. Hint: use a similar approach to that used in Section 8.8.4 to prove Theorem 8.6.3 via submodular ﬂows.

8.54. Construct 2k-arc-strong mixed graphs with no k-arc-strong orientation. Hint: they must violate the condition in Theorem 8.9.1.

8.55. Prove directly that the condition (8.48) is necessary for the existence of an

orientation satisfying (8.47). Hint: assume that D is an orientation which

satisﬁes (8.47) and study which edges are counted by the sum

qi j=1

d−D

(Xij

).

8.56. (+) Orienting a mixed graph to be k-arc-strong. Use Theorem 8.9.2 to derive a necessary and suﬃcient condition for a mixed graph M = (V, A, E) to have a k-arc-strong orientation (Frank [259, 263]).

8.57. (+) Orientations containing k arc-disjoint out-branchings from a given root. Let G = (V, E) be an undirected graph with a special vertex s ∈ V and let k be a natural number. Prove without using Theorem 8.7.6 that G has an orientation such that d−(X) ≥ k for every X ⊆ V − s if and only if (9.5) holds (Frank [260]).

8.58. (+) Orienting a mixed graph in order to obtain many arc-disjoint branchings. Consider the problem of ﬁnding an orientation of a mixed graph M = (V, A, E) so that it has k arc-disjoint out-branchings rooted at a speciﬁedvertex s or concluding that no such orientation exist. Show how to reduce this problem to a submodular ﬂow problem. Argue that you can also solve the minimum cost version where there may be diﬀerent costs on the two possible orientations of an edge e ∈ E.

8.10 Exercises 473
8.59. (+) Arc-disjoint in- and out-branchings with a ﬁxed root in orientations of graphs. Describe an algorithm to decide whether a given undirected graph G = (V, E) has an orientation D such that there exist arc-disjoint inand out-branchings Fv+, Fu− where u, v ∈ V are speciﬁed (not necessarily distinct) vertices of V . Prove that the corresponding problem for mixed graphs is N P-complete. Hint: use Theorem 9.9.2.
8.60. (−) Characterize when an undirected graph G = (V, E) has an orientation so that x, y are in the same strong component for speciﬁed distinct vertices x, y ∈ V .
8.61. Orienting a mixed graph so as to get a closed trail containing two speciﬁed vertices. Show that the following problem is N P-complete: Given a mixed graph M = (V, A, E) and two distinct vertices s, t. Decide if M has an orientation that contains are-disjoint (s, t)-, (t, s)-paths.
8.62. Let M = (V, A, E) be a mixed graph and let D = (V, A) be the directed part of M . Prove that for every k the function k − d−D is crossing G-supermodular. Hint: use the fact that d−D is submodular.
8.63. Show how to minimize the submodular function b deﬁned by (8.35) and (8.36) over a given collection of subsets in polynomial time. Hint: use ﬂows to determine the in-degrees of the relevant sets.
8.64. Let k be a natural number and let G = (V, E) be a graph with a cost function c that for every edge e ∈ E assigns a cost to each of the two possible orientations of e. Show how to formulate the problem of ﬁnding a k-arcstrong orientation of G of minimum cost with respect to c as a minimum cost submodular ﬂow problem.
8.65. Reversing arcs in order to get many arc-disjoint out-branchings from a ﬁxed root. Show how to solve the following problem using submodular ﬂows. Given a directed multigraph D = (V, A), a vertex s ∈ V and a natural number k. Determine whether it is possible to reverse the orientation of some arcs in A such that the resulting directed multigraph has k arc-disjoint out-branchings rooted at s. Argue that one can also solve the minimum cost version of the problem in polynomial time.
8.66. Derive Theorem 8.7.6 from the feasibility theorem for crossing submodular ﬂows (Theorem 8.8.5).

9. Disjoint Paths and Trees
In this chapter we concentrate on problems concerning (arc)-disjoint paths or trees (arborescences). We embark from the 2-path problem which concerns the existence of two disjoint paths with prescribed initial and terminal vertices. We give a proof by Fortune et al. showing that the 2-path problem is N P-complete. We proceed by studying the more general k-path problem for various classes of digraphs. We show that for acyclic digraphs, the kpath problem is polynomially solvable when k is not a part of the input. Then we describe several results on the k-path problem for generalizations of tournaments. Among other results, we show that the 2-path problem is polynomially solvable for digraphs that can be obtained from strong semicomplete digraphs by substituting arbitrary digraphs for each vertex of the semicomplete digraph. We brieﬂy discuss the k-path problem for planar digraphs and indicate how to use the topological concept of planarity in proofs and algorithms for disjoint path problems in planar digraphs.
The next major topic is arc-disjoint branchings. We prove Edmonds’ famous branching theorem and show many consequences of this very important and useful result. After discussing some related problems on branchings, we move on to arc-disjoint path problems. We show that the arc-disjoint version of the k-path problem is also N P-complete as soon as k is at least 2. Using a nice observation due to Shiloach we show that, if a digraph does not contain two arc-disjoint paths, one from u to v and the other from x to y, for every choice of u, v, x, y, then D is not 2-arc-strong. Results on arc-disjoint paths in generalizations of tournaments as well as eulerian digraphs are described. We point out how the structural characterizations for non-2-linked eulerian digraphs resemble those for the analogous problems for undirected graphs.
We consider arc-disjoint in- and out-branchings and show that the problem to decide whether a digraph has arc-disjoint branchings Fv+, Fv− such that Fv− is an in-branching rooted at v and Fv+ is an out-branching rooted at v is N P-complete. We describe a complete solution, due to Bang-Jensen, of this problem for tournaments and indicate how the complexity version of the problem (for tournaments) is closely related to problems concerning weak linkings in tournaments. Namely, there is a polynomial algorithm for the branching problem which uses polynomial algorithms for two weak linking problems as subroutines.

476 9. Disjoint Paths and Trees
Finally, we discuss the problem of ﬁnding a minimum cost branching with a given root in a weighted digraph. We describe a generalization of this problem which also covers the case when one starts from a digraph which has k but not k + 1 arc-disjoint branchings from a given root s and the goal is to add as few new arcs as possible in order to obtain a new digraph which has k + 1 arc-disjoint out-branchings rooted at s. Then we give an algorithm due to Frank and Fulkerson for solving this more general version and show how the algorithm works when we apply it to the minimum cost branching problem.

9.1 Additional Deﬁnitions

Recall that an out-branching (in-branching) rooted at a vertex s in a digraph

D is a spanning oriented tree T which is oriented in such a way that every

vertex x = s has d−T (x) = 1 (d+T (x) = 1). In this chapter we will also consider the following generalization of a branching. An out-arborescence rooted at

s is an oriented tree T which is not necessarily spanning such that s ∈ V (T )

and every vertex x ∈ V (T ) − s has d−T (x) = 1. An in-arborescence with root s is deﬁned analogously.

Recall from Chapter 7 that for a digraph D = (V, A) with distinct vertices

x, y we denote by κD(x, y) the largest integer k such that D contains k internally disjoint (x, y)-paths. By Menger’s theorem κD(x, y) equals the size of a minimal (x, y)-separator.

When discussing intersections between paths P, Q we will often use the

phrase ‘let u be the ﬁrst (last) vertex on P which is on Q’. By this we mean

that if, say, P is an (x, y)-path, then u is the only vertex of P [x, u] (P [u, y])

which is also on Q.

In some sections it is also convenient to use the notation that for a given

set of arcs F and a set of vertices X of a digraph

rXesp(heecnticveeldy−Fd(+FX()Xi)s,

the number of arcs from F shorthand for d−D F (X)).

that

D we enter,

denote by d−F (X), respectively leave,

Let x1, x2, . . . , xk, y1, y2, . . . , yk be (not necessarily distinct) vertices of a directed multigraph D. A (weak) k-linking from (x1, x2, . . . , xk) to (y1, y2, . . . , yk) in D is a system of (arc-)disjoint paths P1, P2, . . . , Pk such that Pi is an (xi, yi)-path in D. By ‘disjoint’ we mean that no Pi contains any of the vertices xj, yj as internal vertices for j = i (but paths may share one of both of their end-vertices). Note that in a weak k-linking
the only restriction is that the paths are arc-disjoint. A directed multigraph
D = (V, A) is (weakly) k-linked if it contains a (weak) k-linking from
(x1, x2, . . . , xk) to (y1, y2, . . . , yk) for every choice of not necessarily distinct vertices x1, x2, . . . , xk, y1, y2, . . . , yk. A digraph D is k-(arc)-cyclic if it has a cycle containing the vertices (arcs) x1, x2, . . . , xk (a1, a2, . . . , ak) for every choice of k vertices (arcs).

9.2 Disjoint Path Problems 477
Recall that an [x, y]-path in a directed multigraph is a path which is either an (x, y)-path or a (y, x)-path.
9.2 Disjoint Path Problems
The general problem we will consider here is the existence of certain paths which are (arc)-disjoint and have speciﬁed or contain speciﬁed internal vertices. There is a close relation between path and cycle problems as can be seen from the following complexity statement. The proof is left to the reader as Exercise 9.1.
Proposition 9.2.1 For general digraphs the following problems are equivalent from a computational point of view (that is, if one is polynomially solvable or N P-complete, then so are each of the others).
(P1) Given four distinct vertices u1, u2, v1, v2 in a digraph D. Decide whether or not D has disjoint paths connecting u1 to v1 and u2 to v2. We call this the 2-path problem.
(P2) Given two distinct arcs e1, e2 in a digraph D. Decide whether or not D has a cycle through e1 and e2.
(P3) Given two distinct vertices u and v in a digraph D. Decide whether or not D has a cycle through u and v.
(P4) Given two distinct vertices u and v in a digraph D. Decide whether or not D has disjoint cycles Cx, Cy such that x ∈ Cx and y ∈ Cy.
(P5) Given three distinct vertices x, y, z. Decide whether D has an (x, z)-path which also contains the vertex y.
We prove in Theorem 9.2.3 that the 2-path problem is N P-complete. Hence it follows from Proposition 9.2.1 that all the problems mentioned in Proposition 9.2.1 are N P-complete.
It is interesting to note that although problems (P1)-(P5) are all very hard for general digraphs, the diﬃculty of these problems may vary considerably for some classes of digraphs. For instance problem (P3) is trivial for tournaments (and the more general locally semicomplete digraphs) since such a cycle exists if and only if x and y are in the same strong component of D. Problem (P4) is also easy for semicomplete digraphs, since such cycles exist if and only if there exist disjoint 3-cycles C, C one containing x and the other containing y (Exercise 9.14). However problems (P1) and (P2) are considerably more diﬃcult to prove polynomial for tournaments (see Theorem 9.3.12). Note that (P2) and also (P5) may be considered as special cases of (P1) if we drop the requirement that the vertices must be distinct in (P1).
The following generalization of the 2-path problem is known as the k-path problem. Given a digraph D and distinct vertices x1, x2, . . . , xk, y1, y2, . . . , yk. Does D have a collection of disjoint paths P1, P2, . . . , Pk such that Pi is

478 9. Disjoint Paths and Trees
an (xi, yi)-path, i = 1, 2, . . . , k? The result below shows that it suﬃces to consider distinct vertices when proving that a digraph is k-linked (the proof is left as Exercise 9.3).
Proposition 9.2.2 For every k ≥ 1 a digraph D = (V, A) is k-linked if and only if it contains disjoint (xi, yi)-paths P1, P2, . . . , Pk for every choice of distinct vertices x1, x2, . . . , xk, y1, y2, . . . , yk.
Below we study the k-path problem. We start by showing that the problem is N P-complete already when k = 2. We show that there is no degree of vertex-strong connectivity which guarantees the existence of such paths. Then in succeeding sections we go on to special classes of graphs such as acyclic digraphs and generalizations of tournaments. There the reader will see that quite a lot can be said about the problem and that it still is not trivial for these classes of digraphs.
9.2.1 The Complexity of the k-Path Problem
We start with the following result by Fortune, Hopcroft and Wyllie showing that already for k = 2 the k-path problem is very diﬃcult for general digraphs.
Theorem 9.2.3 [247] The 2-path problem is N P-complete.
Since this theorem is very important and the gadget construction1 used in the proof is quite illustrative, we give the proof in detail below. We follow the proof in [247].
First we need a lemma whose proof is left as Exercise 9.4.
Lemma 9.2.4 [247] Consider the digraph S shown in Figure 9.1 (a). Suppose there are two disjoint paths P, Q passing through S such that P leaves S at A and Q enters S at B. Then P must enter S at C and Q must leave S at D. Furthermore, there exists exactly one more path R passing through S which is disjoint from P, Q and this is either
(8, 9, 10, 4, 11) or (8 , 9 , 10 , 4 , 11 ),
depending on the actual routing of P .
The digraph S in Figure 9.1 is called a switch. We can stack arbitrarily many switches on top of each other and still have the conclusion on Lemma 9.2.4 holding for each switch. The way we stack is simply by identifying the C and D arcs of one switch with the A and B arcs of the next (see Figure 9.2). A switch can be represented schematically as in Figure 9.1(c), or, when we want to indicate stacking of switches, as in Figure 9.1(b).
1 Quite often N P-completeness proofs are constructed by piecing together certain gadgets about which one can prove certain properties. Based on these properties one then shows that the whole construction has the desired properties. For other instances of this technique, see e.g. Chapter 11.

9.2 Disjoint Path Problems 479

C 8
9 12 10 5

D
12 9 5
10

8

4
11 7
3

4
7 3

11

2 6
1 1

6

2

AB

CD
AB (b)

(a) (c)
Figure 9.1 Part (a) shows a switch S. Part (b) and (c) show schematic pictures of a switch ([247, Fig. 1]). In (c) the two vertical arcs correspond to the paths (8,9,10,4,11), respectively , (8’,9’,10’,4’,11’). Note that for convenience, we label the arcs, rather than the vertices in this Figure.
Proof of Theorem 9.2.3: The reduction is from 3-SAT (recall the deﬁnition from Section 1.10). Let F = C1 ∗ C2 ∗ . . . ∗ Cr be an instance of 3-SAT with variables x1, x2, . . . , xk. For each variable xi we let Hi be the digraph consisting of two internally disjoint (u, v)-paths of length r (the number of clauses in F ). We associate one of these paths with the literal xi and the other with the literal xi. We are now ready to explain the construction of the digraph D[F ] and show that it contains disjoint (u1, v1)-, (u2, v2)-paths if and only if F is satisﬁable.
See Figure 9.3. We form a chain H1→H2→ . . . →Hk on the subdigraphs corresponding to each variable (see the middle of the ﬁgure, Hi corresponds to the variable xi). With each clause Ci we associate three switches, one for each literal it contains. The left paths of these switches (that is, the paths in the left hand part of the ﬁgure) all start at the vertex ni−1 and end at ni. The right path of each switch is substituted for a (private) arc of Hi such that the arc is taken from the path which corresponds to xi if the literal is xi and from the path which corresponds to xi if the literal is xi. The substitution is shown for the clause Ci = x1 + x2 + x5 in the ﬁgure. By the choice of the lengths of the paths in Hi we can make this substitution so that diﬀerent arcs in Hi are substituted by diﬀerent switches corresponding to several clauses, all of which contain the literal xi or xi. The switches corresponding to the

480 9. Disjoint Paths and Trees

C3 D3 S3

C2 = A3

D2 = B3

C1 = A2

S2 D1 = B2

S1
A1 B1
Figure 9.2 Stacking 3 switches on top of each other.
clause Ci are denoted Si,1, Si,2, Si,3. We stack these switches in the order S1,1S1,2S1,3 . . . Sr,1, Sr,2Sr,3 as shown in the right part of the ﬁgure. A two way arc between a clause and some Hj (shown only for Ci) indicates a switch that is substituted for these arcs. Note that this is the same switch which is shown in the right hand side of the ﬁgure! Finally, we join the D arc of the switch Sr,3 to the vertex z1 of H1, add an arc from wk in Hk to n0 and choose vertices u1, u2, v1, v2 as shown (that is, u2 is the tail of the C arc for Sr,3, u1 is the tail of the B arc of S1,1 and v2 is the head of the A arc of S1,1). This completes the description of D[F].
We claim that D[F ] contains disjoint (u1, v1)-, (u2, v2)-paths if and only if F is satisﬁable.
Suppose ﬁrst that D[F ] has disjoint (u1, v1)-, (u2, v2)-paths P, Q. It follows from the deﬁnition of D[F] that the paths P and Q will use all the arcs that go between two switches (i.e. those arcs that are explicitly shown in the right hand side of Figure 9.3). Hence, by Lemma 9.2.4, after removing the arcs of Q and the arcs of P from u1 to the ﬁrst vertex z1 of H1, the only remaining way to pass through a switch Si,j is to use either the right path or the left path of Si,j but not both! By the construction of D[F ], P must traverse the subdigraphs corresponding to the variables in the order H1, H2, . . . , Hk and each time P uses precisely one of the two paths in Hi

9.2 Disjoint Path Problems 481

v1 nr

x1 x1 z1

u2 Sr,3

Ci = x1 + x2 + x5

nr−1
via Si,1 ni
via Si,2 ni−1 via Si,3

H1 w1
x2 x2 z2
H2 w2

Sr,2 Sr,1 Sr−1,3

n1 n0

to x5
xk xk zk Hk
wk

S1,3 S1,2 S1,1 v2 u1

Figure 9.3 A schematic picture of the digraph D[F].

(recall again that some of the arcs in Hi in Figure 9.3 correspond to the right path of some switch). Let T be the truth assignment which sets xi := 1 if P uses the path corresponding to xi and let xi := 0 in the opposite case. We show that this is a satisfying truth assignment for F.
It follows from the construction of D[F] and the remark above on arcs
used by Q and the ﬁrst part of P from u1 to H1 that the path P contains all the vertices n0, n1, . . . , nr in that order. Since each of the paths from nj to nj+1 are part of a switch for every j = 0, 1, . . . r − 1, we must use the left path of precisely one of these switches to go from nj to nj+1. By Lemma 9.2.4, every time we use a left path of a switch, the right path cannot also be
used. From this we see that for each clause Cj, j = 1, 2, . . . r, it must be the case that at least one of the literals y (in particular the one whose left path
we could use) of Cj becomes satisﬁed by our truth assignment. This follows because P must use the path corresponding to y in the middle. Thus we have
shown that F is satisﬁable.
Suppose now that T is a satisfying truth assignment for F. Then for
every variable xi which is true (false) we can use the subpath corresponding to xi (xi) in Hi. For each clause Cj we can ﬁx one literal which is true and use the left path of the switch that corresponds to that literal (that path

482 9. Disjoint Paths and Trees
cannot be blocked by the way we chose subpaths inside the Hi’s). By Lemma 9.2.4 we can ﬁnd disjoint paths P, Q such that P starts in u1 and ends in the initial vertex z1 of H1 and Q is a (u2, v2)-path in the right part of D[F ]. Furthermore, by the same lemma, after removing the vertices of P and Q, we still have the desired paths corresponding to each literal available. This shows that we can route the disjoint (u1, v1)-, (u2, v2)-paths in D[F ].
The digraph D[F] above is not strongly connected and one may ask whether the problem becomes easier if we require high vertex-strong connectivity. However, using Theorem 9.2.3 Thomassen [710] proved that the 2-path problem remains N P-complete even for highly connected digraphs.
Lynch proved that for undirected graphs the k-path problem is N Pcomplete when k is part of the input [529].The case k = 2 was proved to be polynomially solvable by Seymour [662], Shiloach [670] and Thomassen [697] and a complete characterization was obtained by Seymour [662] and Thomassen [697]. The results in [662, 697] (see also Jung’s paper [470]) imply that every 6-connected undirected graph is 2-linked (see also the remark at the end of Section 9.4). For ﬁxed k ≥ 3 the k-path problem is also polynomially solvable [642]. This is just one of many important consequences of the deep work of Robertson and Seymour on Graph Minors. The interesting thing is that [642] only proves the existence of an O(n3) algorithm for ﬁxed k (the constant depending heavily on k). To date no actual algorithm has been given, even in the case k = 3.
The following result due to Thomassen shows that for directed graphs the situation is quite diﬀerent from the undirected case. Namely, there is no degree of vertex-strong connectivity which will guarantee a directed graph to be 2-linked.
Theorem 9.2.5 [710] For every natural number k there exists an inﬁnite family of k-strong and non-2-linked digraphs Dk.
In fact, Thomassen proved that even for the special case of cycles through two ﬁxed vertices (Problem (P3) of Proposition 9.2.1) no degree of vertexstrong connectivity suﬃces to guarantee such a cycle. Recall that a digraph D = (V, A) is 2-cyclic if it has a cycle containing x, y for every choice of distinct vertices x, y ∈ V .
Theorem 9.2.6 [710] For every natural number k there exists an inﬁnite family of k-strong digraphs Dk which are not 2-cyclic.
9.2.2 Suﬃcient Conditions for a Digraph to be k-Linked
In this section we brieﬂy discuss some suﬃcient conditions for a digraph to be k-linked for some (prescribed) k. Not surprisingly, if a digraph has suﬃciently many arcs then it is k-linked. The next result due to Manoussakis shows that digraphs which are close to being complete are k-linked. The proof is left as Exercise 9.5.

9.2 Disjoint Path Problems 483
Theorem 9.2.7 [545] Let D = (V, A) be a digraph of order n and let k be an integer such that n ≥ 2k ≥ 2. If |A| ≥ n(n − 2) + 2k then D is k-linked.
The proof of Theorem 9.2.7 in [545] is based on the following lemma.
Lemma 9.2.8 [545] If D−x is k-linked for some vertex x ∈ V which satisﬁes d+(x), d−(x) ≥ 2k − 1, then D is k-linked.
Proof: Let x1, x2, . . . , xk, y1, y2, . . . , yk ∈ V (D) be an arbitrary collection of terminals. We wish to prove that D contains internally disjoint paths P1, P2, . . . , Pk where Pi is an (xi, yi)-path for i = 1, 2, . . . , k. By the assumption that D−x is k-linked, it suﬃces to consider the case when x = xi for some i or x = yj for some j. Since x is one of the terminals, it follows that among the 2k terminals at most 2k − 1 of these are out-neighbours (in-neighbours) of x.
Since a path from x to an out-neighbour u of x can be taken to be just the arc xu and hence cannot interfere with the other paths we wish to ﬁnd, we may assume that, if x = xi for some i, then yi ∈ N +(x) and similarly if x = yj for some j then xj ∈ N −(x). Let T denote the set of distinct terminals. Now it is easy to see that for every desired path Pi starting at x we may choose a private member ui of N +(x) − T and replace xi by xi = ui. Similarly for every desired path Pj ending at x we may choose a private member vj of N −(x) − T and replace yj by yj = vj. If xr (ys) was not introduced by the replacements above we let xr = xr (ys = ys). Now the existence of the desired linking follows by taking a k-linking in D − x for the set of terminals x1, x2, . . . , xk, y1, y2, . . . , yk.
The requirement on the number of arcs in Theorem 9.2.7 is very strong and hence the result is not very useful. However Manoussakis showed by an example that the number of arcs in Theorem 9.2.7 is best possible [545].
The next result, due to Heydemann and Sotteau, shows that for 2-linkings one can also get a suﬃcient condition in terms of δ0(D). The proof is easy and is left as Exercise 9.6. See also Theorem 9.2.10 below.
Theorem 9.2.9 [426] If a digraph D satisﬁes δ0(D) ≥ n/2 + 1, then D is 2-linked.
The condition above is still quite restrictive and one would expect a stronger result to hold. Examples from [426] show that we cannot weaken the degree condition. However, we can strengthen the result in the following way.
Theorem 9.2.10 If a digraph D satisﬁes δ0(D) ≥ n/2 + 1, then for every choice of distinct vertices x, y, u, v ∈ V , D contains internally disjoint (x, y)-, (u, v)-paths P, Q such that V (P ) ∪ V (Q) = V .

484 9. Disjoint Paths and Trees

Proof: Let X = V − {x, y, u, v} and construct D from D − {x, y, u, v} by adding two new vertices p and q such that
ND− (p) = ND−(v) ∩ X, ND+ (p) = ND+(x) ∩ X, ND− (q) = ND−(y) ∩ X, ND+ (q) = ND+(u) ∩ X.

It is easy to see that for every w d+D (w) ≥ d+D(w) − 2. Hence the

∈ V − {x, y, u, v}, resulting digraph

d−D D

(w) ≥ which

d−D (w) has n

− =

2 n

and −2

vertices satisﬁes δ0(D ) ≥ n /2. By Corollary 5.6.3, D has a hamiltonian

cycle C. Let p+, q+ (p−, q−) denote the successors (predecessors) of p, q on

C. Then xC[p+, q−]y and uC[q+, p−]v are the desired paths which cover V .

Theorem 9.2.9 was extended by Manoussakis to 3-linkings.
Theorem 9.2.11 [545] If a digraph D has n ≥ 9 vertices and δ0(D) ≥ n/2 + 2, then D is 3-linked.
Based on Theorems 9.2.9 and 9.2.11, Manoussakis posed the following problem. Note that f (n, k) ≤ n − 1, since the complete digraph is k-linked.
Problem 9.2.12 [545] Determine the minimum function f (n, k) such that every digraph D on n vertices which satisﬁes δ0(D) ≥ f (n, k) is k-linked.
According to Manoussakis [545], Hurkens proved that f (n, 4) = n/2 + 3 when n ≥ 13 and Manoussakis mentions that perhaps f (n, k) ≤ n/2 + k − 1 holds for n ≥ 4k − 3.
Let us conclude this section with a result in connection with problem (P3) of Proposition 9.2.1. It is easy to see that, if a digraph is 2-linked, then it is also 2-arc-cyclic and hence 2-cyclic. Heydemann and Sotteau proved that, if we only want a digraph to be 2-cyclic, then it is possible to weaken the condition in Theorem 9.2.7 somewhat.
Theorem 9.2.13 [426] Every strong digraph D = (V, A) with δ0(D) ≥ 2 and |A| ≥ n2 − 5n + 15 is 2-cyclic.
9.2.3 The k-Path Problem for Acyclic Digraphs
When the digraph considered is acyclic there is enough structure to allow an eﬃcient solution of the k-path problem for every ﬁxed k Perl and Shiloach [602] proved that the 2-path problem is polynomially solvable for acyclic digraphs. In their elegant proof they showed how to reduce the 2-path problem for a given acyclic digraph to a simple path ﬁnding problem in another digraph. Fortune, Hopcroft and Wyllie extended Perl and Shiloach’s result to arbitrary k. The proof of this result below is an extension of the proof by Perl and Shiloach (see also Thomassen’s survey [707]).

9.2 Disjoint Path Problems 485
Theorem 9.2.14 [247] For each ﬁxed k, the k-path problem is polynomially solvable for acyclic digraphs.
Proof: Let D = (V, A) be acyclic and let x1, x2, . . . , xk, y1, y2, . . . , yk be distinct vertices of D for which we wish to ﬁnd a k-linking from (x1, x2, . . . , xk) to (y1, y2, . . . , yk). We may assume that d−D(xi) = d+D(yi) = 0 for i = 1, 2, . . . , k, since such arcs play no role in the problem and can therefore be deleted.
Form a new digraph D = (V , A ) whose vertex set is the set of all k-tuples of distinct vertices of V . For any such k-tuple (v1, v2, . . . , vk) there is at least one vertex, say vr, which cannot be reached by any of the other vi by a path in D. (Here we used that D is acyclic.) For each out-neighbour w of vr such that w ∈ {v1, v2, . . . , vk}, we let A contain the arc (v1, v2, . . . , vr−1, vr, vr+1, . . . , vk)→(v1, v2, . . . , vr−1, w, vr+1, . . . , vk). Only arcs as those described above are in A .
We claim that D has a directed path from the vertex (x1, x2, . . . , xk) to the vertex (y1, y2, . . . , yk) if and only if D contains disjoint paths P1, P2, . . . , Pk such that Pi is an (xi, yi)-path for i = 1, 2, . . . , k.
Suppose ﬁrst that D has a path P from (x1, x2, . . . , xk) to (y1, y2, . . . , yk). By deﬁnition, every arc of P corresponds to one arc in D. Hence we get a collection of paths P1, P2, . . . , Pk such that Pi is an (xi, yi)-path by letting Pi contain those arcs that correspond to a shift in the ith vertex of a k-tuple, i = 1, 2, . . . , k. Suppose two of these paths, Pi, Pj are not disjoint. Then it follows from the assumption that d−D(xi) = d+D(yi) = 0 for i = 1, 2, . . . , k and the deﬁnition of D that there is some vertex u ∈ V − {x1, x2, . . . , xk, y1, y2, . . . , yk} such that u ∈ V (Pi) ∩ V (Pj). Let w (z) be the predecessor of u on Pi (Pj). We may assume without loss of generality that the arc on P corresponding to wu is used before that corresponding to zu. This means that at the time we change from w to u in the ith coordinate, the jth coordinate corresponds to a vertex z which can reach u in D (through z). Now it follows from the deﬁnition of the arcs in A that we could not have changed the ith coordinate again before we have used the arc corresponding to zu in D . However that would lead to a k-tuple which contains two copies of the same vertex u from D, contradicting the deﬁnition of D . Hence Pi and Pj must be disjoint.
Suppose now that D contains disjoint paths Q1, Q2, . . . , Qk such that Qi is an (xi, yi)-path, i = 1, 2, . . . , k. Then we can construct a path from (x1, x2, . . . , xk) to (y1, y2, . . . , yk) in D as follows. Start with the tuple (x1, x2, . . . , xk). At any time we choose a coordinate j of the current k-tuple (z1, z2, . . . , zk) such that the vertex zj is not in {y1, y2, . . . , yk} and zj cannot be reached in D by any other vertex from the tuple. Note that such a vertex exists since D is acyclic and d+(yi) = 0 for i = 1, 2, . . . , k. It is easy to show by induction that we will always have zj ∈ V (Qj). Now we use the arc zjw corresponding to the arc out of zj on Qj and change the j’th coordinate from zj to w. If follows from the fact that Q1, . . . , Qk are disjoint that this will produce a path from (x1, x2, . . . , xk) to (y1, y2, . . . , yk) in D .

486 9. Disjoint Paths and Trees
Given any instance (D, x1, x2, . . . , xk, y1, y2, . . . , yk) we can produce the digraph D in time O(k!nk+2) by forming all possible k-tuples and deciding which arcs to add based on the deﬁnition of D . Then we can decide the existence of a path from (x1, x2, . . . , xk) to (y1, y2, . . . , yk) in polynomial time using BFS in D . This proves that the k-path problem is polynomial for each ﬁxed k.
Note that we don’t actually have to construct D in advance. It suﬃces to introduce the vertices and arcs when they become relevant for the search for a path from (x1, x2, . . . , xk) to (y1, y2, . . . , yk) in D .
It is not diﬃcult to see that we can also use the approach above to ﬁnd the cheapest collection of k disjoint paths where the ith path is an (xi, yi)path in a given acyclic digraph with non-negative weights on the arcs. Here the goal is to minimize the total weight of the arcs used by the paths (see Exercise 9.9).
Suppose that D is an acyclic graph and v is a vertex of in-degree 1. Let u be the unique in-neighbour of v. Then the digraph D = D//uv which we obtain by path-contracting the arc uv is also acyclic. Furthermore, contracting such an arc can have no eﬀect on the existence of a certain linkage in the digraph since only one path in such a linkage may enter the vertex v. This shows that we may assume that all vertices except the terminals have in- and out-degree at least 2 when considering the 2-linkage problem (and more generally the k-linkage problem) for acyclic graphs. Furthermore we may assume that no arc enters xi and no arc leaves yi, i = 1, 2.
It is also easy to see that given any acyclic digraph D with distinct vertices x1, x2, y1, y2 we may in polynomial time either decide the existence of disjoint (x1, y1)-, (x2, y2)-paths, or obtain a new reduced digraph D∗ such that d−D∗ (x1) = d−D∗ (x2) = d+D∗ (y1) = d+D∗ (y2) = 0, every other vertex has inand out-degree at least 2 in D∗ and D∗ has the desired paths if and only if D has such paths. Hence, from a computational point of view, the following result due to Thomassen completely solves the 2-path problem for acyclic digraphs.
Theorem 9.2.15 [704] Let D be an acyclic digraph on at least 5 vertices with vertices x1, x2, y1, y2 such that d−(x1) = d−(x2) = d+(y1) = d+(y2) = 0 and every other vertex has in- and out-degree at least 2. Suppose D does not contain disjoint (x1, y1)-, (x2, y2)-paths. Let H denote the digraph one obtains from D by adding two new vertices x0, y0 and the arcs x0x1, x0x2, y1y0, y2y0, x1y2, x2y1. Then H can be drawn in the plane such that the outer cycle is formed by the two paths x0x1y2y0, x0x2y1y0 and every other facial cycle2 is the union of two directed paths in H (see Figure 9.4).
2 A cycle C in a plane graph G is facial with respect to a planar drawing of G if C is the boundary of some face.

9.3 Linkings in Tournaments and Generalizations of Tournaments 487
x1 y2
x0 y0
x2 y1
Figure 9.4 The digraph H obtained from D by adding x0, y0 and arcs x0x1, x0x2, y1y0, y2y0, x1y2, x2y1 (shown as fat arcs).
Theorem 9.2.15 was generalized by Metzlar [563]. The following interesting connection between the 2-path problem for undirected graphs and the 2-path problem for acyclic digraphs is a corollary of Theorem 9.2.15. Corollary 9.2.16 [704] Let D = (V, A) be an acyclic digraph and suppose that the vertices x1, x2, y1, y2 are all distinct and satisfy that d−(xi) = d+(yi) = 0 for i = 1, 2 and that all other vertices of D have in- and outdegree at least 2. Then D contains disjoint (x1, y1)-, (x2, y2)-paths if and only if U G(D) contains such paths.
Thomassen [704] mentioned that it would be interesting to have a direct proof of Corollary 9.2.16. Such a proof was given by Lucchesi and Giglio in [527]. In that paper the connection between the 2-path problem for acyclic digraphs and the 2-path problem for undirected graphs was studied. It was shown that there is a very close connection between the two problems.
The example in Figure 9.5 shows that Corollary 9.2.16 has no analogue when k > 2.
9.3 Linkings in Tournaments and Generalizations of Tournaments
We now turn to linking problems for tournaments and their generalizations. It turns out that for semicomplete digraphs enough structure is present to allow a polynomial algorithm for the 2-path problem (Theorem 9.3.12). We show in Subsection 9.3.3 that this algorithm can be used as a subroutine in a polynomial algorithm for the 2-path problem for a large super class of the semicomplete digraphs.
We start out with some suﬃcient conditions in terms of the degree of (local) strong connectivity.

488 9. Disjoint Paths and Trees x1

y1

ac
x2 y2
bd
x3 y3
Figure 9.5 An acyclic digraph D in which every non-special vertex has in- and out-degree at least 2. There does not exist disjoint paths P1, P2, P3 such that Pi is an (xi, yi)-path, i = 1, 2, 3. However U G(D) has such paths.
9.3.1 Suﬃcient Conditions in Terms of (Local-)Connectivity
The following proposition was proved by Thomassen [701] in the case when D is a tournament. By inspection of the proof in [701] one sees that the only place there where it is used that one is dealing with a tournament, rather than an arbitrary digraph, is to be sure that there is an arc between every successor of x and every predecessor of y on the paths P1, . . . , Pp below. Hence we can state and prove Thomassen’s result in the following much stronger form:
Proposition 9.3.1 [52, 701] Let D be a digraph and x, y, u, v distinct vertices of D such that κ(u, v) ≥ q + 2 and P1, . . . , Pp are internally disjoint (x, y)-paths such that the subdigraph D V (P1) ∪ . . . ∪ V (Pp) has no (x, y)path of length less than or equal to 3 and such that the successor of x on Pi is adjacent to the predecessor of y on Pj for all i, j ∈ {1, 2, . . . , p}. Then D has q internally disjoint (u, v)-paths, the union of which intersects at most 2q of the paths P1, . . . , Pp.
Proof: We may assume that p ≥ 2q + 1 since otherwise the claim is trivially true. Let Q = {Q1, Q2, . . . , Qq} be internally disjoint (u, v)-paths in D − {x, y}. We deﬁne two collections of subpaths of the paths in Q as follows (in Exercise 9.15 the reader is asked to describe an algorithm for constructing such collections starting from Q).
Let Q1, Q2, . . . , Qq be chosen such that either Qi = Qi or Qi = Q[u, z] for some vertex z ∈ V (Pj) where j ∈ {1, 2, . . . , p} and Pj[z, y] has only the vertex z in common with U = V (Q1) ∪ . . . ∪ V (Qq). We also assume that |U | is minimum subject to the conditions above. If some path Pr contains a vertex w from U and Pr[w, y] contains no vertices from U − w, then the minimality of U implies that one of the paths Q1, Q2, . . . , Qq terminates in w. This implies that the collection Q1, Q2, . . . , Qq intersects at most q of the paths P1, P2, . . . , Pp.

9.3 Linkings in Tournaments and Generalizations of Tournaments 489
Analogously we can deﬁne a collection Q1 , Q2 , . . . , Qq where Qi is either Qi or Qi = Qi[w, v] for a vertex w on some Pk satisfying that Pk[x, w] contains only the vertex w from V (Q1 )∪. . .∪V (Qq ) and such that Q1 , Q2 , . . . , Qq intersect at most q of the paths P1, P2, . . . , Pp.
Now we construct the desired paths as follows. For each i = 1, 2, . . . , q, if Qi = Qi or Qi = Qi, then let Ri := Qi. Otherwise let z be the terminal vertex of Qi, let w be the initial vertex of Qi and let r, j be chosen such that z ∈ V (Pj), w ∈ V (Pr). Let x (y ) be the successor (predecessor) of x (y) on Pr (Pj). By the assumption that D contains no (x, y)-path of length 3 and that every successor of x is adjacent to every predecessor of y on the paths P1, . . . , Pp, we get that y x ∈ A. Let Ri := QiPj[z, y ]Pr[x , w]Qi (see Figure 9.6).
u

Qi

Pj y

xz

y

w

x Pr

Qi

v
Figure 9.6 How to obtain Ri from Qi, Qi , Pj and Pr. The fat arcs indicate the resulting (u, v)-path.
Now R1, R2, . . . , Rq are internally disjoint (u, v)-paths and by construction they contain no more than 2q vertices from the paths P1, P2, . . . , Pp.
Our proof above is constructive and can easily be turned into a fast algorithm for ﬁnding the desired collection of paths (Exercise 9.16). The following result by Thomassen is an easy corollary
Corollary 9.3.2 [701] Every 5-strong semicomplete digraph is 2-linked.
Proof: Let D be a 5-strong semicomplete digraph and let x1, x2, y1, y2 be arbitrary distinct vertices of D. If D − {x3−i, y3−i} has an (xi, yi)-path P of length at most 3 for i = 1 or i = 2, then D − P is strong and hence

490 9. Disjoint Paths and Trees
contains an (x3−i, y3−i)-path. Hence we may assume that every (xi, yi)-path in D − {x3−i, y3−i} has length at least 4 for i = 1, 2.
Let P1, P2, P3 be internally disjoint (x1, y1)-paths in D − {x2, y2}. Then D and these paths satisfy the assumption of Theorem 9.3.1 for q = 1 and it follows that D has an (x2, y2)-path which intersects at most two of the paths P1, P2, P3. Since x1, x2, y1, y2 were chosen arbitrarily, it follows from Lemma 9.2.2 that D is 2-linked.
Bang-Jensen [43] constructed the 4-strong semicomplete digraph in Figure 9.7, hence showing that 5-strong connectivity is best possible for general semicomplete digraphs.
x1
y2
x2 y1
Figure 9.7 A 4-strong non-2-linked semicomplete digraph T . All arcs not shown go from left to right and x1y2x1, x2y1x2 are the only 2-cycles in T . There is no pair of disjoint (x1, y1)-,(x2, y2)-paths in T . The tournament which results from T by deleting the arcs y2x1 and y1x2 is also 4-strong.
We now turn our attention to special classes of generalizations of tournaments. The ﬁrst lemma shows that for the class of round decomposable locally semicomplete digraphs one can improve the bound from Corollary 9.3.2. The proof is left as Exercise 9.20. Lemma 9.3.3 [52] For each natural number k, every (3k − 2)-strong round decomposable locally semicomplete digraph is k-linked.
In order to get a result on k-linkings for locally semicomplete digraphs that are not round decomposable we use the following lemma which allows

9.3 Linkings in Tournaments and Generalizations of Tournaments 491
us to apply Proposition 9.3.1. Recall that by Exercise 4.33, α(D) ≤ 2 if D is locally semicomplete but not round decomposable.
Lemma 9.3.4 [52] Let x and y be distinct vertices in a locally semicomplete digraph D such that α(D) ≤ 2 and let P1, . . . , Pp be internally disjoint (x, y)paths such that the locally semicomplete digraph D = D V (P1) ∪ . . . ∪ V (Pp) has no (x, y)-path of length less than 6. Then for all 1 ≤ i, j ≤ p, the predecessor u of y on Pi dominates the successor v of x on Pj.
Proof: We may assume that each Pi is a minimal (x, y)-path. Suppose there exist i and j such that the predecessor u of y on Pi is not adjacent to the successor v of x on Pj. Note that the assumption of the lemma and Exercise 9.18 implies that y→x. Therefore D is strong and we conclude from Exercise 9.18 (applied to u, v) that D contains an (x, y)-path of length at most 5, contradicting the assumption. Hence u→v must hold.
The following theorem by Bang-Jensen gives a suﬃcient condition for the existence of a speciﬁed k-linking in a locally semicomplete digraph which is not round decomposable in terms of local connectivities. It generalizes a result by Thomassen for tournaments [701]. Bang-Jensen also proved an analogous result for quasi-transitive digraphs, see [52] for details.
Theorem 9.3.5 [52] There exists, for each natural number k, a natural number f (k) such that the following holds. If D is a locally semicomplete digraph with α(D) ≤ 2 and x1, x2, . . . , xk, y1, y2, . . . , yk are distinct vertices in D such that κ(xi, yi) ≥ f (k) for all i = 1, . . . , k, then D has disjoint paths P1, P2, . . . , Pk where Pi is an (xi, yi)-path, i = 1, 2, . . . , k.
Proof: Let f (1) = 1 and f (k) = 2(k − 1)f (k − 1) + 2k + 1 for k ≥ 2. We prove by induction on k that this choice works for f . This is clear for k = 1, so we proceed to the induction step assuming k ≥ 2. Suppose that x1, x2, . . . , xk, y1, y2, . . . , yk are distinct vertices in a locally semicomplete digraph D for which α(D) ≤ 2 and assume that κ(xi, yi) ≥ 2(k − 1)f (k − 1) + 2k + 1 for all i = 1, . . . , k. We prove that D − {x2, . . . , xk, y2, . . . , yk} has an (x1, y1)-path P1 such that κH (xi, yi) ≥ f (k − 1) for i = 2, . . . , k, where H = D−V (P1). Then the result follows by induction. If D−{x2, . . . , xk, y2, . . . , yk} has an (x1, y1)-path of length at most 5, then this can play the role of P1, so assume that no such path exists. Let Q1, Q2, . . . , Q2(k−1)f(k−1)+1 be internally disjoint (x1, y1)-paths in D − {x2, . . . , xk, y2, . . . , yk}. We show that one of these can play the role of P1. First note that by Lemma 9.3.4 and the remark above, we have that for all 1 ≤ i, j ≤ 2(k − 1)f (k − 1) + 1 the predecessor of y1 on Qi dominates the successor of x1 on Qj. Hence, by Proposition 9.3.1, for each i = 2, 3, . . . , k, there are internally disjoint (xi, yi)paths P1,i, P2,i, . . . , Pf(k−1),i which together intersect at most 2f (k − 1) of the paths Q1, Q2, . . . , Q2(k−1)f(k−1)+1. Hence there is at least one path Qr which intersects none of Pj,i, 2 ≤ i ≤ k, 1 ≤ j ≤ f (k − 1). Thus we can use that Qr as P1.

492 9. Disjoint Paths and Trees
Combining Lemma 9.3.3, Theorem 9.3.5 and Theorem 4.11.15 we obtain the following result by Bang-Jensen (extending a similar result for semicomplete digraphs by Thomassen [701]):
Theorem 9.3.6 [52] There exists, for each natural number k, a natural number f (k) such that every f (k)-strong locally semicomplete digraph is k-linked.
Here and below the function f (k) is the function which is deﬁned in the proof of Theorem 9.3.5.
Corollary 9.3.7 [52] Every f (k)-strong locally semicomplete digraph is karc-cyclic.
The function f (k) is probably far from best possible for Theorem 9.3.6 and Corollary 9.3.7. In particular, f (2) = 7, but, using Theorem 4.11.15, it should be possible to prove that the following holds.
Conjecture 9.3.8 [52] Every 5-strong locally semicomplete digraph is 2linked.
9.3.2 The 2-Path Problem for Semicomplete Digraphs
In the proof of Corollary 9.3.2 we really only used that κT −{xi,yi}(x3−i, y3−i) was at least 3 for i = 1, 2 in order to ensure the existence of three internally disjoint (x1, y1)-paths in D − {x2, y2} and then we applied Proposition 9.3.1. Bang-Jensen strengthened this suﬃcient condition as follows.
Theorem 9.3.9 [43] Let T be a semicomplete digraph and let x1, x2, y1, y2 be distinct vertices of T . Suppose that
min{κT −{x2,y2}(x1, y1), κT −{x1,y1}(x2, y2)} ≥ 2 and
max{κT −{x2,y2}(x1, y1), κT −{x1,y1}(x2, y2)} ≥ 3, then T has a pair of disjoint (x1, y1)-, (x2, y2)-paths.
This is best possible with respect to local connectivities. The semicomplete digraph in Figure 9.7 shows that we cannot replace 3 by 2 above. However, see Theorem 9.3.13 for a special case where we can do this.
Bang-Jensen showed that for cycles through two arcs (the special case when y1→x2 and y2→x1), we can strengthen Corollary 9.3.2 in the case of tournaments. For semicomplete digraphs the digraph in Figure 9.7 shows that we cannot always weaken the connectivity requirement.
Theorem 9.3.10 [43] Every 3-strong tournament and every 5-strong semicomplete digraph is 2-arc-cyclic.

9.3 Linkings in Tournaments and Generalizations of Tournaments 493
It follows from the proof of Theorem 9.3.10 in [43] that for a ﬁxed pair of arcs e, e we can replace the connectivity requirement that D is 5-strong by (5 − i)-strong provided that i of the arcs e, e are not in a 2-cycle (i = 1, 2).
Conjecture 9.3.11 [52] Every 3-strong locally tournament digraph is 2-arccyclic.
The example in Figure 9.7 indicates that ﬁnding a complete generalization of those semicomplete digraphs that do not have disjoint (x, y)-, (u, v)-paths for a given set of distinct vertices x, y, u, v may be very diﬃcult. In the special case where we allow u and y to be equal, that is, we are seeking an (x, v)-path which passes through the vertex u (that is, the problem (P5) in Proposition 9.2.1), it is indeed possible to give a characterization. Such a characterization was given by Bang-Jensen in [45].
From the algorithmic point of view, the 2-path problem for semicomplete digraphs was solved by Bang-Jensen and Thomassen who proved the following result:
Theorem 9.3.12 [89] The 2-path problem is solvable in time O(n5) for semicomplete digraphs.
The proof of this result in [89] is highly non-trivial. The basic approach is divide and conquer. However, several non-trivial results and steps are needed to make the algorithm work. We state the most important of these results below since it is of independent interest.
Recall from Chapter 6 that an (s, t)-separator S is trivial if t has indegree zero, or s has out-degree zero in D − S. The following result which complements Theorem 9.3.9 is very important for the proof of correctness of the algorithm of Bang-Jensen and Thomassen, since it corresponds to a case where no problem reduction is possible (using the approach taken in the algorithm).
Theorem 9.3.13 [89] Let T be a semicomplete digraph, and let x1, x2, y1, y2 be distinct vertices of T , such that for each i = 1, 2, there are two, but not three, internally disjoint (xi, yi)-paths in T − {x3−i, y3−i}. Suppose that all (xi, yi)-separators of size 2 in T − {x3−i, y3−i} are trivial, for i = 1, 2. Then T has a pair of disjoint (x1, y1)-, (x2, y2)-paths. Furthermore such a pair of paths can be constructed in time O(n3).
Note that the semicomplete digraph in Figure 9.7 does not satisfy the assumption of Theorem 9.3.13 since the two non-labeled vertices in the middle form a non-trivial (x2, y2)-separator of size 2 in T − {x1, y1} .
9.3.3 The 2-Path Problem for Generalizations of Tournaments
Now we show that the 2-path problem can be solved in polynomial time for quite large classes of digraphs which can be obtained starting from semicomplete digraphs and then performing certain substitutions. The algorithm we

494 9. Disjoint Paths and Trees
describe uses the polynomial algorithm from Theorem 9.3.12 for the case of semicomplete digraphs as a subroutine. The results in this section are due to Bang-Jensen [52].
Theorem 9.3.14 [52] Let D = F [S1, S2, . . . , Sf ] where F is a strong digraph on f ≥ 2 vertices and each Si is a digraph with ni vertices and let x1, x2, y1, y2 be distinct vertices of D. There exists semicomplete digraphs T1, . . . , Tf such that V (Ti) = V (Si), i = 1, 2, . . . , f , and the digraph D = F [T1, T2, . . . , Tf ] has vertex-disjoint (x1, y1)-, (x2, y2)-paths if and only if D has such paths. Furthermore, given D and x1, x2, y1, y2, D can be constructed in time O(n2), where n is the number of vertices of D.
Proof: If D has the desired paths, then so does any digraph obtained from D by adding arcs. Hence if D has the desired paths, then trivially D exists and can be constructed in time O(n2) once we know a pair of disjoint (x1, y1)-, (x2, y2)-paths.
If no Si contains both of x1, y1 or both of x2, y2, then it is easy to see that D has the desired paths if and only if it has such paths which do not use an arc inside any Sj. Thus in this case we can add arcs arbitrarily inside each Si to obtain a D which satisﬁes the requirement.
Suppose next that some Si contains all of the vertices x1, x2, y1, y2. If there is an (xj, yj)-path P in Si − {x3−j, y3−j}, j = 1 or 2, then it follows from that fact that F is strong that D has the desired paths and we can ﬁnd such a pair in time O(n2). Thus, by our initial remark, we may assume that there is no (xj, yj)-path P in Si − {x3−j, y3−j} for j = 1, 2. Now it is easy to see that D has the desired paths if and only if it has such paths which do not use an arc inside any Sj. Thus we can replace Si with a tournament in which x1 and x2 both have no out-neighbours in Si − {x1, x2} and every other Sk by an arbitrary tournament on the same vertex set. Clearly the digraph D obtained in this way satisﬁes the requirement.
Suppose now without loss of generality that x1, y1 ∈ V (Sj) for some j but x2 ∈ V (Sj). Suppose ﬁrst that y2 ∈ V (Sj). If there is no (x1, y1)-path in Sj − y2, then D has the desired paths if and only if it has such paths which do not use an arc inside any Si and we can construct D by adding arcs in Sj in such a way that no (x1, y1)-path avoiding y2 is created (that is, y2 will still separate x1 from y1 in D V (Sj) ) and arbitrary arcs in every other Si. On the other hand if Sj − y2 contains an (x1, y1)-path avoiding y2, then it follows from the fact that F is strong that D has the desired paths and hence D exists as remarked above. Hence we may assume that y2 ∈ V (Sj).
If Sj contains an (x1, y1)-path which does not cover all the vertices of Sj, then it follows from the fact that F is strong that D has the desired paths. Thus we may assume that either Sj has no (x1, y1)-path, or every (x1, y1)path in Sj contains all the vertices of Sj. In the last case we may assume that V (Sj) separates x2 from y2. Now D has the desired paths if and only if it has such a pair which does not use any arcs from Sj. Thus in both cases we

9.3 Linkings in Tournaments and Generalizations of Tournaments 495
can construct D by replacing Sj by a tournament with no (x1, y1)-path and every other Si by an arbitrary tournament on the same vertex set, except in the case when x2 and y2 belong to some Si, i = j. In this case we replace that Si by a tournament with no (x2, y2)-path (by the remark above we may assume that Si has no (x2, y2)-path).
It follows from the considerations above that D can be constructed in time O(n2).
Recall that quasi-transitive digraphs can be decomposed according to Theorem 4.8.5. Hence we can apply Theorem 9.3.14 to these digraphs.
Theorem 9.3.15 [52] There exists a polynomial algorithm for the 2-path problem for quasi-transitive digraphs.
Proof: Let D be a quasi-transitive digraph and x1, x2, y1, y2 speciﬁed distinct vertices for which we want to determine the existence of vertex-disjoint (x1, y1)-,(x2, y2)-paths. First check that D − {xi, yi} contains an (x3−i, y3−i)path for i = 1, 2. If not then we stop. Now it follows from Theorem 4.8.5 that either x1, x2, y1, y2 are all in the same strong component of D, or the paths exist. For example, if D is not strong and y1, say, is not in the same strong component as x1 then, by Theorem 4.8.5, x1 and y1 belong to diﬀerent sets Wi, Wj in the canonical decomposition D = Q[W1, . . . , W|Q|], where Q is a transitive digraph. Hence x1→y1 and the desired paths clearly exist.
Thus we may assume that D is strong. Let D = S[W1, W2, . . . , W|S|] be a decomposition of D according to Theorem 4.8.5. Now apply Theorem 9.3.14 and construct the digraph D which has the desired paths if and only if D does. As remarked in Theorem 9.3.14, D can be constructed in polynomial time. By the construction of D (replacing each Wi by a semicomplete digraph) it follows that D is a semicomplete digraph and hence we can apply the polynomial algorithm of Theorem 9.3.12 to D in order to decide the existence of the desired paths in D. The algorithm of Theorem 9.3.12 can be used to ﬁnd vertex-disjoint (x1, y1)-, (x2, y2)-paths in D if they exist and given these paths it is easy to construct the corresponding paths in D (it suﬃces to take minimal paths).
By inspecting the proof of Theorem 9.3.14 it is not diﬃcult to see that the following much more general result is true. The main point is that in the proof of Theorem 9.3.14 we either ﬁnd the desired paths or decide that they exist if and only if there are such paths that use no arcs inside any Si. Hence instead of making each Ti semicomplete, we may just as well make it an independent set, by deleting all arcs inside Si.
Theorem 9.3.16 [52] Let Φ be a class of strongly connected digraphs, let Φ0 denote the class of all extensions of graphs in Φ and let
Φ∗ = {F [D1, . . . , D|F |] : F ∈ Φ, each Di is an arbitrary digraph}.

496 9. Disjoint Paths and Trees
There is a polynomial algorithm for the 2-path problem in Φ∗ if and only if there is a polynomial algorithm for the 2-path problem for all digraphs in Φ0.
This result shows that studying extensions of digraphs can be quite useful. One example of such a class Φ, for which Theorem 9.3.16 applies, is the class of strong semicomplete digraphs. This follows from the fact that we can reduce the 2-path problem for extended semicomplete digraphs to the case of semicomplete digraphs in the same way as we did for quasi-transitive digraphs in the proof of Theorem 9.3.15. Hence the 2-path problem is polynomially solvable for all digraphs that can be obtained from strong semicomplete digraphs by substituting arbitrary digraphs for vertices. It is important to note here that Φ must consist only of strong digraphs, since it is not diﬃcult to reduce the 2-path problem for arbitrary digraphs (which is N P-complete by Theorem 9.2.3) to the 2-path problem for those digraphs that can be obtained from the digraph H consisting of just an arc uv by substituting arbitrary digraphs for the vertex v. The proof of the following easy lemma is left to the reader as Exercise 9.21. Note that four is best possible as can be seen from the complete biorientation of the undirected graph consisting of 4-cycle x1x2y1y2x1 and a vertex z joined to each of the four other vertices.
Lemma 9.3.17 Let D be a digraph of the form D = C2[S1, S2], where Si is an arbitrary digraph on ni vertices, i = 1, 2. If D is 4-strong then D is 2-linked.
The following result generalizes Corollary 9.3.2.
Theorem 9.3.18 [52] Let k ≥ 4 be a natural number and let F be a digraph on f ≥ 2 vertices with the property that every k-strongly connected digraph of the form F [T1, T2, . . . , Tf ], where Ti, i = 1, 2, . . . , f , is a semicomplete digraph, is 2-linked. Let D = F [S1, S2, . . . , Sf ], where Si is an arbitrary digraph on ni vertices, i = 1, 2, . . . , f . If D is k-strongly connected, then D is 2-linked.
Proof: Let D = F [S1, S2, . . . , Sf ], where Si is an arbitrary digraph on ni vertices, i = 1, 2, . . . , f , be given. By Lemma 9.3.17 we may assume that D cannot be decomposed as D = C2[R1, R2], where R1 and R2 are arbitrary digraphs. Construct D as described in Theorem 9.3.14. Note that by Lemma 7.13.1, κ(D ) = κ(D). Thus D is k-strong and using Theorem 9.3.14 and the assumption of the theorem we conclude that D is 2-linked.
Corollary 9.3.19 [52] Every 5-strong quasi-transitive digraph is 2-linked.
Proof: By Theorem 4.8.5, every strong quasi-transitive digraph is of the form D = F [S1, S2, . . . , Sf ], f = |F |, where F is a strong semicomplete digraph and each Si is a non-strong quasi-transitive digraph on ni vertices. By Lemma

9.4 Linkings in Planar Digraphs 497
4.8.4 and the connectivity assumption, |F | ≥ 3. Note that for any choice of semicomplete digraphs T1, . . . , Tf the digraph D = F [T1, T2, . . . , Tf ] is semicomplete. Hence the claim follows from Theorem 9.3.18 and the fact that, by Corollary 9.3.2, every 5-strong semicomplete digraph is 2-linked. (Since F has at least three vertices, it follows from Lemma 7.13.1 that κ(D ) = κ(D).)
9.4 Linkings in Planar Digraphs
In this section we brieﬂy discuss the k-path problem for planar digraphs (recall the deﬁnition of a planar digraph from Section 4.14). The constraint that the digraph in question can be embedded in the plane clearly poses some restrictions to the structure of disjoint paths. This is illustrated by the following result.
x C
uv
y
Figure 9.8 A topological obstruction for the existence of disjoint (x, y)- and (u, v)paths in a planar graph G. The cycle C is the boundary of the outer face of G.
Proposition 9.4.1 Suppose that D = (V, A) is a planar digraph with distinct vertices x, y, u, v ∈ V and that D is embedded in the plane in such a way that the vertices x, v, y, u appear on the bounding cycle C of the outer face in that order (see Figure 9.4.1). Then D does not have a pair of disjoint (x, y)-, (u, v)-paths. Proof: We ﬁrst prove that no matter how we connect x and y by a simple (that is, not self intersecting) curve R and u, v by another simple curve R , both inside the bounded disc with boundary C (see Figure 9.8) the two curves must intersect. Suppose we can choose simple curves R, R so that R connects x and y and R connects u and v. Then we can add a new point z in the interior of the outer face and join it to each of the vertices x, y, u, v by disjoint simple curves which lie entirely in the closed disc formed by the outer face and

498 9. Disjoint Paths and Trees
its boundary C. This gives us an embedding of K5 in the plane, contradicting Theorem 4.14.1.
Suppose now that P, Q are disjoint paths in D such that P is an (x, y)path and Q is a (u, v)-path. In the embedding of D these correspond to simple curves and hence, by the argument above, they must intersect at some point in the plane. Since D is planar, no two arcs intersect in the interior (as curves) and hence we see that P and Q must intersect in some vertex v of D. However this contradicts the assumption that they are disjoint.
We point out that the ﬁrst part of the proof above can be established using the Jordan curve theorem directly to establish that R and R must intersect somewhere in the disc with boundary C (see e.g. the book by Bondy and Murty [127]).
It was shown by Lynch [529] that when k is part of the input, then the k-path problem remains N P-complete even for planar digraphs. For ﬁxed k, Schrijver has developed a polynomial algorithm.
Theorem 9.4.2 [656, 657] For every ﬁxed 3k the k-path problem is polynomially solvable for planar digraphs.
The proof method is based on cohomology over free (non-abelian) groups, a topic which would require too much space to cover in the present book. Schrijver mentions that part of the group theory and topology is mainly used to keep notation fairly simple, but in any case the proof is too complicated to include here even as a (convincing) sketch. For additional discussion on and applications (for digraphs embedded on surfaces) of this very powerful proof technique we refer the reader to Schrijver’s papers [656, 657, 658]. We should mention though that arguments like those used in the proof of Proposition 9.4.1 play an important role in Schrijver’s approach.
To further illustrate how to use planarity in arguments in disjoint path problems, we consider a special case of the k-path problem for which a good characterization for the existence of a prescribed linking has been found by Ding, Schrijver and Seymour [194].
Suppose that we are given a planar digraph D = (V, A) which is embedded in the plane in such a way that the vertices s1, s2, . . . , sk, t1, t2, . . . , tk all belong to the boundary of the outer face F of D. Ding, Schrijver and Seymour [194] proved that in this case there is a simple polynomial algorithm to decide the existence of a collection of disjoint paths P1, P2, . . . , Pk, where Pi is an (si, ti)-path, i = 1, 2, . . . , k.
In fact, as we will see below, it turns out to be easier to describe an algorithm for the following slight extension of the problem: in addition to the
3 That is, k is not part of the input.

9.4 Linkings in Planar Digraphs 499

vertices s1, s2, . . . , sk, t1, t2, . . . , tk we are also given subsets A1, A2, . . . , Ak of A and we demand that Pi can only use4 arcs from Ai for i = 1, 2, . . . , k.
Motivated by the example in Figure 9.8 we say that two pairs of terminals (si, ti) and (sj, tj) on bd(F ) cross if each simple curve from si to ti in R2 − F (considered as a subspace of R2) crosses each simple curve from sj to tj in R2−F . By Proposition 9.4.1 a necessary condition for the existence of disjoint
(s1, t1), . . . , (sk, tk)-paths in D is that the following cross-freeness condition is satisﬁed:

for every i = j (si, ti) and (sj, tj) do not cross.

(9.1)

Using the cross-freeness condition we see that there is no solution unless
the terminals occur in the order u1, v1, u2, v2, . . . uk, vk around bd(F ), where {ui, vi} = {sπ(i), tπ(i)} for some permutation π of {1, 2, . . . , k}. Clearly this condition can be checked in polynomial time if we are given the (polygonal)
embedding of D.
We measure closeness of two polygonal paths with the same end-points
by the area between the two paths. See Figure 9.9 for an illustration. The
proof of the following lemma is left as Exercise 9.23.

v1

v2 v3 v4

v5

v6

s

v8 v9 v7 v10 v11

t

Figure 9.9 Let R be the path sv1v2v3v4v5v6t in the underlying graph of D. The (s, t)-path sv7v2v9v5v6v11t is closer to R than the (s, t)-path sv7v8v9v5v6v11t.

Lemma 9.4.3 Let R be a path from x to y along the boundary of the outer face (ignoring the orientation of the arcs in D) and let D be a subdigraph of D which contains the vertices x and y. Then either D has no (x, y)-path or there exist a unique (x, y)-path Q in D which is closest to R. Given the embedding of D, we can ﬁnd Q in polynomial time if it exists. Furthermore, no other (x, y)-path ‘crosses over’ Q at any point (e.g. in Figure 9.9 the path v8v9v5 crosses over the path v2v9v10 at the vertex v9).
Now we are ready to describe a greedy algorithm which either ﬁnds the desired paths in D, or a proof that no such paths exist (using only arcs from the sets A1, A2, . . . , Ak).
4 In [194] Ding, Schrijver and Seymour consider an even more general case where not all paths linking diﬀerent pairs of terminals must be disjoint, but for simplicity we assume that they are all disjoint.

500 9. Disjoint Paths and Trees
Start with sk, tk. Since D satisﬁes the cross-freeness condition, one of the two paths between sk and tk along bd(F ) contains no other terminals. Denote this path by P .
If D Ak contains no (sk, tk)-path, then there is no solution, so assume below that such a path exists.
Let Pk be the unique (sk, tk)-path in D Ak which is closest to P . Modify Ai, i = 1, 2, . . . , k − 1 by removing from Ai every arc that is incident to a vertex on Pk. Now repeat the steps above for the pair sk−1, tk−1 and continue recursively.
After at most k iterations we either ﬁnd the required linking or conclude that no such linking exists.
To prove the correctness of the algorithm we observe that, if Q1, Q2, . . . , Qk is a solution, then so is Q1, Q2, . . . , Qk−1, Pk. Indeed, if Pk intersects some Qi, then so does Qk because Pk is either equal to Qk or strictly closer to P than Qk. This shows that the greedy choice is legal and the correctness follows. It also follows from Lemma 9.4.3 that the algorithm above is polynomial in the size of D.
We ﬁnish this section with some remarks on the problem (P3) in Proposition 9.2.1 for the case of planar digraphs. By Theorem 9.2.6 there is no degree of vertex-strong connectivity which guarantees that a digraph is 2cyclic (that is, has a cycle containing x, y for every choice of vertices x, y). For planar digraphs the maximum degree of vertex-strong connectivity is 5 (Exercise 7.8). One may ask whether there is some degree of vertex-strong connectivity which suﬃces to guarantee that the planar digraph is 2-cyclic. However this is not the case as shown by the 5-strong non-2-cyclic planar digraph Dk (k = 20) in Figure 9.10 (Exercise 9.25). This example arose from a personal communication with B¨ohme and Harant (October 1999). The fact that there exist 5-strong non-2-cyclic planar digraphs was also mentioned by Bermond and Thomassen in the survey paper [115]. Note also that these examples of 5-strong non-2-cyclic planar digraphs show that for directed graphs there is no analogue of Tutte’s theorem on hamiltonian planar graphs (every 4-connected planar graph is hamiltonian [721]).
Using the same family of planar undirected graphs Gk, k ≥ 20, as in Figure 9.10 one can easily construct 5-strong planar graphs which do not contain disjoint [s1, t1]-, [s2, t2]-paths, hence providing the proof that the condition of being 6-connected cannot be lowered to being 5-connected for undirected graphs (recall the discussion at the end of Subsection 9.2.1).
9.5 Arc-Disjoint Branchings
This section is devoted to a very important result due to Edmonds [214]. The result can be viewed as just a fairly simple generalization of Menger’s theorem. However, as will be clear from the next subsections, it has many important consequences. Recall again that an out-branching is a spanning

9.5 Arc-Disjoint Branchings 501

x

↔
G20

y

G4
(a) (b)
Figure 9.10 Part (a) shows a planar 5-connected graph Gk with k = 4; Part (b) shows a 5-strong planar digraph Dk that is obtained from the complete biorientation of Gk (shown for k = 20) by adding two new vertices x, y and joining these by the arcs indicated. The digraph has no cycle through x and y.

out-arborescence. In this and the next sections, unless explicitly stated otherwise, we assume that we are dealing with a directed multigraph (that is, we allow parallel arcs, but no loops).

Theorem 9.5.1 (Edmonds’ branching theorem) [214] A directed multi-
graph D = (V, A) with a special vertex z has k arc-disjoint spanning outbranchings rooted at z if and only5 if

d−(X) ≥ k

for all ∅ = X ⊆ V − z.

(9.2)

Proof: We give a short proof due to Lov´asz [521]. The necessity is clear, so we concentrate on suﬃciency. The idea is to grow an out-arborescence F from z in such a way that the following condition is satisﬁed:

d−D−A(F )(U ) ≥ k − 1 for all ∅ = U ⊆ V − z.

(9.3)

If we can keep on growing F until it becomes spanning while always preserving (9.3), then the theorem follows by induction on k. To show that we can do this, it suﬃces to prove that we can add one more arc at a time to F until it is spanning. Let us call a set X ⊆ V − z problematic if d−D−A(F )(X) = k − 1. It follows from the submodularity of d−D−A(F ) (recall Corollary 7.1.2) that, if X, Y are problematic and X ∩ Y = ∅, then so are X ∩ Y, X ∪ Y . Observe also that, if X is problematic, then X ∩ V (F ) = ∅, because X has in-degree at least k in D. If all problematic sets are contained in V (F ), then let T = V . Otherwise let T be a minimal (with respect to inclusion) problematic set which is not contained in V (F ).

5 By Menger’s theorem (Theorem 7.3.1), (9.2) is equivalent to the existence of k arc-disjoint-paths from z to every other vertex of D.

502 9. Disjoint Paths and Trees
We claim that there exists an arc uv in D such that u ∈ V (F ) ∩ T and v ∈ T − V (F ). Indeed if this was not the case then every arc that enters T − V (F ) also enters T and we would have

d−D(T − V (F )) = d−D−A(F )(T − V (F )) ≤ d−D−A(F )(T ) ≤ k − 1,

(9.4)

contradicting the assumption of the theorem. The arc uv cannot enter a problematic set T , since that would contradict
the deﬁnition of T (recall that u ∈ T ). Hence we can add the arc uv to F without violating (9.3) and the claim follows by induction.

The proof above can be turned into a polynomial algorithm which given a directed multigraph D = (V, A) a vertex z ∈ V and a natural number k, either ﬁnds k arc-disjoint out-branchings from k, or a set X ⊆ V − z with out-degree less than k (Exercise 9.27).
The following possible generalization naturally emerges. In addition to z, we are given a subset T ⊆ V − z so that d−(X) ≥ k for every subset X ⊆ V − z, X ∩ T = ∅ (by Menger’s theorem this is equivalent to saying that there are k-arc-disjoint (z, t)-paths for every t ∈ T ). Is it true that there are k arc-disjoint out-arborescences rooted at z so that each contains every element of T ? The answer is yes if T = V − z (by Edmonds’ theorem) or if |T | = 1 (by Menger’s theorem). However, Lov´asz [519] found the example in Figure 9.11 which shows that such a statement is not true in general. This example can be generalized to directed multigraphs with arbitrarily many vertices (Exercise 9.30).

x

z
Figure 9.11 A digraph with λ(z, t) ≥ 2, t ∈ T which has no two arc-disjoint outarborescences rooted at z and both containing every element of T . Here T consists of the three black vertices ([519, Figure 1]).
Observe that in Figure 9.11 d−(x) = 1 < 2 = d+(x) holds for the only vertex x not in T and recall that the desired number of arc-disjoint arborescences

9.5 Arc-Disjoint Branchings 503
above was two. Bang-Jensen, Frank and Jackson proved that, if λ(z, x) ≥ k holds for those vertices x ∈ V (D) for which d+(x) > d−(x) (that is, the value of k is restricted by the local arc-connectivities from z to these vertices), then a generalization is indeed possible.
Theorem 9.5.2 [53] Let D = (V, A) be a directed multigraph with a special vertex z and let T := {x ∈ V − z : d−(x) < d+(x)}. If λ(z, x) ≥ k(≥ 1) for every x ∈ T , then there is a family F of k arc-disjoint outarborescences rooted at z so that every vertex x ∈ V belongs to at least r(x) := min(k, λ(z, x)) members of F.
Clearly, if in Theorem 9.5.2 λ(z, x) ≥ k holds for every x ∈ V , then we are back at Edmonds’ theorem. Another special case is also worth mentioning. Call a directed multigraph D = (V, A) with root z a preﬂow directed multigraph if d−(x) ≥ d+(x) holds for every x ∈ V − z. (The name arises from a max-ﬂow algorithms of Karzanov [475] and Goldberg and Tarjan [324], see also the deﬁnition of a preﬂow in Chapter 3). The following corollary of Theorem 9.5.2 may be considered as a generalization of Theorem 3.3.1.
Corollary 9.5.3 [53] In a preﬂow directed multigraph D = (V, A) for any integer k(≥ 1) there is a family F of k arc-disjoint out-arborescences with root z so that every vertex x belongs to min(k, λ(z, x; D)) members of F. In particular, if k := max(λD(z, x) : x ∈ V −z), then every x belongs to λD(z, x) members of F.
Aharoni and Thomassen have shown that Edmonds’ branching theorem cannot be generalized to inﬁnite directed multigraphs [4].
9.5.1 Implications of Edmonds’ Branching Theorem
Below we give a number of nice consequences of Theorem 9.5.1 (for yet another consequence see Theorem 9.7.2). The ﬁrst result, due to Even, may be viewed as a generalization of Menger’s theorem for global arc-strong connectivity.
Corollary 9.5.4 [229, Theorem 6.10] Let D = (V, A) be a k-arc-strong directed multigraph and let x, y be arbitrary distinct vertices of V . Then for every 0 ≤ r ≤ k there exist paths P1, P2, . . . , Pk in D which are arc-disjoint and such that the ﬁrst r paths are (x, y)-paths and the last k − r paths are (y, x)-paths.
Proof: Let [D, x, y] be as described above. Add a new vertex s and join it to x by r parallel arcs of the form sx and to y by k − r parallel arcs of the form sy. Let D denote the new directed multigraph. We claim that D satisﬁes (9.2). To see this let X ⊆ V be arbitrary. If X = V , then we have d−D (X) ≥ d−D(X) ≥ k, since D is k-arc-strong. If X = V , we have

504 9. Disjoint Paths and Trees

d−D (V ) = d+D (s) = k. It follows from Theorem 9.5.1 that D contains k arc-disjoint out-branchings all rooted at s. By the construction of D , these branchings restricted to D must consist of r out-branchings rooted at x and k − r out-branchings rooted at y. Take the r (x, y)-paths from those rooted at x and the k − r (y, x)-paths from those rooted at y and we obtain the desired paths.
The next result, due to Nash-Williams, gives a suﬃcient condition for the existence of k-edge-disjoint spanning trees in an undirected graph. This condition is the best possible in terms of the edge-connectivity (see the remark after Theorem 9.5.6) and hence we see that for undirected graph we may need twice the obvious edge-connectivity requirement to guarantee k edge-disjoint trees. This contrasts with the case for directed graphs where k-arc-strong connectivity suﬃces by Edmonds’ theorem.
Theorem 9.5.5 [584] Every 2k-edge-connected undirected graph contains k edge-disjoint spanning trees.
Proof: Let G = (V, E) be a 2k-edge-connected undirected graph. By NashWilliams’ orientation theorem (Theorem 8.6.3), G has a k-arc-strong orientation D = (V, A). Let z ∈ V be arbitrary and note that d−(X) ≥ k holds for each subset X ⊆ V − z of vertices. Hence by Theorem 9.5.1, D contains k arc-disjoint out-branchings rooted at z. Suppressing the orientation of all arcs on the branchings we obtain k edge-disjoint trees in G = U G(D).
The following characterization, due to Tutte, of undirected graphs which have k edge-disjoint spanning trees can also be derived from Edmonds’ branching theorem and Theorem 8.7.6 (see Exercise 9.35). See also Exercise 8.57 for a simpler orientation result which still implies Theorem 9.5.6.
Theorem 9.5.6 [722] An undirected graph G = (V, E) has k edge-disjoint spanning trees if and only if

e(Vi, Vj) ≥ k(p − 1),
1≤i<j≤p

(9.5)

holds for every partition V1, V2, . . . , Vp of V . Here e(Vi, Vj) denotes the number of edges with one end in Vi and the other in Vj.

It is easy to derive Theorem 9.5.5 from Theorem 9.5.6. Furthermore, we
can use Theorem 9.5.6 to show that the condition in Theorem 9.5.5 is best
possible in terms of the edge-connectivity. Let Gk be the graph obtained from the complete graph on 2k + 2 vertices by removing the edges of a hamiltonian
cycle. Then it is easy to show that Gk is (2k − 1)-edge-connected and using Theorem 9.5.6 on the partition corresponding to one vertex per set in the
partition we can see that Gk has no k edge-disjoint spanning trees (in fact this partition has precisely one arc less than the required number). In order to

9.5 Arc-Disjoint Branchings 505

get an example with arbitrarily many vertices and no k edge-disjoint trees for
each k we let H be an arbitrary 2k-edge-connected graph and let Hk be the graph consisting of 2k + 2 copies H1, H2, . . . , H2k+2 of H and with one edge between Hi and Hj just if the corresponding vertices vi, vj are adjacent in Gk (where we have assumed that the vertices of Gk are labelled v1, v2, . . . , v2k+2 and Hi corresponds to vi for i = 1, 2, . . . , 2k + 2). It is not diﬃcult to prove that Hk is (2k − 1)-edge-connected and the partition corresponding to the 2k + 2 copies of H shows that Hk has no k edge-disjoint spanning trees. Note also that Gk above is (2k − 1)-edge-connected and (2k − 1)-regular. Furthermore , a simple counting argument shows that all except ﬁnitely many
(2k − 1)-edge-connected and (2k − 1)-regular graphs have no k edge-disjoint
spanning trees (simply because they do not have enough edges).
In some applications (e.g. when a number of tasks have to be distributed to
diﬀerent units who can cover part of the jobs or demands) one is interested
in covering all edges (arcs) of an undirected (a directed) graph by forests
(arborescences).

Theorem 9.5.7 [585] Let G = (V, E) be an undirected graph. Then E can be covered by k forests if and only if

|E(G X )| ≤ k(|X| − 1)

for all X ⊆ V.

(9.6)

Proof: Since no forest can use more than |X| − 1 edges with both ends inside any set X, we see that the condition (9.6) is necessary. To prove suﬃciency we use Theorem 9.5.1 and the following result which follows easily from Theorem 8.7.3:

Proposition 9.5.8 A graph H = (V, E) has an orientation D = (V, A) such that d−D(v) ≤ k for every vertex v ∈ V if and only if

|E(G X )| ≤ k|X|

for all X ⊆ V.

Suppose now that G = (V, E) satisﬁes (9.6). By Proposition 9.5.8, G has

an orientation D vertex s to D and

such add

kth−adt −Dd(−Dv()va)rc≤s

k for from

every s to v

vertex v ∈ V . for each v ∈ V .

Add a new Denote the

new directed multigraph by D . We claim that

d−D (X) ≥ k

for all X ⊆ V.

This follows from the fact that for every X ⊆ V we have

(9.7)

d−D (X) = d−D(v) − |E(G X )|
v∈X
= k|X| − |E(G X )|
≥ k|X| − k(|X| − 1) = k.

506 9. Disjoint Paths and Trees

By Theorem 9.5.1, D has k arc-disjoint out-branchings rooted at s. These branchings must use all arcs of D since every vertex of V has in-degree one in each of these branchings and we have only added k − d−D(v) arcs from s to v. Now delete the vertex s from each of the branchings and suppress the orientations of all arcs. The resulting k forests cover E.
The last part of the proof above also implies the suﬃciency part of the following theorem. The necessity of (9.8) follows from the fact that no vertex of an out-branching has in-degree bigger than one. The necessity of (9.9) is seen as in the proof above.

Theorem 9.5.9 [252] The arc set of a directed graph D = (V, A) can be covered by k out-arborescences if and only if

d−(v) ≤ k

for all v ∈ V and

(9.8)

|A(D X )| ≤ k(|X| − 1)

for all X ⊆ V.

(9.9)

9.6 Edge-Disjoint Mixed Branchings
We saw in the proof of Theorem 9.5.5 that we could use Edmonds’ branching theorem to prove that every 2k-edge-connected graph has k-edge-disjoint spanning trees. However, that proof does not imply an algorithm to check whether a given undirected graph has k edge-disjoint spanning trees. In fact this problem is more complicated for undirected graphs than the problem of ﬁnding k arc-disjoint out-branchings from a given root in a directed multigraph where the proof of Edmonds’ branching theorem provides the answer. For undirected graphs the characterization, given in Theorem 9.5.6,is much more complicated and does not imply a polynomial algorithm for the problem. Note that such an algorithm can be obtained from a formulation of the problem as a matroid partition problem (see Exercise 12.46). See also the remark at the end of the section.
A mixed multigraph is the same as a mixed graph, except that we allow parallel arcs and parallel edges as well as arcs that are parallel to edges. Consider the following common generalization of a spanning tree rooted at s in an undirected multigraph and an out-branching with root s in a directed multigraph. A mixed out-branching rooted at s is a mixed graph F whose
↔
underlying graph is a tree such that F contains an out-branching rooted at s. We say that two subgraphs of a mixed multigraph are edge-disjoint if they do not share any arcs or edges (they may contain diﬀerent copies of an arc/edge, but not the same).

9.7 Arc-Disjoint Path Problems 507

Deﬁnition 9.6.1 Let M = (V, E ∪ A) be a mixed multigraph with a special vertex s. A mixed out-branching Fs+ with root s is a spanning tree in the underlying undirected multigraph G of M with the property that there is a path from s to every other vertex v in Fs+.
One reason why mixed out-branchings are of interest in relation to undirected graphs can be seen from the following easy lemma (which in particular covers the case when no arc of M is directed).

Lemma 9.6.2 Let M = (V, E ∪ A) be a mixed multigraph with a special vertex s called root. There are k edge-disjoint mixed out-branchings rooted at s if and only if there exist an orientation D of M with k edge-disjoint out-branchings at s.

Proof: Exercise 9.31.

The following characterization, due to Frank, generalizes Theorem 9.5.6 and Theorem 9.5.1. This theorem can be derived from the feasibility theorem for intersecting submodular ﬂows (Exercise 9.33).

Theorem 9.6.3 [252] Let M = (V, E ∪ A) be a mixed multigraph with a

special vertex s. There are k edge-disjoint mixed out-branchings rooted at s,

if and only if the following holds for all subpartitions F = {V1, V2, . . . , Vt} of V − s:

aF ≥ kt,

(9.10)

where aF denotes the number of edges, oriented or not, which enter some Vi.

We point out that one can use submodular ﬂows to decide in polynomial time whether a given undirected graph G has k edge-disjoint spanning trees. By Lemma 9.6.2 all we need to check is whether there is some orientation of G which has k arc-disjoint out-branchings from a given vertex. Thus, given G we form an arbitrary orientation D of G and then follow the approach in Exercise 8.65. It is not hard to see that, with a slight modiﬁcation, the same approach can be used to determine the existence of k edge-disjoint mixed branchings from a given root in a mixed graph (Exercise 9.32).

9.7 Arc-Disjoint Path Problems
Recall that a directed multigraph D = (V, A) is weakly k-linked if for every choice of (not necessarily distinct) vertices s1, . . . , sk, t1, . . . , tk, D contains arc-disjoint paths P1, . . . , Pk such that Pi is an (si, ti)-path for i = 1, . . . , k. The arc-disjoint k-path problem is the following. Given a directed multigraph D = (V, A) and distinct vertices x1, x2, . . . , xk, y1, y2, . . . , yk, decide whether D contains k arc-disjoint paths P1, . . . , Pk such that Pi is an (xi, yi)path. In view of Theorem 9.7.2 below, the following result by Fortune, Hopcroft and Wyllie may seem slightly surprising.

508 9. Disjoint Paths and Trees
Theorem 9.7.1 [247] The arc-disjoint k-path problem is N P-complete already for k = 2.
Proof: Let [D, x, y, u, v] be an instance of the 2-path problem. Transform D = (V, A) into the directed multigraph H by performing the vertex-splitting procedure (see Section 3.2). Then it is easy to show that H has a pair of arcdisjoint (xt, ys)-, (ut, vs)-paths if and only if D has disjoint (x, y)-, (u, v)-paths (Exercise 9.36). Since H can be constructed from D in polynomial time, the claim now follows from Theorem 9.2.3.
For planar directed multigraphs it is an open problem whether there exists a polynomial algorithm to decide the existence of two arc-disjoint paths with prescribed end vertices (see e.g. Schrijver’s papers [656, page 265] and [658]). Even the complexity of the special case when we are looking for arc-disjoint (x, y)- and (y, x)-paths is open! Hence we see from Theorem 9.4.2 that the arc-disjoint 2-path problem is much more diﬃcult for planar digraphs than the 2-path problem. This is not really surprising since planarity certainly has implications on vertex disjoint paths, whereas the implications on arc-disjoint paths are not so obvious although there clearly are some.
Observe that, if D is weakly k-linked, then D is k-arc-strong. To see this it suﬃces to take si = x and ti = y for each i, then there are k arc-disjoint (x, y)-paths in D and since x, y may be chosen arbitrarily, it follows that D is k-arc-strong.
Shiloach observed [669] that Edmonds’ branching theorem implies that k-arc-strong connectivity is also suﬃcient for the existence of k arc-disjoint paths with speciﬁed initial and terminal vertices:
Theorem 9.7.2 A directed multigraph D is weakly k-linked if and only if D is k-arc-strong.
Proof: Above we have argued on the necessity. To see the suﬃciency, let x1, x2, . . . , xk, y1, . . . , yk be given. Construct a new directed multigraph D by adding a new vertex s and arcs sxi, i = 1, 2, . . . , k to D. Since D is k-arcstrong, it is not diﬃcult to check that d−D (X) ≥ k for every subset X of V . Hence by Edmonds’ branching theorem, D has arc-disjoint out-branchings Fs+,1, . . . , Fs+,k all rooted at s. Since s has out-degree k in D , each Fs+,i must use precisely one arc out of s and without loss of generality Fs+,i uses the arc sxi. Now it is clear that Fs+,i contains an (xi, yi)-path Pi and the paths P1, . . . , Pk form the desired linking.
Using Theorem 9.5.2 we can obtain, in an analogous way, the following suﬃcient condition, due to Bang-Jensen, Frank and Jackson, for the existence of k arc-disjoint paths with prescribed initial and terminal vertices (Exercise 9.37).

9.7 Arc-Disjoint Path Problems 509
Theorem 9.7.3 [53] Let (s1, t1), . . . , (sk, tk) be k pairs of vertices in a directed multigraph D = (V, A) so that for every vertex x with d−(x) < d+(x) or x = tj there are arc-disjoint paths from si to x (i = 1, . . . , k). Then there are arc-disjoint paths from si to ti (i = 1, . . . , k).
Note that, if we only impose the condition in Theorem 9.7.3 on the vertices ti, i = 1, 2, . . . , k, then D may not have arc-disjoint paths from si to ti (i = 1, 2, . . . , k). This can be seen from the example in Figure 9.12. The example can easily be generalized to arbitrary local strong connectivities from si to ti, i = 1, 2 while preserving planarity. We formulate this as a theorem below.
Theorem 9.7.4 For every natural number k there exists a planar digraph D with distinct vertices s1, s2, t1, t2 such that D has κD(si, ti) ≥ k for i = 1, 2, but D has no arc-disjoint (s1, t1)-, (s2, t2)-paths.
This shows that there is no suﬃcient condition for the existence of arcdisjoint paths connecting the vertices of a prescribed set in terms of local vertex-strong connectivities from si to ti, i = 1, 2 . . . , r.
s2

s1 t1

t2
Figure 9.12 An example of a planar digraph with κ(si, ti) = 2, i = 1, 2 and no arc-disjoint (s1, t1)-, (s2, t2)-paths.

As yet another example of the usefulness of Edmonds branching theorem,
we consider the following problem called the arc-disjoint (t1, t2)-linking problem: given a directed multigraph D and two speciﬁed vertices t1 and t2. Do there exist arc-disjoint (s1, t1)-, (s2, t2)-paths for every choice of vertices s1, s2 in D, except possibly in the case when si = tj = ti and there are no arcs out of si? The (t1, t2)-cut condition is satisﬁed by D if

|(S, S¯)| ≥ |{i = 1, 2 : ti ∈ S}|

(9.11)

for each (t1, t2)-cut (S, S¯). The cut condition is obviously a necessary condition for the directed multigraph to have the arc-disjoint linking property.
Below we give a very simple proof due to Frank (private communication,
April 1994) that it is also suﬃcient.

510 9. Disjoint Paths and Trees
Theorem 9.7.5 D has the arc-disjoint linking property with respect to the set {t1, t2} if and only if D satisﬁes the (t1, t2)-cut-condition.
Proof: By the remark above, it suﬃces to consider the case when D satisﬁes the (t1, t2)-cut-condition. Add an extra vertex t and the following new arcs: t1t, t2t, t1s2, t2s1. Now it follows from Theorem 9.5.1 and the fact that D satisﬁes the (t1, t2)-cut condition that in the extended graph there are 2 arcdisjoint in-branchings Ft−,1, Ft−,2 rooted at t. These contain the two required paths in the original graph since the new arcs t1s2 and t2s1 cannot play a role.
9.7.1 Arc-Disjoint Paths in Acyclic Directed Multigraphs
The following easy observation, due to Fortune, Hopcroft and Wyllie, can be used to reduce the arc-disjoint k-path problem to the k-path problem in the case of acyclic directed multigraphs. We need the following lemma whose proof is left as Exercise 9.38.
Lemma 9.7.6 If D is acyclic, then so is its line digraph L(D).
Theorem 9.7.7 [247] For each k, there exists a polynomial algorithm for the arc-disjoint k-path problem for the class of acyclic directed multigraphs.
Proof: Let [D, x1, x2, . . . , xk, y1, y2, . . . , yk] be an instance of the arc-disjoint k-path problem where D is an acyclic directed multigraph. If some xi has outdegree zero or some yj has in-degree zero, then trivially the desired paths do not exist. Hence we may assume that this is not the case.
Transform the instance [D, x1, x2, . . . , xk, y1, y2, . . . , yk] into a new instance [D , x1, x2, . . . , xk, y1, y2, . . . , yk] as follows. If xi has out-degree two or more we add a new vertex xi and the arc xixi to D; otherwise let xi := xi, i = 1, 2, . . . , k. Similarly, if yj has in-degree more than one, we add a new vertex yj and the arc yjyj; otherwise let yj := yj, j = 1, 2, . . . , k. Clearly, D has arc-disjoint paths P1, . . . , Pk such that Pi is an (xi, yi)-path, i = 1, 2, . . . , k, if and only if D has arc-disjoint paths P1, . . . , Pk, where Pi is an (xi, yi)-path, i = 1, 2, . . . , k.
Now consider D∗ := L(D ) and let si (ti) be the vertex of D∗ which corresponds the unique arc with tail (head) xi (yi). Then it is easy to show that D∗ has a collection Q1, Q2, . . . , Qk of disjoint paths so that Qi is an (si, ti)-path, i = 1, 2, . . . , k if and only if D has arc-disjoint paths P1, . . . , Pk such that Pi is an (xi, yi)-path, i = 1, 2, . . . , k.
Since there is a polynomial algorithm for transforming the instance [D, x1, x2, . . . , xk, y1, y2, . . . , yk] into [D∗, s1, s2, . . . , sk, t1, t2, . . . , tk], the theorem now follows from Theorem 9.2.14.
In [656], Schrijver shows how to apply a polynomial algorithm for the arc-disjoint k-path problem in acyclic digraphs to solve a scheduling problem in the airline industry.

9.7 Arc-Disjoint Path Problems 511
9.7.2 Arc-Disjoint Paths in Eulerian Directed Multigraphs
As we will see below, questions about arc-disjoint paths are slightly easier for eulerian directed multigraphs than for arbitrary directed multigraphs. However, the arc-disjoint 2-path problem seems diﬃcult and is still open. As we mentioned in Chapter 7, eulerian directed multigraphs often have properties similar to those of undirected multigraphs. This is also illustrated by their properties with respect to arc-disjoint paths as can be seen from some of the results mentioned in this subsection (see, e.g., Figure 9.14).
We start with a very simple, yet quite important observation. As mentioned earlier the complexity version of the corresponding problem for planar digraphs is still open.
Lemma 9.7.8 Let D be a eulerian directed multigraph and let s, t be distinct vertices of D. Then D has arc-disjoint (s, t)-, (t, s)-paths if and only if D has an (s, t)-path.
Proof: Let P be an arbitrary (s, t)-path. Let D be obtained from D by removing the arcs of P . In D , every vertex distinct from s, t has in-degree equal out-degree and we have d−D (s) = d+D (s) + 1, d+D (t) = d−D (t) + 1. Let N (D ) be the network representation of D (recall Deﬁnition 7.1.4) and let x be the ﬂow that has value equal to the capacity on every arc. By the ﬂow decomposition theorem (Theorem 3.3.1), x can be decomposed into a (t, s)ﬂow of value one and some cycle ﬂows. Since the (t, s)-path in N (D ) is also a path in D , D contains a (t, s)-path as claimed.
Let x1, . . . , xk be a k-tuple of (not necessarily distinct) vertices, which will be called terminals. We say that a trail T = (v0v1v2 . . . vt−1vt) visits the terminals in the order x1, . . . , xk if x1 = vi1 , x2 = vi2 , . . . , xk = vik for some 0 ≤ i1 ≤ . . . ≤ ik ≤ t. (We do not exclude some additional occurrences of terminals in a trail. In general, a trail may visit given terminals in several diﬀerent orders.) Based on the following lemma (whose proof is left as Exercise 9.42), we could restrict ourselves only to eulerian trails. However, it is sometimes convenient to work also with non-eulerian trails.
Lemma 9.7.9 Let D be an eulerian directed multigraph. Assume that there is a trail visiting some terminals in the order x1, . . . , xk. Then there exists an eulerian trail visiting the terminals in the same order.
Given an eulerian directed multigraph and terminals x1, x2, . . . , xk there are at least three diﬀerent problems one may consider [440]:
Speciﬁc Trail Problem (ST-problem).
Instance: An eulerian directed multigraph G and an ordered k-tuple of terminals x1, . . . , xk.

512 9. Disjoint Paths and Trees
Question: Does there exist a trail visiting the terminals in the order x1, . . . , xk ?
Unique Trail Problem (UT-problem).
Instance: An eulerian directed multigraph G and an unordered k-tuple of terminals x1, . . . , xk.
Question: Do all eulerian trails visit the terminals in the same cyclical order?
All Trail Problem (AT-problem).
Instance: An eulerian directed multigraph G and an unordered k-tuple of terminals x1, . . . , xk.
Question: Does there exist, for every permutation π of {1, . . . , k}, a trail visiting the terminals in the order xπ(1), . . . , xπ(k)?
We will denote by k-ST, k-UT and k-AT the corresponding problems when the number of terminals is exactly k. The ST-problem seems to be the most important among these three problems, since it is equivalent to the eulerian arc-disjoint linking problem (see Lemma 9.7.10). However, the remaining two problems occur naturally in the study of the ST-problem.
As we show below, results on these three problems for eulerian directed multigraphs are, in fact, strongly related to arc-disjoint linkings in directed multigraphs which are not eulerian, but become eulerian if we add the socalled demand arcs. Let [D, s1, s2, . . . , sk, t1, t2, . . . , tk] be an instance of the arc-disjoint k-path problem. The demand directed multigraph H associated with this instance is the directed multigraph consisting of the arcs6 t1s1, t2s2, . . . , tksk. The special case of the arc-disjoint k-path problem when D + H is eulerian, (here H is the demand directed multigraph of D) is called the eulerian arc-disjoint k-linking problem. When, instead of being a ﬁxed number k, the number of demand arcs is part of the input, we call the above problem the eulerian arc-disjoint linking problem.
Lemma 9.7.10 The k-ST-problem is equivalent to the eulerian arc-disjoint k-linking problem.
Proof: We show that the k-ST problem is a special case of the eulerian arcdisjoint k-linking problem using the following reduction. Let [D, x1, . . . , xk] be an instance of the k-ST -problem. Deﬁne s1, t1, . . . , sk, tk by si = xi and ti = xi+1, i = 1, . . . , k, (xk+1 = x1) and let H consist of the arcs tisi, i = 1, . . . , k. Then D + H is eulerian and it is easy to see that D + H has arc-disjoint paths P1, . . . , Pk, where Pi is and (si, ti)-path, i = 1, 2, . . . , k, if and only if D has a trail visiting the terminals in the order x1, x2, . . . , xk.
Conversely, given an instance [D, s1 . . . , sk, t1, . . . , tk] of the eulerian arcdisjoint k-linking problem (thus D + H is eulerian), we construct an instance
6 Hence, if s1 = s2 = . . . = sk and t1 = t2 = . . . = tk, the demand directed multigraph consists of k parallel arcs from t1 to s1.

9.7 Arc-Disjoint Path Problems 513
of the k-ST -problem as follows. Let D˜ be the directed multigraph obtained from D by adding new vertices x1, . . . , xk, and arcs xisi, tixi+1, i = 1, . . . , k. Clearly, D˜ is an eulerian directed multigraph, and it admits a closed trail visiting the terminals in the order x1, . . . , xk if and only if D admits an arcdisjoint k-linking for the prescribed pairs (si, ti) i = 1, . . . , k, of terminals.
Now we see from Lemma 9.7.8 that the arc-disjoint 2-path problem is easy in the case when the directed multigraph in question becomes eulerian if we add the two demand arcs t1s1, t2s2. This was also observed by Frank in [257]. The eulerian arc-disjoint 3-linking problem is already considerably harder. It was solved by Ibaraki and Poljak [440]. We describe their main result in Theorem 9.7.11.
It is easy to see that for k = 3, the problems 3-ST, 3-UT, and 3-AT are mutually equivalent from a complexity point of view. The reason is that for k = 3 there are only two distinct cyclical orders of terminals, (x1, x2, x3) and (x1, x3, x2). Moreover, we may assume that one eulerian trail T of G is already given (since it may be constructed by a polynomial time algorithm according to Exercise 1.72). The trail T visits the terminals in one of the possible orders, say (x1, x2, x3). Hence it only remains to decide whether there is a trail visiting the terminals in the other order.
We recall the solution, due to Ibaraki and Poljak [440], of the UT-problem, since it suggests a possible approach to the remaining two problems. Recall that, for an arc a of D, D/a denotes the directed multigraph obtained from D by (set-)contracting the arc a. We allow terminals to be identiﬁed by the contraction. Below we denote the set of terminals by X and an instance of the U T -problem by [D, X]. Clearly, if [D, X] admits several orders of visiting terminals, then [D/a, X] admits several orders as well, but the converse need not be true. We say that [D, X] is UT-minimal, if [D, X] admits unique cyclical order of visiting terminals by an eulerian trail, but [D/a, X] admits several orders whenever any arc a is contracted. Ibaraki and Poljak characterized U T -minimal instances.
Theorem 9.7.11 [440] Let [D, X] be a UT-minimal instance. Then (a) d+(x) = d−(x) = 1 for every terminal x, and d+(u) = d−(u) = 2 for
every non-terminal u, (b) D can be embedded in the plane such that every face is a directed cycle,
and all terminals lie on one common face.
Observe that ﬁrst part of the condition (b) is equivalent with the property that the four edges incident to a non-terminal vertex u are oriented alternatively out of and in to the vertex u (in the planar representation). See Figure 9.13.
Theorem 9.7.12 [440] Both the UT-problem and the 3-ST-problem are polynomially solvable.

514 9. Disjoint Paths and Trees
x3
x1 x2
Figure 9.13 An eulerian digraph with no (eulerian) trail visiting x1, x2, x3 in that order.
Furthermore, Ibaraki and Poljak proved that the eulerian arc-disjoint linking problem and hence the ST problem are N P-complete. Theorem 9.7.13 [440] The eulerian arc-disjoint linking problem is N Pcomplete. Proof: We sketch the construction used in [440]. The reduction is from the arc-disjoint 2-path problem, which is N P-complete by Theorem 9.7.1. Let [D = (V, A), s1, s2, t1, t2] be an instance of the arc-disjoint 2-path problem. Let D∗ = D + H be the directed multigraph we obtain from D by adding the two demand arcs t1s1 and t2s2.
Form a directed multigraph D from D by adding two new vertices s, t assuvnmda,sofofwrdee+Dllv∗ea(rvsy)mv−a∈dx−D{V0∗,,(dva−D)p∗pt(aevkn)edn−inogdv+Demr∗a(tvxh){o}0s,eadr+Dvce∗sr(tvoi)cf e−tshdfeo−Drf∗ow(rvmh)i}cvhatr.tchLsiesotfnputhmbebefeortrhmies positive. Now let si = s and ti = t, i = 3, 4, . . . , p + 2, be new terminals. Then [D , s1, s2, . . . , sp+2, t1, t2, . . . , tp+2] is an instance of the eulerian arc-disjoint linking problem and it is not diﬃcult to show that D has arc-disjoint (s1, t1)-, (s2, t2)-paths if and only if D has arc-disjoint (si, ti)-paths, i = 1, 2, . . . , p+2, (Exercise 9.43).
Ibaraki and Poljak posed the following conjecture: Conjecture 9.7.14 [440] The k-ST-problem is polynomial for any ﬁxed k.
The condition of minimality which was used in Theorem 9.7.11 can be replaced by a more technical notion of irreducibility. Let us say that an instance [D, X] is 2-irreducible if there is no set S, |S| > 1, of vertices such that one of the following holds: (a) |(S, S¯)| = |(S¯, S)| ≤ 2, D S is connected and S ∩ X = ∅, (b) |(S, S¯)| = |(S¯, S)| = 1, and |S ∩ X| = 1.

9.7 Arc-Disjoint Path Problems 515
Note that D/S (the directed multigraph obtained by contracting S) is eulerian whenever D is eulerian. It is not diﬃcult to see the following:
Lemma 9.7.15 Let [D, X] be an instance of the UT-problem which admits a unique order, and let S satisfy one of the conditions (a) and (b). Then [D/S, X] admits a unique order as well.
It is also easy to see that D/S can be realized by a series of arc contractions, and hence every minimal UT-instance is 2-irreducible. Thus, the following theorem is a generalization of Theorem 9.7.11.
Theorem 9.7.16 [440] Let [D, X] be a UT-instance which is 2-irreducible and admits eulerian trail with unique order of terminals. Then the conditions (a) and (b) of Theorem 9.7.11 hold.
The polynomial time algorithm for the UT-problem is a consequence of Theorem 9.7.16. The algorithm proposed in [440] consists of the following steps:
1. Reduce an instance [D, X] to a 2-irreducible one. This can be done by applying network ﬂow techniques.
2. Check the degree conditions. 3. Using a planarity test, decide whether D has a planar drawing, and if
yes, then test the remaining conditions of Theorem 9.7.16.
The notion of 2-irreducibility formulated here is weaker than the notion of irreducibility used in [440] where it was required, in addition, that [D, X] does not contain any non-terminal vertex of in- and out-degree one. However, using the general deﬁnition of irreducibility given in [88, Section 3], it can be seen that this additional condition is automatically satisﬁed by any ATinfeasible and irreducible instance.
Let [D, X] be an instance of AT-problem. Let us say that [D, X] is ATminimal, if [D, X] does not admit an eulerian trail visiting the terminals for every given order, but [D/a, X] does whenever any arc a is contracted. The following result by Bang-Jensen and Poljak shows that there are also degree restrictions on AT -minimal instances.
Theorem 9.7.17 [88] Let [D, X] be k-AT-minimal. Then d+(u) ≤ k − 1 for every non-terminal u, and d+(x) ≤ k − 2 for every terminal x.
The edge-disjoint 2-path problem for undirected graphs is polynomially solvable and a complete characterization of undirected graphs having no edgedisjoint s1t1 and s2t2-paths is available (Dinic and Karzanov [196, 197], Seymour [662] and Thomassen [697]). Such a graph G can be reduced to a graph G that has a planar representation with the following properties (see Figure 9.14(a)):

516 9. Disjoint Paths and Trees

(a) Each of the four terminals has degree 2 and all other vertices have degree 3, and
(b) the terminals are located on the outer face in the order s1, s2, t1, t2.

x us

p

st

pq

v yq (a)

t (b)

(c)

Figure 9.14 Part (a) shows an infeasible instance for the edge-disjoint 2-path problem for undirected graphs. The graph shown has no edge-disjoint xy-path and uv-path; Parts (b) and (c) show infeasible instances of the arc-disjoint [s, t]-, [p, q]paths problem for eulerian directed multigraphs.

↔
The complete biorientation G of an undirected graph G is eulerian and it contains arc-disjoint (s1, t1)-, (s2, t2)-paths if and only if G contains edgedisjoint s1t1, s2t2-paths. Hence, the arc-disjoint 2-path problem for eulerian digraphs generalizes the edge-disjoint 2-paths problem. So far the arc-disjoint 2-path problem for eulerian digraphs remains unsolved. However, even the simpler version in which we just require arc-disjoint [s1, t1], [s2, t2]-paths (that is, the order of si, ti is not ﬁxed in the ith path, i = 1, 2) still generalizes the edge-disjoint 2-path problem. This problem was recently solved by Frank, Ibaraki and Nagamochi in [270]. They proved that the problem is solvable in polynomial time. Furthermore they showed the following result. By a reduction below we mean a series of transformations such that the desired paths exist in the new digraph if and only if they exist in the previous digraph (for details see [270]).
Theorem 9.7.18 [270] Let D be an eulerian directed multigraph and let s1, s2, t1, t2 be not necessarily distinct vertices of D. Then D contains arcdisjoint [s1, t1], [s2, t2]-paths, unless it can be reduced to an eulerian directed multigraph D such that either D has 6 vertices and is isomorphic to the digraph in Figure 9.14(c), or each of (a),(b) and (c) below hold.
(a) Each of s1, s2, t1, t2 have in- and out-degree one and all other vertices have in- and out-degree two in D .
(b) There is at most one cut vertex7 in U G(D ). (c) D has a planar embedding such that every face is a directed cycle and
all terminals are located on the outer face in the order s, p, t, q where {s, t} = {s1, t1} and {p, q} = {s2, t2}.
7 Recall that a vertex x in a connected undirected graph G is a cut vertex if G − x is not connected.

9.7 Arc-Disjoint Path Problems 517

We ﬁnish this section with a remark on very recent work by Seymour and Johnson (Seymour and Johnson, personal communication on work in progress, February 2000) which may have far reaching consequences. There seems to be a theory for eulerian directed multigraphs which is similar to the graph minors theory for undirected graphs by Seymour and Robertson (see e.g. [642]). Instead of ‘minor’ the natural containment relation when studying eulerian directed multigraphs is immersion which we deﬁne below for 2-regular directed multigraphs.
A 2-regular directed multigraph H is immersed in another 2-regular directed multigraph D if we can obtain H from D by repeatedly choosing a vertex v with in-neighbours u1, u2 and out-neighbours w1, w2, deleting v and adding two new arcs u1w1, u2w2. See Figure 9.15.

2 13

2 1

2
1 3

12

74

4

4

65 D

65

65

65 H

Figure 9.15 Immersing the directed multigraph H in the directed multigraph D by suppressing the vertices 7, 3 and 4 in that order.

It appears that an analogue of the structure theorem of graph minors8 holds for 2-regular directed multigraphs. The potential applications of such a theorem include the well-quasi ordering of 2-regular directed multigraphs under immersion and a polynomial time algorithm for the arc-disjoint k-path problem. The polynomial solvability of the arc-disjoint k-path problem even appears to hold for general eulerian directed multigraphs (Seymour, private communication, February 2000).

9.7.3 Arc-Disjoint Paths in Tournaments and Generalizations of Tournaments
We now consider the arc-disjoint 2-path problem for some generalizations of tournaments. We prove that this problem and a related special case (the arc version of problem (P5) from Proposition 9.2.1) are polynomially solvable for semicomplete digraphs. As we will see in Section 9.9, the corresponding algorithms are used as subroutines in a much more complicated algorithm for a problem concerning arc-disjoint in- and out-branchings in tournaments.
8 For a nice introduction to this deep result, see Diestel’s book [191].

518 9. Disjoint Paths and Trees

We prove the ﬁrst results for the class of extended locally in-semicomplete digraphs instead of just for semicomplete digraphs. We do this to show that not much extra eﬀort is needed to obtain the result (which also has the same statement as for semicomplete digraphs alone) for this much larger class of digraphs. The results in this subsection are due to Bang-Jensen [46, 51]
Recall that two vertices are similar if and only if they are non-adjacent and have the same in- and out-neighbours. Note that, if x, y are non-adjacent vertices with a common out-neighbour w in an extended locally in-semicomplete, digraph, then x and y are similar vertices, by the deﬁnition of an extension and the deﬁnition of a locally in-semicomplete digraph.
The following lemma can be proved along the same lines as Lemma 9.7.20. The proof is left to the reader as Exercise 9.39.

Lemma 9.7.19 Let D be a strong extended locally in-semicomplete digraph and let x, y be distinct vertices of D. Then D has arc-disjoint (x, y)-,(y, x)paths if and only if there is no arc a such that D − a contains no (x, y)-path and no (y, x)-path.

Lemma 9.7.20 [51] Let D be an extended locally in-semicomplete digraph and x, y, z vertices of D such that x = z and D contains a path from y to z. If D has arc-disjoint (x, y)-, (x, z)-paths, then D contains arc-disjoint (x, y)-, (y, z)-paths. Similarly, if an extended locally out-semicomplete digraph D has a path from x to y and arc-disjoint (x, z)-, (y, z)-paths, then D has arc-disjoint (x, y)-, and (y, z)-paths.

Proof: Let P1 and P2 be arc-disjoint paths such that P2 is an (x, z)-path and P1 is a minimal (x, y)-path. If y ∈ V (P2), or y→x then the claim is trivial so we assume that none of these hold. We can also assume that x and y are not

similar vertices, because if they are, then y dominates the successor of x on

P2 and again the claim is trivial.

If D has a (y, z)-path whose ﬁrst intersection with V (P1)∪V (P2) (starting

from y) is on P2, then the desired paths clearly exist. Hence we may assume

that D contains a path from y to V (P1) ∪ V (P2) − y whose only vertex w

from V (P1) ∪ V (P2) − y is in V (P1) − V (P2). Now choose P among all such

paths so that w is as close as possible to x on P1. By the assumption above

w = x. Let v = wP−.

u

(v)

denote

the

predecessor

of

w

on

P1

(P ),

i.e

u

=

wP−1

and

Suppose ﬁrst that u and v are not adjacent. Then, by the remark just

before Lemma 9.7.19, u and v are similar. Now the choice of P implies that

v = y (otherwise the predecessor of v on P dominates u, contradicting the

choice of P ). By the assumption that x and y are not similar we conclude

that u = Thus

x, we

bmuatythaesnsuum−Pe1

→y, that

contradicting the minimality u and v are adjacent. By the

of P1. choice

of

P,

this

implies that u→v. Choose r as the ﬁrst vertex on P which is dominated by

u. By the minimality of P1, r = y. Let s be the predecessor of r on P . The

9.7 Arc-Disjoint Path Problems 519
choice of r and P implies that u and s are similar. Thus as above, we must have s = y and, since u = x we reach a contradiction as before.
The second half of the lemma follows from the ﬁrst by considering the converse and interchanging the names of x and z.
Using Lemma 9.7.20 we can now characterize those extended locally insemicomplete digraphs which do not have arc-disjoint (x, y)-,(y, z)-paths.
Theorem 9.7.21 [51] An extended locally in-semicomplete digraph D has arc-disjoint (x, y)-, (y, z)-paths if and only if it has an (x, y)-path and a (y, z)path and D has no arc e such that D −e has no (x, y)-path and no (y, z)-path.
Proof: Clearly if D has such an arc e, then the paths cannot exist. Now assume that D has no such arc and that D has an (x, y)-path and a (y, z)path. We prove that D has the desired paths. By Lemma 9.7.19 we may assume x = z.
By Lemma 9.7.20, we may assume that D contains no pair of arc-disjoint (x, y)-,(x, z)-paths. Thus, by Menger’s theorem, there exists an arc e = uv such that D − e has no path from x to {y, z}. Let A = {w : ∃(x, w) − path in D − e} and B = V (D) − A. Then x ∈ A, y, z ∈ B and the only arc from A to B is e.
Since D contains an (x, y)-path, D A has an (x, u)-path and D B has a (v, y)-path. D B also has a (y, z)-path, since e does not destroy all paths from y to z.
If v = y the desired paths clearly exist (and can in fact be chosen vertex disjoint). If v = z, then it follows from our assumption that there is no arc a in D B which separates y from z and also z from y. Now it follows from Lemma 9.7.19 that D B contains arc-disjoint (z, y)-, (y, z)-paths and hence D contains the desired paths. Thus we may assume v = y, z.
Now it is clear that the desired paths exist if and only if D B has arcdisjoint (v, y)-, (y, z)-paths. By induction this is the case unless there exists an arc e = ab in D B such that D B − e has no path from v to y and no path from y to z, but then e separates x from y and y from z in D, contradicting the assumption that D has no such arc.
Our proof above is constructive and hence we have the following (see also Exercise 9.40):
Corollary 9.7.22 [46] There exists a polynomial algorithm which given an extended in-semicomplete digraph D and distinct vertices x, y, z decides whether D has arc-disjoint (x, y)-, (y, z)-paths (or equivalently, an (x, z)-trail through y).
We can now prove the main result of this subsection.
Theorem 9.7.23 [46] The arc-disjoint 2-path problem is polynomially solvable for semicomplete digraphs.

520 9. Disjoint Paths and Trees

Proof: (Sketch) Let [D, x1, x2, y1, y2] be an instance of the arc-disjoint 2path problem for semicomplete digraphs. By relabelling if necessary, we can
assume that x1→x2. Below it is understood that we stop as soon as the existence of the desired paths have been decided.
It is easy to check whether D has (xi, yi)-paths for i = 1, 2. If not, then D does not have the desired paths and we stop. Next check whether there is any
arc e such that D − e has no (xi, yi)-path for i = 1, 2. If such an arc exists, then D does not have the desired paths and we stop. Now check whether
D contains arc-disjoint (x2, y1)-, (x2, y2)-paths P, P . If this is the case then either x1P or P [x1, y1] (if x1 ∈ V (P )) and P are the desired paths and we stop.
Hence, by Menger’s theorem, there is an arc e such that D − e has no
path from x2 to {y1, y2}. Let

Y := {v : v has a path to {y1, y2} in D − e};

X := V (D) − Y.

Then x2 ∈ X and x1 ∈ Y , because the arc e does not separate x1 from {y1, y2}. Furthermore, e is the only arc from X to Y . Let z be the head of e and let w be its tail. Note that D X contains an (x2, w)-path Q since D contains an (x2, y2)-path.
If z = x1, then the desired paths exist: We cannot have another arc e which separates x1 from {y1, y2} in D = D Y because then e separates {x1, x2} from {y1, y2} and we would have stopped earlier. Thus by Menger’s theorem D contains arc-disjoint (x1, y1)-, (x1, y2)-paths P1, P2. Now P1 and QP2 are the desired paths.
If z = y2, then the desired paths exist since any (x1, y1)-path in D and Qy2 will work.
If z = y1, then the desired paths exist if and only if D contains arcdisjoint (x1, y1)-, (y1, y2)-paths. This can be decided in polynomial time by the algorithm whose existence follows from Corollary 9.7.22.
Finally, if z ∈ {x1, y1, y2}, then the desired paths exist if and only if D contains arc-disjoint (x1, y1),- (z, y2)-paths. Hence we have reduced the problem to a smaller one of the same kind.
We leave it to the reader to verify that our steps above can be performed
in polynomial time and to estimate the time complexity of the algorithm
(Exercise 9.41).

9.8 Integer Multicommodity Flows
Recall the deﬁnition of a network and a ﬂow from Chapter 3. In this section we consider brieﬂy the following common generalization of ﬂows and arcdisjoint paths called the integer multicommodity ﬂow problem (if k is ﬁxed in advance we call it the integer k-commodity ﬂow problem):

9.8 Integer Multicommodity Flows 521

Given a natural number k ≥ 1, a network N = (V, A, ≡ 0, u), 2k not nec-
essarily distinct vertices s1, s2, . . . , sk, t1, t2, . . . , tk and integers r1, r2, . . . , rk, decide whether there exist integer valued ﬂows f 1, f 2, . . . , f k such that each of the following holds (recall that |f i| is the value of the ﬂow f i):

(i) f i is an (si, ti)-ﬂow in N ,

(ii) |f i| ≥ ri, i = 1, 2, . . . , k,

(iii) fipj ≥ 0 for every ij ∈ A, p = 1, 2, . . . , k,

(iv) For every ij ∈ A:

k p=1

fipj

≤

uij .

A collection of ﬂows f 1, f 2, . . . , f k which satisﬁes (i)-(iv) is called a feasible k-commodity ﬂow with respect to (si, ti), i = 1, 2, . . . , k. We can also consider the maximization version where no demands r1, r2, . . . , rk are speciﬁed (or they are to be considered as lower bounds) and the goal is to maximize the sum of the values of the ﬂows.
If we take k = 1 we have the standard (maximum) (s, t)-ﬂow problem which was studied in Chapter 3, where several polynomial algorithms were described for the problem. However, Even showed that already when k = 2 the problem becomes very hard.

Theorem 9.8.1 [230] The integer 2-commodity problem is N P-complete.

Proof: The problem clearly belongs to N P since given a feasible instance
we can take speciﬁcations of 2 feasible ﬂows, one from s1 to t1 and the other from s2 to t2, as a valid certiﬁcate.
Now let [D = (V, A), x1, x2, y1, y2] be an instance of the arc-disjoint 2path problem. Let N = (V, A, ≡ 0, u ≡ 1), take si = xi, ti = yi, i = 1, 2 and let r1 = r2 = 1. Then it is easy to see that D has arc-disjoint (x1, y1)-, (x2, y2)-paths if and only if N has a feasible integer 2-commodity ﬂow with respect to the pairs (si, ti), i = 1, 2. Now the claim follows from Theorem 9.7.1.

What we really observed above was simply that the arc-disjoint 2-path problem is nothing but a very special case of the 2-commodity ﬂow problem. This is not surprising since if we concentrate on one of the two ﬂows f i in a feasible integer 2-commodity ﬂow (with respect to the values r1, r2 and the capacities of the given network), then f i is just a normal (si, ti)-ﬂow and hence can be decomposed into ri (si, ti)-paths and some cycle ﬂows by Theorem 3.3.1. Hence the integer multicommodity ﬂow problem is nothing but a generalization of arc-disjoint path problems.
The name multicommodity ﬂow comes from the interpretation of each ﬂow as representing a diﬀerent commodity that has to be shipped from the source of that commodity to its sink while respecting the total capacity of the network. Problems of this type are of importance in practical applications such as telecommunications and routing problems. For a number of results on how to solve multicommodity ﬂow problems in practice see the book by Gondran and Minoux [332]. See also the survey [31] by Assad.

522 9. Disjoint Paths and Trees
9.9 Arc-Disjoint In- and Out-Branchings
We saw in Section 9.5 that the problem of deciding the existence of k arcdisjoint out-branchings all with the same root could be solved eﬃciently and in Subsection 9.5.1 we saw that many problems can be reformulated and solved using an algorithm for the k arc-disjoint out-branchings problem. In this section we consider the following much harder problem concerning arcdisjoint in- and out-branchings.
Problem 9.9.1 Given a digraph D and vertices u, v (not necessarily distinct). Decide whether D has a pair of arc-disjoint branchings Fu+, Fv− such that Fu+ is an out-branching rooted at u and Fv− is an in-branching rooted at v.
Theorem 9.9.2 [46] Problem 9.9.1 is N P-complete for arbitrary digraphs.
Proof: We give a proof due to Thomassen (see [46]). The problem belongs to N P, since if the desired branchings exist, then such a pair forms a certiﬁcate that the given instance is a ’yes’ instance. We show how to reduce the arcdisjoint 2-path problem to Problem 9.9.1 in polynomial time.
Let (D = (V, A), x1, x2, y1, y2) be an instance of the arc-disjoint 2-path problem. Construct a new digraph D by adding 4 new vertices x1, x2, y1, y2 and the following arcs (see Figure 9.16): {x1x1, x2x2, y1y1, y2y2, x2x1, y1x1, y2y1, y2x2, y2x1} ∪ {vx1 : v ∈ V (D) − x1}∪ {y2v : v ∈ V (D) − y2}.
x1 x2

x1 D
y1

x2 y2

y1 y2
Figure 9.16 The construction of D in the proof of Theorem 9.9.2. The fat arcs indicate that all the arcs have that direction, except the arcs x1x1, y2y2.
The reader can easily verify (Exercise 9.48) that there exists arc-disjoint branchings Fx+2 , Fy−1 in D if and only if D contains a pair of arc-disjoint (x1, y1)-, (x2, y2)-paths. Since we can construct D in polynomial time from D, it follows that Problem 9.9.1 is N P-complete.

9.9 Arc-Disjoint In- and Out-Branchings 523

It is easy to reduce (in polynomial time) Problem 9.9.1 for the case when u = v to the case when u = v for arbitrary digraphs (Exercise 9.49). Hence the problem remains N P-complete when we ask for an out-branching and an in-branching that are arc-disjoint and have the same root. However, BangJensen and Huang showed that, if the vertex that is to be the root is adjacent to all other vertices in the digraph and is not in any 2-cycle, then the problem becomes polynomially solvable.

Theorem 9.9.3 [79] Let D = (V, A) be a strongly connected digraph and v a vertex of D such that v is not on any 2-cycle and V (D) = {v} ∪ N −(v) ∪ N +(v). Let A = {A1, A2, . . . Ak} (B = {B1, B2, . . . , Br}) denote the set of terminal (initial) components in D N +(v) (D N −(v) ). Then D contains a pair of arc-disjoint branchings Fv+, Fv− such that Fv+ is an out-branching rooted at v and Fv− is an in-branching rooted at v if and only if there exist two disjoint arc sets EA, EB ⊂ A such that all arcs in EA ∪ EB go from N +(v) to N −(v) and every Ai ∈ A (Bj ∈ B) is incident with an arc from
EA (EB). Furthermore, there exists a polynomial algorithm to ﬁnd the desired
branchings, or demonstrate the non-existence of such branchings.

Proof: We prove the characterization and refer the reader to [79] and Exer-

cise 9.51 for the algorithmic part.

First we note that, if the branchings exist, then the arc sets EA and EB exist. Indeed, if Fv+, Fv− are such branchings, then there must be an arc from Fv− (Fv+) leaving (entering) every terminal (initial) component of D N +(v) (D N −(v) ) and since v is not on any 2-cycle, all these arcs go from N +(v)

to N −(v).

Suppose that there exist sets EA and EB as above. Every vertex x ∈ N +(v) has a path to one of the terminal components in A and every ver-

tex in N −(v) can be reached by a path from one of the initial compo-

nents in B. Hence, we can choose a family of vertex disjoint arborescences

F1−, F2−, . . . , Fk−, F1+, F2+, . . . , Fr+ such that Fi− (Fj+) is an in-arborescence

(out-arborescence ) rooted at a vertex in

r j=1

V

(Fj+)

=

N −(v).

Let

Fv+

be

the

Ai (Bj) and out-branching

k i=1

V

(Fi−)

=

N

+(v),

induced by the arcs

{vw : w ∈ N +(v)} ∪ EB ∪

r j=1

E(Fj+)

and

Fv−

be

the

in-branching

induced

by the arcs {uv : u ∈ N −(v)} ∪ EA ∪

k i=1

E(Fi−).

Then

Fv+

and

Fv−

are

the

desired branchings.

The following is an easy corollary of Theorem 9.9.3.

Corollary 9.9.4 [46] A tournament D = (V, A) has arc-disjoint branchings Fv+, Fv− rooted at a speciﬁed vertex v ∈ V if and only if D is strong and for every arc a ∈ A the digraph D − a contains either an out-branching or an
in-branching with root v.

There is a small inconsistency in the statement (and the proof) of Theorem 9.9.3 in [79] as it was not mentioned that v is not on a 2-cycle and

524 9. Disjoint Paths and Trees

the statement (the part involving the ends to the arcs in EA, EB) becomes slightly diﬀerent when v is on 2-cycles. However, as the reader is asked to prove in Exercise 9.51, one can still describe a nice characterization and prove that it can be checked in polynomial time whether the desired branchings exist and to ﬁnd such branchings if they exist. Since the discussion above takes care of the semicomplete case, a possible next step is to consider the following problem posed by Bang-Jensen.
Problem 9.9.5 [65] Characterize those locally semicomplete digraphs D that have arc-disjoint branchings Fv+, Fv− for a given vertex v ∈ V (D).
When u = v, Problem 9.9.1 becomes much harder even for tournaments. The following complete characterization for the case of tournaments was found by Bang-Jensen. Note that the characterization is only valid for tournaments and not general semicomplete digraphs (in which case X, Y, Z, W is not a partition of V − {u, v}).
Theorem 9.9.6 [46] Let T = (V, A) be a tournament and let u, v be distinct vertices of T . Deﬁne the sets X, Y, Z, W as follows:

X = {x ∈ V : ux, vx ∈ A},

Y = {x ∈ V : ux, xv ∈ A},

Z = {x ∈ V : xu, vx ∈ A},

W = {x ∈ V : xu, xv ∈ A}.

Then T has an out-branching Fu+ and an in-branching Fv− such that A(Fu+) ∩ A(Fv−) = ∅ if and only if none of the following holds.
(1) |V | ≤ 3 or |V | = 4 and vu ∈ A. (2) T is not strong and either u is not in the initial strong component of T ,
or v is not in the terminal strong component of T . (3) T is strong and there exists an arc e such that u is not in the initial
strong component of T − e and v is not in the terminal strong component of T − e. (4) T is strong, uv ∈ A, Y = ∅, X, W = ∅ and (I) below holds



 There is exactly one arc e1 leaving the terminal strong component

(I

)



of T X and there is component of T W

exactly one arc and e1 = e2

e2

entering

the

initial

strong

and ﬁnally every (X, W )-path in T − {u, v} contains both e1 and e2. (5) T is strong, vu ∈ A, Y = {y}, X, W = ∅, [T, u, v] satisﬁes (I), there is
no (X, W )-trail in T − {u, v} which contains y and every (X, W )-path in
T − {u, v} contains both e1 and e2. (6) T is strong, vu ∈ A, Y = ∅, X, W = ∅, [T, u, v] satisﬁes (I), there exist a
pair of arc-disjoint (u, v)-paths and for every choice of arc-disjoint (u, v)-
paths P1, P2 either e1, e2 ∈ A(P1), or e1, e2 ∈ A(P2).

9.9 Arc-Disjoint In- and Out-Branchings 525
By inspecting each of the exceptions above one easily derives the following suﬃcient condition for the existence of arc-disjoint in- and out-branchings in a tournament.
Corollary 9.9.7 [46] Every 2-arc-strong tournament T = (V, A) contains arc-disjoint in- and out-branchings Fr−, Fs+ for every choice of vertices r, s ∈ V.
Some of the conditions in Theorem 9.9.6 are quite complicated and even to prove the necessity requires some work (Exercise 9.50). We now show how to check the conditions in Theorem 9.9.6 eﬃciently. This together with the fact that the proof in [46] is constructive implies a polynomial algorithm for the arc-disjoint in and out-branching problem in tournaments.
Theorem 9.9.8 [46] There is a polynomial algorithm for checking whether a given tournament with speciﬁed distinct vertices u, v has arc-disjoint branchings Fu+, Fv− and ﬁnding such branchings if they exist.
Proof: The construction part of this proof relies on the fact that the proof of Theorem 9.9.6 in [46] is constructive and that proof is very long and technical. Hence we will only show how to check each of the conditions (1)-(6) in polynomial time (and hence checking whether or not the desired branchings exist). Conditions (1)-(4) are easy to check in polynomial time, so we concentrate on checking conditions (5) and (6). Let [T, u, v] be an instance of the problem for which we wish to check conditions (5) and (6).
First we show how to check condition (5) using the polynomial algorithm from Corollary 9.7.22. Since every (X, W )-trail contains an (X, W )-path and every (X, W )-path contains e1 and e2 we conclude that every (X, W )-trail contains e1 and e2. That is, every (X, W )-trail must start at the tail x of e1 and terminate at the head w of e2. It is easy to show that there exists an (x, w)-trail that contains y if and only if there exist arc-disjoint (x, y)-, (y, w)paths. Now we use the algorithm from Corollary 9.7.22 to check whether or not there exist arc-disjoint (x, y)-, (y, w)-paths. Condition (5) is satisﬁed if and only if there do not exist such paths.
Here is how to check condition (6) using the polynomial algorithm A from Theorem 9.7.23. It is easy to verify the existence of two arc-disjoint (u, v)paths (use Lemma 7.1.5). In fact, if such paths do not exist then [T, u, v] satisﬁes (3). Let Xl denote the terminal strong component of T X and W1 the initial strong component of T W and let s be the number of strong components of T W . Since Y = ∅ and there is only one arc leaving Xl and only one arc entering W1, the existence of two arc-disjoint (u, v)-paths implies that l, s ≥ 2, i.e., X − Xl = ∅ and W − W1 = ∅. Let T = T − Xl and check whether there exist two arc-disjoint (u, v)-paths in T . If such paths exist then [T, u, v] does not satisfy (6) and we stop. Let T = T − W1 and check whether there exist two arc-disjoint (u, v)-paths in T . If such paths exist we stop because then [T, u, v] does not satisfy (6).

526 9. Disjoint Paths and Trees
By now we know (since we have not stopped yet) that for every pair P1, P2 of arc-disjoint (u, v)-paths e1 and e2 belong to A(P1)∩A(P2). That is [T, u, v] satisﬁes (6) if and only if there do not exist arc-disjoint (u, v)-paths P1, P2 with ei ∈ Pi, i = 1, 2. We use A to check that possibility in the following way.
Since [T, u, v] satisﬁes (I) we know that for every pair of arc-disjoint (u, v)paths exactly one of these paths contains a vertex from Xl and exactly one contains a vertex from W1. Moreover, if there exist arc-disjoint (u, v)-paths P1, P2 with ei ∈ A(Pi), i = 1, 2 then we may assume that P1[u, Xl] = ux and P2[W1, v] = wv, where x is the tail of e1 and w is the head of e2.
Let T be the tournament obtained from T as follows. Contract Xl into one vertex x2 and W1 into one vertex y1. Furthermore, if there are arcs in both directions between x2 and some z ∈ T − x2 we remove the arc zx2. The arcs incident with y1 are similarly modiﬁed. Let x1 = u and y2 = v.
Now it is easy to see that there exist arc-disjoint (u, v)-paths P1, P2 in T satisfying ei ∈ A(Pi), i = 1, 2, if and only if there exist arc-disjoint (x1, y1)(x2, y2)-paths P(x1,y1), P(x2,y2) in T . Now we use A to check whether or not such paths exist in T .
It is easy to see that the above methods provide polynomial algorithms to verify conditions (5) and (6).
Bang-Jensen posed the following conjecture. This conjecture was veriﬁed by Bang-Jensen and Huang [79] for the special case when D is quasi-transitive and u = v.
Conjecture 9.9.9 [65] Problem 9.9.1 is polynomially solvable for locally semicomplete digraphs and quasi-transitive digraphs.
For the case when v is adjacent to all other vertices one can prove the following using Theorem 9.9.3 and the extension in Exercise 9.51 (see Exercise 9.52).
Theorem 9.9.10 Let D be a 2-arc-strong digraph with a vertex v that is adjacent to all other vertices of D. Then D has arc-disjoint in- and outbranchings rooted at v.
Thomassen conjectured that there is some suﬃcient condition, in terms of arc-strong connectivity, for the existence of arc-disjoint in- and outbranchings rooted at the same vertex in a digraph.
Conjecture 9.9.11 [708] There exists a natural number N such that every digraph D which is N -arc-strong has arc-disjoint branchings Fv+, Fv− for every choice of v ∈ V (D).
For tournaments the following much stronger property has been conjectured by Bang-Jensen and Gutin:

9.10 Minimum Cost Branchings 527
Conjecture 9.9.12 [65] There exists a function f : Z+→Z+ such that for every natural number k every f (k)-strongly arc-connected tournament T has 2k arc-disjoint branchings Fv+,1, . . . , Fv+,k, Fv−,1, . . . , Fv−,k such that Fv+,1, . . . , Fv+,k are out-branchings rooted at v and Fv−,1, . . . , Fv−,k are in-branchings rooted at v, for every vertex v ∈ V (T ).
It follows from Corollary 9.9.7 that f (1) = 2.
9.10 Minimum Cost Branchings
Given a directed multigraph D = (V, A) a special vertex s and a non-negative cost function w on the arcs. What is the minimum cost of an out-branching Fv+ rooted at s in D? This problem, which is a natural generalization of the minimum spanning tree problem for undirected graphs (Exercise 9.58), is called the minimum cost branching problem. The problem arises naturally in applications where one is seeking a minimum cost subnetwork which allows communication from a given source to all other vertices in the network (see the discussion at the end of the section).
The minimum cost branching problem was ﬁrst shown to be polynomially solvable by Edmonds [211]. Later Fulkerson [283] gave a two phase greedy algorithm which solves the problem very elegantly. The fastest algorithm for the problem is due to Tarjan [689]. Tarjan’s algorithm solves the problem in time O(m log n), that is, with the same time complexity as Kruskal’s algorithm for undirected graphs [169]. The purpose of this section is to describe a generalization of Fulkerson’s algorithm (due to Frank [250]) which can be used to solve a more general problem.
9.10.1 Matroid Intersection Formulation
To illustrate the generality of matroids, let us show how to formulate the minimum cost branching problem as a weighted matroid intersection problem. We refer to Section 12.7 for relevant deﬁnitions on matroids.
Let D = (V, A) be a directed multigraph and let r ∈ V be a vertex which can reach all other vertices by directed paths. We deﬁne M1 = (A, I1) and M2 = (A, I2) as follows (here I1, I2 ⊆ 2A):
• A ∈ I1 if and only if no two arcs in A have a common head and no arc has head r,
• A ∈ I2 if and only if U G(D A ) has no cycle.
It follows from the deﬁnition of M2 that M2 is the circuit matroid of U G(D) (see Section 12.7). It is easy to show that M1 satisﬁes the axioms (I1)-(I3) and hence is a matroid. In particular, all maximal members of I1 have the same size n − 1 (by our assumption, every vertex in V − r has at least one in-neighbour) and thus the rank of M1 is n − 1.

528 9. Disjoint Paths and Trees
Since r can reach all other vertices, U G(D) is connected and hence the rank of M2 is also n − 1. We claim that every common base of M1 and M2 is an out-branching with root r. This follows easily from the deﬁnition of an out-branching and the fact that any common base corresponds to a spanning tree in U G(D), since M2 has rank n − 1.
Thus we can ﬁnd an out-branching with root r by applying the algorithm for matroid intersection of Theorem 12.7.11 to M1, M2. Of course such an out-branching can be found much easier by using e.g. DFS starting from r. However the point is that using the weighted matroid intersection algorithm, we can ﬁnd a minimum cost out-branching Fr+ in D. It is easy to see that the required oracles for testing independence in M1 and M2 can be implemented very eﬃciently (Exercise 9.55). In fact, and much more importantly (in the light of the existence of other and more eﬃcient algorithms for minimum cost branchings), using matroid intersection algorithms we can even ﬁnd a minimum cost subdigraph which has k-out branchings with a speciﬁed root s in a directed multigraph with non-negative weights on the arcs (Exercise 9.56). Furthermore, it is shown in Exercise 9.57 that using matroid intersection we can also solve the augmentation problem where one is given a directed multigraph D = (V, A), a root s ∈ V and a natural number k and the goal is to ﬁnd a cheapest set of new arcs to add to D from an arc-weighted directed multigraph D = (V, A ) on the same vertex set in order to ensure the existence of k-arc-disjoint out-branchings from s in the resulting directed multigraph. Hence using matroid intersection formulations one can in fact solve problems which are much more general than the minimum cost branching problem.
9.10.2 An Algorithm for a Generalization of the Min Cost Branching Problem
In this subsection we will give a generalization due to Frank [250] of Fulkerson’s algorithm [283] for ﬁnding a minimum cost out-branching with a given root. This generalization, also allows one to determine the minimum cost of new arcs to add to a directed multigraph which has k-arc-disjoint outbranchings rooted at a vertex s, so as to have k+1 arc-disjoint out-branchings rooted at s.
To motivate the generalization below, we start with the augmentation problem above. We are given a directed multigraph D = (V, A) a vertex s ∈ V and a natural number k such that D has k, but not (k + 1) arc-disjoint out-branchings rooted at s (by Edmonds’ branching theorem and Lemma 7.1.5, this condition can be checked eﬃciently using ﬂows). Furthermore, we are given another directed multigraph H = (V, A ) on the same vertex set and a non-negative weight function w : A →R0 on A . The goal is to ﬁnd a minimum cost set of arcs F from A so that the directed multigraph D∗ = (V, A∪F ) has (k+1) arc-disjoint out-branchings rooted at s. In order to make sure that the problem has a solution we assume that D = (V, A ∪ A ) does have (k + 1) arc-disjoint out-branchings rooted at s. Note that if we

9.10 Minimum Cost Branchings 529

take H := D and then let D := (V, ∅) and k := 0, we obtain the minimum

cost branching problem. Hence the augmentation problem generalizes the

minimum cost branching problem.

By (9.2) we have d−D(X) ≥ k for all X ⊆ V − s and since D does not have k + 1 arc-disjoint out-branchings from s, there must be some sets for which

equality ity of d−D

holds. Call such it is easy to see

sets that

X (with d−D(X) the family Fk =

= k) tight. {X ⊂ V −s

Using submodular: d−D(X) = k} is an

intersecting family (recall that this means that if X, Y ∈ Fk and X ∩ Y = ∅,

then X ∩ Y, X ∪ Y ∈ Fk). In view of Edmonds’ branching theorem our goal is

to ﬁnd a minimum cost subset F of A such that d−F (X) ≥ 1 for each X ∈ Fk (after doing this we will have d−(X) ≥ k + 1 for every X ⊆ V − s in the

resulting directed multigraph).

We now see that our problem is a special case of the following more general

problem (we obtain the problem above if we take F = Fk):

Problem 9.10.1 Given a set V , an intersecting family F ⊆ 2V and a directed multigraph H = (V, A ) together with a weight function w : A →R0. Find a minimum cost subset F ⊆ A such that d−F (X) ≥ 1 for each9 X ∈ F .
To ensure the existence of a solution, we must assume that d−A (X) ≥ 1 for each X ∈ F.
We solve this generalization instead of just the minimum cost branching problem. The motivation for this is to show the reader that often considering an abstraction of a problem will allow one to solve a more general problem (see the next subsection). Furthermore the solution for the abstraction can often be simpler (or at least not more diﬃcult), since we have gotten rid of the special requirements of the original problems (of course these are still inherent in the abstraction, but we have more freedom here).
In order to describe the two phase greedy algorithm below for solving Problem 9.10.1 we let M be a matrix whose rows are indexed by the members of F = {X1, X2, . . . , Xq} and whose columns are indexed by the arcs e1, e2, . . . , em in H. We let MXi,ej = 1 precisely if the arc ej enters the set Xi.
Now we can formulate Problem 9.10.1 as the following linear programming problem:

minimize

w(e)x(e)

e∈A
subject to M x ≥ 1

x ≥ 0.

for all X ∈ F

(9.12)

We are only interested in integer solutions, but as we are going to see, provided all weights are integers, there are integer valued optimum solutions
9 That is, we want to cover every member of F by an arc of H.

530 9. Disjoint Paths and Trees

to the system below (this also follows from the fact that the system is a
TDI system (see Schrijver’s book [659]), but we prove the integrality of the
solution directly). Note that, if x is an optimal solution to (9.12), then x ≤ 1.
This follows from the fact that the costs are non-negative. Hence if x is a
function on the arcs of A we can say that x(ei) = 1 (x(ei) = 0) corresponds to including (excluding) ei in the solution.
The dual of (9.12) is

q
maximize y(Xi)
i=1
such that yT M ≤ w(e)
y ≥ 0.

for all e ∈ A

(9.13)

Here y(Xi) denotes the dual variable associated with the set Xi of F = {X1, X2, . . . , Xq}. Note that, if we let

m(y, e) =

y(X ),

{X∈F:e enters X}

(9.14)

then the ﬁrst constraint in the dual problem says that we must have m(y, e) ≤ w(e) for every arc e.
The two phase greedy algorithm below works by ﬁrst ﬁnding a feasible solution to the dual in a greedy way and then solving (greedily) the primal problem using the dual solution that we obtained in the ﬁrst phase.
A pair (x, y) of solutions to (9.12) and (9.13), respectively, are optimal (for the primal, respectively, the dual) if and only if it satisﬁes the complementary slackness conditions, see e.g. [160]:

(I) For every arc e ∈ A : x(e) > 0 implies m(y, e) = w(e) and (II) For every X ∈ F : y(X) > 0 implies10x−(X) = 1.
We now describe the algorithm and show that at termination, the ﬁnal vectors x, y are integral and satisfy (1), respectively (2), and hence they are optimal solutions to the primal, respectively the dual, problems. The description given here is based on notes by the ﬁrst author from a lecture given by Frank in Grenoble, June 1996. See also Frank’s paper [250].
The Frank-Fulkerson algorithm

Phase 1: Start with y ≡ 0. In the initial step we choose A1 ∈ F to be a minimal member of F , that is, no proper subset of A1 belongs to F (see
10 Here x−(U ) denotes the sum of the x values on all arcs entering the set U . See also Chapter 8.

9.10 Minimum Cost Branchings 531

Exercise 9.59 for an algorithm to ﬁnd such a minimal member when F is

the family of tight sets avoiding a ﬁxed vertex s in a directed multigraph).

Choose an arc e1 which enters A1 (i.e. d−e1 (A1) = 1) such that w(e1) is minimum among all arcs of A which enter A1. Set y(A1) := w(e1).

In the general step, we assume that (A1, e1, y(A1)), (A2, e2, y(A2)), . . . ,

(Ai−1, ei−1, y(Ai−1)) have been determined. Let A = {e1, e2, . . . , ei−1}. If

d−A (X) ≥ 1 for all X ∈ F , then Phase 1 has been completed and we go to

Phase 2. Assume this is not the case and choose Ai ∈ F as a minimal member

of

F− By

{A1, A2, . . . , Ai−1} which has the assumption that d−A (X)

d−A ≥1

(Ai) = 0. for every

X

∈

F,

there

is

at

least

one arc from A which enters Ai. Choose among all such arcs one, ei, which

minimizes w(ei) − m(y, ei). Let y(Ai) := w(ei) − m(y, ei) (possibly y(Ai) :=

0). Note that it is easy to ﬁnd ei since there are currently (at most) i − 1 sets

for which y is non-zero and hence m(y, e) can be calculated easily for every

arc e ∈ A which enters Ai. Let i := i + 1 and continue the general step. This completes the description of Phase 1. See Figure 9.17 for an example (for an

instance of the minimum cost branching problem) of an execution of Phase

1.

Before we go on to describe the second phase of the algorithm, we make some useful observations. Let L = {A1, A2, . . . , At} be the family of sets chosen when Phase 1 terminates (there are only ﬁnitely many sets in F, so termination follows from the assumption that A has at least one arc entering every member of F). Recall that a family H of sets is laminar if A, B ∈ H and A ∩ B = ∅ implies A ⊆ B or B ⊆ A.

Claim A: L is a laminar family.

Proof: Suppose Ai − Aj, Ai ∩ Aj, Aj − Ai are all non-empty for some 1 ≤ i < j ≤ t. Since F is intersecting we have Ai ∩ Aj ∈ F . Recall that Ai is minimal in F − {A1, A2, . . . , Ai−1} at the time it is chosen and none of the arcs e1, e2, . . . , ei−1 chosen so far enters Ai. Hence there must exist a p < i such that ep enters Ai ∩ Aj, but not Ai (which means that the tail of ep is in Ai − Aj). But now the arc ep enters Aj, contradicting the fact that at the (later) time when we consider Aj no previously chosen arc enters that set. This contradiction implies the claim.
Claim B: After Phase 1 the vector y is a feasible solution to (9.13).

Proof: It follows from the way we assign values to y that we will always have y(X) ≥ 0 for every X ∈ F. Hence it suﬃces to prove that m(y, e) ≤ w(e) for all arcs e ∈ A . Note that y is zero on F − L, so we only have to consider the contribution from y on the sets in L. Since L is laminar, those sets from L which are entered by a given arc e form a chain Ai1 ⊂ Ai2 ⊂ . . . ⊂ Air . Furthermore, it follows from the way we choose the Ai’s in Phase 1 that 1 ≤ i1 < i2 < . . . < ir ≤ t.

532 9. Disjoint Paths and Trees

e1

f

211

2 11

a

d 1

1

c

12

3b

1

13

2

r

e A1 e1
y(A1 ) := 1

e A2 dc e2
y(A2) := 1

e e3 A3 c
d
y(A3 ) := 1

e A4

e e5

f A5

d e4
b

c y(A4 ) := 0

d b

c y(A5 ) := 1

ef

d e6
A6 b

c y(A6 ) := 2

ef
dc
b e7
r

A8

e1 1

f 1

a

d 1c

A7 1 2

y(A7) := 0

1

b e8 2

r

y(A8) := 1

Figure 9.17 An execution of Phase 1 (for the minimum cost branching problem) on the digraph shown in the upper left corner with root r. Fat arcs show the arc chosen in that step. Normal arcs are arcs that have already been chosen at this point in time.

Consider now a ﬁxed arc e. We wish to show that m(y, e) ≤ w(e) remains true during all of Phase 1. Clearly the initial choice y ≡ 0 satisﬁes this. When we consider the ﬁrst set Ai1 from L which contributes to m(y, e), we choose y(Ai1 ) so as to maintain the inequality m(y, e) ≤ w(e) (because y(Ai1 ) is assigned the minimum of w(e ) − m(y, e ) over all e (including e) which enter Ai1 . Then when we choose y(Ai2 ), the value assigned to y(Ai1 ) now contributes to w(e) − m(y, e) and again we can argue that we will have m(y, e) ≤ w(e) after assigning the value to y(Ai2 ). Now it is easy to prove by induction on r (the number of sets in L which are entered by e) that m(y, e) ≤ w(e) remains true throughout Phase 1. Since e was an arbitrary arc, we have proved that y is feasible for the dual (9.13).
Let e1, e2, . . . , et be the arcs chosen in Phase 1. Call an arc e ∈ A tight if m(y, e) = w(e). Note that each of e1, e2, . . . , et are tight by the way we choose the dual variables (recall how we assign the value to y(Ai)).

9.10 Minimum Cost Branchings 533

Hence the complementary slackness condition (I) will be trivially satisﬁed if we can ﬁnd a subset F ⊆ {e1, e2, . . . , et} such that x is non-zero only on arcs in F and x is a feasible solution to the primal. In order to ensure optimality, we must choose x and F so that (II) also holds, that is, we must have that y(X) > 0 implies x−(X) = 1 for every X ∈ F . We are now ready to describe the second and last phase of the algorithm.
Phase 2: Let F := ∅. Consider the arcs et, et−1, . . . , e2, e1 in that order. After having considered et, et−1, . . . , ei+1 we add ei to F if and only if d−F (Ai) = 0 (that is, the arc ei is only added to F if no arc with a higher index enters Ai). See Figure 9.18 for an illustration of Phase 2 (corresponding to the same example as Figure 9.17).

A1 e5

A5

e1 A8

A2

e3 e2

A3

e4 e6 e8 A6

A4

e7

A7

e1
1 ad

f 1

1 1
b
2

r

c

(a) (b)
Figure 9.18 Phase 2 on the digraph from Figure 9.17. Part (a) shows the input to phase 2. Part (b) shows the output from Phase 2.

Now set x(e) := 1 if e ∈ F and x(e) := 0 otherwise. This concludes Phase 2.
It is easy to see that the choice for x and F made above satisﬁes (II) since y is non-zero only on set which belong to L.
Claim C: x is a feasible solution to (9.12).
By the deﬁnition of x our claim is equivalent to saying that d−F (Z) ≥ 1 for all Z ∈ F . If no arc ei was disposed of (i.e. not chosen) in Phase 2, then this follows from the fact that at the termination of Phase 1, every member of F is entered by at least one of the arcs e1, e2, . . . , et. Hence we may assume

534 9. Disjoint Paths and Trees

that at least one arc ej was disposed of in Phase 2 and that some member Z

of

F has d−F (Z) = 0. We show that Let Z be a maximal member of

this leads to F such that

a contradiction. d−F (Z) = 0 holds.

We ﬁrst prove that there exits an index i such that Ai ⊂ Z and ei enters

Z. Choose i as small as possible so that ei ∈ F and ei enters Z. Suppose that

Ai ⊂ Z. Then Ai − Z, Ai ∩ Z, Z − Ai are all non-empty (the last set is non-

empty by the minimality of i and the deﬁnition of Ai). Since F is intersecting,

the set Ai ∩ Z belongs to F . Now the minimality of Ai (at the time it was

chosen in Phase 1) implies that there is some j < i such that ej enters Ai ∩Z,

but not Ai. This means that the tail of ej belongs to Ai − Z (and hence ej

enters Z). However, since d−F (Z) = 0 we have ej ∈ F , contradicting the choice

of i. Thus we have shown that there exists an index i so that Ai ⊂ Z and ei

enters Z.

Now choose among all pairs (Ai, ei) such that Ai ⊂ Z and ei enters Z, the one which has the highest index p. Since ep was not added to F in Phase 2, there must exist an index j > p such that ej ∈ F and ej enters Ap. Using that L is laminar and j > p we get that Ap ⊂ Aj (we cannot have Aj ⊂ Ap, by the way we choose Ap in Phase 1).

Aj
Ap ep
ej

Z

Figure 9.19 The positions of the sets Aj, Ap and Z and the arcs ej, ep.
Note that Aj ⊂ Z since otherwise ep would enter Aj, contradicting the fact that j > p and Aj had in-degree zero when we choose it in Phase 1. Furthermore, ej does not enter Z since d−F (Z) = 0. Thus we must have the picture in Figure 9.19. Now it follows that the member Z ∪ Aj ∈ F is not entered by any arc from F (recall that ej is the unique arc from F which enters Aj). This contradicts the maximality of Z.
Hence we have shown that the set Z cannot exist and thus x is indeed a feasible solution to (9.12) and Claim C is proved.
It follows from Claims B and C that the pair (x, y) of primal, respectively dual, solutions satisﬁes the complementary slackness conditions (I) and (II) and hence are optimal solutions to the problems (9.12) and (9.13) respectively. This proves the correctness of the algorithm.
Let D be a directed multigraph with a special vertex s. By an s-cut we mean an arc set of the form (U , U ) where U ⊂ V − s (that is, an s-cut is

9.10 Minimum Cost Branchings 535
the set of all the arcs entering U for some U not containing s). The following min-max result due to Fulkerson [283] is a consequence of our arguments above where we proved the existence of optimal integer valued solutions for both the primal and the dual. It is instructive to check the statement of the theorem on the example in Figures 9.17 and 9.18.
Theorem 9.10.2 [283] Let D = (V, A) be a directed multigraph with a special vertex s ∈ V which can reach all other vertices of V and a non-negative integer weight function w : A→Z0 on the arcs. The minimum weight of an out-branching with root s is equal to the maximum number of s-cuts (with repetition allowed) so that no arc a is in more than w(a) of these cuts.
9.10.3 The Minimum Covering Arborescence Problem
As we can see from Exercise 9.60 (and Tarjan’s algorithm in [689]), we can ﬁnd an optimal branching quite eﬃciently. It is also easy to decide if a digraph has some arborescence rooted at a prescribed vertex s which covers (that is, contains the vertices of) a certain speciﬁed subset X of the vertex set (Exercise 9.54). This makes it natural to consider the following problem which we call the minimum covering arborescence problem. Given a digraph D = (V, A) with a non-negative integer valued weight function w on the arcs, some vertex s ∈ V and a subset X ⊆ V . What is the cost of a minimum out-arborescence Fs+ rooted in s such that X ⊆ V (Fs+)?
Theorem 9.10.3 The minimum covering arborescence problem is N P-hard even when w ≡ 1.
Proof: We show how to reduce the graph Steiner problem to the special case w ≡ 1 of the minimum covering arborescence problem in polynomial time. The graph Steiner problem is as follows (this is a special case, but already this is N P-complete). Given an undirected graph G = (V, E) and a subset X ⊂ V , ﬁnd a subtree of G which contains all vertices of X and as few other vertices as possible.
Let [G, X] be an instance of the graph Steiner problem and construct an instance [D, X, s] of the minimum covering arborescence problem by letting D be the complete biorientation of G, taking s as some vertex from X and using the same X. Every tree T which covers X in G corresponds in the obvious way to an out-arborescence Fs+ in D which covers X and vice versa. This completes the construction which can obviously be performed in polynomial time. Since the graph Steiner problem is N P-hard [474] we conclude that so is the minimum covering arborescence problem.
It follows from Frank’s results in [265] that, if the cost of all arcs whose head do not belong to X is zero, then the problem can be solved in polynomial time. In fact, the model in [265] shows that even the generalization where

536 9. Disjoint Paths and Trees
one is seeking k arc-disjoint arborescences with a common root all of which cover a prescribed subset X can be solved in polynomial time, provided the cost of all arcs whose head do not belong to X is zero.
In real-life applications such as telecommunications, one is often interested in serving only a subset of the customers from a given source and furthermore not all customers have the same demand. This gives rise to the following more general problem which is called the directed Steiner problem with connectivity constraints (DSCC) in [171]. Given a directed graph D = (V, A) with weights on the arcs, a special vertex s and a number kv associated with each vertex v ∈ V − s, ﬁnd a minimum cost subset A ⊆ A such that D A contains kv arc-disjoint (s, v)-paths for all v ∈ V − s. It follows from our remarks above that this problem is N P-complete even if we only allow kv ∈ {0, 1} for each v ∈ V −s. In [171] Dahl discusses a cutting plane approach to solving the DSCC problem. It is also shown in [171] how to formulate another classical problem from operations research, the uncapacitated facility location problem, as an instance of the DSCC problem (see Exercise 9.71).
Let us conclude this section with a few remarks on the directed Steiner problem. The directed Steiner problem is as follows. Given a directed multigraph D = (V, A) and a subset S of its vertices, ﬁnd a minimum subset A of A such that D = (V, A ) contains an (s, t)-path for every choice of s, t ∈ S. The vertices in S are called terminals. Clearly this problem is N Phard as it contains the graph Steiner problem as a special case. In Exercise 9.69 the reader is asked to describe a polynomial algorithm for the case when |S| = 2. Recently Feldman and Ruhl [233] proved that for every ﬁxed k the directed Steiner problem with k terminals is solvable in polynomial time. In fact they proved that the following more general problem is polynomially solvable for every ﬁxed p. Given a directed multigraph D = (V, A) and p pairs {(s1, t1), . . . , (sp, tp)} ﬁnd a smallest set of arcs A in A such that D = (V, A ) contains an (si, ti)-path for i = 1, 2, . . . , p. Feldman and Ruhl also showed that the weighted version is still polynomial (provided p is ﬁxed).
9.11 Increasing Rooted Arc-Strong Connectivity by Adding New Arcs
The approach in the last section does not allow us to solve the augmentation problem where one starts with an arbitrary digraph with a special vertex s and the goal is to add arcs so that the new digraph has k-arc-disjoint outbranchings rooted at s. Only the case when there are already k−1 arc-disjoint out-branchings from s in D is covered above.
The following theorem, answering the general case, can be derived from Theorem 7.6.3 (Exercise 9.73). We give a direct proof below since it is quite simple and illustrates once again the usefulness of submodularity in proofs.

9.11 Increasing Rooted Arc-Strong Connectivity by Adding New Arcs 537

Theorem 9.11.1 Let D = (V, A) be a digraph with a special vertex s. Let
k be a natural number. The minimum number of new arcs γs,k(D) one has to add to D in order to obtain a new digraph D = (V, A ∪ F ) which has k
arc-disjoint out-branchings rooted at s satisﬁes γs,k(D) = γ, where

γ = max{ max{0, k − d−D(X)} : F is a subpartition of V − s}. (9.15)
X ∈F
Furthermore, an optimal augmenting set F can always be chosen such that all new arcs have tails at s.

Proof: Let [D, k, s] be given. By Edmonds’ branching theorem, we must

have d−D (X) ≥ k for all X ⊆ V − s. Hence γs,k(D) ≥ γ must hold. We prove below that there exists a good augmenting set with no more than γ arcs. It

is instructive to compare this proof with the proof of Theorem 7.6.3.

Let v1, v2, . . . , vn−1 be a ﬁxed labeling of V − s. Add k parallel arcs from s to every other vertex. Clearly the digraph obtained in this way satisﬁes

(9.2). To distinguish the added arcs from arcs in A we refer to them below

as new arcs. Starting with i = 1 we delete as many new arcs of the kind

svi as possible while preserving (9.2) in the current digraph. If i < n − 1 let i := i + 1 and repeat the deleting step; otherwise stop. Let F be the ﬁnal

set of new arcs after the deletion phase and let D∗ = (V, A ∪ F ) denote the

current digraph when this process stops. We will show that |F | ≤ γ. This

will complete the proof and also imply the second claim since all arcs in F

have tail s.

Since no remaining new arc sv can be removed without violating (9.2),

it if

must enter d−D∗ (X) =

a set X such that d−D∗ (X) = k. k. Let S := {v : sv ∈ F }, that

Call a set X is, S is the

⊆V −s set of all

critical vertices

that are entered by an arc from F . Choose a family of critical sets F =

{X1, X2, . . . , Xt} such that F covers S11 and t is minimum with respect to this condition.

We claim that F is a subpartition of V − s. Suppose that this is not the

case. Then F contains two sets Xi, Xj, i = j such that Xi ∩ Xj = ∅. However using the submodularity of d−D∗ we obtain

k + k = d−D∗ (Xi) + d−D∗ (Xj ) ≥ d−D∗ (Xi ∩ Xj ) + d−D∗ (Xi ∪ Xj ) ≥ k + k.

Hence d−D∗ (Xi ∪ contradicting the

Xj) = choice

k of

and we F (note

can that

replace Xi ∪ Xj

Xi, Xj by the set ⊆ V − s and hence

Xi ∪ Xj, d−D∗ (Xi ∪

Xj) ≥ k must hold). Thus F is indeed a subpartition of V − s.

Now we have

11 A collection of sets F covers a set S if every s ∈ S belongs to some member X of F.

538 9. Disjoint Paths and Trees
tt
kt = d−D∗ (Xi) = |F | + d−D(Xi),
i=1 i=1
since every edge from F enters precisely one set Xi ∈ F and each Xi has d−D∗ (Xi) = k. Thus
t
|F | = (k − d−D(Xi)) ≤ γ.
i=1
and the proof is complete.
The method used to prove Theorem 9.11.1 cannot be extended to the case when the new arcs have costs and hence we cannot solve the cost version case of the problem in this way. As we remarked at the end of Subsection 9.10.1 this problem can be solved using an algorithm for weighted matroid intersection (Exercise 9.57). Hence weighted matroid intersection algorithms are a quite powerful tool.
Frank [265] has shown that, using a similar (but more complicated) approach to that used in Section 9.10, one can also solve the problem in which the goal is to add a minimum cardinality set of new arcs to a digraph D = (V, A) with a special vertex s with κ(s, v) ≥ k for all v ∈ V − s, so as to increase κ(s, v) to at least k + 1 for every v ∈ V − s. As we mentioned in Chapter 7 this problem can be solved with the help of submodular ﬂows [275], but the approach in [265] is simpler, since it does not require the (rather complicated) algorithms for submodular ﬂows.
9.12 Exercises
9.1. Prove Proposition 9.2.1.
9.2. Prove that problem (P5) of Proposition 9.2.1 for semicomplete digraphs can be reduced to the 2-path problem for semicomplete digraphs in polynomial time.
9.3. Prove Proposition 9.2.2.
9.4. Prove Lemma 9.2.4.
9.5. Prove Theorem 9.2.7. Hint: use Lemma 9.2.8.
9.6. Prove Theorem 9.2.9 without using Theorem 9.2.10.
9.7. Let D be the acyclic digraph in Figure 9.20. Show that the digraph D deﬁned as in the proof of Theorem 9.2.14 has a directed path from (x1, x2, x3) to (y1, y2, y3).
9.8. (+) Argue that we do not really need to construct D when searching for a path from (x1, x2, . . . , xk) to (y1, y2, . . . , yk). Does that lead to an improvement in the complexity estimate?

9.12 Exercises 539 x1 y1

ac x2

y2

bd x3

y3

Figure 9.20 An instance of the 3-path problem for acyclic digraphs.

9.9. Finding a cheapest collection of k disjoint paths with prescribed ends in weighted acyclic digraphs. Show that the approach used in the proof of Theorem 9.2.14 can be modiﬁed so that one can ﬁnd the cheapest collection of disjoint paths joining xi to yi for i = 1, 2, . . . , k.
9.10. (+) Prove that under the assumption of Corollary 9.2.16, for every nonspecial vertex v, the digraph D contains directed (x1, v)-, (x2, v)-, (v, y1)-, (v, y2)-paths such that the only common vertex of any two of these paths is v (Lucchesi and Giglio [527]). Hint: use Menger’s theorem and the fact that D is acyclic.
9.11. A suﬃcient condition for digraph to be 2-linked. Let D = (V, A) satisfy d+(x) + d−(y) ≥ n + 2 whenever D does not contain the arc xy. Prove that D is 2-linked. Hint: ﬁrst show that, if xy ∈ A, then there are three internally disjoint (x, y)-paths of length 2 in D (Heydemann and Sotteau [426]).
9.12. Prove that every k-linked digraph is also k-strong.
9.13. Prove that,if a digraph D = (V, A) is 2-linked, then for every choice of distinct vertices x, y, D contains disjoint cycles Cx, Cy such that x ∈ V (Cx), y ∈ V (Cy). Generalize this to k-linked digraphs and k vertices.
9.14. (−) Disjoint cycles containing prescribed vertices in tournaments. Prove that a tournament T contains disjoint cycles Cx, Cy such that x ∈ V (Cx), y ∈ V (Cy) if and only if T contains disjoint 3-cycles such that one contains x and the other contains y.
9.15. Describe how to construct the collection Q1, Q2, . . . , Qq of subpaths in the proof of Proposition 9.3.1. What is the complexity of your algorithm?
9.16. Show how to turn the proof of Proposition 9.3.1 into an algorithm which takes as input a collection P1, P2, . . . , Pp of internally disjoint (x, y)-paths and a collection Q1, Q2, . . . , Qq of internally disjoint (u, v)-paths in D − {x, y} and ﬁnds a collection of q (u, v)-paths which intersect no more than 2q vertices of P1, P2, . . . , Pp.
9.17. Let D be a locally semicomplete digraph and let x, y be distinct non-adjacent vertices. Prove that every minimal (x, y)-path is an induced path (BangJensen [44]).

540 9. Disjoint Paths and Trees

9.18. (−) Let D be a locally semicomplete digraph such that α(D) = 2. Prove that if x and y are non-adjacent vertices of D and D has an (x, y)-path, then there exists an (x, y)-path P of length at most 3.

9.19. (+) Prove the following statement. Let k ≥ 3, let D be a k-strong lo-
cally semicomplete digraph which is round decomposable and let D =
R[S1, . . . , Sr] be the round decomposition of D. Let x and y be vertices such that x ∈ V (Si) and y ∈ V (Sj), where i = j and let P be a minimal (x, y)-path. Then D − V (P ) is (k − 2)-strong (Bang-Jensen [52]). Hint: use
Exercise 9.18

9.20. (+) Prove Lemma 9.3.3. Hint: use Exercise 9.19.

9.21. Prove Lemma 9.3.17.

9.22. (++) Prove Theorem 9.3.13.

9.23. Prove Lemma 9.4.3. Hint: show how to modify a given (x, y)-path which is not closest to R into one which is closer by a stepwise (but ﬁnite and polynomially bounded) improvement. For the algorithmic part you can use that the embedding is with polygonal curves.

9.24. Prove that the graph G4 in Figure 9.10(a) is 5-connected.
9.25. Prove that the digraph Dk is Figure 9.10(b) is 5-strong and has no cycle through x, y. Hint: use Exercise 7.26 and Proposition 9.4.1.

9.26. Show how to derive Menger’s theorem (Theorem 7.3.1) from Edmonds’ branching theorem (Theorem 9.5.1).

9.27. (+) A polynomial algorithm for ﬁnding k-arc-disjoint outbranchings from a speciﬁed root. Show how to turn the proof of Theorem 9.5.1 into a polynomial algorithm which either ﬁnds a collection of k arc-disjoint branchings with root z, or a proof that no such collection of branchings exists. Hint: use ﬂows.

9.28. Greedy branching algorithm. Instead of applying the algorithmic version

of Theorem 9.5.1 to ﬁnd k arc-disjoint out-branchings with a given root, one

mofaFyz+tr.yFaingdreaendeywapopurto-barcahn: cﬁhnindga,ndeoluett-ebirtasnacrhcisnganFdz+sofroonm.

z. Delete all arcs Give an example

of a digraph D which has 2-arc-disjoint out-branchings with root z, but not

every out-branching Fz+ can be deleted while leaving another with root z.

9.29. (+) Tutte’s theorem on edge-disjoint trees in undirected graphs. Derive Theorem 9.5.6 from Theorem 8.7.6.

9.30. Generalize the example in Figure 9.11 to digraphs with arbitrarily many vertices.

9.31. Prove Lemma 9.6.2.

9.32. Show how to use submodular ﬂows to decide in polynomial time whether a mixed graph M has k edge-disjoint mixed branchings from a given root. Hint: see Exercise 8.65 and adjust the upper/lower bounds on arcs appropriately.

9.33. Give a proof of Theorem 9.6.3 using the reduction you found in the previous exercise and the feasibility theorem for intersecting submodular ﬂows.

9.12 Exercises 541

9.34. (+) Arc disjoint out-branchings with possibly diﬀerent roots. Prove the following result due to Frank [252]: In a directed graph D = (V, A) there are k arc-disjoint out-branchings (possibly with diﬀerent roots) if and only if

t
d−(Xi) ≥ k(t − 1)
i=1

(9.16)

holds for every subpartition {X1, X2, . . . , Xt} of V . Hint: add a new vertex s and a minimal set of new arcs from s to V so that s is the root of k out-
branchings in the new graph. Prove that this minimal set of arcs has precisely
k arcs.

9.35. Prove Theorem 9.5.6. Hint: use Edmonds’ branching theorem and Theorem 8.7.6.

9.36. Supply the missing details in the proof of Theorem 9.7.1.

9.37. Prove Theorem 9.7.3.

9.38. (−) Prove Lemma 9.7.6.

9.39. Prove Lemma 9.7.19.

9.40. Determine the complexity of the algorithm of Corollary 9.7.22

9.41. Fill in the missing details of the proof of Theorem 9.7.23. What is the complexity of this recursive algorithm?

9.42. Prove Lemma 9.7.9.

9.43. Prove the last Claim in the proof of Theorem 9.7.13. Hint: use the same approach as in the proof of Lemma 9.7.8.

9.44. Fan-in, fan-out in eulerian directed multigraphs. Let D be an eulerian directed multigraph and suppose D has arc-disjoint paths P1, P2, . . . , Pk such that Pi starts at xi and ends at u for i = 1, 2, . . . , k. Prove that D contains arc-disjoint paths P1, P2, . . . , Pk such that Pi is a (u, xi)-path and Pi is arcdisjoint from Pj for all 1 ≤ i, j ≤ k.
9.45. (+) Arc-disjoint (x, y)-, (y, z)-paths in quasi-transitive digraphs. Prove that the characterization in Theorem 9.7.21 can be extended to quasitransitive digraphs.

9.46. Show that the 3-ST-problem for eulerian digraphs can be reduced in poly-
nomial time to the problem of deciding the existence of arc-disjoint [s1, t1]-, [s2, t2]-paths in an eulerian digraph with speciﬁed vertices s1, t1, s2, t2. Hint: use Exercise 9.44.

9.47. Prove that the arc-version of Problem (P5) of Proposition 9.2.1 is N Pcomplete.

9.48. Supply the missing details in the proof of Theorem 9.9.2.

9.49. Show how to reduce Problem 9.9.1 for the case u = v to the case u = v.

9.50. (+) Prove that if any of the conditions (1)-(6) in Theorem 9.9.6 are satisﬁed, the T has no pair of disjoint branchings Fu+, Fv−.

542 9. Disjoint Paths and Trees

9.51. (+) Extend Theorem 9.9.3 to the case when v is on some 2-cycle. Hint: how should the sets EA, EB and the branchings described be modiﬁed?
9.52. Prove Theorem 9.9.10. Hint: use Theorem 9.9.3 and Exercise 9.51.
9.53. Apply Fulkerson’s minimum cost branching algorithm to the digraph in Figure 9.21 to ﬁnd a minimum cost out-branching from r.

13

2 1 12

3

24

22 2 2

6 55

r Figure 9.21 An instance of the minimum cost out-branching problem

9.54. Finding an arborescence which covers a prescribed vertex set. Show how to decide in polynomial time if a digraph D = (V, A) has an arborescence with root s which contains all vertices of a prescribed subset X ⊆ V (and possibly other vertices).
9.55. Eﬃcient implementation of independence oracles for the matroid intersection formulation of the minimum cost branching problem. Show how to implement the necessary oracles for testing independence in the two matroids M1, M2 which were used in Subsection 9.10.1. Your algorithms should have complexity around O(m), where m is the number of arcs in the directed multigraph.
9.56. (+) Finding a minimum cost subdigraph which has k-arc-disjoint out-branchings rooted at s in a directed multigraph. Show how to formulate this as a matroid intersection problem. Then sketch an algorithm to ﬁnd the desired branchings. Hint: modify the matroids M1, M2 from Subsection 9.10.1.
9.57. (+) Finding a minimum cost set of new arcs to add to a directed multigraph in order to ensure the existence of k-arc-disjoint outbranchings with a speciﬁed root. Show how to solve this problem using an algorithm for weighted matroid intersection. Hint: use a similar approach as that in Exercise 9.56. Compare also with Exercise 8.65.
9.58. Formulating the minimum spanning tree problem as a minimum cost branching problem. Show that the minimum spanning tree problem (given a connected undirected graph with non-negative weights on the edges, ﬁnd a spanning tree of minimum weight) can be formulated and solved as a minimum cost branching problem.

9.12 Exercises 543
9.59. Suppose D is a digraph which has k but not k + 1 arc-disjoint out-branchings rooted at s and let F = {X ⊂ V − s : d−D(X) = k}. Explain how to ﬁnd a minimal member of F (that is, no Y ⊂ X belongs to F ). Hint: ﬁrst show how to ﬁnd a member X of F using ﬂows and then show how to ﬁnd a minimal member inside X. For the later, see the result of Exercise 3.35
9.60. (+) Eﬃcient implementation of the Frank-Fulkerson algorithm. Try to determine how eﬃcient the Frank-Fulkerson algorithm can be implemented. I.e. identify places in the algorithm where a seemingly time consuming step can be done eﬃciently.
9.61. Reducing the shortest path problem to the minimum cost branching problem. Show how to reduce the shortest (s, t)-path problem for digraphs with non-negative weights on the edges to the min-cost out-branching problem.
9.62. Use your reduction from the previous problem to devise an algorithm for the shortest (s, t)-path problem in a digraph with non-negative weights on the edges. That is, specialize the min-cost branching algorithm to the case where we only want to ﬁnd a min-cost (s, t)-path. Hint: how many minimal sets are there to choose from in each step of the algorithm?
9.63. Compare your algorithm above to Dijkstra’s algorithm (see Chapter 2) and other classical shortest path algorithms from Chapter 2.
9.64. Simplicity preserving augmentations for rooted arc-connectivity. Give an argument for the following claim. The Frank-Fulkerson algorithm can be used to ﬁnd the cheapest set of new edges to add to a digraph to increase the maximum number of edge-disjoint out-branchings rooted at a ﬁxed vertex from k to k + 1, even when we are not allowed to add arcs that are parallel to already existing ones. Hint: what intersecting family F and what digraph with the new possible arcs should we consider?
9.65. Increasing capacity of arcs to increase rooted arc-connectivity Prove that the Frank-Fulkerson algorithm also works if all new arcs have to be parallel to existing ones.
9.66. Show that if L is a laminar family (i.e. X, Y ∈ L implies X ∩ Y = ∅, or X ⊂ Y , or Y ⊂ X) on a ground set of size n, then the number of sets in L is at most 2n − 1. Then show that indeed there are digraphs for which the Frank-Fulkerson algorithm may be run (legally) so that it will ﬁnd 2n − 1 sets before terminating phase 1.
9.67. Comparing the Frank-Fulkerson algorithm with classical minimum spanning tree algorithms. Suppose D = (V, A) is a symmetric digraph (i.e. xy ∈ E if and only if yx ∈ E) and that c : A → R+ satisﬁes c(xy) = c(yx). Compare the actions of the min-cost branching algorithm to well-known algorithms for ﬁnding a minimum spanning tree in a weighted (undirected) graph G. Such algorithms can be found in the book by Cormen, Leiserson and Rivest [169].
9.68. A min-max formula for the minimum weight of new arcs to add to a digraph in order to increase the number of arc-disjoint outbranchings rooted at a ﬁxed root by one. Use the description and proof of correctness in Section 9.10 of the Frank-Fulkerson algorithm to derive a

544 9. Disjoint Paths and Trees
min-max formula for the minimum weight of such an augmenting set. Hint: the statement is similar to that of Theorem 9.10.2.
9.69. (++) Describe a polynomial algorithm for ﬁnding in a given digraph D = (V, A) with speciﬁed vertices s, t, a minimum size subset A ⊆ A such that D = (V, A ) has s, t in the same strong component (Natu and Fang [589]).
9.70. (+) A min-max characterization of shortest paths. Prove the following theorem due to Fulkerson:
Theorem 9.12.1 [282] Let D = (V, A) be a digraph that contains an (s, t)path. Then the length of a shortest (s, t)-path in D equals the maximum number of arc-disjoint (s, t)-cuts.
Extend this result to the weigthed case and give a characterization of the length of a shortest (s, t)-path in terms of (s, t)-cuts. Hint: reduce to a minimum cost branching problem and apply Theorem 9.10.2.
9.71. The uncapacitated facility location problem. This is the following problem. Given a set L = {l1, l2, . . . , lp} of possible locations of facilities (each of unbounded capacity) that shall serve a set C = {c1, c2, . . . , cq} of customers. There is a ﬁxed cost wi of locating a facility at location li and the cost of satisfying the demand of customer cj from location li is given by dij. The problem is to decide which facilities to open and which facilities shall satisfy the demand of a customer such that the total costs are minimized. Show how to formulate this problem as an instance of the DSCC problem (see Subsection 9.10.3). Hint: since there is unbounded capacity at each facility, no client needs more than one facility to serve it. How can you model the cost of opening a facility by the cost of an arc?
9.72. Show that if the cost of opening a facility is zero, then there is a very simple greedy algorithm for solving the uncapacitated facility location problem (deﬁned in Exercise 9.71).
9.73. Show how to derive Theorem 9.11.1 from Theorem 7.6.3.

10. Cycle Structure of Digraphs
In the previous chapters, especially in Chapters 5 and 6, we considered various properties of cycles in digraphs. The study of cycle structure of digraphs is one of the most important areas in the theory of digraphs, and since several very interesting topics in this area have remained uncovered in the previous chapters, we discuss these topics in this chapter. We will mostly consider (directed) cycles; in most cases the adjective ‘directed’ is omitted. Sometimes we will use oriented cycles, i.e. orientations of undirected cycles.
Section 10.1 is devoted to the cycle space of digraphs. We show how properties of the cycle space imply certain structural results on digraphs. In Section 10.2, we consider polynomial algorithms by Alon, Yuster and Zwick to ﬁnd paths and cycles of length Θ(log n) in a digraph of order n. In Section 10.3, we study how many vertex- or arc-disjoint cycles a digraph can have as well as the problems to ﬁnd the minimum number of vertices or arcs to destroy all cycles in a graph. In Section 10.4 we will see that the maximum number of vertex-disjoint cycles in a digraph D is related to the minimum number of vertices in D needed to eliminate all cycles of D and the same is true for the corresponding arc version; Younger’s conjecture formally states this mutual dependence. We give an overview of the proof of Younger’s conjecture by Reed, Robertson, Seymour and Thomas.
The investigation of cycles of length equal k modulo p is started in Section 10.5, where we show that cycles of length 0 modulo p are very useful in the study of Markov chains. A number of remarkable results related to the even cycle problem in digraphs are given in Section 10.6; these include the theorem by McCuaig, Robertson, Seymour and Thomas that the even cycle problem is polynomial time solvable, and the theorem by Thomassen that every strong digraph with minimum out-degree and in-degree at least 3 contains an even cycle. In Section 10.6, we describe some extensions of these and other results to cycles of length equal k modulo p. A brief overview of results on short cycles in semicomplete multipartite digraphs can be found in Section 10.7. An interesting inequality between the length of a longest path and the length of a longest cycle in a strong semicomplete multipartite digraph, conjectured by Volkmann and proved by Gutin and Yeo, is shown in Section 10.8. Results on the well-known Caccetta-H¨aggkvist conjecture on the girth of a digraph, including the one by Chva´tal and Szemer´edi, are given in Section 10.9. Section

546 10. Cycle Structure of Digraphs
10.10 is devoted to a pair of additional topics: A´ d´am’s conjecture on the number of cycles in a digraph, and Marcus’ theorem on chords of cycles and its applications.

10.1 Vector Spaces of Digraphs

In this section we consider the cycle and cocycle spaces of a connected di-
graph; we will prove some basic properties of these vector spaces and an
interesting result on 2-arc-coloured digraphs whose proof uses the notion and
properties of the cycle space. We will use only the most basic notions and
results on (general) vector spaces (see e.g., Morris [573]).
Let D = (V, A) be a directed graph with arcs e1, . . . , em. The arc space A(D) of D is the vector space over the 2-element ﬁeld GF (2) = {0, 1} of all
functions A→GF (2). Every vector of A(D) corresponds naturally to a subset
of A, the set of those arcs to which it assigns one. We may think of A(D) as
the set of all subsets of A made into a vector space: the sum of B, C ⊆ A,
denoted B C is their symmetric diﬀerence, i.e., B C = B ∪ C − B ∩ C.
Observe that the zero vector of A(D) is ∅; the sets {ei}, i = 1, 2, . . . , m are linearly independent and every vector of A(G) is the sum of the corresponding
singletons, thus, {ei}, i = 1, 2, . . . , m form a basis of A(D) and dim A(D) = m.
Let B, C be a pair of vectors in A(D), where B = β1e1 β2e2 . . . βmem and C = γ1e1 γ2e2 . . . γmem, βi, γi ∈ {0, 1}. We write the scalar product

m
B, C := βiγi
i=1

(mod 2).

We say that B and C are orthogonal if B, C = 0. Observe that B and

C are orthogonal if and only if |B ∩C| is even. For a pair of distinct subspaces

S and F of A(D), we say that S and F are orthogonal if every vector of

S is orthogonal to every vector of F. It follows from well-known results in

linear algebra that

dim S + dim F ≤ m

(10.1)

for orthogonal subspaces S and F. In graph theory, some subspaces of A(D) are of special interest: the cycle
space and the cocycle space. The cycle space of a digraph D = (V, A) is a subspace of A(D) consisting of arc sets B such that the degrees of all vertices in the subdigraph D B are even1. The cycle space is indeed a subspace of A(D): the sum of two vectors in the cycle space as well as the product of a coeﬃcient in {0, 1} with a vector in the cycle space belongs to the cycle

1 Recall that the degree of a vertex x in a digraph D is the sum d+D(x) + d−D(x), i.e. the degree of x in U G(D).

10.1 Vector Spaces of Digraphs 547
space. The cycle space is denoted by C(D); its name is justiﬁed by the fact that C(G) is generated by the oriented cycles of G. Indeed, if B is a vector in C(D), then D B contains an oriented cycle Z; B − A(Z) is also a vector of C(D); it remains to apply the induction on the cardinality of B. Later (see Theorem 10.1.4) we will show that, if D is strong, then C(D) is generated, in fact, only by directed cycles of D.
For a connected digraph D = (V, A), a set B of arcs is a cocycle if D − B is not connected. The cocycle space C∗(D) consists of all cocycles of G and the empty set. We leave as Exercise 10.2 to prove the following proposition (see Bondy and Murty [127] and Diestel [191]):
Proposition 10.1.1 For a connected digraph D = (V, A), C∗(D) is a subspace of A(D). The cocycle space is generated by the cocycles of the form
C(x) = {xy ∈ A : y = x} ∪ {zx ∈ A : z = x}.
Using the facts that the cycle space of D is generated by oriented cycles of D and the cocycle space of D is generated by the cocycles C(x) together with linearity of the scalar product, it is easy to prove the following proposition.
Proposition 10.1.2 For a connected digraph D, the cycle space and the cocycle space are orthogonal.
Now we are ready to prove the following important theorem on the cycle space and the cocycle space.
Theorem 10.1.3 For a connected directed graph D, we have dim C(D) = m − n + 1 and dim C∗(D) = n − 1.
Proof: Let T be a spanning oriented tree of D. Recall that |A(T )| = n − 1. For an arc e in T , the set Ce = A(D) − A(T ) + e is a cocycle. Clearly, the cocycles Ce are linearly independent. Hence, dim C∗(D) ≥ n − 1. If we add an arc e not in T to T , we obtain a digraph T + e with a unique oriented cycle Ze. Since the set of oriented cycles Ze is a linearly independent set, we have dim C(D) ≥ m − n + 1. Hence, dim C(D) + dim C∗(D) ≥ m.
On the other hand, by Proposition 10.1.2 and Formula (10.1), we have dim C(D) + dim C∗(D) ≤ m. Thus, dim C(D) + dim C∗(D) = m and the formulae of this theorem are proved.
Interestingly enough, for strong digraphs some bases consist entirely of directed cycles as can be seen from the following easy result:
Theorem 10.1.4 For a strong digraph D, the cycle space is generated by (directed) cycles of D.

548 10. Cycle Structure of Digraphs
Proof: By Theorem 7.2.2 and Corollary 7.2.3, D has an ear decomposition P1, P2, . . . , Pm−n+1, where P1 is a (directed) cycle, and every Pi, i > 1, is either a (directed) path which intersects with ∪ik−=11V (Pk) only at its end-vertices, or a (directed) cycle having only one vertex in common with ∪ik−=11V (Pk). Clearly, the subdigraph of D induced by ∪ik=1V (Pk) has a cycle Ci containing Pi. Observe that the cycles C1, . . . , Cm−n+1 are linearly independent. Since dim C(D) = m−n+1, the cycles C1, . . . , Cm−n+1 form a basis of the cycle space.
Recall that a transitive triple in a digraph D is a subdigraph of D, which is the non-strong tournament of order 3. For special classes of digraphs, one can ﬁnd other bases. For example, Thomassen [709] proved the following two results:
Proposition 10.1.5 If T is a tournament, then C(T ) is generated by the transitive triples together with the hamiltonian (directed) cycles of T .
Proof: Clearly, the cycle space of T is generated by oriented cycles of length 3 (one may apply the result of Exercise 10.1). If T is not strong, but has a directed 3-cycle, then consider such a 3-cycle C = xyzx. Clearly, there is a vertex v such that either v dominates each of x, y, z or is dominated by each of x, y, z. In either case, C = A(Txy) A(Tyz) A(Tzx), where Tuw is the transitive triple containing v and the arc uw. Hence, C(T ) is generated by the transitive triples.
Therefore, we may assume that T is strong. By Theorem 10.1.4 it suﬃces to prove that every (directed) cycle C = x1x2 . . . xn−tx1 of T is a sum of some transitive triples and hamiltonian cycles in T . We prove it by induction on t = |V (T )| − |V (C)|. If t = 0, then the claim is trivial. Suppose that t > 0 and v ∈ V (C). If v→C or C→v, then as above we can see that C is a sum of transitive triples. Otherwise, without loss of generality, we may assume that x1→v→x2. Hence, A(C) = A(C ) (A(C ) A(C)), where C = C[x2, x1]vx2. Note that A(C ) A(C) is a transitive triple. Our proposition now follows by induction.
Theorem 10.1.6 If T is a 4-strongly connected tournament of order n, then C(T ) is generated by (directed) cycles of lengths n and n − 1.
Proof: Let arcs xy, yz, xz form a transitive triple R of T . By Exercise 6.16, the 3-strong tournament T − y has a hamiltonian cycle H through xz. We have
A(R) = A(H) [A(H) A(R)].
Observe that the term in the brackets is the arc set of a hamiltonian cycle of T . Hence, every transitive triple is in the space generated by cycles of length n − 1 and n and the theorem now follows from Proposition 10.1.5.
We consider the following nice result, also due to Thomassen. This result is not directly on the cycle space but its proof exploits properties of the cycle

10.2 Polynomial Algorithms for Paths and Cycles 549
space. First we need the deﬁnition of a monochromatic subdigraph of a 2arc-coloured digraph. Let D = (V, A) be a digraph and let f : A→{1, 2}. A subdigraph D = D A of D is monochromatic if f (a) = i for all a ∈ A , where i = 1 or 2.
Theorem 10.1.7 [709] Let D be a strong digraph whose underlying undirected graph is 2-connected. Let arcs of D be coloured into two colours 1 and 2 such that D has an arc of each colour. Then D has a non-monochromatic (directed) cycle.
Theorem 10.1.7 follows from Theorem 10.1.4 and the next lemma.
Lemma 10.1.8 [709] Let D be a 2-arc-coloured and non-monochromatic digraph such that U G(D) is 2-connected. If a set of oriented cycles GD generates C(D), then GD has a non-monochromatic oriented cycle.
Proof: Suppose that every cycle of GD is monochromatic. We show that this leads to a contradiction. Let x be a vertex of D incident to two arcs, say xy and zx, of diﬀerent colours. Since U G(D) is 2-connected, D − x has an oriented (y, z)-path P . Clearly, P together with xy and zx forms a nonmonochromatic oriented cycle C of D. Since GD generates C(D), we have
C = C1 C2 . . . Ck, where each Ci is in GD. Without loss of generality we may assume that each Ci is monochromatic and only the oriented cycles C1, . . . , Cp, 0 < p < k, are of colour 1. Hence the two sets of cycles C1, . . . , Cp and Cp+1, . . . , Ck have no arc in common. Therefore the fact that C = C1 C2 . . . Ck implies that Q = C1 . . . Cp must be a proper non-empty subdigraph of C. So, Q is a non-trivial collection of oriented paths and Q ∈ C(D), contradicting the fact that C(D) is a cycle space (some vertex in Q has odd degree).
Applying Theorem 10.1.7, one can easily conclude that the problem to verify whether a 2-arc-coloured digraph has a non-monochromatic directed cycle is polynomial time solvable. It is interesting to compare this result with Theorem 11.2.2 asserting that the problem to verify whether a 2-arc-coloured digraph has a directed cycle, which alternates in colour, is N P-complete. One may speculate that being non-monochromatic is more vague and thus a weaker property than being alternating.
Several interesting results on tournaments whose proofs are based on the properties of the cycle space can be found in the paper [709] by Thomassen (see also [714]).
10.2 Polynomial Algorithms for Paths and Cycles
While it is N P-complete to decide whether a digraph Dn of order n has a path or cycle with n vertices, it is not trivial to see for what functions lp(n) and

550 10. Cycle Structure of Digraphs
lc(n), one can verify in polynomial time whether Dn contains a path (cycle, respectively) of length lp(n) (lc(n), respectively). In particular, Papadimitriou and Yannakakis [141] conjectured that one can determine in polynomial time the existence of a path of length pl(n) = Θ(log n). Alon, Yuster and Zwick [16, 17] resolved this conjecture in aﬃrmative. They also proved that one can check whether a digraph of order n has a Ck in polynomial time as long as k = O(log n). In this section we will brieﬂy consider certain elegant ideas behind algorithms designed in [16, 17]. Further developments on the topic can be found in [18] and in the references therein. Various algorithmic aspects on enumeration of short cycles are also discussed there.
We start with a simple technical result on the expectation of a geometric random variable. This result can be found in many books on probability theory; we include its short proof for the sake of completeness. We use Prob(E) to denote the probability of the event E.
Lemma 10.2.1 Let 0 < p ≤ 1 and let x1, x2, . . . be a sequence of random boolean variables such that xj = 1 with probability p for each j ≥ 1. A random variable ν is deﬁned as follows: for j ≥ 1, ν = j if and only if xj = 1 and x1 = x2 = . . . = xj−1 = 0. Then, the expectation of ν is 1/p.
Proof: The expectation of ν equals
∞ ∞∞
i·Prob(ν = i) = Prob(ν ≥ i) = (1 − p)i−1 = 1/p.
i=1 i=1 i=1
To design algorithms verifying the existence of paths and cycles, Alon, Yuster and Zwick [16, 17] introduced two methods: the random acyclic subdigraph method and the colour-coding method. We consider ﬁrst the random acyclic subdigraph method and then the method of colour-coding. In the rest of this section, we will follow [17].
Let D = (V, A) be a digraph with V = {u1, u2, . . . , un}. Let M = [mij] be the adjacency matrix of D, i.e. mij = 1 if ui→uj and mij = 0, otherwise. It is well known (see Exercise 2.20) that the (i, j)th entry of the kth power of M is non-zero if and only if there is a (ui, uj)-walk of length k. However, many of (ui, uj)-walks of length k can be with repeated vertices (and even arcs). Thus, one naturally asks how we can get rid of walks that are not paths or cycles. One such method is the random acyclic subdigraph method: we choose randomly a permutation π on {1, 2, . . . , n} and construct the corresponding acyclic spanning subdigraph H of D by taking the following arcs: uπ(i)uπ(j) ∈ A(H) if and only if uπ(i)uπ(j) ∈ A and π(i) < π(j). Clearly, every walk of H is a path in D (no vertices can be repeated as H is acyclic). On the other hand, every path P with k arcs in D has a 1/(k + 1)! chance to be a path in H as well (Exercise 10.5).
Let O(nω) be the complexity of boolean matrix multiplication (i.e. of the multiplication of two boolean n × n matrices). Due to Coppersmith and

10.2 Polynomial Algorithms for Paths and Cycles 551
Winograd [168], ω < 2.376. Using random acyclic subdigraphs, one can prove the following:
Theorem 10.2.2 [16, 17] Let D = (V, A) be a digraph that contains a path (a cycle, respectively) of length k. A path (a cycle, respectively) of length k in D can be found in expected time O((k + 1)!·m) (O(k! log k·nω), respectively).
Proof: To ﬁnd a path of length k in D one can apply the following algorithm. Choose randomly a permutation π of {1, 2, . . . , n} and construct the corresponding acyclic spanning subdigraph H of D as described above. Using the O(m)-algorithm of Subsection 2.3.2, ﬁnd a longest path P in H. If the length of P is less than k, then repeat the above procedure. Otherwise return a subpath of P whose length is k.
Since D contains Pk+1, H has a path of length at least k with probability at least 1/(k+1)!. Hence, by Lemma 10.2.1, the expected number of iterations in the above algorithm is at most (k + 1)!. Thus, the expected running time is O((k + 1)!m) as claimed.
To ﬁnd a cycle of length k in D one can apply the following algorithm. Choose randomly a permutation π on {1, 2, . . . , n} and construct the corresponding acyclic spanning subdigraph H of D as above. By computing (in time O(log k·nω), see Exercise 2.21) the (k − 1)th power of the adjacency matrix of H, we ﬁnd all pairs of vertices which are end-vertices of (k − 1)-paths in H (see Exercise 10.6). If the terminal vertex of one of the paths dominates the initial vertex of the path in D, we construct the corresponding k-cycle and stop. If no k-cycle is found we repeat the above procedure.
Clearly, the expected number of iterations in the above algorithm is at most k!. This implies the expected running time of O(k! log k·nω).
Now we turn our attention to a more powerful approach, the method of colour-coding. Let c : V →{1, 2, . . . , k} be a colouring of the vertices of D. A path P in D is colourful if no pair of vertices of P are of the same colour.

Lemma 10.2.3 Let D = (V, A) be a digraph and let c : V →{1, 2, . . . , k + 1}
be a colouring of the vertices of D. A colourful path of length k in D, if one exists, can be found in time 2O(k) ·m.

Proof: Add to D a new vertex s of colour 0 that dominates all vertices of D

and is dominated by no vertex. As a result, we obtain a digraph D , which

has a (k +1)-path starting at s if and only if D contains a path of length k. To

ﬁnd a path of length k + 1 in D starting at s we use dynamic programming.

Suppose that we have already found for each vertex v ∈ V the possible sets

of colours on colourful (s, v)-paths of length i as well as the corresponding

paths (just one path for every possible set). We call such sets also colourful.

Observe that for every v we have at most

k+1 i

colourful sets and (s, v)-paths,

respectively. We inspect every colourful set C that belongs to the collection of

552 10. Cycle Structure of Digraphs

v and every arc vu. Let P (C) be the corresponding colourful path. If c(u) ∈ C, then we add C ∪ c(u) (P (C)u, respectively) to the collection of colourful sets (paths, respectively) of u of cardinality (length, respectively) i + 1. Clearly, D contains a colourful (k + 1)-path with respect to the colouring c if and only if the collection of colourful paths of length k + 1 for some vertex is not empty. The number of operations of this algorithm is at most

O

k+1
i
i=0

k+1 i

m

= O((k + 1)2k+1m).

The next lemma follows from Lemma 10.2.3 and is left as Exercise 10.8.
Lemma 10.2.4 Let D = (V, A) be a digraph and let c : V →{1, 2, . . . , k} be a colouring of the vertices of D. For all ordered pairs x, y of distinct vertices colourful (x, y)-paths of length k − 1 in D, if they exist, can be found in total time 2O(k) ·nm.
Actually, for dense digraphs the complexity of this lemma can be improved to 2O(k) · nω [17]. Clearly, Lemma 10.2.4 implies an 2O(k) · nm-algorithm to ﬁnd a k-cycle in D.
If P is a path of order k in D whose vertices are randomly coloured from set of k colours, then P has a chance of k!/kk > e−k to become colourful. Thus, by Lemma 10.2.1, the expected number of times to randomly generate k-colouring to detect P is at most ek . This fact and Lemmas 10.2.3 and 10.2.4 imply the following:
Theorem 10.2.5 (Alon, Yuster and Zwick) [16, 17] If a digraph D has a path of length k (k-cycle, respectively), then a path of length k (k-cycle, respectively) can be found in 2O(k)·m (2O(k)·nm, respectively) expected time.
The algorithms mentioned in this theorem are quite simple, but unfortunately not deterministic. Fortunately, one can derandomize these algorithms to obtain deterministic algorithms with time complexity still linear in m. Observe that for a path P of order k in D = (V, A) many k-colourings of V are equally good or bad depending on P being colourful or not. This means that we do not need to consider all kn k-colourings of V to detect a path of order k in D; a subset S of colourings such that every path of order k is colourful for at least one colouring of S is suﬃcient. In other words, we wish that for every k-set W of vertices there is a colouring from S that assigns vertices of W diﬀerent colours.
This is captured in the notion of a k-perfect family of hash functions from {1, 2, . . . , n} to {1, 2, . . . , k}. Schmidt and Siegel [653] following Fredman, Koml´os and Szemer´edi [277] gave an explicit construction of a k-perfect family from {1, 2, . . . , n} to {1, 2, . . . , k} in which each function is speciﬁed by b =

10.3 Disjoint Cycles and Feedback Sets 553
O(k) + 2 log2 log2 n bits. Thus, the size of the family is 2b = 2O(k) log22 n. The value of each of these functions on each speciﬁed element of {1, 2, . . . , n} can be computed in O(1) time. Using this family, the algorithms of Theorem 10.2.5 can be derandomized to obtain deterministic algorithms running in time O(2O(k)·m log2 n) and O(2O(k)·mn log2 n), respectively. Alon, Yuster and Zwick [16, 17] pointed out how to decrease each of the above complexities by the multiplicative factor of log n. They also showed how to derandomize some versions of algorithms mentioned in Theorem 10.2.2.
10.3 Disjoint Cycles and Feedback Sets
In this section we discuss several interesting non-trivial results on vertexdisjoint and arc-disjoint cycles. Actually, these results deal with some aspects of the following problem: given a digraph D, ﬁnd the maximum number of vertex-disjoint (arc-disjoint) cycles in D. This problem itself is N P-hard in both vertex and arc versions (see below). However, some very interesting suﬃcient conditions have been obtained for the existence of a large number of vertex-disjoint (arc-disjoint) cycles.
We will use some additional notation and terminology. For a digraph D, the maximum number of vertex-disjoint (arc-disjoint) cycles is denoted by ν0(D) (ν1(D)). In a digraph D, a set S of vertices (arcs) is a feedback vertex set (an feedback arc set) if D − S is acyclic. The minimum number of elements in a feedback vertex (arc) set of D is denoted by τ0(D) (τ1(D)). Notice that the parameters τ0(D) and τ1(D) have several practical applications, one of the most important is testing electronic circuits (see Leiserson and Saxe [512]). An electronic circuit can be modeled by a directed graph by letting each (boolean) gate correspond to a vertex and the wires into each gate be modeled by arcs into the vertex corresponding to that gate. Finding a small set of arcs whose removal makes the resulting digraph acyclic can help reduce the hardware overhead needed for testing the circuit using so-called scan registers (see Kunzmann and Wunderlich [506]).
10.3.1 Complexity of the Disjoint Cycle and Feedback Set Problems
We start from the following simple, but quite useful result.
Proposition 10.3.1 For every digraph D there exist digraphs D and D such that ν0(D) = ν1(D ), τ0(D) = τ1(D ), ν1(D) = ν0(D ) and τ1(D) = τ0(D ). The digraphs D and D can be constructed from D in polynomial time.
Proof: The digraph D can be deﬁned as D := L(D). To construct D simply apply the vertex splitting procedure (see Subsection 3.2.4) to all vertices

554 10. Cycle Structure of Digraphs
of D. The reader is advised to verify that the equalities of this proposition indeed hold.
This proposition implies that the following problems are of the same complexity (up to a polynomial factor).
The FVS problem: Given an integer k and a digraph D, verify whether τ0(D) ≤ k.
The FAS problem: Given an integer k and a digraph D, verify whether τ1(D) ≤ k.
Similarly the problem of deciding whether ν0(D) ≥ k is polynomially equivalent to the problem of deciding whether ν1(D) ≥ k.
Karp [474] was the ﬁrst to prove the following theorem:
Theorem 10.3.2 The FAS problem is N P-complete.
Gavril [306] proved that the FAS problem remains N P-complete even for digraphs D with ∆0(D) ≤ 3 or line digraphs.
Proposition 10.3.1 and Theorem 10.3.2 imply immediately that the FVS problem is N P-complete. Using Theorem 12.6.1 due to Bang-Jensen and Thomassen, we obtain the following stronger result:
Theorem 10.3.3 [89] The FVS problem is N P-complete even for tournaments.
The FVS problem remains N P-complete for digraphs D with ∆0(D) ≤ 2, planar digraphs D with ∆0(D) ≤ 3 (see Garey and Johnson [303]) and for line digraphs (see Gavril [306]). This problem, unlike the FAS problem, is N P-complete even for undirected graphs [303].
It is not surprising that the above mentioned decision problems for the parameters ν0 and ν1 are also N P-complete.
Theorem 10.3.4 Given a digraph D and an integer k, it is N P-complete to decide whether ν0(D) ≥ k ( ν1(D) ≥ k).
Proof: By Proposition 10.3.1 it is suﬃcient to show this claim only for ν0. A scheme of the proof of the assertion for ν0 is given in Exercise 10.9.
10.3.2 Disjoint Cycles in Digraphs with Minimum Out-Degree at Least k
It turns out that one of the suﬃcient conditions to guarantee the existence of a large number of vertex-disjoint cycles in a digraph D is that δ+(D) is large enough. Let f (k) be the least integer such that every digraph of minimum out-degree at least f (k) contains k vertex-disjoint cycles. The very existence

10.3 Disjoint Cycles and Feedback Sets 555

of f (k) for every k ≥ 1 is not obvious. Thomassen [700] was the ﬁrst to show this fact. He proved that f (k) ≤ (k + 1)!. Bermond and Thomassen [115] conjectured that, in fact, f (k) = 2k − 1.This holds for k = 1 as every acyclic digraph has a vertex of out-degree zero. This holds also for k = 2 (see Exercises 10.21 and 10.22). Alon [10] was the ﬁrst to prove that the function f (k) is linear. He obtained the following result.
Theorem 10.3.5 There exists an absolute constant C so that f (k) ≤ Ck for all k. In particular, C = 64 will do.

We will not give a proof of Theorem 10.3.5 as it is somewhat tedious. However, we will prove a slightly weaker result, Theorem 10.3.8. This proof shows basic ideas involved in the proof of Theorem 10.3.5 in [10]. We leave as Exercise 10.23 the proof of the following corollary.
Corollary 10.3.6 [10] Every digraph with minimum out-degree k has at least k2/128 arc-disjoint cycles.

For k-regular digraphs, the result of this corollary seems far from being sharp. Alon, McDiarmid and Molloy [13] conjectured the following:

Conjecture 10.3.7 Every k-regular digraph contains

k+1 2

arc-disjoint cy-

cles.

This conjecture was veriﬁed for k ≤ 3 in [13]. Now we formulate Theorem 10.3.8.
Theorem 10.3.8 [10] For k large enough, f (k) ≤ (3 + o(1))k loge k.
For technical reasons, we prove this theorem not only for digraphs, but for directed pseudographs without parallel arcs. However, for shortness we will still use the term ‘digraphs’ in the rest of this subsection for digraphs with possible loops.
Clearly, Theorem 10.3.8 holds for k = 1. Assume that Theorem 10.3.8 is true for all values up to some k and k + 1 is the minimum integer violating the inequality. Then, f (k + 1) > f (k) + 4. Let D = (V, A) be a digraph of minimum out-degree r, r = f (k+1)−1, such that D does not have k+1 vertexdisjoint cycles. We also assume that D has the minimum possible number of vertices and, subject to this property, the minimum size. By the deﬁnition of D, the out-degree of every vertex of D is exactly r and δ−(D) > 0. Moreover, D has no loop, since otherwise the digraph obtained from D by deleting a vertex with a loop cannot contain k vertex-disjoint cycles, showing that f (k + 1) − 2 = r − 1 ≤ f (k) − 1, which is impossible as we saw above that f (k + 1) > f (k) + 4.
We proceed by proving certain properties of D formulated as lemmas. The proof of Lemma 10.3.11 exploits a probabilistic argument. The ﬁrst lemma is due to Thomassen [700] and the next two to Alon [10].

556 10. Cycle Structure of Digraphs

Lemma 10.3.9 [700] For every v ∈ V , the subdigraph D N −(v) contains a cycle.

Proof: Fix an arbitrary vertex v ∈ V. Put H = D N −(v) . It suﬃces to show that δ−(H) > 0. Assume that u ∈ V (H) and d−H (u) = 0. Then, there is no vertex in D that dominates both u and v. This implies that the digraph D , obtained from D by ﬁrst deleting the arcs with tail u except for uv and then contracting uv, has minimum out-degree r. (Notice that D may have a loop.) By the minimality of D, the digraph D has k + 1 vertex-disjoint cycles. These cycles can easily be transformed into vertex-disjoint cycles of D, a contradiction.

Lemma 10.3.10 [10] We have |V | ≤ k(r2 − r + 1).

Proof: Put n = |V | and let G be the undirected graph with vertex set

V in which a pair u and v of distinct vertices is adjacent if and only if

there

is

a

vertex

in

D

that

dominates

both.

Deﬁne

m

=

n

r 2

and observe

that the size of G is at most m (since every vertex of D has out-degree r).

Therefore, as it is well known (see, e.g., Berge [105, page 282]) G has an

independent

set

of

cardinality

at

least

n2 2m+n

.

If

this

number

is

at

least

k + 1,

then there is a set x1, . . . , xk+1 of independent vertices of G. This means

that the sets N −(x1),. . . ,N −(xk+1) are pairwise disjoint. It now follows from

Lemma 10.3.9 that D has k + 1 vertex-disjoint cycles, a contradiction. Hence,

n2 2m+n

≤

k.

This

implies

the

inequality

of

Lemma

10.3.10.

Lemma

10.3.11

[10]

We

have

k(r2 − r + 2)(1 −

1 k+1

)r

≥ 1.

Proof: Assume that the inequality of this lemma is false and

k(r2

−

r

+

2)(1

−

k

1 +

1 )r

<

1.

Assign independently to every vertex v ∈ V a colour i ∈ {1, 2, . . . , k + 1} with

probability

p

=

1 k+1

.

Let

Vi

be

the

set

of

vertices

coloured

i.

For

each

vertex

v ∈ V , let Ev denote the event that all out-neighbours of v are of colours

diﬀerent than that of v. Since every vertex of D has out-degree r we have

Prob(Ev) = (1 − p)r. For i = 1, 2, . . . , k + 1, let Fi denote the event that Vi = ∅. Then Prob(Fi) = (1 − p)n ≤ (1 − p)r+1. Hence, by Lemma 10.3.10,

k+1
Prob(Ev) + Prob(Fi) ≤ n(1 − p)r + (k + 1)(1 − p)r+1

v∈V

i=1

≤ k(r2 − r + 1)(1 − p)r + k(1 − p)r

= k(r2 − r + 2)(1 − p)r

< 1.

10.3 Disjoint Cycles and Feedback Sets 557

This implies that with positive probability each D Vi is non-empty and has a positive minimum out-degree, and hence possesses a cycle. Thus, there is a choice of V1, . . . , Vk+1 giving k + 1 disjoint cycles in D, a contradiction.
Conclusion of the proof of Theorem 10.3.8: Lemma 10.3.11 implies that k(r2 − r + 2) ≥ er/(k+1).
Hence, for k large enough, f (k) ≤ f (k + 1) − 1 = r ≤ (3 + o(1))k loge k. Thus, Theorem 10.3.8 is proved.

10.3.3 Feedback Sets and Linear Orderings in Digraphs

We mentioned above that in many applications one wishes to ﬁnd a minimum

(cardinality) feedback arc set. Observe that, if A is an arbitrary feedback arc

set, then by deﬁnition D − A is acyclic and hence has an acyclic ordering

v1, v2, . . . , vn. With respect to this ordering every arc vivj ∈ A − A satisﬁes i < j. Hence, from the algorithmic point of view, ﬁnding a minimum feedback

arc set in D is equivalent to ﬁnding an ordering u1, u2, . . . , un of V which maximizes (minimizes) the number of forward arcs (backward arcs); an arc

uiuj is forward with respect to the above ordering if i < j, otherwise uiuj is backward2. This again is easily seen to be (algorithmically) equivalent

to ﬁnding an acyclic subdigraph with the maximum number of arcs in D

(Exercise 10.14). The latter problem is known as the acyclic subdigraph

problem.

To illustrate the deﬁnitions above and to gain some understanding of

diﬃculties in studying the problems above, let us consider the class of tour-

naments.

For a tournament T , let γ(T ) be the size of an acyclic subdigraph of T of

maximum size. Fixing an arbitrary ordering u1, . . . , un of vertices in T , we

see that the number of forward arcs plus the number of backward arcs equals

n 2

.

By

replacing

the

ordering

u1, u2, . . . , un

by

un, un−1, . . . , u1

if

needed,

we obtain that γ(T ) ≥ n(n − 1)/4. One may guess that we can always ﬁnd an

acyclic subdigraph of T of size exceeding n(n − 1)/4 by a signiﬁcant number,

say, n(n − 1)/4, where is an absolute positive constant not depending on

n. However, this is not true due the following:

Theorem 10.3.12 For every n ≥ 3, there exists a tournament T of order n such that γ(T ) ≤ n(n − 1)/4 + n3 loge n/2.
Proof: Consider a random tournament Tn on vertices 1, 2, . . . , n, i.e., a tournament chosen randomly from the set of all tournaments on 1, 2, . . . , n. Observe that for every pair i = j ∈ {1, 2, . . . , n}, ij ∈ A(Tn) with probability 1/2.
2 Clearly, the set of backward arcs form a feedback arc set.

558 10. Cycle Structure of Digraphs

For every pair i < j ∈ {1, 2, . . . , n}, deﬁne the random variable xi,j by

xi,j :=

+1 if ij ∈ A(Tn) −1 otherwise.

Let N =

n 2

.

With

respect

to

the

ordering

π

=

1, 2, . . . , n,

the

number

of

forward arcs minus the number of backward arcs equals

xi,j =: SN .
1≤i<j≤n

Then, Eπ := {|SN | > a} denotes the event that, in one of the two orderings π = π(1), π(2), . . . , π(n)(= 1, 2, . . . , n) and π∗ = π(n), π(n − 1), . . . , π(1)(=

n, n − 1, . . . , 1), the number of forward arcs exceeds n(n − 1)/4 + a/2. On

the other hand, SN is the sum of

n 2

random independent variables taking

values +1 and −1, each with probability 1/2. By Corollary A.2 in [14],

Prob(|SN | > a) ≤ 2e−a2/(2N),

(10.2)

for every positive number a. Observe that the event E that for at least one permutation of 1, 2, . . . , n,
the number of forward arcs exceeds n(n − 1)/4 + a/2 equals the union of the events Eν for all permutations of 1, 2, . . . , n, whose total number is n!. Put a = n3 loge n. Applying (10.2) we obtain
Prob(E) ≤ 2n! exp(−n loge n) ≤ 2n!n−n
<1

for every n ≥ 3. This means that with positive probability the event E does not hold, i.e. for every permutation of 1, 2, . . . , n, the number of forward arcs does not exceed n(n − 1)/4 + n3 loge n/2. By the deﬁnition of Tn, it follows that there exists a tournament of order n with the above-mentioned property.

A slightly better result was obtained by de la Vega in [186] who proved that loge n in the inequality of Proposition 10.3.12 can be replaced by a constant.
One may also consider weighted versions of the problems above. Each arc is assigned a non-negative real valued weight and the goal is to ﬁnd a feedback arc set of minimum total weight (respectively, an acyclic subdigraph of maximum weight). The weighted version of the acyclic subdigraph problem is known as the linear ordering problem. It arises naturally in the study of interactions between various sectors of an economical system (see Reinelt [631] and also Funke and Reinelt [284] and Gr¨otschel and Ju¨nger [337]).
For the linear ordering problem there is a very easy way to obtain an ordering which achieves at least half of the optimum value of an ordering. The proof of the following proposition is an easy exercise (Exercise 10.15).

10.3 Disjoint Cycles and Feedback Sets 559

Proposition 10.3.13 Given any weighted digraph D = (V, A, w), in time O(m) one can ﬁnd an acyclic subdigraph D = (V, A ) of D such that w(A ) ≥ w(A)/2.
This proposition implies that there exists a polynomial 2-approximation3 algorithm for the linear ordering problem, since w(A)/2 ≤ w(A ) ≤ w(Ao) ≤ w(A), where w(Ao) is the optimum weight.
Note that although the linear ordering problem and the feedback arc set problem are equivalent problems from the algorithmic point of view, the approximation algorithm above cannot be used as a 2-approximation algorithm for the feedback arc set problem as well. The reason is that the optimal ordering may have all or almost all arcs in the right direction (implying the number τ1 is close to zero) whereas the ordering above may still have as little as half the arcs in the right direction. In fact, approximating the number τ1 seems to be very diﬃcult and so far no c-approximation algorithm is known for any constant c. The following best known approximation guarantee for the feedback arc set problem is due to Seymour [665].
Theorem 10.3.14 There exists an O(log n log log n) approximation algorithm for the feedback arc set problem.

For a detailed account on approximating the number τ1 of a directed multigraph we refer to the chapter [671] by Shmoys. Another approximation algorithm for a generalization of the feedback arc set problem (as well as the feedback vertex set problem) is described by Even, Naor, Schieber and Sudan [227].
While for arbitrary digraphs the feedback arc set problem is N P-hard (see Theorem 10.3.2), for planar digraphs the situation is quite diﬀerent (unless P = N P) due to the following result by Lucchesi:
Theorem 10.3.15 [526] The feedback arc set problem is polynomially solvable for planar digraphs.

We give a proof of Theorem 10.3.15 below. First we need the deﬁnition
of the dual of a plane directed multigraph. Let G = (V, E) be a planar
pseudograph and let F be the set of faces of G (with respect to the ﬁxed planar embedding of G). Let G∗ be the pseudograph which has a vertex vi for each face fi ∈ F and for every edge e ∈ E such that e is on the boundary of faces fi, fj, the two vertices vi, vj corresponding to fi, fj are joined by an edge4. In general G∗ contains parallel edges and may also contain loops. For

3 For a minimization problem M, an algorithm A is an f (n)-approximation al-

gorithm if, for every instance of M of size n, A ﬁnds a solution whose value ρ

satisﬁes

ρ ρ∗

≤ f (n),

where

ρ∗

is

the

optimum

value.

4 Note that, if e is not part of the boundary of a facialcycle, then fi = fj and we

get a loop at vi.

560 10. Cycle Structure of Digraphs
plane directed pseudographs we can also deﬁne a dual called the directed dual. This is the same as above but now the orientation of the arc between vi and vj is always chosen such that the arc crosses the original arc e from left to right (here left means the left side when we traverse e from its tail to its head). See Figure 10.1 for an example of the dual of a directed multigraph.
(a) (b)
Figure 10.1 (a) A plane directed multigraph D; (b) the directed dual D∗ of D drawn on top of D. White circles indicate the vertices of D∗ and thin arcs are arcs of D∗. Fat arcs indicate arcs of D.
If D = (V, A) is a plane directed multigraph and D∗ is its directed dual, then it is easy to see that D∗ is also planar (Exercise 10.10). In fact, we have that (D∗)∗ is isomorphic to the converse of D (Exercise 10.11). Proof of Theorem 10.3.15: Let D be a planar directed multigraph and assume that D is embedded in the plane with directed dual D∗. Clearly we may assume that U G(D) is connected since otherwise we just consider each connected component separately.
We prove that the size of a minimum feedback set of D is equal to the minimum size of a dijoin of D (see the deﬁnition of a dijoin in Section 7.15). Recall from Section 7.15 that this is also the minimum number of arcs whose contraction results in a strongly connected directed multigraph.
If we delete an arc a of D the eﬀect on the dual will be the same as if we contract the corresponding dual arc a∗ (the one crossing a from left to right). If C is a facial cycle of D, then the vertex v corresponding to C has all arcs directed into it or out of it (depending on whether the orientation of C is clockwise or anti-clockwise). Thus in D∗ the arcs incident with v form a directed cut (recall the deﬁnition of a directed cut from Section 7.15) in D∗ implying that D∗ is not strong.
Conversely, if D∗ is not strongly connected then let H be an initial strong component (that is, there is no arc from V − V (H) to V (H) in D) of D∗. Now it is not diﬃcult to see that the arcs of D corresponding to the directed

10.4 Disjoint Cycles Versus Feedback Sets 561
cut (V (H), V − V (H)) in D∗ (which is non-empty since D is connected) form a directed cycle (Exercise 10.12). Thus we have shown that D has a directed cycle if and only if D∗ is not strongly connected. Furthermore, deleting arcs of D until we obtain an acyclic directed multigraph is equivalent to contracting arcs of D∗ until we obtain a strong directed multigraph. This shows that the size of a minimum feedback arc set of D equals the size of a minimum directed join in D∗. Now it follows from Corollary 8.8.10 that we can ﬁnd the feedback number (and a minimum feedback arc set) of D in polynomial time.
Our arguments above imply the following:
Corollary 10.3.16 For a planar digraph D, ν1(D) = τ1(D).
10.4 Disjoint Cycles Versus Feedback Sets
In this section, we study relations between the parameters ν0 and ν1, on one hand, and parameters τ0 and τ1 on the other hand. We state the famous Younger’s conjecture and present an overview of the proof of this conjecture by Reed, Robertson, Seymour and Thomas. Some (still) open conjectures and problems are mentioned as well.
10.4.1 Relations Between Parameters νi and τi
Clearly, for every digraph D, ν0(D) ≤ ν1(D) and it is easy to ﬁnd an inﬁnite family of digraphs D for which the two parameters are not equal. The same is true for the parameters τ0, τ1. Furthermore, we obviously have νi(D) ≤ τi(D) for i = 1, 2. It is easy to construct an inﬁnite family of digraphs D such that ν0(D) < τ0(D) (Exercise 10.19) and thus, by Proposition 10.3.1, an inﬁnite family of digraphs D such that ν1(D) < τ1(D).
On the other hand, there are families of digraphs for which the last two inequalities become equalities. Szwarcﬁter [686] described a family of digraphs, D for which ν0(D) = τ0(D). His family generalizes two families introduced by Frank and Gy´arf´as [267] and by Wang, Floyd and Soﬀa [732]. Szwarcﬁter [686] also provides polynomial algorithms to recognize his family of digraphs and to ﬁnd k-cycle factors and feedback vertex sets of cardinality k, where k = ν0(D) = τ0(D). We have already seen that planar digraphs D satisfy ν1(D) = τ1(D). Seymour [666] showed that the same result holds for a special family of eulerian digraphs. Another class of digraphs with the same property was considered by Ramachandran [620].
Even though not always νi(D) = τi(D), i = 0, 1, in which case τi(D) exceeds νi(D), Younger [750] conjectured that the former is bounded by a function of the latter5. In other words, he conjectured that for every k,
5 The existence of t0(2) was conjectured earlier by Gallai, see [626].

562 10. Cycle Structure of Digraphs

there exists a (least) natural number t0(k) (t1(k), respectively) such that for every digraph D the following holds: either D contains k vertex-disjoint (arc-

disjoint, respectively) cycles or D has a feedback vertex (arc, respectively)

set of cardinality at most t0(k) (t1(k), respectively). By Proposition 10.3.1, the validity of the ‘vertex’ version of Younger’s conjecture implies that the

‘arc’ version holds and vice versa. Moreover, Proposition 10.3.1 implies that,

if the functions t0(k) and t1(k) exist, then they are equal (Exercise 10.20). Younger’s conjecture was completely settled recently by Reed, Robertson,

Seymour and Thomas [626]. We discuss their solution in the next subsection.

In the rest of this subsection we consider the parameters ν1 and τ1 for the class of tournaments.

Even for a tournament T , the parameters ν1(T ) and τ1(T ) do not always coincide. By the proof of Theorem 10.3.12, for every n ≥ 3 a random tour-

nament Tn with n vertices, with probability tending to 1 as n→∞, has at least n(n − 1)/4 − n3 loge n/2 arcs in a feedback arc set of T . On the other hand, it follows from a result by Chartrand, Geller and Hedetniemi [144] that

Tn has at most

n n−1 32

≤

1 3

n 2

arc-disjoint cycles (each cycle has at least

three arcs). Isaak conjectured the following:

Conjecture 10.4.1 [446] If T is a tournament which has a minimum feedback arc set A such that T A is a transitive subtournament of T , then ν1(T ) and τ1(T ) coincide.
In [446] Isaak posed the following problem. Note that, if the answer to the problem is yes, then this implies Conjecture 10.4.1.

Problem 10.4.2 Suppose T is a tournament having a minimum feedback arc set which induces an acyclic digraph with a hamiltonian path. Is it true that the maximum number of arc-disjoint cycles in T equals the cardinality of a minimum feedback arc set of T ?

It is easy to see that a minimum feedback arc set of a given digraph must induce an acyclic subdigraph of D (Exercise 10.16). The next result by Barth´el´emy, Hudry, Isaak, Roberts and Tesman implies that every acyclic digraph arises as a minimum feedback arc set of some tournament.

Theorem 10.4.3 [95] Let D be an acyclic digraph. Then there exists a tournament T containing D as a subdigraph such that the arcs of D form a minimum feedback arc set in T .

The following conjecture is due to Bang-Jensen and Thomassen.

Conjecture 10.4.4 [89] The feedback arc set problem is N P-hard for tournaments.

We point out that the feedback vertex set problem is N P-hard for tournaments by Theorem 10.3.3.

10.4 Disjoint Cycles Versus Feedback Sets 563
10.4.2 Solution of Younger’s Conjecture
The vertex and arc versions of Younger’s conjecture were proved for various families of digraphs including the families mentioned above. McCuaig [559] proved the existence of t0(2) by characterizing intercyclic digraphs, i.e., digraphs D for which ν0(D) ≤ 1. Moreover, he established that t0(2) = 3. Reed and Shepherd [627] proved the vertex version of Younger’s conjecture for planar digraphs using a result of Seymour [665]. The result of Reed and Shepherd combined with a result of Goemans and Williamson [323] implies that tp0d(c) = O(c), where tp0d(c) is the function t0(c) restricted to planar digraphs. Finally, Younger’s conjecture was completely settled by Reed, Robertson, Seymour and Thomas [626]. In this subsection, we give a scheme of their proof. In particular, we provide a complete proof of perhaps the most interesting lemma in [626].
One of the important tools in the proof in [626] is the following well-known Ramsey theorem [621].
Theorem 10.4.5 (Ramsey) For all integers q, l, r ≥ 1 there exists a (minimum) integer Rl(r, q) ≥ 0 so that the following holds. Let Z be a set of cardinality at least Rl(r, q) and let every l-subset of Z be assigned a colour from {1, . . . , q}. Then there exist an r-subset S of Z and a colour k ∈ {1, . . . , q} so that every l-subset of S is of colour k.
Some readers may be more familiar with the graph-theoretic special case of this theorem. For every pair of natural numbers q, r there exists an integer R2(r, q) ≥ 0 so that every q-edge-coloured complete graph of order at least R2(r, q) has a monochromatic complete subgraph of order r.
We start describing the scheme of the proof of Younger’s conjecture by the following lemma whose proof is left as Exercise 10.24.
Lemma 10.4.6 [626] Let c ≥ 1 be an integer such that t0(c − 1) exists. Let D be a digraph with ν0(D) < c and let T be a feedback vertex set of D of cardinality τ0(D). Suppose U, W are disjoint subsets of T both of cardinality r, where r ≥ 2t0(c − 1). Then there is an r-path subdigraph of D from U to W , which contains no vertex in T − (U ∪ W ).
Let L = P1 ∪ . . . ∪ Pk be a k-path subdigraph in a digraph D and let ui (wi) be the initial (terminal) vertex in Pi, i = 1, . . . , 2. We say that L links (u1, . . . , uk) to (w1, . . . , wk) and L is from {u1, . . . , uk} to {w1, . . . , wk}.
The following lemma was proved by the authors of [626] in joint work with Alon. Its proof uses Ramsey’s theorem as well as Theorem 5.2.3 of Erd˝os and Szekeres.

564 10. Cycle Structure of Digraphs

Lemma 10.4.7 Let c ≥ 2 be an integer such that t0(c − 1) exists, and let k ≥ 1 be an integer. Then there exists an integer t ≥ 0 (depending on k) so that the following holds. If D is a digraph with ν0(D) < c and τ0(D) ≥ t, then there are distinct vertices u1, . . . , uk, w1, . . . , wk of D and a pair of kpath subdigraphs L1, L2 of D so that
(i) L1 links (u1, . . . , uk) to (w1, . . . , wk), (ii) L2 links (w1, . . . , wk) to either (u1, . . . , uk) or (uk, . . . , u1), (iii) every (directed) cycle of L1 ∪ L2 meets {u1, . . . , uk, w1, . . . , wk}.

Proof: Let l := (k − 1)2 + 1, r := max{2t0(c − 1), (k + 1)l}, q := (l! + 1)2,

and t := Rl(r, q) + l, where Rl(r, q) is as in Theorem 10.4.5. Then r ≥ l and

t ≥ 2r as clearly Rl(r, q) ≥ 2r − 1. We will show that this choice for t satisﬁes

the lemma. Let D be a digraph satisfying ν0(D) < c and τ0(D) ≥ t. Choose

a feedback vertex set T of D of cardinality τ0(D) and an l-subset U of T . Let

Z := {z1, z2, . . . , z|Z|} := T − U . Thus, |Z| ≥ Rl(r, q).

X¯

For each := (zi1 , . .

X ⊆ Z, . , zi|X| )

with X = {zi1 , and X¯ (h) = zih

. . . , zi|X| } for h = 1,

where i1 . . . , |X|.

<

...

<

i|X|;

we

put

Let X be an l-subset of Z. If there is an l-path subdigraph L1(X) in

D from U to X containing no vertex in Z − X, then there is a permu-

tation (u1, . . . , ul) of the vertices of U so that L1(X) links (u1, . . . , ul) to X¯ , and we put p1(X) := (u1, . . . , ul); if no such path subdigraph exists we put p1(X) := ∅. Similarly, if there is an l-path subdigraph L2(X) from X to U that links X¯ to (w1, . . . , wl) containing no vertex in Z − X, we put p2(X) := (w1, . . . , wl); if no such linkage exists we put p2(X) := ∅. We assign to X the colour (p1(X), p2(X)). Clearly, there are q possible colours (q is deﬁned in the beginning of this proof). By Theorem 10.4.5, there exist an

r-subset S of Z and a colour (u, w) such that every l-subset X of S is of

colour (u, w).

We claim that both u and w are non-empty. Indeed, suppose that u = ∅

and choose an r-set U such that U ⊆ U ⊆ T −S. By Lemma 10.4.6 there is an

r-path subdigraph L in D from U to S containing no vertex in T − (U ∪ S).

The path subdigraph L includes a path subdigraph from U to some X ⊆ S

having no vertex in T − (U ∪ X). Thus, u = p1(X) = ∅. Analogously, one proves that w = ∅.

Let u := (u1, . . . , ul) and w := (w1, . . . , wl) and let L1(X), L2(X) be the

corresponding linkings. We have already established that for every l-subset

X of S, L1(X) links u to X¯ and L2(X) links X¯ to w.

For i = 1, . . . , l deﬁne ji as follows: wji = ui. By the deﬁnition of l and

Theorem 5.2.3 of Erd˝os and Szekeres, there are 1 ≤ i1 < i2 < . . . < ik ≤

l so that the sequence ji1 , ji2 , . . . , jik either increases or decreases. Deﬁne

(i1, . . . , ik) to be (ji1 , . . . , jik ) in the ﬁrst case and (jik , . . . , ji1 ) in the second.

Hence, Let

i1 < . . G :=

.{<S¯(ilk),.

S¯(2l),

.

.

.

,

S¯(kl)}.

Choose

an

l-subset

X

of

S

so

that

S¯(hl) = X¯ (ih) for h = 1, . . . , k. Since L1(X) links (u1, . . . , ul) to X¯ , it in-

10.5 Application: The Period of Markov Chains 565

cludes a path subdigraph L1 linking (ui1 , . . . , uik ) to G¯. Moreover, the only

vertices of T in L1 belong to U ∪ G.

1,

.

Analogously choose an l-subset . . , k. Since L2(Y ) links Y¯ to (w1,

Y ..

.

of S , wl),

so that S¯(hl) = it includes a path

Y¯ (ih) for h subdigraph

= L2

linking G¯ or (uik , . .

t. o, u(iw1 )i1.

,M. .o.r,ewoivke)r.,

Oevbesreyrv(edtirheactte(wd)i1c,y. c. l.e,

winikL) 1is∪eiLth2emr (eueti1s,

.. T

. , uik ) (since

T is a feedback vertex set), and the only vertices of T in V (L1 ∪ L2) are

ui1 , . . . , uik and the elements of G; and so L1, L2 satisfy the lemma.

A digraph D is bivalent if, for every v ∈ V (D), d+(v) = d−(v) ∈ {1, 2}.

The following lemma is the most technically involved basic result in [626].

Lemma 10.4.8 For every integer c ≥ 1 there exists k ≥ 0 such that, for
every bivalent digraph D, if there exists a pair of k-path subdigraphs L1, L2 in D so that each path of L1 meets each path of L2 and L1 ∪ L2 has no (directed) cycles, then ν0(D) ≥ c.

Using this lemma and Theorem 10.4.5, one can prove the following:
Lemma 10.4.9 For every integer c ≥ 1 there exists k ≥ 0 so that the following holds. Let D be a digraph and let u1, . . . , uk, w1, . . . , wk be distinct vertices of D. Let L1, L2 be path subdigraphs in D linking (u1, . . . , uk) to (w1, . . . , wk) and (w1, . . . , wk) to one of (u1, . . . , uk), (uk, . . . , u1), respectively. If every (directed) cycle of L1 ∪ L2 meets {u1, . . . , uk, w1, . . . , wk}, then ν0(D) ≥ c.

Theorem 10.4.10 (Reed, Robertson, Seymour and Thomas) [626] For every integer c ≥ 1 there exists a (minimum) integer t0(c) such that, for every digraph D with ν0(D) < c, we have τ0(D) ≤ t0(c).
Proof: We use induction on c ≥ 1. For c = 1, this theorem is trivially true. Assume that c ≥ 2 and t0(c − 1) exists. Let k be as in Lemma 10.4.9, and let t be as in Lemma 10.4.7. We prove that there is no digraph D with ν0(D) < c and τ0(D) > t − 1 (i.e., t0(c) ≤ t − 1). Suppose that D is such a digraph. By Lemma 10.4.7, there exist u1, . . . , uk, w1, . . . , wk and L1, L2 as in Lemma 10.4.7. This means, by Lemma 10.4.9, that ν0(D) ≥ c, a contradiction.

10.5 Application: The Period of Markov Chains
Markov chains are a special type of stochastic processes, which have numerous applications in genetics, economics, sport science, etc. We will see in this section that the corresponding digraph cycle structure is of great importance to Markov chains.
Let S1, S2, . . . , Sn be all possible states of some system. The system is initially in a state Si with probability p(i0), i = 1, 2, . . . , n. At every step

566 10. Cycle Structure of Digraphs

the system moves from the state Si, which it is currently in, to a state Sj

with probability pij depending only on i and j. Clearly, for all i, j, we have

0 ≤ pij ≤ 1 and

n j=1

pij

=

1

for

every

i

=

1, 2, . . . , n.

The

stochastic

process, which we have under these conditions, is called a Markov chain

(for more details on Markov chains, see e.g. Feller [234] and Kemeny and

Snell [476])6. Let π(0) = (p(10), . . . , p(n0)), let p(ik) be the probability of the system to be in state Si after the kth step, and let π(k) = (p(1k), . . . , p(nk)). It is well-known that the vector π(k) can be found as follows: π(k) = π(0)P k,

where P = [pij]. However, this equality is diﬃcult to use directly if we wish to know the probability distribution π(k) after a large number of steps. In

fact, π = limn→∞ π(0)P k is often of interest (if it exists). To investigate when this limit exists and to see what happens when this

limit does not exist, it is very useful to study directed pseudographs D as-

sociated with Markov chains. The vertex set of D is {v1, . . . , vn} and the arc set is {vivj : pij > 0, 1 ≤ i, j ≤ n}; D has no parallel arcs but may have loops. It is not diﬃcult to see that for n→∞ with probability tending

to 1 the system will be in one of the stages corresponding to the vertices in

the terminal strong components of D (once the system is in such a ‘vertex’

it cannot escape the corresponding terminal strong component.) This shows

that it suﬃces to study only strong directed pseudographs D correspond-

ing to Markov chains. When D is strong, the following parameter of D is

of interest. The period p(D) of D is the greatest common divisor of the

cycle lengths of D. If p(D) = 1, then it is well-known that the limit above

does exist and, moreover, does not depend on the initial distribution π(0). If

p(D) ≥ 2, then the situation is absolutely diﬀerent since D has a quite special

structure. Actually, if p(D) is even, then by Theorem 1.8.1 we obtain that

D is bipartite. However, the following stronger assertion, which generalizes

Theorem 1.8.1, holds7:

Theorem 10.5.1 If a strong digraph D = (V, A) has period p ≥ 2, then V can be partitioned into sets V1, V2, . . . , Vp such that every arc with tail in Vi has its head in Vi+1 for every i = 1, 2, . . . , p, where Vp+1 = V1.
Proof: Let D = (V, A) have period p ≥ 2. Every closed walk W of D, being an eulerian digraph, is the union of cycles (see Theorem 6.8.1); hence the length of W equals 0 modulo p. Let x, y be a pair of distinct vertices of D and let P, Q be a pair of distinct (x, y)-paths in D. We claim that the lengths of P and Q are equal modulo p. Indeed, let R be an (y, x)-path in D. Both P and Q form closed walks with R; hence our last claim follows from the remark above.
6 Some readers may ﬁnd useful to consider S1, . . . , Sn as water containers, p(i0) as the fraction of water in Si initially, and pij as the fraction of water in Si to be moved to Sj in one step. We are interested in how the water will be distributed after a large number of steps.
7 We have been unable to trace the ﬁrst paper, where this result was proved. Our proof of this theorem makes use of some results considered in previous chapters.

10.6 Cycles of Length k Modulo p 567

Since D is strong, it can be constructed from a cycle using ear composition
(see Section 7.2). We start from a cycle C and in every iteration add to the
current digraph H a path whose vertices apart from the end-vertices do not
belong to H or a cycle with only one vertex in common with H. Initially,
all sets V1, V2, . . . , Vp are empty. We choose an arbitrary vertex x in C and consider every vertex y in C; we put y in Vi if the length of C[x, y] equals i modulo p. In the ﬁrst iteration of ear composition, we add a path or cycle R
to C. Let z be the initial vertex of R if R is a path or the only vertex of R in
common with C if R is a cycle, and let z ∈ Vk. We consider every vertex y in R and put y in Vk+i if the length of R[z, y] equals i modulo p. Note that, if R is a path, then its terminal vertex z will be put in the same set Vj, where it has been already, since otherwise we could ﬁnd a pair of (z, z )-paths, whose
lengths are not equal modulo p. We proceed with ear composition as above
and in the end we will have V partitioned into V1, V2, . . . , Vp such that every arc with tail in Vi has its head in Vi+1 for every i = 1, 2, . . . , p (by the way we have formed Vi’s).

Clearly, when the period of the digraph of a Markov chain is larger

than 1, the limit introduced above does not exist; instead the Markov chain

moves ‘cyclically’. Theorem 10.5.1 shows that a strong digraph D of order

n and n1, n2,

period . . . , np

p≥2 such

is a that

spanning

p i=1

ni

subdigraph of Cp[Kn1 = n. In particular, in

, . . . , Knp terms of

], for some homomor-

phisms, we have D→Cp (see Section 12.5).

There are two algorithms to compute the period of a strong digraph in optimal time O(n + m). The ﬁrst algorithm is by Balcer and Veinott [39] and based on the following idea. If, for a vertex x of d+(x) ≥ 2, we contract all vertices in N +(x) and delete any parallel arcs obtained, then the resulting digraph has the same period as the original digraph by Theorem 10.5.1. Repeating this iteration, we will ﬁnally obtain a cycle C (see Exercise 10.25). Clearly, the length of C is the desired period. For example, the digraph H obtained from a 3-cycle and a 6-cycle by identifying one of their vertices after ﬁve iterations above becomes a 3-cycle (see Figure 10.2). The second algorithm is due to Knuth (see [29]) and based on DFS-trees.

10.6 Cycles of Length k Modulo p
The linear-time algorithms mentioned in Section 10.5 show that the problem to verify whether all cycles of a digraph are of length 0 modulo p for some p is polynomial time solvable. This problem has the natural ‘existence’ analogue: given a (ﬁxed) integer p ≥ 2, verify whether a digraph D has a cycle of length equal 0 modulo p. In this section, we consider this and the more general problem of the existence of cycles of lengths equal k modulo p. In Subsection 10.6.1, we study the complexity results on these problems; Subsection 10.6.2

568 10. Cycle Structure of Digraphs

ab

b

c dh

c ad h

egeg

ff

c ad h be g
f

ad

h adg

h

adg

be g be

beh

cf cf

cf

Figure 10.2 Illustrating the Balcer-Veinott algorithm.

is devoted to some suﬃcient conditions for the existence of cycles of lengths equal k modulo p.
10.6.1 Complexity of the Existence of Cycles of Length k Modulo p Problems
We start our consideration from the following problem. Given a (ﬁxed) integer p ≥ 2, verify whether a digraph D has a cycle of length equal 0 modulo p. The case of p = 2 of this problem is called the even cycle problem. The even cycle problem has numerous applications (see e.g. Robertson, Seymour and Thomas [643] and Thomassen [711] and the reference to further literature therein) and is related to several problems on permanents of matrices, so-called Pfaﬃan orientations of graphs, colouring of hypergraphs, etc. The complexity of the even cycle problem has been an open problem for quite some time: Thomassen [712] proved that the even cycle problem is polynomial time solvable for planar digraphs and Galluccio and Loebl [300] extended this result to digraphs, whose underlying undirected graphs do not contain subgraphs contractible to either K5 or K3,3. Finally, independently McCuaig, and Robertson, Seymour and Thomas (see [643]) found highly non-trivial proofs of the following result:

10.6 Cycles of Length k Modulo p 569
Theorem 10.6.1 The even cycle problem is polynomial time solvable.
We are not aware of any paper determining the complexity of the problem to check whether a digraph has a cycle of length equal 0 modulo p for ﬁxed p > 2.
Problem 10.6.2 Is there a polynomial algorithm to check whether a digraph has a cycle of length equal 0 modulo p for ﬁxed p > 2?
The last problem can be naturally generalized to the problem to verify whether a digraph D has a cycle of length equal k modulo p for ﬁxed k, p such that 0 ≤ k < p, p ≥ 2. We have considered the case of k = 0; the case of k > 0 was studied by Arkin, Papadimitriou and Yannakakis [29], who proved the following theorem (observe that the case of k = 1 and p = 2 is polynomial time solvable since one can check whether a digraph is bipartite in polynomial time):
Theorem 10.6.3 Let k, p be a pair of ﬁxed integers such that 0 < k < p, p > 2. The problem to verify whether a digraph D has a cycle of length k modulo p is N P-complete.
Proof: Let D be a digraph and let k ≥ 2. Choose k arbitrary arcs a1, a2, . . . , ak in D and replace every arc xy in A(D) − {a1, a2, . . . , ak} by an (x, y)-path of length p, whose intermediate vertices do not belong to D (and the intermediate vertices of all such paths are distinct). Clearly, the obtained digraph D has a cycle of length equal k modulo p if and only if D has a cycle through all arcs a1, a2, . . . , ak. For a ﬁxed k ≥ 2, the problem of the existence of a cycle through k given arcs in a digraph is N P-complete (see Proposition 9.2.1 and Theorem 9.2.3); hence this theorem is proved for k ≥ 2. For k = 1, we choose a pair of arcs a, b, replace a by a path of length 2, b by a path of length p − 1, and every c ∈ A(D) − {a, b} by a path of length p such that all internal vertices of the paths are distinct and distinct from the vertices of D. Clearly, the obtained digraph D has a cycle of length equal 1 modulo p if and only if D has a cycle through a and b; the last problem is N P-complete as we remarked above.
Because of this theorem, the following result of Galluccio and Loebl [299] is of certain interest:
Theorem 10.6.4 Let k, p be a pair of ﬁxed integers such that 0 ≤ k < p, p ≥ 2. There is a polynomial algorithm to verify whether a planar digraph D has a cycle equal k modulo p.

570 10. Cycle Structure of Digraphs
10.6.2 Suﬃcient Conditions for the Existence of Cycles of Length k Modulo p
A digraph D = (V, A) is called even if, for every B ⊆ A, the subdivision of all arcs in B results in a digraph with an even cycle. A k-weak-double-cycle is a digraph which is deﬁned recursively as follows (see Figure 10.3):

Figure 10.3 The 5-double-cycle and a 5-weak-double-cycle.

1.

The complete biorientation

↔
Ck

of a k-cycle is

a

k-weak-double-cycle.

2. If H is a k-weak-double-cycle and D is obtained form H by subdividing

an arc or splitting a vertex, then D is a k-weak-double-cycle.

It is easy to see that for odd k a k-weak-double cycle is even because it has an odd number of cycles and every arc is in an even number of distinct cycles (see Exercise 10.27). The following result is much more diﬃcult to prove.

Theorem 10.6.5 (Seymour and Thomassen) [667] A digraph is even if and only if it contains a k-weak-double-cycle for some odd k.

Galluccio and Loebl [301] have extended this result. They call a digraph D = (V, A) (k, p)-odd if, for every B ⊆ A, the subdivision of all arcs in B results in a digraph with cycle of length diﬀerent from k modulo p.
Theorem 10.6.6 [301] A digraph is (k, p)-odd if and only if it contains a q-weak-double-cycle, with (q − 2)k ≡ 0 (mod p).

Using Theorem 10.6.5 and other results, Thomassen [711] proved the following very interesting theorem:
Theorem 10.6.7 (Thomassen’s even cycle theorem) If D is a strong digraph with δ0(D) ≥ 3, then D is even.

10.6 Cycles of Length k Modulo p 571
Koh [483] constructed an inﬁnite family of digraphs D with δ0(D) ≥ 2 and with no even cycle. Thomassen [702] strengthened this result by exhibiting, for every k ≥ 2, a digraph Dk with δ0(Dk) ≥ k and with no even cycle. This implies that the strong connectivity requirement in Theorem 10.6.7 is necessary. Theorem 10.6.7 implies that every 3-strong digraph has an even cycle. Thomassen [705] pointed out that there exists a 2-strong digraph of order 7 that has no even cycle namely, the digraph in Figure 10.4.
Figure 10.4 A 2-strong digraph with no even cycle.
Thomassen [702] constructed inﬁnitely many 2-strong digraphs that are not even. However, the following question is still open: Problem 10.6.8 [705] Are there inﬁnitely many 2-strong digraphs with no even cycle?
Theorem 10.6.7 was extended by Galluccio and Loebl [301], who proved that every strong digraph D with δ0(D) ≥ 3 contains a cycle of length different from k modulo p, for every 1 ≤ k < p, p ≥ 3.
Although we do not provide a proof of Theorem 10.6.7, we will prove Theorem 10.6.11 which implies a result weaker than Theorem 10.6.7, i.e. Corollary 10.6.12, but its assertion is not only on even cycles but also on cycles of length 0 modulo q(≥ 2). To prove Theorem 10.6.11, we need two lemmas; the ﬁrst lemma is the famous Lov´asz local lemma (cf. Alon and Spencer [14] or McDiarmid [560]). For an event E, E means that E does not hold. Lemma 10.6.9 Let E1, . . . , En be events in an arbitrary probability space. Suppose that each event Ei is mutually independent of all other events except for at most d events, and that Prob(Ei) ≤ p for every i = 1, 2, . . . , n. If ep(d+1) ≤ 1, where e is the basis of natural logarithms, then Prob(∩ni=1Ei) > 0.
Lemma 10.6.10 [12] Let D be a digraph and let q ≥ 2 be an integer. Suppose that every vertex x of D is assigned a colour c∗(x), an integer in {0, 1, . . . , q −

572 10. Cycle Structure of Digraphs

1}, such that for every u ∈ V (D) there exists an out-neighbour v with c∗(v) ≡ c∗(u) + 1 (mod q), then D contains a cycle of length 0 (mod q).

Proof: Clearly, choosing an arbitrary vertex u0 in V (D), we can ﬁnd a sequence u0, u1, . . . of vertices such that uiui+1 ∈ A(D) and c∗(ui+1) ≡ c∗(ui) + 1 (mod q) for every i ≥ 0. Let s be the least integer such that uj = us for some j < s. It remains to observe that the cycle ujuj+1 . . . us is of length 0 (mod q).

The following result is due to Alon and Linial:

Theorem 10.6.11 [12] For a digraph D = (V, A), if

e(∆−(D)δ+(D) + 1)(1 − 1/q)δ+(D) < 1

(10.3)

or if

e(∆+(D)δ−(D) + 1)(1 − 1/q)δ−(D) < 1

then D contains a cycle of length 0 (mod q).

(10.4)

Proof: Since (10.4) tranforms into (10.3) by replacing D by its converse, it suﬃces to prove that (10.3) implies that D has a cycle of length 0 modulo q.
For every vertex u, delete d+(u) − δ+(D) arcs with tail u and consider the resulting digraph D = (V, A ). Assign to every vertex u of D a colour c(u), an integer in {0, 1, . . . , q − 1}, independently according to a uniform distribution. For each u ∈ V , let Eu denote the event that there is no v ∈ V with uv ∈ A and c(v) ≡ c(u)+1 (mod q). Clearly, Prob(Eu) = (1−1/q)δ+(D). It is not diﬃcult to verify that each event Eu is mutually independent of all the events Ev except for those satisfying
N +(u) ∩ (v ∪ N +(v)) = ∅.

The number of such v’s is at most ∆−(D)δ+(D) and hence, by our assumption
(10.3) and Lemma 10.6.9, Prob(∩u∈V Eu) > 0. This means that there is a colouring c∗ such that for every u ∈ V there exists a v ∈ V with uv ∈ A and c∗(v) ≡ c∗(u) + 1 (mod q). Now it follows from Lemma 10.6.10 that D has a
cycle of length 0 modulo q.

An easy proof of the following corollary is left as Exercise 10.33.

Corollary 10.6.12 Every k-regular digraph D with k ≥ 8 contains an even cycle.

We have seen above that no constant k can guarantee that a digraph of out-degree at least k contains an even cycle. This leads to the following natural question (raised by Erd˝os, see [702]): what is the smallest integer h(n) such that every digraph of order n and minimum out-degree h(n) contains an even cycle? In order to prove an upper bound for h(n) we need a result on hypergraph colouring. The following lemma is due to Beck [98]8:
8 Recently, Radhakrishnan and Srinivasan [618] improved the bound of this lemma to 0.7·2m m/ ln m. Hence, the bound of Lemma 10.6.14 can slightly improved.

10.7 ‘Short’ Cycles in Semicomplete Multipartite Digraphs 573

Lemma 10.6.13 There exists an absolute constant d such that every muniform hypergraph with at most dm1/32m edges is 2-colourable.

Lemma 10.6.14 [12] For every n ≥ 2,

h(n)

≤

log2

n

−

1 3

log2

log2

n

+

O(1).

Proof: Let m ≥ 2 be an integer and let d be a constant satisfying Lemma

10.6.13. Suppose that

n = dm1/32m

(10.5)

and let D = (V, A) be a digraph of order n and δ+(D) ≥ m − 1. Let H be the hypergraph on the set of vertices V , whose n edges are the sets N +[u] = N +(u) ∪ u. Since every edge of H is of cardinality at least m, Lemma 10.6.13
implies that H is 2-colourable. This means that there exists a vertex colouring c∗ : V →{0, 1} such that for every u ∈ V there is v ∈ N +(v) with c∗(v) ≡ c∗(u) + 1 (mod 2). Hence, by Lemma 10.6.10, D has an even cycle. Solving
for m from (10.5) we obtain that

h(n)

≤

m

−

1

≤

log2

n

−

1 3

log2

log2

n

+

O(1).

Clearly, if a digraph D contains cycles of length k and k + 1 for some k, then D has an even cycle. Deciding the existence of such cycles of consecutive length in a strong digraph as N P-complete (see Exercise 10.37). Furthermore, it is easy to construct digraphs of arbitrary high vertex-strong connectivity with no such cycles (Exercise 10.38). It would be interesting to ﬁnd nontrival degree conditions (weaker than conditions implying pancyclicity, such as those in Section 6.5) which guarantee that a non-bipartite digraph has two cycles of consecutive lengths. See also Exercise 1.49 for another type of suﬃcient condition for the existence of two cycles of consecutive lengths.

10.7 ‘Short’ Cycles in Semicomplete Multipartite Digraphs
As we mentioned in Chapter 5 the hamiltonian cycle problem is N P-complete for arbitrary digraphs and polynomial time solvable for certain families of digraphs including semicomplete multipartite digraphs. In this section we consider the existence of ‘short’ cycles in semicomplete multipartite digraphs. By short cycles in a semicomplete p-partite digraph we mean cycles of length at most p.
The cycle structure of semicomplete bipartite digraphs is quite well understood due to Theorem 5.7.4 and Exercises 6.33, 6.34. The cycle structure

574 10. Cycle Structure of Digraphs
of semicomplete p-partite digraphs, p ≥ 3, is less investigated especially for cycles of length more than p. In this section, we will consider results on cycles of length at most p. Most of the results on short cycles in semicomplete multipartite digraphs were actually obtained for multipartite tournaments. Therefore, we state them for multipartite tournaments. However, all of them can be immediately extended to semicomplete multipartite digraphs due to the following theorem of Volkmann.
Theorem 10.7.1 [728] Let D be a strong semicomplete p-partite digraph of order n, p, n ≥ 2, with a cycle C of length at least 3. Then D contains a
↔
strong orientation containing the cycle C, if and only if D =K1,n−1 .
Interestingly enough the analogue of this theorem does not hold for longest paths, see Exercise 10.39 (some relaxation of the analogue still holds, see Exercise 10.40). It is often more convenient to work with the following easy corollary of this theorem.
Corollary 10.7.2 [728] Every strong semicomplete p-partite digraph, p ≥ 3, contains a spanning strong oriented subgraph.
One of the most interesting results on the topic is the following theorem.
Theorem 10.7.3 (Guo and Volkmann) [350] Let D be a strong p-partite tournament, p ≥ 3, with partite sets V1, . . . , Vp. For each i ∈ {1, 2, . . . , p}, there exists a vertex v ∈ Vi belonging to an s-cycle of D for every s ∈ {3, 4, . . . , p}.
Proof: It suﬃces to prove that V1 has a vertex v which is on an s-cycle of D for every s ∈ {3, 4, . . . , p}. We proceed by induction on s.
We will ﬁrst show that D has a 3-cycle through a vertex in V1. Let C = v1v2 . . . vkv1 be a shortest cycle through a vertex, say v1, in V1. Suppose that k ≥ 4. By the minimality of k, v3 ∈ V1, since otherwise v3→v1 implying the 3-cycle v1v2v3v1 through a vertex in V1, a contradiction. This means that v4 ∈ V1; without loss of generality assume that v4 ∈ V2. Since k ≥ 4 is minimal and v3 ∈ V1, we conclude that v4→v1, i.e. k = 4, and v2 ∈ V2. If there is a vertex x ∈ V − (V1 ∪ V2) which dominates a vertex of C and is dominated by a vertex in C, then there exists i ∈ {1, 2, 3, 4} such that vi+1→x→vi (indices modulo 4), which implies that there is a 3-cycle through v1 or v3, a contradiction.
This means that the set V (D)−(V1∪V2) can be partitioned into sets S1, S2 such that S2→V (C)→S1. Assume without loss of generality that S1 = ∅. Since D is strong there is a path from S1 to C. Let P = x1x2 . . . xq be a shortest such path. Clearly, q ≥ 3. If P has no vertex in S2, then one of the vertices x2, x3 belongs to V1 and the other to V2 (V − (S1 ∪ S2) ⊂ V1 ∪ V2). By the minimality of P , x3→x1 implying that x1x2x3x1 is a 3-cycle containing a vertex in V1, a contradiction. Therefore, P has a vertex in S2. By the

10.7 ‘Short’ Cycles in Semicomplete Multipartite Digraphs 575
minimality of P and S2→C, it follows that xq−1 ∈ S2. If q = 3, then v1x1x2v1 is a 3-cycle, a contradiction. So, assume that q ≥ 4. Since xq−2 cannot be in S1 ∪ S2, xq−2 ∈ V1 ∪ V2. If xq−2 ∈ V1, we have v2→xq−2 implying that xq−2xq−1v2xq−2 is a 3-cycle, a contradiction. Finally, if xq−2 ∈ V2, then v1xq−2xq−1v1 is a 3-cycle, a contradiction. We have shown that D has a 3-cycle containing a vertex in V1.
Suppose now that 3 ≤ s < p and some vertex u1 of V1 is contained in a k-cycle for every k = 3, 4, . . . , s. Assume, on the other hand, that
no vertex of V1 is in a k-cycle for any k = 3, 4, . . . , s, s + 1. (10.6)
Let u1u2 . . . usu1 be an s-cycle of D and let S be the union of partite sets of D not represented in C. We claim that there is no vertex in S, which dominates a vertex in C and is dominated by a vertex in C. Indeed, if such a vertex existed one could insert it into C, a contradiction with (10.6). This means that S can be partitioned into sets S1, S2 such that S2→C→S1. Assume without loss of generality that S1 = ∅. Since D is strong there is a path from S1 to C. Let P = y1y2 . . . yq be a shortest such path. Clearly, q ≥ 3.
Assume that P has a vertex of S2. Clearly, yq−1 ∈ S2 and no other vertex of P is in S2. If yq−2 ∈ V1, then yq−2yq−1C[u3, u1]yq−2 is an (s + 1)-path containing u1, a contradiction with (10.6). Hence, yq−2 ∈ V1 and u2→yq−2. Now we see that u2yq−2yq−1P [u4, u2] (or u1u2yq−2yq−1u1, if s = 3) is an (s + 1)-cycle containing u1, a contradiction with (10.6). Thus, we conclude that P has no vertex of S2.
Assume that P contains a vertex yl of V1. Let l be chosen such that {y1, y2, . . . , yl−1}∩V1 = ∅. Assume that q ≤ s. Due to the facts that every vertex of C dominates y1, for every k = 3, 4, . . . , s + 1, and yl→{y1, y2, ..., yl−2}, there is a k-cycle Ck containing parts of C and P ; Ck includes yl ∈ V1, a contradiction with (10.6). Therefore, q ≥ s + 1. Assume that l ≤ s + 1. Since yi→y1, for every i = 3, 4, . . . , s + 1, we obtain that P [y1, yi]y1 is an i-cycle containing yl, a contradiction with (10.6). Thus, we conclude that l ≥ s + 2. In the cycle C = P [y1, yl]y1, the vertex yl dominates every vertex. Hence, for every i = 3, 4, . . . , s + 1 we can construct an i-cycle using part of the vertices of C including yl, a contradiction with (10.6).
Thus, P has no vertex in V1. Hence, u1 dominates every vertex in P . If q ≥ k +1, then u1P [yq−k, yq]C[uk+1, u1] would be an (s+1)-cycle containing u1, a contradiction with (10.6). Therefore, q ≤ k. Since every vertex of C dominates y1, P C[uk+1, uk−q+1]y1 is an (s + 1)-cycle containing u1, a contradiction with (10.6).
Thus, the assumption (10.6) resulted in a contradiction. This proves our theorem.
This theorem generalizes several other results on multipartite tournaments and (ordinary) tournaments. Three of them are Moon’s theorem on vertex pancyclic tournaments, Theorem 1.5.1, and the following extension of Theorem 1.5.1 by Gutin.

576 10. Cycle Structure of Digraphs
Corollary 10.7.4 [364] Let D be a strong p-partite tournament, p ≥ 3, such that one partite set of D consists of a single vertex v. Then for each k ∈ {3, 4, . . . , p}, D contains a k-cycle through v.
By Theorem 10.7.1, Corollary 10.7.4 can be extended to semicomplete p-partite digraphs, p ≥ 3. Theorem 10.7.3 generalizes the following assertion, due to Bondy, which was actually the ﬁrst non-trivial result on cycles in multipartite tournaments. Again, Corollary 10.7.5 can be extended to semicomplete p-partite digraphs, p ≥ 3.
Corollary 10.7.5 [124] A strong p-partite tournament contains an s-cycle for every s ∈ {3, 4, . . . , p}.
The assertion of this corollary is the best possible in the sense that for every p ≥ 3 there exists a strong p-partite tournament with no cycle of length more than p. The following example is due to Bondy [124]. Let H be a ppartite tournament with partite sets V1 = {v}, V2, . . . , Vp such that |Vi| ≥ 2 for each 2 ≤ i ≤ p. If V2→v→ ∪pj=3 Vj and Vj→Vi for 2 ≤ i < j ≤ p, then H is strong but does not have a k-cycle for every k > p.
Another interesting generalization of Moon’s theorem is due to Goddard and Oelermann [322].
Theorem 10.7.6 Every vertex of a strong p-partite tournament D belongs to a cycle that contains vertices from exactly t partite sets of D for each t ∈ {3, 4, . . . , p}.
It is left as Exercise 10.41 to show that Theorem 10.7.3 is the best possible in the following sense: for every p ≥ 3 there exists a strong p-partite tournament T such that some vertex v of T is not contained in a k-cycle for some 3 ≤ k ≤ p. If one wishes to consider only cycles through a given vertex of a multipartite tournament, one perhaps should sacriﬁce the exactness. This is illustrated by the following result due to Guo, Pinkernell and Volkmann.
Theorem 10.7.7 [347] If D is a strong p-partite tournament and v an arbitrary vertex of D, then v belongs to either a k-cycle or a (k + 1)-cycle for every k ∈ {3, 4, . . . , p}.
For regular multipartite tournaments Guo and Kwak proved the following much stronger result. Observe that the partite sets of a regular multipartite tournament are of the same cardinality.
Theorem 10.7.8 [346] Let D be a regular p-partite tournament. If the cardinality of the partite sets of D is odd, then every arc of D is on a cycle that contains vertices from exactly k partite sets for each k ∈ {3, 4, . . . , p}.

10.8 Cycles Versus Paths in Semicomplete Multipartite Digraphs 577
This theorem generalizes the corresponding result by Alspach [19] on regular tournaments. The next theorem is another generalization of Alspach’s theorem.
Theorem 10.7.9 [345] Let D be a regular p-partite tournament. If every arc of D is contained in a 3-cycle, then every arc of D is on a k-cycle for each k ∈ {3, 4, . . . , p}.
10.8 Cycles Versus Paths in Semicomplete Multipartite Digraphs
For a digraph D, the numbers lpv(D) (lc(D), respectively) denote the number of vertices in a longest path (cycle, respectively) of D. The existence of an acyclic semicomplete multipartite digraph containing a Hamilton path and a hamiltonian semicomplete multipartite digraph suggests that there are no relations between the lengths of longest paths and cycles apart from trivial ones. However, the situation becomes quite diﬀerent when we consider strong semicomplete multipartite digraphs. Volkmann [730] conjectured that, if D is a strong semicomplete multipartite digraph then lpv(D) ≤ 2·lc(D) − 1.
The example of Bondy from Section 10.7 shows that the bound on lpv(D) is sharp. Volkmann’s conjecture was settled in aﬃrmative by Gutin and Yeo [382] (see Theorem 10.8.3). The aim of this section is to present an interesting proof given in [382]. However, we ﬁrst state a more general conjecture of Volkmann. Recall that α(D) denotes the cardinality of a maximum independent vertex set of D.
Conjecture 10.8.1 [728] Let D be a strongly connected semicomplete multipartite digraph with κ(D) < α(D). Then κ(D)lpv(D) ≤ (κ(D) + 1)lc(D) − κ(D).
The condition κ(D) < α(D) is given since every semicomplete multipartite digraph D with κ(D) ≥ α(D) is hamiltonian by Corollary 5.7.25 and thus the conjecture is not of interest for κ(D) ≥ α(D). Tewes and Volkmann [693] showed that the conjecture holds for κ(D) = α(D) − 1 ≥ 1.
For a path P = x1x2 . . . xp we let P [xi, xj[:= P [xi, xj−1].
Lemma 10.8.2 [382] Let D be a semicomplete multipartite digraph. Let Q1, Q2, . . . , Ql be non-empty sets which form a partition of V (D) such that Qi⇒Qj for every 1 ≤ i < j ≤ l. Assume that |V (D)| > l and D Qi has a Hamilton path q1i q2i . . . q|iQi| for every i = 1, 2, . . . , l. Then, D has a (q11, q|lQl|)path with at least |V (D)| − l + 1 vertices.

578 10. Cycle Structure of Digraphs

Proof: We use the induction on l. Clearly the theorem holds when l = 1, so

assume that l > 1.

If |V (D) − Ql| > (l − 1) then, by the induction hypothesis, there is a

(q11

,

ql−1
|Ql−1

|

)-path,

p1 p2 ..pk ,

in

D

−

Ql

which

contains

k

≥

|V

(D)

−

Ql|

− (l

−

1) + 1 ≥ 2 vertices. Since {pk−1, pk}⇒q1l and pk−1 and pk belong to diﬀerent

partite sets, where s = k

pk−1→q1l − 1 or k,

or pk→q1l . Therefore, is of the desired type.

the

path

p1p2

.

. . psq1l q2l

...

q|lQl|,

If |V (D) − Ql| ≤ (l − 1), then clearly |Ql| > 1. Since q11⇒{q1l , q2l } and q1l and q2l belong to diﬀerent partite sets, q11→q1l or q11→q2l . Therefore, the path q11qsl qsl+1 . . . q|lQl|, where s ∈ {1, 2}, is of the desired type.

Theorem 10.8.3 [382] Let D be a strong semicomplete multipartite digraph and let l = lpv(D) be the number of vertices in a longest path in D and let c = lc(D) be the number of vertices in a longest cycle in D. Then l ≤ 2c − 1.

Proof: Let P = p1p2..pl be a path in D of maximum length and let R = V (D) − V (P ). Let x0 = pl and deﬁne Si, xi and yi recursively as follows (i = 1, 2, . . .).
First let S1 be a (pl, pk)-path in D −V (P −{pl, pk}), such that k is chosen as small as possible. Let x1 = pk, let y1 = pl and let S1 = S1 − {x1, y1} (note that S1 = ∅, by the maximality of l). Now for i = 2, 3, 4, . . . let Si be a (pt, pk)-path in D {pt, pk} ∪ R − (V (S1) ∪ V (S2) ∪ . . . ∪ V (Si−1) , such that pt ∈ V (P [xi−1, pl]) and pk ∈ V (P [p1, xi−1[), and ﬁrstly k is chosen as small as possible, thereafter t is chosen as large as possible. Let also xi = pk, yi = pt and Si = Si − {xi, yi}. (Some paths Si can be empty, meaning that Si is just an arc.)
We continue the above process until xi = p1. Let the last value of i found above be denoted by m (i.e. xm = p1). Observe that the paths Si always exist as D is strong. Observe also that y1 = pl and that T below is a path in D:

T = y1S1P [x1, y2]S2P [x2, y3]S3 . . . P [xm−1, ym]Smxm.
Let U0 = P [xm, xm−1] − {xm, xm−1} and let Ui = P [ym−i+1, xm−i−1] − {ym−i+1, xm−i−1} for i = 1, 2, .., m − 1. Note that some of the Ui’s (i = 0, 1, 2, .., m−1) can be empty. Observe that V (T ), U0, U1, . . . , Um−1 partitions the set V (P ) ∪ V (S1) ∪ . . . ∪ V (Sm). Let Z0, Z1, . . . , Zm −1 be the non-empty sets among U0, U1, . . . , Um−1, where the relative ordering has been kept (i.e. if Zi = Ui , Zj = Uj and i < j then i < j). Let B0 = Z0 ∪ Z2 ∪ . . . ∪ Zf and B1 = Z1 ∪ Z3 ∪ . . . ∪ Zg, where f (g, respectively) is the maximum even integer (odd integer, respectively) not exceeding m − 1.
If pl→p1, then we are done (the cycle P p1 is of length l). Thus, we may assume that p1 is not dominated by pl. As xm = p1, it follows from the way we constructed the paths above (always going as far back as possible) that

p1⇒Z1 ∪ Z2 ∪ . . . ∪ Zm −1 ∪ {pl}.

(10.7)

10.8 Cycles Versus Paths in Semicomplete Multipartite Digraphs 579

Similarly, by the deﬁnitions of xi, yi and Si, Zi⇒Zi+2 ∪ Zi+3 ∪ . . . ∪ Zm −1 ∪ {pl}, i = 0, 1, .., m − 2.

(10.8)

As {x0, x1, . . . , xm} ⊆ V (T ) and m ≥ m , we have

|V (T )| ≥ m + 1.

(10.9)

As V (T ), B0, B1 partitions the set V (P ) ∪ V (S1) ∪ . . . ∪ V (Sm),

|V (T )| + |B0| + |B1| ≥ l.

(10.10)

All Zi ∪ {xi} are disjoint sets containing at least two vertices. Thus, there are at most l/2 such sets. Hence, we obtain

m

≤

l 2

.

(10.11)

We only consider the case when m is odd since the case of even m can

be treated similarly.

If |B0|+2

>

m +1 2

then,

by (10.7),

(10.8) and

Lemma

10.8.2, there

is a path

W0 from p1 to pl in D {p1, pl} ∪ B0

containing

at

least

|B0|

+

2

−

m +1 2

+

1

vertices (to use Lemma 10.8.2 we take V (Q1) = {p1} ∪ Z0, V (Q2) = Z2,

. . . , V (Q(m −1)/2) = Zm −3, V (Q(m +1)/2) = Zm −1 ∪ {pl}). Analogously if

|B1|

>

m

−1 2

,

then

there

is

a

path

W1

from

p1

to

pl

in

D {p1, pl} ∪ B1

containing

at

least

|B1|

−

m −1 2

+

1

vertices

(this

time

we

take

V

(Q1)

=

{p1},

V (Q2) = Z1, . . . , V (Q(m −1)/2) = Zm −2, V (Q(m +1)/2) = {pl}).

We now consider the cases where none, one or two of the paths W0 and

W1 exist.

Case 1 Both W0 and W1 exist: The cycle C0 = W0T contains |V (T )|+ |V (W0)| − 2 vertices (as p1 and pl are counted twice). The cycle C1 = W1T contains |V (T )| + |V (W1)| − 2 vertices. By (10.9) and (10.10), this implies the following:

|V (C0)| + |V (C1)| = 2|V (T )| + |V (W0)| + |V (W1)| − 4

≥

2|V

(T )|

+

(|B0|

+

2

−

m +1 2

+

1)

+

(|B1|

−

m −1 2

+

1)

−

4

= |V (T )| + (|V (T )| + |B0| + |B1|) − m

≥ |V (T )| + l − m

≥ l + 1.

This implies that the largest cycle of C0 and C1 contains at least (l+1)/2 vertices. Thus, we are done.

Case 2 Exactly one of W0 or W1 exists: Let j ∈ {0, 1} be deﬁned

such that Wj exists, but W1−j does not exist. Using (10.10) and (10.11), and

observing

that

either

|B0|

+

2

−

m +1 2

+

1

≤

1

or

|B1|

−

m −1 2

+

1

≤

1,

we

obtain the following (Cj = WjT , as above):

580 10. Cycle Structure of Digraphs

|V

(Cj )|

≥

|V

(T )|

−

2

+

(|B0|

+

2

−

m +1 2

+

1)

+

(|B1|

−

m −1 2

+

1)

−

1

≥ |V (T )| + |B0| + |B1| − m + 1

≥l−m +1

≥ ≥

l−
l+2 2

l 2
.

+

1

This is the desired result.

Case

3

Neither

W0

nor

W1

exists:

This

means

that

|B0|+2−

m

+1 2

≤

0

and

|B1|

−

m −1 2

≤

0.

Thus,

|V

(T )|

≥

|V

(T )|

+

(|B0|

+

2

−

m

+1 2

)

+

(|B1|

−

m

−1 2

)

= |V (T )| + |B0| + |B1| + 2 − m

≥l−m +2

≥

l+2 2

+ 1.

If p1→pl then there is a cycle of length at least

l+2 2

+

1

(using all vertices

in V (T )). By (10.7), pl does not dominate p1, so we may assume that p1 and

pl are in the same partite set. We have Sm = ∅ as otherwise SmP is longer

than P which is impossible, hence ym and pl are in diﬀerent partite sets. If

pl→ym then either P [ym, pl]ym or P [p1, ym]p1 is a cycle with at least

l+1 2

vertices. Therefore, we may assume that ym→pl. Then the cycle T [pl, ym]pl

contains at least

l+2 2

vertices. We are done.

10.9 Girth
Recall that the girth g(D) of a digraph D is the length of a shortest cycle in D. The girth is an important parameter of a digraph and has been studied in a number of papers especially with respect to its extreme values.
Theorem 5.6.10 claims that, if the minimum degree of every vertex in a strong digraph D is large enough, then the length of a longest cycle in D is large as well. Caccetta and H¨aggkvist [139] conjectured a somewhat similar result for girth (with obvious replacement of upper bound to a lower bound):
Conjecture 10.9.1 (Caccetta and H¨aggkvist) [139] Every digraph of minimum out-degree k and order n has a cycle of length at most n/k .
This conjecture is trivially true for k = 1; it was proved for k = 2 by Caccetta and H¨aggkvist [139], for k = 3 by Hamidoune [396], and for k = 4 and 5 by Hoang and Reed [430]. Hamidoune [395] proved that the conjecture is true for digraphs with transitive group of automorphisms. As an application, he showed in [395] that for a ﬁnite group G of order n and a subset S of G of cardinality s, there is a collection of at most n/s elements of S whose product equals the unit element of G. For an arbitrary integer k ≥ 1, we have the following:

10.9 Girth 581
Theorem 10.9.2 (Chv´atal and Szemer´edi) [163] There is a constant c such that every digraph of minimum out-degree k ≥ 1 and order n contains a cycle of length at most n/k + c. Moreover, c ≤ 2500.
A straightforward reﬁnement of the proof in [163] was used by Nishimura [593] to show that c ≤ 304. For relatively small values of n/k, the following result of Chv´atal and Szemer´edi [163] is of interest.
Theorem 10.9.3 Every digraph of minimum out-degree k and order n has a cycle of length at most 2n/(k + 1) .
Proof: By induction on n ≥ 2. For n = 2 or 3 and k ≥ 1, the digraph in question has either a 2-cycle or a 3-cycle and hence the claim holds. Let D be a digraph of order n ≥ 4 and minimum out-degree k ≥ 1. Since the size of D is at least kn, D contains a vertex v of in-degree at least k. If D has a 2-cycle, we are done. So, assume that D is an oriented graph. Let D be the digraph obtained from D by deleting the vertices of N −[v] = N −(v) ∪ {v} and adding the new arc xy for every ordered pair x, y such that xy ∈ A(D), y ∈ N +(v) and x dominates an in-neighbour of v. Clearly, D is of order at most n−k −1 and minimum out-degree at least k. By the induction hypothesis, D contains a cycle C of length at most 2(n − k − 1)/(k + 1). Replacing each of the new arcs xy in C by the path xuvy, we obtain a closed walk C∗ in D. If C has precisely s new arcs, then v appears on C∗ exactly s times, and so C∗ is the union (see Exercise 1.12) of at least s cycles, whose total length is at most 2(n − k − 1)/(k + 1) + 2s. Clearly, the shortest of these cycles has length at most 2n/(k + 1).
Searching for new approaches to the Caccetta-H´aggkvist conjecture, Hoang and Reed [430] came up with the following conjecture that implies the Caccetta-H´aggkvist conjecture (Exercise 10.43).
Conjecture 10.9.4 Every digraph D of minimum out-degree k contains a sequence C1, C2, . . . , Ck of cycles such that ∪ji=−11Ci and Cj have at most one vertex in common.
In the case of k = 2, the last conjecture was proved by Thomassen [704].
Theorem 10.9.5 Every digraph D of minimum out-degree 2 contains a pair of cycles with precisely one vertex in common.
Proof: By induction on n, the order of D. If n = 3, the claim trivially holds, so assume that n ≥ 4. Since the minimum out-degree in the terminal strong component of D is at least 2, we may assume that D is strong. Moreover, since δ+(D) ≥ 2, D has a vertex x such that D − x is strong (see Exercise 10.44). If D N −(x) contains a cycle C, then the required pair of cycles consists of C and a cycle formed by a shortest path P from x to C and the arc from

582 10. Cycle Structure of Digraphs

the terminal vertex of P to x. So, we may assume that D N −(x) is acyclic, and, thus, D N −(x) has a vertex y of in-degree 0.
If we delete all arcs with tail y and identify x and y, we obtain the digraph D of order n − 1 and minimum out-degree at least 2. By the induction hypothesis, D has a pair of cycles with precisely a vertex in common; these cycles correspond to cycles C1 and C2 in D. We may assume that C1 and C2 have yx in common for otherwise they have precisely a vertex in common. Since D − x is strong, y is in a cycle C3 of D − x. It is not diﬃcult to see that C1 ∪ C2 ∪ C3 contains a pair of cycles having precisely y in common. Indeed, if C3 has only y in common with C1 or C2, then there is nothing to prove. If C3 intersects with C1 ∪ C2 at a vertex distinct from y, then let z be such a vertex with C3[y, z] being as short as possible (meaning that C3[y, z] has only y and z in common with V (C1) ∪ V (C2)). Choose i such that z is in Ci, where i = 1 or 2. Then C3−i and Ci[z, y]C3[y, z] is the required pair of cycles.
The density of a digraph D is the ratio of its size and order (i.e. m/n). Clearly, high density of a strong digraph D guarantees that g(D) is small. Thomassen (see [112]) asked to determine the least number m(n, k) such that every strong digraph of order n and size at least m(n, k) contains a cycle of length at most k. Bermond, Germa, Heydemann and Sotteau [112] solved this problem by proving the following:

Theorem 10.9.6 Let D be a strong digraph of order n and let k ≥ 2. Then

|A(D)|

≥

n2

+

(3 − 2k)n 2

+ k2

−

k

implies that g(D) ≤ k.

This theorem is best possible since there exist strong digraphs of order n and size (n2 + (3 − 2k)n + k2 − k)/2 − 1 with shortest cycle of length k + 1 (Exercise 10.45).
In many questions on properties of (di)graphs, one may ask whether all (di)graphs satisfying a certain property must have cycles of length at most a constant. Perhaps the most famous such question is the problem regarding the chromatic number of an undirected graph: given k ≥ 3 and g ≥ 3, is there an undirected graph of chromatic number k and of girth at least g? This problem was resolved in aﬃrmative by Erd˝os [220] using probabilistic argument (a simpliﬁcation of the original proof is given by Alon and Spencer [14]). Clearly, many digraphs of large vertex-strong connectivity are quite dense and, thus, of small girth. However, it is not diﬃcult to construct digraphs of large vertex-strong connectivity and large girth. The ‘vertex-strong connectivity’ and ‘girth’ parts of the next result were proved by Ayoub and Frisch [34] (see Exercise 7.24) and Liu and Zhou [517] (see Exercise 10.42), respectively.

10.10 Additional Topics on Cycles 583
Proposition 10.9.7 If n = gs, g ≥ 2, then there exists an s-regular round digraph of order n which is s-strong and has girth g.
10.10 Additional Topics on Cycles
10.10.1 Chords of Cycles
The existence of chords of cycles is not only an interesting problem by itself, it has also several applications. One of these applications is the existence of kernels in digraphs (see Subsection 12.3.1), another one will be described in this subsection.
Let D be a directed multigraph with δ0(D) ≥ k. It is not diﬃcult to see that D has a cycle with at least k − 1 chords. Indeed, let P = p1p2 . . . pk be a longest path in D. Clearly, there are k arcs from pk to vertices of P . These arcs and part of P form the desired cycle with k − 1 chords. While for k = 1 this result cannot be improved (consider Cn or ‘tree-like’ strong digraphs obtained from several cycles in such a way that every pair of cycles has at most one common vertex). Marcus [551] showed that for k ≥ 2 the above simple result can be improved to the following:
Theorem 10.10.1 (Marcus’ theorem) [551] Let D be a strong directed multigraph with at least two vertices and δ0(D) ≥ k ≥ 2. Then D contains a cycle with at least k chords.
This result improves and extends the main assertion by Thomassen [713] that every 2-arc-strong directed multigraph has a cycle with at least two chords. The proof of Theorem 10.10.1 in [551] is quite involved and lengthy, and thus is not given here. Instead, we will consider an interesting application of Theorem 10.10.1 to the problem of minimum size strong spanning subgraphs of strong directed multigraphs (often called the minimum equivalent subdigraph problem, see the end of Section 4.3 and Section 6.11).
Lemma 10.10.2 [550] Let k be a positive integer, let a and b be non-negative real numbers, and suppose that every k-arc-strong directed multigraph with at least two vertices has a strong subgraph H with at least two vertices and a strong factor9 H0 of H such that
e0 ≤ ae + b(h − 1),
where h is the order of H and e (e0) is the size of H (H0). Then every karc-strong directed multigraph of order n and size m has a strong factor with at most am + b(n − 1) arcs.
9 Recall that a factor is a spanning subdigraph.

584 10. Cycle Structure of Digraphs

Proof: This holds trivially for directed multigraphs with one vertex since a ≥ 0. Thus, consider a directed multigraph D of order n ≥ 2 and assume that the result is true for all directed multigraphs with less than n vertices. By the assumption, D has a subgraph H as in the lemma. Clearly the contracted directed multigraph D/H is k-arc-strong and has n − h + 1 < n vertices; so D/H has a factor with a(m − e) + b(n − h) arcs. The corresponding arcs of D, along with the e0 arcs of H0, form a factor of D of size at most am + b(n − 1).

Setting

a

=

1 k+1

and

b

=

k k+1

in

this

lemma

and

using

this

lemma

together

with Theorem 10.10.1, we obtain the following (see Exercise 10.46):

Corollary 10.10.3 [551] For k ≥ 2, every k-arc-strong directed multigraph of size m and order n ≥ 2 contains a strong factor of size at most (m + k(n − 1))/(k + 1).

10.10.2 A´ d´am’s Conjecture
A´ d´am’s conjecture [1, 2] seems one of the most interesting conjectures on cycles in digraphs.
Conjecture 10.10.4 (A´ d´am) Every digraph has an arc whose reversal decreases the total number of cycles.
Originally, A´ d´am formulated the conjecture for directed multigraphs. This extension was disproved independently by Grinberg and by Thomassen (see [334, 461, 706]). Thomassen [706] used the following result of Penn and Witte [601], which is of independent interest and was established with the aid of knot theory on the torus. Note that this theorem generalizes Theorem 5.11.6.
Theorem 10.10.5 The cartesian product Cp × Cq has a cycle of length k if and only if there is a pair a, b of relatively prime natural numbers such that ap + bq = k.

The main idea of Thomassen is to apply the following corollary:
Corollary 10.10.6 [706] Inﬁnitely many digraphs of the type Cp × Cq have the property that the reversal of any arc increases the length of a longest cycle.
Proof: By the above theorem, C5 × C7+10k, k ≥ 0, has no cycle of length 35+50k or 34+ 50k (Exercise 10.47). However, the reversal of any arc creates a (34 + 50k)-cycle. This is depicted in Figure 10.5 (due to Thomassen [706]) for k = 0 and a similar structure can be used to obtain a cycle of length 34 + 50k when k ≥ 1. (Actually, Figure 10.5 shows a 35-cycle, too, and this cycle can be generalized for every k ≥ 0.)

10.10 Additional Topics on Cycles 585
Theorem 10.10.7 [706] There is an inﬁnite family of counterexamples to A´d´am’s conjecture in the case of directed multigraphs. Proof: Let D(k, f ) be the directed multigraph obtained from C5 × C7+10k by replacing each arc by f parallel arcs. Let t denote the maximum number of cycles through an arc of C5 × C7+10k and let s be the length of a longest cycle in C5 × C7+10k. Then no arc of D(k, f ) is contained in more than tf s−1 cycles, but if we reverse an arc e of C5 × C7+10k, then e is is contained in a cycle of length at least s + 1 and hence e is contained in at least f s cycles. Hence, if f > t, D(k, f ) is a counterexample to A´ d´am’s conjecture.
Figure 10.5 C5 × C7 and (directed) cycles of lengths 34 and 35 when an arc is reversed. (All arcs represented by vertical or horizontal straight line segments are directed upwards or to the right.)[706]
Grinberg’s counterexamples are inspired by projective geometry. All the examples by Thomassen and Grinberg have parallel arcs. At the same time, A´ d´am’s conjecture holds for some families of digraphs. Actually, it holds when a digraph has a 2-cycle. Proposition 10.10.8 [462] If a digraph D contains a 2-cycle, then D has an arc whose reversal decreases the total number of cycles in D.

586 10. Cycle Structure of Digraphs
Proof: Let uvu be a 2-cycle in D and, for every a ∈ A(D), let ca be the number of cycles in D containing a. Without loss of generality, we may assume that cuv ≤ cvu. Then, the reversal of vu decreases the number of cycles in D by cvu − cuv + 1 > 0.
Apart from this proposition, Jir´asek [462] proved several other assertions on families of digraphs that satisfy A´ d´am’s conjecture. The most interesting is the following:
Theorem 10.10.9 If, after reversal of at most three arcs a non-acyclic digraph D becomes acyclic, then D has an arc whose reversal decreases the total number of cycles in D.
To the best of our knowledge, A´ d´am’s conjecture is still open for oriented graphs.
Problem 10.10.10 [706] Verify A´d´am’s conjecture for oriented graphs and, in particular, for tournaments.
10.11 Exercises
10.1. (−) Prove that for a strong digraph D the cycle space is generated by oriented cycles without chords.
10.2. Prove Proposition 10.1.1.
10.3. (−) Let D be a digraph such that is U G(D) has c connected components. Prove that the dimension of the cycle space of D is m − n + c. Hint: apply Theorem 10.1.3 to every component of D.
10.4. Prove the following assertion. Let D, H be digraphs and let GD and GH be sets of oriented cycles generating the cycle spaces of D and H, respectively. Suppose further that f : A(D)→A(H) is a bijection such that f (GD) = GH . Then f and f −1 preserve oriented cycles (Thomassen [709]).
10.5. (−) Let 1 ≤ k ≤ n be integers. Let a1, a2, . . . , ak be a sequence of objects and let c be a colouring that assigns one of the colours {1, 2, . . . , n} to every object such that no colour is assigned to two objects. Prove that the probability of the event c(a1) < c(a2) < . . . < c(ak) equals 1/k!.
10.6. (−) Let M be an n × n matrix and let k be a natural number. Describe an algorithm that ﬁnds the kth power of M using only O(log k) multiplications of two n × n matrices.
10.7. Prove the ﬁrst equality in the proof of Lemma 10.2.1.
10.8. Prove Lemma 10.2.4 using Lemma 10.2.3.
10.9. Prove that the following problem is N P-complete. Given a digraph D and an integer k, decide whether D has at least k disjoint cycles. Hint: use a reduction from the 3-dimensional matching problem. (Given three sets X1, X2, X3 of the same cardinality n and a subset R of X1 × X2 × X3,

10.11 Exercises 587

decide whether that (x1j , x2j , x3j )

the elements ∈ R for each

of every j = 1, 2, .

Xi ..,

can be n. This

labelled problem

xi1, xi2, . . . , xin so is N P-complete,

see Gary and Johnson [303].) In the reduction you may utilize the gadget L

given in Figure 10.6. We start from the digraph G on vertices X1 ∪ X2 ∪ X3

and with no arcs. For each (x, y, z) ∈ R, we add L to G. Prove that the

resulting digraph has n + 2|R| cycles (all of which are 3-cycles) if and only

if there exists the required labelling of the elements in X1, X2 and X3 (A.

Yeo, personal communication).

x

y

z
L Figure 10.6 The gadget for Exercise 10.9.

10.10. The directed dual of a plane directed multigraph is planar. Show that, if D is a plane directed multigraph, then its directed dual D∗ is also planar.
10.11. Taking duals repeatedly. Let D be a plane directed multigraph and let D∗ be the directed dual of D. Show that the directed dual of D∗ is isomorphic to the converse of D.
10.12. Let D be a plane directed multigraph and let D∗ be the directed dual of D. Show that, if (S, S¯) is a directed cut in D∗, then the corresponding arcs in D form a directed cycle.
10.13. Let D = (V, A) be the plane digraph in Figure 10.1(a). Find two arcs in A whose deletion leaves an acyclic directed multigraph. Then check that contracting the corresponding two arcs in D∗, the directed dual of D, results in a strongly connected digraph.
10.14. (−) Show that the problem of ﬁnding a maximum size acyclic subdigraph of a directed multigraph D = (V, A) is equivalent to that of ﬁnding an ordering v1, v2, . . . , vn of V such that the number of arcs vivj with i < j is maximum.
10.15. Prove Proposition 10.3.13.
10.16. Let D be an arbitrary directed multigraph. Prove that every minimum feedback arc set of D induces an acyclic subdigraph of D.

588 10. Cycle Structure of Digraphs
10.17. Show that the tournament T in Figure 10.7 has a minimum feedback arc set which induces a transitive subtournament of T .

Figure 10.7 A tournament T on 5 vertices.

10.18. Show that, if there exists a polynomial approximation algorithm with approximation guarantee ρ(n) for the feedback arc set problem, then there also exists a polynomial approximation algorithm with approximation guarantee ρ(n) for the feedback vertex set problem and vice versa.

10.19. (−) Construct an inﬁnite family of digraphs D such that ν0(D) < τ0(D).

10.20. (−) Prove that, if the functions t0(k) and t1(k) exist, then they are equal. Hint: apply Proposition 10.3.1.

10.21. For every n ≥ 3, construct a digraph of minimum out-degree 2 not having two disjoint cycles.

10.22. Prove that every digraph D with δ+(D) ≥ 3 has a pair of vertex-disjoint cycles. Hint: use Lemma 10.3.9 (Thomassen [700]).

10.23. Prove Corollary 10.3.6 using Theorem 10.3.5. Hint: ﬁrst observe that every

digraph D the arcs of

with these

δa+n(dDc)on≥tinkuhearsecautrlseivaestly.6k4

vertex

disjoint

cycles.

Remove

10.24. (+) Prove Lemma 10.4.6. Hint: use Menger’s theorem.

10.25. (−) Prove that the Balcer-Veinott algorithm (in Section 10.5) terminates with a cycle, whose length is the period of the input digraph.

10.26. (−) Prove that a digraph D is even if and only if, for every assignment of weights 0 and 1 to its arcs, D contains a cycle of even weight.

10.27. Let D be a k-weak-double-cycle for some odd k. Prove that D has an odd number of cycles and that every arc is in an even number of cycles. Hint: use the recursive deﬁnition of a k-weak-double-cycle.

10.28. Let D be a k-weak-double-cycle for some odd k. Prove that D has an even cycle. Hint: assume that all cycles in D are odd and use Exercise 10.27 to obtain a contradiction.

10.29. Prove that given an arc e in a digraph D it is N P-complete to decide whether D has an odd cycle through e (even cycle through e, respectively) (Thomassen [702]).

10.11 Exercises 589
10.30. Digraphs for which all cycles have the same parity. Show that there is a polynomial algorithm to decide if the length of all cycles of a given digraph have the same parity.
10.31. (−) Give a short direct proof that the problem to verify whether a digraph D has cycle of length 0 modulo p, where both D and p form an input, is N P-complete.
10.32. (−) Prove that the period of a strong non-bipartite digraph D with δ0(D) ≥ 3 equals 1. Hint: use Theorem 10.6.7.
10.33. Prove Corollary 10.6.12.
10.34. (−) Prove the following generalization of Lemma 10.6.10. Let D = (V, A, w) be a weighted digraph and let k ≥ 2 be an integer. If there is a vertex colouring c∗ : V →{0, 1, . . . , k − 1} of D such that for every u ∈ V there is a v ∈ N +(u) with c∗(v) ≡ c∗(u) + w(u, v) (mod k), then D has a cycle of weight 0 (mod k) (Alon and Linial [12]).
10.35. Cycles modulo k in weighted digraphs. Using the result of the previous exercise and the method of proof of Theorem 10.6.11 prove the following generalization of Theorem 10.6.11: Let D = (V, A, w) be a weighted digraph and let k ≥ 2 be an integer. If either (10.3) or (10.4) holds then D contains a cycle of weight 0 (mod k) (Alon and Linial [12]).
10.36. Prove that a 3-weak-double cycle is (k, p)-odd for every pair k, p such that 1 ≤ k < p, p ≥ 3 (Galluccio and Loebl [301]).
10.37. Prove that it is N P-complete to decide whether a strong digraph has two cycles whose lengths diﬀer by one. Hint: reduce the hamiltonian cycle problem to this problem.
10.38. Construct for every k an inﬁnite family of k-strong digraphs such that no digraph in the family has two cycles whose lengths diﬀer by one.
10.39. (+) For p ≥ 3, construct an inﬁnite family Fp of strong semicomplete ppartite digraphs such that every digraph D in Fp contains a hamiltonian path, yet, a longest path of any strong orientation of D has n − 2 vertices, where n is the order of D (Gutin, Tewes and Yeo [372]).
10.40. (++) Prove the following theorem. Let D be a strong semicomplete mul-
↔
tipartite digraph of order n such that D =Kn−1,1 and let l be the length of a longest path in D. Then D contains a strong spanning oriented subgraph with a path of length at least l − 2 (Gutin, Tewes and Yeo [372]).
10.41. For every p ≥ 3 construct a strong p-partite tournament T such that some vertex v of T is not contained in a k-cycle for some 3 ≤ k ≤ p.
10.42. (−) Prove that if n = gs, then the s-regular round digraph of order n is of girth g.
10.43. Prove that Conjecture 10.9.4 implies Conjecture 10.9.1.
10.44. Let D be a strong digraph of minimum out-degree 2. Prove that D contains a vertex x such that D − x is strong. Hint: consider D , a maximal strong proper subdigraph of D. Prove that D contains all vertices of D but one.

590 10. Cycle Structure of Digraphs

10.45. For every k ≥ 2, construct strong digraphs on n vertices such that the

number k + 1.

of

arcs

is

n2 +(3−2k)n+k2 −k 2

−1

and

the

shortest

cycle

has

length

10.46. Derive Corollary 10.10.3 from Lemma 10.10.2 and Marcus’ theorem (Theorem 10.10.1).

10.47. Prove that C5 × C7+10k, k ≥ 0, has no cycle of length 35 + 50k or 34 + 50k. Hint: apply Theorem 10.10.5.

11. Generalizations of Digraphs
In this chapter, several results proved for digraphs are extended to edgecoloured graphs, arc-coloured digraphs and hypertournaments. We will see that some results remain the same with respect to their formulation, but their proofs become much more involved. Other results do not hold any more. This gives an additional insight to the theory of digraphs. In particular, we can more clearly see which properties of digraphs allow us to obtain various results on them.
In Section 11.1 we study properly coloured trails (i.e. trails whose consecutive edges diﬀer in colour) in edge-coloured undirected multigraphs. In Subsection 11.1.1 we prove Kotzig’s characterization of edge-coloured multigraphs containing properly coloured (PC) Euler trails and Pevzner’s theorem that shows how to generate all PC Euler trails of an edge-coloured multigraph from some initial one. Yeo’s theorem on PC cycles in edge-coloured graphs, which in a sense characterizes edge-coloured graphs not having PC cycles, is proved in Subsection 11.1.2. Subsection 11.1.3 is devoted to generalizations of strong connectivity to edge-coloured multigraphs. We consider various interesting results on hamiltonian and longest PC paths and cycles in 2-edge-coloured multigraphs in Subsection 11.1.4. Many of these results can be easily obtained from the corresponding results on digraphs using some transformations also described in this subsection. The characterization of 2-edge-coloured complete graphs containing hamiltonian PC cycles, due to Bankfalvi and Bankfalvi, is given in Subsection 11.1.5. There we prove Saad’s theorem characterizing longest PC cycles in 2-edge-coloured complete graphs. PC paths and cycles in c-edge-coloured complete graphs, c ≥ 3, are studied in Subsections 11.1.6 and 11.1.7; along with results on the topic, we describe several interesting open problems.
The somewhat surprising result, due to Gutin, Sudakov and Yeo, that the problem of checking the existence of a PC directed cycle in a 2-arc-coloured digraph is N P-complete is proved in Section 11.2. There we also consider the PC Euler trail problem for arc-coloured directed multigraphs; the complexity of this problem remains unknown. We generalize the classic theorems on tournaments, R´edei’s theorem, Camion’s theorem and Landau’s theorem, to hypertournaments in Section 11.3. Despite the existence of elegant characterization of hamiltonian hypertournaments proved by Gutin and Yeo, it turns

592 11. Generalizations of Digraphs
out that the hamiltonian cycle problem for hypertournaments, in general, is N P-complete. We ﬁnish this chapter by a short overview of an application of alternating Hamilton cycles in 2-edge-coloured multigraphs to genetics (see Section 11.4).

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs

In this section we consider edge-coloured multigraphs, i.e. undirected multigraphs such that each edge has a colour and no two parallel (i.e. joining the same pair of vertices) edges have the same colour. If the number of colours is restricted by an integer c, we speak about c-edge-coloured multigraphs. We usually use the integers 1, 2, . . . , c to denote the colours in c-edge-coloured multigraphs. In case c = 2, we also use the names red and blue for colours 1 and 2, respectively. The red subgraph (blue subgraph, respectively) of a 2-edge-coloured multigraph G consists of the vertices of G and all red (blue, respectively) edges of G.
Let G be a c-edge-coloured multigraph (c ≥ 2). A trail T in G is properly coloured (PC) if no two consecutive edges of T have the same colour. A PC m-path-cycle subgraph Fm of G is a union of m PC paths and a number of PC cycles in G, all vertex-disjoint. When m = 0, we will call F0 a PC cycle subgraph. If G is 2-edge-coloured, then we call a properly coloured trail in G alternating . To see that the alternating path and cycle structure of 2-edgecoloured multigraphs generalizes the path and cycle structure of directed multigraphs, we consider the following simple transformation attributed to H¨aggkvist in [548]; see Figure 11.1. Let D be a directed multigraph. Replace each arc xy of D by two (unoriented) edges xzxy and zxyy by adding a new vertex zxy and then colour the edge xzxy red and the edge zxyy blue. Let G be the 2-edge-coloured graph obtained in this way. It is easy to see that each alternating cycle in G corresponds to a directed cycle in D and vice versa. Hence, in particular, we obtain the following proposition.

12 2 21

11

2

21 Figure 11.1 H¨aggkvist’s transformation.

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 593
Proposition 11.1.1 The following problems on paths and cycles in 2-edgecoloured graphs are N P-complete:
(a) The alternating Hamilton cycle problem. (b) The problem to ﬁnd an alternating cycle through a prescribed pair of
vertices.
Proof: Exercise 11.1.
Clearly, a directed path in D corresponds to an alternating path in G as well. Thus, we may conclude that the alternating path and cycle structure in 2-edge-coloured graphs generalizes the (directed) path and cycle structure of directed multigraphs. In fact, we will see, in this section, that the former is certainly more complicated than the latter. Still, several methods and results obtained for directed multigraphs can be adapted to edge-coloured multigraphs.
Petersen’s famous paper [603] seems to be the ﬁrst place where one can ﬁnd applications of PC trails (cf. [575]). Besides a number of applications in graph theory and algorithms (cf. the papers [738, p. 58] by Woodall and [386] by H¨aggkvist), the concept of PC trails and its special cases, PC paths and cycles, appears in various other ﬁelds including genetics (cf. the papers [200, 201] by Dorninger, [202] by Dorninger and Timischl and [606] by Pevzner; see also the last section of this chapter) and social sciences (cf. the paper [156] by Chow, Manoussakis, Megalakaki, Spyratos and Tuza).
Let G be a c-edge-coloured multigraph. The jth degree of v, dj(v), is the number of edges of colour j incident to v (1 ≤ j ≤ c). The maximum monochromatic degree of G is deﬁned by
∆mon(G) = max{dj(v) : v ∈ V (G), j = 1, 2, . . . , c}.
The colour of an edge e in G will be denoted by χ(e). Let X and Y be two sets of the vertices of G. Then XY denotes the set of all edges having one end vertex in X and the other in Y and χ(XY ) stands for the set of colours of edges in XY . In case all the edges in XY have the same colour, say i, we write χ(XY ) = i.
Edge-coloured multigraphs G and H are colour-isomorphic if there exists an isomorphism f : V (G)→V (H) such that χ(xy) = χ(f (x)f (y)) for every pair x, y of distinct vertices of G. Let T = p1p2 . . . pl be a trail in G. Then, the trail plpl−1 . . . p1, called the reverse of T , will be denoted by T rev. Also, if l ≥ 2, then
χend(T ) = χ(pl−1pl), χstart(T ) = χ(p1p2).
Let G be a 2-edge-coloured multigraph of even order n; G is alternatingpancyclic if G has an alternating cycle of length 2k for every k = 2, 3, 4, . . . , n/2; G is vertex alternating-pancyclic if, for every vertex v ∈ V (G) and every integer k ∈ {2, 3, 4, . . . , n/2}, G contains an alternating cycle through v of length 2k.

594 11. Generalizations of Digraphs

11.1.1 Properly Coloured Euler Trails

In [502], Kotzig proved the following characterization of edge-coloured multigraphs which contain properly coloured Euler trails.

Theorem 11.1.2 (Kotzig) [502] An edge-coloured multigraph G has a properly coloured Euler trail if and only if G is connected, each vertex of G is of even degree, and for every vertex x and every colour i, di(x) ≤ j=i dj(x).
Proof: Obviously, the conditions above are necessary. Suppose G satisﬁes the conditions of Theorem 11.1.2. We will ﬁrst show
that, for every vertex x, the edges of G incident to x can be partitioned into disjoint pairs of distinct edges so that the colours of the edges in each pair are diﬀerent. This guarantees that each time we enter x through an edge e we can leave it through the edge f forming one of the above pairs with e. (We will denote f by matchx(e).)
In order to determine this partition, for each vertex x we deﬁne an auxiliary graph Gx so that the vertices of Gx are the edges incident to x. Two vertices are connected in Gx if their corresponding edges in G have diﬀerent colours. It is easy to see that the above partition exists if and only if each Gx has a perfect matching. It remains to prove that each Gx indeed has a perfect matching.
Observe that each Gx is a complete multipartite graph with partite sets of some cardinalities n1, n2, . . . , nt satisfying the following inequality:

ni ≤ nj
j=i

(11.1)

for every i = 1, 2, . . . , t. Choose an edge b between two largest partite sets of
Gx. Delete the vertices of b from Gx. Clearly, the partite sets of the obtained graph satisfy the inequality (11.1). This means we can proceed by choosing
another edge as above. This process will clearly produce a perfect matching
of Gx. (One could easily arrive at the same conclusion using Tutte’s theorem on perfect matchings in multigraphs, see e.g. the book [127] by Bondy and
Murty.)
Fix a perfect matching

{(e, matchx(e)) : e ∈ V (Gx)}
in Gx for every x in G. We call a PC trail Q of G an M -trail if matchx(e) ∈ E(Q) for every x ∈ V (Q) and every e ∈ E(Q) incident to x. Clearly, every M -trail is closed. In the obvious way (see the construction of R below), one can build an M -trail. Let T be an M -trail of G with maximum number of edges. Assume that E(T ) = E(G). Since G is connected, G − E(T ) contains an edge e1 incident to a vertex x1 in T . We construct a trail R in G − E(T ) as follows: x1, e1, x2, e2 = matchx2 (e1), x3, e3 = matchx3 (e2), x4, . . . , xk, ek =

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 595
matchxk (ek−1), xk+1, where ei = xixi+1 for every i = 1, 2, . . . , k, xk+1 = x1 and e1 = matchx1 (ek). Observe that T and R are edge-disjoint by the deﬁnition of M -trails.
Since x1 is in T , we can write down T as . . . f, x1, g, . . .. Assume, without loss of generality, that χ(f ) = 1, χ(g) = 2 and χ(e1) = 1. If χ(ek) = 2, then replace the appearance of x1 between f and g in T with the trail R obtaining, as a result, an M -trail of G with more edges than T , a contradiction. If χ(ek) = 2, then replace the appearance of x1 between f and g in T with the trail Rrev obtaining, as a result, an M -trail (observe that χ(e1) > 2) of G with more edges than T , a contradiction.
Thus, E(T ) = E(G), i.e., T is eulerian.
Benkouar, Manoussakis, Paschos and Saad [103] described an O(n2 log n)algorithm for ﬁnding a properly coloured eulerian trail in an edge-coloured multigraph G on n vertices that satisﬁes the conditions of Theorem 11.1.2. Pevzner [606] suggested the following simple and practical algorithm to ﬁnd a PC eulerian trail in G. Let P = x1x2 . . . xk be a PC trail. A colour χ is critical with respect to P if it is the most frequent colour χ = χ(xk−1xk) of edges with one end at xk and the other in V (G)−V (P ). Pevzner’s algorithm for an edge-coloured multigraph G satisfying Theorem 11.1.2 proceeds as follows. Let x1 be an arbitrary vertex in G. Put P1 = x1 and build up Pk = x1x2 . . . xk by adding an arbitrary edge xkxk+1 of colour χ(x1x2), if this colour is critical with respect to P , or of any critical colour with respect to P , otherwise. We stop when no critical colour edge is available. Pevzner [606] proved that this simple algorithm always produces a PC eulerian trail if one exists (Exercise 11.3).
Using the above transformation by H¨aggkvist, one can readily obtain the following result (see a direct proof of it in Theorem 1.6.3):
Corollary 11.1.3 A directed multigraph D is eulerian if and only if D is connected and d+(x) = d−(x) for every vertex x in D.
Fleischner, Sabidussi and Wegner [242] and Pevzner [606] independently investigated what operations can be used to transform an alternating eulerian trail of a 2-edge-coloured multigraph to any other one. Interestingly enough, while the ﬁrst paper has had a pure theoretical motivation, in the second paper, the author showed some applications of alternating eulerian trails, in general, and those transformations, in particular, to an important N Phard problem in genetics. We discuss below only the characterization of the transformations in [606].
Let G be 2-edge-coloured multigraph containing an alternating eulerian trail. In the rest of this subsection, for the sake of convenience, we consider alternating trails as ordered sets of edges. Let T = T1T2T3T4T5 be an alternating trail (where Ti are fragments of T viewed as subsets of E(G)). The transformation T →T ∗ = T1T4T3T2T5 is called an order exchange if T ∗ is

596 11. Generalizations of Digraphs
an alternating trail. Let T = T1T2T3 be an alternating trail. The transformation T →T ∗ = T1T2revT3 is an order reﬂection, if T ∗ is an alternating trail. Let X and Y be a pair of alternating trails in G. The number of vertices in the largest common subtrail of X and Y is the index ind(X, Y ) of X and Y .
Theorem 11.1.4 (Pevzner) [606] Every pair of alternating eulerian trails X and Y in a 2-edge-coloured multigraph can be transformed into each other by means of a sequence of order transformations (exchanges and reﬂections).
Proof: In the set of alternating eulerian trails T , which can be obtained from X by means of a sequence of order transformations, choose an element, X∗ = x1x2 . . . xq, having the largest common subtrail with Y = y1y2 . . . yq. (Clearly, x1 = xq and y1 = yq.) Let us assume that ind(X∗, Y ) = < q. Due to the fact that both X∗ and Y are closed, without loss of generality, we may assume that xi = yi for 1 ≤ i ≤ .
Let e1 = x x +1 and e2 = y y +1. Clearly, χ(e1) = χ(e2). Since X∗ is eulerian, X∗ contains e2. There are two possibilities depending on the direction in which we traverse the edge e2 in X∗ (going from x1 to xq).
Case 1: In X∗ the edge e2 is traversed from y +1 to y . In this case,
X∗ = x1 . . . x x +1 . . . y +1y . . . xq.
Let T1 = x1 . . . x , T2 = x x +1 . . . y +1y and T3 = y . . . xq. Since χ(e1) = χ(e2), the transformation X∗→X∗∗ = T1T2revT3 is an order reﬂection. But X∗∗ ∈ T and ind(X∗∗, Y ) > ind(X∗, Y ), a contradiction to the choice of X∗.
Case 2: In X∗ the edge e2 is traversed from y to y +1. In this case,
X∗ = x1 . . . x x +1 . . . (xp = y )(xp+1 = y +1) . . . xq.
Let X1 = x1 . . . x , X2 = x x +1 . . . xp and X3 = xpxp+1 . . . xq. Claim. The trail X3 contains a vertex xj (j > p) belonging to X2.
Proof of Claim: Let i > be the minimum number fulﬁlling the following condition: vertex yi of the trail Y is in X2. The existence of such an i follows from the fact that Y contains the edge e1 = yt−1yt for some t > . Due to the minimality of i the edge yi−1yi does not belong to X2. Condition i > l implies that this edge is not in X1. Hence, this edge is in X3 implying that X2 and X3 have a common vertex. The claim is proved.
Due to the claim, the trail X∗ can now be rewritten as
X∗ = x1 . . . x x +1 . . . (xk = xj) . . . (xp = x )(xp+1 = y +1) . . . xj . . . xq.
Let T1 = x1 . . . x , T2 = x x +1 . . . xk, T3 = xk . . . xp, T4 = xp . . . xj, and T5 = xj . . . xq. Consider the edges f1 = xk−1xk and f2 = xj−1xj. If χ(f1) = χ(f2), then χ(f2) = χ(xkxk+1) and X∗∗ = T1T4T3T2T5 is the alternating trail

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 597
obtained from X∗ by means of some order exchange. Clearly, ind(X∗∗, Y ) > ind(X∗, Y ), a contradiction to the choice of X∗.
If χ(f1) = χ(f2), then X∗∗ = T1T4T2revT3revT5 is an alternating trail. This trail is obtained from X∗ by means of two order reﬂections:
T1 T2 T3 T4 T5 →T1 T2 (T3 T4 )rev T5 = T1T2T4revT3revT5→T1(T2T4rev)revT3revT5 = T1T4T2revT3revT5.
Clearly, ind(X∗∗, Y ) > ind(X∗, Y ), a contradiction to the choice of X∗.
11.1.2 Properly Coloured Cycles
Using H¨aggkvist’s transformation, we see that the problem to check whether a c-edge-coloured graph has a properly coloured cycle is more general (even for c = 2) than the simple problem to verify whether a digraph contains a directed cycle (see Proposition 1.4.2 and the remark afterwards). In the rest of this subsection we consider the following:
Problem 11.1.5 Given a c-edge-coloured graph G, check whether G contains a properly coloured cycle.
Grossman and H¨aggkvist [335] were the ﬁrst to study this problem. They proved Theorem 11.1.6 below in the case c = 2. Yeo [743] showed Theorem 11.1.6 for every c ≥ 2.
Let G be a c-edge-coloured graph and let x, y be arbitrary distinct vertices of G. We will use the following additional notation:
χend(x, y) = {χend(P ) : P is a PC (x, y)-path}; χstart(x, y) = {χstart(P ) : P is a PC (x, y)-path}.
Theorem 11.1.6 (Yeo) [743] Let G be a c-edge-coloured graph, c ≥ 2, with no PC cycle. Then, G has a vertex z ∈ V (G) such that no connected component of G − z is joined to z with edges of more than one colour.
Proof: Let G = (V, E) be an edge-coloured graph with no PC cycle. Let p1 ∈ V be arbitrary. Set S = {p1} ∪ {s ∈ V − {p1} : |χend(p1, s)| = 1}. Now let P = p1p2 . . . pl (l ≥ 1) be a PC path of maximum length such that pl ∈ S, and set Tk = {t ∈ V − {pl} : k ∈ χstart(pl, t)} for every colour k ∈ {1, 2, . . . , c}. If l = 1, then let C∗ be the set of all colours in G, and if l ≥ 2 then let C∗ be the set of all colours in G except χend(P ). We will prove this theorem in three steps. (1) V (P ) ∩ Tk = ∅ for all k ∈ C∗.

598 11. Generalizations of Digraphs
If l = 1 then this statement is trivially true (since p ∈ Tk), so assume that l ≥ 2 and that the statement is false, which implies that there is a PC (pl, pi)-path R = plr1r2 . . . rm−1rmpi (m ≥ 0) with χstart(R) = k, i ∈ {1, 2, . . . , l −1} and V (R)∩V (P ) = {pi, pl}. Clearly χ(pipi+1) = χend(R), since otherwise we would obtain the PC cycle pipi+1 . . . plr1r2 . . . rm−1rmpi. This implies that Q = p1p2 . . . pirmrm−1 . . . r1pl is a PC (p1, pl)-path, with χend(Q) = χstart(R) = k = χend(P ). We have thus shown that {χend(Q), χend(P )} ⊆ χend(p1, pl), which implies that |χend(p1, pl)| ≥ 2. Therefore pl ∈/ S, contradicting the deﬁnition of P .
(2) If xy ∈ E, x ∈ Tk, y ∈/ Tk for some k ∈ C∗, then y = pl and χ(xy) = k.
First we claim that there is a PC (pl, x)-path R with χend(R) = χ(xy) and χstart(R) = k.
By the deﬁnition of Tk, there is a PC (pl, x)-path Q with χstart(Q) = k. If χend(Q) = χ(xy) we set R := Q, so assume that χend(Q) = χ(xy). By (1), P Q is a PC (p1, x)-path, which is longer than P . This implies that x ∈/ S, so |χend(p1, x)| ≥ 2. Thus there is a PC (p1, x)-path L with χend(L) = χ(xy). Let w ∈ (V (L) ∩ V (P ∪ Q)) − {x} be chosen so that V (L[w, x]) ∩ V (P ∪ Q) = {w, x}.
Suppose that w ∈ V (P ) − {pl}. Then QLrev[x, w] is a PC (pl, w)-path whose ﬁrst edge has colour k. This implies that w ∈ Tk, which contradicts (1). Hence w ∈ V (Q) and χstart(Q[w, x]) = χstart(L[w, x]), since otherwise Q[w, x]Lrev[x, w] is a PC cycle. This implies that R = Q[pl, w]L[w, x] is a PC (pl, x)-path with χstart(R) = k and χend(R) = χ(xy). Thus, the claim is proved.
Let R be as guaranteed by the claim. If y = pl, then Ry is a PC (pl, y)path with χstart(Ry) = k, which contradicts the assumption that y ∈/ Tk. Thus y = pl. If χ(xy) = k, then we obtain the PC cycle Ry, which is also a contradiction. Thus χ(xy) = k.
(3) No connected component of G − pl is joined to pl with edges of more than one colour.
Assume that the statement is false, and let plx and ply be a pair of distinct edges in G such that x and y belong to the same connected component of G − pl and χ(plx) = χ(ply). Assume without loss of generality that χ(plx) ∈ C∗ (otherwise interchange x and y). In G − pl there is a (not necessarily PC) path R = r1r2 . . . rm (m ≥ 2) between x = r1 and y = rm. If y ∈ Tχ(plx), then since pl ∈/ Tχ(plx), (2) implies that χ(ply) = χ(plx), which is a contradiction. Therefore y ∈/ Tχ(plx), which together with x ∈ Tχ(plx) implies that there exists an i (1 ≤ i ≤ m − 1) such that ri ∈ Tχ(plx) and ri+1 ∈/ Tχ(plx). This, however, contradicts (2), since riri+1 ∈ E but pl = ri+1.
One can see that Theorem 11.1.6 actually solves Problem 11.1.5. Indeed, if G has no vertex z such that all edges from z to any of the components of G−z are of the same colour, then Theorem 11.1.6 implies that G contains a PC

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 599
cycle. If G has such a vertex z, we may consider only G − z or its components (if G − z is disconnected), since no PC cycle can contain z. (See also Figure 11.2.) This leads to an obvious polynomial recursive algorithm (for a vertex x ∈ G, the components of G − x can be found in O(|V (G)| + |E(G)|) time).

v2 2

v4

1 2
v1 3

2 v3

3 2
3

1 3

3

v7

1 v5

v6

Figure 11.2 An edge-coloured graph with no PC cycle. To see this, it suﬃces to check that every vertex vi has only edges of the same colour to {v1, . . . , vi−1}.

Interesting corollaries of Theorem 11.1.6 are given as exercises (Exercises 11.7,11.8) in this chapter. Theorem 11.1.6 also implies:
Corollary 11.1.7 [100, 501, 534] There does not exist a bridgeless graph that contains a unique perfect matching.
Proof: Exercise 11.6.
Another possibility to solve Problem 11.1.5 is to use the following construction by Bang-Jensen and Gutin [61] illustrated in Figure 11.3. Here, we can actually ﬁnd a PC cycle subgraph with maximum number of vertices of a c-edge-coloured multigraph in polynomial time. This result is very useful, as a starting point, for a number of problems on PC cycles and paths.
Let G be an arbitrary c-edge-coloured multigraph (with colours 1,2,. . . ,c). For each vertex v of G we form a graph Hv with vertex set V (Hv) = {v1, . . . , v2c−2} and vi is adjacent to vj (i < j) in Hv if and only if either both i, j ∈ {1, . . . , c} or i ∈ {1, . . . , c}, j ∈ {c + 1, . . . , 2c − 2}. Construct a new graph R = R(G) from the disjoint union of the graphs Hv (v ∈ V (G)) as follows. An edge viuj is in R if and only if i = j = χG(vu). Let the edges of R of the form vivj where both i, j ∈ {1, . . . , c} have the weight 0 and all other edges have the weight 1. Then, a maximum weight perfect matching in R corresponds to a PC cycle subgraph F of G with maximum number of vertices. To see this, it suﬃces to observe that for any perfect matching of R and any Hv (corresponding to one vertex v of G), all but two of the vertices v1, v2, . . . , vc will be matched to vertices within Hv and with index at least c + 1. Hence if the edge between the two remaining vertices in Hv is not in the matching, then in G this corresponds to v being on a PC cycle and vice

600 11. Generalizations of Digraphs

xp 1

4

1y

2

2 q3

2
3 z

4 r

G0

Hr Hq

Hx Hy
Hz Hp

R(G0 )
Figure 11.3 The left ﬁgure shows a 4-edge-coloured graph G0. The right ﬁgure depicts the construction from [61] for G0. The big circle in every Hv has c = 4 vertices and the small one c−2 = 2 vertices. Only edges of R(G0) between the graphs Hv are shown. The bold edges are part of a maximum weight perfect matching of R(G0), they correspond to PC cycles pqrp and xyzx of G0.

versa. This construction implies the existence of a polynomial algorithm for ﬁnding F since a maximum weight perfect matching in a weighted graph on p vertices can be found in time O(p3) (cf. the book by Papadimitriou and Steiglitz [600, Chapter 11]).
Sometimes, one needs to ﬁnd a maximum PC 1-path-cycle subgraph of a c-edge-coloured multigraph G. We can easily transform the last problem to the maximum PC cycle subgraph problem as follows. Add an extra-vertex x to G and join x to every vertex of G by two edges of colour c + 1 and c + 2 respectively (new colours). Clearly, a maximum PC cycle subgraph of the new multigraph corresponds to a maximum PC 1-path-cycle subgraph of G. We formulate the obtained results as a theorem:
Theorem 11.1.8 [61] One can construct a maximum PC cycle subgraph and a maximum PC 1-path-cycle subgraph, respectively, in a c-edge-coloured multigraph G on n vertices in time O((cn)3).
Let G be a c-edge-coloured multigraph and let x be a vertex in G. Consider the following modiﬁcation R (G) of R(G): change the weight of the edges xixj, 1 ≤ i < j ≤ c from 0 to −∞. There is a perfect matching of ﬁnite weight in R (G) if and only if G has a PC cycle through x. This implies the next proposition.

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 601
Proposition 11.1.9 Given a c-edge-coloured multigraph G and a vertex x of G, one can verify whether G has a PC cycle through x in polynomial time.
This proposition is in sharp contrast with Proposition 11.1.1 (b).
11.1.3 Connectivity of Edge-Coloured Multigraphs
Strong connectivity plays a central role in the study of digraphs. Hence, it is natural to try to obtain some extensions of strong connectivity to edgecoloured graphs. Such extensions have been introduced and studied in the literature. In fact, there are two useful extensions of strong connectivity: one of them generalizes the usual deﬁnition of strong connectivity that refers to paths between pairs of vertices and the other extends the deﬁnition of cyclic connectivity in digraphs (see Exercise 1.30), which is equivalent to strong connectivity (for digraphs). However, for edge-coloured graphs these two generalizations are not equivalent any more.
In this subsection we study the above-mentioned generalizations of strong connectivity. We restrict ourselves to 2-edge-coloured multigraphs since we will later use connectivity results only for 2-edge-coloured graphs. Also this will make our arguments easier to follow. However, the reader should bear in mind that some of the results below could be generalized to c-edge-coloured multigraphs, c ≥ 2.
The following notion of colour-connectivity was introduced by Saad [648] (he used another name for this notion). Let G be a 2-edge-coloured multigraph. A pair of vertices x, y of G are colour-connected if there exist alternating (x, y)-paths P and Q such that χstart(P ) = χstart(Q) and χend(P ) = χend(Q). (Notice that P and Q are paths, not trails.) We deﬁne a vertex x to be colour-connected to itself. We say that G is colour-connected if every pair of vertices of G is colour-connected.
Clearly, every alternating cycle is a colour-connected graph. This indicates that colour-connectivity may be useful for solving alternating cycle problems. We can use colour-connectivity more eﬀectively if we know that this is an equivalence relation on the vertices of the graph under consideration. This leads us to the following deﬁnition: a 2-edge-coloured multigraph G is convenient if colour-connectivity is an equivalence relation on the vertices of G. Unfortunately, there are non-convenient multigraphs. Consider the graph H in Figure 11.4. It is easy to check that the vertices x and y are colour-connected to u, but x and y are not colour-connected in H.
The following proposition can be easily proved using only the deﬁnition of colour-connectivity. The following result due to Bang-Jensen and Gutin provides another way of checking colour-connectivity. Its proof is left to the reader as Exercise 11.9.

602 11. Generalizations of Digraphs

x
21 1z

u 2

2 y

1 v

Figure 11.4 A non-convenient 2-edge-coloured graph.

Proposition 11.1.10 [64] A pair of vertices, x1, x2, in a 2-edge-coloured multigraph G is colour-connected if and only if G has four (not necessarily distinct) alternating (x1, x2)-paths, P1, P2, Q1, Q2, such that χstart(Pi) = χend(Qi) = i, i = 1, 2.
Let G be a graph with matching M . A path P in G is augmenting with respect to M if, for any pair of adjacent edges in P , exactly one of them belongs to M , and the ﬁrst and last edges of P do not belong to M . Let G be a 2-edge-coloured multigraph. The following proposition by BangJensen and Gutin shows that we can check whether a pair of vertices of G are colour-connected in polynomial time.
Proposition 11.1.11 [64] Let G = (V, E) be a connected 2-edge-coloured multigraph and let x and y be distinct vertices of G. For each choice of i, j ∈ {1, 2} we can ﬁnd an alternating (x, y)-path P with χstart(P ) = i and χend(P ) = j in time O(|E|) (if one exists).
Proof: Let W = V − {x, y}. Create an uncoloured graph Gxy,ij in the following way: V (Gxy,ij) = {x, y} ∪ W 1 ∪ W 2, where W r = {zr : z ∈ W } for r = 1, 2, E(Gxy,ij) = {xzi : z ∈ W and χ(xz) = i} ∪ {zjy : z ∈ W and χ(zy) = j} ∪ {ukvk : u, v ∈ W and χ(uv) = k} ∪ {z1z2 : z ∈ W }.
The reader can easily verify that G has the desired path if and only if there exists an augmenting path in Gxy with respect to the matching M = {z1z2 : z ∈ W }. The latter can be checked, and a path constructed if one exists, in time O(|E|). From any augmenting path P in Gxy we can obtain the desired path in G, simply by contracting those edges of M which are on P.
Since colour-connectivity is not an equivalence relation on the vertices of every 2-edge-coloured multigraph, another notion of connectivity, cyclic connectivity, introduced by Bang-Jensen and Gutin [61], is sometimes more useful. Let P = {H1, . . . , Hp} be a set of subgraphs of a multigraph G. The intersection graph Ω(P) of P has the vertex set P and the edge set {HiHj : V (Hi) ∩ V (Hj) = ∅, 1 ≤ i < j ≤ p}. A pair, x, y, of vertices in a 2-edge-coloured multigraph H is cyclic connected if H has a collection of

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 603
alternating cycles P = {C1, . . . , Cp} such that x and y belong to some cycles in P and Ω(P) is a connected graph.
We formulate the following trivial but useful observation as a proposition.
Proposition 11.1.12 Cyclic connectivity is an equivalence relation on the vertices of a 2-edge-coloured multigraph.
This proposition allows us to consider cyclic connectivity components similar to strong connectivity components of digraphs.
The following theorem due to A. Yeo (private communication, 1998) shows that cyclic connectivity between a pair of vertices can be checked in polynomial time.
Theorem 11.1.13 For a pair x, y of vertices in a 2-edge-coloured multigraph H = (V, E), one can check whether x and y are cyclic connected in time O(|E|(|V | + |E|)).
Proof: By Proposition 11.1.11, in time O(|E|), one can check whether H has an alternating cycle through a ﬁxed edge e ∈ E. This implies that, in time O(|V ||E|), one can verify whether H has an alternating cycle through a ﬁxed vertex v ∈ V .
We now describe a polynomial algorithm to check whether x and y are cyclic connected. Our algorithm starts by initiating X := {x}. Then, we ﬁnd an alternating cycle through x; let X be the vertices except for x of such a cycle. If y ∈ X , then we are done. Otherwise, delete the vertices of X from H, set X := X and X := ∅. Then, for each edge e with one end-vertex in X and the other not in X ﬁnd an alternating cycle through the edge (if one exists). Now append all the vertices, except for those in X, in the cycles we have found to X and check whether y ∈ X . If y ∈/ X , then we continue as above. We proceed until either y ∈ X or there is no alternating cycle through any edge with one end-vertex in X and the other not in X. Clearly, if y ∈ X at some stage, then x and y are cyclic connected, otherwise they are not.
The total time required for the operation of deletion is O(|V ||E|). By the complexity bounds above and the fact that we may want to ﬁnd an alternating cycle through an edge at most once, the complexity of the described algorithm is O(|E|(|V | + |E|)).
The following theorem by Bang-Jensen and Gutin shows that cyclic connectivity implies colour-connectivity.
Theorem 11.1.14 [64] If a pair, x, y, of vertices in a 2-edge-coloured multigraph G is cyclic connected, then x and y are colour-connected.
Proof: If x and y belong to a common alternating cycle, then they are colour-connected. So, suppose that this is not the case.

604 11. Generalizations of Digraphs
Since x and y are cyclic connected, there is a collection P = {C1, . . . , Cp} of alternating cycles in G so that x ∈ V (C1), y ∈ V (Cp), and, for every i = 1, 2, . . . , p − 1 and every j = 1, 2, . . . , p, |i − j| > 1, V (Ci) ∩ V (Ci+1) = ∅, V (Ci) ∩ V (Cj) = ∅. (P corresponds to a (C1, Cp)-path in Ω(R), where R is the set of all alternating cycles in G.) We traverse P as follows. We start at the red (blue, respectively) edge of C1 incident to x and go along C1 to the ﬁrst vertex u that belongs to both C1 and C2. After meeting u, we go along C2 such that the path that we are forming will stay alternating. We repeat the procedure above when we meet the ﬁrst vertex that belongs to both C2 and C3 and so on. Clearly, we will eventually reach y. It follows that there is an (x, y)-path that starts from a red (blue, respectively) edge. By symmetry, we can construct an (x, y)-path that ends at a red (blue, respectively) edge. It follows from Proposition 11.1.10 that x and y are colour-connected.
11.1.4 Alternating Cycles in 2-Edge-Coloured Bipartite Multigraphs
The aim of this subsection is to describe two simple approaches which allow one to obtain results for bipartite 2-edge-coloured multigraphs using results on directed graphs.
Let D be a bipartite digraph with partite sets V1, V2. Deﬁne a 2-edgecoloured bipartite multigraph CM (D) in the following way: CM (D) has the same partite sets as D; every arc (v1, v2) from V1 to V2 is replaced with red edge v1v2 and every arc (v2, v1) from V2 to V1 is replaced with blue edge v1v2. Moreover, CM −1(G) = H if CM (H) = G. This simple correspondence which we call the BB-correspondence leads us to a number of easy and some more complex results which are described in this and the next subsections. (One example is the fact that the alternating Hamilton cycle problem for bipartite 2-edge-coloured graphs is N P-complete.) In many of our results on cycles we will exploit the following easily veriﬁable proposition (see Exercise 11.10).
Proposition 11.1.15 The following three claims are equivalent for a bipartite digraph D:
(a) D is strongly connected. (b) CM (D) is colour-connected. (c) CM (D) is cyclic connected.
The following correspondence which we call the BD-correspondence is less universal but may allow one to exploit the wider area of results on arbitrary digraphs. The idea of the BD-correspondence can be traced back to H¨aggkvist [386]. Let G be a 2-edge-coloured bipartite multigraph with partite sets V1 and V2 so that |V1| = |V2| = m and let G be the red subgraph of G. Suppose that G has a perfect matching v11v21, v12v22, . . . , v1mv2m, where vij ∈ Vi (i = 1, 2 and 1 ≤ j ≤ m). Construct a digraph D = D(G) as follows:

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 605

v11 v12 v13 v14

1 2 2
1
1 2
1
2 2
1

2

v21 v22 v23 v24

23 14

G D(G)
Figure 11.5 An illustration of BD-correspondence.

V (D) = {1, 2, . . . , m} and, for 1 ≤ i = j ≤ m, (i, j) is an arc of D if and only if v1iv2j ∈ E(G) − E(G ) (see Figure 11.5). It is easy to see that, if D has a Hamilton cycle, then G has a Hamilton alternating cycle including all the edges of the perfect matching. Using the BD-correspondence and Corollary 5.6.3 Hilton [429] proved the following:

Theorem 11.1.16 Let G be a 2-edge-coloured r-regular bipartite graph such

that each of the partite sets of G has m vertices and let G be the blue subgraph

of

G.

If

r

≥

m 2

+1

and

G

is

s-regular

such

that

m 2

≤

s

≤ r − 1,

then

G

has

an alternating Hamilton cycle.

Proof: Exercise 11.11.
Although the last theorem is the best possible (consider two disjoint copies of Km/2,m/2 with perfect matchings in both copies in red and all other edges in blue), Hilton [429] believes that the bound on r could be lowered considerably if we assume that G is connected. It was noticed by Chetwynd and Hilton [155] that Theorem 11.1.16 follows easily from the following result by H¨aggkvist [386] (using the BB-correspondence).

Theorem 11.1.17 Let G be a bipartite graph so that each of the partite sets contains m vertices. If d(v) + d(w) ≥ m + 1 for every pair v, w of vertices from diﬀerent partite sets, then every perfect matching of G lies in a Hamilton cycle of G.

The BB-correspondence is very useful when we consider 2-edge-coloured complete bipartite multigraphs. In this case we can use the rich theory of semicomplete bipartite digraphs (discussed in Chapters 5, 6). By the BBcorrespondence, Proposition 11.1.15 and Theorem 5.7.4, we obtain the following:
Theorem 11.1.18 A 2-edge-coloured complete bipartite multigraph contains an alternating Hamilton cycle if and only if it is colour-connected and has an

606 11. Generalizations of Digraphs

alternating cycle factor. There is an algorithm for constructing an alternat-
ing Hamilton cycle in a colour-connected 2-edge-coloured complete bipartite multigraph on n vertices in time O(n2.5) (if one exists).

Another condition for a 2-edge-coloured complete multigraph to contain an alternating Hamilton cycle was obtained by Chetwynd and Hilton [155]:

Theorem 11.1.19 A 2-edge-coloured complete bipartite graph B with partite sets U and W (|U | = |W | = n) has an alternating Hamilton cycle if and only if B has an alternating cycle factor and, for every k = 2, . . . , n − 1 and every pair of k-sets X and Y such that X ⊂ U , Y ⊂ W , we have

min{ di(x) + d3−i(y) : i = 1, 2} > k2.

x∈X

y∈Y

We point out that the original proof of Theorem 11.1.19 is quite similar to that of Theorem 5.7.4. (Another proof of Theorem 11.1.19 is given by Bang-Jensen and Gutin [61]; see also Exercise 11.14.) To see that the set of inequalities of this theorem is necessary, observe that the number of edges between X and Y is precisely k2. If B has a Hamilton cycle C, then C contains an edge e1 from U − X to Y as well as an edge e2 from X to W − Y such that χ(e1) = χ(e2). Precisely one of these edges contributes to the sum in the corresponding inequality.
Using the corresponding result on longest cycles in semicomplete bipartite digraphs (Theorem 5.7.6), one can obtain the following:
Theorem 11.1.20 The length of the longest alternating cycle in a colourconnected 2-edge-coloured complete bipartite multigraph G is equal to the number of vertices in maximum alternating cycle subgraph of G. There is an algorithm for ﬁnding a longest alternating cycle in a colour-connected 2edge-coloured complete bipartite multigraph on n vertices in time O(n3).
Let Br and Br are 2-edge-coloured complete bipartite graphs with the same partite sets {v1, . . . , v2r} and {w1, . . . , w2r}. The edge set of the red (blue) subgraph of Br (Br) consists of
{viwj : 1 ≤ i, j ≤ r} ∪ {viwj : r + 1 ≤ i, j ≤ 2r}.
The following result is a characterization of vertex-alternating-pancyclic 2edge-coloured complete bipartite multigraphs that can be readily obtained from the corresponding characterization for semicomplete bipartite digraphs in Theorem 6.13.1.
Theorem 11.1.21 A 2-edge-coloured complete bipartite multigraph is vertexalternating-pancyclic if and only if it has an alternating Hamilton cycle and is not colour-isomorphic to one of the graphs Br, Br (r = 2, 3, . . .).

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 607
Since none of the graphs Br, Br (r = 2, 3, . . .) is alternating-pancyclic, we obtain the following:
Corollary 11.1.22 Let G be a 2-edge-coloured complete bipartite multigraph. Then G is is alternating-pancyclic if and only if it has an alternating Hamilton cycle and is not colour-isomorphic to one of the graphs Br, Br (r = 2, 3, . . .).
This result was obtained by Das [182]. The equivalent (via the BBcorrespondence) claim was proved by Beineke and Little [99] for bipartite tournaments. (Both results were published in the same year!)
To save the space we will not give any other ‘BB-translations’ of results obtained for cycles and paths in semicomplete bipartite digraphs (see Chapters 5, 6) into the alternating cycles and paths language.
11.1.5 Longest Alternating Paths and Cycles in 2-Edge-Coloured Complete Multigraphs
Since the longest alternating path problem for 2-edge-coloured complete multigraphs is much simpler than the longest alternating cycle problem, we start our study from the former. Bang-Jensen and Gutin characterized 2-edgecoloured complete multigraphs which have an alternating Hamilton path (see Corollary 11.1.24).
Theorem 11.1.23 [61] Let G be a 2-edge-coloured complete multigraph with n vertices. Then for any 1-path-cycle subgraph F of G there is an alternating path P of G satisfying V (P ) = V (F) (if F is a maximum alternating 1-pathcycle subgraph of G, then P is a longest alternating path in G); there exists an O(n3) algorithm for ﬁnding a longest alternating path in G.
Proof: Obviously, F is a 1-path-cycle factor of a complete bipartite subgraph B of G. The factor F corresponds to a directed path together with a collection of directed cycles, all vertex disjoint, F of CM −1(B). Therefore, by Theorem 5.7.1 restricted to semicomplete bipartite digraphs, there is a path P in CM −1(B) such that V (P ) = V (F ). This path corresponds to an alternating path P of B so that V (P ) = V (P ). Clearly, P is an alternating path in G and, moreover, V (P ) = V (F).
The complexity result easily follows from the construction above, and Theorems 5.7.1 and 11.1.8.
Corollary 11.1.24 [61] A 2-edge-coloured complete multigraph has an alternating Hamilton path if and only if it contains an alternating 1-path-cycle factor.
It is not diﬃcult to prove Corollary 11.1.24 directly (see Exercise 11.17). Clearly, Corollary 11.1.24 implies immediately the ﬁrst part of Theorem

608 11. Generalizations of Digraphs
11.1.23. Thus, the ﬁrst part of Theorem 11.1.23 and Corollary 11.1.24 are in fact equivalent.
In 1968, solving a problem by Erd˝os, Bankfalvi and Bankfalvi [91] gave the following characterization of 2-edge-coloured complete graphs which have an alternating Hamilton cycle.
Theorem 11.1.25 (Bankfalvi and Bankfalvi) [91] A 2-edge-coloured complete graph G of order 2n has an alternating Hamilton cycle if and only if it has an alternating cycle factor and, for every k = 2, . . . , n − 1 and every pair of disjoint k-subsets X and Y of V (G), x∈X d1(x) + y∈Y d2(y) > k2.
It is easy to see that the conditions of this theorem are necessary (Exercise 11.13). Saad [648] proved the following more general result, using the notion of colour-connectivity rather than degree conditions. We provide a proof of Theorem 11.1.26 in the end of this subsection after some discussion of implications and generalizations of Theorem 11.1.26.
Theorem 11.1.26 (Saad) [648] The length of a longest alternating cycle in a colour-connected 2-edge-coloured complete multigraph G is equal to the number of vertices in a maximum alternating cycle subgraph of G.
Corollary 11.1.27 [648] A 2-edge-coloured complete multigraph G has an alternating Hamilton cycle if and only if G is colour-connected and contains an alternating cycle factor.
Corollary 11.1.27 and the fact that colour-connectivity can be checked in polynomial time (see Propositions 11.1.10 and 11.1.11) shows that the alternating hamiltonian cycle problem for 2-edge-coloured complete multigraphs is polynomial time solvable. However, one cannot deduce the analogous result for the longest alternating cycle problem (for 2-edge-coloured complete multigraphs) from Theorems 11.1.26 and 11.1.8 and Propositions 11.1.10 and 11.1.11, only. The reason is that we do not know how to obtain all maximal colour-connected subgraphs of an arbitrary 2-edge-coloured multigraph in polynomial time. Fortunately, for 2-edge-coloured complete multigraphs G, colour-connectivity is an equivalence relation on the set of vertices (this was ﬁrst proved by Saad [648] and also follows from Proposition 11.1.12 and the following deeper theorem by Bang-Jensen and Gutin [64]):
Theorem 11.1.28 [64] A 2-edge-coloured complete multigraph G is colourconnected if and only if G is cyclic connected.
Proof: Exercise 11.15.
Thus, we can use Propositions 11.1.10 and 11.1.11 to obtain (vertexdisjoint) colour-connected components of G. Hence, the longest alternating

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 609
cycle problem for 2-edge-coloured complete multigraphs is also polynomial time solvable. In [64], Bang-Jensen and Gutin showed the following more general result. (Clearly, the case f (x) = 1 for every x ∈ V (G) corresponds to the longest alternating cycle problem.)
Theorem 11.1.29 [64] The following problem is polynomial time solvable. Given a function f from V (G), the vertex set of a 2-edge-coloured complete multigraph G, to Z0, ﬁnd a maximum size alternating closed trail H in G such that d1,H (x) = d2,H (x) ≤ f (x) for every x ∈ V (G).
Das [182] and later H¨aggkvist and Manoussakis [389] observed that the alternating hamiltonian cycle problem for 2-edge-coloured complete bipartite multigraphs can be reduced to the same problem for 2-edge-coloured complete multigraphs using the following simple construction. Consider a 2-edge-coloured complete bipartite multigraph L with bipartition (X, Y ). Add to L the edges {x x , y y : x , x ∈ X, y , y ∈ Y } and set χ(XX) = 1, χ(Y Y ) = 2. Let K be the 2-edge-coloured complete multigraph obtained in this way. It is not diﬃcult to verify that K has no alternating cycle containing any of the edges from XX ∪ Y Y . Hence, K contains an alternating hamiltonian cycle if and only if L has one. Moreover, it is easy to check that K is colour-connected if and only if L is colour-connected. In the following, we will call the construction above the DHM-construction. The DHM-construction shows that (the non-algorithmic part of) Theorem 11.1.18 follows immediately from Corollary 11.1.27. This illustrates the fact that many problems on alternating cycles for 2-edge-coloured complete multigraphs are more general than those for 2-edge-coloured complete bipartite multigraphs.
Consider the following Hamiltonian 2-edge-coloured complete graphs which are not even-pancyclic (see the proof of this fact below). Let r ≥ 2 be an integer. Each of the graphs H(r), H (r), H (r) has a vertex set A ∪ B ∪ C ∪ D so that the sets A, B, C, D are pairwise disjoint and each of these sets contains r vertices. Moreover, the edge set of the red subgraph of H(r) consists of AA ∪ CC ∪ AC ∪ AD ∪ CB. The edge set of the red (blue) subgraph of H (r) (H (r)) consists of AC ∪ CB ∪ BD ∪ DA. By the DHM-construction, the following result by Bang-Jensen and Gutin [61] is a generalization of Theorem 11.1.21 (the proof is left as Exercise 11.16).
Theorem 11.1.30 Let G be a 2-edge-coloured complete multigraph. Then G is vertex-alternating-pancyclic if and only if G has an alternating Hamilton cycle and is not colour-isomorphic to the graphs H(r), H (r), H (r) for r = 2, 3, . . ..
Since the graphs H(r), H (r), H (r) are not alternating-pancyclic for r = 2, 3, . . ., we obtain the following characterization ﬁrst proved by Das [182].

610 11. Generalizations of Digraphs
Corollary 11.1.31 A 2-edge-coloured complete multigraph G is alternatingpancyclic if and only if G has an alternating Hamilton cycle and is not colourisomorphic to the graphs H(r), H (r), H (r) for r = 2, 3, . . ..
The rest of this subsection is devoted to the proof of Theorem 11.1.26 adapted from Bang-Jensen and Gutin [64]. In the statements and the proofs of the rest of this subsection, we use the following notation: G is a 2-edgecoloured complete multigraph with n vertices, Fp = C1 ∪ . . . ∪ Cp is an alternating cycle subgraph in G consisting of p cycles, C1, . . . , Cp; for each i = 1, 2, . . . , p, Ci = v1i v2i . . . v2ik(i)v1i such that χ(v1i v2i ) = 1, χ(v2ik(i)v1i ) = 2, and Xi = {v1i , v3i , . . . , v2ik(i)−1}, Yi = V (Ci) − Xi. We write Cj→Ci to denote that
χ(XiXi) = χ(XiV (Cj)), χ(YiYi) = χ(YiV (Cj)) and χ(XiXi) = χ(YiYi).
We point out that the meaning of Cj→Ci is that, for any choice of vertices x ∈ V (Cj) and y ∈ V (Ci), there exist alternating (x, y)-paths P and P such that the colours of the edges incident with x in P and P are distinct, but for every such choice of paths P and P , the colours of the edges in P and P incident with y are equal. Hence, if Cj→Ci, then the multigraph induced by the vertices of these two cycles is not colour-connected. (See Figure 11.6, where C2→C3.)
Lemma 11.1.32 Suppose G has an alternating cycle factor F2 = C1 ∪ C2. Then, G has an alternating Hamilton cycle if and only if neither C1→C2 nor C2→C1. Given a pair C1 and C2 of cycles of G, so that neither C1→C2 nor C2→C1, an alternating Hamilton cycle of G can be found in time O(|V (C1)||V (C2)|).
Proof: It is easy to see that, if either C1→C2 or C2→C1, then G is not colourconnected. Hence, G has no alternating Hamilton cycle. Assume that neither C1→C2 nor C2→C1, but G has no alternating Hamilton cycle. Consider the bipartite digraph T with partite sets V1 = X1 ∪ X2 and V2 = Y1 ∪ Y2 obtained from G in the following way: delete all edges between vertices both on C1 or on C2 except those edges that are on the cycles and delete all edges between vertices both in the same partite set. Now make the following orientations of the edges in the resulting bipartite multigraph. For i = 1, 2 and any pair v1 ∈ V1, v2 ∈ V2, if there is an edge e between v1 and v2, then delete the colour of the edge e and orient it as the arc (vi, v3−i) if and only if χ(e) = i. Obviously, T has a spanning cycle subgraph consisting of two directed cycles Z1, Z2 which are orientations of the cycles C1, C2, respectively. Similarly we see that every directed cycle in T corresponds to an alternating cycle in G. Thus, since G has no alternating Hamilton cycle, T is not hamiltonian. By Exercise 5.34, this means that T is not strong, i.e. all arcs between Z1 and Z2 have the same orientation. Without loss of generality we may assume that

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 611

all these arcs are oriented from Z1 to Z2. Then, by the deﬁnition of T , we obtain that χ(X1Y2) = 1, χ(Y1X2) = 2.
Consider next the bipartite digraph T with partite sets V1 = X1 ∪ Y2 and V2 = Y1 ∪ X2. The rest of the deﬁnition of T coincides with that of T . T also contains a spanning cycle subgraph consisting of orientations of C1 and C2. Since G has no alternating Hamilton cycle, T is not hamiltonian. By Corollary 5.34, this means that T is not strongly connected. This leads us to the conclusion that either χ(X1X2) = 1 and χ(Y1Y2) = 2 or χ(X1X2) = 2 and χ(Y1Y2) = 1. The ﬁrst possibility together with the conclusion of the previous paragraph implies χ(X1V (C2)) = 1, χ(Y1V (C2)) = 2. The second gives χ(X2V (C1)) = 2, χ(Y2V (C1)) = 1. Without loss of generality we may assume that χ(X1V (C2)) = 1, χ(Y1V (C2)) = 2.
Suppose that, for some i = j, there exists an edge v21i+1v21j+1 of colour 2. Then G has the alternating Hamilton cycle
v12v21j v21j−1 . . . v21i+1v21j+1 . . . v21k(1)v11 . . . v21iv22k(2) . . . v12.
Hence, χ(X1X1) = 1. Analogously, χ(Y1Y1) = 2. Now C2 → C1 and we have obtained a contradiction.
The complexity bound follows from that of Corollary 5.34.
An alternating cycle subgraph R of G is irreducible if there is no other alternating cycle subgraph Q in G so that V (R) = V (Q) and Q has fewer cycles than R. (See Figure 11.6.)

11

1 2 21

1 2

2 1

2

1 21

2

1
1 21
22 12

1 2
1 2
1

1 2

2

22 1

12 12

2

11

1

22

C1 C2

C3 C4

Figure 11.6 An irreducible PC cycle factor. The number s ∈ {1, 2} on the edge
emanating to the left from a vertex on Ci, 2 ≤ i ≤ 2 indicates that the colour of all edges from that vertex to all the vertices of Cj with j < i is s. The vertices are partitioned into two equal sized sets indicated by black and white vertices. The
number r ∈ {1, 2} on an edge between two black (white vertices) on the same cycle
indicates that all edges between black (white) vertices on that cycle have the same
colour r.

612 11. Generalizations of Digraphs
Theorem 11.1.33 Let G have an alternating cycle factor F consisting of p ≥ 2 cycles. F is an irreducible alternating cycle factor of G if and only if we can label the cycles in F as C1, . . . , Cp, such that, with the notation introduced above, for every 1 ≤ i < j ≤ p, χ(XjV (Ci)) = 1, χ(YjV (Ci)) = 2, χ(XjXj) = 1, χ(YjYj) = 2. An irreducible alternating cycle factor of G (if any) can be found in time O(n2.5).
Proof: If the edges have the structure described above, then Ci→Cj for all i < j and each of the cycles in F form a colour-connected component and F is clearly irreducible.
To prove the other direction we let F be an irreducible alternating cycle factor of G and let p ≥ 2 be the number of cycles in F. By Lemma 11.1.32, no two cycles in F induce a colour-connected subgraph. Thus, for all 1 ≤ i < j ≤ p, either Ci→Cj or Cj→Ci. Therefore, the digraph with vertex set {C1, . . . , Cp} and arc set {(Ci, Cj) : Ci→Cj; 1 ≤ i = j ≤ p} is a tournament. So, if there exist cycles C1, C2, . . . , Ck from F such that C1→C2→ . . . →Ck→C1, then there also exists such a collection for k = 3 and the reader can easily ﬁnd an alternating cycle covering precisely the vertices of those cycles, contradicting the irreducibility of F. Hence we can assume that there is no such cycle. Thus there is a unique way to label the cycles in F as C1, C2, . . . , Cp, so that Ci→Cj if and only if i < j. If there are three cycles Ci, Cj and Ck from F such that Ci→Cj, Ck and Cj→Ck, but χ(XkV (Ci)) = χ(XkV (Cj)), then we can easily ﬁnd an alternating cycle covering precisely the vertices of Ci, Cj and Ck, contradicting the irreducibility of F . Hence we may assume that for all 1 ≤ i < j ≤ p, χ(XjV (Ci)) = 1 and χ(YjV (Ci)) = 2. The fact that χ(XjXj) = 1, χ(YjYj) = 2 follows from the proof of Lemma 11.1.32 and the minimality of F.
Using the proof of Lemma 11.1.32, the proof above can be converted into an O(n2)-algorithm for transforming any alternating cycle factor into an alternating hamiltonian cycle or an irreducible alternating cycle factor. Now the complexity bound of the lemma follows from a simple fact that one can ﬁnd a spanning alternating cycle subgraph (if any) in a 2-edge-coloured multigraph L in time O(|V (L)|2.5). Indeed, ﬁnd maximum matchings in the red and blue subgraphs of L. Obviously, L has a spanning alternating cycle subgraph if and only if both subgraphs have perfect matchings. The complexity bound follows from that of the algorithm for ﬁnding a maximum matching in an arbitrary graph described in the book [231] by Even.
We will make use of the following simple lemma.
Lemma 11.1.34 Let P = x1x2 . . . xk be an alternating path and C an alternating cycle disjoint from P in G. Suppose χ(x1V (C)) = i = χ(x1x2) where i = 1 or i = 2 and that G contains an edge xkz, where z ∈ V (C) and χ(xk−1xk) = χ(xkz). If χ(xkz) = i, then G contains a cycle C with V (C ) = V (P ) ∪ V (C). Otherwise G has a cycle C with V (C ) = V (P ) ∪ V (C) − w, where w is the neighbour of z on C for which χ(wz) = 3 − i.

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 613
Proof: Exercise 11.18.
Proof of Theorem 11.1.26: Let F = C1 ∪ . . . ∪ Cp be an alternating cycle subgraph of G and let F = C1 ∪ . . . ∪ Cp−1. We will show by induction on p that G has an alternating cycle C∗ having at least the same number of vertices as F. If p = 1, we are done. So, we may suppose that p ≥ 2. By Theorem 11.1.33, we may assume, using the (obvious) induction hypothesis, that, for all 1 ≤ i < j ≤ p,
χ(XjV (Ci)) = 1, χ(YjV (Ci)) = 2, χ(XjXj) = 1, χ(YjYj) = 2. (11.2)
Since G is colour-connected there is an alternating (x, y)-path R of minimum length such that x ∈ V (Cp), {y} = V (R) ∩ V (F ) and χ(xx ) = χ(xV (F )), where x is the successor of x in R. We prove that (V (R) − {x, y}) ∩ V (F) = ∅. Assume this is not so, that is, R contains at least two vertices from Cp. Consider a vertex z in (V (R) ∩ V (Cp)) − x. Let z be the successor of z in R. Clearly, χ(zz ) = χ(zV (F )) since the (z, y)-part of R is shorter than R. On the other hand, by (11.2) x is not in Cp and by the minimality of R, χ(x V (F )) = χ(xx ). Then, the alternating path Qv, where Q is the reverse of the (x , z)-part of R and v is a vertex in Cp−1, is shorter than R; a contradiction.
Now consider an alternating (x, y)-path R with the properties above including (V (R)−{x, y})∩V (F) = ∅. We may assume without loss of generality that x = v1p and χ(xV (F )) = χ(v2pv1p). Choose t such that y ∈ V (Ct). Apply Lemma 11.1.34 to the path
v2pk(p)v2pk(p)−1 . . . v2pR ,
where R is the path R without y, and the cycle Ct. We get a new alternating cycle C , with V (C ) ⊂ V (R) ∪ V (Ct) ∪ V (Cp), covering at least as many vertices as Ct and Cp together, so by replacing Ct and Cp by C in F , we obtain a new alternating cycle subgraph with fewer cycles which covers at least as many vertices as F and the existence of C∗ follows by induction.
The proof above can be converted into an O(n3)-algorithm for ﬁnding a longest cycle in G, provided we are given a maximum cycle subgraph as input.
11.1.6 Properly Coloured Hamiltonian Paths in c-Edge-Coloured Complete Graphs, c ≥ 3
Let Knc denote a c-edge-coloured complete graph with n vertices. The properly coloured (PC) Hamilton path problem for c-edge-coloured complete graphs seems to be much more diﬃcult in the case c ≥ 3, than in the case c = 2 treated above.

614 11. Generalizations of Digraphs

Problem 11.1.35 [61] Determine the complexity of deciding whether a cedge-coloured complete graph, c ≥ 3, has a PC Hamilton path.

There is a polynomial time algorithm for Problem 11.1.35 if the following generalization of Corollary 11.1.24 is true.
Conjecture 11.1.36 [61] A Knc (c ≥ 2) has a PC Hamilton path if and only if Knc contains a PC spanning 1-path-cycle subgraph.

We know that the claim of this conjecture is true when c = 2 (see Corollary 11.1.24). The following weaker result is proved by Bang-Jensen, Gutin and Yeo [73].

Theorem 11.1.37 If a Knc (c ≥ 2) contains a PC spanning cycle subgraph, then it has a PC Hamilton path.

Proof: Let C1, C2, . . . , Ct be the cycles of a PC spanning cycle subgraph F of Knc . Let F be chosen so that, among all PC spanning cycle subgraphs of Knc , the number of cycles t is minimum. We say that Ci edge-dominates Cj (i = j) if, for every edge xy of Ci, there exists an edge between x and Cj and an edge between y and Cj whose colours diﬀer from the colour of xy. Construct a digraph D as follows. The vertices of D are 1, 2, . . . , t and an arc

(i, j) is in D (1 ≤ i = j ≤ t) if and only if Ci edge-dominates Cj. First we show that D is semicomplete. Suppose this is not so, i.e. there

exist vertices i and j which are not adjacent. This means that neither Ci edgedominates Cj nor Cj edge-dominates Ci. Thus Ci has an edge xy such that χ(xV (Cj)) = χ(xy) and Cj has an edge uv such that χ(uV (Ci)) = χ(uv). It follows that χ(xy) = χ(xu) = χ(uv) = χ(xv) = χ(uy). Therefore, we can

merge the two cycles to obtain a new properly coloured one as follows: delete

xy and uv, and append xv and yu. However, this is a contradiction to t being

minimum. Thus, D is indeed semicomplete.

Since D is semicomplete, it follows from Theorem 1.4.5 that D has a

Hamilton directed path: i1i2 . . . it. Without loss of generality we may assume

that ik = k for every k = 1, 2, . . . , t. In other words, Ci edge-dominates Ci+1

for every 1 ≤ i ≤ t − 1. Let Ci = z1i z2i . . . zmi i z1i (i = 1, 2, . . . , t). Since C1 edge-dominates C2, without loss of generality, we may assume the labellings

of the vertices edges z12z22 and

in C1 and C2 are z22z32 have diﬀerent

such that χ(zm1 1 z11) = χ(z11z22). Since the colours, without loss of generality we may

assume that χ(z22z32) = χ(z11z22). Analogously, for every i = 1, 2, . . . , t − 1, we

may assume that χ(zmi i z1i ) = χ(z1i z2i+1) = χ(z2i+1z3i+1). Now we obtain the

following PC Hamilton path:

z21z31 . . . zm1 1 z11z22z32 . . . zm2 2 z12 . . . z2t z3t . . . zmt t z1t .

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 615

The above theorem can be considered as a suﬃcient condition for an edgecoloured complete graph to have a PC Hamilton path. We state two other suﬃcient conditions. The ﬁrst theorem is by Barr and has a simple inductive proof (Exercise 11.19). The proof of the second theorem, due to Manoussakis, Spyratos, Tuza and Voigt, is much more involved; it is omitted.

Theorem 11.1.38 [94] Every Knc without monochromatic triangles has a PC Hamilton path.

Theorem 11.1.39 such that, for every

[549] If n ≥ n0,

c

≥

1 2

each

(n−3)(n−4)+2, then there is an Knc has a PC Hamilton path.

n0

=

n0(c)

11.1.7 Properly Coloured Hamiltonian Cycles in c-Edge-Coloured Complete Graphs, c ≥ 3
Benkouar, Manoussakis, Paschos and Saad posed the following problem which is analogous to Problem 11.1.35:
Problem 11.1.40 [103] Determine the complexity of the PC Hamilton cycle problem for c-edge-coloured complete graphs when c ≥ 3.

Another interesting problem is to ﬁnd a non-trivial characterization of c-edge-coloured (c ≥ 3) complete graphs containing PC hamiltonian cycles. In this subsection, we consider results from [103] related to Problem 11.1.40. We give an example showing that the obvious analogue of Corollary 11.1.27 is not valid for c ≥ 3. Later we present some conditions which guarantee the existence of a PC Hamilton cycle in a c-edge-coloured complete graph.
A strictly alternating cycle in Knc is a cycle of length pc (p is an integer) so that the sequence of colours (12. . . c) is repeated p times. Benkouar, Manoussakis, Paschos and Saad [103] proved the following:
Theorem 11.1.41 [103] Let c ≥ 3. The problem of determining the existence of a strictly alternating Hamilton cycle in Knc is N P-complete.
Proof: Exercise 11.20.
The following result shows that, if we relax the property of colours to be at strict places, but maintain the number of their appearances in a Hamilton cycle, then we still have an N P-complete problem.
Theorem 11.1.42 [103] Given positive integers p and c ≥ 3, the problem of determining the existence of a PC Hamilton cycle C of Kccp so that each colour appears p times in C is N P-complete.
Proof: Exercise 11.21.
The following example shows that the obvious analogue of Corollary 11.1.27 is not valid for c ≥ 3. The graph G6 is a 3-edge-coloured complete

616 11. Generalizations of Digraphs

graph on vertices 1,2,3,4,5,6. All the edges of G6 has colour 1 except for the following: the triangles 2342 and 2562 have colours 2 and 3, respectively, χ(36) = χ(45) = 2, χ(12) = 3. It is easy to check that G6 is colour-connected and has the alternating spanning cycle subgraph 1231 ∪ 4564, but G6 contains no PC Hamilton cycle (Exercise 11.22). Note that alternating paths showing that G6 is colour-connected may be chosen so that for each choice of vertices x and y the two paths P and P described in the deﬁnition of colourconnectivity are internally disjoint. Hence it will not be enough to change this deﬁnition to require that P and P are disjoint, a condition which is obviously necessary for the existence of a PC Hamilton cycle. For every even n, using the deﬁnition of G6, one can easily construct a 3-edge-coloured complete graph on n ≥ 8 vertices which is colour-connected and has a PC spanning cycle subgraph, but contains no PC Hamilton cycle (see Exercise 11.23).
We start our consideration of suﬃcient conditions for an edge-coloured complete graph to contain a PC Hamilton cycle with the following simple result by Manoussakis, Spyratos, Tuza and Voigt:

Proposition

11.1.43

[549]

If

c≥

1 2

(n

−

1)(n

−

2)

+

2,

then

every

Knc

has

a

PC Hamilton cycle.

Proof: Exercise 11.24.

To see that the bound of Proposition 11.1.43 is sharp consider the follow-

ing Knc . Assign colour 1 to all edges incident to a ﬁxed vertex x ∈ V (Knc ). Each of the remaining edges has a distinct colour not equal 1. Clearly, such

Knc

has

no

PC

Hamilton

cycle

and

c

=

1 2

(n

−

1)(n

−

2)

+

1.

In [184] Daykin posed the following interesting problem. Find a positive

constant d such that every Knc with ∆mon(Knc ) ≤ dn has a PC Hamilton cycle. This problem was independently solved by Bollob´as and Erd˝os [121],

and Chen and Daykin [145]. In [121] (in [145], respectively), it was proved

that, if 69∆mon(Knc ) < n (17∆mon(Knc ) ≤ n, respectively), then Knc has a PC Hamilton cycle. Shearer [668] improved the last result showing that

if 7∆mon(Knc ) < n, then Knc has a PC Hamilton cycle. So far, the best asymptotic estimate was obtained by Alon and Gutin [11].

Theorem 11.1.44 [11] For every > 0 there exists an n0 = n0( ) so that for each n > n0, every Knc satisfying

∆mon(Knc )

≤

(1

−

√1 2

−

)n

( = (0.2928 . . . − )n )

(11.3)

contains a PC Hamilton cycle.

However, Theorem 11.1.44 seems to be far from the best possible, at least, if the following conjecture by Bollob´as and Erd˝os [121] is true.

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 617

Conjecture 11.1.45 Every Knc with ∆mon(Knc ) ≤ n/2 − 1 has a PC Hamilton cycle.

The rest of this subsection is devoted to a probabilistic1 proof of Theorem
11.1.44. For simplicity we assume ﬁrst that n = 2m is even, and remark at
the end of the subsection how to modify the argument for the case of odd n. Fix a positive , and let K = Knc be an edge-coloured complete graph on n = 2m vertices satisfying (11.3). We ﬁrst prove the following lemma.

Lemma 11.1.46 For all suﬃciently large m, K contains a spanning edge coloured complete bipartite graph Kmc ,m satisfying

∆mon(Kmc ,m)

≤

(1

−

√1 2

−

2 )m.

(11.4)

Proof: Let uivi (1 ≤ i ≤ m) be an arbitrary perfect matching in K and choose a random partition of the set of vertices of K into two disjoint subsets
A and B of cardinality m each by choosing, for each i, 1 ≤ i ≤ m, randomly
and independently, one element of the set {ui, vi} to be a member of A and the other to be a member of B. Fix a vertex w of K and a colour, say red, that
appears in the edge-colouring of K. The number of neighbours a of w in A so
that the edge wa is red can be written as a sum of m independent indicator
random variables x1, . . . , xm, where xi is the number of red neighbours of w in A among ui, vi. Thus each xi is either 1 with probability one (in case both edges wui, wvi are red) or 0 with probability 1 (in case none of the edges wui, wvi is red) or 1 with probability 1/2 (in case exactly one of these two edges is red). It follows that, if the total number of red edges incident with w
is r then the probability that w is adjacent with more than (r + s)/2 vertices
in A by red edges is equal to the probability that more than (q + s)/2 ﬂips
among q independent ﬂips of a fair coin give ‘heads’, where q is the number of
nonconstant indicator random variables among the xi’s. This can be bounded by the well known inequality of Chernoﬀ (cf. e.g. [14, Theorem A.4, page 235]) by e−2s2/q < e−2s2/m. Since the same argument applies to the number of ‘red’ neighbours of w in B, and since there are less than 8m3 choices for a vertex w,
a colour in the given colouring of K and a partite set (A or B), we conclude
that the probability that there exists a vertex with more than

(1

−

√1 2

−

2 )m

neighbours of the same colour in either A or B is at most

8m3e−2 2m,
1 Probabilistic methods have proved to be very powerful for various problems (see e.g. the book [14] by Alon and Spencer).

618 11. Generalizations of Digraphs

which is (much) smaller than 1 for all suﬃciently large m. Therefore, there exists a choice for A and B so that the above does not occur, completing the proof.
The next lemma can be proved by applying a large deviation result for martingales, i.e., Azuma’s inequality [14].

Lemma 11.1.47 [11] Let U be a subset of M = {1, 2, . . . , m−1} and suppose
that for each u ∈ U there is a subset Su ⊂ M , where |Su| ≤ r for all u. Let f : U → M be a random one-to-one mapping of U into M , chosen uniformly
among all one-to-one mappings of U into M , and deﬁne:

B(f ) = |{u ∈ U : f (u) ∈ Su}|. Then the expectation of B(f ) is given by

E = E(B(f )) =

|S(u)| m−1

(

≤

|U |r m−1

,

)

u∈U

and the probability that B(f ) is larger satisﬁes the following inequality. For

every λ > 0

P rob[B(f )

−

E

>

√ 4λ m

−

1]

<

e−λ2 .

Corollary 11.1.48 Let Kmc ,m be an edge-coloured complete bipartite graph on the partite sets A and B, and suppose that (11.4) holds. Then, for all suﬃciently large m, there exists a perfect matching aibi, 1 ≤ i ≤ m, in Kmc ,m so that the following two conditions hold. (i) For every i the number d+(i) of edges aibj between ai and B whose colours diﬀer from those of aibi and of ajbj is at least m/2 + 1. (ii) For every j the number d−(j) of edges aibj between bj and A whose colours diﬀer from those of aibi and of ajbj is at least m/2 + 1.

Proof: Let aibi, 1 ≤ i ≤ m, be a random perfect matching between A and B, chosen among all possible matchings with uniform probability. Put r = ∆mon(Kmc ,m) and notice that by (11.4)

r

≤

(1

−

√1 2

−

2 )m.

Fix an i, say i = m, and let us estimate the probability that the condition (i)
fails for i. Suppose the edge ambm has already been chosen for our random matching, and the rest of the matching still has to be chosen randomly. There
are at most r edges amb (b ∈ B) having the same colour as ambm. Let U be the set of all the remaining elements B. Then |U | ≥ m − r. For each u ∈ U ,

11.1 Properly Coloured Trails in Edge-Coloured Multigraphs 619

let Su denote the set of all elements a ∈ A − am so that the colour of the edge

au is equal to that of the edge amu. The random matching restricted to U

is simply a random one-to-one function f from U to A − am. Moreover, the

edge amu will not be counted among the edges incident with am and having

colours that diﬀer from those of ambm and of the edge matched to u if and

only if the edge matched to u will lie in Su. It follows that the random variable

counting the number of such edges of the form amu behaves precisely like the

random variable B(f ) in Lemma 11.1.47. By choosing say, λ = log(√4m) we conclude that the probability that B(f ) exceeds |U |r/(m − 1) + 4λ m − 1

is

smaller

than

1/(4m).

Therefore,

with

probability

at

least

1

−

1 4m

d+(m)

≥

|U |

−

|U |r m−1

−

√ 4m

log(4m)

≥

(m − r)(m − r − 1) m−1

√ −4 m

log(4m)

> m/2 + 1,

for

all

suﬃciently

large

m

(using

the

fact

that

r

≤

(1

−

√1 2

−

2 )m.)

Since there are m choices for the vertex ai (and similarly m choices for

the vertex bj for which the computation is similar) we conclude that with

probability at least a half d+(i) > m/2 + 1, and d−(j) > m/2 + 1 for all i

and j. In particular there exists such a matching, completing the proof of the

corollary.

Returning to the proof of Theorem 11.1.44 with n = 2m, and given an edge-coloured Knc satisfying (11.3) apply Lemma 11.1.46 and Corollary 11.1.48 to obtain a matching aibi satisfying the two conditions in the corollary. Construct a digraph D = (V, E) on the set of vertices V = {v1, v2, . . . , vm} by letting vivj be a directed edge (for i = j) if and only if the colour of aibj in Knc diﬀers from that of aibi and that of ajbj. By Corollary 11.1.48 the in-degree and the out-degree of every vertex of D exceeds m/2, implying, by Corol-
lary 5.6.3, that D contains a directed Hamilton cycle vπ(1)vπ(2) . . . vπ(m)vπ(1), where π = π(1), π(2), . . . , π(m) is a permutation of {1, 2, . . . , m}. The cycle bπ(1)aπ(1)bπ(2)aπ(2) . . . bπ(m)aπ(m)bπ(1) is clearly a PC Hamilton cycle in Knc , as needed.
In case n = 2m+1 is odd we ﬁx a path P = a1c1b1 of length 2, so that the edges a1c1 and c1b1 have distinct colours, choose a random perfect matching a2b2, . . . , ambm in the rest of the graph and show that with high probability there is a PC Hamilton cycle containing the path P and the matching by
applying Corollary 5.6.3 as before. Since the details are almost identical to
the ones for the even case, we omit them. This completes the proof of the
theorem.

620 11. Generalizations of Digraphs

11.2 Arc-Coloured Directed Multigraphs

In this section we show that surprisingly the problem to verify whether a

2-arc-coloured digraph has an alternating directed cycle is N P-complete.

We prove some suﬃcient conditions for a 2-arc-coloured digraph to contain

an alternating directed cycle. These results are due to Gutin, Sudakov and

Yeo [371]. We will obtain an original characterization of weakly eulerian arc-

coloured directed multigraphs (see a deﬁnition below) and pose the problem

to ﬁnd the complexity of the eulerian trail problem for arc-coloured directed

multigraphs.

In this section we assume that the arcs of directed multigraphs are

coloured with c colours: 1, 2, . . . , c. We adapt notation and terminology of

the previous section in the obvious way.

The problem of the existence of an alternating cycle in a 2-arc-coloured

digraph (the ADC problem) generalizes the following two polynomially

solvable problems: the existence of an alternating cycle in a 2-edge-coloured

graph (see the previous section) and the existence of an even length cycle in

a digraph (see Chapter 10). To see that the ADC problem generalizes the

even cycle problem, replace every arc (x, y) of a digraph D by two vertex

disjoint alternating paths of length three, one starting from colour 1 and the

other from colour 2. Clearly, the obtained 2-edge-coloured digraph has an

alternating cycle if and only if D has a cycle of even length. We will prove

that the ADC problem is N P-complete [371] by providing a transformation

from the well-known 3-SAT problem (see Section 1.10) to the ADC problem.

This is in contrast to the simple fact that the ADC problem restricted to

bipartite 2-arc-coloured digraphs is polynomial time solvable.

To indicate that an arc (x, y) has colour i ∈ {1, 2, . . . , c} we will write

(x, y)i. For a vertex v in a (d−i (v)) denotes the number

c-arc-coloured directed multigraph D, d+i (v) of arcs of colour i leaving (entering) v, i =

1, 2, . . . , c;

δm0 on(v) = min{d+i (v), d−i (v) : i = 1, 2, . . . , c}.

The following parameter is of importance to us:

δm0 on(D) = min{δm0 on(v) : v ∈ V (D)}.
Let f (n) be the minimum integer such that every strongly connected 2-arccoloured digraph D with n vertices and δm0 on(D) ≥ f (n) has an alternating cycle. Similarly let g(n) be the minimum integer such that every 2-arccoloured digraph D with n vertices and δm0 on(D) ≥ g(n) has an alternating cycle. We show below that f (n) = Θ(log n) and g(n) = Θ(log n).
By contrast with that, the corresponding function f (n) for the even cycle problem does not exceed three (see Thomassen’s even cycle theorem in Section 8.3). Using Theorem 3.2 in [702], one can show that the corresponding function g(n) for the even cycle problem equals Θ(log n). By Theorem 3.2 in [702], there exists a digraph Hn with n vertices and minimum out-degree at

11.2 Arc-Coloured Directed Multigraphs 621

least

1 2

log n

not

containing

even

cycles.

Let

Hn

be

the

converse

of

Hn.

Take

vertex disjoint copies of Hn and Hn and add all arcs from Hn to Hn. The

obtained digraph and the upper bound in Theorem 3.2 of [702] provide the

estimate Θ(log n).

A directed trail is properly coloured (PC) if its consecutive arcs diﬀer

in colour. In case of two colours, we speak of alternating trails. An arc-

coloured directed multigraph D is weakly eulerian if the arc set of D can

be partitioned into PC closed trails T1, . . . , Tk. If D has a PC closed trail containing all arcs of D, then D is eulerian.

11.2.1 Complexity of the Alternating Directed Cycle Problem
The proof of the following proposition is left as a simple exercise (Exercise 11.27).
Proposition 11.2.1 The ADC problem restricted to 2-arc-coloured bipartite digraphs is polynomial time solvable.
In contrast with Proposition 11.2.1, we have the following:
Theorem 11.2.2 (Gutin, Sudakov, Yeo) [371] The ADC problem is N Pcomplete.
Proof: To show that the ADC problem is N P-complete, we transform the 3SAT problem to the ADC problem (recall the deﬁnition of the 3-SAT problem from Section 1.10). Let X = {x1, . . . , xk} be a set of variables, and let F = c1 ∗ c2 ∗ . . . ∗ cm be an instance of the 3-SAT problem such that every ci has three literals and all of these are variables or negations of variables from X.
We construct a 2-arc-coloured digraph D which has an alternating cycle if and only if C is satisﬁable. We use the same reduction as in [371], but rather than giving a formal deﬁnition of D, we describe its structure in the caption of Figure 11.7 and argue using this picture. This can easily be formalized to a precise description of D (see [371]). Based on the deﬁnition of D, it is not diﬃcult to prove the following lemma which gives important structural properties of D (Exercise 11.26).
Lemma 11.2.3 let C be an alternating directed cycle in D. Then the following holds:
(a) C uses precisely one of the three paths of length two from cj to cj+1 for j = 1, 2, . . . , m.
(b) For each j = 1, 2, . . . , m, the subpath C[cj, cj+1] has length 2 and contains precisely one vertex from ∪ki=1(V (Pi) ∪ V (Qi)).
(c) C contains each of the vertices c1, c2, . . . , cm, cm+1 and in that order. (d) If C uses a path cjucj+1 such that u ∈ V (Pi) (u ∈ V (Qi)), then no
other subpath of C of the type cqvcq+1, q = j, uses a vertex from V (Qi) (V (Pi)) and C contains the whole path Qi (Pi) as a subpath.

622 11. Generalizations of Digraphs
C1 C2 C3 C4 C5

Cm−1 Cm

Cm+1

2

Pk

21 1

212

1 2

1 21

1 212

Qk

21 21

Pi 212

1 2

1 21

21 2 Qi

1

(a)

ci

2

P1

21 1 2

212 1

1 21

1 212

Q1

ci+1

12

21

1

2

2 12 2 2

2 2 12

12

Qt Qs Qr

2

(b)
Figure 11.7 A schematic view of the digraph D. The digraph has one vertex cj for each clause cj in F and an extra vertex cm+1. For each variable xi, i = 1, 2, . . . , k, D contains two alternating directed paths Pi, Qi such that these start and end in the same vertices but are otherwise disjoint and both paths start and end with colour 1. Part (a) shows the way these structures are put together to form D. There is a unique arc from a pair Pi, Qi to the next pair Pi+1, Qi+1 and this arc has colour 2. For every j = 1, 2, . . . , m, cj is joined to cj+1 by three paths of length 2. Part (b) of the ﬁgure shows a detailed picture of the three (cjcj+1)-paths of length 2 when cj is the clause cj = xr + xs + xt. These paths are cjucj+1, where u ∈ V (Ti), Ti ∈ {Pi, Qi}. The ﬁrst arcs of these paths are of colour 1. Furthermore the paths P1, . . . , Pk, Q1, . . . , Qk are chosen suﬃciently long so that no vertex u ∈ V (Pi) ∪ V (Qi) is used on two diﬀerent paths of the type cjucj+1.
(e) C uses precisely one of the alternating directed paths Pi, Qi for each i = 1, 2, . . . , k and it uses them in order of increasing i.
Lemma 11.2.4 The digraph D has an alternating directed cycle if and only if F is satisﬁable.
Proof: Suppose C is an alternating directed cycle in D. By Lemma 11.2.3, the following is a truth assignment to X = {x1, x2, . . . , xk}. For each i = 1, 2, . . . , k, if C uses Pi then put xi = 0 otherwise (C uses Qi by (e)) put xi = 1 . We claim that each clause cj is satisﬁed by this assignment. By Lemma 11.2.3, the subpath of C from cj to cj+1 has the form cjucj+1 for

11.2 Arc-Coloured Directed Multigraphs 623
some u ∈ ∪ki=1(V (Pi) ∪ V (Qi)). Let be the literal of cj corresponding to u (that is, if u ∈ Pi, then by (d) and the deﬁnition of D, = xi and if u ∈ Qi, then = xi). If u ∈ V (Pi), then C uses the path Qi and the truth assignment above will put = xi = 1. If u ∈ V (Qi), then C uses Pj and xi is assigned the value 0, implying that = xi = 1 . This shows that the clause cj is satisﬁed. Since this argument is valid for all clauses we see that the truth assignment described above satisﬁes F.
Suppose now that F has a satisfying truth assignment t = {t1, t2, . . . , tk} (see Section 1.10). Then we can ﬁx, for each clause cj one literal lj which is true according to this assignment. Let 1, 2, . . . , m denote these ﬁxed literals. Note that since t is a truth assignment, none of the chosen literals is the negation of another. By the construction of D there is a unique path Cj = cjujcj+1 which corresponds to the choice of j (that is, uj ∈ Pi if j = xi and uj ∈ Qj if j = xi). Furthermore if j1 = j2 , for some j1 = j2, then uj1 = uj2 . For each i = 1, 2, . . . , k ﬁx one of the paths Pi, Qi as follows: if r = xi for some r ∈ {1, 2, . . . , m}, then Ti = Qi, otherwise Ti = Pi. By the comment above this assignment of subpaths always chooses one subpath for each i = 1, 2, . . . , k.
Now it is easy to see that the following is an alternating directed cycle in D
C1C2 . . . CmT1T2 . . . Tkc1.
This completes the proof of the lemma.
To complete the proof of Theorem 11.2.2, it suﬃces to observe that the digraph D can be constructed in polynomial time for any given instance of the 3-SAT problem.
We do not know what the complexity of the ADC problem is when restricted to tournaments.
Problem 11.2.5 [371] Does there exist a polynomial algorithm to check whether a 2-arc-coloured tournament has an alternating cycle?
Figure 11.8 illustrates the diﬃculty of this problem. In contrast to the ‘uncoloured’ case, the 2-arc-coloured tournament T in Figure 11.8 has a unique alternating cycle, which is hamiltonian. Therefore, a reduction to ‘short’ alternating cycles may well be impossible.
Proposition 11.2.6 The cycle C in the tournament T of Figure 11.8 is hamiltonian and consists of the matching of colour 1 from R to B and the matching of colour 2 from B to R. If we reverse any arc of colour 1 in C, we obtain a tournament with no alternating cycle.
Proof: Exercise 11.31.

624 11. Generalizations of Digraphs

R
22 2
12 2 2

1 1 1 1 1 1

B 2

2
Figure 11.8 A 2-arc-coloured tournament with a unique alternating cycle C. All arcs within R (B) are of colour 1 (2). The cycle C is hamiltonian and consists of the matching of colour 1 from R to B and the matching of colour 2 from B to R. If we reverse any arc of colour 1 in C, we obtain a tournament with no alternating cycle.

11.2.2 The Functions f (n) and g(n)

Since f (n) ≤ g(n) we will only prove a lower bound for f (n) in Theorem 11.2.10 and an upper bound for g(n) in Theorem 11.2.11.
Let S(k) be the set of all sequences whose elements are from the set {1, 2} such that neither 1 nor 2 appears more that k times in a sequence. We assume that the sequence without elements (i.e. the empty sequence) is in S(k). We start with three technical lemmas. Their proofs are formulated as Exercises 11.28, 11.29, 11.30.

Lemma 11.2.7 [371] |S(k)| =

2(k+1) k+1

− 1.

Lemma 11.2.8 [371] For every k ≥ 1,

2k k

<

√1π

√4k . k

(11.5)

Let d(n) =

1 4

log

n

+

1 8

log

log

n

−

a

,

where

a=

5−log π 8

(≤ 0.5).

Lemma 11.2.9 [371]

2(2d(n)+1) 2d(n)+1

< n, for all n ≥ 24.

Now we are ready to prove the following theorem by Gutin, Sudakov and Yeo [371].
Theorem 11.2.10 For every integer n ≥ 24, there exists a 2-arc-coloured strongly connected digraph Gn with n vertices and δm0 on(Gn) ≥ d(n) not containing an alternating cycle.

11.2 Arc-Coloured Directed Multigraphs 625

Proof: Let the vertex set of a digraph Dn be S(2d(n)) and let two vertices of Dn be connected if and only if one of them is a preﬁx of the other one. Moreover, if x = (x1, x2, . . . , xp) and y = (y1, y2, . . . , yq) are vertices of Dn, and x is a preﬁx of y (namely, xi = yi for every i = 1, 2, . . . , p), then the arc a(x, y) between x and y has colour yp+1 and a(x, y) is oriented from x to y if and only if |{j : j ≥ p + 1 and yj = yp+1}| ≤ d(n).
The digraph Dn is strongly connected since the arc between a pair of vertices x = (x1, x2, . . . , xp) and y = (x1, x2, . . . , xp, xp+1) is oriented from x to y, and the arc between the empty sequence ∅ and a vertex v of Dn which is a sequence with 4d(n) elements is oriented from v to ∅ (every vertex of Dn belongs to a cycle containing ∅ and a vertex corresponding to a sequence of

4d(n) elements).

Let x = (x1, x2, . . . , xp) be a vertex of Dn. It is easy to see that d+1 (x) ≥ d(n). Indeed, if x contains at most d(n) elements equal one, then (x, xr)1 is in Dn, where r = 1, 2, . . . , d(n) and xr is x followed by r ones. If x contains t > d(n) elements equal one, then (x, y)1 is in Dn, where y is obtained from x by either adding at most 2d(n) − t ones or deleting more than d(n) rightmost

ones, together with 2’s between them, from x.

Analogously, one can show that d−1 (x) ≥ d(n). By symmetry, δm0 on(Dn) ≥ d(n).

Now we prove that Dn contains no alternating cycle. Assume that Dn contains an alternating cycle C. The empty sequence ∅ is not in C as ∅ is

adjacent with the vertices of the form (i, . . .) by arcs of colour i ∈ {1, 2}, but

the vertices of the form (1, . . .) are not adjacent with the vertices of the form

(2, . . .). Analogously, one can prove that the vertices (1) and (2) are not in

C. In general, after proving that C has no vertex with p elements, we can

show that C has no vertex with p + 1 elements.

By Lemma 11.2.7, Dn has b(n) =

2(2d(n)+1) 2d(n)+1

− 1 vertices. By Lemma

11.2.9, b(n) < n. Now we append n − b(n) vertices along with arcs to Dn

to obtain a digraph Gn with δm0 on(Gn) ≥ d(n). Take a vertex x ∈ Dn with

4d(n) elements. We add n − b(n) copies of x to Dn such that every copy has

the same out- and in-neighbours of each colour as x. The vertex x and its

copies form an independent set of vertices.

The construction of Gn implies that δm0 on(Gn) ≥ d(n), Gn is strongly connected and Gn has no alternating cycle, by the same reason as Dn.

Now we are ready to prove an upper bound2 for g(n).

Theorem 11.2.11 Let D=(V,A) be a 2-arc-coloured digraph on |V | = n vertices. If d+i (v) ≥ log n − 1/3 log log n + O(1) for every i = 1, 2 and v ∈ V , then D contains an alternating cycle.
2 As we mentioned in the footnote just before Lemma 10.6.13 the bound of the lemma can be slightly improved. Hence the bound for g(n) can also be improved slightly.

626 11. Generalizations of Digraphs
Proof: Without loss of generality assume that d+i (v) = k for all v ∈ V (k will be deﬁned later), otherwise simply remove extra arcs. For each vertex v ∈ V and each colour i = 1, 2, let
Bvi = {u ∈ V : (v, u) is an arc of colour i}. The size of each of the sets Bvi is equal to k, thus they form a k-uniform hypergraph H with n vertices and 2n edges. Let k = log n − 1/3 log log n + b, where b is a constant. Then it is easy to see that by choosing b large enough we get that ck1/32k > 2n. By Lemma 10.6.13, our hypergraph H is 2-colourable. By taking a 2-colouring of H we get a partition V = X ∪ Y such that Bvi intersects both X and Y for every i = 1, 2 and v ∈ V . Let D1 be a subdigraph of D which contains only arcs of colour 1 from X to Y and arcs of colour 2 from Y to X. The out-degree of every vertex in D1 is positive, since all sets Bvi intersect both X and Y . Therefore D1 contains a cycle, which is alternating by the construction of D1.
11.2.3 Weakly Eulerian Arc-Coloured Directed Multigraphs

12

2

21

1

Figure 11.9 Weakly eulerian non-eulerian 2-arc-coloured digraph.

The following theorem yields a characterization of weakly eulerian arccoloured directed multigraphs. Due to Theorem 11.1.2, every connected weakly eulerian edge-coloured multigraph is eulerian (the deﬁnition of weakly eulerian edge-coloured multigraphs is analogous to that of arc-coloured directed multigraphs). This is in contrast to the fact that not every connected weakly eulerian arc-coloured directed multigraph is eulerian. For example, let C and Z be a pair of 2-arc-coloured alternating directed cycles with only one common vertex x and 1 = χ(xx+C ) = χ(xx+Z ) = 2; see Figure 11.9. The union H of C and Z is weakly eulerian, but H has no PC eulerian trail.
The proof of the following theorem is similar to that of Theorem 11.1.2 and left as Exercise 11.34.
Theorem 11.2.12 An arc-coloured directed multigraph D is weakly eulerian if and only if d+(x) = d−(x) for every vertex x in D, and for every vertex x in D and every colour i, we have
d−i (x) ≤ d+j (x).
j=i

11.3 Hypertournaments 627
Neither characterization nor complexity is known so far for the eulerian trail problem in arc-coloured directed multigraphs.
Problem 11.2.13 Find the complexity of checking whether an arc-coloured directed multigraph is eulerian.
For the case of just two colours the following simple transformation by Fleischner [240] can be applied. Let D be a 2-arc-coloured directed multigraph. Split every vertex v with δ0(v) > 0 into a pair v , v of vertices such that v ‘inherits’ all red arcs entering v and all blue arcs leaving v, and v ‘inherits’ all blue arcs entering v and all red arcs leaving v. By disregarding all colours in the obtained 2-arc-coloured directed multigraph, we yield the directed multigraph H. Clearly, D is eulerian if and only if H is eulerian. Some suﬃcient conditions for an arc-coloured directed multigraph to be eulerian are given in [240].
11.3 Hypertournaments
Given two integers n and k, n ≥ k > 1, a k-hypertournament T on n vertices is a pair (V, A), where V is a set of vertices, |V | = n and A is a set of k-tuples of vertices, called arcs, so that for any k-subset S of V , A contains exactly one of the k! k-tuples whose entries belong to S. That is, T may be thought of as arising from an orientation (being a ﬁxed permutation of vertices) of the hyperedges of the complete k-uniform hypergraph on n vertices. Clearly, a 2-hypertournament is merely a tournament.
As an example of a 3-hypertournament, let L have vertex set V (L) = {1, 2, 3, 4} and arc set A(L) = {(1, 2, 3), (1, 2, 4), (1, 4, 3), (4, 3, 2)}. The four arcs of L are orientations of sets {1, 2, 3}, {1, 2, 4}, {1, 4, 3} and {2, 3, 4}, respectively.
Hypertournaments have been studied by a number of authors (see, e.g., the papers [32] by Assous, [92, 93] by Barbut and Bialostocki, [117] by Bialostocki, [276] by Frankl, [374] by Gutin and Yeo, [552, 553] by Marshall, [599] by Pan, Zhou and Zhang and [759] by Zhou, Yao and Zhang). Reid [630, Section 8] describes several results on hypertournaments obtained by the above authors and poses some interesting problems on the topic. In particular, he raises the problem of extending the most important results on tournaments to hypertournaments.
In this section based on the results of Gutin and Yeo in [374] and Zhou, Yao and Zhang in [759], we give extensions of three of the most basic theorems on tournaments: every tournament has a Hamilton path (R´edei’s theorem), every strong tournament has a Hamilton cycle (Camion’s theorem), and Landau’s theorem, Theorem 8.7.1, on out-degree sequences of tournaments. It turns out that every k-hypertournament on n (> k) vertices has a Hamilton path and every strong k-hypertournament on n ≥ k + 2 ≥ 5 vertices contains a Hamilton cycle. We also describe, for every k ≥ 3, a strong

628 11. Generalizations of Digraphs

k-hypertournament on k + 1 vertices which has no Hamilton cycle. We con-
sider the complexity of the Hamilton cycle problem for k-hypertournaments
and note that the problem remains polynomial time solvable when k = 3 and
becomes N P-complete for every ﬁxed integer k ≥ 4. As follows from The-
orem 11.3.4, deciding strong connectivity for hypertournaments is already
N P-complete. Interestingly enough, Landau’s theorem and the Harary-Moser
theorem, Theorem 8.7.2, on out-degree sequences of all tournaments and all
strong tournaments have direct extension to hypertournaments.
Let T = (V, A) denote a k-hypertournament T on n vertices. A path in T
is a sequence v1a1v2a2v3 . . . vt−1at−1vt of distinct vertices v1, v2, . . . , vt, t ≥ 1, and distinct arcs a1, . . . , at−1 such that vi precedes vi+1 in ai, 1 ≤ i ≤ t − 1. A cycle in T is a sequence v1a1v2a2v3 . . . vt−1at−1vtatv1 of distinct vertices v1, v2, . . . , vt and distinct arcs a1, . . . , at, t ≥ 1, such that vi precedes vi+1 in ai, 1 ≤ i ≤ t (at+1 = a1). The above deﬁnitions of a path and cycle in a hypertournament are similar to the corresponding deﬁnitions of a path and
cycle in a hypergraph.
For a path or cycle Q, V (Q) and A(Q) denote the set of vertices (vi’s above) and the set of arcs (aj’s above), respectively. For a pair of vertices vi and vj of a path or cycle Q, Q[vi, vj] denotes the subpath of Q from vi to vj (which can be empty). A path or cycle Q in T is hamiltonian if V (Q) = V (T ). The 3-hypergraph L considered in the beginning of this section
has a Hamilton path 1, (1, 2, 3), 2, (1, 2, 4), 4, (1, 4, 3), 3. A hypertournament
T is hamiltonian if it has a Hamilton cycle. A path from x to y is an
(x, y)-path. A hypertournament T is strong if T has an (x, y)-path for every
(ordered) pair x, y of distinct vertices in T . The hypertournament L is not
strong, since there is no (2, 1)-path in L. This, in particular, means that L is
not hamiltonian.
We also consider paths and cycles in digraphs which will be denoted as
sequences of the corresponding vertices. The out-degree d+(v) of a vertex v in a hypertournament T is the num-
ber of arcs in T in which v is the last vertex. The out-degree sequence
of T = (V, A) is the non-decreasing sequence s1, s2, . . . , sn of non-negative integers such that {s1, s2, . . . , sn} = {d+(v) : v ∈ V }. For a pair of distinct vertices x and y in T , AT (x, y) denotes the set of all arcs of T in which x precedes y. Clearly, for all distinct x, y ∈ V (T ),

|AT (x, y)| + |AT (y, x)| =

n−2 k−2

.

(11.6)

11.3.1 Out-Degree Sequences of Hypertournaments
It turns out that Landau’s theorem on out-degree sequences of tournaments can be directly extended to hypertournaments. Similarly, one can extend the Harary-Moser theorem on out-degree sequences of strong tournaments. These extensions were proved by Zhou, Yao and Zhang [759].

11.3 Hypertournaments 629

Theorem 11.3.1 [759] Given two non-negative integers n and k with n ≥

k ≥ 2, a non-decreasing sequence s1, s2, . . . , sn of non-negative integers is the out-degree sequence of some k-hypertournament if and only if for each j,

k ≤ j ≤ n,

j
si ≥
i=1

j k

,

with equality holding when j = n.

Theorem 11.3.2 [759] A sequence s1 ≤ s2 ≤ . . . ≤ sn of non-negative integers with n > k ≥ 2 is the out-degree sequence of some strong k-
hypertournament if and only if for each j, k ≤ j ≤ n − 1,

j
si >
i=1

j k

and

n
si =

n k

.

i=1

11.3.2 Hamilton Paths
Assume, in this subsection, that k ≥ 2. Clearly, no k-hypertournament with precisely k(≥ 3) vertices has a Hamilton path. However, all other hypertournaments have Hamilton paths:
Theorem 11.3.3 Every k-hypertournament with n (> k) vertices contains a Hamilton path.
Proof: Let T = (V, A) be a k-hypertournament T on n vertices 1,2,. . . ,n. We consider the cases k = n − 1 and k < n − 1 separately.
Case 1: k = n − 1. We proceed by induction on k ≥ 2. Clearly, this theorem holds for k = 2. Hence, suppose that k ≥ 3. Assume (by relabelling the vertices, if necessary) that T contains the arc a = (23 . . . n). Let b be the arc of T whose vertices are 1, 2, . . . , n − 1 (in some order). Consider the (k − 1)-hypertournament T = (V , A ) obtained from T by deleting the arc a, deleting n from the arcs in A − {a, b}, and ﬁnally deleting 1 from b. So, V = {1, 2, . . . , n − 1}, A = {e : e is e without n, e ∈ A − {a, b}} ∪ {b }, where b is b without the vertex 1. By the induction hypothesis, T has a Hamilton path x1a1x2a2 . . . an−2xn−1. This path corresponds to the path Q = x1a1x2a2 . . . an−2xn−1 in T . Clearly, {x1, . . . , xn−1} = {1, . . . , n − 1} and A − {a1, . . . , an−2} consists of the arc a and another arc c.
If xn−1 = 1, then Qan is a Hamilton path in T . Hence from now on assume that xn−1 = 1. Consider two subcases.

630 11. Generalizations of Digraphs

Subcase 1.1 c = b: If the last vertex of c is n, then Qcn is a Hamilton
path in T . Otherwise, xj is the last vertex of c for some j ≤ n − 1. If j > 1 we replace aj−1 by anc in Q in order to obtain a Hamilton path in T . If j = 1, then ncQ is a Hamilton path in T .
Subcase 1.2 c = b: If c = (xn−1xn−2 . . . x1) so that xi precedes xi+1, for some i, 1 ≤ i ≤ n − 2, in c, then P = Q[x1, xi]cQ[xi+1, xn−1] is a path in T . Since ai = b, one can construct a Hamilton path in T from P as in Subcase 1.1. If c = (xn−1xn−2 . . . x1), then Q[x2, xn−1]cx1an is a Hamilton path in T .

Case 2: k < n − 1. We proceed by induction on n ≥ 4. The case n = 4

(and, hence, k = 2) is easy to verify (it also follows from R´edei’s theorem).

Therefore, suppose that n ≥ 5. Consider the new k-hypertournament T

obtained from T by deleting the vertex n along with all arcs in A containing

n. T has a Hamilton path because of either Case 1 if n = k − 2 or the

induction hypothesis, otherwise.

Let P = x1a1x2a2 . . . an−2xn−1 be a Hamilton path in T . If T has

an arc a ∈ AT (xn−1, n), then P an is a Hamilton path in T . Suppose that

AT (xn−1, ∪nl=−i1+1AT

n) (xl

= ∅. , n) =

Then ∅ and

either ∪nl=−11AT (xl T contains an arc

, n) = ∅, or there is an i b where xi precedes n. In

so the

that ﬁrst

case, ncP is a Hamilton path in T , where c is an arc of T containing both

x1 and n. In the second case, P [x1, xi]bndP [xi+1, xn−1] is a Hamilton path in T , where d is an arc of T containing both xi+1 and n and distinct from b.

11.3.3 Hamilton Cycles
Clearly, every hamiltonian hypertournament is strong. However, for every k ≥ 3, there exists a strong k-hypertournament with n = k + 1 vertices which is not hamiltonian. Indeed, let the (n − 1)-hypertournament Hn have vertex set {x1, . . . , xn} and arc set {a1, a2, . . . , an}, where a1 = (x2x3 . . . xn−2xnxn−1), a2 = 3, a3 = (x1x2x4x5 . . . xn), a4 = (x2x3x1x5x6 . . . xn), and

ai = (x1x2 . . . xi−4xi−3xi−1xi−2xi+1xi+2 . . . xn) for 5 ≤ i ≤ n.
The hypertournament Hn is strong (Exercise 11.35). However, Hn is not hamiltonian. To prove that, assume that Hn has a Hamilton cycle C. We will try to construct C starting from the vertex xn. Since a1 is the only arc which has a vertex that succeeds xn, C has the form xna1xn−1 . . .. Since an is the only arc which has a vertex diﬀerent from xn that succeeds xn−1, C = xna1xn−1anxn−2 . . .. Continuing this process, we obtain that C = xna1xn−1 . . . x4a5x3 . . .. The only arc where x3 precedes x1 or x2 is a4. Hence, C = xna1xn−1 . . . x4a5x3a4x1 . . .. Now we need to include x2, a3 and a2 into C. However, this is impossible because only one of the arcs a3, a2 contains x2.

11.3 Hypertournaments 631

In the proof in [374] that every strong k-hypertournament with n vertices,

where 3 ≤ k ≤ n − 2, is hamiltonian the following notion is of great impor-

tance. The majority digraph Dmajor(H) of a k-hypertournament H with n vertices has the same vertex set V as H and, for every pair x, y of distinct

vertices in V , the arc xy is in Dmajor(H) if and only if |AH (x, y)| ≥ |AH (y, x)|

(or, by (11.6), |AT (x, y)|

≥

1 2

n−2 k−2

).

Obviously,

Dmaj or (H )

is

a

semi-

complete digraph. Figure 11.10 shows the majority digraph Dmajor(L) of

the 3-hypertournament L with vertex set V (L) = {1, 2, 3, 4} and arc set

A(L) = {(1, 2, 3), (1, 2, 4), (1, 4, 3), (4, 3, 2)}.

12

43
Figure 11.10 The majority graph Dmajor(L) of L.
Since the proof of the following interesting result is rather lengthy, we do not provide it here.
Theorem 11.3.4 (Gutin and Yeo) [374] Every strong k-hypertournament with n vertices, where 3 ≤ k ≤ n − 2, contains a Hamilton cycle.
We know that the Hamilton cycle problem for 2-hypertournaments, i.e. tournaments is polynomial time solvable (see Chapter 5). It turns out that the k-hypertournament hamiltonicity problem remains polynomial time solvable for k = 3, but becomes N P-complete for every ﬁxed k ≥ 4.
Let H = (V, A) be a k-hypertournament, A = {a1, . . . , am}. Associate with H the following arc-coloured directed multigraph D(H): the vertex set of D(H) is V ; for distinct vertices x, y ∈ V , D(H) has the arc xy of colour i if and only if ai ∈ AH (x, y). Clearly, H contains a path from a vertex x to another vertex y if and only if D(H) has a path P from x to y such that no two arcs in P have the same colour.
Theorem 11.3.5 [374] The Hamilton cycle problem is solvable in polynomial time for the class of 3-hypertournaments.
Proof: Let H be a 3-hypertournament. We may assume that n ≥ 5, since the case when n ≤ 4 can be checked in constant time. By Theorem 11.3.4, it suﬃces to prove that one can check the existence of a path, in H, from a vertex x to another vertex y in polynomial time. Construct the arc-coloured directed multigraph D(H) as above. We prove that H has a path from x to

632 11. Generalizations of Digraphs
y if and only if D(H) has some (x, y)-path. Clearly, if H has a path from x to y, then D(H) contains such a path. Suppose that D(H) has a path Q = x1 . . . xp from x = x1 to y = xp. If Q has no arcs of the same colour, then Q corresponds, in the obvious way, to an (x, y)-path of H. Suppose that Q contains arcs of the same colour. This means that there exist a subscript i and an integer j such that the arcs xi−1xi and xixi+1 have the same colour j (these two are the only arcs of colour j which can be in Q). We can replace Q by the path Q[x1, xi−1]Q[xi+1, xp]. Continuing this process, we obtain a new path, in D(H), from x to y without repetition of colours. The new path corresponds to an (x, y)-path in H.
Theorem 11.3.6 (Gutin and Yeo) [374] Let k ≥ 4. The Hamilton cycle problem for k-hypertournaments is N P-complete. The proof of this theorem in [374] is considerably more diﬃcult and lengthy. It reduces the 3-SAT problem into the Hamilton cycle problem for 4hypertournaments.
11.4 Application: Alternating Hamilton Cycles in Genetics
In [200, 201] Dorninger considers Bennett’s model (see Bennett’s book [104] and the papers [423, 424] by Heslop-Harrison and Bennett) of chromosome arrangement in a cell of an eukaryotic organism. In [201], the case of even number, n, of chromosomes is studied. We consider here only this case as it is more interesting. Every individual chromosome consists of a long arm and a short arm, which are linked at the so-called centromere. At a certain stage of cell division, which is of interest to biologists, the arms of n chromosomes form an n-angle star whose internal points are the centromeres (see Figure 11.11) and external points created by the arms of ‘adjacent’ chromosomes. To ﬁnd
Figure 11.11 Chromosome arrangement.
out the order of the centromeres, Bennett [104] suggested that the external

11.4 Application: Alternating Hamilton Cycles in Genetics 633
points are formed by the most similar size arms. Bennett and Dorninger (see [201]) generalized the notion of similarity to so-called k-similarity and Dorninger [201] analyzed the consistency of this generalized notion. Let us consider the following graph-theoretic model of this biological system. Let si and li denote the short and long arm of chromosome number i. Let the chromosomes be labeled 1,2,. . . ,n in such a way that si is longer than sj if i < j, and let π be a permutation of 1, 2, . . . , n such that lπ(i) is longer than lπ(j) if i < j.
We call two short arms si and sj (long arms lπ(i) and lπ(j)), i = j, ksimilar if |i − j| ≤ k. In this way, for k = 1, we obtain the original Bennett’s notion of ‘most similar size’. Let G(n, k, π) be a 2-edge-coloured multigraph with vertex set {1, 2, . . . , n}. The blue (red) subgraph G1(n, k, π) (G2(n, k, π)) of G(n, k, π) consists of edges pq (p = q) such that sp and sq (lp and lq) are k-similar. (See Figure 11.12.)
12
34
56
Figure 11.12 The 2-edge-coloured graph G(6, 2, τ ), where τ (1) = 2, τ (2) = 1, τ (3) = 4, τ (4) = 3, τ (5) = 5, τ (6) = 6. The blue edges are shown by ordinary lines. The red edges are indicated by bold lines.
According to one of Bennett’s assumptions, G(n, k, π) has an alternating Hamilton cycle. Dorninger [201] analyzed when G(n, k, π) has an alternating Hamilton cycle for every permutation π. Clearly, for k = 1, the 2-edgecoloured multigraph is a collection of t ≥ 1 alternating cycles and, when t ≥ 2, Bennett’s assumption does not hold. Dorninger [201] proved that G(n, 2, π) has an alternating Hamilton cycle for every π provided n ≤ 12. He [201] also showed that for every n ≥ 14 there exists a permutation π such that G(n, 2, π) has no alternating Hamilton cycle. Yeo (private communication, April, 1999) proved that the alternating Hamilton cycle problem for the graphs G(n, 2, π) is N P-hard. Interestingly enough, G(n, 3, π) contains an alternating Hamilton cycle for every permutation π. Thus, the notion of 3-similarity seems to be most consistent with Bennett’s assumptions.
In the rest of this section we will prove the following two results:
Theorem 11.4.1 [201] For every even positive integer n ≤ 12 and every permutation π of 1,2,. . . ,n, the 2-edge-coloured multigraph G(n, 2, π) has an alternating Hamilton cycle.

634 11. Generalizations of Digraphs
Theorem 11.4.2 (Dorninger) [201] For every even positive integer n and every permutation π of 1,2,. . . ,n, the 2-edge-coloured multigraph G(n, 3, π) has an alternating Hamilton cycle.
11.4.1 Proof of Theorem 11.4.1
In this subsection, which contains certain proofs suggested by Yeo (private communication, April, 1999), we consider multigraphs G = G(n, 2, π). We recall that V (G) = V (G1) = V (G2) = {1, 2, . . . , n}, E(G1) = {ij : |i − j| ≤ 2}, and E(G2) = {π(i)π(j) : |i − j| ≤ 2} (see Figure 11.12). Clearly, every alternating cycle factor F of G is the union of a perfect matching F1 of G1 and a perfect matching F2 of G2. We write F = C(F1, F2).
Suppose that e = ij and f = pq are in F1 and e and f belong to two distinct cycles X and Y of F. Suppose also that i < j, p < q and edges ip and jq are in G1. If we delete e and f in F1 and add edges ip and jq, we obtain a new perfect matching F1 of G1. Observe that C(F1, F2) has one less cycle than C(F1, F2) since the vertices of X and Y form a new alternating cycle Z. We call F1 the (e, f )-switch of F1; the operation to obtain F1 from F1 is a switch (or, the (e, f )-switch).
Let S = {{2t − 1, 2t} : t = 1, 2, . . . , n/2} and L = {π(2t − 1)π(2t) : t = 1, 2, . . . , n/2}. Clearly, S and L are perfect matchings in G1 and G2, respectively.
Lemma 11.4.3 Let C(S, L) contain m cycles. There is a sequence of switches of edges in S, such that the resulting perfect matching F of G1, has the property that C(F, L) has at most (m + 1)/2 cycles. Furthermore, given any cycle Ch in C(S, L) we may choose F , such that all cycles in C(F, L), except possibly Ch, have length at least 4.
Proof: Let C(S, L) consist of cycles C1, C2, . . . , Cm. Let ei = {2ri −1, 2ri} be an edge of Ci, such that ri is minimum. Assume that the cycles C1, C2, . . . , Cm are labelled such that 1 = r1 < r2 < . . . < rm. Deﬁne qi to be the maximum number such that {2ri − 1, 2ri}, {2ri + 1, 2ri + 2}, . . . , {2qi − 1, 2qi} belong to Ci, for every i = 1, 2, . . . , m. Observe that 1 = r1 ≤ q1 < r2 ≤ q2 < . . . < rm ≤ qm = n.
Fix h ∈ {1, 2, . . . , m}. We will now prove that by doing switches every cycle, except possibly Ch, can be merged with another cycle. We perform the switches recursively in the following way. While there is a cycle, Ci with i < h, which has not been merged to another cycle do the following: choose i to be the minimum such index and perform the ({2qi − 1, 2qi}, {2qi + 1, 2qi + 2})switch. While there is some cycle, Ci with i > h, which has not been merged to another cycle do the following: choose i to be the maximum such index and perform the ({2ri − 3, 2ri − 2}, {2ri − 1, 2ri})-switch. Note that all the above switches use distinct edges.
Since every cycle, except possibly Ch, is merged to another cycle, we must have performed at least m/2 merges. Therefore there are at most

11.4 Application: Alternating Hamilton Cycles in Genetics 635
m − m/2 = (m + 1)/2 cycles left, which proves the ﬁrst part of the theorem. The second part follows immediately from the above construction.
Theorem 11.4.1 follows from the next lemma.
Lemma 11.4.4 If C(S, L) has at most six cycles, then G has an alternating Hamilton cycle.
Proof: By the previous lemma, the alternating cycle factor C(F, L) has at most three cycles. Furthermore we may assume that all cycles in C(F, L) have length at least 4, except possibly the cycle containing the vertex π(1). If C(F, L) consists of a unique cycle, then we are done. Assume that C(F, L) has three or two cycles. Label them D1, D2, D3 (or D1, D2) similarly to that in the proof of Lemma 11.4.3. Let fi = π(2ri − 1)π(2ri) be an edge of Di, such that ri is minimum. Assume that the cycles D1, D2, D3 are labelled such that 1 = r1 < r2 < r3. Let fi = π(2ri − 3)π(2ri − 2) for i ≥ 2.
Note that all cycles except possibly D1 have length at least 4. If C(F, L) has two cycles (D1 and D2), then construct the (f2, f2)-switch M of L. Clearly, C(F, M ) consists of a unique cycle. Assume that C(F, L) has three cycles, D1, D2, D3. Perform the (f2, f2)-switch. If f3 = f2 then perform the (f3, f3)-switch, which gives the desired cycle. If f3 = f2 then let g = π(2j − 1)π(2j) be the edge of minimum j > r3 which does not lie in D3, and let g = π(2j − 3)π(2j − 2). Now perform the (g , g)-switch, which gives the desired cycle.
11.4.2 Proof of Theorem 11.4.2
In this subsection, we follow [201]. We consider multigraphs G = G(n, 3, π). We recall that V (G) = V (G1) = V (G2) = {1, 2, . . . , n}, E(G1) = {ij : |i − j| ≤ 3}, and E(G2) = {π(i)π(j) : |i − j| ≤ 3}. We use the same notation as in the previous subsection, in particular, the notation C1, C2, . . . , Cm and e1, e2, . . . , em remain valid. Let Gk be the subgraph of G induced by the vertices of the cycles C1, C2, . . . , Ck. Let Lk = L ∩ E(Gk2).
We show that, for every k ≥ 1, there is a perfect matching F k of Gk1 such that C(F k, Lk) consists of a single cycle. Clearly, the assertion implies Theorem 11.4.2. Trivially, the assertion is true for k = 1. So let us assume that the assertion holds for every i ≤ k − 1. Let ek = {s + 1, s + 2}, where s is an appropriate even integer. Consider the following three cases.
Case 1: The edge e = {s, s − j}, where j = 1 or 2, is in F k−1. Then, the desired F k is the (ek, e)-switch of F k−1 + ek. Indeed, C(F k, Lk) consists of a single cycle.
Case 2: The edges e = {s, s − 3} and e = {s − 1, s − 2} are in F k−1. Let M1 (M2) be a perfect matching of Gk1−1 obtained from F k−1 by replacing edges e , e with {s, s − 1}, {s − 3, s − 2} ({s, s − 2}, {s − 3, s − 1}).

636 11. Generalizations of Digraphs
Clearly, for some i ∈ {1, 2}, C(Mi, Lk−1) consists of a single cycle H. Since either {s, s − 1} or {s, s − 2} is in H, we can apply the transformation of Case 1 to the appropriate matching Mi.
Case 3: The edges e = {s, s − 3} and e = {s − 1, s − 4} are in F k−1. Then e = {s − 2, s − 5} must be in F k−1. Let H be the single cycle of C(F k−1, Lk−1). Consider the following two subcases.
Subcase 3.1: The vertices of e and e are in the cyclic order s − 5, s − 2, s − 3, s in H. Replacing e and e with {s−5, s−3} and {s, s− 2}, we obtain a perfect matching M of Gk1−1 such that C(M, Lk−1) consists of a single cycle. Since {s, s − 2} ∈ M , we can apply the transformation of Case 1 to M .
Subcase 3.2: The vertices of e and e are in the cyclic order s − 2, s − 5, s − 3, s in H. If e belongs to H[s−5, s−3], then by replacing e, e , e with three edges, one of which is {s, s − 1}, we obtain a perfect matching M of Gk1−1 such that C(M, Lk−1) consists of a single cycle. Since {s, s−1} ∈ M , we can apply the transformation of Case 1 to M . If e belongs to H[s, s−2], then by replacing e, e , e with three edges, one of which is {s, s− 2}, we obtain a perfect matching M of Gk1−1 such that C(M, Lk−1) consists of a single cycle. Since {s, s − 2} ∈ M , we can apply the transformation of Case 1 to M .
11.5 Exercises
11.1. Prove Proposition 11.1.1. Hint: use H¨aggkvist’s transformation as well as Theorem 5.0.1, Proposition 9.2.1 and Theorem 9.2.3.
11.2. (−) Deduce from Theorem 11.1.2 that an undirected multigraph G has an eulerian trail if G is connected and each vertex of G is of even degree.
11.3. Prove that Pevzner’s algorithm described after Theorem 11.1.2 is correct.
11.4. (−) Every eulerian digraph has a cycle (unless it is the trivial digraph with one vertex). Show that the corresponding claim is not valid for alternating trails and cycles in 2-edge-coloured graphs.
11.5. Let G be a connected 2-edge-coloured graph. Let V (G) = X + Y such that d1(x) = d2(x) for every x ∈ X, and d1(y) = d2(y) − 1 for every y ∈ Y . What is the minimum number of edge-disjoint alternating trails to cover E(G)?
11.6. Prove Corollary 11.1.7.
11.7. Every bridgeless graph G has an M -alternating cycle for a given perfect matching M of G. Let M be a perfect matching in a graph G. Using Theorem 11.1.6 prove that, if no edge of M is a bridge of G, then G has a cycle whose edges are taken alternatively from M and G − M (Grossman and H¨aggkvist [335]).

11.5 Exercises 637

11.8. (+) Let G be a 2-edge-coloured eulerian graph so that all monochromatic degrees are odd. Using Theorem 11.1.6 demonstrate that G has an alternating cycle (Grossman and H¨aggkvist [335]).

11.9. Prove Proposition 11.1.10.

11.10. Prove Proposition 11.1.15. Hint: see Exercise 1.30.

11.11. Prove Theorem 11.1.16 using the BD-correspondence and Corollary 5.6.3.

11.12. Deduce Theorem 11.1.16 from Theorem 11.1.17.

11.13. Show that the conditions of Theorem 11.1.25 are necessary. Hint: it is similar to the remark after Theorem 11.1.19.

11.14. Derive Theorem 11.1.19 from Theorem 11.1.25. Hint: you may use the DHMconstruction.

11.15. (+) Prove Theorem 11.1.28.

11.16. (+) Prove Theorem 11.1.30.

11.17. Give a direct proof of Corollary 11.1.24 (Bang-Jensen, Gutin and Yeo [73]).

11.18. Prove Lemma 11.1.34.

11.19. Prove Theorem 11.1.38.

11.20. Prove Theorem 11.1.41.

11.21. Prove Theorem 11.1.42.

11.22. Check that G6 introduced after Theorem 11.1.42 is colour-connected and has the alternating spanning cycle subgraph 1231 ∪ 4564, but does not contain
a PC Hamilton cycle.

11.23. Using the deﬁnition of G6 given after Theorem 11.1.42, construct, for every even n, a 3-edge-coloured complete graph on n ≥ 8 vertices which is colour-
connected and has a PC spanning cycle subgraph, but contains no PC
Hamilton cycle.

11.24. Prove Proposition 11.1.43. Hint: consider the complete biorientation of a

maximum

spanning

subgraph

G

of

Knc

such

that

no
↔

pair

of

edges

in

G

is

of

the same colour. Apply Exercise 5.22 to see that G is hamiltonian.

11.25. (−) Prove that the alternating hamiltonian directed cycle problem is N Pcomplete for bipartite 2-arc-coloured digraphs.

11.26. Prove Lemma 11.2.3.

11.27. (−) Prove Proposition 11.2.1.

11.28. Prove Lemma 11.2.7.

11.29. (+) Using the well-known inequality (see e.g. Feller’s book [234, page 54]) √2πnn+1/2e−ne(12n+1)−1 < n! < √2πnn+1/2e−ne(12n)−1 ,

prove Lemma 11.2.8.

638 11. Generalizations of Digraphs
11.30. (+) Prove Lemma 11.2.9.
11.31. (−) Prove Proposition 11.2.6.
11.32. Let H be the 4-hypertournament with vertices {1, 2, 3, 4, 5} and arcs
{(2, 3, 4, 5), (3, 1, 5, 4), (2, 1, 4, 5), (1, 5, 3, 2), (1, 2, 3, 4)}.
Find a hamiltonian path in H.
11.33. Let H the 4-hypertournament deﬁned above. Does H have a hamiltonian cycle?
11.34. Prove Theorem 11.2.12.
11.35. Prove that the hypertournament Hn introduced in the beginning of Subsection 11.3.3 is strong.
11.36. Prove directly that for every ﬁxed k ≥ 4 and n large enough every khypertournaments is traceable. Hint: use the fact that the majority digraph of T is semicomplete.
11.37. (+) Prove that every strong 3-hypertournament on n ≥ 5 vertices is hamiltonian (Gutin and Yeo [374]).
11.38. Show that every hypertournament T has a 2-king, i.e. a vertex x such that for every y ∈ V (T ) − x there is an (x, y)-path of length at most two. Hint: see the hint for Exercise 11.36.
11.39. (−) Construct an alternating hamiltonian cycle in the 2-edge-coloured graph of Figure 11.12.

12. Additional Topics

The purpose of this chapter is to discuss brieﬂy some topics that could not be covered in other chapters in the book and which we feel should still be mentioned. Depending on taste, several of these (and other topics which have been completely left out due to space limitations) could have taken up a whole chapter by themselves. Yet we think that our modest coverage will still show the ﬂavour and potential usefulness of these topics. This applies in particular to the sections on matroids and heuristics for obtaining good solutions to N P-hard problems.

12.1 Seymour’s Second Neighbourhood Conjecture

Recall that for a vertex x in a digraph D, N +2(x) is the set of vertices of distance two from x. Seymour posed the following conjecture (see [187] and Problem 325, page 804 in volume 197/198 (1999) of Discrete Mathematics).

Conjecture 12.1.1 Every oriented graph D = (V, A) has a vertex x such

that

|N +(x)| ≤ |N +2(x)|.

(12.1)

Note that, if we allow 2-cycles, then the conjecture is no longer true as can
↔
be seen by taking the complete digraph Kn. Note also that, if the oriented graph has a vertex of out-degree zero, then this vertex satisﬁes the conjecture. This observation implies that it is suﬃcient to consider the conjecture for oriented graphs that are strongly connected.
The truth of Conjecture 12.1.1 in the case of tournaments was also conjectured by Dean [187]. This special case of the conjecture was proved by Fisher [237] using an analytic approach. Fisher’s argument is non-trivial and involves the use of a probability distribution on the vertices along with Farkas’ Lemma and several other tools. Moreover, Fisher’s method does not explicitly identify a vertex which satisﬁes (12.1). Note that given any oriented graph D, such a vertex, or a proof that D is a counter-example to the conjecture, can be found in time O(nm) (Exercise 12.1).
Below we give an elementary proof, due to Havet and Thomass´e [407], of Conjecture 12.1.1 for the case of tournaments. The proof uses the concept

640 12. Additional Topics

of a median order of the vertex set of a tournament. A median order of a
tournament T is an ordering L = v1, v2, . . . , vn of the vertices, such that the cardinality of the set of backwards arcs (namely arcs of the form vivj, i > j) is minimum. In other words if H is an acyclic subdigraph of T whose size is
maximum among all acyclic subdigraphs of T , then any acyclic ordering of
H induces a median order on T .
By deﬁnition, if L = v1, v2, . . . , vn is a median order of T = (V, A), then A = {vivj : i > j} is a minimum feedback arc set in T (see Section 10.3). Hence, in the light of Conjecture 10.4.4, ﬁnding a median order of a tourna-
ment seems to be a diﬃcult problem and the weighted version (where we seek
an order which minimizes the total weight of the backwards arcs) is N P-hard
since it is easy to formulate the feedback arc set problem this way (Exercise
12.2).
The following relaxation of a median order, called a local median or-
der in [407], is still a powerful tool as we shall see later. An ordering
L = v1, v2, . . . , vn of the vertices of a tournament T = (V, A) is a local median order if the following holds for all 1 ≤ i ≤ j ≤ n. (Here and below
we use the notation [vi, vj] = {vi, vi+1, . . . , vj} for all 1 ≤ i ≤ j ≤ n.)

|N +(vi) ∩ [vi, vj]| ≥ |N −(vi) ∩ [vi, vj]| and

(12.2)

|N −(vj) ∩ [vi, vj]| ≥ |N +(vj) ∩ [vi, vj]|.

(12.3)

Note that, if (12.2) does not hold, then the number of forward arcs in

L = v1, . . . , vi−1, vi+1, . . . , vj−1, vi, vj , . . . , vn
is larger than in L. Similarly if (12.3) does not hold, then we can obtain a better ordering (with respect to the number of forward arcs) by moving vj just after vi. Thus a local median order is precisely a local optimum, which cannot be improved by moving just one vertex in the ordering. Such an ordering can be found in polynomial time for any given digraph by using the 1-OPT procedure in Section 12.8 below.
The following is a direct consequence of the deﬁnition of a local median order:

Lemma 12.1.2 Let L = v1, v2, . . . , vn be a local median order of a tournament T . Then for every 1 ≤ i ≤ j ≤ n the ordering Lij = vi, vi+1, . . . , vj is a local median order of T {vi, vi+1, . . . , vj} .
Lemma 12.1.2 provides us with a powerful inductive tool as we shall see below. Let T be a tournament and let L = v1, v2, . . . , vn be a local median order of T . We deﬁne a partition GL, BL of N −(vn) as follows:
GL = {vj : vj→vn and there exists i < j such that vn→vi→vj};
BL = N −(vn) − GL.

12.1 Seymour’s Second Neighbourhood Conjecture 641

The vertices of GL are called good and those in BL bad vertices. Note that |N +2(vn)| ≥ |GL|. The following result by Havet and Thomass´e implies that Conjecture 12.1.1 holds for tournaments.

Theorem 12.1.3 [407] Let T be a tournament and let L = v1, v2, . . . , vn be a local median order of T . Then the vertex vn has |N +2(vn)| ≥ |N +(vn)|.

Proof: Let L = v1, v2, . . . , vn be a local median order of T . We prove by

induction on n that

|N +(vn)| ≤ |GL|.

(12.4)

If n = 1 the claim is trivially true so suppose that n > 1. If BL = ∅ then we have |GL| = |N −(vn)| ≥ |N +(vn)|, where the equality holds by the deﬁnition of the good vertices and the inequality holds by the deﬁnition of a
local median order. Hence we may assume that there is a bad vertex. Choose i as small as possible so that vi is bad. Deﬁne the sets GlL, GhL, N l, N h as follows:

GlL = GL ∩ [v1, vi] and GhL = GL ∩ [vi+1, vn], N l = N +(vn) ∩ [v1, vi] and N h = N +(vn) ∩ [vi+1, vn].

Note that, if a vertex is good with respect to the pair (T {vi+1, . . . , vn} , Lh), where Lh = vi+1, . . . , vn, then it is also good with respect to (T, L). Hence, by the induction hypothesis (applied to T {vi+1, . . . , vn} and the ordering Lh), we have |N h| ≤ |GhL|. The minimality of i implies that every vertex in {v1, . . . , vi−1} is either in GlL or N l. Furthermore, since vi is bad we have N l ⊆ N +(vi) ∩ [v1, vi−1] and N −(vi) ∩ [v1, vi−1] ⊆ GlL. Now using (12.3) we obtain

|GlL| ≥ |N −(vi) ∩ [v1, vi−1]| ≥ |N +(vi) ∩ [v1, vi−1]| ≥ |N l|.
Thus we have
|GL| = |GlL| + |GhL| ≥ |N l| + |N h| = |N +(vn)|,
implying that (12.4) holds for all positive integers n.
If a tournament has a vertex of out-degree zero, then this vertex satisﬁes (12.1) and the transitive tournament on n vertices shows that this vertex may be the only vertex satisfying (12.1). Using median orders Havet and Thomass´e [407] proved that unless there is a vertex of out-degree zero, a tournament has at least two vertices satisfying (12.1).
Havet and Thomass´e showed by an example that their method (just as Fisher’s method [237]) will not suﬃce to prove Conjecture 12.1.1 in full. However, as an illustration of the power of median orders as a tool for proofs of results (on tournaments), Havet and Thomass´e proved the following result. Recall that an oriented tree is an orientation of an undirected tree.

642 12. Additional Topics

Theorem

12.1.4

[407]

Every

tournament

of

order

at

least

7n−5 2

contains

every oriented tree on n vertices as a subdigraph.

This is a signiﬁcant step towards proving the following conjecture due to Sumner (see [740]). Previous results on the conjecture (including a proof that every tournament on at least (4 + o(1))n vertices contains every oriented tree on n vertices) were obtained by H¨aggkvist and Thomason [390].

Conjecture 12.1.5 (Sumner) Every tournament on at least 2n−2 vertices contains every oriented tree on n vertices.

12.2 Ordering the Vertices of a Digraph of Paired Comparisons
In this section we consider several methods for ordering the vertices of a weighted digraph. Even though all the methods we study can be applied to arbitrary weighted digraphs, we concentrate on so-called paired comparison digraphs (PCDs), a graph-theoretical model for the method of paired comparisons [183], which are deﬁned in Subsection 12.2.1. In that subsection, we consider also the score method and the feedback set ordering method to order the vertices of PCDs. Limitations of these two methods imply the necessity to introduce and study other methods of ordering. In the main part of this section we consider three methods of ordering that are due to Kano and Sakamoto, and were introduced in 1983. These methods are described in Subsection 12.2.2; several results on these methods are given in the following subsections.
12.2.1 Paired Comparison Digraphs
The method of paired comparisons is an approach to ordering a group of objects. In the framework of this method, objects are considered in pairs, a pair at a time, and the decision is made of which of the two is better. This procedure is repeated with all or some other pairs. This method is normally applied when objects are characterized by many parameters and/or some parameters are unknown or vague (of non-numerical nature). The method of paired comparisons is usually carried out by a team of experts. In general, the experts will have diﬀerent views and thus an object M will be favoured over an object N by some experts, while others will prefer N over M . (Notice that in general some pairs will not be compared at all.) Hence, the results of the use of the method of paired comparisons often have to be analyzed to ﬁnd an ‘average’ ordering.
To carry out such an analysis, a paired comparison digraph D is initially constructed. The vertices of D correspond to the objects and, for an ordered

12.2 Ordering the Vertices of a Digraph of Paired Comparisons 643
pair x, y of vertices (i.e. objects) in D, the arc xy is in D if and only if some experts prefer y to x. The weight of xy is the fraction of the experts that favour x over y. Formally, following Kano and Sakamoto [472, 473], we introduce a digraph of paired comparisons as follows. Let D = (V, A, ) be a weighted digraph in which every arc xy has a positive real weight (xy). A digraph D is called a paired comparison digraph (abbreviated to PCD) if D satisﬁes the following conditions:
(a) 0 < (xy) ≤ 1 for every xy ∈ A; (b) (xy) + (yx) = 1 if both xy and yx are arcs; (c) (xy) = 1 if xy ∈ A but yx ∈/ A.

u 0.2 0.8
0.7 0.3

v 1

0.1 w
x 0.9 Figure 12.1 A paired comparison digraph H.

See Figure 12.1 for an example of a paired comparison digraph. An (unweighted) digraph D = (V, A) can be viewed as a PCD by setting the weight of each arc of D as follows:
(i) (xy) = (yx) = 0.5 if xy, yx ∈ A; (ii) (xy) = 1 if xy ∈ A but yx ∈/ A.
We call the PCD D = (V, A, ) with the weight function determined by (i) and (ii) the uniform PCD corresponding to D. The positive (negative) score of a vertex x ∈ V is

σ+(x) =

(xy), (σ−(x) =

(yx).)

xy∈A

yx∈A

In Figure 12.1, σ+(u) = 0.5 and σ−(u) = 1.5. A PCD D is not always semicomplete (some pairs of vertices may not be
compared). If D is a tournament, then usually the vertices of D are ordered according to their positive score, with the ﬁrst vertex being of highest positive score. This approach, the score method, is justiﬁed by a series of natural axioms (see the paper [647] by Rubinstein). The score method can be naturally used for semicomplete PCDs. When a PCD is not semicomplete, the score

644 12. Additional Topics

method may produce results that are not justiﬁed from the practical point of view. For example, consider the digraph R = (V, A) with V = {1, 2, . . . , n}, n ≥ 5, and A = {12, 13} ∪ {41, 51, . . . , n1}. Let R = (V, A, ) be the uniform PCD corresponding to R. Even though the positive score of the vertex 1 is maximum, it is against our intuition to order in R the vertex 1 ﬁrst (i.e. the winner). This raises the question of ﬁnding a method of ordering the vertices of an arbitrary PCD, which agrees with the score method for semicomplete PCDs.
In Subsection 10.3.3, we studied a method of ordering of the vertices of a weighted digraph D = (V, A, ), the feedback set ordering (FSO). Recall that, for an ordering α = (v1, v2, . . . , vn), where n = |V | and {v1, v2, . . . , vn} = V, an arc (vi, vj) ∈ A is forward (backward) if i < j (i > j). In Figure 12.1, for the ordering β = (u, v, w, x), uv, ux and wx are (all) forward arcs; vu and xw are backward arcs. An ordering α = (v1, v2, . . . , vn) can be viewed as a bijection from V to {1, 2, . . . , n}. Thus, for a vertex x ∈ V , α(x) = i if x = vi. An ordering α of V is FSO-optimal if the number of backward arcs is minimum. Let OR(D) denote the set of all FSO-optimal orderings of V . In many cases, OR(D) has more than one element. In these cases, the ﬁnal objective is to calculate the proper FSO-rank of every vertex x of D, i.e.

πF SO(x)

=

1 |OR(D)|

α(x).

α∈OR(D)

(12.5)

The ﬁnal ordering is carried out according to the proper FSO-ranks; the best vertex has the smallest FSO-rank.
Although the FSO method is of deﬁnite importance for some applications, it does not agree with the score method for semicomplete digraphs: Let T be the digraph with vertices 1, 2, 3, 4, 5, in which there is a pair of opposite arcs between any pair of distinct vertices except for the pairs {i, i + 1}, i = 1, 2, 3, 4, and {1, 3}. Moreover, i→i + 1 for i = 1, 2, 3, 4 and 3→1. Let T be the uniform PCD corresponding to the semicomplete digraph T . According to the score method, the set of optimal orderings is {(3, i, j, k, 5) : {i, j, k} = {1, 2, 4}}. This implies that the proper ranks of the vertices according to the score method (by an obvious analogue of (12.5)) are πS(3) = 1, πS(1) = πS(2) = πS(4) = 3 and πS(5) = 5. At the same time, the orderings that are optimal according to FSO form the set OR(T ) = {(1, 2, 3, 4, 5), (2, 3, 1, 4, 5), (3, 1, 2, 4, 5), (2, 3, 4, 5, 1), (3, 1, 4, 5, 2), (3, 4, 5, 1, 2)}. (To see this, ﬁrst observe that the contribution from 2-cycles is independent on the ordering and hence can be ignored. Secondly, observe that in an FSO-optimal ordering, which actually has only one backward ordinary arc1, 3 must be before 4 and 5, 4 before 5, and the vertices 1,2,3 must appear in this order, or as either 2,3,1 or 3,1,2.) By (12.5), we obtain that

πF SO(3) < πF SO(1) = πF SO(2) < πF SO(4) < πF SO(5).
1 Recall that an arc xy is ordinary if the opposite arc yx does not exist.

12.2 Ordering the Vertices of a Digraph of Paired Comparisons 645
We leave it to the reader to construct other examples of semicomplete PCDs, for which FSO and the score method produce diﬀerent results (Exercise 12.4).
12.2.2 The Kano-Sakamoto Methods of Ordering
In this subsection we describe three methods (forward, backward and mutual) of ordering introduced by Kano and Sakamoto [472, 473]. Notice that, for semicomplete digraphs, all these methods agree with the score method. In Subsection 12.2.3, we prove this important result. In Subsection 12.2.4, we characterize orderings that are optimal with respect to the mutual method. In Subsection 12.2.5, we study the complexity of the problems to ﬁnd forward and backward optimal orderings as well as some ways to obtain polynomial algorithms for these problems restricted to semicomplete multipartite PCDs and PCDs close to them.
Although the reader may ﬁnd examples of PCDs for which the methods of Kano and Sakamoto, especially the mutual one, produce counter-intuitive orderings, these methods seem to give adequate results for PCDs close to semicomplete, which are perhaps of the main interest for the method of paired comparisons.
Let D = (V, A, ) be a PCD. Let x and y be a pair of distinct vertices in D and let α be an ordering of D. Then αxy denotes an ordering of D as follows: αxy(z) = α(z) for every z ∈/ {x, y}, and αxy(x) = α(y), αxy(y) = α(x). The length of an arc vu ∈ A is (vu)|α(v) − α(u)|. The forward (backward) length fD(α) (bD(α)) of α is the sum of the lengths of all forward (backward) arcs. The mutual length of α is mD(α) = fD(α)−bD(α). In Figure 12.1, the ordering β = (u, v, w, x) has forward length fH (β) = (0.2·1+0.3·3+0.9·1) = 2, backward length bH (β) = (0.8·1 + 1·1 + 0.1·1 + 0.7·3) = 4, and mutual length mH (β) = −2. Clearly, (x, w, v, u) is a better ordering (with respect to all three criteria) than β. Even fH (βuv) = 2.3 > fH (β).
An ordering α is forward (backward, mutual) optimal if the corresponding parameter fD(α) (bD(α), mD(α)) is maximum (minimum, maximum) over all orderings of D. The set of all forward (backward, mutual) optimal orderings of D is denoted by F OR(D) (BOR(D), M OR(D)). The ﬁnal objective is to calculate the proper forward rank (proper backward rank, proper mutual rank) of every vertex x of D. They are obtained by replacing OR(D) with F OR(D) (BOR(D),M OR(D)) in (12.5). Clearly, the best vertex of D has the lowest proper rank in each case. In Figure 12.1, BOR(H) = {(w, v, x, u), (w, x, v, u)} (we will see how to ﬁnd BOR(D) for a semicomplete multipartite PCD in Subsection 12.2.5). Thus, πB(w) = 1, πB(x) = πB(v) = 2.5 and πB(u) = 4.
12.2.3 Orderings for Semicomplete PCDs
Lemma 12.2.1 [472, 473] Let K = (V, A, ) be a semicomplete PCD with n vertices, and let α be an ordering of V . Then

646 12. Additional Topics

fK (α)

=

1 3

n(n2

−

1) −

σ+(x)α(x);

x∈V

bK (α) =

σ+(x)α(x)

−

1 6

n(n2

−

1).

x∈V

Proof: The equality for fK(α) can be proved by induction on n (Exercise 12.5). The equality for bK (α) can be easily obtained from that for fK (α) by using the fact that fK (α) + bK(α) = n(n2 − 1)/6, the proof of which is left as Exercise 12.6.

This lemma implies the following:

Theorem 12.2.2 [472, 473] Let K = (V, A, ) be a semicomplete PCD with
n vertices, and let α be an ordering of V . Then α = (v1, v2, . . . , vn) is forward (backward) optimal if and only if σ+(vi) ≥ σ+(vi+1) for every i = 1, 2, . . . , n− 1.

Proof: Let α = (v1, v2, . . . , vn) be a forward (backward) optimal ordering. Suppose that σ+(vi) < σ+(vi+1) for some i. By Lemma 12.2.1,
fK (α) − fK (αvivi+1 ) = σ+(vi) − σ+(vi+1) < 0.
Hence, α is not forward optimal, a contradiction. Analogously, we can show that α is not backward optimal, a contradiction. So, we may conclude that σ+(vi) ≥ σ+(vi+1) for every i = 1, 2, . . . , n − 1. On the other hand, let β = (w1, w2, . . . , wn) be an ordering such that σ+(wi) ≥ σ+(wi+1) for every i = 1, 2, . . . , n−1. By the formula for fK (α) in Lemma 12.2.1, fK (α) = fK (β). Hence, β ∈ F OR(K). Analogously, we see that β ∈ BOR(K).

It is easy to see that this theorem allows one to compute the proper
forward and backward ranks of a semicomplete PCD in polynomial time.
Clearly, Theorem 12.2.2 is also valid for the mutual orderings of the semi-
complete PCDs. However, for the mutual orderings, a more general assertion
is true. We prove it in the next subsection. For a vertex x of a PCD, let σ∗(x) = σ+(x) − σ−(x). Since for a semicom-
plete PCD D of order n, σ+(x) + σ−(x) = n − 1, we have that σ+(x) ≥ σ+(y) if and only if σ∗(x) ≥ σ∗(y). Therefore, Theorem 12.2.2 can be reformulated using σ∗ instead of σ+.

12.2.4 The Mutual Orderings
Kano and Sakamoto proved the following characterization of the mutual length of an ordering α:
Lemma 12.2.3 [472] Let D = (V, A, ) be a PCD and let α be an ordering of V . Then the mutual length of α satisﬁes
mD(α) = − σ∗(x)α(x).
x∈V

12.2 Ordering the Vertices of a Digraph of Paired Comparisons 647

Proof: Deﬁne

¯(u, v) =

(u, v) if (u, v) is an arc of D 0 otherwise (in particular, if u = v).

Let F (α) (B(α)) be the set of forward (backward) arcs for α. We have

mD(α) =

(x, y)(α(y) − α(x)) −

(x, y)(α(x) − α(y))

(x,y)∈F (α)

(x,y)∈B(α)

= (x, y)(α(y) − α(x))

(x,y)∈A





= ¯(x, y)α(y) −  ¯(x, y)α(x)

y∈V x∈V

x∈V y∈V

= σ−(y)α(y) − σ+(x)α(x) = − σ∗(x)α(x).

y∈V

x∈V

x∈V

Analogously to Theorem 12.2.2, but using the previous lemma instead of Lemma 12.2.1, we can prove the following:
Theorem 12.2.4 [472] Let D = (V, A, ) be a PCD with n vertices, and let α be an ordering of V . Then α = (v1, v2, . . . , vn) is mutual optimal if and only if σ∗(vi) ≥ σ∗(vi+1) for every i = 1, 2, . . . , n − 1.
This theorem shows that the proper mutual ranks of vertices depend only on σ∗, not on the structure of a PCD. This indicates that perhaps mutual orderings are not sound for non-semicomplete PCDs.
12.2.5 Complexity and Algorithms for Forward and Backward Orderings
We saw in the previous subsection how to ﬁnd a mutual optimal ordering (simply order according to the values of σ∗); this obviously can be done in polynomial time. The time complexity of the same problems for forward and backward optimal ordering are signiﬁcantly more diﬃcult (unless P = N P) as we see below.
Theorem 12.2.5 [473] The problem of ﬁnding a backward optimal ordering of a PCD is N P-hard.
Proof: The following problem, called the optimal linear arrangement problem (OLAP), is N P-completes see [303, page 200].
Instance: A graph G = (V, E) and a positive integer k.

648 12. Additional Topics

Question: Is there an ordering α of V so that
|α(x) − α(y)| ≤ k.
{x,y}∈E

↔
Let G = (V, E) be a graph and let D =G be the complete biorientation of G. Let also (xy) = 0.5 for every xy ∈ A(D). Then for every ordering α

|α(x) − α(y)| = 2fD(α).
{x,y}∈E
Hence, the OLAP is polynomially reducible to the problem of ﬁnding a backward optimal ordering of the vertices of a PCD.
A similar but slightly longer proof in [373] shows that the problem to ﬁnd a forward optimal ordering of the vertices of a PCD is N P-hard too (Exercise 12.7). This means that, in order to design polynomial algorithms to compute forward and backward optimal orderings, we need to restrict ourselves to special classes of PCDs. Since the method of paired comparisons is of main interest when a PCD is quite dense, it is useful to consider PCDs close to semicomplete. For semicomplete multipartite PCDs, characterizations of forward backward (forward) orderings were obtained by Kano [471] (Gutin and Yeo [373], respectively). In this subsection, we describe only the main result of [471]; the characterization in [373] is more complicated. Using the above-mentioned characterizations, Gutin [360] and Gutin and Yeo [373] constructed polynomial algorithms to ﬁnd proper backward ranks and proper forward ranks, respectively, of the vertices of semicomplete multipartite PCDs. We will also discuss the method of multipartite completion (see [471, 473]), which allows one to ﬁnd eﬀectively all forward and backward optimal orderings in PCDs close to semicomplete multipartite PCDs.
Let D = (V, A, ) be a semicomplete multipartite PCD and let α be an ordering of V . Then, for a vertex x ∈ V , we deﬁne ψ(α, x) = σ+(x) + |{y ∈ U : α(y) > α(x)}|, where U is the partite class of D containing x. The following lemma is proved in [471]; we give a much shorter proof adopted from [373].

Lemma 12.2.6 Let α be an ordering of the vertices of a semicomplete multipartite PCD D = (V, A, ), n = |V |. Then

bD(α) =

ψ(α,

x)α(x)

−

1 6

n(n2

−

1).

x∈V

Proof: For every partite set U of D, add the set of arcs {vw : v, w ∈ U, α(w) > α(v)} (all of weight one) to A. The new PCD H is semicomplete. Observe that the positive score of a vertex x in H equals ψ(α, x). Now the formula of this lemma follows from the equality for bK(α) in Lemma 12.2.1

12.2 Ordering the Vertices of a Digraph of Paired Comparisons 649
and the fact that bD(α) = bH (α) (which holds since all new arcs in H are forward).
This lemma implies the following result (Exercise 12.9):
Lemma 12.2.7 [471] Suppose that β is an ordering of the vertices of a semicomplete multipartite PCD D, and X and Y are distinct partite sets of D. We have the following:
(a) If x, y ∈ X and m = β(y) − β(x) > 0, then
bD(βxy) − bD(β) = m(σ+(x) − σ+(y)).
(b) If x ∈ X, y ∈ Y , m = β(y) − β(x) > 0 and there is no vertex z ∈ X ∪ Y such that β(x) < β(z) < β(y), then
bD(βxy) − bD(β) = m(ψ(β, x) − ψ(β, y)).
Using this lemma one can prove the following (the actual proof is left as Exercise 12.10):
Theorem 12.2.8 [471] Let D be a semicomplete multipartite PCD of order n. An ordering α = (v1, v2, . . . , vn) is backward optimal if and only if the following two conditions hold.
(a) ψ(α, v1) ≥ ψ(α, v2) ≥ . . . ≥ ψ(α, vn). (b) For every pair x, y of vertices in the same partite set of D, α(x) < α(y)
implies σ+(x) ≥ σ+(y).
We illustrate this theorem by the semicomplete bipartite PCD H in Figure 12.1. We have σ+(u) = 0.5, σ+(v) = σ+(x) = 0.8, σ+(w) = 1.9. Let α be backward optimal. Then, by (b), α(w) is less than α(u) implying that ψ(α, w) = 2.9, ψ(α, u) = 0.5. Since the positive scores of v and x coincide, there are two backward optimal orderings α , α and ψ(α , v) = ψ(α , x) = 0.8, ψ(α , v) = ψ(α , x) = 1.8. By (a), BOR(H) = {(w, x, v, u), (w, v, x, u)}. Hence, πB(w) = 1, πB(x) = πB(v) = 2.5 and πB(u) = 4. Another example to illustrate this theorem is given in Exercise 12.11.
Applying Theorem 12.2.8, it is not diﬃcult to construct a polynomial algorithm to ﬁnd proper backward ranks of the vertices of a semicomplete multipartite PCD [360] (Exercise 12.12).
Let (D) be the backward length of a backward optimal ordering of a digraph D. Let D be a non-semicomplete multipartite PCD with partite sets V1, V2, . . . , Vk. The semicomplete multipartite PCD obtained from D by adding exactly one arc between every pair of non-adjacent vertices from distinct partite sets is called a multipartite completion of D. Let C(D) be the set of multipartite completions of D. The signiﬁcance of this set is given in the following theorem:

650 12. Additional Topics
Theorem 12.2.9 [473] Let D be a non-semicomplete multipartite PCD. Then
(D) = min{ (H) : H ∈ C(D)}.
Moreover, if H = {H ∈ C(D) : (H) = (D)}, then
BOR(D) = ∪H∈HBOR(H).
Proof: Exercise 12.13.
Clearly, if the cardinality of C(D) is not large, this theorem allows one to list backward optimal orderings of D.
12.3 (k, l)-Kernels
Galeana-S´anchez and Li [293] introduced the concept of a (k, l)-kernel in a digraph. This concept generalizes several well-known notions of special independent sets of vertices such as a kernel and a quasi-kernel. In this section, we discuss (k, l)-kernels and their special important cases, kernels and quasikernels, and study some basic properties of kernels and quasi-kernels. The notion of a (k, l)-kernel has various applications, especially that of a (2, 1)kernel.
Let k and l be integers with k ≥ 2, l ≥ 1, and let D = (V, A) be a digraph. A set J ⊆ V is a (k, l)-kernel of D if
(a) for every ordered pair x, y of distinct vertices in J we have dist(x, y) ≥ k, (b) for each z ∈ V − J, there exists x ∈ J such that dist(z, x) ≤ l.
A kernel is a (2, 1)-kernel and a quasi-kernel is a (2, 2)-kernel. GaleanaS´anchez and Li [293] proved some results which relate (k, l)-kernels in a digraph D to those in its line digraph. In particular, they proved the following:
Theorem 12.3.1 Let D be a digraph with δ−(D) ≥ 1. Then the number of (k, 1)-kernels in L(D) is less than or equal to the number of (k, 1)-kernels in D.
12.3.1 Kernels
We start with an equivalent deﬁnition of a kernel. A set K of vertices in a digraph D = (V, A) is a kernel if K is independent and the ﬁrst closed neighbourhood of K, N −[K], is equal to V. This notion was introduced by von Neumann in [731]; kernels have found many applications, for instance in game theory (a kernel represents a set of winning positions, cf. [731] and Chapter 14 in the book by Berge [108]), in logic [109] and in list edge-colouring of graphs (see Section 12.4). Chva´tal (see [303], p. 204) proved that the problem to verify whether a given digraph has a kernel is N P-complete. Several suﬃcient

12.3 (k, l)-Kernels 651
conditions for the existence of a kernel have been proved. Many of these conditions can be trivially extended to kernel-perfect digraphs, i.e. digraphs for which every induced subdigraph has a kernel. The notion of kernel-perfect digraphs allows one to simplify certain proofs (due to the possibility of using induction, see the proof of Theorem 12.3.2) and is quite useful for applications (see Section 12.4).
Clearly, every symmetric digraph, i.e. digraph whose every arc belongs to a 2-cycle, is kernel-perfect (every maximal independent set is a kernel). It was proved by von Neumann and Morgenstern [731] that every acyclic digraph is kernel-perfect. Richardson [635] generalized this result as follows:
Theorem 12.3.2 Every digraph with no odd cycle is kernel-perfect.
The proof of Theorem 12.3.2, which we present here, is an adaptation of the one by Berge and Duchet [110]. A digraph which is not kernel-perfect is called kernel-imperfect. We say that a digraph D is critical kernelimperfect if D is kernel-imperfect, but every proper induced subdigraph of D is kernel-perfect.
Lemma 12.3.3 Every critical kernel-imperfect digraph is strong.
Proof: Assume the converse and let D = (V, A) be a non-strong critical kernel-imperfect digraph. Let T be a terminal strong component of D and let S1 be a kernel of T . Since D has no kernel, the set M = V − N −[S1] is non-empty. Hence the fact that D is critical kernel-imperfect implies that D M has a kernel S2. The set S1 ∪ S2 is independent since no arc goes from S1 to S2 (by the deﬁnition of a terminal strong component) and no arc goes from S2 to S1 (by the deﬁnition of M ). Clearly, N −[S1 ∪ S2] = V. Hence, S1 ∪ S2 is a kernel of D, a contradiction.
Proof of Theorem 12.3.2: Let D be a kernel-imperfect digraph with no odd cycle and let D be a critical kernel-imperfect subdigraph of D. By the lemma above, D is strong. Since D is strong and has no odd cycles, by Theorem 1.8.1, D is bipartite. Let K be a partite set in D . Since D is strong, K is a kernel of D , a contradiction.
This theorem has been strengthened in a number of papers. The conditions (a) and (b) of the following theorem are due to Duchet (see the papers by Berge [110]), and Galeana-S´anchez and Neumann-Lara [294], respectively). Galeana-S´anchez showed that for every k ≥ 2, there are non-kernel-perfect digraphs for which every odd cycle has at least k chords [291].
Theorem 12.3.4 A digraph D is kernel-perfect if at least one of the following conditions holds:
(a) Every odd cycle has two arcs belonging to 2-cycles; (b) Every odd cycle has two chords whose heads are consecutive vertices of
the cycle.

652 12. Additional Topics
There were other attempts to strengthen Richardson’s Theorem 12.3.2. In particular, Duchet (see [132]) conjectured that every digraph D, which is not an odd cycle and which does not have a kernel, contains an arc e such that D − e has no kernel either. Aparsin, Ferapontova and Gurvich [26] found a counterexample to this conjecture which we describe below. For an integer n ≥ 2 and a set W ⊆ {1, 2, . . . , n − 1}, a circular digraph Cn(W ) is deﬁned as follows: V (Cn(W )) = {1, 2, . . . , n} and
A(Cn(W )) = {(i, i + j (mod n)) : 1 ≤ i ≤ n, j ∈ W }.
↔
In particular, Cn({1, 2, . . . , n − 1}) =Kn and Cn({1}) = Cn. Aparsin, Ferapontova and Gurvich proved that the circular digraph
C43({1, 7, 8}) has no kernel, but after deletion of any arc in this digraph a kernel will appear. Observe that by the symmetry of C43({1, 7, 8}) one needs only to show that C43({1, 7, 8}) − (1, 2), C43({1, 7, 8}) − (1, 8) and C43({1, 7, 8})−(1, 9) have kernels. This task is left as Exercise 12.16. We note that C43({1, 7, 8}) is the only known counterexample to the Duchet conjecture; Gurvich (private communication, December 1999) suspects that there is an inﬁnite such family of circular digraphs. It was also proved in [26] that Cn({1, 7, 8}) has a kernel if and only if n ≡ 0 (mod 3) or n ≡ 0 (mod 29). The following problem seems quite natural:
Problem 12.3.5 Characterize circular digraphs with kernels.
A biorientation D of a graph G is called normal, if every subdigraph of D which is a semicomplete digraph has a kernel. An undirected graph G is kernel-solvable if every normal biorientation of G has a kernel. Boros and Gurvich [132] showed that a slight modiﬁcation of the above conjecture of Duchet holds. They proved the following:
Theorem 12.3.6 Let G be a connected non-kernel-solvable graph, which is not an odd cycle of length at least 5. Then there exists an edge e in G such that G − e is not kernel-solvable either.
Berge and Duchet (see [543]) conjectured that a graph G is perfect2 if and only if G is kernel-solvable. Boros and Gurvich [131] proved one direction of this conjecture, namely:
Theorem 12.3.7 Every perfect graph is kernel-solvable.
2 A graph G is perfect if, for every induced subgraph H of G, the chromatic number of H is equal to the order of the largest clique of H.

12.3 (k, l)-Kernels 653
The two original proofs of Theorem 12.3.7 are quite involved and lengthy. Using the notion of a fractional kernel, Aharoni and Holzman [3] found a much shorter proof of Theorem 12.3.7. Many special cases of the above conjecture had been proved before, see [543] and references therein. In particular, Maﬀray [543] proved the following result:
Theorem 12.3.8 A biorientation of a line graph is kernel-perfect if and only if it is normal.
This result was extended to line multigraphs by Borodin, Kostochka and Woodall [130].
12.3.2 Quasi-Kernels
We start with an equivalent deﬁnition of a quasi-kernel. A set Q of vertices in a digraph D = (V, A) is a quasi-kernel if Q is independent and the second closed in-neighbourhood of Q, N −2[Q], is equal to V . The two results on 2kings (or, more precisely, 2-serfs) in tournaments mentioned in the beginning of Section 12.3.2 have been extended to quasi-kernels in arbitrary digraphs as follows. The ﬁrst theorem is by Chv´atal and Lov´asz [162] (see also [524]). It has a surprisingly short proof.
Theorem 12.3.9 Every digraph D has a quasi-kernel.
Proof: The proof is by induction on the order of D. The base case when the number of vertices is 1 is trivial. Let D be a digraph of order n and assume (as the induction hypothesis) that all digraphs with less than n vertices have a quasi-kernel. If D has a kernel, we are done. Assume D has no kernel. Let x be a vertex in D. Consider D = D − (x ∪ N −(x)). By induction, D has a quasi-kernel Q . If Q ∪ x is an independent set, then, clearly, this set is a quasi-kernel in D.
Suppose now that Q ∪ x is not independent. Then there exists a vertex z ∈ Q which is adjacent to x. As z ∈/ N −(x), x→z. Now it follows that Q is a quasi-kernel in the whole digraph D.
The second theorem is by Jacob and Meyniel [454].
Theorem 12.3.10 If a digraph D = (V, A) has no kernel, then D contains at least three quasi-kernels.
Proof: By Theorem 12.3.9, D has a quasi-kernel Q1. Since D has no kernel, we have V = N −[Q1]. Let Q2 be a quasi-kernel of D − N −[Q1]. We will prove that Q2 = Q2 ∪ (Q1 − N −(Q2)) is a quasi-kernel of D. It is straightforward to see that Q2 is independent and
V = (V − N −[Q1]) ∪ N −[Q1 ∩ N −(Q2)] ∪ N −[Q1 − N −(Q2)].

654 12. Additional Topics
By the deﬁnition of Q2, every vertex of V − N −[Q1] is the initial vertex of a path of length at most two terminating in Q2. Since N −[Q1 ∩ N −(Q2)] ⊆ N −2[Q2], every vertex of N −[Q1 ∩ N −(Q2)] is the initial vertex of a path of length at most two terminating in Q2. Since N −[Q1 − N −(Q2)] ⊆ N −[Q1], a vertex of N −[Q1 − N −(Q2)] either belongs to Q1 or is the tail of an arc whose head is in Q1 − N −(Q2). Hence, Q2 is a quasi-kernel.
Observe that Q1 ∩ Q2 = ∅ and Q2 = ∅. Thus, Q2 = Q1. As Q2 is not a kernel of D, we have V = N −[Q2]. Let Q3 be a quasikernel of D − N −[Q2] and let Q3 = Q3 ∪ (Q2 − N −(Q3)). As above, we can demonstrate that Q3 is a quasi-kernel distinct from Q2. It remains to show that Q3 = Q1. Observe that Q3 ⊆ V − N −[Q2] and Q1 ⊆ N −[Q2]. Thus, Q1 ∩ Q3 = ∅. By this fact and since Q3 is nonempty, we conclude that Q3 = Q1.
12.4 List Edge-Colourings of Complete Bipartite Graphs
The topic of this section may seem to have nothing to do with directed graphs, but as we will see, directed graphs have been a useful tool for solving the socalled Dinitz problem which we now describe. Our discussion in this section is inspired by the book [8] by Aigner and Ziegler and Galvin’s paper [302].
An n × n matrix M over the integers {1, 2, . . . , n} is a Latin square (of size n) if no two entries in the same row and no two entries in the same column are equal. It is an easy exercise to show that for every integer n ≥ 1 there exists a Latin square (Exercise 12.17).
A proper edge-colouring of an undirected graph G = (V, E) is an assignment of integers to the edges in such a way that no two edges with a common end-vertex receive the same colour. The smallest k such that a graph G has a proper edge-colouring using only colours from the set {1, 2, . . . , k} is called the chromatic index of G. Thus it is easy to see that there is a 1-1 correspondence between the set of Latin squares of size n and the set of proper edge-colourings of the complete bipartite graph Kn,n using colours {1, 2, . . . , n}.
Proper edge-colourings are useful for various practical applications such as time table construction, see e.g. the book by Jensen and Toft [459]. In rest of this section we omit the word ‘proper’ since only proper edge-colourings will be considered.
In 1979 Dinitz raised the following problem (see e.g. [221, 222]): suppose we are given an n × n matrix whose (i, j) entry is a set C(i, j) of n integers, 1 ≤ i, j ≤ n, is it always possible to choose from each set C(i, j) one element cij in such a way that the elements in each row are distinct and the elements in each column are distinct?
The Dinitz problem can be reformulated in terms of edge-colourings of complete bipartite graphs. Suppose that we are given, for each edge ij of the complete bipartite graph Kn,n, a set C(i, j) of possible colours for that edge.

12.4 List Edge-Colourings of Complete Bipartite Graphs 655
Does there always exist an edge-colouring of Kn,n so that for each edge ij the colour cij of ij belongs to C(i, j)? In this formulation the Dinitz problem is just a special case of the more general list colouring conjecture (see e.g. the book by Jensen and Toft [459]) which states that, if a graph G has an edge-colouring with k colours, then no matter how we assign to each edge e of G a set Ce of k arbitrary colours, G has an edge colouring such that the colour of the edge e belongs to the set Ce for each e ∈ E. Such a colouring is called a list edge-colouring of G. An important step towards settling the Dinitz conjecture was made by Jansen [458] who proved that, if all lists have length n + 1 (instead of n) then a solution always exists.
In order to apply results on kernel in digraphs we study the line graph of Kn,n. The deﬁnition of a line graph is analogous to that of a line digraph: L(G) contains a vertex for each edge of G and two vertices in L(G) are joined by an edge if and only if the corresponding edges have an end-vertex in common. It is easy to see that every list edge-colouring of Kn,n corresponds to a list vertex colouring (in short a list colouring) of L(Kn,n) using the same sets (lists). Hence, in order to solve the Dinitz problem, it suﬃces to prove that no matter which sets C11, C12, . . . , Cnn, each of size n, we associate with the n2 vertices of L(Kn,n), there exists a proper vertex colouring of L(Kn,n) such that the colour of the vertex i is chosen from the corresponding set Ci.
Now we return to digraphs. The following lemma is attributed to Bondy, Boppana and Siegel in [15, Remark 2.4, p. 129] (see also [302]).
Lemma 12.4.1 Let D = (V, A) be a digraph and suppose that for each vertex v ∈ V we are given a prescribed set C(v) of colours satisfying |C(v)| > d+(v). If D is kernel perfect (i.e. every induced subdigraph of D has a kernel), then there exists a list colouring of U G(D) which uses a colour from C(v) for each v ∈ V.
Proof: The proof is by induction on n, the case n = 1 being trivially true. Fix a colour c which belongs to at least one of the sets C(v), v ∈ V and let X(c) := {v ∈ V |c ∈ C(v)}. By the assumption of the lemma the induced subdigraph D X(c) has a kernel Y . Now colour each vertex of V which belongs to Y by colour c (which is a proper choice by the deﬁnition of X(c)) and consider the digraph D = D − Y with colour sets C (v) = C(v) − {c}. Notice that for each vertex v ∈ X(c) − Y the out-degree of v in D is at least one smaller than the out-degree of v in D and hence we have |C (v)| > d+D (v) for all v ∈ V (D ). Furthermore, every vertex u that does not belong to X(c) has |C(u)| = |C (u)|. Thus, by the induction hypothesis, there is a list colouring of D which uses a colour from C (v) for each v ∈ V (D ). Using that colouring along with the colour c for vertices in Y we achieve the desired colouring.
From Lemma 12.4.1 we see that, if we can establish the existence of an orientation D of L(Kn,n) such that every induced subgraph of D has a kernel

656 12. Additional Topics
and d+D(v) ≤ n − 1 for each vertex v, then we have proved that L(Kn,n) has list chromatic number at most n as desired.
We show below that in order to obtain such an orientation we can use any n-edge-colouring of Kn,n and orient appropriately. To prove the existence of a kernel in each induced subgraph we use the concept of stable matchings which we discuss below.
Below we assume that we are given a bipartite graph B = (X ∪ Y, E) and that for each vertex u ∈ X ∪ Y there is a ﬁxed ordering >u on the neighbours of u. That is, >u induces an ordering v1 >u v2 >u . . . >u vdB(u) on NB(u).
A matching M in B = (X ∪ Y, E) is stable with respect to the family of orderings {>u |u ∈ X ∪ Y } if the following holds for all uv ∈ E − M : either uy ∈ M for some y such that y >u v or xv ∈ M for some x with x >v u.
Stable matchings have an amusing real-life interpretation. Consider X as a set of men and Y as a set of women and let the existence of an edge xy ∈ E, x ∈ X, y ∈ Y mean that person x and y might marry. As we saw in Theorem 3.11.2, given B we can determine in polynomial time the maximum number of men and women that can marry without anybody committing bigamy. However, in practice the fact that a man x and a woman y might marry does not mean that this particular choice is the optimal one for x or y. Hence, in a more realistic setting each person has a list of possible spouses and some ranking among these as to who would be the favourite choice down to the least wanted spouse (but still a possible choice). Now we see that this description corresponds to the orderings described above. Furthermore, stability of a given matching corresponds to saying that among the men and women that are paired for marriage there is no pair xy for which x prefers some other woman y to y and at the same time woman y prefers some other man x to x. So in some sense a stable matching corresponds to a situation where no pair is highly likely to split up.
The concept of stable matchings was introduced by Gale and Shapley who proved the following slightly surprising fact. We leave the proof as Exercise 12.18.
Theorem 12.4.2 [290] For every bipartite graph B = (X ∪ Y, E) and every family of orderings {>u |u ∈ X ∪ Y } which arises from a local linear ordering of the neighbours of each vertex in B, there exists a stable matching with respect to {>u |u ∈ X ∪ Y }.
In Exercise 12.19 the reader is asked to show by an example that it is not always true that there exists a maximum matching which is stable.
For more information about stable matchings see e.g. the papers [40, 41] by Balinski and Ratier. Now we are ready to describe Galvin’s proof of the Dinitz conjecture.
Theorem 12.4.3 [302] For every n ≥ 1 the complete bipartite graph Kn,n has list chromatic index n.

12.4 List Edge-Colourings of Complete Bipartite Graphs 657
Proof: Denote the vertices of L(Kn,n) by (i, j), 1 ≤ i, j ≤ n, where (i, j) is adjacent to (i , j ) if and only if i = i or j = j , but not both. Let Q be any Latin square of size n (recall that this corresponds to a proper edge-colouring of Kn,n) and denote by Qij the ijth entry of Q. Let Dn be the oriented graph obtained from L(Kn,n) by orienting the edges as follows:
(i, j)→(i, j ) if and only if Qij < Qij and (i, j)→(i , j) if and only if Qij > Qi j (see Figure 12.2).
123 231 312
Figure 12.2 The orientation of L(K3,3) based on a Latin square of size 3.
It is easy to see that D is (n−1)-regular (Exercise 12.20). Thus, by Lemma 12.4.1 we just have to prove that every induced subdigraph of D has a kernel. To prove this we use Theorem 12.4.2.
Let D be an arbitrary induced subdigraph of D and let B = (X, Y, E) be the corresponding bipartite subgraph of Kn,n induced by those edges for which the corresponding vertex (i, j) belongs to D . For each vertex i ∈ X we deﬁne an ordering >i of the neighbours of i in B by letting j >i j whenever (i, j)→(i, j ) in D. Similarly, for each j ∈ Y we deﬁne the ordering >j of the neighbours of j in B by letting i >j i whenever (i, j)→(i , j) in D.
According to Theorem 12.4.2 B has a stable matching M with respect to {>u |u ∈ X ∪ Y }. Since M is also a matching in Kn,n the corresponding vertices are independent in D. Furthermore, it follows from the fact that M is stable with respect to {>u |u ∈ X ∪ Y } that for every (i, j) such that ij ∈ M , either there exist j ∈ Y such that ij ∈ M and j >i j or there exists an i ∈ X such that i j ∈ M and i >j i. In the ﬁrst case we have (i, j)→(i, j ) and in the second case we have (i, j)→(i , j) in D. Thus we have shown that every vertex of D which is not in M dominates a vertex in M . Hence M is a kernel and the proof is complete.
The idea of orienting L(Kn,n) as we did above is due to Maﬀray [543].

658 12. Additional Topics

12.5 Homomorphisms – A Generalization of Colourings
Let D and H be digraphs. A mapping f : V (D)→V (H) is a homomorphism if it preserves arcs, that is, xy ∈ A(D) implies f (x)f (y) ∈ A(H). We will always write f : D→H or just D→H (when the actual homomorphism is not important). If there is no homomorphism from D to H, then we write D→H. See an illustration in Figure 12.3. We say that G is homomorphic to H if G→H. Similarly, for undirected graphs a homomorphism is an edge preserving map. To motivate what follows, we start our discussion from undirected graphs.

1 32

1 23 32

1 22 13

12 (a) (b) (c)
Figure 12.3 Illustrating the concept of a homomorphism; (a) A 3-cycle C3; (b) and (c) show digraphs with homomorphisms to C3 indicated by the labelling.

Recall that an undirected graph is k-colourable if we can assign numbers 1, 2, . . . , k to its vertices such that adjacent vertices receive distinct numbers (colours). It is easy to see that an undirected graph G is k-colourable if and only if G→Kk (the complete graph on k vertices). Based on this observation we say that a (di)graph G is H-colourable for some (di)graph H if G→H and we call the mapping itself an H-colouring of G. Thus, if both G and H are given as part of the instance, the decision problem ‘Is there a homomorphism of G to H?’ properly includes k-colouring, and is therefore N P-complete [474].
It is interesting to consider the same question when the graph H is ﬁxed in advance. The H-colouring problem is formally deﬁned as follows:
H -colouring Instance: A ﬁnite graph G. Question:: Is there a homomorphism of G to H?
It is not diﬃcult to see that a graph G has a homomorphism to a bipartite graph B if and only if G is 2-colourable (and hence is homomorphic to K2). As we know this last question is the same as checking whether G is bipartite

12.5 Homomorphisms – A Generalization of Colourings 659
and hence easy (since this can be done using BFS or DFS). However in the case when the target graph (that is, the graph to which we want to map the given graph) H is not bipartite, the H-colouring problem is always diﬃcult as shown by Hell and Neˇsetˇril.
Theorem 12.5.1 [412] If H is a ﬁxed ﬁnite non-bipartite graph, then Hcolouring is N P-complete. If H is a ﬁxed bipartite graph, then H-colouring is polynomial.
So, for undirected graphs the division between easy and hard problems is very clear: bipartite versus non-bipartite. For directed graphs the situation is much less clear. In the next pages we give some results and conjectures which illustrate the topic and interesting open problems.
First observe that, if H→H for some induced subdigraph H of H, then D→H if and only if D→H (i.e. homomorphisms compose). Let H be a subdigraph of H. A homomorphism r : H→H is called a retraction if the restriction of r to H is the identity map on H . If there exists a retraction H→H , then H is called a retract of H. A digraph is a core if and only if it has no proper retracts. The above observation shows that it suﬃces to study the H-colouring problem for those digraphs that are cores. Up to isomorphism every digraph has a unique core (see Exercise 12.21). Unfortunately deciding whether a digraph is indeed a core is a diﬃcult problem.
Theorem 12.5.2 [413] It is N P-complete to decide whether a given input digraph is not a core3.
However for some classes of digraphs it is easy to tell whether they are cores or not. It is an easy exercise to show that every semicomplete digraph is a core (Exercise 12.22). It is slightly more diﬃcult to characterize those semicomplete bipartite digraphs that are cores (Exercise 12.23).
Our ﬁrst results deal with directed paths and cycles. The proof of the following easy observation by Maurer, Sudborough and Welzl is left as Exercise 12.25.
Proposition 12.5.3 [556] There is a polynomial algorithm which decides if a given input digraph is homomorphic to the directed path Pk.
When H is an arbitrary orientation of a path, Gutjahr Welzl and Woeginger proved that it is still polynomial (although much less trivial) to decide whether a given digraph is homomorphic to H.
Theorem 12.5.4 [384] Let H be an arbitrary orientation of a path on k vertices. Then H-colouring is polynomial.
3 Here the certiﬁcate showing that D is not a core is a mapping of D to a proper subdigraph of D.

660 12. Additional Topics
Since homomorphisms compose it follows that, if D→H then every digraph which is homomorphic to D is also homomorphic to H. Thus one way of proving that D is not homomorphic to H would be to show a graph which is homomorphic to D but not to H. Using this approach Hell and Zhu [417] proved the following:
Theorem 12.5.5 [417] Let D be a digraph on n vertices and P an oriented path on k vertices. Then D→P if and only if there exists an oriented path P on at most 2kn + 1 vertices such that P →D and P →P .
It is easy to check whether D→Ck holds for a given strong digraph D = (V, A) and a given integer k ≥ 2. Indeed, let the vertices of Ck be labelled {1, 2, . . . , k}. Now to check whether D→Ck we pick an arbitrary vertex v ∈ V and map it to the vertex 1. After this the mapping of all other vertices in V ﬁxed and it is easy to check whether this (unique) mapping is arc preserving. This can all be done in time O(n + m) by using DFS from v to label and check whether each arc is preserved by the mapping at the same time. When D is not strongly connected it is a little more cumbersome to check whether D→Ck, but it can still be done in time O(n + m) (Exercise 12.26). Hence we have the following result ude to Maurer, Sudborough and Welzl:
Theorem 12.5.6 [556] For every k ≥ 2, Ck-colouring is polynomial.
The following easy observation is merely a restatement of the deﬁnition of a homomorphism (recall that, by deﬁnition, digraphs have no loops):
Proposition 12.5.7 Let D and H be digraphs. Then D→H if and only if there exists an extension Hext = H[Ka1 , Ka2 , . . . , Kah ], h = |V (H)| of H such that D is a subdigraph (not necessarily induced) of Hext.
Let D be a digraph and C an oriented cycle of D. The net length of C is the absolute value of the diﬀerence between the number of forward arcs and the number of backward arcs with respect to an arbitrary ﬁxed traversal of C (as an undirected cycle). Using Proposition 12.5.7 it is easy to prove the following characterization due to H¨aggkvist, Hell, Miller and Neuman-Lara of those digraphs which are homomorphic to a k-cycle (see also [556]):
Theorem 12.5.8 [388] A digraph D is homomorphic to Ck if and only if the net length of every oriented cycle in D is divisible by k.
Proof: Exercise 12.27.
When H is an oriented cycle, the corresponding H-colouring problem may not be polynomial. Gutjahr showed in [383] that there are oriented cycles for which the corresponding H-colouring problem is N P-complete. Hell and Zhu proved that, if H is an oriented cycle with net length diﬀerent from zero, then a statement similar to Theorem 12.5.5 holds (necessity of these conditions is clear):

12.5 Homomorphisms – A Generalization of Colourings 661
Theorem 12.5.9 [418] Let C be an oriented cycle whose net length is not zero. A digraph D is homomorphic to C if and only if every oriented path homomorphic to D is also homomorphic to C, and the net length of every cycle of D is a multiple of the net length of C.
It was shown in [384] by Gutjahr, Welzl and Woeginger and in [414] by Hell, Neˇsetˇril and Zhu that the H-colouring problem may be N P-complete even for orientations of trees. Hence classifying the complexity of the Hcolouring problem for arbitrary digraphs seems almost hopeless.
When the target H has δ0(H) > 0 the picture seems clearer. If the core of H is a directed cycle, then H-colouring is polynomial by Theorem 12.5.6. In all other cases the problem seems to be diﬃcult. In fact, the existence of two directed cycles in the core is often suﬃcient for the N P-completeness of H-colouring as is illustrated by the next three results. The ﬁrst result is an easy consequence of Theorem 12.5.1 (Exercise 12.28).
Theorem 12.5.10 [412] Let H be the complete biorientation of an undirected graph G. If G is bipartite then H-colouring is polynomial and if G is not bipartite, then H-colouring is N P-complete.
The next two results due Bang-Jensen, Hell and MacGillivray, respectively, Bang-Jensen and Hell show that for some classes of digraphs, the number of cycles play an important role on the complexity of the H-colouring problem.
Theorem 12.5.11 [77] Let H be a semicomplete digraph. If H has two or more directed cycles, then H-colouring is N P-complete. If H has at most one directed cycle, then H-colouring is polynomial.
Theorem 12.5.12 [74] Let H be a semicomplete bipartite digraph which is a core. If H has two or more directed cycles, then H-colouring is N P-complete. If H has at most one directed cycle, then H-colouring is polynomial.
These results spurred further study [74, 85]. Based on the results in [74], Bang-Jensen and Hell made the following conjecture, which postulates a classiﬁcation of the complexity of the H-colouring problem for all digraphs with δ0(H) > 0 and whose core is not a cycle. Note that a digraph H with δ0(H) > 0 is homomorphic to a directed cycle Ck if and only if its core is Cr for some r which is a multiple of k.
Conjecture 12.5.13 [74] Let H be a digraph with δ0(H) > 0 and connected underlying graph. If H is homomorphic to a directed cycle, then H-colouring is polynomial. Otherwise H-colouring is N P-complete.
Since Ck-colouring is polynomial as we mentioned above, the ﬁrst statement is easy to see. Conjecture 12.5.13 has been veriﬁed for many classes of digraphs, see e.g. [74, 77, 78, 85, 383, 384, 412, 530, 531].

662 12. Additional Topics
The main techniques for proving N P-completeness H-colouring problems for directed graphs are described in [74, 77, 412]. These include the following two constructions both of which are due to Hell and Neˇsetˇril [412]. We show how to use these tools below.
The indicator construction. Let I be a ﬁxed digraph and let i, j be distinct vertices of I. The indicator construction (with respect to (I, i, j)) transforms a given digraph H = (V, A) into the directed pseudograph H∗ = (V, A∗) where for every choice of (not necessarily distinct) h, h ∈ V , the arc hh is in A∗ precisely when there exists a homomorphism f : I→H such that f (i) = h and f (j) = h . See Figure 12.4.
Lemma 12.5.14 [412] If the H∗-colouring problem is N P-complete, then so is the H-colouring problem.

j

i

(a) (b) (c)
Figure 12.4 Illustrating the indicator construction: (a) A digraph H; (b) An indicator I with special vertices i, j; (c) The result H∗ of applying the indicator construction with respect to (I, i, j) to H. Undirected edges are used to indicate 2-cycles.

Note that H∗ may have loops, in which case the H∗-colouring problem is trivial, since we can map every vertex to a vertex with a loop in H∗. Hence the construction is only useful if H∗ has no loops. In this case H∗ is always
a digraph.

The sub-indicator construction. Let J be a ﬁxed digraph with spec-

iﬁed vertices j, v1, v2, . . . , vt. The sub-indicator construction with respect

to (J, j, v1, v2, . . . , vt) transforms a core H = (V, A) with speciﬁed vertices

Vh˜1,⊆h2V,

.

.w.h, herteinV˜toisthdeeﬁsunbeddigarsafpohlloH˜wso.fLHetwWhicbheisthinedduicgerdapbhy

the vertex set obtained from

the disjoint union of H and J by identifying vi with hi for i = 1, 2, . . . , t. A vertex v ∈ V belongs to V˜ if and only if there exists a retraction f : W →H

which maps j to v. See Figure 12.5.

12.5 Homomorphisms – A Generalization of Colourings 663
Lemma 12.5.15 [412] Let H be a core. If the H˜ -colouring problem is N Pcomplete, then so is the H-colouring problem.
hj
v
(a) (b) (c)
Figure 12.5 Illustrating the sub-indicator construction; (a) a digraph H with a special vertex h; (b) the sub-indicator J with special vertices j, v; (c) the result H˜ of applying the sub-indicator construction with respect to (J, j, v) to (H, h).
To illustrate how to use the indicator and the sub-indicator construction, let us show that, if H is the digraph in Figure 12.4(a), then the H-colouring problem is N P-complete. First apply the indicator construction with respect to the indicator shown in Figure 12.4(b) to H. This gives us the digraph H∗ in Figure 12.4(c). By Lemma 12.5.14, H-colouring is N P-complete if and only if H∗-colouring is N P-complete. Now let J be the sub-indicator consisting of the complete biorientation of a 3-cycle with one vertex labelled j and an isolated vertex v1. Let H be the result of applying the sub-indicator construction with respect to (J, j, v1) to H∗. Since v1 is isolated, a vertex from H∗ will be in H precisely when it is itself on a complete biorientation of a 3cycle in H∗. Hence H is the complete biorientation of a 3-cycle. By Theorem 12.5.10 H -colouring is N P-complete and now we conclude by Lemma 12.5.15 that H∗-colouring and hence also H-colouring is N P-complete.
Although the sub-indicator and the indicator constructions are very useful tools for proving the N P-completeness of many H-colouring problems, there are digraphs H for which another approach such as a direct reduction from a diﬀerent type of N P-complete problem is needed. Such reductions are often from some variant of the satisﬁability problem (see Section 1.10). The reader is asked to give such a reduction in Exercise 12.29.
For examples of other papers dealing with homomorphisms in digraphs see [135] by Brewster and MacGillivray, [416] by Hell, Zhou and Zhu, [590] by Neˇsetˇril and Zhu, [680] by Sophena and [761, 762] by Zhou.

664 12. Additional Topics
12.6 Other Measures of Independence in Digraphs
The deﬁnition of independence of vertex subsets in digraphs used in this book is by no means the only plausible deﬁnition of independence in digraphs. One may weaken the deﬁnition of independence in directed graphs in at least two other ways, both of which still generalize independence in undirected graphs.
(1) By considering induced subdigraphs which are acyclic. This gives rise to the acyclic independence number, αacyc(D), which denotes the size of a maximum set of vertices X such that D X is acyclic.
(2) By considering induced subdigraphs which contain no 2-cycles. This gives rise to the oriented independence number, αor(D), which denotes the size of a maximum set of vertices Y such that D Y is an oriented graph.
Both of these generalize the deﬁnition of independence in undirected graphs: if G is an undirected graph with independence number k then αacyc(D) = αor(D) = k, where D is the complete biorientation of G. Note that we always have
α(D) ≤ αacyc(D) ≤ αor(D).
Furthermore, by our remark above, each of these parameters is at least as hard to calculate as α(D). In fact they seem much harder as they are N Phard already for tournaments, respectively semicomplete digraphs. The fact that αor(D) is hard to calculate for semicomplete digraphs is left to the reader as Exercise 12.31. We prove below that calculating αacyc(D) is N P-hard even for tournaments. This result is due to Bang-Jensen and Thomassen and to Speckenmeyer.
Theorem 12.6.1 [89, 681] The problem of ﬁnding a largest transitive subtournament in a tournament is N P-hard.
Proof: We show how to reduce the independent set problem for undirected graphs to our problem by a polynomial time reduction. This will imply the claim, since the independent set problem is N P-hard, see e.g. [303]. Let G = (V, E) be an undirected graph with vertex set {v1,0, v2,0, . . . , vn,0}. We form a tournament T as follows. We add, for each i = 1, 2, . . . , n a set of n+1 new vertices {vi,1, vi,2, . . . , vi,n+1}. Now T contains the directed arc vi,kvj,m whenever i > j or i = j and k > m unless k = m = 0 and vi,0, vj,0 are adjacent in G. In the last case T contains the arc vj,0vi,0. Now a vertex set S in G is a largest independent set if and only if T − (V − S) is a largest transitive subtournament of T .
Jackson made the following conjecture:
Conjecture 12.6.2 [453] Every digraph D with αor(D) ≤ κ(D)+1 contains a hamiltonian path.

12.7 Matroids 665
As pointed out in Section 6.10.2, Conjecture 12.6.2 is not true if we replace αor(D) by α(D).
A famous result due to Chv´atal and Erd˝os [161] says that, if the vertex connectivity of an undirected graph G is at least as high as the size of a largest independent set, then G is hamiltonian. This is not true for digraphs, but as we pointed out in Proposition 3.11.12, at least there is a cycle factor in D if it is α(D)-strong. Jackson proved that, if we consider the oriented independence number αor(D), then an analogue of the Chvatal-Erd˝os theorem does exist.
Theorem 12.6.3 [450] Let D be a digraph which is k-strong where k = 2αor(D)(αor(D) + 2)!. Then D has a hamiltonian cycle.

12.7 Matroids

In this section we give a very short introduction to matroids. The motivation for this is that algorithms for matroids are a useful tool for solving various graph theoretical problems. For an example of this we refer to Section 9.10 and Exercise 12.46. Unfortunately, due to lack of space we will not be able to describe in detail the algorithms for 2-matroid intersection and matroid partition (those are the ones used in the applications mentioned above). We refer the reader to the books [166] by Cook, Cunningham, Pulleyblank and Schrijver and [623] by Recski for detailed descriptions of these algorithms.
Deﬁnition 12.7.1 Let S be a ﬁnite set and let I be a collection of subsets of S. The pair M = (S, I) is a matroid if the following holds:
(I1) ∅ ∈ I. (I2) If Y ∈ I and X ⊆ Y , then X ∈ I. (I3) If X, Y ∈ I and |X| < |Y |, then there exists an element y ∈ Y − X such
that X ∪ {y} ∈ I.
Let M = (S, I) be a matroid. A set X ⊆ S such that X ∈ I is called independent. All other sets are dependent. A base of M is a maximal independent set. A circuit is a minimal dependent set. Let B denote the set of bases of M and C the set of circuits of M .
It follows directly from (I3) and the deﬁnition of a base that

all bases of a matroid have the same size.

(12.6)

Below we list some important properties of the bases of a matroid. (B1) follows from (I1). (B2) follows from (I3) and (B3) is left to the reader as Exercise 12.32.

666 12. Additional Topics

Proposition 12.7.2 Let M = (S, I) be a matroid. The set B of bases of M satisfy the following:
(B1) B = ∅. (B2) For all B, B ∈ B we have |B| = |B |. (B3) Let B, B ∈ B. For every b ∈ B there exists an element b ∈ B such
that (B − b) ∪ {b } ∈ B.
The other direction holds as well (see Exercise 12.35)
Proposition 12.7.3 Let S be a ﬁnite set and B a collection of subsets of S which satisﬁes (B1)-(B3) above. Then there exists a matroid M = (S, I) whose set of bases is precisely B.
If M = (S, I) is a matroid and X ⊆ S, then we say that a subset Y ⊆ X is a maximal independent subset of X if Y ∈ I and Y ⊂ Z ⊆ X implies Z ∈ I.
Lemma 12.7.4 Let M = (S, I) be a matroid and let X ⊆ S. All maximal independent subsets of X have the same size.
Proof: Exercise 12.34.
By Lemma 12.7.4, the following function is well-deﬁned for all subsets of S.

r(X) = max{|Y | : Y ⊆ X and Y ∈ I}

(12.7)

The rank of a matroid M = (S, I) is the number r(S), the size of a base in M .

Examples of matroids:

(1) Let G = (V, E) be an undirected graph. Deﬁne M (G) as M (G) = (E, I), where E ∈ I if and only if GE = (V, E ) has no cycle. Then M (G) is a matroid (called the circuit matroid of G). To see this, it suﬃces to check (I3), since (I1),(I2) trivially hold. Let X, Y be subsets of E such that none of G X and G Y has a cycle and |X| < |Y |. It is easy to show that, if Z is independent in M (G), then the number of connected components in G Z is n − |Z|, where n is the number of vertices in G. Thus |X| < |Y | implies that the number of connected components of G X is larger than that of G Y . Hence Y contains an edge y such that y joins two vertices which are in distinct components of G X . This implies that G X ∪ {y} is acyclic and hence X ∪ {y} ∈ I. The bases of M (G) are the (sets of edges of ) maximal forests of G and a cycle of M (G) is a fundamental cycle of G with respect to a maximal forest of G. The rank of M (G) is |V | minus the number of connected components of G.

12.7 Matroids 667

(2) Let S be a set on n elements, and deﬁne Un,k for k ≤ n as follows: Un,k = (S, {X ⊆ S : |X| ≤ k}). This trivially gives a matroid called a uniform matroid. If k = n we obtain a very special case in which all subsets are independent. This matroid is called the free matroid on n elements.
(3) Let D = (V, A) be a digraph such that δ−(D) > 0 and deﬁne B as those subsets A of A for which every vertex v ∈ V has in-degree precisely one in D A . We show that B satisﬁes (B1)-(B3) of Proposition 12.7.2 and hence, by Proposition 12.7.3, B forms the set of bases of a matroid M −(D). Indeed, (B1) holds since δ−(D) > 0 and (B2) holds by the deﬁnition of B. To see that (B3) is true consider sets A , A ∈ B and let a ∈ A . The arc a enters a vertex x and in A there is exactly one arc a with head x. Now we see that (A − a ) ∪ {a } ∈ B. Similarly, if δ+(D) > 0, then we may deﬁne a matroid M +(D) whose bases are those subsets X of the arcs for which every vertex v ∈ V has out-degree precisely one in D X . This follows from the argument above by considering the converse of D.
The next result shows, in particular, that the rank function of a matroid is submodular. This is one of the reasons for the usefulness of matroids.
Proposition 12.7.5 The rank function of M = (S, I) satisﬁes the following:
(R1) 0 ≤ r(X) ≤ |X| for every X ∈ S. (R2) X ⊆ Y implies r(X) ≤ r(Y ). (R3) For all X, Y ⊆ S: r(X) + r(Y ) ≥ r(X ∩ Y ) + r(X ∪ Y ).
Proof: (R1) and (R2) follow from the deﬁnitions. To see that (R3) holds consider two subsets X, Y of S. We may assume that X = Y . Let A be a maximal independent subset of X ∩ Y and let B be an extension of A to a maximal independent subset of X ∪ Y . Now using (R2) we have

r(X) + r(Y ) ≥ |B ∩ X| + |B ∩ Y | = |B| + |A| = r(X ∪ Y ) + r(X ∩ Y ).

(12.8)

12.7.1 The Dual of a Matroid
The dual of a matroid M = (S, I) is the pair M ∗ = (S, I∗), where I∗ = {X ⊆ S : X ∩ B = ∅ for some base B of M}. In Exercise 12.37 the reader is asked to prove that M ∗ is a matroid. Note that the bases of M ∗ form precisely the set B∗ = {S − B : B is a base of M }.

668 12. Additional Topics

Proposition 12.7.6 For any matroid M we have
(i) (M ∗)∗ = M . (ii) r∗(X) = |X| + r(S − X) − r(S).
Proof: Exercise 12.38.
A circuit in M ∗ is called a cutset or a cocircuit in M . It follows from the deﬁnition of M ∗ that a cocircuit of M is a minimal subset of S which has a non-empty intersection with all bases of M .

12.7.2 The Greedy Algorithm for Matroids Let M = (S, I) be a matroid. For every X ∈ I we deﬁne the set ext(X) by

ext(X) = {y ∈ S − X : X ∪ {y} ∈ I}.

(12.9)

That is, ext(X) are precisely those elements y in S − X such that y can be added to X without creating a dependent set.
Suppose we are given a weight function w : S → R+ ∪{0} on the elements of S. We let w(X) = x∈X w(x). Our goal is to ﬁnd an independent subset of S with maximum weight. Since w(s) ≥ 0 for every s ∈ S it follows that a maximum weight independent subset can always be assumed to be a base (using (I3), we may add extra elements of weight zero to X if X has maximum weight and is not a base). An optimal base is a base B such that w(B) ≥ w(B ) for every B ∈ B.
The following simple algorithm GA is known as the greedy algorithm for matroids:

Input: A matroid M = (S, I) and a weight function w : S → R+ ∪ {0}. Output: an optimal base of M .
1. Let X := ∅; 2. If ext(X) = ∅ go to Step 5; 3. Choose an element x ∈ ext(X) such that w(x) = max{w(y) : y ∈
ext(X )}; 4. Let X := X ∪ {x} and go to Step 2; 5. Return X;
Since the only maximal independent sets in M are bases, it follows that the greedy algorithm returns a base X of M . Such a base is called a greedy base of M . The following result due to Rado shows that the greedy algorithm works nicely for matroids:
Theorem 12.7.7 [619] The greedy algorithm for matroids always ﬁnds an optimal base.

12.7 Matroids 669

Proof: Suppose there exists a matroid M = (S, I) and weight function w
such that the greedy algorithm does not ﬁnd an optimal base of M . Let Bg be the greedy basis which is returned by the algorithm. By assumption, M
has another base B such that

w(Bg) < w(B).

(12.10)

Since ∅ ⊂ B ∩ Bg and Bg = B, there is a well-deﬁned ﬁrst iteration of the while loop in which GA chooses an element x which is not in B. Let A be
the current independent subset found by the algorithm just before GA adds
x (to A). Consider the independent set A = A ∪ x. By (I3), we can extend
A to a base B of M by adding elements from B. It follows from this and
(B2) that B = (B − y) ∪ {x} for some y ∈ B − Bg. Since A ∪ y ⊆ B we have y ∈ ext(A). Now it follows from that fact that GA chose x and not y when it
extended A that we have w(y) ≤ w(x). However this means that

w(Bg) = w(B) − w(y) + w(x) ≥ w(B),
contradicting (12.10).
It can be shown that, if we have a collection F of subsets of a set S such that (I1) and (I2) hold, but (I3) does not, then there exists a nonnegative real-valued weight function so that applying the algorithm GA to this collection of sets we never ﬁnd an optimal basis (Exercise 12.39).
The reader who knows Kruskal’s classical algorithm for ﬁnding a minimum weight spanning tree in a connected undirected graph G with weights on the arcs (see e.g. [169]) will have noticed the strong similarity between that algorithm and the algorithm GA above. In fact Kruskal’s algorithm is precisely GA for the case when the input is the circuit matroid M (G) of G.

12.7.3 Independence Oracles
What is a fast algorithm for matroids? How do we represent a matroid eﬃciently? These are important questions. In particular, it should be clear that in general it is infeasible to store information about a given matroid by a list of its independent sets. For example, if M is the uniform matroid Un,k, we would have to store all subsets of size at most k of {1, 2, . . . , n}. On the other hand for Un,k it is very easy to decide whether a given subset of {1, 2, . . . , n} is independent: simply calculate its size and check whether this is at most k. This illustrates that what is important is not having a list of all independent sets, but rather to be able to determine whether a given subset X of the ground set S is independent in M .
We shall assume that our matroids are always given in terms of the ground set S and a subroutine OM which given X ⊆ S decides whether X is independent in M or not. Such a subroutine OM is called an independence oracle for M = (S, I). We say that a matroid algorithm A for a matroid M = (S, I)

670 12. Additional Topics
with independence oracle OM is fast if the number of steps of A is polynomial in |S| and any other inputs (such as a weight function), provided that we consider each call to OM as taking constant time. With this assumption, the greedy algorithm is a fast matroid algorithm.
In order for a fast matroid algorithm to be useful in practice, we must be able to supply an independence oracle which works in polynomial time (and preferably very fast) In the case of Kruskal’s algorithm above such an oracle exists, since a subset X ⊆ E is independent in the circuit matroid of G = (V, E) if and only if X induces a forest in G, something which can be checked in linear time by DFS, say (Exercise 12.41). Similarly, checking whether a subset is independent in Un,k can be done in linear time.
12.7.4 Union of Matroids
Let Mi = (S, Ii), i = 1, 2, . . . , k be matroids on the same ground set S. Deﬁne ∨ki=1Mi = (S, ∨ki=1Ii) as follows. A set X ⊆ S is independent in ∨ki=1Mi if and only if X can be decomposed as X = X1 ∪ X2 ∪ . . . ∪ Xk, where Xi ∈ Ii for i = 1, 2, . . . , k. It is a non-trivial exercise (Exercise 12.42) to prove the following:
Proposition 12.7.8 Let Mi = (S, Ii), i = 1, 2, . . . , k be matroids on the same ground set S. Then ∨ki=1Mi is a matroid.
Note that, if X is independent in ∨ki=1Mi, then X has a partition into sets X1, X2, . . . , Xk such that Xi (which might be empty) is independent in Mi, i = 1, 2, . . . , k. Thus deciding whether X is independent in ∨ki=1Mi is equivalent to deciding whether X can be partitioned into k subsets X1, X2, . . . , Xk such that Xi ∈ Ii for i = 1, 2, . . . , k.
The matroid partition problem: Let Mi = (S, Ii), i = 1, 2, . . . , k be matroids on the same ground set S and a subset X ∈ S. Does there exist subsets X1, X2, . . . , Xk of S such that X = ∪ki=1Xi and Xi ∈ Ii for i = 1, 2, . . . , k?
In Exercise 12.45 the goal is show that the question of deciding whether an undirected graph has k edge-disjoint spanning trees can be formulated as a matroid partition problem. Hence the following theorem implies the existence of a polynomial algorithm for deciding whether an undirected graph has k edge-disjoint spanning trees (see Exercise 12.46).
Theorem 12.7.9 The matroid partition problem can be solved in polynomial time, provided we are given polynomial time realizable independence oracles for each of the matroids Mi, i = 1, 2, . . . , k.
We refer the reader to Recski’s book [623] for a description of a fast algorithm for the matroid partitioning problem. Note that, if M = (S, I) is a matroid and X is a subset of S, then M X = (X, IX ), where IX = {Y ∈ I :

12.7 Matroids 671
Y ⊆ X} is also a matroid (Exercise 12.43). Hence, the matroid partitioning problem is equivalent to the problem of deciding whether the ground set S is independent in ∨ki=1Mi. This is the problem which is solved in [623].
12.7.5 Two Matroid Intersection
Another very useful topic on matroids is matroid intersection. By this we do not mean that, if M1, M2 are matroids on the same ground set S, then M = (S, I1 ∩ I2) is also a matroid. This is false as the reader can easily show by an example (Exercise 12.47). Instead we are interested in the following problem. The matroid intersection problem: Given matroids M1 = (S, I1), M2 = (S, I2) such that r1(S) = r2(S). Find a maximum cardinality subset T ⊆ S which is independent in each of M1, M2.
The next result shows that the matroid intersection problem and the matroid partition problem are closely related.
Theorem 12.7.10 Let M1 = (S, I1), M2 = (S, I2) be matroids on the same ground set S with r1(S) = r2(S) = r and let n = |S|. There is a common base of M1, M2 if and only if M1 ∨ M2∗ = Un,n.
Proof: If X is a base of M1 and of M2, then S − X is independent in M2∗ and hence S = X ∪ (S − X) is independent in M1 ∨ M2∗, implying that this is the free matroid on n = |S| elements.
To prove the converse, suppose S is independent in M1 ∨ M2∗. Then S can be partitioned as S = S1 ∪ S2 where S1 ∈ I1, S2 ∈ I2∗.
Now we obtain

|S| = |S1| + |S2| = r1(S1) + r2∗(S2) ≤ r1(S) + r2∗(S) = r + (|S| − r2(S))
= r + (|S| − r)
= |S|.

(12.11)

This implies that r1(S1) = r and r2∗(S2) = |S| − r2(S). Thus S1 is a base of M1 and S2(= S − S1) is a base of M2∗. Now we see that S1 is a common base of M1 and M2.
The following result is due to Edmonds:
Theorem 12.7.11 [212] The matroid intersection problem can be solved in polynomial time, provided we are given polynomial time realizable independence oracles for M1, M2. Furthermore, under the same assumptions, one

672 12. Additional Topics
can ﬁnd in polynomial time a maximum (or minimum) weight common independent subset with respect to any given real-valued weight function w on S.
For a description of a polynomial algorithm for (weighted) matroid intersection see e.g. [166, 623].
Matroid intersection is a very useful tool for modeling (and solving) many combinatorial optimization problems.
For instance the problem to ﬁnd a minimum weight cycle factor in an arc weighted digraph can be formulated as a weighted two matroid intersection problem. Consider the intersection of the matroids M −(D), M +(D) which were deﬁned in the beginning of this section. There is a common base of these matroids if and only if D has a cycle factor and furthermore, the minimum weight of a common base equals the minimum weight of a cycle factor. Two more example are given in Section 9.10 and Exercise 12.48.
12.7.6 Intersections of Three or More Matroids
If we consider three or more matroids all on the same ground set and ask for a common base of these, then this problem contains quite a few diﬃcult problems as special cases as we shall see below. The k-matroid intersection problem: Given matroids Mi = (S, Ii), i = 1, 2, . . . , k on the same ground set. Does there exist a set X ⊆ S such that X is a base of Mi for i = 1, 2, . . . , k?
Theorem 12.7.12 The k-matroid intersection problem is N P-complete for k ≥ 3.
Proof: It suﬃces to prove the theorem for k = 3 since the proof can easily be extended to higher k by using several copies of the same matroid. We will prove that the N P-complete problem of deciding the existence of a hamiltonian path which starts in a prescribed vertex u and ends in a prescribed vertex v in a digraph (see Exercise 6.3) can be reduced to the 3-matroid intersection problem in polynomial time.
Let D = (V, A) be a digraph with speciﬁed vertices u, v ∈ V . Deﬁne Mi = (S, Ii), i = 1, 2, 3 as follows:
S = A; M1 = M (U G[D]); X ∈ I2 if and only if there is no arc entering u in DX = (V, X) and every other vertex has at most one arc entering it in DX . Y ∈ I3 if and only if there is no arc leaving v in DY = (V, Y ) and every other vertex has at most one arc leaving it in DY .
We argued in Section 9.10 that M2 = (A, I2) is a matroid and similarly M3 = (A, I3) is seen to be a matroid. It is easy to see that D has a Hamilton

12.8 Finding Good Solutions to N P-Hard Problems 673
path P from u to v if and only if M1, M2, M3 have a common base (the arcs of a Hamilton path correspond to a common base of M1, M2, M3).
Note that the reduction above is a polynomial one because given an instance [D, u, v] of the hamiltonian path problem with prescribed initial and terminal vertices, we can easily extract the arc set of A and hence the ground set of the 3 matroids above.
12.8 Finding Good Solutions to N P-Hard Problems
In this book we have encountered many problems which are N P-hard. Several of these such as the feedback arc set problem (denoted FAS below for convenience) are of signiﬁcant practical interest. Part of our discussion below will focus on the feedback arc set problem, but most of the discussion is valid for the majority of N P-hard problems we know of.
Clearly we could solve the FAS problem if we simply try all subsets of the arc set and take the smallest feedback arc set we ﬁnd. Of course this would take exponential time and even for digraphs with at most 100 arcs this process would be extremely time consuming if not infeasible, even on the fastest computers available today and in the near future.
A better approach is to try to solve the problem at hand by a clever way of examining those among the set of all possible solutions which could be a candidate for an optimal solution. If we already know a feedback arc set with 20 arcs and we have a (preferably fast) way of detecting that among all subsets from a certain collection of subsets of arcs, no feedback arc set with less than 20 arcs exists, then we do not have to consider these subsets any more, since no optimal solution can be found here. This idea, which we will not describe in detail here, is one of the two main ingredients in a general method called branch and bound, (see e.g. the book [600] by Papadimitriou and Steiglitz). Branch and bound can be used to solve small instances of the FAS problem, but already for digraphs with 100 vertices it becomes very time consuming to ﬁnd an optimal solution.
In the rest of this section we describe methods that do not give us any guarantee on the quality of the solution and sometimes not even on the running time of an implementation of the method. But experimental evidence suggests that in practice some of these so-called heuristics do give solutions which are close to the optimum solution. Furthermore, they often run very fast when implemented carefully on a PC. Such methods may not seem very interesting to the theoretician who may only consider methods that provably obtain the optimum or some approximation guarantee for the solution as worth studying. However, in practice the situation is entirely diﬀerent: the engineer who has been asked to ﬁnd a reasonable solution to an instance of the FAS problem, say, cannot really use this attitude. What (s)he needs is a way to get a good solution and some indication that this solution is better than a random solution and cannot be easily improved on (recall the discussion

674 12. Additional Topics
concerning the domination number of algorithms for the TSP problem in Section 6.12). Certainly such a solution will often be much better than one that could be found at hand by the engineer.
We start with a very simple method for ﬁnding a feedback arc set which is locally optimal. We assume that we are given a directed multigraph D = (V, A) and an ordering s = v1, v2, . . . , vn of V . Given this ordering we can easily determine the set of forward arcs Af (as those arcs vivj for which i < j) and clearly A − Af is a feedback arc set of D. Now suppose that there are indices i, j such that by deleting the vertex vj and reinserting it between vi and4 vi+1 we obtain a smaller feedback arc set. The eﬀect on the value of the feedback arc set can be calculated easily without reconsidering all arcs (Exercise 12.49).
By a solution s we mean an ordering of the vertices of D. The value v(s) of a solution s is the number of backwards arcs with respect to s. We say that two solutions s, s are neighbours if we can obtain one from the other by deleting one vertex and reinserting it somewhere else in the ordering of the remaining vertices. With respect to this deﬁnition of a neighbour of a solution s we can deﬁne the neighbourhood N (s) of s as the set of solutions that are neighbours of s. Now we can describe a very simple heuristic which we call 1-OPT for the FAS problem:
1-OPT Input: A directed multigraph D = (V, A); Output: An ordering of V (for which the backwards arcs form a feedback arc set in D).
1. Start with a solution s corresponding to a random permutation of V ; 2. If there exists a neighbour s of s such that v(s ) < v(s); then take s := s
as the new current solution and repeat this step; 3. Output the locally optimal solution s and halt.
It is easy to show (Exercise 12.50) that the 1-OPT algorithm will halt after ﬁnitely many steps with a solution that is locally optimal. Here locally optimal means that the number of backwards arcs cannot be decreased by moving a single vertex.
There are several other ways of deﬁning sensible neighbourhoods of a solution to the FAS problem. For example, one could consider all solutions that can be obtained by interchanging the positions of two vertices in the given ordering (see Exercise 12.52 and Exercise 12.53). Experimental evidence found by Olsen [594] suggests that this last way of choosing the neighbourhood does not produce as high quality solutions as the one above.
Although 1-OPT produces solutions that are in general much better than a random choice, it only guarantees that the ﬁnal solution found is locally
4 We allow i = n and i = 0 with the obvious meaning of vi+1 and v0.

12.8 Finding Good Solutions to N P-Hard Problems 675
optimal. Furthermore, since a new solution is only taken if it improves the objective function, the algorithm cannot escape a local minimum.
This can be remedied somewhat by restarting the algorithm several times, each time starting from a new random permutation of the vertices. Since the algorithm is usually very fast it is possible to restart it many times (from diﬀerent random solutions) and then take the best solution among the local optima which were found.
Another method to escape local minima would be to allow a neighbour s of the current solution s with v(s ) > v(s) to be chosen with some positive probability. However, unless this probability decreases as the number of steps increases the method may never converge towards a local minimum.
This problem is handled in the next method which we brieﬂy describe. In the method called simulated annealing the basic idea is to allow a neighbouring solution s with v(s ) > v(s) to be chosen with a probability p which depends both on τ = v(s ) − v(s) and the number of steps taken by the algorithm so far.
Below we describe the generic simulated annealing method for a minimization problem over the set S of possible solutions and with objective function f and neighbourhood structure N . Note that this is a meta-heuristic, i.e. it is a scheme that can be applied to many types of combinatorial optimization problems rather than just one speciﬁc problem.
Generic Simulated Annealing
1. Select an initial solution s0; 2. Initialize control parameter t to a value t0; 3. Select a reduction method M for the control parameter t; 4. Repeat K(n) times: 5. Choose randomly a neighbour s ∈ N (s0); 6. Let τ := f (s) − f (s0); 7. If τ ≤ 0 then s0 := s 8. Else let s0 := s with probability exp (−τ /t); 9. Let t := M (t); 10. If the stopping condition is satisﬁed then return the best solution en-
countered and halt. Otherwise go to Step 4.
Although we did not write it above, it is understood that the algorithm also keeps track of the best solution found so far (note that this may not coincide with the current solution s0.).
It is evident from the (loose) description above that any implementation of the method involves making several choices about how to perform the various steps. We discuss brieﬂy the general idea below and refer to the survey [203] by Dowsland and the experimental evaluation of simulated annealing by Johnson, Aragon, McGeoch and Schevon described in [464] for more details. It is important to note that ﬁnding a good set of values/methods to implement the algorithm is by no means always a trivial task. Part of this process consists

676 12. Additional Topics
of tuning the parameters t0,K(n), the method M for decreasing t and the stopping criterion. This is done by performing a number of runs with all but one parameter ﬁxed and then selecting values that look promising. After some stages of this process, one may arrive at a choice for the parameters which does not seem easy to improve (based on the test data used). See also Exercise 12.51. However, experimental evidence reported by Hansen [397] and Olsen [594] indicate that for a problem such as FAS it is not too hard to make a set of choices which will make the algorithm perform quite well.
The initial solution can be chosen arbitrarily or it may be a local optima found by 1-OPT, say. The control parameter t should be initialized so that in the beginning there is a fair chance that the algorithm will accept a neighbour with a higher f value than the current solution s0. Normally this is done by starting from a random solution and then performing, say, 1000 steps of the algorithm while keeping track of the number of neighbours who are accepted as the new current solution5. The initial acceptance rate is the fraction of accepted solutions over the total number of neighbours tested (1000 above). Experiments reported in e.g. [464] suggest that acceptance rates in the interval [0.3, 0.9] all work well (these experiments were not for the FAS problem, but the conclusion also seems to hold for FAS [594]).
Experiments show that the actual reduction method used to reduce t after every cycle of K(n) steps is not as important as the rate at which t is reduced. This rate should be as slow as possible (that is, as time allows) [464]. In fact, whereas in general no theoretical guarantee exists for the quality of a solution found by local search heuristics such as 1-OPT, it can actually be shown (see e.g. the book [30] by Arts and Korst) that under ideal conditions (such as reducing the parameter t inﬁnitely slowly, taking a very large number of steps for each value of t and using a neighbour structure that allows one to reach some optimal solution from an arbitrary solution) simulated annealing will in fact ﬁnd an optimal solution. Of course such a result is only of theoretical interest, but the nice thing is that, since some of these results are based on Markov chains, the results suggest that the slower one reduces t and the higher K(n) (as a function of the size of the neighbourhood), the better results one should obtain. This thesis seems to be true for several applications of simulated annealing (see e.g. [203, 464]).
It is common to use a simple geometric reduction method where we set t := rt for some ﬁxed number 0 < r < 1 which is close to one. Experiments suggests that r = 0.95 is generally a good choice [464]. The number of steps K(n) for each value assumed by t should be at least a linear function in the size of the neighbourhood of an arbitrary solution. Finally it is common to use as a stopping condition that there has been no improvement in the current solution for some number N of moves. Another possibility is to use the current acceptance rate (calculated similarly as the initial acceptance
5 This includes those that have a better (or equal) value than the current solution as well as those that are worse, but are chosen in the probabilistic step 8.

12.9 Exercises 677
rate by keeping track of the number of accepted moves over the last, say, 1000 steps) as a measure and stop when this rate gets below, say 1 percent. One may also decide to stop when the control parameter becomes smaller than a prescribed value ts. Note that in the last case, the number of steps performed by the algorithm is always the same (for K(n) and M ﬁxed).
Due to space limitations we will not go into further details of the method. The interested reader is encouraged to work out the programming projects of Exercises 12.51 and 12.52. The success of the simulated annealing algorithm on various combinatorial optimization problems varies of course (and also depends strongly on the ingenuity of the persons who experiment with it, in particular in the tuning phase). For a problem like the linear ordering problem, the algorithm seems to perform very well. Hansen showed [397] that when applied to real-world instances of the linear ordering problem of sizes up to 75 vertices, the simulated annealing algorithm very often ﬁnds the optimal solution within a few minutes on a standard PC and the ones that were not optimal were within one percent of the optimal values.
For a very thorough discussion on how to tune simulated annealing algorithms as well as a comparison of simulated annealing with other methods on various combinatorial problems we refer to the experimental papers [464, 465] by Johnson, Aragon, McGeoch and Schevon. There are several other metaheuristics which work quite well for many types of combinatorial optimization problems. For a detailed discussion we refer the reader to the book [628] edited by Reeves.
12.9 Exercises
12.1. Show that given an oriented graph D one can check whether D satisﬁes Conjecture 12.1.1 in time O(nm). Which representation of the oriented graph may we assume to obtain this complexity?
12.2. Show that ﬁnding a median order of an arc weighted tournament (that is, an order which minimizes the total weight of the backwards arcs) is N P-hard by giving a polynomial reduction of the feedback arc set problem to this problem.
12.3. (+) Give a short and direct argument which shows that there exists a function f (n) so that every tournament on f (n) vertices contains every oriented tree on n vertices. Hint: consider removing a leaf from a tree and then applying induction.
12.4. Construct your own examples of semicomplete PCDs, for which FSO and the score method produce diﬀerent results.
12.5. Prove by induction on n the formula for fK (α) in Lemma 12.2.1.
12.6. Prove the following. Let K = (V, A, ) be a complete PCD with n vertices, and let α be an ordering of K. Then fK (α) + bK (α) = n(n2 − 1)/6. Hint: use induction on n.

678 12. Additional Topics
12.7. Prove that the problem to ﬁnd a forward optimal ordering of a PCD is N P-hard (Gutin and Yeo [373]) .
12.8. (−) Formulate and prove a lemma for forward orderings analogous to Lemma 12.2.6.
12.9. Prove Lemma 12.2.7 using Lemma 12.2.6. 12.10. Prove Theorem 12.2.8. 12.11. (−) Compute the proper backward ranks of the vertices of the uniform PCD
corresponding to the digraph D in Figure 12.6.
xz
yu
v
Figure 12.6 A semicomplete 3-partite digraph D.
12.12. Using Theorem 12.2.8 construct a polynomial algorithm to ﬁnd proper backward ranks of the vertices of a semicomplete multipartite PCD.
12.13. Prove Theorem 12.2.9. 12.14. (−) Find the proper backward ranks of the vertices of the uniform PCD
corresponding to the digraph D − vz, where the digraph D is depicted in Figure 12.6. 12.15. Give a direct proof that every acyclic digraphis kernel-perfect. Prove that an acyclic digraph has a unique kernel (von Neumann and Morgenstein [731]). 12.16. Prove that C43({1, 7, 8}) − (1, 2), C43({1, 7, 8}) − (1, 8) and C43({1, 7, 8}) − (1, 9) have kernels, where C43({1, 7, 8}) is a circular digraph. 12.17. (−) Give a construction of a Latin square of size n for each integer n ≥ 1. 12.18. (+) Prove Theorem 12.4.2. 12.19. Construct a bipartite graph B = (X ∪ Y, E) with a family {>u |u ∈ X ∪ Y } of orderings induced from local orderings of the neighbours of each vertex, such that no maximum matching of B is stable. 12.20. (−) Argue that the oriented graph D in the proof of Theorem 12.4.3 is (n − 1)-regular. 12.21. (+) Prove that every digraph has a unique core (up to isomorphism). 12.22. (−) Prove that every semicomplete digraph is a core.

12.9 Exercises 679

12.23. Characterizing core semicomplete bipartite digraphs. Prove the following theorem due to Bang-Jensen and Hell:
Theorem 12.9.1 [74] Let B be a semicomplete bipartite digraph with vertex partition X, Y . Then B is a core if and only if (a) B is a 2-cycle, or (b) For all x, y ∈ X such that x = y, either y ∈ N +2(x) or x ∈ N +2(y) and
for all u, v ∈ Y such that u = v, either u ∈ N +2(v) or v ∈ N +2(u).
12.24. Show that there is a polynomial algorithm which transforms a given semicomplete bipartite digraph into its core. Hint: use Theorem 12.9.1.
12.25. Prove Proposition 12.5.3. Hint: ﬁrst show that you can assume that the input digraph is acyclic and then use the acyclic ordering.
12.26. A polynomial algorithm for Ck-colouring. Complete the description from the text to an O(n + m) algorithm which, given an arbitrary digraph D of order n and size m, either ﬁnds a homomorphism D→Ck or a proof that D→Ck.
12.27. Prove Theorem 12.5.8.
12.28. (−) Prove Theorem 12.5.10.
12.29. (+) Reducing 3-SAT to an H-colouring problem. Let H be the digraph in Figure 12.7(a) and let Y be the digraph in Figure 12.7(a).

1
H: 2
34 (a)

u Y: v
w

(b)

x X:
x¯
(c)

Figure 12.7 (a): the digraph H; (b) the digraph Y ; the digraph X.

(i) Prove that for every H-colouring of Y , at least one of the vertices u, v, w is not mapped to 1.
(ii) Prove that every partial H-colouring of Y in which at most two of the vertices u, v, w is mapped to 1 can be extended to an H-colouring of Y .
(iii) (−) Prove that in every H-colouring of X, either x is coloured 1 and x¯ is coloured 2 or vice versa.
(iv) (+) Use (i)-(iii) to construct in polynomial time for a given instance F = C1 ∗ C2 ∗ . . . ∗ Cm of 3-SAT a directed graph D[F ] such that D[F]→H if and only if F is satisﬁable. Hint: use a copy of X for each variable and a copy of Y for each clause and piece together according to the formula F.
12.30. (+) Prove, using a similar reduction to that outlined in Exercise 12.29 that, if H is the strong tournament on four vertices, then the H-colouring problem is N P-complete.

680 12. Additional Topics
12.31. Prove that calculating αor is N P-hard, even for semicomplete digraphs. Hint: reduce the independence number problem for undirected graphs to this problem.
12.32. Prove that (B3) holds for any matroid.
12.33. Is it true that M = (S, I) is a matroid if and only if it satisﬁes (I1), (I2) and (I3’): All maximal elements of I have the same size?
12.34. (−) Prove Lemma 12.7.4.
12.35. Prove Proposition 12.7.3.
12.36. Circuit axioms for a matroid. Prove the following Proposition. Hint: use (R3) and the fact that C − x is independent for every circuit C and every x ∈ C.
Proposition 12.9.2 Let C be the set of circuits of the matroid M = (S, I). Then the following holds: (C1) If C, C ∈ C and C ⊆ C , then C = C . (C2) If C, C ∈ C, C = C and u ∈ C ∩ C , then there exists a circuit Z ∈ C
such that Z ⊆ C ∪ C − u. 12.37. Prove that, if M is a matroid, then the dual M ∗ is also a matroid.
12.38. Prove Proposition 12.7.6.
12.39. (+) Fooling the greedy algorithm for families of subsets which are not matroids. Suppose F is a collection of subsets of a set S which satisﬁes (I1), (I2), but not (I3). Construct a weight function w such that the algorithm GA will not ﬁnd an optimal basis (Edmonds [213]).
12.40. (+) Prove the following result:
Theorem 12.9.3 Let M = (S, I) satisfy (I1),(I2). The greedy algorithm GA ﬁnds an optimal base for M for every choice of non-negative real-valued weight function w on S if and only if M is a matroid.
Hint: show that, if A = {a1, . . . , ak} and B = {b1, . . . , bk, bk+1} both belong to I, then one can choose a weight function w on the elements of S so that GA will always choose A as the ﬁrst k elements and unless there is a bi ∈ B such that A ∪ {bi} ∈ I, GA will not reach an optimal base.
12.41. Describe an O(n + m) algorithm for deciding whether an undirected graph on n vertices and m edges has a cycle.
12.42. (+) Prove Proposition 12.7.8. Hint: it suﬃces to prove the claim for two matroids. Consider a counterexample X, Y to (I3) with X = X1 ∪ X2 and Y = Y1 ∪ Y2, X1, Y1 ∈ I1, X2, Y2 ∈ I2 and |X1 ∩ Y2| + |X2 ∩ Y1| is maximum.
12.43. Prove that M X deﬁned in Section 12.7 is a matroid.
12.44. Let D = (V, A) be a digraph with two vertices s, t such that λ(s, t) ≥ k for some k. Deﬁne I by I = {X ⊆ A : λD−X (s, t) ≥ k}. Show by an example that (A, I) is not always a matroid. (+) Can you characterize those digraphs for which (A, I) is actually a matroid?
12.45. (+) Testing for k edge-disjoint spanning trees in graphs. Show how to formulate the problem of deciding whether an undirected graph G has k edge-disjoint spanning trees as a matroid partition problem.

12.9 Exercises 681
12.46. (+) An algorithm for deciding the existence of k edge-disjoint spanning trees. Use the formulation in Exercise 12.45 to derive a polynomial algorithm for deciding whether an undirected graph has k edge-disjoint spanning trees. Remember to justify that the needed oracles can be implemented as polynomial algorithms.
12.47. Give an example of two matroids M1, M2 on the same ground set S for which M = (S, I1 ∩ I2) is not a matroid.
12.48. (+) Formulating the maximum (weight) matching problem for a bipartite graph as a (weighted) matroid intersection problem. (a) Show how to formulate the question of deciding the existence of a matching of size n in a bipartite graph G = (U, V, E) on 2n vertices as a matroid intersection problem. (b) Show how to solve the problem of ﬁnding a maximum weight matching of size n in the graph G above if we are given nonnegative weights on the edges of G. (c) Argue that one can in fact ﬁnd a maximum matching in any bipartite graph in polynomial time, using an algorithm for the matroid intersection problem.
12.49. Consider the 1-OPT method for the FAS problem. Describe how to determine, in linear time, the number of backwards arcs with respect to the ordering we obtain from v1, v2, . . . , vn after removing one vertex from position j and reinserting it between vi and vi+1.
12.50. Prove that the 1-OPT algorithm applied to the feedback arc set problem will always halt. Then give a good bound on the number of steps taken by the algorithm.
12.51. (+) Project: Implementing a simulated annealing algorithm for the feedback arc set problem. The purpose of this project is to implement a version of simulated annealing which will allow one to obtain good solutions for moderately sized instances of the feedback arc set problem (n ≤ 500). Use the details described in Section 12.8 along with the neighbourhood structure which we used in the 1-OPT algorithm. Perform test on various test data (such a randomly generated data and data for which a good feedback arc set is already known) in order to investigate the following issues6: 1. How much does the initial value of t (measured in terms of the resulting initial acceptance rate) inﬂuence the quality of the solution? 2. Is there a clear dependence of the value of the ﬁnal solution on the value of the initial solution? Is is better to start from a good solution than a random one? 3. How important is it to decrease t slowly? 4. How many iterations should be performed between two consecutive reductions of t? Try to ﬁnd a good estimate and see how it depends on the size of the input graph. 5. Try to combine the simulated annealing algorithm and 1-OPT by either rounding oﬀ a calculation by simulated annealing by an execution of 1-OPT, or by using 1-OPT at every step of the simulated annealing
6 It is understood that as you vary one parameter, all other parameters are ﬁxed at values which have either been found to be good experimentally already, or are as described in Section 12.8.

682 12. Additional Topics
algorithm and using the value of resulting solution s (based on the current solution s) as the (modiﬁed) objective function for the algorithm, i.e. take f (s) to be the number of backwards arcs in the locally optimal solution s and accept a new proposed neighbour of its f -value is better than f (s), or it passes the test in Step 8 of the algorithm.
12.52. Instead of deﬁning the neighbourhood of a solution s (an ordering of the vertices) to the FAS problem as we did in Section 12.8, we may also say that two solutions (orderings) s, s are neighbours if we can obtain one from the other by interchanging the positions of two vertices vi, vj in the ordering. Try to work out Exercise 12.51 with this choice of neighbourhood instead and compare the results. Which neighbourhood choice would you think is the best and why? Carry out computation experiments to check this.
12.53. Project: comparing various local search algorithms for the feedback arc set problem. Consider the following heuristics for the FAS problem. (a) 1-OPT. (b) 2-OPT which uses the neighbourhood deﬁned in Exercise 12.52 and swaps two vertices as long as there is a pair such that swapping these will improve the objective function. (c) Steepest descent 1-OPT: Same as 1-OPT, except now we look at all neighbours of the current solution s and take the one whose objective function is the best if any has a lower value. Otherwise we stop. (d) Steepest descent 2-OPT: Same as above, but for 2-OPT. Implement each of these and compare them on various test data to see which one ﬁnds the best solution and compare their running times. Then try the same with probabilistic versions where the heuristics are restarted a number of times from random starting solutions.

References
1. A. A´ d´am. Problem. In ‘Theory Graphs Applications’, Proc. Coll. Smolenice, pages 12–18, Czech. Acad. Sci. Publ., 1964.
2. A. A´ d´am. Bemerkungen zum graphentheoretischen Satze von I. Fidrich. Acta Math. Acad. Sci. Hungar., 16:9–11, 1965.
3. R. Aharoni and R. Holzman. Fractional kernels in digraphs. J. Combin. Theory Ser. B, 73(1):1–6, 1998.
4. R. Aharoni and C. Thomassen. Inﬁnite, highly connected digraphs with no two arc-disjoint spanning trees. J. Graph Theory, 13(1):71–74, 1989.
5. A.V. Aho, M.R. Garey, and J.D. Ullman. The transitive reduction of a directed graph. SIAM J. Computing, 1(2):131–137, 1972.
6. A.V. Aho, J.E. Hopcroft, and J.D. Ullman. The design and analysis of computer algorithms. Addison-Wesley Publishing Co., Reading, Mass.-LondonAmsterdam, 1975.
7. R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. Network ﬂows. Prentice Hall Inc., Englewood Cliﬀs, NJ, 1993. Theory, algorithms, and applications.
8. M. Aigner and G. Ziegler. Proofs from the book. Springer Verlag, Berlin Heidelberg New York, 1998.
9. A. Ainouche. An improvement of Fraisse’s suﬃcient condition for hamiltonian graphs. J. Graph Theory, 16:529–543, 1992.
10. N. Alon. Disjoint directed cycles. J. Combin. Theory Ser. B, 68(2):167–178, 1996.
11. N. Alon and G. Gutin. Properly colored Hamilton cycles in edge colored complete graphs. Random Structures and Algorithms, 11:179–186, 1997.
12. N. Alon and N. Linial. Cycles of length 0 modulo k in directed graphs. J. Combin. Theory Ser. B, 47(1):114–119, 1989.
13. N. Alon, C. McDiarmid, and M. Molloy. Edge-disjoint cycles in regular directed graphs. J. Graph Theory, 22(3):231–237, 1996.
14. N. Alon and J.H. Spencer. The probabilistic method. Wiley-Interscience Series in Discrete Mathematics and Optimization. John Wiley & Sons Inc., New York, 1992. With an appendix by Paul Erd˝os, A Wiley-Interscience Publication.
15. N. Alon and M. Tarsi. Colourings and orientations of graphs. Combinatorica, 12:125–134, 1992.
16. N. Alon, R. Yuster, and U. Zwick. Color-coding: a new method for ﬁnding simple paths, cycles and other small subgraphs within large graphs. In Proc. 26th Annual ACM Symp. Theory Computing, pages 326–335, Montreal, Canada, 1994. ACM Press.
17. N. Alon, R. Yuster, and U. Zwick. Color-coding. Journal of the ACM, 42:844– 856, 1995.
18. N. Alon, R. Yuster, and U. Zwick. Finding and counting given length cycles. Algorithmica, 17:209–223, 1997.

684 References
19. B. Alspach. Cycles of each length in regular tournaments. Canad. Math. Bull., 10:283–285, 1967.
20. B. Alspach, J.-C. Bermond, and D. Sotteau. Decomposition into cycles. I. Hamilton decompositions. In Cycles and rays (Montreal, PQ, 1987), pages 9–18. Kluwer Acad. Publ., Dordrecht, 1990.
21. B. Alspach and M. Rosenfeld. Realization of certain generalized paths in tournaments. Discrete Math., 34:199–202, 1981.
22. B. Alspach and C. Tabib. A note on the number of 4-circuits in a tournament. In Theory and practice of combinatorics, volume 60 of North-Holland Math. Stud., pages 13–19. North-Holland, Amsterdam, 1982.
23. H. Alt, N. Blum, K. Mehlhorn, and M. Paul. Computing a maximum cardinality matching in a bipartite graph in time O(n1.5 m/ log n). Inform. Process.
Lett., 37(4):237–240, 1991. 24. D. Amar and A. Raspaud. Covering the vertices of a digraph by cycles of
prescribed length. Discrete Math., 87:111–118, 1991. 25. A. Andersson. Sublogarithmic Searching without Multiplications. In Pro-
ceedings of the 36th Symposium on Foundations of Computer Science, pages 655–663. IEEE Computer Society Press, 1995. 26. A. Apartsin, Ferapontova E., and V. Gurvich. A circular graph - counterexample to the Duchet kernel conjecture. Discrete Math., 178:229–231, 1998. 27. K. Appel and W. Haken. Every planar map is four colorable. Bull. Amer. Math. Soc., 82(5):711–712, 1976. 28. E.M. Arkin and C.H. Papadimitriou. On negative cycles in mixed graphs. Operations Research Letters, 4:113–116, 1985. 29. E.M. Arkin, C.H. Papadimitriou, and M. Yannakakis. Modularity of cycles and paths in graphs. J. Assoc. Comput. Mach., 31:255–274, 1991. 30. E.H.L. Arts and J.H.M. Korst. Simulated Annealing and Boltzmann Machines. Wiley, Chicester, 1989. 31. A.A. Assad. Multicommodity network ﬂows–A survey. Networks, 8:37–91, 1978. 32. R. Assous. Enchaˆınabilit´e et seuil de monomorphie des tournois n-aires. Discrete Math., 62(2):119–125, 1986. 33. G. Ausiello, P. Crescenzi, G. Gambosi, V. Kann, A. Marchetti-Spaccamela, and M. Protasi. Complexity and Approximation. Springer-Verlag, Berlin, 1999. 34. J. N. Ayoub and I.T. Frisch. Optimally invulnerable directed communication networks. IEEE Trans. Comm. Technol., 18:484–489, 1970. 35. L. Babel and G.J. Woeginger. Pseudo-Hamiltonian graphs. In Graph-theoretic concepts in computer science (Berlin, 1997), pages 38–51. Springer, Berlin, 1997. 36. L. Baﬃ and R. Petreschi. Parallel maximal matching on minimal vertex series parallel digraphs. In Algorithms, concurrency and knowledge (Pathumthani, 1995), pages 34–47. Springer, Berlin, 1995. 37. E. Balas and N. Simonetti. Linear time dynamic programming algorithms for some new classes of restricted travelling salesman problems. In Proceedings of IPCO V, volume 1084 of Lecture Notes in Comput. Sci., pages 316–329. Springer Verlag, Berlin, 1996. 38. M.C. Balbuena, A. Carmona, J. F`abrega, and M.A. Fiol. Connectivity of large bipartite digraphs and graphs. Discrete Math., 174(1-3):3–17, 1997. Combinatorics (Rome and Montesilvano, 1994). 39. Y. Balcer and A.F. Veinott. Computing a graph’s period quadratically by node condensation. Discrete Math., 4:295–303, 1973. 40. M. Balinski and G. Ratier. On stable marriages and graphs, and strategy and polytopes. SIAM Rev., 39(4):575–604, 1997.

References 685
41. M. Balinski and G. Ratier. Graphs and marriages. Amer. Math. Monthly, 105(5):430–445, 1998.
42. E. Bampis, P. Hell, Y. Manoussakis, and M. Rosenfeld. Finding an antidirected hamiltonian path starting with a forward arc from a given vertex in a tournament. Lect. Notes Comp. Sci., 1120:67–73, 1996.
43. J. Bang-Jensen. On the 2-linkage problem for semicomplete digraphs. In Graph theory in memory of G. A. Dirac (Sandbjerg, 1985), volume 41 of Ann. Discrete Math., pages 23–37. North-Holland, Amsterdam, 1989.
44. J. Bang-Jensen. Locally semicomplete digraphs: a generalization of tournaments. J. Graph Theory, 14(3):371–390, 1990.
45. J. Bang-Jensen. A note on a special case of the 2-path problem for semicomplete digraphs. In Graph theory, combinatorics, and applications, Vol. 1 (Kalamazoo, MI, 1988), Wiley-Intersci. Publ., pages 77–86. Wiley, New York, 1991.
46. J. Bang-Jensen. Edge-disjoint in- and out-branchings in tournaments and related path problems. J. Combin. Theory Ser. B, 51(1):1–23, 1991.
47. J. Bang-Jensen. On the structure of locally semicomplete digraphs. Discrete Math., 100(1-3):243–265, 1992. Special volume to mark the centennial of Julius Petersen’s “Die Theorie der regul¨aren Graphs”, Part I.
48. J. Bang-Jensen. Arc-local tournament digraphs: a generalization of tournaments and bipartite tournaments. Technical report 2, Department of Mathematics and Computer Science, Odense University, Denmark, 1993.
49. J. Bang-Jensen. A reformulation of Huang’s structure theorem for local tournaments with some consequences. Technical report 13, Department of Mathematics and Computer Science, Odense University, Denmark, 1994.
50. J. Bang-Jensen. Digraphs with the path-merging property. J. Graph Theory, 20(2):255–265, 1995.
51. J. Bang-Jensen. Disjoint Paths with Prescribed Ends and Cycles through Given Arcs in Locally Semicomplete Digraphs and Quasi-Transitive Digraphs. Technical Report 22, Dept. of Math. and Comp. Sci., Odense University, Technical report, 1996.
52. J. Bang-Jensen. Linkages in locally semicomplete digraphs and quasi-transitive digraphs. Discrete Math., 196(1-3):13–27, 1999.
53. J. Bang-Jensen, A. Frank, and B. Jackson. Preserving and increasing local edge-connectivity in mixed graphs. SIAM J. Discrete Math., 8:155–178, 1995.
54. J. Bang-Jensen and Y. Guo. A note on vertex pancyclic oriented graphs. J. Graph Theory, 31:313–318, 1999.
55. J. Bang-Jensen, Y. Guo, G. Gutin, and L. Volkmann. A classiﬁcation of locally semicomplete digraphs. Discrete Math., 167/168:101–114, 1997. 15th British Combinatorial Conference (Stirling, 1995).
56. J. Bang-Jensen, Y. Guo, and L. Volkmann. Weakly Hamiltonian-connected locally semicomplete digraphs. J. Graph Theory, 21(2):163–172, 1996.
57. J. Bang-Jensen, Y. Guo, and A. Yeo. A new suﬃcient condition for a digraph to be Hamiltonian. Discrete Applied Math., 95:61–72, 1999.
58. J. Bang-Jensen, Y. Guo, and A. Yeo. Complementary cycles containing prescribed vertices in tournaments. Discrete Math., 214:77–87, 2000.
59. J. Bang-Jensen and G. Gutin. Longest paths and cycles in extended locally semicomplete digraphs. Technical Report 53, Department of Mathematics and Computer Science, Odense University, Denmark, 1993.
60. J. Bang-Jensen and G. Gutin. Paths, trees and cycles in tournaments. Congr. Numer., 115:131–170, 1996. Surveys in graph theory (San Francisco, CA, 1995).
61. J. Bang-Jensen and G. Gutin. Alternating paths and cycles in edge-coloured multigraphs: a survey. Discrete Math., 165-166:39–60, 1997.

686 References
62. J. Bang-Jensen and G. Gutin. Paths and cycles in extended and decomposable digraphs. Discrete Math., 164(1-3):5–19, 1997. The Second Krakow Conference on Graph Theory (Zgorzelisko, 1994).
63. J. Bang-Jensen and G. Gutin. Vertex heaviest paths and cycles in quasitransitive digraphs. Discrete Math., 163(1-3):217–223, 1997.
64. J. Bang-Jensen and G. Gutin. Alternating cycles and trails in 2-edge-coloured complete multigraphs. Discrete Math., 188:61–72, 1998.
65. J. Bang-Jensen and G. Gutin. Generalizations of tournaments: A survey. Journal of Graph Theory, 28:171–202, 1998.
66. J. Bang-Jensen and G. Gutin. On the complexity of hamiltonian path and cycle problems in certain classes of digraphs. Discrete Applied Math., 95:41– 60, 1999.
67. J. Bang-Jensen, G. Gutin, and J. Huang. Weakly Hamiltonian-connected ordinary multipartite tournaments. Discrete Math., 138(1-3):63–74, 1995. 14th British Combinatorial Conference (Keele, 1993).
68. J. Bang-Jensen, G. Gutin, and J. Huang. A suﬃcient condition for a semicomplete multipartite digraph to be Hamiltonian. Discrete Math., 161(1-3):1–12, 1996.
69. J. Bang-Jensen, G. Gutin, and H. Li. Suﬃcient conditions for a digraph to be Hamiltonian. J. Graph Theory, 22(2):181–187, 1996.
70. J. Bang-Jensen, G. Gutin, and A. Yeo. On k-strong and k-cyclic digraphs. Discrete Math., 162(1-3):1–11, 1996.
71. J. Bang-Jensen, G. Gutin, and A. Yeo. Hamiltonian cycles avoiding prescribed arcs in tournaments. Combin. Probab. Comput., 6(3):255–261, 1997.
72. J. Bang-Jensen, G. Gutin, and A. Yeo. A polynomial algorithm for the Hamiltonian cycle problem in semicomplete multipartite digraphs. J. Graph Theory, 29:111–132, 1998.
73. J. Bang-Jensen, G. Gutin, and A. Yeo. Properly coloured Hamiltonian paths in edge-coloured complete graphs. Discrete Applied Math., 83:267–270, 1998.
74. J. Bang-Jensen and P. Hell. The eﬀect of two cycles on the complexity of colourings by directed graphs. Discrete Appl. Math., 26(1):1–23, 1990.
75. J. Bang-Jensen and P. Hell. Fast algorithms for ﬁnding Hamiltonian paths and cycles in in-tournament digraphs. Discrete Appl. Math., 41(1):75–79, 1993.
76. J. Bang-Jensen, P. Hell, and J. Huang. Optimal recognition of local tournaments. Congressus Numerantium, 100:141–146, 1994.
77. J. Bang-Jensen, P. Hell, and G. MacGillivray. The complexity of colouring by semicomplete digraphs. SIAM J. Discrete Math., 1(3):281–298, 1988.
78. J. Bang-Jensen, P. Hell, and G. MacGillivray. On the complexity of colouring by superdigraphs of bipartite graphs. Discrete Math., 109(1-3):27–44, 1992. Algebraic graph theory (Leibnitz, 1989).
79. J. Bang-Jensen and J. Huang. Quasi-transitive digraphs. J. Graph Theory, 20(2):141–161, 1995.
80. J. Bang-Jensen and J. Huang. Kings in quasi-transitive digraphs. Discrete Math., 185(1-3):19–27, 1998.
81. J. Bang-Jensen, J. Huang, and E. Prisner. In-tournament digraphs. J. Combin. Theory Ser. B, 59(2):267–287, 1993.
82. J. Bang-Jensen, J. Huang, and A. Yeo. Strongly connected spanning subgraphs with the minimum number of arcs in quasi-transitive digraphs. Technical Report 5, Department of Mathematics and Computer Science, Odense University, Denmark, 1999.
83. J. Bang-Jensen and T. Jord´an. Spanning 2-strong subtournaments in 3-strong semicomplete digraphs . Unpublished manuscript, November 1995. Department of Mathematics and Computer Science, Odense University, Denmark.

References 687
84. J. Bang-Jensen and T. Jord´an. Adding and reversing arcs in semicomplete digraphs. Combin. Probab. Comput., 7(1):17–25, 1998.
85. J. Bang-Jensen and G. MacGillivray. Further eﬀects of two directed cycles on the complexity of H-colouring. J. Combin. Math. Combin. Comput., 10:33–50, 1991.
86. J. Bang-Jensen and Y. Manoussakis. Weakly Hamiltonian-connected vertices in bipartite tournaments. J. Combin. Theory Ser. B, 63(2):261–280, 1995.
87. J. Bang-Jensen, Y. Manoussakis, and C. Thomassen. A polynomial algorithm for Hamiltonian-connectedness in semicomplete digraphs. J. Algorithms, 13(1):114–127, 1992.
88. J Bang-Jensen and S. Poljak. Eulerian trails through a set of terminals in speciﬁc, unique and all orders. Contemporary Mathematics, 147:247–258, 1993.
89. J. Bang-Jensen and C. Thomassen. A polynomial algorithm for the 2-path problem for semicomplete digraphs. SIAM J. Discrete Math., 5:366–376, 1992.
90. J. Bang-Jensen and A. Yeo. Strongly connected spanning subgraphs with the minimum number of arcs in semicomplete multipartite digraphs. Technical report 4, Department of Mathematics and Computer Science, Odense University, Denmark, 1999.
91. M. Bankfalvi and Zs. Bankfalvi. Alternating hamiltonian circuit in twocoloured complete graphs. In Proceedings of Colloq. Tihany 1968, pages 11–18. Academic Press, New York, 1968.
92. E. Barbut and A. Bialostocki. A generalization of rotational tournaments. Discrete Math., 76(2):81–87, 1989.
93. E. Barbut and A. Bialostocki. On regular r-tournaments. Ars Combin., 34:97– 106, 1992.
94. O. Barr. Properly coloured Hamiltonian paths in edge-coloured complete graphs without monochromatic triangles. ARS Combinatoria, 50:316–318, 1998.
95. J.-P. Barth´el´emy, O. Hudry, G. Isaak, F.S. Roberts, and B. Tesman. The reversing number of a digraph. Discrete Appl. Math., 60(1-3):39–76, 1995. ARIDAM VI and VII (New Brunswick, NJ, 1991/1992).
96. E.T. Baskoro, M. Miller, J. Plesn´ık, and S. Zn´am. Digraphs of degree 3 and order close to the Moore bound. J. Graph Theory, 20:339–349, 1995.
97. G. Battista, P. Eades, R. Tamassia, and I.G. Tollis. Graph Drawing. Prentice Hall, Englewood Cliﬀs, NJ, 1999.
98. J. Beck. On 3-chromatic hypergraphs. Discrete Math., 24(2):127–137, 1978. 99. L.W. Beineke and C.H.C. Little. Cycles in bipartite tournaments. J. Combin.
Theory Ser. B, 32(2):140–145, 1982. 100. L.W. Beineke and M.D. Plummer. On the 1-factors of a nonseparable graph.
J. Combin. Theory Ser. B, 2:285–289, 1967. 101. L.W. Beineke and C.M. Zamﬁrescu. Connection digraphs and second order
line graphs. Discrete Math., 39:237–254, 1982. 102. R.E. Bellman. On a routing problem. Quart. Appl. Math., 16:87–90, 1958. 103. A. Benkouar, Y. Manoussakis, V. Paschos, and R. Saad. On the complexity of
ﬁnding alternating Hamiltonian and Eulerian cycles in edge-coloured graphs. In , volume 557 of Lecture Notes in Comput. Sci., pages 190–198. Springer Verlag, Berlin, 1991. 104. M.D. Bennett. Nucleotypic basis of the spacial ordering of chromosomes in eucariotes and the implications of the order for genome and phenotypic variation. In Genome Evolution, pages 239–261. Academic Press, London, 1982. 105. C. Berge. Graphs and Hypergraphs. North-Holland Publishing Co., Amsterdam, 1976. Second edition. 106. C. Berge. Diperfect graphs. Combinatorica, 2(3):213–222, 1982.

688 References
107. C. Berge. Path partitions in directed graphs. In Combinatorial Mathematics (Marseille-Luminy, 1981), pages 59–63. North-Holland, Amsterdam, 1983.
108. C. Berge. Graphs. North-Holland Publishing Co., Amsterdam, 1985. Second revised edition of part 1 of the 1973 English version.
109. C. Berge and Rao A.R. A combinatorial problem in logic. Discrete Math., 17:23–26, 1977.
110. C. Berge and P. Duchet. Recent problems and results about kernels in directed graphs. Discrete Math., 86(1-3):27–31, 1990.
111. K.A. Berman and X. Liu. Cycles through large degree vertices in digraphs: a generalization of Meyniel’s theorem. J. Combin. Theory, Ser. B, 74:20–27, 1998.
112. J.-C. Bermond, A. Germa, M.-C. Heydemann, and D. Sotteau. Girth in digraphs. J. Graph Theory, 4(3):337–341, 1980.
113. J.-C. Bermond and P. Hell. On even factorizations and the chromatic index of the Kautz and de Bruijn digraphs. J. Graph Theory, 17:647–655, 1993.
114. J.-C. Bermond and C. Peyrat. De Bruijn and Kautz networks: A competitor for the hypercube? In Hypercube and distributed computers, Andr´e, F. and Verjus, J. P. (eds.), pages 279–493. Elsevier, North-Holland, 1989.
115. J.-C. Bermond and C. Thomassen. Cycles in digraphs—a survey. J. Graph Theory, 5(1):1–43, 1981.
116. P. Bertolazzi, R.F. Cohen, G. Di Battista, R. Tamassia, and I.G. Tollis. How to draw a series-parallel digraph. Internat. J. Comput. Geom. Appl., 4(4):385– 402, 1994.
117. A. Bialostocki. An application of the Ramsey theorem to ordered rtournaments. Discrete Math., 61(2-3):325–328, 1986.
118. W. Bienia, L. Goddyn, P. Gvozdjak, A. Seb¨o, and M. Tarsi. Flows, view obstructions, and the lonely runner. J. Combin. Theory Ser. B, 72(1):1–9, 1998.
119. N.L. Biggs, E.K. Lloyd, and R.J. Wilson. Graph Theory 1736-1936. Clarendon Press, 1976.
120. F. Boesch and R. Tindell. Robbins’s theorem for mixed multigraphs. Amer. Math. Monthly, 87(9):716–719, 1980.
121. B. Bollob´as and P. Erd˝os. Alternating Hamiltonian cycles. Israel J. Math., 23:126–131, 1976.
122. B. Bollob´as, D.L. Goldsmith, and D.R. Woodall. Indestructive deletions of edges from graphs. J. Combin. Theory Ser. B, 30(3):263–275, 1981.
123. B. Bollob´as and R. H¨aggkvist. Powers of Hamilton cycles in tournaments. J. Combin. Theory Ser. B, 50(2):309–318, 1990.
124. J.A. Bondy. Diconnected orientations and a conjecture of Las Vergnas. J. London Math. Soc. (2), 14(2):277–282, 1976.
125. J.A. Bondy. A short proof of the Chen-Manalastas theorem. Discrete Math., 146(1-3):289–292, 1995.
126. J.A. Bondy. Basic graph theory: paths and circuits. In Handbook of combinatorics, Vol. 1, 2, pages 3–110. Elsevier, Amsterdam, 1995.
127. J.A. Bondy and U.S.R. Murty. Graph theory with applications. American Elsevier Publishing Co., Inc., New York, 1976.
128. J.A. Bondy and C. Thomassen. A short proof of Meyniel’s theorem. Discrete Math., 19(2):195–197, 1977.
129. J.A. Bondy and A. Vince. Cycles in a graph whose lengths diﬀer by one or two. J. Graph Theory, 27(1):11–15, 1998.
130. O.V. Borodin, A.V. Kostochka, and D.R. Woodall. On kernel-perfect orientations of line graphs. Discrete Math., 191(1-3):45–49, 1998. Graph theory (Elgersburg, 1996).

References 689
131. E. Boros and V. Gurvich. Perfect graphs are kernel-solvable. Discrete Math., 159:35–55, 1996.
132. E. Boros and V. Gurvich. A corrected version of the Duchet kernel conjecture. Discrete Math., 179(1-3):231–233, 1998.
133. A. Brandst¨adt. Graphen und Algorithmen. B. G. Teubner, Stuttgart, 1994. 134. G. Brassard and P. Bratley. Fundamentals of algorithmics. Prentice Hall Inc.,
Englewood Cliﬀs, NJ, 1996. 135. R.C. Brewster and G. MacGillivray. The homomorphism factoring problem.
J. Combin. Math. Combin. Comput., 25:33–53, 1997. 136. W.G. Bridges and S. Toueg. On the impossibility of directed Moore graphs.
J. Combin. Theory, Ser. B, 29:339–341, 1980. 137. R.E. Burkard, V.G. Deineko, and Woeginger G.J. The travelling salesman
problem and the PQ-tree. In Proceedings of IPCO V, volume 1084 of Lecture Notes in Comput. Sci., pages 490–504. Springer Verlag, Berlin, 1996. 138. R.G. Busacker and P.J. Gowen. A procedure for determining a family of minimal cost network ﬂow patterns. Technical Report 15, ORO Tech. report, John Hopkins University, 1961. 139. L. Caccetta and R. H¨aggkvist. On minimal digraphs with given girth. Congressus Numerantium, 21:181–187, 1978. 140. P. Camion. Chemins et circuits hamiltoniens des graphes complets. C. R. Acad. Sci. Paris, 249:2151–2152, 1959. 141. Papadimitriou C.H. and M. Yannakakis. On limited nondeterminism and the complexity of the V-C dimension. In Proc. 8th Annual Symp. Structure in Complexity Theory, pages 12–18, San Diego, Ca., 1993. 142. G.J. Chang, F.K. Hwang, and L.D. Tong. The Hamiltonian property of the consecutive-3 digraphs. Math. Comp. Mod., 25:83–88, 1997. 143. G.J. Chang, F.K. Hwang, and L.D. Tong. The consecutive-4 digraph are Hamiltonian. J. Graph Theory, 31:1–6, 1999. 144. G. Chartrand, D. Geller, and S. Hedetniemi. Graphs with forbidden subgraphs. J. Comb. Theory Ser. B, 10:12–41, 1971. 145. C.C. Chen and D.E. Daykin. Graphs with Hamiltonian cycles having adjacent lines of diﬀerent colors. J. Combin. Theory, Ser. B, 21:135–139, 1976. 146. C.C. Chen and Jr. Manalastas, P. Every ﬁnite strongly connected digraph of stability 2 has a Hamiltonian path. Discrete Math., 44(3):243–250, 1983. 147. G.-T. Chen, R.J. Gould, and H. Li. Partitioning Vertices of a Tournament into Independent Cycles. Technical report 1158, LRI, Universite Paris-sud, 1998. 148. E. Cheng and T. Jord´an. Successive edge-connecitity augmentation problems. Mathematical Programming, Series B, 84:577–593, 1999. 149. J. Cheriyan and S.N. Maheshwari. Analysis of preﬂow push algorithms for maximum network ﬂow. SIAM J. Computing, 18:1057–1086, 1989. 150. J. Cheriyan and J.H. Reif. Directed s-t numberings, rubber bands, and testing digraph k-vertex connectivity. Combinatorica, 14(4):435–451, 1994. 151. J. Cheriyan and R. Thurimella. Approximating minimum-size k-connected spanning subgraphs via matching (extended abstract). In 37th Annual Symposium on Foundations of Computer Science (Burlington, VT, 1996), pages 292–301. IEEE Comput. Soc. Press, Los Alamitos, CA, 1996. 152. J. Cheriyan and R. Thurimella. Approximating minimum size k-connected spanning subgraphs via matching. Electronic Colloquium on Computational Complexity, Report no. 25:36 pages, 1998. 153. B.V. Cherkassky and A.V. Goldberg. Negative-cycle detection algorithms. Mathematical Programming, 85:277–311, 1999.

690 References
154. B.V. Cherkassky, A.V. Goldberg, and T. Radzik. Shortest paths algorithms: theory and experimental evaluation. Mathematical Programming, 73:129–174, 1996.
155. A.G. Chetwynd and A.J.W. Hilton. Alternating Hamiltonian cycles in two colored complete bipartite graphs. J. Graph Theory, 16:153–158, 1992.
156. W.S. Chow, Y. Manoussakis, O. Megalakaki, M. Spyratos, and Zs. Tuza. Paths through ﬁxed vertices in edge-colored graphs. Math. Informatique et Sciences Humaines, 127(32):49–58, 1994.
157. F.R.K. Chung, M.R. Garey, and R.E. Tarjan. Strongly connected orientations of mixed multigraphs. Networks, 15(4):477–484, 1985.
158. F.R.K. Chung, W. Goddard, and D.J. Kleitman. Even cycles in directed graphs. SIAM J. Discrete Math., 7(3):474–483, 1994.
159. V. Chva´tal. On Hamilton’s ideals. J. Combin. Theory, Ser. B, 12:163–168, 1972.
160. V. Chva´tal. Linear programming. W. H. Freeman and Company, 1983. 161. V. Chva´tal and P. Erd˝os. A note on Hamiltonian circuits. Discrete Math.,
2:111–113, 1972. 162. V. Chva´tal and L. Lova´sz. Every directed graph has a semi-kernel. Lecture
Notes in Mathematics, 411:175, 1974. 163. V. Chv´atal and E. Szemer´edi. Short cycles in directed graphs. J. Combin.
Theory Ser. B, 35(3):323–327, 1983. 164. V. Chv´atal and C. Thomassen. Distances in orientations of graphs. J. Combin.
Theory Ser. B, 24(1):61–75, 1978. 165. S.A. Cook. The complexity of theorem-proving procedures. In Proceedings of
the 3rd Ann. ACM Symp. on Theory of Computing, pages 151–158, 1971. 166. W.J. Cook, W.H. Cunninghan, W.R. Pulleyblank, and A. Schrijver. Combi-
natorial Optimization. John Wiley & Sons, New York, 1998. 167. C. Cooper, A. Frieze, and M. Molloy. Hamilton cycles in random regular
digraphs. Combin. Probab. Comput., 3(1):39–49, 1994. 168. D. Coppersmith and S. Winograd. Matrix multiplication via arithmetic pro-
gressions. In Proceedings of the 19th Ann. ACM Symp. on Theory of Computation, pages 1–6, ACM Press, 1987. 169. T.H. Cormen, C.E. Leiserson, and R.L. Rivest. Introduction to algorithms. The MIT Electrical Engineering and Computer Science Series. MIT Press, Cambridge, MA, 1990. 170. W.H. Cunningham and A. Frank. A primal-dual algorithm for submodular ﬂows. Math. Oper. Res., 10(2):251–262, 1985. 171. G. Dahl. Directed Steiner problems with connectivity constraints. Discrete Appl. Math., 47:109–128, 1193. 172. M. Dalmazzo. Nombre d’arcs dans les graphes k-arc-fortement connexes minimaux. C.R.Acad. Sci. Paris A, 2853:341–344, 1977. 173. P. Dankelmann and L. Volkmann. Degree sequence conditions for maximally edge-connected graphs and digraphs. J. Graph Theory, 26(1):27–34, 1997. 174. S.K. Darbinyan. Cycles of any length in digraphs with large semidegrees. Akad. Nauk Armyan. SSR Dokl., 75(4):147–152, 1982. 175. S.K. Darbinyan. Pancyclicity of digraphs with large semidegrees. Akad. Nauk Armyan. SSR Dokl., 80(2):51–54, 1985. 176. S.K. Darbinyan. Pancyclicity of digraphs with the Meyniel condition. Studia Sci. Math. Hungar., 20(1-4):95–117, 1985. 177. S.K. Darbinyan. A suﬃcient condition for the Hamiltonian property of digraphs with large semidegrees. Akad. Nauk Armyan. SSR Dokl., 82(1):6–8, 1986.

References 691
178. S.K. Darbinyan. On the pancyclicity of digraphs with large semidegrees. Akad. Nauk Armyan. SSR Dokl., 83(3):99–101, 1986.
179. S.K. Darbinyan. Hamiltonian and strongly Hamilton-connected digraphs. Akad. Nauk Armyan. SSR Dokl., 91(1):3–6, 1990.
180. S.K. Darbinyan. On hamiltonian bypasses in digraphs satisfying Meyniel-like conditions (in Russian). Math. Problems in Computer Science, 20:7–19, 1998.
181. M. Darrah, Y.-P. Liu, and C.-Q. Zhang. Cycles of all lengths in arc-3-cyclic semicomplete digraphs. Discrete Math., 173(1-3):23–33, 1997.
182. P. Das. Pan-alternating cyclic edge-partitioned graphs. ARS Combinatoria, 14:105–114, 1982.
183. H.A. David. The method of paired comparisons. Oxford Univ. Press, London, second edition, 1988.
184. D.E. Daykin. Graphs with cycles having adjacent lines of diﬀerent colors. J. Combin. Theory, Ser. B, 20:149–152, 1976.
185. N.G. de Bruijn. A combinatorial problem. Nederl. Akad. Wetensh. Proc., 49:758–764, 1946.
186. W.F. de la Vega. On the maximum cardinality of a consistent set of arcs in a random tournament. J. Comb. Theory Ser. B, 35:328–332, 1983.
187. N. Dean and B.J. Latka. Squaring the tournament—an open problem. Congressus Numerantium, 109:73–80, 1995.
188. V.G. Deineko and Woeginger G.J. A study of exponential neighbourhoods for the traveling salesman problem and the quadratic assignment problem. Technical Report Woe05, Tech. University Graz, Austria, 1997.
189. C. Delorme, O. Ordaz, and D. Quiroz. Tools for studying paths and cycles in digraphs. Networks, 31:125–148, 1998.
190. X. Deng, P. Hell, and J. Huang. Linear-time representation algorithms for proper circular-arc graphs and proper interval graphs. SIAM J. Computing, 25(2):390–403, 1996.
191. R. Diestel. Graph theory. Springer-Verlag, New York, 2000. 2nd edition, ﬁrst edition 1997.
192. E.W. Dijkstra. A note on two problems in connection with graphs. Numerische Mathematik, 1:269–271, 1959.
193. R.P. Dilworth. A decomposition theorem for partially ordered sets. Annals of Mathematics, 51:161–166, 1950.
194. G. Ding, A. Schrijver, and P.D. Seymour. Disjoint paths in a planar graph – a general theorem. SIAM J. Discrete Math., 5(1):112–116, 1992.
195. E.A. Dinic. An algorithm for the solution of the problem of maximal ﬂow in a network with power estimation. Dokl. Akad. Nauk SSSR, 194:754–757, 1970.
196. E.A. Dinits and A.V. Karzanov. On the existence of two edge-disjoint chains in multi-graph connecting given pairs of its vertices. Graph Theory Newsletters, 8:2–3, 1979.
197. E.A. Dinits and A.V. Karzanov. On two integer ﬂows of value 1. In Combinatorial methods for network ﬂow problems, A.V. Karzanov, ed., pages 127–137. Institute for System Studies, Moscow, 1979.
198. G.A. Dirac. Some theorems on abstract graphs. Proc. London Math. Soc., 2(3):69–81, 1952.
199. A. Dolan and J. Aldous. Networks and algorithms. John Wiley & Sons Ltd., Chichester, 1993. An introductory approach.
200. D. Dorninger. On permutations of chromosomes. In Contributions to General Algebra, volume 5, pages 95–103. Teubner-Verlag, Stuttgart, 1987.
201. D. Dorninger. Hamiltonian circuits determining the order of chromosomes. Discrete Applied Math., 50:159–168, 1994.

692 References
202. D. Dorninger and W. Timischl. Geometrical constraints on Bennett’s predictions of chromosome order. Heredity, 58:321–325, 1987.
203. K. Dowsland. Simulated annealing. In Modern heuristic techniques for combinatorial problems, C.R.Reeves ed., pages 20–69. McGraw-Hill Book Company, 1995.
204. D.-Z. Du, F. Cao, and D.F. Hsu. De Bruijn digraphs, and Kautz digraphs, and their generalizations. In Combinatorial network theory, Du, D.-Z. and Hsu, D.F. (eds), pages 65–105. Kluwer Acad. Publ., Dordrecht, 1996.
205. D.-Z. Du and D.F. Hsu. On Hamiltonian consecutive-d digraphs. Banach Center Publ., 25:47–55, 1989.
206. D.-Z. Du, D.F. Hsu, and F.K. Hwang. Hamiltonian property of d-consecutive digraphs. Math. and Comput. Modeling, 17:61–63, 1993.
207. D.Z. Du, Y.-D. Lyuu, and D.F. Hsu. Line digraph iterations and the spread concept—with application to graph theory, fault tolerance, and routing. In Graph-theoretic concepts in computer science (Fischbachau, 1991), pages 169– 179. Springer, Berlin, 1992.
208. I.S. Duﬀ, A.M. Erisman, and J.K. Reid. Direct methods for sparse matrices. Oxford University Press, 1997.
209. R.J. Duﬃn. Topology of series-parallel networks. J. Mathematical Analysis and Applications, 10:303–318, 1965.
210. J. Edmonds. Paths, trees, and ﬂowers. Canad. J. Math., 17:449–467, 1965. 211. J. Edmonds. Optimum branchings. J. Res. Nat. Bur. Standards Sect. B,
71B:233–240, 1967. 212. J. Edmonds. Submodular functions, matroids, and certain polyhedra. In Com-
binatorial Structures and their Applications (Proc. Calgary Internat. Conf., Calgary, Alta., 1969), pages 69–87. Gordon and Breach, New York, 1970. 213. J. Edmonds. Matroids and the greedy algorithm. Math. Programming, 1:127– 136, 1971. 214. J. Edmonds. Edge-disjoint branchings. In Combinatorial Algorithms (B. Rustin, ed.) , pages 91–96. Academic Press, New York, 1973. 215. J. Edmonds and R. Giles. A min-max relation for submodular functions on graphs. In Studies in integer programming (Proc. Workshop, Bonn, 1975), pages 185–204. Ann. of Discrete Math., Vol. 1. North-Holland, Amsterdam, 1977. 216. J. Edmonds and R.M. Karp. Theoretical improvements in algorithmic eﬃciency for network ﬂow problems. Journal of the ACM, 19:248–264, 1972. 217. A. Ehrenfeucht, H.N. Gabow, R.M. McConnell, and S.J. Sullivan. An O(n2) divide-and-conquer algorithm for the prime tree decomposition of twostructures and modular decomposition of graphs. J. Algorithms, 16(2):283–294, 1994. 218. S. Enni. A note on mixed graphs and directed splitting oﬀ. J. Graph Theory, 27(4):213–221, 1998. 219. S. Enni. A 1-ST -edge-connectivity augmentation algorithm. Mathematical Programming Ser. B, 84:529–535, 1999. 220. P. Erd˝os. Graph theory and probability. Canad. J. Math., 11:34–38, 1959. 221. P. Erd˝os. Some old and new problems in various branches of combinatorics. Congressus Numerantium, 23:19–37, 1979. 222. P. Erd˝os, A.L. Rubin, and R.W. Irwing. Choosability in graphs. Congressus Numerantium, 26:122–157, 1980. 223. P. Erd˝os and W.T. Trotter. When the Cartesian product of directed cycles is Hamiltonian. J. Graph Theory, 2:137–142, 1978. 224. A.H. Esfahanian and S.L. Hakimi. On computing the connectivities of graphs and digraphs. Networks, 14(2):355–366, 1984.

References 693
225. L. Euler. Solutio problematis ad geometriam situs pertinentis. Comment. Academiae Sci. Petropolitanae, 8:128–140, 1736.
226. L. Euler. Solutio problematis as geometriam situs pertinentis. Commentarii Academiae Scientiarum Imperialis Petropolitanae, 8:128–140, 1736.
227. G. Even, J. Naor, B. Schieber, and M. Sudan. Approximating minimum feedback sets and multicuts in directed graphs. Algorithmica, 20(2):151–174, 1998.
228. S. Even. An algorithm for determining whether the connectivity of a graph is at least k. SIAM J. Computing, 4(3):393–396, 1975.
229. S. Even. Graph algorithms. Computer Science Press Inc., Woodland Hills, Calif., 1979. Computer Software Engineering Series.
230. S. Even, A. Itai, and A. Shamir. On the complexity of timetable and multicommodity ﬂow problems. SIAM J. Computing, 5(4):691–703, 1976.
231. S. Even and O. Kariv. An O(n2.5)-algorithm for maximum matchings in general graphs. In Proceedings of the 16th Annual Symp. Foundations of CS, Berkley, 1975, pages 100–112. IEEE Comput. Soc. Press, Los Alamitos, CA, 1975.
232. S. Even and R.E. Tarjan. Network ﬂow and testing graph connectivity. SIAM J. Computing, 4(4):507–518, 1975.
233. J. Feldman and M. Ruhl. The directed Steiner network problem is tractable for a constant number of terminals. In Proceedings of the 40th annual Symposium on Foundations of Computer Science, pages 299–308. IEEE Computer Society Press, 1999.
234. W. Feller. An introduction to probability theory and its applications. Vol. I. John Wiley & Sons Inc., New York, third edition, 1968.
235. J.F. Fink and L. Lesniak-Foster. Graphs for which every unilateral orientation is traceable. ARS Combinatoria, 9:113–118, 1980.
236. M.A. Fiol, J.L.A. Yebra, and I. Alegre. Line digraph iteration and the (d, k) digraph problem. IEEE Transections on Computers, C-33:400–403, 1984.
237. D.C. Fisher. Squaring a tournament: a proof of Dean’s conjecture. J. Graph Theory, 23(1):43–48, 1996.
238. M.J. Fisher and A.R. Meyer. Boolean matrix multiplication and transitive closure. In Proceedings of the 12th Ann. ACM Symp. on Switching and Automata Theory, pages 129–131. ACM Press, 1971.
239. H. Fleischner. Eine gemeinsame Basis fu¨r die Theorie der Eulerschen Graphen und den Satz von Petersen. Monatsh. Math., 81(4):267–278, 1976.
240. H. Fleischner. Eulerian graphs and related topics. Part 1. Vol. 1. NorthHolland Publishing Co., Amsterdam, 1990.
241. H. Fleischner. Eulerian graphs and related topics. Part 1. Vol. 2. NorthHolland Publishing Co., Amsterdam, 1991.
242. H. Fleischner, G. Sabidussi, and E. Wegner. Transforming eulerian trails. Discrete Math., 109:103–116, 1992.
243. R.W. Floyd. Algorithm 97, shortest path. Comm. ACM, 5:345, 1962. 244. R. Forcade. Parity of paths and circuits in tournaments. Discrete Math.,
6:115–118, 1973. 245. Jr. Ford, L.R. Network ﬂow theory. Technical Report P-923, The Rand Corp.,
1956. 246. Jr. Ford, L.R. and D.R. Fulkerson. Flows in networks. Princeton University
Press, Princeton, N.J., 1962. 247. S. Fortune, J.E. Hopcroft, and J. Wyllie. The directed subgraph homeomor-
phism problem. Theoretical Computer Science, 10:111–121, 1980. 248. P. Fraigniaud and E. Lazard. Methods and problems of communication in
usual networks. Discrete Applied Math., 53:79–133, 1994.

694 References
249. P. Fraisse and C. Thomassen. Hamiltonian dicycles avoiding prescribed arcs in tournaments. Graphs Combin., 3(3):239–250, 1987.
250. A. Frank. Kernel systems of directed graphs. Acta Sci. Math. (Szeged), 41(12):63–76, 1979.
251. A. Frank. On the orientation of graphs. J. Combin. Theory Ser. B, 28(3):251– 261, 1980.
252. A. Frank. On disjoint trees and arborescences. In Algebraic methods in graph theory, Vol. I, II (Szeged, 1978), pages 159–169. North-Holland, Amsterdam, 1981.
253. A. Frank. A note on k-strongly connected orientations of an undirected graph. Discrete Math., 39(1):103–104, 1982.
254. A. Frank. An algorithm for submodular functions on graphs. In Bonn Workshop on Combinatorial Optimization (Bonn, 1980), volume 16 of Ann. Discrete Math., pages 97–120. North-Holland, Amsterdam, 1982.
255. A. Frank. Finding feasible vectors of Edmonds-Giles polyhedra. J. Combin. Theory Ser. B, 36(3):221–239, 1984.
256. A. Frank. Submodular ﬂows. In Progress in combinatorial optimization (Waterloo, Ont., 1982), pages 147–165. Academic Press, Toronto, Ont., 1984.
257. A. Frank. On connectivity properties of Eulerian digraphs. In Graph theory in memory of G. A. Dirac (Sandbjerg, 1985), volume 41 of Ann. Discrete Math., pages 179–194. North-Holland, Amsterdam, 1989.
258. A. Frank. Augmenting graphs to meet edge-connectivity requirements. SIAM J. Discrete Math., 5(1):25–53, 1992.
259. A. Frank. Applications of submodular functions. In Surveys in combinatorics, 1993 (Keele), volume 187 of London Math. Soc. Lecture Note Ser., pages 85– 136. Cambridge Univ. Press, Cambridge, 1993.
260. A. Frank. Submodular functions in graph theory. Discrete Math., 111(13):231–243, 1993. Graph theory and combinatorics (Marseille-Luminy, 1990).
261. A. Frank. Connectivity augmentation problems in network design. In Mathematical Programming: State of the art (J. R. Birge, K. G. Murty eds.), pages 34–63. The University of Michigan, 1994.
262. A. Frank. Connectivity and network ﬂows. In Handbook of combinatorics, Vol. 1, 2, pages 111–177. Elsevier, Amsterdam, 1995.
263. A. Frank. Orientations of graphs and submodular ﬂows. Congr. Numer., 113:111–142, 1996. Festschrift for C. St. J. A. Nash-Williams.
264. A. Frank. Applications of relaxed submodularity. Documenta Mathematica, Extra Vol. III:343–354, 1998.
265. A. Frank. Increasing the rooted-connectivity of a digraph by one. Mathematical Programming, Series B, 84:565–576, 1999.
266. A. Frank. Finding minimum edge-coverings of pairs of sets. manuscript 1998.
267. A. Frank and A. Gy´arfa´s. Directed graphs and computer programs. In Probl´emes Combinatoires et Th´eorie des Graphes, Colloque Internationaux C.N.R.S., 260, pages 157–158, 1976.
268. A. Frank and A. Gy´arfa´s. How to orient the edges of a graph? In Combinatorics (Proc. Fifth Hungarian Colloq., Keszthely, 1976), Vol. I, volume 18 of Colloq. Math. Soc. J´anos Bolyai, pages 353–364. North-Holland, Amsterdam, 1978.
269. A. Frank, T. Ibaraki, and H. Nagamochi. On sparse subgraphs preserving connectivity properties. J. Graph Theory, 17(3):275–281, 1993.
270. A. Frank, T. Ibaraki, and H. Nagamochi. Two arc-disjoint paths in Eulerian digraphs. SIAM J. Discrete Math., 11(4):557–589 (electronic), 1998.

References 695
271. A. Frank and T. Jord´an. How to make a strongly connected digraph twoconnected. In Integer programming and combinatorial optimization (Copenhagen, 1995), volume 920 of Lecture Notes in Comput. Sci., pages 414–425. Springer, Berlin, 1995.
272. A. Frank and T. Jord´an. Minimal edge-coverings of pairs of sets. J. Combin. Theory Ser. B, 65(1):73–110, 1995.
273. A. Frank and T. Jord´an. Directed vertex-connectivity augmentation. Mathematical Programming, Series B, 84:537–553, 1999.
274. A. Frank and E´. Tardos. Generalized polymatroids and submodular ﬂows. Mathematical Programming Series B, 42(3 (Ser. B)):489–563, 1988. Submodular optimization.
275. A. Frank and E´. Tardos. An application of submodular ﬂows. Linear Algebra Appl., 114/115:329–348, 1989.
276. P. Frankl. What must be contained in every oriented k-uniform hypergraph. Discrete Math., 62(3):311–313, 1986.
277. M.L. Fredman, J. Koml´os, and E. Szemer´edi. Stroring a sparse table with O(1) worst case access time. Journal of the ACM, 31:538–544, 1984.
278. M.L. Fredman and R.E. Tarjan. Fibonacci heaps and their uses in improved network optimization algorithms. J. Assoc. Comput. Mach., 34(3):596–615, 1987.
279. S. Friedland. Every 7-regular digraph contains an even cycle. J. Combin. Theory Ser. B, 46(2):249–252, 1989.
280. S. Fujishige. Submodular functions and optimization. North-Holland Publishing Co., Amsterdam, 1991.
281. S. Fujishige, H. R¨ock, and U. Zimmermann. A strongly polynomial algorithm for minimum cost submodular ﬂow problems. Math. Oper. Res., 14(1):60–69, 1989.
282. D.R. Fulkerson. Networks, frames and blocking systems. In Mathematics of the decision sciences, part I (eds: G.B.Danzig and A.F.Veinott), pages 303– 334. Amer. Math. Soc., Providence, R.I., 1968.
283. D.R. Fulkerson. Packing rooted directed cuts in a weighted directed graph. Math. Programming, 6:1–13, 1974.
284. M. Funke and G. Reinelt. A polyhedral approach to the feedback vertex set problem. In Integer programming and combinatorial optimization (Vancouver, BC, 1996), pages 445–459. Springer, Berlin, 1996.
285. Z. Fu˝redi, P. Horak, C.M. Pareek, and X. Zhu. Minimal oriented graphs of diameter 2. Graphs and Combinatorics, 14:345–350, 1998.
286. M.E. Furman. Application of a method of fast multiplication of matrices in the problem of ﬁnding the transitive closure of a graph. Sov. Math. Dokl., 11:1252, 1970.
287. H.N. Gabow. A matroid approach to ﬁnding edge connectivity and packing arborescences. J. Comput. System Sci., 50(2):259–273, 1995. 23rd Symposium on the Theory of Computing (New Orleans, LA, 1991).
288. H.N. Gabow and T. Jord´an. Bipartition constrained edge-splitting in directed graphs. Discrete Applied Math., to appear.
289. D. Gale. A theorem on ﬂows in networks. Paciﬁc Journal of Mathematics, 7:1073–1082, 1957.
290. D. Gale and L.S. Shapley. College admissions and the stability of marriage. Amer. Math. Monthly, 69:9–15, 1962.
291. H. Galeana-S´anchez. A counterexample to a conjecture of Meyniel on kernelperfect graphs. Discrete Math., 41:105–107, 1982.
292. H. Galeana-S´anchez. A characterization of normal fraternally orientable perfect graphs. Discrete Math., 169(1-3):221–225, 1997.

696 References
293. H. Galeana-S´anchez and X. Li. Semikernels and (k, l)-kernels in digraphs. SIAM J. Discrete Math., 11(2):340–346, 1998.
294. H. Galeana-S´anchez and V. Neuman-Lara. On kernels and semikernels of digraphs. Discrete Math., 48:67–76, 1984.
295. Z. Galil. Finding the vertex connectivity of graphs. SIAM J. Computing, 9(1):197–199, 1980.
296. T. Gallai. Problem 15, in: M. Fiedler ed., Theory of Graphs and its Applications, page 161. Czech. Akad. Sci. Prague, 1964.
297. T. Gallai. On directed paths and circuits. In Theory of Graphs (Proc. Colloq., Tihany, 1966), pages 115–118. Academic Press, New York, 1968.
298. T. Gallai and A.N. Milgram. Verallgemeinerung eines graphentheoretischen Satzes von R´edei. Acta Sci. Math. Szeged, 21:181–186, 1960.
299. A. Galluccio and M. Loebl. Cycles of prescribed modularity in planar digraphs. J. Algorithms, 21(1):51–70, 1996.
300. A. Galluccio and M. Loebl. Even directed graphs in H-free digraphs. J. Algorithms, 27, 1996.
301. A. Galluccio and M. Loebl. (p, q)-odd digraphs. J. Graph Theory, 23(2):175– 184, 1996.
302. F. Galvin. The list chromatic index of a bipartite multigraph. Journal of Combin. Theory. Series B, 63:153–158, 1995.
303. M.R. Garey and D.S. Johnson. Computers and intractability. W. H. Freeman and Co., San Francisco, Calif., 1979.
304. M.R. Garey, D.S. Johnson, and L. Stockmeyer. Some simpliﬁed NP-complete graph problems. Theoret. Comput. Sci., 1(3):237–267, 1976.
305. M.R. Garey, D.S. Johnson, and R.E. Tarjan. The planar hamiltonian circuit problem is NP-complete. SIAM J. Computing, 5:704–714, 1976.
306. F. Gavril. Some NP-complete problems on graphs. In Proc. 11th Conf. on Information Sciences and Systems, pages 91–95, John Hopkins University, Baltimore, MD, 1977.
307. F. Gavril. Intersection graphs of proper subtrees of unicyclic graphs. J. Graph Theory, 18(6):615–627, 1994.
308. F. Gavril, V. Toledano Laredo, and D. de Werra. Chordless paths, odd holes, and kernels in graphs without m-obstructions. J. Algorithms, 17(2):207–221, 1994.
309. F. Gavril and J. Urrutia. Intersection graphs of concatenable subtrees of graphs. Discrete Appl. Math., 52(2):195–209, 1994.
310. A.M.H. Gerards. Homomorphisms of graphs into odd cycles. J. Graph Theory, 12(1):73–83, 1988.
311. A.M.H. Gerards. Graphs and polyhedra. Binary spaces and cutting planes. Stichting Mathematisch Centrum Centrum voor Wiskunde en Informatica, Amsterdam, 1990.
312. A.M.H. Gerards. An orientation theorem for graphs. J. Combin. Theory Ser. B, 62(2):199–212, 1994.
313. A.M.H. Gerards and F.B. Shepherd. Strong orientations without even directed circuits. Discrete Math., 188(1-3):111–125, 1998.
314. A. Ghouila-Houri. Diametre maximal d’un graphe fortement connexe. C.R. Acad. Sci. Paris, 250:254–256, 1960.
315. A. Ghouila-Houri. Une condition suﬃsante d’existence d’un circuit hamiltonien. C.R. Acad. Sci. Paris, 25:495–497, 1960.
316. A. Ghouila-Houri. Caract´erisation des graphes non orient´es dont on peut orienter les arˇetes de mani`ere `a obtenir le graphe d’une relation d’ordre. C. R. Acad. Sci. Paris, 254:1370–1371, 1962.

References 697
317. P. Gibbons, R. Karp, V. Ramachandran, D. Soroker, and R. Tarjan. Transitive compaction in parallel via branchings. J. Algorithms, 12(1):110–125, 1991.
318. F. Glover. Ejection chains, reference structures, and alternating path algorithms for traveling salesman problem. University of Colorado-Boulder, April 1992.
319. F. Glover, G. Gutin, A. Yeo, and A. Zverovich. Construction heuristics and domination analysis for the asymmetric TSP. European J. Oper. Res., to appear.
320. F. Glover and A.P. Punnen. The travelling salesman problem: new solvable cases and linkages with the development of approximation algorithms. J. Oper. Res. Soc., 48:502–510, 1997.
321. W.D. Goddard, G. Kubicki, O.R. Oellermann, and S.L. Tian. On multipartite tournaments. J. Combin. Theory Ser. B, 52(2):284–300, 1991.
322. W.D. Goddard and O.R. Oellermann. On the cycle structure of multipartite tournaments. In Graph Theory Combin. Appl. 1, pages 525–533. Wiley, New York, 1991.
323. M.X. Goemans and Williamson D. Primal-dual approximation algorithms for feedback problems in planar graphs. Combinatorica, 18:37–59, 1998.
324. A.V. Goldberg and R.E. Tarjan. A new approach to the maximum-ﬂow problem. In Proceedings of the 18th ACM Symposium on the Theory of Computing, pages 136–146. ACM Press, 1986.
325. A.V. Goldberg and R.E. Tarjan. A new approach to the maximum-ﬂow problem. J. Assoc. Comput. Mach., 35(4):921–940, 1988.
326. A.V. Goldberg and R.E. Tarjan. Finding minimum-cost circulations by canceling negative cycles. J. Assoc. Comput. Mach., 36(4):873–886, 1989.
327. M.K. Goldberg. Some applications of the operation of contraction to strongly connected graphs. Uspehi Mat. Nauk, 20(5 (125)):203–205, 1965.
328. M.K. Goldberg. The diameter of a strongly connected graph. Dokl. Akad. Nauk SSSR, 170:767–769, 1966.
329. D.L. Goldsmith and A.T. White. On graphs with equal edge-connectivity and minimum degree. Discrete Math., 23(1):31–36, 1978.
330. M.C. Golumbic. The complexity of comparability graph recognition and coloring. Computing, 18(3):199–208, 1977.
331. M.C. Golumbic. Algorithmic graph theory and perfect graphs. Academic Press [Harcourt Brace Jovanovich Publishers], New York, 1980. With a foreword by Claude Berge, Computer Science and Applied Mathematics.
332. M. Gondran and M. Minoux. Graphs and algorithms. John Wiley & Sons Ltd., Chichester, 1984. Translated from the French by Steven Vajda, A WileyInterscience Publication.
333. A. Goralcikova and V. Koubek. A reduct-and-closure algorithm for graphs. In Proceedings of the 8th Symp. on Math. Foundations of Computer Science, volume 74 of Lecture Notes in Computer Science, pages 301–307. SpringerVerlag, Berlin, 1979.
334. E`.Y. Grinberg. Examples of non-A´ da´m multigraphs. Latv. Mat. Ezhegodnik, 31:128–138, 253, 1988.
335. J.W. Grossman and R. H¨aggkvist. Alternating cycles in edge-partitioned graphs. J. Combin. Theory Ser. B, 34:77–81, 1983.
336. M. Gr¨otschel and F. Harary. The graphs for which all strong orientations are hamiltonian. J. Graph Theory, 3:221–224, 1979.
337. M. Gr¨otschel, M. Ju¨nger, and G. Reinelt. A cutting plane algorithm for the linear ordering problem. Oper. Res., 32(6):1195–1220, 1984.
338. M. Gr¨otschel, L. Lova´sz, and A. Schrijver. The ellipsoid method and its consequences in combinatorial optimization. Combinatorica, 1(2):169–197, 1981.

698 References
339. M. Gr¨otschel, L. Lova´sz, and A. Schrijver. Geometric algorithms and combinatorial optimization. Springer-Verlag, Berlin, 1988.
340. B. Gru¨nbaum. Antidirected Hamiltonian paths in tournaments. J. Combin. Theory Ser. B, 11:249–257, 1971.
341. Y. Guo. Locally semicomplete digraphs. PhD thesis, RWTH Aachen, Germany, 1995.
342. Y. Guo. Strongly Hamiltonian-connected locally semicomplete digraphs. J. Graph Theory, 22(1):65–73, 1996.
343. Y Guo. Path-connectivity in local tournaments. Discrete Math., 167/168:353– 372, 1997. 15th British Combinatorial Conference (Stirling, 1995).
344. Y. Guo. Spanning local tournaments in locally semicomplete digraphs. Discrete Appl. Math., 79(1-3):119–125, 1997. 4th Twente Workshop on Graphs and Combinatorial Optimization (Enschede, 1995).
345. Y. Guo. Semicomplete Multipartite Digraphs: A Generalization of Tournaments. German Habilitation Thesis, RWTH Aachen, Germany 1998.
346. Y. Guo and J.H. Kwak. The cycle structure of regular multipartite tournaments. Aachen, submitted.
347. Y. Guo, A. Pinkernell, and L. Volkmann. On cycles through a given vertex in multipartite tournaments. Discrete Math., 164(1-3):165–170, 1997. The Second Krakow Conference on Graph Theory (Zgorzelisko, 1994).
348. Y. Guo, M. Tewes, L. Volkmann, and A. Yeo. Suﬃcient conditions for semicomplete multipartite digraphs to be hamiltonian. Discrete Math., to appear.
349. Y. Guo and L. Volkmann. Pancyclic locally semicomplete digraphs. Unpublished manuscript. 1992.
350. Y. Guo and L. Volkmann. Cycles in multipartite tournaments. J. Combin. Theory Ser. B, 62(2):363–366, 1994.
351. Y. Guo and L. Volkmann. On complementary cycles in locally semicomplete digraphs. Discrete Math., 135(1-3):121–127, 1994.
352. Y. Guo and L. Volkmann. Locally semicomplete digraphs that are complementary m-pancyclic. J. Graph Theory, 21(2):121–136, 1996.
353. G. Gutin. Criterion for complete bipartite digraphs to be Hamiltonian. Vests¯ı Akad. Navuk BSSR Ser. F¯ız.-Mat. Navuk, 1984(1):109–110, 1984.
354. G. Gutin. On an approach to solving the traveling salesman problem. In Proceedings of the USSR Conference on System Research, pages 184–185. Nauka, Moscow, 1984. (in Russian).
355. G. Gutin. Eﬀective characterization of complete bipartite digraphs that have a Hamiltonian path. Kibernetika (Kiev), 4:124–125, 1985.
356. G. Gutin. The radii of n-partite tournaments. Mat. Zametki, 40(3):414–417, 430, 1986.
357. G. Gutin. Finding the largest contour in a complete bipartite digraph. Kibernetika, (2):117–118, 1987.
358. G. Gutin. Characterization of complete n-partite digraphs that have a Hamiltonian path. Kibernetika (Kiev), (1):107–108, 136, 1988.
359. G. Gutin. Characterization of vertex pancyclic partly oriented k-partite tournaments. Vestsi Acad. Navuk BSSR Ser.Fiz.-Mat., (2):41–46, 1989.
360. G. Gutin. Determining the ranks of vertices in a complete multipartite graph of paired comparisons. Automation and Remote Control, (10):139–147, 1989.
361. G. Gutin. m-sources in complete multipartite digraphs. Vests¯ı Akad. Navuk BSSR Ser. F¯ız.-Mat. Navuk, 5:101–106, 128, 1989.
362. G. Gutin. Cycles and paths in directed graphs. PhD thesis, School of Mathematics, Tel Aviv University, 1993.
363. G. Gutin. Finding a longest path in a complete multipartite digraph. SIAM J. Discrete Math., 6:270–273, 1993.

References 699
364. G. Gutin. On cycles in multipartite tournaments. J. Combin. Theory Ser. B, 58(2):319–321, 1993.
365. G. Gutin. Polynomial algorithms for ﬁnding Hamiltonian paths and cycles in quasi-transitive digraphs. Australas. J. Combin., 10:231–236, 1994.
366. G. Gutin. Minimizing and maximizing the diameter in orientations of graphs. Graphs Combin., 10(3):225–230, 1994.
367. G. Gutin. Characterizations of vertex pancyclic and pancyclic ordinary complete multipartite digraphs. Discrete Math., 141(1-3):153–162, 1995.
368. G. Gutin. Cycles and paths in semicomplete multipartite digraphs, theorems, and algorithms: a survey. J. Graph Theory, 19(4):481–505, 1995.
369. G. Gutin. Exponential neighbourhood local search for the travelling salesman problem. Computers and Operations Research, 26:313–320, 1999.
370. G. Gutin. Connected (g, f )-factors and supereulerian digraphs. ARS Combinatoria, 54:311–317, 2000.
371. G. Gutin, B. Sudakov, and A. Yeo. Note on alternating directed cycles . Discrete Math., 191:101–107, 1998.
372. G. Gutin, M. Tewes, and A. Yeo. Longest paths in strong spanning oriented subgraphs of strong semicomplete multipartite digraphs. Discrete Math., 222:269–274, 2000.
373. G. Gutin and A. Yeo. Ranking the vertices of a complete multipartite paired comparison digraph. Discrete Appl. Math., 69(1-2):75–82, 1996.
374. G. Gutin and A. Yeo. Hamiltonian paths and cycles in hypertournaments. J. Graph Theory, 25(4):277–286, 1997.
375. G. Gutin and A. Yeo. Small diameter neighbourhood graphs for the traveling salesman problem: at most four moves from tour to tour. Computers and Operations Research, 26:321–327, 1999.
376. G. Gutin and A. Yeo. Kings in semicomplete multipartite digraphs. J. Graph Theory, 33:177–183, 2000.
377. G. Gutin and A. Yeo. Note on the path covering number of a semicomplete multipartite digraph. J. Combin. Math. and Combin. Computing., 32:231–237, 2000.
378. G. Gutin and A. Yeo. Orientations of digraphs almost preserving diameter and the one-way street and gossip problems. Technical Report 4, Brunel University, 2000.
379. G. Gutin and A. Yeo. Quasi-hamiltonicity: a series of necessary conditions for a digraph to be hamiltonian. J. Combin. Theory Ser. B, 78:232–242, 2000.
380. G. Gutin and A. Yeo. Remarks on hamiltonian digraphs. submitted:4 pp., 2000.
381. G. Gutin and A. Yeo. Polynomial approximation algorithms for the TSP and the QAP with factorial domination number. Discrete Applied Math., To appear.
382. G. Gutin and A. Yeo. Solution of a conjecture of Volkmann on the number of vertices in longest paths and cycles of strong semicomplete multipartite digraphs. Graphs and Combinatorics, to appear.
383. W. Gutjahr. Graph Colourings. PhD thesis, Freie Universita¨t Berlin, Berlin, 1991.
384. W. Gutjahr, E. Welzl, and G. Woeginger. Polynomial graph-colorings. Discrete Appl. Math., 35(1):29–45, 1992.
385. M. Habib, M. Morvan, and J.-X. Rampon. On the calculation of transitive reduction-closure of orders. Discrete Math., 111:289–303, 1993.
386. R. H¨aggkvist. On F -Hamiltonian graphs. In Graph Theory and Related Topics, pages 219–231. Academic Press, New York, 1979.

700 References
387. R. H¨aggkvist. Hamilton cycles in oriented graphs. Combin. Probab. Comput., 2(1):25–32, 1993.
388. R. H¨aggkvist, P. Hell, D.J. Miller, and V. Neumann Lara. On multiplicative graphs and the product conjecture. Combinatorica, 8(1):63–74, 1988.
389. R. H¨aggkvist and Y. Manoussakis. Cycles and paths in bipartite tournaments with spanning conﬁgurations. Combinatorica, 9(1):33–38, 1989.
390. R. H¨aggkvist and A. Thomason. Trees in tournaments. Combinatorica, 11(2):123–130, 1991.
391. R. H¨aggkvist and C. Thomassen. On pancyclic digraphs. J. Combin. Theory Ser. B, 20(1):20–40, 1976.
392. A. Hajnal, E.C. Milner, and E. Szemer´edi. A cure for the telephone disease. Canad. Math. Bull., 15:447–450, 1972.
393. P. Hall. On representation of subsets. J. London Math. Soc., 10:26–30, 1935. 394. Y.O. Hamidoune. Contribution a l’ ´etude de la connectivit´e d’un graphe. PhD
thesis, 1980. 395. Y.O. Hamidoune. An application of connectivity theory in graphs to factor-
izations of elements in ﬁnite groups. Europ. J. Combin., 2:349–355, 1981. 396. Y.O. Hamidoune. A note on minimal directed graphs with given girth. J.
Combin. Theory Ser. B, 43:343–348, 1987. 397. S. Hansen. Heuristic and exact methods for solving the feedback arc set
problem (Masters Thesis University of Southern Denmark, Odense), 1999. 398. J. Hao and J.B. Orlin. A faster algorithm for ﬁnding the minimum cut in a
directed graph. J. Algorithms, 17(3):424–446, 1994. Third Annual ACM-SIAM Symposium on Discrete Algorithms (Orlando, FL, 1992). 399. F. Harary. The maximum connectivity of a graph. Proc. Nat. Acad. Sci. U.S.A., 48:1142–1146, 1962. 400. F. Harary, J.A. Kabell, and F.R. McMorris. Bipartite intersection graphs. Comment. Math. Univ. Carolin., 23:739–745, 1982. 401. F. Harary, J. Krarup, and A. Schwenk. Graphs suppressible to an edge. Canadian Math. Bull., 15:201–204, 1971. 402. F. Harary and L. Moser. The theory of round robin tournaments. Amer. Math. Mon., 73:231–246, 1966. 403. F. Harary and R.Z. Norman. Some properties of line digraphs. Rend. Circ. Mat. Palermo, 9(2):161–168, 1960. 404. F. Harary, R.Z. Norman, and D. Cartwright. Structural Models. John Wiley and Sons, 1965. 405. F. Havet. Finding an oriented hamiltonian path in a tournament. submitted, 1999. 406. F. Havet. Hamiltonian cycles in tournaments. Submitted, 1999. 407. F. Havet and S. Thomass´e. Median orders of tournaments: a tool for the second neighbourhood problem and Sumner’s conjecture. submitted, 1999. 408. F. Havet and S. Thomass´e. Oriented hamiltonian paths in tournaments: a proof of Rosenfeld’s conjecture. J. Comb. Theory, Ser B, 78:243–273, 2000. 409. S.M. Hedetniemi, S.T. Hedetniemi, and A. Liestman. A survey of gossiping and broadcasting in communication networks. Networks, 18:129–134, 1988. 410. P. Hell, J. Bang-Jensen, and J. Huang. Local tournaments and proper circular arc graphs. In Algorithms (Tokyo, 1990), volume 450 of Lecture Notes in Comput. Sci., pages 101–108. Springer, Berlin, 1990. 411. P. Hell and J. Huang. Lexicographic orientation and representation algorithms for comparability graphs, proper circular arc graphs, and proper interval graphs. J. Graph Theory, 20(3):361–374, 1995. 412. P. Hell and J. Neˇsetˇril. On the complexity of H-coloring. J. Combin. Theory Ser. B, 48(1):92–110, 1990.

References 701
413. P. Hell and J. Neˇsetˇril. The core of a graph. Discrete Math., 109(1-3):117–126, 1992. Algebraic graph theory (Leibnitz, 1989).
414. P. Hell, J. Neˇsetˇril, and X. Zhu. Duality and polynomial testing of tree homomorphisms. Trans. Amer. Math. Soc., 348(4):1281–1297, 1996.
415. P. Hell and M. Rosenfeld. The complexity of ﬁnding generalized paths in tournaments. J. Algorithms, 4(4):303–309, 1983.
416. P. Hell, H.S. Zhou, and X.D. Zhu. On homomorphisms to acyclic local tournaments. J. Graph Theory, 20(4):467–471, 1995.
417. P. Hell and X.D. Zhu. Homomorphisms to oriented paths. Discrete Math., 132(1-3):107–114, 1994.
418. P. Hell and X.D. Zhu. The existence of homomorphisms to oriented cycles. SIAM J. Discrete Math., 8(2):208–222, 1995.
419. R.L. Hemminger and L.W. Beineke. Line graphs and line digraphs. In Selected Topics in Graph Theory (Beineke and Wilson, eds.), pages 271–305. Academic Press, London, 1978.
420. G.R.T. Hendry. Extending cycles in directed graphs. J. Combin. Theory Ser. B, 46(2):162–172, 1989.
421. G.R.T. Hendry. Extending cycles in graphs. Discrete Math., 85(1):59–72, 1990.
422. M.R. Henzinger, S. Rao, and H.N. Gabow. Computing vertex connectivity: new bounds from old techniques. In 37th Annual Symposium on Foundations of Computer Science (Burlington, VT, 1996), pages 462–471. IEEE Comput. Soc. Press, Los Alamitos, CA, 1996.
423. J.S. Heslop-Harrison and M.D. Bennett. Prediction and analysis of spacial order in haploid chromosome complements. Proc. Roy. Soc. London, B:211– 223, 1983.
424. J.S. Heslop-Harrison and M.D. Bennett. The spacial order of chromosomes in root-tip metaphases of Aegilops umbellulata. Proc. Roy. Soc. London, B:225– 239, 1983.
425. C. Heuchenne. Sur une certaine correspondance entre graphs. Bull. Soc. Roy. Sci. Li´ege, 33:743–753, 1964.
426. M.-C. Heydemann and D. Sotteau. About some cyclic properties in digraphs. J. Combin. Theory Ser. B, 38(3):261–278, 1985.
427. M.-C. Heydemann, D. Sotteau, and C. Thomassen. Orientations of Hamiltonian cycles in digraphs. Ars Combin., 14:3–8, 1982.
428. M.C. Heydemann. On cycles and paths in digraphs. Discrete Math., 31:217– 219, 1980.
429. A.J.W. Hilton. Alternating Hamiltonian circuits in edge-coloured bipartite graphs. Discrete Applied Math., 35:271–273, 1992.
430. C.T. Hoang and B. Reed. A note on short cycles in digraphs. Discrete Math., 66(1-2):103–107, 1987.
431. A.J. Hoﬀman. Some recent applications of the theory of linear inequalities to extremal combinatorial analysis. In Combinatorial Analysis, edited by R. Bellman and M. Hall, pages 113–128. American Mathematical Society, Providence, RI, 1960.
432. J.E. Hopcroft and R.E. Tarjan. Eﬃcient planarity testing. Journal of the Association for Computing Machinery, 21:549–568, 1974.
433. J. Hromkoviˇc, R. Klasing, B. Monien, and R. Peine. Dissemination of information in interconnection networks (broadcasting & gossiping). In Combinatorial network theory, pages 125–212. Kluwer Acad. Publ., Dordrecht, 1996.
434. H.T. Hsu. An algorithm for ﬁnding a minimal equivalent graph of a digraph. J. Assoc. Comput. Mach., 22:11–16, 1975.

702 References
435. J. Huang. Tournament-like oriented graphs . PhD thesis, School of Computing Science, Simon Fraser University, Burnaby B.C. Canada, 1992.
436. J. Huang. On the structure of local tournaments. J. Combin. Theory Ser. B, 63(2):200–221, 1995.
437. J. Huang. A note on spanning local tournaments in locally semicomplete digraphs. Discrete Applied Math., 89:277–279, 1998.
438. J. Huang. Which digraphs are round? Australasian J. Combinatorics, 19:203– 208, 1999.
439. F.K. Hwang. The Hamiltonian property of linear functions. Oper. Res. Letters, 6:125–127, 1987.
440. T. Ibaraki and S. Poljak. Weak three-linking in Eulerian digraphs. SIAM J. Discrete Math., 4(1):84–98, 1991.
441. M. Imase and M. Itoh. Design to monimize a diameter on Building block networks. IEEE Trans. on Computers, C-30:439–443, 1981.
442. M. Imase and M. Itoh. Design for directed graphs with minimum diameter. IEEE Trans. on Computers, C-32:782–784, 1983.
443. M. Imase, I. Soneoka, and K. Okada. Connectivity of regular directed graphs with small diameter. IEEE Trans. on Computers, C-34:267–273, 1985.
444. M. Imase, I. Soneoka, and K. Okada. A fault tolerant processor interconnection network. Systems and Computers in Japan, 17:21–30, 1986.
445. M. Imori, M. Matsumoto, and H. Yamada. The line digraph of a regular and pancircular digraph is also regular and pan circular. Graphs and Combinatorics, 4:235–239, 1988.
446. G. Isaak. Tournaments as feedback arc sets. Electronic J. Combinatorics, 2:19pp, 1995.
447. S. Iwata, L. Fleischer, and S. Fujishige. A strongly polynomial time algorithm for minimizing submodular functions. manuscript 1999.
448. Carlier J. and P. Villon. A new heuristic for the travelling salesman problem. RAIRO, Recherche Operationelle, 24:245–253, 1990.
449. B. Jackson. Long paths and cycles in oriented graphs. J. Graph Theory, 5(2):145–157, 1981.
450. B. Jackson. A Chva´tal-Erdo˝s condition for Hamilton cycles in digraphs. J. Combin. Theory Ser. B, 43(3):245–252, 1987.
451. B. Jackson. Some remarks on arc-connectivity, vertex splitting, and orientation in graphs and digraphs. J. Graph Theory, 12(3):429–436, 1988.
452. B. Jackson and O. Ordaz. A Chva´tal- Erd˝os condition for (1, 1)-factors in digraphs. Discrete Math., 57(1-2):199–201, 1985.
453. B. Jackson and O. Ordaz. Chva´tal-Erdo˝s conditions for paths and cycles in graphs and digraphs. A survey. Discrete Math., 84(3):241–254, 1990.
454. H. Jacob and H. Meyniel. About quasi-kernels in a digraph. Discrete Math., 154(1-3):279–280, 1996.
455. F. Jaeger. On nowhere-zero ﬂows in multigraphs. Congressus Numerantium, 15:373–378, 1976.
456. F. Jaeger. On ﬁve-edge-colorings of cubic graphs and nowhere-zero ﬂow problems. Ars Combin., 20(B):229–244, 1985.
457. F. Jaeger. Nowhere-zero ﬂow problems. In Selected topics in graph theory, 3, pages 71–95. Academic Press, San Diego, CA, 1988.
458. J. Janssen. The Dinitz problem solved for rectangles. Bull. Amer. Math. Soc., 29:243–249, 1993.
459. T.R. Jensen and B. Toft. Graph coloring problems. John Wiley & Sons, Inc., New York, 1995. A Wiley-Interscience Publication.
460. W.S. Jewell. Optimal ﬂow through networks. Technical Report 8, OR center, MIT, Cambridge, Mass., 1958.

References 703
461. J. Jir´asek. On a certain class of multidigraphs, for which reversal of no arc decreases the number of their cycles. Comment. Math. Univ. Carolinae, 28:185– 189, 1987.
462. J. Jir´asek. Some remarks on A´ da´m’s conjecture for simple directed graphs. Discrete Math., 108:327–332, 1992.
463. D.B. Johnson. Eﬃcient algorithms for shortest paths in sparse networks. Journal of the Association for Computing Machinery, 24:1–13, 1977.
464. D.S. Johnson, C.R. Aragon, L. McGeoch, and C. Schevon. Optimization by simulated annealing: an experimental evaluation; part 1, Graph partitioning. Operations Research, 37:865–892, 1989.
465. D.S. Johnson, C.R. Aragon, L. McGeoch, and C. Schevon. Optimization by simulated annealing: an experimental evaluation; part 2, Graph coloring and number partitioning. Operations Research, 39:378–406, 1991.
466. D.S. Johnson and L.A. McGeoch. The traveling salesman problem: A case study in local optimization. In E.H.L. Aarts and J.K. Lenstra, editors, Local Search in Combinatorial Optimization, pages 215–310. John Wiley &Sons, New York, 1997.
467. T. Jord´an. Increasing the vertex-connectivity in directed graphs. In Algorithms—ESA ’93 (Bad Honnef, 1993), volume 726 of Lecture Notes in Comput. Sci., pages 236–247. Springer, Berlin, 1993.
468. T. Jord´an. Connectivity augmentation problems in Graphs. PhD thesis, Department of Computer Science, E¨otvo¨s University, Budapest, 1994.
469. T. Jord´an. On the optimal vertex-connectivity augmentation. J. Combin. Theory Ser. B, 63:8–20, 1995.
470. H.A. Jung. Eine Verallgemeinerung des n-fachen zusammenhangs fu¨r Graphen. Math. Ann., 187:95–103, 1970.
471. M. Kano. Ranking the vertices of an r-partite paired comparison digraph. Discrete Appl. Math., 17(3):245–253, 1987.
472. M. Kano and A. Sakamoto. Ranking the vertices of a weighted digraph using the length of forward arcs. Networks, 13(1):143–151, 1983.
473. M. Kano and A. Sakamoto. Ranking the vertices of a paired comparison digraph. SIAM J. Algebraic Discrete Methods, 6(1):79–92, 1985.
474. R.M. Karp. Reducibility among combinatorial problems. In Complexity of computer computations (Proc. Sympos., IBM Thomas J. Watson Res. Center, Yorktown Heights, N.Y., 1972), pages 85–103. Plenum, New York, 1972.
475. A.V. Karzanov. The problem of ﬁnding the maximal ﬂow in a network by the method of preﬂows. Dokl. Akad. Nauk SSSR, 215:49–52, 1974.
476. J.G. Kemeny and J.L. Snell. Finite Markov Chains. Springer-Verlag, New York, 1976.
477. A. Kemnitz and B. Greger. A forbidden subdigraph condition implying an oriented graph to be Hamiltonian. Congr. Numer., 130:127–131, 1998.
478. S. Khuller, B. Raghavachari, and N. Young. Approximating the minimum equivalent digraph. SIAM J. Computing, 24(4):859–872, 1995.
479. S. Khuller, B. Raghavachari, and N. Young. On strongly connected digraphs with bounded cycle length. Discrete Appl. Math., 69(3):281–289, 1996.
480. M. Klein. A primal method for minimum cost ﬂows with applications to the assignment and transportation problems. Management Science, 14:205–220, 1967.
481. D.E. Knuth. The art of computer programming. Vol. 1: Fundamental algorithms. Addison-Wesley Publishing Co., Reading, Mass.-London-Don Mills, Ont, 1968. Second printing.
482. W. Kocay and D. Stone. An algorithm for balanced ﬂows. J. Combin. Math. Combin. Comput., 19:3–31, 1995.

704 References
483. K.-M. Koh. Even circuits in directed graphs and Lovasz’s conjecture. Bull. Malaysian Math. Soc., 7(3):47–52, 1976.
484. K.M. Koh and B.P. Tan. The diameters of a graph and its orientations. Technical report, Department of Mathematics, National University of Singapore, 1992.
485. K.M. Koh and B.P. Tan. Kings in multipartite tournaments. Discrete Math., 147:171–183, 1995.
486. K.M. Koh and B.P. Tan. Number of 4-kings in bipartite tournaments with no 3-kings. Discrete Math., 154(1-3):281–287, 1996.
487. K.M. Koh and B.P. Tan. The diameter of an orientation of a complete multipartite graph. Discrete Math., 149(1-3):131–139, 1996.
488. K.M. Koh and B.P. Tan. The minimum diameter of orientations of complete multipartite graphs. Graphs Combin., 12(4):333–339, 1996.
489. K.M. Koh and B.P. Tan. The number of kings in a multipartite tournament. Discrete Math., 167/168:411–418, 1997.
490. K.M. Koh and E.G. Tay. On optimal orientations of Cartesian products of even cycles and paths. Networks, 30(1):1–7, 1997.
491. K.M. Koh and E.G. Tay. Optimal orientations of products of paths and cycles. Discrete Appl. Math., 78(1-3):163–174, 1997.
492. K.M. Koh and E.G. Tay. On optimal orientations of Cartesian products of graphs (I). Discrete Math., 190:115–136, 1998.
493. K.M. Koh and E.G. Tay. On optimal orientations of Cartesian products of trees. Graphs and Combinatorics, to appear, 1999.
494. K.M. Koh and E.G. Tay. On optimal orientations of Cartesian products with a bipartite graph. Discrete Applied Math., 98:103–120, 1999.
495. K.M. Koh and E.G. Tay. On optimal orientations of Cartesian products of graphs (II): complete graphs and even cycles. Discrete Math., 211:75–102, 2000.
496. K.M. Koh and E.G. Tay. On optimal orientations of G vertex-multiplications. Discrete Math., 219:153–171, 2000.
497. D. K¨onig. U¨ ber Graphen und ihre Anwendung auf Determinantentheorie und Mengenlehre. Math. Ann., 77:454–465, 1916.
498. D. K¨onig. Graphs and matrices (in Hungarian). Mat. Fiz. Lapok, 38:116–119, 1931.
499. D. K¨onig. Theorie der endlichen und unendlichen Graphen. Akademische Verlagsgesellschaft, 1936.
500. J-C. K¨onig, D.W. Krumme, and E. Lazard. Diameter preserving orientation of the torus. Networks, 32:1–11, 1998.
501. A. Kotzig. On the theory of ﬁnite graphs with a linear factor II. Math. Fyz. C˘azopis, 9:73–91, 1959.
502. A. Kotzig. Moves without forbidden transitions in a graph. Math. Fyz. C˘azopis, 18:76–80, 1968.
503. A. Kotzig. The decomposition of a directed graph into quadratic factors consisting of cycles. Acta Fac. Rerum Natur. Univ. Comenian. Math. Publ., 22:27–29, 1969.
504. D.W. Krumme, G. Cybenko, and K.N. Venkataraman. Gossiping in minimal time. SIAM J. Computing, 21(1):111–139, 1992.
505. H.W. Kuhn. The Hungarian method for the assignment problem. Naval Research Logistics Quarterly, 2:83–97, 1955.
506. A. Kunzmann and Wunderlich H.J. An analytical approach to the partial scan problem. J. Electronic Testing: Theory and Applications, 1:163–174, 1990.
507. C. Kuratowski. Sur le probl´eme des courbes gauches en topologie. Fund. Math., 15:271–283, 1930.

References 705
508. H.G. Landau. On dominance relations and the structure of animal societies III. The condition for a score structure. Bull. Math. Biophys., 15:143–148, 1953.
509. E.L. Lawler. Combinatorial Optimization: Networks and Mathroids. Holt, Rinehart and Winston, New York, 1976.
510. E.L. Lawler. Sequencing jobs to minimize total weighted completion time subject to precedence constraints. Ann. Discrete Math., 2:75–90, 1978. Algorithmic aspects of combinatorics (Conf., Vancouver Island, B.C., 1976).
511. E.L. Lawler, J.K. Lenstra, A.H.G. Rinooykan, and D.B. Shmoys, editors. Travelling Salesman Problem: A Guided Tour of Combinatorial Optimization. John Wiley & Sons, New York, 1985.
512. C.E. Leiserson and J.B Saxe. Retiming synchronous circuitry. Algoritmica, 6:5–35, 1991.
513. L.A. Levin. Universal sorting problems. Problems of Information Transmission, 9:265–266, 1973.
514. M. Lewin. On maximal circuits in directed graphs. J. Combin. Theory, Ser. B, 18:175–179, 1975.
515. N. Linial, L. Lova´sz, and A. Wigderson. Rubber bands, convex embeddings and graph connectivity. Combinatorica, 8(1):91–102, 1988.
516. C. Little, K. Teo, and H. Wang. On a conjecture on directed cycles in a directed bipartite graph. Graphs Combin., 13(3):267–273, 1997.
517. J. Liu and H.S. Zhou. Graphs and digraphs with given girth and connectivity. Discrete Math., 132(1-3):387–390, 1994.
518. X. Liu and D.B. West. Line digraphs and coreﬂexive vertex sets. Discrete Math., 188(1-3):269–277, 1998.
519. L. Lova´sz. Connectivity in digraphs. J. Combin. Theory Ser. B, 15:174–177, 1973.
520. L. Lova´sz. Coverings and coloring of hypergraphs. volume 8, pages 3–12, Winnipeg, Man., 1973. Utilitas Math.
521. L. Lova´sz. On two min–max theorems in graph theory. J. Combin. Theory Ser. B, 21:26–30, 1976.
522. L. Lova´sz. Combinatorial problems and exercises. North-Holland Publishing Co., Amsterdam, 1979.
523. L. Lova´sz. Connectivity algorithms using rubber bands. In Foundations of software technology and theoretical computer science (New Delhi, 1986), pages 394–411. Springer, Berlin, 1986.
524. L. Lova´sz. Combinatorial problems and exercises. North-Holland Publishing Co., Amsterdam, second edition, 1993.
525. L. Lova´sz and M.D. Plummer. Matching theory. North-Holland Publishing Co., Amsterdam, 1986. Annals of Discrete Mathematics, 29.
526. C.L. Lucchesi. A minimax equality for directed graphs. PhD thesis, University of Waterloo, Ontario, Canada, 1976.
527. C.L. Lucchesi and M.C.M.T. Giglio. On the connection between the undirected and the acyclic directed two disjoint paths problem. Ars Combin., 47:191–200, 1997.
528. C.L. Lucchesi and D.H. Younger. A minimax theorem for directed graphs. J. London Math. Soc. (2), 17(3):369–374, 1978.
529. J.F. Lynch. The equivalence of theorem proving and the interconnection problem. (ACM) SIGDA Newsletter, 5(3):31–36, 1975.
530. G. MacGillivray. The complexity of generalized colouring. PhD thesis, Simon Fraser University, Burnaby, B.C. Canada, 1990.
531. G. MacGillivray. On the complexity of colouring by vertex-transitive and arc-transitive digraphs. SIAM J. Discrete Math., 4(3):397–408, 1991.

706 References
532. W. Mader. Minimale n-fach kantenzusammenha¨ngende Graphen. Math. Ann., 191:21–28, 1971.
533. W. Mader. Ecken vom Grad n in minimalen n-fach zusammenh¨angenden Graphen. Arch. Math. (Basel), 23:219–224, 1972.
534. W. Mader. 1-factoren von Graphen. Math. Ann., 201:269–282, 1973. 535. W. Mader. Ecken vom Innen- und Aussengrad n in minimal n-fach kanten-
zusammenha¨ngenden Digraphen. Arch. Math. (Basel), 25:107–112, 1974. 536. W. Mader. A reduction method for edge-connectivity in graphs. Ann. Discrete
Math., 3:145–164, 1978. Advances in graph theory (Cambridge Combinatorial Conf., Trinity College, Cambridge, 1977). 537. W. Mader. Konstruktion aller n-fach kantenzusammenha¨ngenden Digraphen. European J. Combin., 3(1):63–67, 1982. 538. W. Mader. Minimal n-fach zusammenh¨angende Digraphen. J. Combin. Theory Ser. B, 38(2):102–117, 1985. 539. W. Mader. Ecken von kleinem Grad in kritisch n-fach zusammenh¨angenden Digraphen. J. Combin. Theory Ser. B, 53(2):260–272, 1991. 540. W. Mader. On vertices of degree n in minimally n-connected graphs and digraphs. In Combinatorics, Paul Erdo˝s is eighty, Vol. 2 (Keszthely, 1993), pages 423–449. J´anos Bolyai Math. Soc., Budapest, 1996. 541. W. Mader. On vertices of out-degree n in minimally n-connected digraphs. manuscript 1999. 542. H. Maehara. A digraph represented by a family of boxes or spheres. J. Graph Theory, 8(3):431–439, 1984. 543. F. Maﬀray. Kernels in perfect line graphs. Journal of Combin. Theory. Series B, 55:1–8, 1992. 544. V.M. Malhotra, M.P. Kumar, and S.N. Maheshwari. An O(n3) algorithm for ﬁnding maximum ﬂows in networks. Information Processing Letters, 7:277– 278, 1978. 545. Y. Manoussakis. k-linked and k-cyclic digraphs. J. Combin. Theory Ser. B, 48(2):216–226, 1990. 546. Y. Manoussakis. A linear-time algorithm for ﬁnding Hamiltonian cycles in tournaments. Discrete Appl. Math., 36(2):199–201, 1992. 547. Y. Manoussakis. Directed Hamiltonian graphs. J. Graph Theory, 16(1):51–59, 1992. 548. Y. Manoussakis. Alternating paths in edge-coloured complete graphs. Discrete Applied Math., 56:297–309, 1995. 549. Y. Manoussakis, M. Spyratos, Zs. Tuza, and M. Voigt. Minimal colorings for properly colored subgraphs. Graphs and Combinatorics, 12:345–360, 1996. 550. D.A. Marcus. Spanning subgraphs of k-connected digraphs. J. Combin. Theory Ser. B, 30(1):21–31, 1981. 551. D.A. Marcus. Directed cycles with chords. J. Graph Theory, 31(1):17–28, 1999. 552. S. Marshall. On the existence of k-tournaments with given automorphism group. Discrete Math., 152(1-3):259–268, 1996. 553. S. Marshall. Representing posets with k-tournaments. Order, 13(2):147–158, 1996. 554. S. Martello and P. Toth. Finding a minimum equivalent graph of a digraph. Networks, 12:89–100, 1982. 555. T. Masuzawa, K. Hagihara, and N. Tokura. An optimal time algorithm for the k-vertex-connectivity unweighted augmentation problem for rooted directed trees. Discrete Appl. Math., 17(1-2):67–105, 1987. 556. H.A. Maurer, J.H. Sudborough, and E. Welzl. On the complexity of the general coloring problem. Inform. and Control, 51(2):128–145, 1981.

References 707
557. D. May. The next generation transputers and beyond. In Distributed Memory Computing, volume 487 of Lecture Notes in Comput. Sci., pages 7–22. Springer Verlag, Berlin, 1991.
558. J.E. McCanna. Orientations of the n-cube with minimum diameter. Discrete Math., 68(2-3):309–310, 1988.
559. W. McCuaig. Intercyclic digraphs. In Graph structure theory (Seattle, WA, 1991), volume 147 of Contemp. Math., pages 203–245. Amer. Math. Soc., Providence, RI, 1993.
560. C. McDiarmid. Probability. In Graph connections. Relationships between graph theory and other areas of mathematics (eds: Beineke, L.W. et al.), pages 194–207. Oxford University Press, Oxford, UK, 1997.
561. K. Mehlhorn. Data Structures and Algorithms 2: Graph Algorithms and NPcompleteness. Springer-Verlag, Berlin, 1984.
562. K. Menger. Zur allgemeinen Kurventheorie. Fund. Math., 10:96–115, 1927. 563. A. Metzlar. Disjoint paths in acyclic digraphs. J. Combin. Theory Ser. B,
57(2):228–238, 1993. 564. H. Meyniel. Une condition suﬃsante d’existence d’un circuit hamiltonien dans
un graphe orient´e. J. Combin. Theory Ser. B, 14:137–147, 1973. 565. M. Miller. Digraph covering and its application to two optimizatio problems
for digraphs. Australas. J. Combinatorics, 3:151–164, 1991. 566. M. Miller and I. Fris. Maximum order digraphs for diameter 2 or degree 2.
In Pullman Volume of Graphs and Matrices, volume 139 of Lecture Notes in Pure and Applied Math., pages 269–278. Pullman, New York, 1992. 567. G.J. Minty. A theorem on n-colouring the points of a linear graph. American Mathematical Monthly, 69:623–624, 1962. 568. C.L. Monma and J.B. Sidney. A general algorithm for optimal job sequencing with series-parallel constraints. Math. of Operations Research, 4:215–224, 1977. 569. J.W. Moon. Solution to problem 463. Math. Mag., 35:189, 1962. 570. J.W. Moon. On subtournaments of a tournament. Canad. Math. Bull., 9:297– 301, 1966. 571. J.W. Moon. Topics on tournaments. Holt, Rinehart and Winston, New York, 1968. 572. E.F. Moore. The shortest path through a maze. In Proc. of the Int. Symp. on the Theory of Switching, pages 285–292. Harward University Press, 1959. 573. A.O. Morris. Linear Algebra: an Introduction. Van Nostrand Reinhold, Workingham, England, second edition edition, 1982. 574. M. Morvan and L. Viennot. Parallel comparability graph recognition and modular decomposition. In STACS 96 (Grenoble, 1996), pages 169–180. Springer, Berlin, 1996. 575. H.M. Mulder. Julius Petersen’s theory of regular graphs. Discrete Math., 100:157–175, 1992. 576. H. Mu¨ller. Recognizing interval digraphs and interval bigraphs in polynomial time. Discrete Appl. Math., 78:189–205, 1997. 577. J.H. Muller and J. Spinrad. Incremental modular decomposition. J. Assoc. Comput. Mach., 36(1):1–19, 1989. 578. K.G. Murty. Network programming. Prentice Hall Inc., Englewood Cliﬀs, NJ, 1992. 579. H. Nagamochi and T. Ibaraki. A linear-time algorithm for ﬁnding a sparse k-connected spanning subgraph of a k-connected graph. Algorithmica, 7(56):583–596, 1992. 580. H. Nagamochi and T. Ibaraki. Computing edge-connectivity in multigraphs and capacitated graphs. SIAM J. Discrete Math., 5(1):54–66, 1992.

708 References
581. H. Nagamochi and T. Ibaraki. Deterministic O(nm) time edge-splitting in undirected graphs. J. Comb. Optim., 1(1):5–46, 1997.
582. H. Nagamochi and T. Ibaraki. A note on minimizing submodular functions. Inform. Process. Lett., 67(5):239–244, 1998.
583. C.St.J.A. Nash-Williams. On orientations, connectivity and odd-vertexpairings in ﬁnite graphs. Canad. J. Math., 12:555–567, 1960.
584. C.St.J.A. Nash-Williams. Edge-disjoint spanning trees of ﬁnite graphs. J. London Math. Soc., 36:445–450, 1961.
585. C.St.J.A. Nash-Williams. Decomposition of ﬁnite graphs into forests. J. London Math. Soc., 39:12, 1964.
586. C.St.J.A. Nash-Williams. Problem 47. In Proceedings of Colloq. Tihany 1966, page 366. Academic Press, 1968.
587. C.St.J.A. Nash-Williams. Hamilton circuits in graphs and digraphs. In The many facets of graph theory, Springer Verlag Lecture Notes 110, pages 237–243. Springer Verlag, 1969.
588. C.St.J.A. Nash-Williams. Hamilton circuits. In Studies in Graph Theory Part II, Studies in Mathematics 12, pages 301–360. M.A.A., Washington, 1975.
589. M. Natu and S.-C. Fang. The point-to-point connection problem–analysis and algorithms. Discrete Applied Math., 78:207–226, 1997.
590. J. Neˇsetˇril and X.D. Zhu. Path homomorphisms. Math. Proc. Cambridge Philos. Soc., 120(2):207–220, 1996.
591. L.L. Ng. Hamiltonian decomposition of complete regular multipartite digraphs. Discrete Math., 177(1-3):279–285, 1997.
592. L.L. Ng. Hamiltonian decomposition of lexicographic products of digraphs. J. Combin. Theory Ser. B, 73(2):119–129, 1998.
593. T. Nishimura. Short cycles in digraphs. Discrete Math., 72(1-3):295–298, 1988. 594. C. Olsen. Heuristics for combinatorial optimization problems (course project
in Danish University of Southern Denmark, Odense), 1998. 595. O. Ore. Theory of graphs. American Mathematical Society, Providence,
R.I., 1962. American Mathematical Society Colloquium Publications, Vol. XXXVIII. 596. Erdo˝s P. and G. Szekeres. A combinatorial problem in geometry. Compositio Math., 2:463–470, 1935. 597. M. Overbeck-Larisch. Hamiltonian paths in oriented graphs. J. Combin. Theory Ser. B, 21(1):76–80, 1976. 598. M. Overbeck-Larisch. A theorem on pancyclic-oriented graphs. J. Combin. Theory Ser. B, 23(2-3):168–173, 1977. 599. L. Pan, G. Zhou, and K.-M. Zhang. A note on hypertournaments. Chinese Science Bull., 44:1460–1463, 1999. 600. C.H. Papadimitriou and K. Steiglitz. Combinatorial optimization: algorithms and complexity. Prentice-Hall Inc., Englewood Cliﬀs, N.J., 1982. 601. L.E. Penn and D. Witte. When the Cartesian product of two directed cycles is hypohamiltonian. J. Graph Theory, 7:441–443, 1983. 602. Y. Perl and Y. Shiloach. Finding two disjoint paths between two pairs of vertices in a graph. J. Assoc. Comput. Machin., 25:1–9, 1978. 603. J. Petersen. Die Theorie der regul¨aren graphs. Acta Math., 15:193–220, 1891. 604. V. Petrovi´c. Kings in bipartite tournaments. Discrete Math., 173(1-3):187– 196, 1997. 605. V. Petrovi´c and C. Thomassen. Kings in k-partite tournaments. Discrete Math., 98(3):237–238, 1991. 606. P.A. Pevzner. DNA physical mapping and alternating eulerian cycles in colored graphs. Algorithmica, 13, 1995.

References 709
607. J. Plesn´ık. Remarks on diameters of orientations of graphs. Acta Math. Univ. Comenian., 46/47:225–236 (1986), 1985.
608. J. Plesn´ık. Remarks on diameters of orientations of graphs. Acta Math. Univ. Comenian., 46/47:225–236 (1986), 1985.
609. J. Plesn´ık and S. Zn´am. Strongly geodetic directed graphs. Acta F. R. N. Univ. Comen.-Mathe., 29:29–34, 1975.
610. L. P´osa. A theorem concerning Hamiltonian lines. Publ. Math. Inst. Hungar. Acad. Sci., 7:225–226, 1962.
611. C.N. Potts and S.L. van de Velde. Dynasearch – iterative local improvement by dynamic programming: Part I, the traveling salesman problem. Univ. Southampton, UK, November 1995.
612. E. Prisner. Familien zusammenh¨angender Teilgraphen eines Graphen und ihre Durchschnittsgraphen. PhD thesis, University of Hamburg, 1988.
613. E. Prisner. Graph dynamics. Longman, Harlow, 1995. 614. E. Prisner. Line graphs and generalizations—a survey. Congressus Numeran-
tium, 116:193–229, 1996. Surveys in graph theory (San Francisco, CA, 1995). 615. A. Punnen and S. Kabadi. Domination analysis of some heuristics for the
asymmetric traveling salesman problem. April 1999. 616. A.P. Punnen. The traveling salesman problem: new polynomial approximation
algorithms and domination analysis. University of New Brunswick-St. John, December 1996. 617. M. Queyranne. Minimizing symmetric submodular functions. Math. Programming, 82(1-2, Ser. B):3–12, 1998. Networks and matroids; Sequencing and scheduling. 618. J. Radhakrishnan and A. Srinivasan. Improved bounds and algorithms for hypergraph 2-colouring. Random Structures and Algorithms, 16:4–32, 2000. 619. R. Rado. Note on independence functions. Proc. London Math. Soc., 7:300– 320, 1957. 620. V. Ramachandran. A minimax arc theorem for reducible ﬂow graphs. SIAM J. Discrete Math., 3:554–560, 1990. 621. F.P. Ramsey. On a problem of formal logic. Proc. London Math. Soc., 30:264– 286, 1930. 622. J. Rattner. The new age of supercomputing. In Distributed Memory Computing, volume 487 of Lecture Notes in Comput. Sci., pages 1–6. Springer Verlag, Berlin, 1991. 623. A. Recski. Matroid theory and its applications in electric network theory and in statics. Springer-Verlag, Berlin, 1989. 624. S. M. Reddy, D.K. Pradhan, and J. G. Kuhl. Directed graphs with minimal diameter and maximal connectivity. Tech. rep., School of Engineering Oakland Univ., 1980. 625. L. R´edei. Ein kombinatorischer Satz. Acta Litt. Szeged, 7:39–43, 1934. 626. B. Reed, N. Robertson, P.D. Seymour, and R. Thomas. Packing directed circuits. Combinatorica, 16(4):535–554, 1996. 627. B.A. Reed and F.B. Shepherd. The Gallai-Younger conjecture for planar graphs. Combinatorica, 16(4):555–566, 1996. 628. C.R. Reeves (editor). Modern heuristic techniques for combinatorial problems. McGraw-Hill Book Company, 1995. 629. K.B. Reid. Two complementary circuits in two-connected tournaments. In Cycles in graphs (Burnaby, B.C., 1982), volume 115 of North-Holland Math. Stud., pages 321–334. North-Holland, Amsterdam, 1985. 630. K.B. Reid. Tournaments: scores, kings, generalizations and special topics. Congressus Numerantium, 115:171–211, 1996. Surveys in graph theory (San Francisco, CA, 1995).

710 References
631. G. Reinelt. The linear ordering problem: algorithms and applications. Heldermann Verlag, Berlin, 1985.
632. G. Reinelt. The Travelling Salesman: Computational Solutions for TSP Applications. Springer-Verlag, Berlin, 1994.
633. F. Rendl. Quadratic assignment problems on series-parallel digraphs. Z. Oper. Res. Ser. A-B, 30(3):A161–A173, 1986.
634. P.I. Richards. Precedence constraints and arrow diagrams. SIAM Rev., 9:548– 553, 1967.
635. M. Richardson. Solution of irreﬂective relations. Ann. Math., 58:573–580, 1953.
636. M.B. Richey, R.G. Parker, and R.L. Rardin. An eﬃciently solvable case of the minimum weight equivalent subgraph problem. Networks, 15(2):217–228, 1985.
637. H.E. Robbins. A theorem on graphs with an application to a problem on traﬃc control. American Mathematical Monthly, 46:281–283, 1939.
638. F.S. Roberts and Y. Xu. On the optimal strongly connected orientations of city street graphs I: Large grids. SIAM J. Discrete Math., 1:199–222, 1988.
639. F.S. Roberts and Y. Xu. On the optimal strongly connected orientations of city street graphs II: Two east-west avenues or north-south streets. Networks, 19:221–233, 1989.
640. F.S. Roberts and Y. Xu. On the optimal strongly connected orientations of city street graphs III: Three east-west avenues or north-south streets. Networks, 22:109–143, 1992.
641. F.S. Roberts and Y. Xu. On the optimal strongly connected orientations of city street graphs IV: Four east-west avenues or north-south streets. Discrete Applied Math., 49:331–356, 1994.
642. N. Robertson and P.D. Seymour. Graph minors. XIII: The disjoint paths problem. J. Comb. Theory, Ser. B, 63:65–110, 1995.
643. N. Robertson, P.D. Seymour, and R. Thomas. Permanents, Pfaﬃan orientations, and even directed circuits. Ann. Math., 150:929–975, 1999.
644. M. Rosenfeld. Antidirected Hamiltonian paths in tournaments. J. Comb. Theory, Ser. B, 12:93–99, 1971.
645. M. Rosenfeld. Antidirected Hamiltonian cycles in tournaments. J. Comb. Theory, Ser. B, 16:234–242, 1974.
646. B. Roy. Nombre chromatique et plus longs chemins d’un graphe. Rev. Fran¸caise Informat. Recherche Op´erationnelle, 1(5):129–132, 1967.
647. A. Rubinstein. Ranking the participants in tournaments. SIAM J. Applied Math., 38:108–111, 1980.
648. R. Saad. Finding a longest alternating cycle in a 2-edge-coloured complete graph is in RP. Combinatorics, Probability and Computing, 5:297–306, 1996.
649. M.R. Samathan and D.K. Pradhan. The de Bruijn multiprocessor network: a versatile parallel processing and sorting network for VLSI. IEEE Trans. on Computers, C-38:567–581, 1989.
650. B.K. Sanyal and M.K. Sen. New characterization of digraphs represented by intervals. J. Graph Theory, 22:297–303, 1996.
651. V.I. Sarvanov and N.N. Doroshko. The approximate solution of the traveling salesman problem by a local algorithm that searches neighborhoods of exponential cardinality in quadratic time. In Software: Algorithms and Programs, volume 31, pages 8–11. Math. Institute of the Belorussian Acad. Sci., Minsk, 1981. (in Russian).
652. V.I. Sarvanov and N.N. Doroshko. The approximate solution of the traveling salesman problem by a local algorithm with scanning neighborhoods of factorial cardinality in cubic time. In Software: Algorithms and Programs, volume 31,

References 711
pages 11–13. Math. Institute of the Belorussian Acad. Sci., Minsk, 1981. (in Russian).
653. J.P. Schmidt and A. Siegel. The spatial complexity of oblivious k-probe hash functions. SIAM J. Computing, 19(5):775–786, 1990.
654. C.-P. Schnorr. Bottlenecks and edge connectivity in unsymmetrical networks. SIAM J. Computing, 8(2):265–274, 1979.
655. A. Schrijver. Total dual integrality from directed graphs, crossing families, and sub- and supermodular functions. In Progress in combinatorial optimization (Waterloo, Ont., 1982), pages 315–361. Academic Press, Toronto, Ont., 1984.
656. A. Schrijver. A group-theoretical approach to disjoint paths in directed graphs. CWI Quarterly, 6(3):257–266, 1993.
657. A. Schrijver. Finding k disjoint paths in a directed planar graph. SIAM J. Computing, 23(4):780–788, 1994.
658. A. Schrijver. Paths in graphs and curves on surfaces. In Joseph, A. (ed.) et al., First European congress of mathematics (ECM), Paris, France, July 6-10, 1992. Volume II: Invited lectures (Part 2). Basel: Birkhaeuser.[ISBN 3-76432799-5/hbk], pages 381–406, 1994.
659. A. Schrijver. Polyhedral combinatorics. In Handbook of combinatorics, Vol. 1, 2, pages 1649–1704. Elsevier, Amsterdam, 1995.
660. A. Schrijver. A combinatorial algorithm minimizing submodular functions in strongly polynomial time. manuscript 1999.
661. M. Sen, S. Das, A.B. Roy, and D.B. West. Interval digraphs: an analogue of interval graphs. J. Graph Theory, 13(2):189–202, 1989.
662. P.D. Seymour. Disjoint paths in graphs. Discrete Math., 29:293–309, 1980.
663. P.D. Seymour. Nowhere-zero 6-ﬂows. J. Combin. Theory Ser. B, 30(2):130– 135, 1981.
664. P.D. Seymour. Nowhere-zero ﬂows. In Handbook of combinatorics, Vol. 1, 2, pages 289–299. Elsevier, Amsterdam, 1995. Appendix: Colouring, stable sets and perfect graphs.
665. P.D. Seymour. Packing directed circuits fractionally. Combinatorica, 15(2):281–288, 1995.
666. P.D. Seymour. Packing circuits in Eulerian digraphs. Combinatorica, 16(2):223–231, 1996.
667. P.D. Seymour and C. Thomassen. Characterization of even directed graphs. J. Combin. Theory Ser. B, 42(1):36–45, 1987.
668. J. Shearer. A property of the colored complete graph. Discrete Math., 25:175– 178, 1979.
669. Y. Shiloach. Edge-disjoint branching in directed multigraphs. Inform. Process. Lett., 8(1):24–27, 1979.
670. Y. Shiloach. A polynomial solution to the undirected two paths problem. J. Assoc. Comput. Mach., 27:445–456, 1980.
671. D. Shmoys. Cut problems and their application to divide and conquer. In Approximation algorithms for NP-hard problems, D. Hochbaum ed., pages 192– 235. PWS publishing company, Boston, 1997.
672. K. Simon. An improved algorithm for transitive closure on acyclic digraphs. Theoret. Comput. Sci., 58:325–346, 1988.
673. K. Simon. Finding a minimal transitive reduction in a strongly connected digraph within linear time. In Graph-theoretic concepts in Computer Science (Kerkrade, 1989), Lecture Notes in Computer Science, pages 245–259. Springer-Verlag, Berlin, 1990.
674. S.S. Skiena. The Algorithm Design Manual. Springer-Verlag, New York, 1997.

712 References
675. D.J. Skrien. A relationship between triangulated graphs, comparability graphs, proper interval graphs, proper circular-arc graphs, and nested interval graphs. J. Graph Theory, 6(3):309–316, 1982.
676. L. Sˇolt´es. Orientations of graphs minimizing the radius or the diameter. Math. Slovaca, 36(3):289–296, 1986.
677. Z.M. Song. Complementary cycles in bipartite tournaments. J. Nanjing Inst. Tech., 18:32–38, 1988.
678. Z.M. Song. Complementary cycles of all lengths in tournaments. J. Combin. Theory Ser. B, 57(1):18–25, 1993.
679. Z.M. Song. Pancyclic oriented graphs. J. Graph Theory, 18(5):461–468, 1994. 680. E. Sopena. The chromatic number of oriented graphs. J. Graph Theory,
25(3):191–205, 1997. 681. E. Speckenmeyer. On feedback problems in digraphs. In Proceedings of the
15th WG , volume 411 of Lecture Notes in Comput. Sci., pages 218–231. Springer, Berlin, 1989. 682. G. Steiner. A compact labeling scheme for series-parallel graphs. Discrete Appl. Math., 11(3):281–297, 1985. 683. H.J. Straight. The existence of certain type of semi-walks in tournaments. Congressus Numerantium., 29:901–908, 1980. 684. X.Y. Su. Paths, cycles, and arc-connectivity in digraphs. J. Graph Theory, 19(3):339–351, 1995. 685. J. Szigeti and Z. Tuza. Generalized colorings and avoidable orientations. Discuss. Math. Graph Theory, 17(1):137–145, 1997. 686. J.L. Szwarcﬁter. On minimum cuts of cycles and maximum disjoint cycles. In Graphs and algorithms (Boulder, CO, 1987), volume 89 of Contemp. Math., pages 153–166. Amer. Math. Soc., Providence, RI, 1989. 687. E´. Tardos. A strongly polynomial minimum cost circulation algorithm. Combinatorica, 5(3):247–255, 1985. 688. R.E. Tarjan. Depth-ﬁrst search and linear graph algorithms. SIAM J. Computing, 1(2):146–160, 1972. 689. R.E. Tarjan. Finding optimum branchings. Networks, 7(1):25–35, 1977. 690. R.E. Tarjan. Data structures and network algorithms. Society for Industrial and Applied Mathematics (SIAM), Philadelphia, Pa., 1983. 691. E.G. Tay. Optimal orientations of graphs. PhD thesis, National University of Singapore, Department of Mathematics, 1999. 692. M. Tewes. In-tournaments and Semicomplete Multipartite Digraphs. PhD thesis, Lehrstuhl II fu¨r Mathematik, RWTH Aachen, 1998. 693. M. Tewes and L. Volkmann. The ratio of the longest cycle and longest path in semicomplete multipartite digraphs. RTWH Aachen. 694. A. Thomason. Paths and cycles in tournaments. Trans. Amer. Math. Soc., 296(1):167–180, 1986. 695. S. Thomass´e. Covering a strong digraph by α − 1 disjoint paths. A proof of Las Vergnas’s conjecture. manuscript 2000. 696. C. Thomassen. An Ore-type condition implying a digraph to be pancyclic. Discrete Math., 19(1):85–92, 1977. 697. C. Thomassen. 2-linked graphs. European J. Combinatorics, 1:371–378, 1980. 698. C. Thomassen. Hamiltonian-connected tournaments. J. Combin. Theory Ser. B, 28(2):142–163, 1980. 699. C. Thomassen. Edge-disjoint Hamiltonian paths and cycles in tournaments. Proc. London Math. Soc. (3), 45(1):151–168, 1982. 700. C. Thomassen. Disjoint cycles in digraphs. Combinatorica, 3(3-4):393–396, 1983.

References 713
701. C. Thomassen. Connectivity in tournaments. In Graph theory and combinatorics (Cambridge, 1983), pages 305–313. Academic Press, London, 1984.
702. C. Thomassen. Even cycles in directed graphs. European J. Combin., 6(1):85– 89, 1985.
703. C. Thomassen. Hamilton circuits in regular tournaments. In Cycles in graphs (Burnaby, B.C., 1982), volume 115 of North-Holland Math. Stud., pages 159– 162. North-Holland, Amsterdam, 1985.
704. C. Thomassen. The 2-linkage problem for acyclic digraphs. Discrete Math., 55(1):73–87, 1985.
705. C. Thomassen. Sign-nonsingular matrices and even cycles in directed graphs. Linear Algebra Appl., 75:27–41, 1986.
706. C. Thomassen. Counterexamples to Ad´am’s conjecture on arc reversals in directed graphs. J. Combin. Theory Ser. B, 42(1):128–130, 1987.
707. C. Thomassen. Paths, circuits and subdivisions. In Selected topics in graph theory Vol. 3, pages 97–131. Academic Press Limited, 1988.
708. C. Thomassen. Conﬁgurations in graphs of large minimum degree, connectivity, or chromatic number. Annals of the New York Academy of Sciences, 555:402–412, 1989.
709. C. Thomassen. Whitney’s 2-switching theorem, cycle spaces, and arc mappings of directed graphs. J. Combin. Theory Ser. B, 46(3):257–291, 1989.
710. C. Thomassen. Highly connected non-2-linked digraphs. Combinatorica, 11(4):393–395, 1991.
711. C. Thomassen. The even cycle problem for directed graphs. J. Amer. Math. Soc., 5(2):217–229, 1992.
712. C. Thomassen. The even cycle problem for planar digraphs. J. Algorithms, 15:61–75, 1993.
713. C. Thomassen. Directed cycles with two chords and strong spanning directed subgraphs with few arcs. J. Combin. Theory Ser. B, 66(1):24–33, 1996.
714. C. Thomassen. Parity, cycle space and K4-subdivisions in graphs. In Surveys in Combinatorics, J.D. Lamb and D.A. Preece, eds., London Math. Soc. Lect. Note Series, 267, pages 223–237. Cambridge Univ. Press, Cambridge, UK, 1999.
715. M. Thorup. On RAM priority queues. In Proceedings of the Seventh Annual ACM-SIAM Symposium on Discrete Algorithms, pages 59–67, New York, 1996. ACM Press.
716. M. Thorup. Undirected single-source shortest paths with positive integer weights in linear time. Journal of the Association for Computing Machinery, 46:362–394, 1999.
717. K. Thulasiraman and M.N.S. Swamy. Graphs: theory and algorithms. John Wiley & Sons Inc., New York, 1992.
718. F. Tian, Z.S. Wu, and C.Q. Zhang. Cycles of each length in tournaments. J. Combin. Theory Ser. B, 33(3):245–255, 1982.
719. T.W. Tillson. A Hamiltonian decomposition of K2∗m, 2m ≥ 8. J. Combin. Theory Ser. B, 29(1):68–74, 1980.
720. W.T. Tutte. A contribution to the theory of chromatic polynomials. Canadian J. Math., 6:80–91, 1954.
721. W.T. Tutte. A theorem on planar graphs. Trans. Amer. Math. Soc., 82:99– 116, 1956.
722. W.T. Tutte. On the problem of decomposing a graph into n connected factors. J. London Math. Soc., 36:221–230, 1961.
723. Z. Tuza. Graph coloring in linear time. J. Combin. Theory Ser. B, 55(2):236– 243, 1992.
724. Z. Tuza. Characterization of (m, 1)-transitive and (3, 2)-transitive semicomplete directed graphs. Discrete Math., 135(1-3):335–347, 1994.

714 References
725. J. Urrutia and F. Gavril. An algorithm for fraternal orientation of graphs. Inform. Process. Lett., 41(5):271–274, 1992.
726. J. Valdes, R.E. Tarjan, and E.L. Lawler. The recognition of series parallel digraphs. SIAM J. Computing, 11(2):298–313, 1982.
727. L.M. Vitaver. Determination of minimal coloring of vertices of a graph by means of Boolean powers of the incidence matrix. Dokl. Akad. Nauk SSSR, 147:758–759, 1962.
728. L. Volkmann. Cycles in multipartite tournaments: results and problems. Discrete Math., to appear.
729. L. Volkmann. Longest paths in semicomplete multipartite digraphs. Discrete Math., 199:279–284, 1999.
730. L. Volkmann. Spanning multipartite tournaments of semicomplete multipartite digraphs. ARS Combinatoria, to appear.
731. J. von Neumann and O. Morgenstern. Theory of Games and Economic Behaviour. Princeton University Press, Princeton, 1944.
732. C. Wang, E.L. Floyd, and M.L. Soﬀa. Feedback vertex sets and cyclically reducible graphs. J. ACM, 32:296–313, 1985.
733. H. Wang, C. Little, and K. Teo. Partition of a directed bipartite graph into two directed cycles. Discrete Math., 160(1-3):283–289, 1996.
734. S. Warshall. A theorem on boolean matrices. J. ACM, 9:11–12, 1962. 735. D.B. West. Introduction to graph theory. Prentice-Hall, 1996. 736. D.B. West. Short proofs for interval digraphs. Discrete Math., 178(1-3):287–
292, 1998. 737. R.J. Wilson. An Eulerian trail through K¨onigsberg. J. Graph Theory, 8:265–
275, 1986. 738. D. Woodall. Improper colourings of graphs. In Graph Colourings, volume 218
of Pitman Research Notes in Math. Series, pages 45–63. Longman, 1990. 739. D.R. Woodall. Suﬃcient conditions for cycles in digraphs. Proc. London Math.
Soc., 24:739–755, 1972. 740. N.C. Wormald. Subtrees of large tournaments. Lecture Notes in Mathematics,
1036:417–419, 1983. 741. Z.S. Wu, K.M. Zhang, and Y. Zou. A necessary and suﬃcient condition for
arc-pancyclicity of tournaments. Sci. Sinica Ser. A, 25:249–254, 1982. 742. J.M. Xu. A suﬃcient condition for equality of arc-connectivity and minimum
degree of a digraph. Discrete Math., 133(1-3):315–318, 1994. 743. A. Yeo. A note on alternating cycles in edge-coloured graphs. J. Combin.
Theory Ser. B, 69:222–225, 1997. 744. A. Yeo. One-diregular subgraphs in semicomplete multipartite digraphs. J.
Graph Theory, 24(2):175–185, 1997. 745. A. Yeo. Semicomplete Multipartite Digraphs. PhD thesis, Department of
Mathematics and Computer Science, Odense University, Denmark, 1998. 746. A. Yeo. A polynomial time algorithm for ﬁnding a cycle covering a given set of
vertices in a semicomplete multipartite digraph. J. Algorithms, 33(1):124–139, 1999. 747. A. Yeo. Diregular c-partite tournaments are vertex-pancyclic when c ≥ 5. J. Graph Theory, 32:137–152, 1999. 748. A. Yeo. How close to regular must a semicomplete multipartite digraph be to secure Hamiltonicity? Graphs Combin., 15:481–493, 1999. 749. A. Yeo. Large diregular 4-partite tournaments are vertex-pancyclic. manuscript 1999. 750. D.H. Younger. Graphs with interlinked directed circuits,. In Proceedings of the Midwest symposium on circuit theory 2, pages XVI 2.1 – XVI 2.7, 1973. 751. D.H. Younger. Integer ﬂows. J. Graph Theory, 7(3):349–357, 1983.

References 715
752. D.A. Youngs. Minimal orientations of colour critical graphs. Combinatorica, 15(2):289–295, 1995.
753. N. Zadeh. Theoretical eﬃciency of the Edmonds-Karp algorithm for computing maximal ﬂows. J. Assoc. Comput. Mach., 19:184–192, 1972.
754. C.Q. Zhang. Every regular tournament has two arc-disjoint hamiltonian cycles. J. Qufu Normal College, Special Issue Oper. Res.:70–81, 1980.
755. K.-M. Zhang. Vertex even-pancyclicity in bipartite tournaments. J. Nanjing Univ. Math. Biquarterly, 1:85–88, 1981.
756. K.M. Zhang, Y. Manoussakis, and Z.M. Song. Complementary cycles containing a ﬁxed arc in diregular bipartite tournaments. Discrete Math., 133(13):325–328, 1994.
757. K.M. Zhang and J.-Z. Wang. Complementary cycles containing a ﬁxed arc and a ﬁxed vertex in bipartite tournaments. Ars Combin., 35:265–269, 1993.
758. L.-C. Zhao and J.-H. Meng. A suﬃcient condition for hamiltonian cycles in digraphs. Ars Combinatoria, 32:335–338, 1991.
759. G. Zhou, T. Yao, and K.-M. Zhang. On score sequences of khypertournaments. Europ. J. Combin., to appear, 2000.
760. G. Zhou and K. Zhang. A suﬃcient condition for a semicomplete multipartite digraph to be hamiltonian. Australas. J. Combin., 19:231–234, 1999.
761. H. Zhou. Multiplicativity of acyclic digraphs. Discrete Math., 176(1-3):263– 271, 1997.
762. H.S. Zhou. Characterization of the homomorphic preimages of certain oriented cycles. SIAM J. Discrete Math., 6(1):87–99, 1993.

Symbol Index

To shorten and unify notation, in this index we use the following convention:
B denotes a bipartite (di)graph.
C, Ci denote cycles (directed, undirected, edge-coloured, oriented). D, Di denote digraphs, directed multigraphs and directed pseudographs. G, Gi denote undirected graphs and undirected multigraphs. H denotes a hypergraph.
M denotes a mixed graph or a matroid.
P , Pi denote path (directed, undirected, edge-coloured, oriented). S denotes a matrix or a multiset.
X, Xi denote abstract sets or sets of vertices. Y , Yi denote sets of arcs.

(D1, D2)D: set of arcs with tails in V (D1) and heads in V (D2), 6
(X, ≺): partial order on X, 236
(X1, X2)D: set of arcs with tail in X1 and head in X2, 3
(Γ , +): an additive group, 435
↔
(Kn, c): weighted complete digraph, 82
(F, b): pair of a family F and a submodular function b on F , 449
∗P : P minus the ﬁrst vertex on P , 322
>u: ordering of neighbours of u, 654
A(D): arc set of D, 2
A(x): arc set of residual network w.r.t x, 98
B = (X1, X2; E): speciﬁcation of a bipartite graph with bipartition X1, X2, 25
BG(D): bipartite representation of D, 25
BOR(D): proper backward rank of D, 643
BL: bad vertices with respect to the local median order L, 639
CM (D): the 2-edge-coloured bipartite multigraph corresponding to the bipartite digraph D, 602
CM −1(B): the bipartite digraph corresponding to the 2-edge-

coloured bipartite multigraph B, 602
C[xi, xj]: subpath of C from xi to xj, 12
C1 >C2: C1 contains singular vertices with respect to C2 and they all are out-singular, and C2 has singular vertices with respect to C1 and they all are in-singular, 254
D(G): digraph obtained from G via BD-correspondance, 602
D(d, n, q, r): consecutive-d digraph, 190
D − X: deleting the vertices of X from D, 7
D − Y : deleting the arcs of Y from D, 7
D//P : path-contraction, 229
D/D1: contracting the subdigraph D1 in D, 7
D = (V + s, A), D = (V + s, E ∪ F ): speciﬁcation of D with special vertex s, 356
D = (V, A): speciﬁcation of D, 2
D = (V, A, ): speciﬁcation of a paired comparison digraph, 643
D = (V, A, c): speciﬁcation of weighted D, 6
D[D1, D2, . . . , Dn]: composing D with D1, D2, . . . , Dn, 8
Dp: pth power of D, 9

718 Symbol Index

D1 ⇒ D2: no arc from V (D2) to

D1

∼=

D2,

V (D1), 6 D = H:

D1

is

isomorphic

to D2, 7

D1 ∪ D2: union of D1 and D2:, 10

D1→D2: D1 is homomorphic to D2, 656

D1 → D2: V (D1) dominates V (D2) and no arc from V (D2) to V (D1), 6

D1→D2: D1 is not homomorphic to

D2, 656

D1 → D2: V (D1) dominates V (D2),

6

D1 × D2 × . . . × Dn, Cartesian product

n
io=f1

Di: di-

graphs, 9

DB(d, t): the de Bruijn digraph, 187

DG(d, n): generalized de Bruijn digraph, 190

DK (d, t): the Kautz digraph, 189

DST : digraph obtained from D by the vertex splitting procedure,

102

DF : digraph associated with a 2-SAT expression, 36

Dmajor(T ): majority digraph of the hypertournament T , 628

D X : subdigraph of D induced by

X, 5

E(G): edge set of the graph G, 18

F OR(D): proper forward rank of D,

643

Fs+, Fs−: out- and in-branching rooted at s, 19

G = (V + s, E): speciﬁcation of undi-

rected graph with special

vertex s, 440

GF (2): Gallois ﬁeld on 2 elements,

544

G1 × G2 × . . . × Gn: Cartesian products of graphs, 71

GL: good vertices with respect to the local median order L, 639

Gitd: graph corresponding to orientability as a locally in-

tournament digraph, 423

Gltd: graph corresponding to orientability as a locally tour-

nament digraph, 418

Gqtd: graph corresponding to orientability as a quasi-

transitive digraph, 414

H = (V, E): speciﬁcation of the hypergraph H, 24
Knc : c-edge-coloured complete graph of order n, 611
Kn: complete graph of order n, 25 Kn1,n2,...,np : complete multipartite
graph, 25
L(D): line digraph of D, 182
Lk(D): iterated line digraph of D, 187
M = (S, I): speciﬁcation of matroid, 663
M = (V, A, E): speciﬁcation of the mixed graph M , 22
M OR(D): proper mutual rank of D, 643
M ∗: dual of the matroid M , 665
M1 ∨ M2: union of matroids M1 and M2, 668
N (T, X): assignment neighbourhood of T w.r.t X, 85
ND+p(X), ND−p(X): pth out- and inneighbourhood of X, 46
ND+p[X], ND−p[X]: closed pth out- and in-neighbourhood of X, 46
ND(v): neighbourhood of v, 4 ND+(X), ND−(X): out-neighbourhood,
in-neighbourhood of X, 4 ND+(v), ND−(v): out-neighbourhood
and in-neighbourhood of v, 4
NG(x): neighbourhood of x in G, 19 O(f (k)): O-notation, 29
OR(D): set of all FSO-optimal orderings of V , 642
P [xi, xj]: subpath of P from xi to xj, i ≤ j, 12
Qx,z, Q.,w: path factor with two paths such that the ﬁrst is an (x, z)-path and the second path has terminal vertex w, 295
Qz,x, Qw,.: path factor with two paths such that the ﬁrst is a (z, x)-path and the second path has initial vertex w, 295
R+(X): vertices that can be reached from X, 322
R−(X): vertices that can reach X, 322
Rl(r, q): Ramsey number for luniform hypergraphs, 561

S = [sij]: matrix, 2 SC(D): strong component digraph of
D, 17 ST : transpose of matrix S, 2
T C(D): transitive closure of D, 177
T Ts: transitive tournament on s vertices, 414
T rev: reverse of T , 591
U G(D): underlying graph of D, 19
Un,k: uniform matroid, 664 V (D): vertex set of D, 2
V (G): vertex set of the graph G, 18 X+, X−: successors and predecessors
of vertices in X, 12
X1 ⇒ X2: no arc from X2 to X1, 3 X1 → X2: X1 → X2 and X1 ⇒ X2, 3 X1 → X2: X1 dominates X2, 3 X1 × X2 × . . . × Xp: Cartesian prod-
uct of sets, 2
X1 X2: symmetric diﬀerence, 544 ∆(G): maximum degree of G, 19 ∆+(D), ∆−(D): maximum out- and
in-degree of D, 5 ∆0(D): maximum semi-degree of D,
5
∆mon(G): maximum monochromatic degree of G, 591
Γ (F ): intersection graph of the family F of sets, 424
Ω(F ): catch digraph of the family F of pointed sets, 424
Ω(f (k)): Ω-notation, 29
Ω(P): intersection graph of the family P of subgraphs, 600
Ω(D): maximum number of arcdisjoint dicuts in D, 398
Φext: set of extended Φ-digraphs, 9
Φ0: union of semicomplete multipartite, connected extended locally semicomplete digraphs and acyclic digraphs, 214
Φ1: union of semicomplete bipartite, connected extended locally semicomplete and acyclic digraphs, 214
Φ2: union of connected extended locally semicomplete and acyclic digraphs, 214
Ψ : union of transitive and extended semicomplete digraphs, 195

Symbol Index 719

Ψ t: class of all digraphs for which a minimum path-factor can

be found in polynomial time O(nt), 335

Θ(f (k)): Θ-notation, 29

α(D): independence number of D, 22

αacyc(D): acyclic independence number of D, 662

αor(D): oriented independence number of D, 662

IJ : admissible cells for transporta-

tion, 149

χ(X1X2): colour of edges between X1 and X2, 591
χ(e): colour of edge e, 591

χend(P ): colour of last edge of P , 591
χstart(P ): colour of ﬁrst edge of P , 591

χ(H): chromatic number of D, 22

δ(G): minimum degree of G, 19

δ+(D), δ−(D): minimum out- and in-

degree of D, 4

δ0(D): minimum semi-degree of D, 5

δimj : length of a shortest (i, j)-path using only internal vertices

from {1, 2, . . . , m − 1}, 58

δm0 on(D): minimum monochromatic semi-degree of the arc-

coloured digraph D, 618

δm0 on(v): minimum monochromatic semi-degree of v in an arc-

coloured digraph, 618

δ(P ): capacity of augmenting path P ,

109

δx(s, t): length of a shortest (s, t)path in N (x), 114

(xy): weight of the arc xy in a paired

comparison digraph, 641

ηk(F ): deﬁciency of the family F of one-way pairs, 367

ηk(X, Y ): deﬁciency of the one-way pair (X, Y ), 366

γk,S,T (D ): k-(S, T )-arc-strong connectivity augmentation

number of D, 374

γ(S, S): ﬂow demand of the (s, t)-cut

(S, S), 127

γ

∗ k

(D):

subpartition

lower

bound

for augmenting the vertex-

strong connectivity of D to

k, 365

720 Symbol Index
γk(D): subpartition lower bound for augmenting the arc-strong connectivity of D to k, 360
γs,k(D): minimum number of new arcs one has to add to D in order to obtain a new digraph D = (V, A ∪ F ) which has k arc-disjoint out-branchings rooted at s, 534
κ(D): vertex-strong connectivity of D, 16
κ(x, y): local vertex-strong connectivity from x to y, 344
λ(D): arc-strong connectivity of D, 17
λ(x, y): local arc-strong connectivity from x to y, 344
Y1, Y2 : scalar product of Y1 and Y2, 544
dim S: dimension of the vector space S, 544
↔
G: complete biorientation of G, 19
↔
Kn: complete digraph of order n, 27 µD(x, y): number of arcs with tail x
and head y, 4 µG(u, v): number of edges between u
and v in G, 18 ν0(D): maximum number of vertex-
disjoint cycles in D, 551 ν1(D): maximum number of vertex-
disjoint cycles in D, 551 G: complement of G, 18 Kn: graph of order n with no edges,
25 x: negation of boolean variable x, 35 φ(u): forefather of u, 180 πF SO(x): proper FSO rank of x, 642 ρ(G): diammin(G) − diam(G), 67 ρ(D): minimum number of arcs
whose contraction in D leads to a strong directed multigraph, 399 σ∗(x): σ+(x) − σ−(x), 644 σ+(x), σ−(x): positive and negative scores of x, 641 τ0(D): size of a minimum feedback vertex set of D, 551 τ1(D): size of a minimum feedback arc set of D, 551 τ (D): size of a minimum dijoin of D, 398 Cn: directed cycle on n vertices, 12

Pn: directed path on n vertices, 12 ak(D): k-strong augmentation num-
ber of D, 366
aF : the number of edges, oriented or not, which enter some X ∈ F , 505
b(v): balance prescription for the vertex v, 96
bD(α): backward length of the ordering alpha, 643
bx: balance vector of the ﬂow x, 96 bd(F ): boundary of face F , 219
c(G): the number of connected components of G, 445
c(Y ): sum of costs/weights of arcs in Y, 6
c(a): cost/weight of the arc a, 6 d(X, Y ): d+(X, Y ) + d+(Y, X), 344
d(x): degree of x, 19 d+(X, Y ): number of arcs with tail in
X − Y and head in Y − X, 344 d+F (X), d−F (X): number of arcs from F that leave, respectively enter, X, 474
dD(X): degree of X, 4 d+D(X), d−D(X): out- and in-degree of
X, 4 d+i (v),d−i (v): ith out- and in-degree
of v in an arc-coloured digraph, 618
dj(v): jth degree of of v, 591 e(X1, X2): number of edges between
X1 and X2, 502 eG(X): number of edges of G with at
least one end in X, 445
eF : number of edges connecting different sets of partition F, 448
f (X1, X2): sum of f -values over arcs with tail in X1 and head in X2, 96
fD(α): forward length of the ordering alpha, 643
g(D): girth of D, 11
gv(D): length of a shortest cycle through v in D, 303
h(X, Y ): number of vertices not in the one-way pair (X, Y ), 366
h(p): height of vertex p, 118
iG(X): number of edges of G with both ends in X, 445

ig(D): global irregularity of D, 262 il(D): local irregularity of D, 262
l(S, S): lower bound of the cut (S, S), 126
lij: lower bound of the arc ij, 95 m(y, e): sum of values of y on sets sets
entered by the arc e, 528 mD(α): mutual length of ordering α,
643 p(D): period of D, 564 r(X): rank of X, 664 r∗(X): dual rank of X, 666 r+(U ): sum of function values of r on
arcs in (U, U ), 449 r−(U ): sum of function values of r on
arcs in (U , U ), 449 rk(D): minimum number of arcs to
reverse in D to obtain a kstrong digraph, 376 rij: residual capacity of the arc ij, 98 s(G): minimum number of steps for gossiping in G, 81 sgn(P ): − if P is an in-path and + if P is an out-path, 322 u(S, S): capacity of the (s, t)-cut
(S, S), 108 uij: capacity of the arc ij, 95
x(S, S): ﬂow across the (s, t)-cut
(S, S), 109 x(uv): value of integer ﬂow x on the
arc uv, 435 x + x : arc-sum of ﬂows x and x , 104 x → y: x dominates y, 3 x y: x is a descendant of y in a DFS
tree, 173 x∗ = x ⊕ x˜: adding the residual ﬂow
x˜ to x, 105 x+i , x−i : successor and predecessor of
xi, 12 xij: ﬂow value on the arc ij, 96 A(D): arc space of D, 544 C(D): cycle space of D, 544 C∗(D): cocycle space of D, 545 D6, D8: classes of non-arc-pancyclic
arc-3-cyclic tournaments, 309 F = P1 ∪ . . . ∪ Pq ∪ C1 ∪ . . . ∪ Ct: qpath-cycle subdigraph, 15 N (D): network representation of D, 346 N (x): residual network w.r.t x, 98

Symbol Index 721
N = (V, A, l, u, b, c): speciﬁcation of the ﬂow network N , 96
NB: network corresponding to the bipartite graph B, 138
NS = (V, A, f, g, (B, b), c): submodular ﬂow network, 454
N(α,β): admissible network with respect to (α, β), 151
Q: set of rational numbers, 1 Q+: set of positive rational numbers,
1 Q0: set of non-negative rational num-
bers, 1 R: set of reals, 1 R+: set of positive reals, 1 R0: set of non-negative reals, 1 S ≤P T : S polynomially reducible to
T , 34 T ∗: set of second powers of even cy-
cles of length at least 4, 290 T4, T6: classes of semicomplete di-
graphs, 290 Z: set of integers, 1 Z+: set of positive integers, 1 Z0: set of non-negative integers, 1 Prob(E): probability of the event E,
548 diam(D): diameter of D, 47 diammin(G): minimum diameter of an
orientation of G, 63 dist(X1, X2): distance from X1 to X2,
47 dist(x, y): distance from x to y, 47 domn(A, n): domination number of
heuristic A for TSP problem of order n, 336 ext(X): set of elements each of which can extend X to an independent set, 666 in(D): intersection number of D, 217 lc(D): length of a longest cycle of D, 575 lp(D): length of a longest path in D, 433 lp(G): longest path in G, 61 pcc(D): path-cycle covering number D, 15 pcc∗(D): 0 if D has a cycle factor and pcc(D) otherwise, 331 pc(D): path covering number of D, 15

722 Symbol Index
pcx(D): minimum number of paths in a path factor which starts at x, 283
pc∗(D): 0 if D is hamiltonian and pc(D) otherwise, 333
ph(D): pseudo-hamiltonicity number of D, 232
pred(x): predecessor of x w.r.t a DFS search, 172
qhn(D): quasi-hamiltonicity number of D, 230
rad(D): radius of D, 47 rad+(D): out-radius of D, 47 rad−(D): in-radius of D, 47

srad(D): strong radius of D, 64 texpl(x): time when x is explored by
a DFS search, 172 tvisit(x): time when x is visited in a
DFS search, 172 |D|: the order of the digraph D, 2 |S|: cardinality of the multiset S, 2 |x|: value of ﬂow x, 100
co-N P: class of co-N P decision problems, 33
N P: class of N P decision problems, 33

Author Index

A´ da´m, A., 582 Aharoni, R., 501, 651 Aho, A.V., 28, 178 Ahuja, R.K., 95, 129 Aigner, M., 652 Ainouche, A., 240 Aldous, J., 95 Alegre, I., 59, 184, 188 Alon, N., 67, 143, 145, 275, 299, 394,
548–550, 553, 561, 569, 580, 586, 614 Alspach, B., 203, 309, 319, 322, 574 Alt, H., 139 Amar, D., 328 Anderson, A., 54 Apartsin, A., 650 Appel, K., 434 Aragon, C.R., 673 Arkin, E.M., 49, 567 Arts, E.H.L., 674 Assad, A.A., 519 Assous, R., 625 Ausiello, G., 35 Ayel, J., 258 Ayoub, J.N., 409, 580
Bo¨hme, T., 498 Babel, L., 229 Baﬃ, L., 191 Balas, E., 83 Balcer, Y., 565 Balinski, M., 654 Bang-Jensen, J., 78, 93, 146, 167,
195–198, 200–203, 206, 207, 209–214, 216, 228, 237–241, 243, 244, 246, 247, 250, 252, 253, 255–257, 264, 265, 267, 268, 270–272, 276–278, 283, 284, 286–306, 312–317, 327, 330–336, 341, 360, 370, 377, 379, 392, 395, 418, 422, 425–427, 430, 465, 486–494, 500, 507, 513, 516–525, 537, 552, 560, 597–601, 604–607, 612, 635, 659, 662, 677 Bankfalvi, M., 606 Bankfalvi, Z., 606 Barbut, E., 625 Barr, O., 612

Barth´el´emy, J.-P., 560 Baskoro, E. T., 60 Battista, G., 192, 220 Beck, J., 570 Beineke, L.W., 183, 184, 217, 605 Benkouar, A., 593, 613 Bennett, M.D., 630 Berge, C., 554, 648–650 Berman, K.A., 243 Bermond, J.-C., 187, 277, 295, 300,
307, 319, 498, 553, 580 Bertolazzi, P., 191 Bialostocki, A., 625 Bienia, W., 440 Biggs, N.L., 21 Blum, N., 139 Boesch, F., 23, 350 Bolloba´s, B., 319, 328, 614 Bondy, J.A., 228, 234, 242, 248, 329,
432, 434, 545, 574, 575, 592 Boppana, R., 653 Borodin, O. V., 651 Boros, E., 650 Boyd, A., 80 Brandsta¨dt, A., 413 Brassard, G., 28, 354 Bratley, P., 28, 354 Brewster, R.C., 661 Bridges, W.G., 59 Burkard, R.E., 83 Busacker, R.G., 134
Caccetta, L., 578 Camion, P., 16 Cao, F., 187, 189, 190 Carlier J., 83, 86 Cartwright, D., 25 Chang, G.J., 275 Chartrand, G., 560 Chen, C.C., 329, 330, 614 Chen, G.T., 328 Cheng, E., 365 Cheriyan, J., 122, 354, 402, 404, 406 Cherkassky, B.V., 50 Chetwynd, A.G., 603, 604 Chow, W.S., 591 Chung, F.R.K., 23, 67, 408, 432 Chva´tal, V., 63, 64, 245, 578, 648,
651, 663

724 Author Index
Cohen, R. F., 191 Cook, S.A., 34 Cook, W.J., 82, 113, 663 Cooper, C., 275 Coppersmith, D., 177, 549 Cormen, T.H., 28, 31, 32, 179, 541 Crescenzi, P., 35 Cunningham, W.H., 82, 113, 455, 663 Cybenko, G., 93
Dahl, G., 534 Dalmazoo, M., 380 Dankelmann, P., 390 Darbinyan, S.K., 241, 242, 295, 300 Darrah, M., 311 Das, P., 605, 607 Das, S., 217, 226 Daykin, D.E., 614 de Bruijn, N. G., 187 de la Vega, W.F., 556 de Werra, D., 422 Dean, N., 637 Deineko, V.G., 83, 84, 86 Delorme, C., 229 Deng, X., 419, 465 Di Battista, G., 191 Diestel, R., 440, 545 Dijkstra, E.W., 53 Dilworth, R.P., 236 Ding, G., 496 Dinic, E.A., 116, 513 Dinitz, J., 652 Dolan, A., 95 Dorninger, D., 591, 630, 631 Doroshko, N.N., 82–84 Dowsland, K., 673 Du, D.-Z., 184, 187, 189, 190, 275 Duchet, P., 649, 650 Duﬀ, I. S., 221–223 Duﬃn, R. J., 191, 194
Eades, P., 192, 220 Edmonds, J., 29, 114, 134, 138, 164,
449, 450, 457, 499–503, 525, 669, 678 Ehrenfeucht, A., 420 Enni, S., 360, 374, 460 Erdo˝s, P., 234, 275, 320, 570, 580, 606, 614, 663 Erisman, A. M., 221–223 Esfahanian, A.H., 354 Euler, L., 21 Even, G., 557

Even, S., 38, 122, 354, 501, 519, 610
Favaron, O., 330 Feldman, J., 534 Feller, W., 564, 635 Ferapontova E., 650 Fink, J.F., 274 Fiol, M.A., 59, 184, 188 Fisher, D.C., 637 Fisher, M.J., 177 Fleischer, L., 453 Fleischner, H., 21, 439, 440, 469, 593,
624 Floyd, E.L., 559 Floyd, R.W., 58 Forcade, R., 322 Ford, L.R., 95, 98, 109, 111, 354, 447 Fortune, S., 476, 482, 505, 508 Fraigniaud, P., 81 Fraisse, P., 315 Frank, A., 351, 357, 358, 360–370,
372–374, 379, 381, 409, 442, 443, 445–464, 469, 470, 500, 503, 504, 507, 514, 525–536, 538, 559 Frankl, P., 625 Fredman, M.L., 54, 550 Frieze, A., 275 Fris, I., 60 Frisch, I.T., 409, 580 Fujishige, S., 450, 453, 455, 457, 459 Fulkerson, D.R., 95, 98, 109, 111, 354, 447, 525, 532, 541 Funke, M., 556 Furman, M.E., 177 Fu˝redi, Z., 61
Gabow, H.N., 355, 360, 420 Gale, D., 127, 654 Galeana-Sa´nchez, H., 422, 648, 649 Galil, Z., 354 Gallai, T., 234, 330, 433, 559 Galluccio, A., 566–569, 586 Galvin, F., 654 Gambosi, G., 35 Garey, M.R., 23, 33, 38, 62, 67, 178,
227, 408, 552, 584 Gavril, F., 422, 425, 552 Geller, D., 560 Gerards, A.M.H., 430, 431, 466 Germa, A., 580 Ghouila-Houri, A., 61, 241, 414 Giglio, M.C.M.T., 485, 537 Giles, R., 449, 450, 457

Glover, F., 83, 84, 86, 336, 338 Goddard, W.D., 76, 432, 574 Goddyn, L., 440 Goemans, M.X., 561 Goldberg, A.V., 50, 118, 134 Goldberg, M.K., 60, 61 Golumbic, M.C., 218, 413, 416 Gondran, M., 519 Goralcikova, A., 177 Gould, R., 328 Gowen, P.J., 134 Gro¨tschel, M., 272, 368, 453 Gro¨tzsch, H., 466 Gru¨nbaum, B., 321 Greger, B., 279 Grinberg, E`.Y., 582 Grossman, J.W., 595, 634 Gro¨tschel, M., 556 Guo, Y., 202, 208–213, 244, 250, 263,
289–294, 300, 303–306, 310, 327, 395, 572, 574 Gurvich, V., 650 Gutin, G., 42, 61, 67–69, 76, 79, 81–84, 86, 87, 93, 145, 146, 167, 201, 202, 209–214, 216, 228–233, 238, 240, 241, 243, 244, 246, 247, 250–253, 255–258, 264–268, 270–272, 275, 277–280, 283, 284, 286, 287, 294, 299, 300, 303–306, 312–317, 337, 338, 341, 392, 524, 573, 575, 587, 597–601, 604–607, 612, 614, 617, 619, 622, 625, 629, 635, 636, 646, 675 Gutjahr, W., 657, 658 Gvozdjak, P., 440 Gya´rfa´s, A., 559
Ha¨ggkvist, R., 229, 246, 251, 300, 319, 578, 590, 591, 595, 602, 603, 607, 634, 640, 658
Habib, M., 179 Hagihara, K., 369 Hajnal, A., 80 Haken, W., 434 Hakimi, S.L., 354 Hall, P, 140 Hamidoune, Y.O., 390, 578 Hansen, S., 674, 675 Harant, J., 498 Harary, F., 25, 182, 185, 195, 218,
272, 411

Author Index 725
Havet, F., 322–326, 637 Hedetniemi, S.M., 81 Hedetniemi, S.T., 81, 560 Hell, P., 187, 238, 239, 325, 416, 418,
419, 465, 657–661, 677 Hemminger, R.L., 183, 184 Hendry, G.R.T., 308, 340 Henzinger, M.R., 355 Heslop-Harrison, J.S., 630 Heuchenne, C., 182 Heydemann, M.-C., 243, 326, 481,
537, 580 Hilton, A.J.W., 603, 604 Hoang, C.T., 578, 579 Hoﬀman, A.J., 126 Holzman, R., 651 Hopcroft, J.E., 28, 220, 476, 482, 505,
508 Horak, P., 61 Hromkoviˇc, J., 81 Hsu, D.F., 184, 187, 189, 190, 275 Huang, J., 78, 93, 195–197, 201–
204, 238–240, 247, 252, 253, 255–257, 265, 278, 286, 287, 294, 301–303, 333, 395, 416–430, 465, 521, 524 Hudry, O., 560 Hwang, F.K., 190, 275
Ibaraki, T., 355, 356, 453, 511, 512, 514
Imase, M., 188, 190 Imori, M., 307 Isaak, G., 560 Itai, A., 38 Itoh, M., 190 Iwata, S., 453
Jackson, B., 146, 246, 278, 319, 360, 393, 455, 459, 500, 507, 662
Jacob, H., 651 Jaeger, F., 438–440 Janssen, J., 653 Jensen, T.R., 434, 440 Jewell, W.S., 134 Jira´sek, J., 583 Johnson, D.B., 91 Johnson, D.S., 33, 38, 62, 82, 227,
552, 584, 673 Johnson, T., 514 Jorda´n, T., 360, 365–370, 372–374,
377, 388 Jung, H.A., 480 Ju¨nger, M., 556

726 Author Index
Ko¨nig, D., 25, 139, 167 Ko¨nig, J-C., 72, 79 Kabadi, S., 337 Kabell, J. A., 218 Kann, V., 35 Kano, M., 641, 643–647 Karp, R.M., 34, 114, 134, 164, 434,
552 Karzanov, A.V., 513 Kelly, P.J., 319 Kemeny, J.G., 564 Kemnitz, A., 279 Khuller, S., 403, 404 Klasing, R., 81 Klein, M., 132 Kleitman, D., 432 Knuth, D.E., 175 Kocay, W., 139 Koh, K.M., 69, 71–73, 76, 79, 568 Komlo´s, J., 550 Korst, J.H.M., 674 Kostochka, A. V., 651 Kotzig, A., 318, 592 Koubek, V., 177 Krarup, J., 195 Krumme, D.W., 72, 79, 93 Kubicki, G., 76 Kuhl, J. G., 190 Kuhn, W.H., 154 Kumar, M.P., 161 Kunth, D.E., 565 Kunzmann, A., 551 Kuratowski, C., 220 Kwak, J.H., 574
Landau, H.G., 74, 444 Las Vergnas, M., 235 Lawler, E.L., 58, 82, 191, 194, 195 Lazard, E., 72, 79, 81 Leiserson, C.E., 28, 31, 32, 179, 541,
551 Lenstra, J.K., 82 Lesniak-Foster, L., 274 Levin, L.A., 34 Lewin, M., 277, 294 Li, H., 240, 241, 243, 244, 246, 277,
328 Li, X., 648 Liestman, A., 81 Linial, N., 354, 569, 586 Little, C.H.C., 328, 605 Liu, J., 580 Liu, X., 187, 243

Liu, Y.-P., 311 Lloyd, E.K., 21 Loebl, M., 566–569, 586 Lova´sz, L., 63, 350, 354, 368, 399,
441, 453, 499, 651 Lucchesi, C.L., 399, 485, 537, 557 Lynch, J.F., 480, 496 Lyuu, Y.-D., 184
Mu¨ller, H., 218 MacGillivray, G., 659, 661 Mader, W., 358, 360, 380, 381, 383,
385–389, 441, 442 Maehara, H., 424 Maﬀray, F., 651, 655 Magnanti, T.L., 95, 129 Maheshwari, S.N., 122, 161 Malhotra, V.M., 161 Manalastras, P., Jr., 329, 330 Manoussakis, Y., 243, 251, 276, 289,
295, 297, 312, 327, 481, 591, 593, 607, 612–614 Marchetti-Spaccamela, A., 35 Marcus, D.A., 581 Mashall, S., 625 Masuzawa, T., 369 Matsumoto, M., 307 Maurer, H. A., 657, 658 May, D., 81 McCanna, J.E., 72 McConnell, R.M., 420 McCuaig, W., 561, 566 McDiarmid, C., 553, 569 McGeoch, L.A., 82, 673 McMorris, F. R., 218 Megalakaki, O., 591 Mehlhorn, K., 139, 177 Meng, J.-H., 243, 277 Menger, K., 351 Metzlar, A., 484 Meyer, A.R., 177 Meyniel, H., 242, 651 Milgram, A.N., 234 Miller, D., 658 Miller, M., 60 Milner, E. C., 80 Minoux, M., 519 Minty, G.J., 434 Molloy, M., 275, 553 Monien, B., 81 Monma, C.L., 191 Moon, J.W., 16, 75, 92, 309 Morgenstein, O., 649, 676 Morris, A.O., 544

Morvan, M., 179, 416 Muller, J.H., 416 Murty, K.G., 95 Murty, U.S.R., 545, 592
Nagamochi, H., 355, 356, 453, 514 Naor, J., 557 Nash-Williams, C.St.J.A., 244, 245,
441–443, 502, 503 Neˇsetˇril, J., 657, 659–661 Neuman-Lara, V., 649, 658 Ng, L.L., 319 Nishimura, T., 578 Norman, R.Z., 25, 182, 185
Oellermann, O.R., 76, 574 Okada, K., 188, 190 Olsen, C., 672, 674 Ordaz, O., 146, 229 Ore, O., 143 Orlin, J.B., 95, 129 Overbeck-Larisch, M., 242, 295, 340
Pan, L., 625 Papadimitriou, C.H., 36, 38, 49, 158,
548, 567, 598, 671 Pareek, C.M., 61 Paschos, V., 593, 613 Paul, M., 139 Peine, R., 81 Pek´ec, A., 443 Penn, L.E., 582 Perl, Y., 482 Petersen, J., 432, 591 Petreschi, R., 191 Petrovi´c, V., 76, 78 Pevzner, P.A., 591, 593 Peyrat, C., 187 Pinkernell, A., 574 Plesn´ık, J., 59, 60, 66, 68, 69, 79 Plummer, M., 350 Poljak, S., 511–513 Potts, C.N., 83 Pradhan, D.K., 187, 190 Prisner, E., 184, 201, 238, 239, 413,
422, 425–427 Protasi, M., 35 Pulleyblank, W.R., 82, 113, 663 Punnen, A.P., 83, 84, 336 Po´sa, L., 245
Queyranne, M., 453 Quiroz, D., 229

Author Index 727
R´edei, L., 14 Radhakrishnan, J., 570 Rado, R., 666 Radzik, T., 50 Raghavachari, B., 403, 404 Ramachandran, V., 559 Rampon, J.-X., 179 Ramsey, F.P., 561 Rao, S., 355 Raspaud, A., 328 Ratier, G., 654 Rattner, J., 81 Recski, A., 663, 668 Reddy, S. M., 190 Reed, B., 560, 561, 563, 578, 579 Reeves, C.R., 675 Reid, J. K., 221–223 Reid, K.B., 75, 76, 326, 445, 625 Reif, J.H., 354 Reinelt, G., 82, 556 Rendl, F., 191 Richards, P.I., 182 Richardson, M., 649 Rinooykan, A.H.G., 82 Rivest, R.L., 28, 31, 32, 179, 541 Robbins, H.E., 20, 79, 350 Roberts, F.S., 71, 79, 560 Robertson, N., 480, 560, 563, 566 Rosenfeld, M., 321, 322, 325 Roy, A.B., 217, 226 Roy, B., 433 Rubinstein, A., 641 Ruhl, M., 534
Saad, R., 593, 599, 606, 613 Sabidussi, G., 593 Sakamoto, A., 641, 643–645 Samathan, M. R., 187 Sanyal, B.K., 218 Sarvanov, V.I., 82–84 Saxe, J.B, 551 Schevon, C., 673 Schieber, B., 557 Schmidt, J.P., 550 Schnorr, C.-P., 354 Schrijver, A., 82, 113, 368, 450, 453,
459, 496, 505, 508, 663 Schwenk, A., 195 Sebo˝, A., 440 Sen, M.K., 217, 218, 226 Seymour, P.D., 438, 440, 480, 496,
513, 514, 557, 559–561, 563, 566, 568, 637

728 Author Index
Shamir, A., 38 Shapley, L.S., 654 Shearer, J., 614 Shepherd, F.B., 430, 466, 561 Shiloach, Y., 480, 482, 506 Shmoys, D.B., 82, 557 Sidney, J.B., 191 Siegel, A., 550, 653 Simon, K., 177, 179 Simonetti, N., 83 Skiena, S.S., 58 Skrien, D., 418, 424 Snell, J.L., 564 Soﬀa, M.L., 559 Sˇolt´es, L., 67 Soneoka, I., 188, 190 Song, Z.M., 300, 326, 328 Sopena, E., 661 Sotteau, D., 319, 326, 481, 537, 580 Speckenmeyer, E., 662 Spencer, J.H., 67, 275, 569, 580, 614 Spinrad, J., 416 Spyratos, M., 591, 612, 614 Srinivasan, A., 570 Steiglitz, K., 36, 38, 158, 598, 671 Steiner, G., 191 Stockmeyer, L., 38 Stone, D., 139 Straight, H.J., 322 Su, X.J., 360 Sudakov, B., 617, 619, 622 Sudan, M., 557 Sudborough, J. H., 657, 658 Sullivan, S.J., 420 Sumner, D.P., 640 Szekeres, G., 234 Szemer´edi, E., 80, 550, 578 Szigeti, J., 434 Szwarcﬁter, J.L., 559
Tabib, C., 203 Tamassia, R., 191, 192, 220 Tan, B.P., 69, 76 Tardo´s, E., 134, 457 Tarjan, R.E., 23, 54, 67, 118, 122,
134, 139, 179, 191, 194, 195, 220, 227, 408, 525 Tarsi, M., 440 Tay, E.G., 69, 71–73, 79 Teo, K., 328 Tesman, B., 560 Tewes, M., 250, 263, 306, 575, 587 Thomas, R., 560, 563, 566

Thomason, A., 322, 325, 640 Thomass´e, S., 235, 322–324, 637 Thomassen, C., 63, 64, 76, 78, 242,
248, 272, 274, 277, 284, 293, 295, 297, 299, 300, 307, 310, 312, 314, 317, 319–321, 326, 389, 393, 395, 480, 482, 484–488, 491, 498, 501, 513, 520, 524, 546, 547, 552, 553, 560, 566, 568, 579–582, 584, 586, 618, 662 Thorup, M., 54 Thurimella, R., 402, 404, 406 Tian, F., 309 Tian, S.L., 76 Tillson, T.W., 318 Timischl, W., 591 Tindell, R., 23, 350 Toft, B., 434, 440 Tokura, N., 369 Toledano Laredo, V., 422 Tollis, I.G., 191, 192, 220 Tong, L.D., 275 Toueg, S., 59 Trotter, T., 275 Tutte, W.T., 436, 438, 498, 502 Tuza, Z., 317, 434, 591, 612, 614
Ullman, J.D., 28, 178 Urrutia, J., 422, 425
Valdes, J., 191, 194, 195 van de Velde, S.L., 83 Veblen, O., 318 Veinott, A.F., 565 Venkataraman, K. N., 93 Viennot, L., 416 Villon, P., 83, 86 Vince, A., 432 Vitaver, L.M., 433 Voigt, M., 612, 614 Volkmann, L., 23, 41, 202, 208–213,
228, 250, 263, 277, 289–292, 303–306, 327, 390, 571, 572, 574, 575 von Neumann, J., 648, 676
Wang, C., 559 Wang, H., 328 Wang, J.Z., 327 Warshall, S., 58 Wegner, E., 593 Welzl, E., 657–659

West, D.B., 92, 187, 217, 218, 226, 242
Wigderson, A., 354 Williamson D., 561 Wilson, R.J., 21 Winograd, S., 177, 549 Witte, D., 582 Woeginger, G.J., 83, 84, 86, 229, 657,
659 Woodall, D.R., 242, 591, 651 Wu, Z.S., 309 Wunderlich H.J., 551 Wyllie, J., 476, 482, 505, 508
Xu, J.M., 390 Xu, Y., 71, 79
Yamada, H., 307 Yannakakis, M., 143, 548, 567 Yao, T., 625 Yebra, J.L.A., 59, 184, 188 Yeo, A., 76, 79, 81, 83, 86, 87,
143, 145, 146, 229–233, 244, 247, 250, 252, 259, 261–263,

Author Index 729
275, 279, 307, 315–317, 327, 330–338, 341, 392, 575, 584, 587, 595, 601, 612, 617, 619, 622, 625, 629, 631, 635, 636, 646, 675 Young, N., 403, 404 Younger, D.H., 399, 440, 559 Youngs, D.A., 434 Yuster, R., 548–550
Zadeh, N., 116 Zamﬁrescu, C.M., 217 Zhang, C.Q., 309, 311, 319 Zhang, K.-M., 278, 327, 341, 625 Zhao, L.-C., 243, 277 Zhou, G., 278, 625 Zhou, H.S., 580, 661 Zhu, X., 61 Zhu, X.D., 658, 661 Ziegler, G., 394, 652 Zna´m, S., 59, 60 Zverovich, A., 83, 338 Zwick, U., 548–550

Subject Index

abelian group, 435
acyclic digraph, 13, 52, 89, 90, 122, 175, 176, 178, 191, 214, 227, 235, 236, 258, 276, 284, 293, 334, 341, 369, 370, 403, 408, 432, 482–485, 508, 638, 649, 662, 676, 677
acyclic independence number, 662
acyclic ordering, 13, 175, 176, 179, 285, 291, 638
unique, 39
acyclic ordering of strong components, 17
acyclic orientation, 466
acyclic spanning subdigraph, 549
acyclic subdigraph, 556
acyclic subdigraph problem, 43, 555, 585
A´ da´m’s conjecture, 582
ADC problem, 617
adjacency list, 30
adjacency list representation, 30, 43
adjacency matrix, 30
adjacency matrix representation, 29
adjacent vertices, 2, 18
admissible network with respect to primal/dual solutions, 151
admissible pair, 357
algorithms and their complexity, 29– 32
all trail problem, 510
almost all, 275
almost balanced orientation, 468
almost regular digraph, 319
almost transitive tournament, 320
alternating cycle in a 2-edge-coloured graph, 617
alternating cycle in an arc-coloured directed multigraph, 623
alternating cycle subgraph
irreducible, 609
alternating cycle through a pair of vertices, 590
alternating directed trail, 618
alternating Hamilton cycle, 603, 604, 606, 607

alternating Hamilton cycle in a 2edge-coloured complete bipartite multigraph, 603
alternating Hamilton cycle problem in 2-edge-coloured graphs, 590
alternating Hamilton cycles in genetics, 630–634
alternating Hamilton path, 605 alternating trail in a 2-edge-coloured
multigraph, 590 alternating-pancyclic 2-edge-colou-
red multigraph, 591 anti-directed cycle, 386, 405 anti-directed path, 321 anti-directed trail, 386
sink of, 386 source of, 386 antichain of a partial order, 236 antichain of family of sets, 67 application of ﬂows, 137–158, 236,
270, 286, 341, 346, 353–355, 364, 404, 408, 409, 411, 444, 446, 469, 470, 526 approximation algorithm, 402–404, 556 feedback arc set problem, 557 for MSSS problem, 403 f (n)-approximation algorithm, 557 arborescence, 474 arc, 2 k-critical, 371, 387 backward with respect to an ordering, 555 cost, 6 forward with respect to an ordering, 555 head, 2 leaving a set, 344 of a hypertournament, 625 ordinary, 317 tail, 2 tight, 452 weight, 6 arc reversal, 6 eﬀect on vertex-strong connectivity, 376–379 semicomplete digraph, 377

732 Subject Index
increasing arc-strong connectivity, 379, 456
partial, 428 tournament, 379 versus augmentation, 377 arc space of a directed graph, 544 arc-k-cyclic, 309 arc-3-cyclic tournament, 309 arc-disjoint hamiltonian path
and cycle, 320 2-arc-coloured digraph, 547 arc-coloured directed multigraph,
617–625 2-arc-coloured tournament, 621 k-arc-cyclic, 474 2-arc-cyclic
locally tournament digraph, 491 semicomplete digraph, 490 arc-disjoint (s, t)-paths, 351 (x, y),-(y, z)-paths, 517 branchings, 355 cycles, 12 hamiltonian cycles, 318 hamiltonian path and hamil-
tonian cycle, 320 paths, 12, 346 arc-disjoint (t1, t2)-linking problem,
507 arc-disjoint k-path problem, 505–519 arc-disjoint 2-path problem, 520
semicomplete digraphs, 517 arc-disjoint branchings, 499–503, 538 arc-disjoint in- and out-branchings,
519–525 eﬀect of arc-strong connectivity,
524, 525 polynomial algorithm for tour-
naments, 523 root s adjacent to all of V (D) −
s, 521 tournaments, 522 k-arc-disjoint out-branchings orienting a graph to have, 470 orienting a mixed graph to have,
470 arc-disjoint paths, 474, 505–519
acyclic digraphs, 508 eulerian directed multigraphs,
509–515 generalizations of tournaments,
515–519 arc-induced subdigraph, 5

arc-locally tournament digraph, 277 arc-pancyclic digraph, 309–312
locally tournament digraph, 310 regular tournament, 309 tournament, 309 k-(S, T )-arc-strong, 374 k-arc-strong, 17 arc-strong connectivity, 17, 343–411 algorithms, 353 certiﬁcate, 406 versus minimum degree, 390 arc-strong connectivity augmenta-
tion algorithm, 363 k-arc-strong in V , 357 k-arc-strong orientation
converting between two orientations, 469
of a mixed graph, 470 arms of chromosome, 630 ASP digraph, see arc series-parallel
digraph assignment neighbourhood, 85 assignment problem, 147–158
complexity, 154 AT-minimal, 513 AT-problem, 510 augmenting, 388
(S, T )-arc-strong connectivity, 374
algorithm for, 374 (s, t)-ﬂow along a path, 109 arc-strong connectivity, 360–365
with vertex-weights, 364 with weights, 364 connectivity of a graph, 388 set of arcs, 360 strong connectivity, 365 by one, 369 strong connectivity optimally algorithm for, 368 successive arc-connectivity aug-
mentation property, 365 the number of arc-disjoint out-
branchings from a root s, 408, 526, 534 at minimum cost, 540 vertex-strong connectivity of acyclic tournaments, 408 of an acyclic digraph, 369 of an in-branching, 369 semicomplete digraphs, 370 tournaments, 370 augmenting cycle, 131

augmenting path, 109 capacity of, 109 maximum capacity, 164
augmenting path with respect to a matching, 600
augmenting set of arcs, 377 automorphism of a digraph, 337 average cost of a hamiltonian cycle,
337
backward arc on an augmenting path, 109
backward arc with respect to an ordering, 14, 555, 672
backward length of an ordering, 643 backward optimal ordering, 643, 646 bad vertex with respect to a local me-
dian order, 639 balance vector of a ﬂow, 96, 436 balance vector of a network, 96 balanced edge, 419 Balcer-Veinott algorithm, 565, 586 base of a matroid, 663 BB-correspondence, 602 BD-correspondence, 602 Bellman-Ford-Moore algorithm, 55–
58, 90 BFS, see also breadth-ﬁrst search BFS tree, 82 BFS tree from a root s, 51 bi-submodular function, 411 biorientation of a mixed graph, 23 bipartite, 657 bipartite digraph, see also semicom-
plete bipartite digraph, 25 versus bipartite 2-edge-coloured
graph, 602 bipartite graph, 25, 415, 419
matching, 137 maximum matching, 137 perfect matching, 140, 143 regular, 167 vertex cover in, 139 bipartite representation, 25, 143, 405,
411 bipartite tournament, see also semi-
complete bipartite digraph, 27, 63, 64, 68, 251, 289, 326, 340, 432, 605 bivalent digraph, 563 block, 426 (n1, . . . , np)-block-triangular structure, 221

Subject Index 733
blocking ﬂow, 116 boolean matrix multiplication, 548 boolean multiplication, 36 boolean variable, 35 branching, 19 branchings
arc-disjoint, 355, 499–503 arc-disjoint in- and out-
branchings, 519–525 minimum cost branchings, 525–
533 breadth-ﬁrst search, 50–52 bridge of a graph, 19, 272, 350 bridgeless graph, 597, 634 buildup algorithm for minimum cost
ﬂows, 135, 270 buildup theorem for minimum cost
ﬂows, 135 C-bypass, 237
Caccetta-Ha¨ggkvist conjecture, 578 cactus, 426 Camion’s theorem, 16, 238 capacity
of an (s, t)-cut, 108 of an arc, 95 of an augmenting path, 109 Cartesian product of digraphs, 9, 275 Cartesian product of sets, 2 catch digraph, 424 certiﬁcate for k-(arc)-strong connectivity,
402–407 for an instance of a decision
problem, 33 for strong connectivity, 349
via contraction, 403 for vertex-strong connectivity,
404 chain of a partial order, 236 Chinese postman problem, 141 chord of a subdigraph, 5 chordal graph, 217, 414, 427 chromatic index, 652 chromatic number of a (di)graph, 22,
433, 650 chromosome arrangement, 630 circuit axioms for a matroid, 678 circuit matroid, 664 circuit of a matroid, 663 circular arc graph, 413, 427 circular digraph, 650 circulation, 101, 435, 449

734 Subject Index
decomposition into cycle ﬂows, 105
feasible, 125 reducing (s, t)-ﬂow to, 101 clause, 35 size, 35 closed pth in-neighbourhood, 46 closed pth out-neighbourhood, 46 closed walk, 10 closeness among polygonal paths, 497 co-N P, 44 co-disjoint sets, 453 co-pair, 69 co-triple, 69 cocircuit of a matroid, 666 cocycle, 545 cocycle space of a digraph, 545 dimension, 545 colour-coding, 549 colour-connected 2-edge-coloured
multigraph, 599, 604, 606 colour-connected pair of vertices, 599 colour-connectivity
checking in polynomial time, 599
colour-isomorphic edge-coloured multigraphs, 591
k-colourable graph, 656 colourful path, 549 colourful set, 549 colouring, 22 k-colouring, 433 colourings and orientations, 433 comparability graph, 414
recognition, 414 comparable elements with respect to
a partial order, 236 complement of a proper circular arc
graph, 420 complement of an undirected graph,
18 complementary cycles, 326
bipartite tournaments, 326 containing prescribed vertices in
tournaments, 327 locally semicomplete digraph,
327 multipartite tournaments, 327 tournaments, 326 complementary slackness condition,
528, 530 complete p-partite graph, 25 complete biorientation, 19, 393, 567

vertex-strong connectivity of, 409
complete biorientation of a mixed graph, 23
complete bipartite graph, 652 complete digraph, 16, 27 complete graph, 25 complete multipartite graph, 25 composition of digraphs, 8 composition of graphs, 22, 420 Conjecture, 244–246, 294, 298, 299,
307, 312, 314, 317, 319–321, 327, 328, 330, 336, 370, 378, 379, 385, 388, 394, 427, 438, 443, 490, 491, 512, 524, 525, 553, 612, 614, 637, 640, 659, 663 connected (g, f )-factor, 279 connected component, 19 connected digraph, 19 connected graph, 19 k-connected graph, 19 consecutive-d digraph, 190 consistent cycles, 329 spanning pair of, 329 construction heuristic for TSP, 83 contraction, 229, 513 of a subdigraph, 7 of an arc, 398, 484, 511, 513 of an edge, 355 of cycles, 403 convenient multigraph, 599 converse of a digraph, 201, 382 converse of a directed multigraph, 7 core of a digraph, 657, 660, 677 cost of a path/cycle, 131 of an arc, 6, 95 cover of a family of sets, 2 covering a set by a family of sets, 535 covering by out-arborescences, 503 covering vertices by cycles, 326–330 critical 2-cycle, 397 critical colour with respect to a PC trail, 593 critical kernel-imperfect, 649 critical set, see k-critical set, 535 k-critical set, 357 critical vertex in a digraph, 389 in a tournament, 389 critically k-strong digraph, 389–390 degrees of vertices in, 390

cross-free family, 344 crossing
dicuts, 400 family, 344 crossing G-supermodular function,
448, 461 crossing chords of a cycle, 427 crossing dicuts, 400 crossing family of pairs of sets, 411 crossing pair, 449 crossing paths, 496 crossing submodular function, 449,
455 cubic graph, 467 cubic multigraph, 437 cut, 17 s-cut, 532 (s, t)-cut in a graph, 345 (s, t)-cut in a network, 108
minimum, 109 cut set, 17 (t1, t2)-cut condition, 507 cutset of a matroid, 666 cycle, see also walk, closed, 11
1-maximal, 44 algorithm for ﬁnding a cycle of
prescribed length, 549 alternating, 590 augmenting, 131 chord, 580 disjoint, see disjoint cycles in a
digraph even, 11 even cycle problem, 566 extendable, 308 length, 11 longest, 11 mean cost of a cycle, 134 modulo k, 586 negative, 46 odd, 11 odd through a ﬁxed arc, 586 of length Θ(log n), 548 of length k Modulo p, 565–571 of length 0 (mod q), 570 of minimum mean cost, 134 ordinary, 203 oriented, 19 shortest, 11, 92 through a vertex, 11 k-cycle, 11 ﬁnding one fast, 548 cycle canceling algorithm, 132, 167

Subject Index 735
cycle extendable digraph, 308 almost complete digraph, 308 locally semicomplete, 340 regular tournament, 340 round digraph, 340 weakly, 340
cycle factor, 15, 244, 250–268, 331, 663
complexity of ﬁnding, 145 existence of, 143 good, 254–258 in regular directed multigraph,
168 suﬃcient condition in terms of
independence number, 146 k-cycle factor, 328
with prescribed cycle lengths, 328
2-cycle factor, see complementary cycles
cycle ﬂow, 104 cycle space of a digraph, 544, 584
dimension, 545 strong digraph, 545 cycle space of a tournament, 546 cycle subdigraph, 15 covering a prescribed vertex set,
146, 147 covering speciﬁed arcs, 408 of maximum cardinality, 145 t-cycle subdigraph, 15 cycles avoiding prescribed arcs versus cycles containing pre-
scribed arcs, 317 cyclic connectivity of a 2-edge-
coloured multigraph, 600 cyclic digraph, 330 k-cyclic digraph, 262, 474 cyclically connected digraph, 40 cyclomatic number, 330
Dag, see acyclic digraph k-dangerous set, 468 de Bruijn digraph, 187–190, 307 decision problem, 33 decomposable digraph, 284
connectivity properties of, 391 MSSS problem, 336 Φ-decomposable digraph, 8 decomposition into arc-disjoint hamiltonian cy-
cles, 318

736 Subject Index
↔
of A(Kn) into arc-disjoint hamiltonian cycles, 319
of the arc set of regular tournaments, 319
Φ-decomposition of a digraph, 9 decomposition of a graph into cliques,
420 decreasing subsequence, 234 deﬁciency
of a family of one-way pairs, 367 of a one-way pair, 366 degree of a vertex in a digraph, 4 in a graph, 19 jth degree of a vertex, 591 degree-constrained digraphs and
hamiltonian cycles, 240– 250 degrees digraphs with bounds on degrees, 411 deleting multiple arcs, 6 deletion of a subdigraph from a digraph, 7 of arcs from a digraph, 7 of vertices from a digraph, 7 demand arc, 510 demand directed multigraph, 510 density of a digraph, 580 dependent set of a matroid, 663 depth-ﬁrst search, 172–176 explored vertex, 172 tree arc, 172 unvisited vertex, 172 visiting a vertex, 172 derandomizing, 550 descendant in a DFS tree, 173 DFS, see also depth-ﬁrst search, 179, 180 DFS forest, 173 DFS tree, 173 backward arc, 173 cross arc, 173 descendant of a vertex in, 173 root of, 173 DHM-construction, 607 diameter, 47, 59–74, 79 maximum ﬁnite diameter, 61 minimum in orientation, 63 Moore bound on number of vertices, 59 diameter versus degree, 187

dicut, 398 arc-disjoint, 399 crossing dicuts, 400
diﬀerence between to sets, 1 digraph, 2 digraph corresponding to instance of
2-SAT, 36 Dijkstra’s algorithm, 53–54, 90 dijoin, 398 Dilworth’s theorem, 236 dimension
cocycle space of a digraph, 545 cycle space of a digraph, 545 3-dimensional matching problem, 584 Dinic’s algorithm, 116 for simple networks, 125 on unit capacity networks, 123 Dinitz conjecture, proof using ker-
nels, 652–655 directed cut, see dicut directed dual of a planar digraph,
558, 584 directed graph, see also digraph, 2 directed multigraph, 4 directed pesudograph associated with
a Markov chain, 564 period, 564 directed pseudograph, 4, 553 directed Steiner problem with con-
nectivity constraints, 533 disjoint cycles, 551–563, 586
in digraphs of high minimum out-degree, 552
versus feedback sets, 559 disjoint cycles containing speciﬁed
vertices, 537 disjoint path problem, 475–498
acyclic digraph, 341 disjoint paths, 474 disjoint sets, 1 distance classes from a vertex, 51 distance from a set to another, 47 distance from a vertex to another, 47 distances
acyclic digraphs, 52 algorithms for ﬁnding, 50–59 Bellman-Ford-Moore algorithm,
55–58 Dijkstra’s algorithm, 53–54 in complete biorientations, 54 dominated, 3 dominated pair of vertices, 240 dominates, 3

dominating pair of vertices, 240 domination number of a heuristic for
TSP, 336 dual of a matroid, 665 dual of the restricted primal problem
of transportation problem, 150 dynamic programming, 549
ear composition, 564 ear decomposition, 331, 347, 545
linear algorithm for, 349 non-trivial ear, 348 trivial ear, 348 edge of an undirected graph, 18 2-edge-coloured bipartite multigraph,
602–605 2-edge-coloured complete multi-
graph, 605–611 edge-coloured multigraph, 590 c-edge-coloured multigraph, 590 edge-colouring, 437
of a cubic multigraph, 437 k-edge-connected, 19, 441 k-edge-connected in V , 440 edge-connectivity, 355
algorithm to determine, 355 edge-cover, 403 edge-disjoint 2-path problem, 514 edge-disjoint mixed branchings, 504 edge-disjoint spanning trees, 501 edge-disjoint trees, 538 edge-dominates, 612 Edmonds’ branching theorem, 355,
380, 499–503, 506, 507, 526, 538, 539 generalization of, 500 Edmonds-Giles theorem, 450 electronic circuit design, 551 element of a directed pseudograph, 6 elementary operation, 29 ellipsoid method, 368, 453 embedding of a planar (di)graph in the plane, 219 end-extendable path, 276 end-vertex of a walk, 11 end-vertex of an arc, 2 entering arc, 2 essential set, 374 Euler trail, see eulerian trail properly coloured, 592 Euler’s formula, 220 Euler’s theorem, 21 eulerian arc-coloured directed multigraph, 618, 624

Subject Index 737
eulerian arc-disjoint k-linking problem, 510
eulerian arc-disjoint linking problem, 510
eulerian directed multigraph, see also regular digraph, 12, 21, 135, 141, 159, 261, 360, 407, 509–515, 539, 553
decomposition into cycles, 159 eulerian graph, 442 eulerian multigraph, 440 eulerian orientation of a mixed graph,
447 eulerian subgraph, 437 eulerian trail, 12, 43 even cycle, 11, 25, 430, 617
in a k-regular digraph, 570 oriented graphs with many arcs,
432 even cycle problem, 566 even digraph, 567 even pancyclic, 340 even pancyclic bipartite tournament,
340 even vertex with respect to a cycle,
87 even vertex-pancyclic digraph, 340 extended Φ-digraph, 9 extended locally in-semicomplete di-
graph, 225, 264, 265, 515, 517 extended locally out-semicomplete digraph, 283 extended locally semicomplete digraph, 214, 263–265, 278, 282, 284 extended semicomplete digraph, 28, 195, 214, 236, 251, 252, 256, 258, 282, 287, 299–301, 331–335, 340, 342, 494 hamiltonian cycle, 252 longest cycle, 252 MSSS problem, 332 polynomial algorithm, 333 extended tournament, 282, 286–288, 294, 398 hamiltonian [x, y]-path, 286 algorithm, 287 proof using the structure of, 282 weakly hamiltonian-connected, 287 extension closed class of digraphs, 9 extension of a digraph, 9

738 Subject Index
extension of a graph, 22 extension-closed class of digraphs, 28
face of a plane (di)graph, 219 facial cycle, 484, 557 factor of a digraph, 5 family
(S, T )-independent, 374 cross-free, 344, 381 crossing, 344 intersecting, 344 laminar, 344, 381 family covering a set, 535 family of sets, 2 fan-in, fan-out in eulerian directed
multigraphs, 539 feasibility theorem
for circulations, 126 for crossing submodular ﬂows,
454 for ﬂows, 127 for fully submodular ﬂows, 451 for intersecting submodular
ﬂows, 453 feasible k-commodity ﬂow, 519 feasible ﬂow
with balance vectors within intervals, 164
feasible submodular ﬂow, 449 existence of, 451–454
feedback arc set, 551, 585, 638 feedback arc set problem, 552, 671–
675, 679 δ0(D) ≤ 3, 552 approximation algorithm, 557,
585 line digraph, 552 planar digraph, 557 feedback set ordering (FSO), 642 feedback sets, 551–563 versus (arc)-disjoint cycles, 559 feedback vertex set, 551 feedback vertex set problem, 552 tournament, 552 Fibonacci heap, 54 ﬂow, 96 adding a residual ﬂow, 106 application, see application of
ﬂows arc sum of two ﬂows, 104 augmenting path with respect
to, 109 balance vector of, 96

blocking, 116 circulation, 101 cost of, 97 cycle ﬂow, 104 decomposition into path and cy-
cle ﬂows, 104 diﬀerence between two ﬂows,
107 feasibility theorem, 127 feasible, 97, 125, 164, 444 integer, 96 maximal, 112 maximum, see maximum ﬂow
problem minimum cost, see minimum
cost ﬂow problem netto ﬂow, 97 optimal, 131 path ﬂow, 104 residual network with respect
to, 98 (s, t)-ﬂow, 100
(s, t)-cut, 108 minimum value, 127 reducing general ﬂows to, 100 relation to arc-strong connectiv-
ity in directed multigraphs, 346 value of, 100 Γ -ﬂow, 435 k-ﬂow, 435–440 Zk-ﬂow, 436 ﬂow across a cut, 108 ﬂow decomposition, 104 (s, t)-ﬂow, 108 fast algorithm, 159 ﬂow demand of a cut, 127 Floyd-Warshall algorithm, 58, 177 Ford-Fulkerson algorithm, 110, 155, 354 on real valued instances, 160 forefather, 180 forest, 19 forward arc on an augmenting path, 109 forward arc with respect to an ordering, 555 forward length of an ordering, 643 forward optimal ordering, 643, 646 fragment, 389 Frank’s arc-strong connectivity augmentation algorithm, 363

Frank’s arc-strong connectivity augmentation theorem, 362
Frank’s general orientation theorem, 463
Frank’s orientation theorem, 448 Frank-Fulkerson algorithm, 457, 526–
533 Frank-Jorda´n vertex-strong connec-
tivity augmentation theorem, 368 fraternately orientable graph, see underlying graph, of an intournament digraph fraternately oriented graph, see insemicomplete digraph free matroid, 664 FSO optimal ordering, 642 fully G-supermodular function, 448 fully submodular function, 449
gadget for N P-completeness proof, 476
Gallai-Milgram theorem, 234, 276 Gallai-Roy-Vitaver theorem, 433 game theory, 648 gap of a C-bypass, 248 Gaussian elimination, 221 generalized de Bruijn digraph, 190 generalized matching, 167 generating pair, 217 genetics, 630 geometric random variable, 548 girth, 11, 92, 303, 578–580
in digraphs of high minimum out-degree, 578
global irregularity, 262 good cycle factor, 254–258 good cycle factor theorem, 256 good odd-vertex pairing, 442 good vertex with respect to a local
median order, 639 gossip problem, 80 Gro¨tzsch graph, 466 graph, see also undirected graph, 18 graph representable in a unicyclic
graph, 425 graph Steiner problem, 533 greedy algorithm, 236, 538 greedy algorithm for matroids, 666,
678 greedy base of a matroid, 666 group ﬂow, 435
H-colourable, 656

Subject Index 739
H-colouring, 656 complexity for undirected graphs, 657
H-colouring problem, 656 Ha¨ggkvist’s transformation of a di-
graph to a 2-edge-coloured graph, 590 half-duplex gossip problem, 81 Hall’s theorem, 140, 446, 469 Hamilton cycle, see hamiltonian cycle Hamilton cycle problem, 33, 179, 364 Hamilton path, see hamiltonian path Hamilton walk, see hamiltonian walk hamiltonian (x, y)-path locally semicomplete digraph, 294 polynomial algorithm for semicomplete digraphs, 295 semicomplete digraph, 293 hamiltonian [x, y]-path algorithm for extended tournaments, 287 extended tournament, 286 in tournament, 284 locally semicomplete digraph, 289, 291 hamiltonian connected, 292–299 almost complete digraph, 294 locally semicomplete digraph, 294 semicomplete digraph, 293 hamiltonian cycle, 12, 82, 143, 177, 202, 227, 237, 238, 264, 265, 267, 275, 277, 300–302, 306, 309–321, 329–333, 335, 337, 339, 341, 380, 663 almost acyclic digraph, 341 alternating in 2-edge-coloured multigraph, 590 arc-disjoint hamiltonian cycles, 318 avoiding k − 1 arcs in k-strong tournament, 315 avoiding arcs in 2-cycles, 317 avoiding arcs in cliques in tournaments, 315 avoiding prescribed arcs, 314– 318 decomposable digraph, 335 in almost semicomplete digraph, 312

740 Subject Index
in semicomplete bipartite digraph, 42
multipartite tournament, 315 necessary conditions, 229–233 power of, 319 quasi-transitive digraph, 265–
268, 333 regular semicomplete multipar-
tite digraph, 261 semicomplete multipartite di-
graph, 250–263 suﬃcient conditions in terms of
degrees, 240–250 through a ﬁxed arc in a semi-
complete digraph, 312 through a prescribed set of arcs,
314 through a set of arcs arc in a
semicomplete digraph, 312 hamiltonian cycle in undirected
graph, 245 hamiltonian digraph, 12 hamiltonian path, 12, 49, 143, 207,
227, 238, 239, 251, 266, 277, 278, 282–299, 304, 318–321, 330, 339, 663 alternating in 2-edge-coloured multigraph, 590 between two prescribed vertices, 284 in a tournament, 30 in semicomplete bipartite digraph, 42 one end vertex prescribed, 282– 284 oriented, 321 hamiltonian problem, 297 hamiltonian walk, 12 Havet-Thomass´e theorem, 322 k-HCA problem, 312, 313 for highly connected tournaments, 314 head of a one-way pair, 366 of and arc, 2 heaviest k-path subdigraph, 268 height function ﬁnding a minimum cut via, 161 height function with respect to a preﬂow, 118 hereditary set of digraphs, 215 heuristic, 336 for TSP, 336

heuristics for N P-hard problems, 336, 671–675
Hoﬀman’s circulation theorem, 126 homomorphic digraphs, 656 homomorphism, 656–661
to a directed cycle, 658 to a directed path, 657 to a semicomplete bipartite di-
graph, 659 to a semicomplete digraph, 659 to an oriented cycle, 658 to an oriented path, 657 to an oriented tree, 659 HPS-problem, 269 hypergraph, 24, 63, 570 2-colourable, 25 2-colouring of, 25 edge of, 24 order of, 24 rank of, 24 uniform, 25 vertex of, 24 hypertournament, 625–630 arc, 625 cycle in, 625 hamiltonian path/cycle, 626,
629 out-degree of a vertex, 626 out-degree sequence, 626 path in, 625 strong, 626
immersion of one 2-regular directed multigraph in another, 515
implication class, 416, 419, 420 in-arborescence, 474 in-branching, 19, 239
minimum cost, 404 in-critical set, see k-in-critical set k-in-critical set, 357, 381 in-degree of a vertex, 4 in-generator of a digraph, 323 in-neighbour, 4 in-neighbourhood, 4 pth in-neighbourhood, 46
closed, 46 open, 46 in-path, 322 in-path-mergeable digraph, 200, 225 in-pseudodegree of a vertex, 4 in-radius, 47 in-singular vertex with respect to a
cycle, 252 in-tight set, 371

incident to an arc, 3 incomparable elements with respect
to a partial order, 236 increasing capacity of arcs to increase
rooted arc-connectivity, 541 increasing rooted arc-strong connectivity by adding new arcs, 534–536 increasing subsequence, 234 independence in digraphs, 662 independence number, 22, 225, 234, 262, 276 eﬀect on cycle factors, 329 independence oracle for a matroid, 526, 667 independent arcs (edges), 22 independent set, 43, 423 independent set of a matroid, 663 independent set problem, 43, 662 independent vertices, 22 index of a pair of alternating trails, 594 indicator, 660 indicator construction, 660 induced subdigraph, 5 initial strong component, 17 initial vertex of a walk, 11 inserting one path into another, 246 insertion of a vertex into a cycle, 85 instance of a problem, 33 integer multicommodity ﬂow problem, 519 integrality theorem for maximum ﬂows, 112 Intel ∆-prototype, 81 intercyclic digraph, 561 intermediate strong component, 17 internally disjoint (s, t)-paths, 351 internally disjoint paths, 12, 407, 474 intersecting G-supermodular function, 448 intersecting family, 344, 527 covering all members by arcs, 527–533 intersecting pair, 449 intersecting submodular function, 449 intersection digraph, 217 intersection graph of a family of sets, 424

Subject Index 741
of a set of subgraphs of a graph, 600
intersection number of a digraph, 217, 226
intersection of digraphs, 177 interval digraph, 217 interval graph, 218 interval of an oriented path, 322
length, 322 2-irreducible instance of k-ST prob-
lem, 512 irreducible alternating cycle sub-
graph, 609 isomorphic directed pseudographs, 7 isomorphic graphs, 19 isomorphism, 7 iterated line digraphs, 187
Jordan curve theorem, 496
Ko¨nig’s theorem, 139 Kautz digraph, 189 Kelly’s conjecture, 319 kernel of a digraph, 648–651 (k, l)-kernel, 648 kernel-imperfect digraph, 649 kernel-perfect digraph, 649, 653 kernel-solvable graph, 650 king, 74–78
k-king, 42 r-king, 48 2-king in a hypertournament,
636 2-king in a multipartite tourna-
ment, 93 2-kings in tournaments, 74 3-kings in quasi-transitive di-
graphs, 78 4-kings in semicomplete multi-
partite digraphs, 75 Kruskal’s algorithm for minimum
spanning trees, 525, 667 Kuratovski’s theorem, 220
labelled digraph, 7 labelling algorithm for maximum
ﬂow, 111 laminar family, 344, 381
maximum size of, 541 Landau’s theorem, 444, 469, 626 large packet radio network, 187 largest transitive subtournament in a
tournament, 662 Las Vegas algorithm, 354

742 Subject Index
Latin square, 652 layer in a network, 114 layered network, 114 leaving arc, 2 legal ordering, see max-back ordering length
of a walk, 11 of a cycle, 11 of a path, 11 of an arc w.r.t. an ordering, 643 lexicographic 2-colouring, 417, 419 lexicographically smaller vertex, 417 line digraph, 182–187, 307, 648 feedback arc set problem, 552 iterated, 187 recognition, 184 line graph, 427, 651 linear independence, 544 linear ordering problem, 556 2-approximation, 556 linear programming, 89, 113, 147,
149, 158, 450, 453, 457, 527 linear time searchable exponential
neighbourhoods for the TSP, 84 k-linked, see also k-path problem k-linked digraph, 474, 476, 480–498, 537 k-linking, 474 linking from one k-set to another, 561 linking principle, 446, 459 list chromatic index, 655 list colouring, 653 list colouring conjecture, 653 list edge-colouring, 649, 652–655 literal, 35 local arc-strong connectivity, 345 local edge-connectivity, 442 local in-tournament, see locally intournament digraph local irregularity, 262 local median order, 638 local out-tournament, see locally outtournament digraph local tournament, see locally tournament digraph local transitive tournament, see round local tournament local vertex-strong connectivity, 345 locally in-semicomplete digraph, 199–201, 224, 225, 238, 239, 276, 296, 306, 422–427 strong decomposition, 201

structure of non-strong, 201 locally in-tournament digraph, 199 locally optimal solution of an opti-
mization problem, 672 locally out-semicomplete digraph,
199–201, 225, 240, 279 locally out-tournament digraph, 199 locally semicomplete digraph, 199,
202–214, 239, 289–292, 294, 299, 303–306, 327, 339, 340, 392, 395, 410, 417, 418, 421, 475, 488–490, 522, 524, 537 classiﬁcation theorem, 213 extended hamiltonian path with one end vertex speciﬁed, 282 generalization, 241 hamiltonian (x, y)-path, 294 hamiltonian [x, y]-path, 289, 291 hamiltonian connected, 294 independence number, 225 minimal separating set in, 410 non-round decomposable, 212 orientation of, 395 round decomposable, 207 semicomplete decomposition, 209 structure of non-strong, 206 weakly hamiltonian-connected, 292 locally tournament digraph, see also locally semicomplete digraph, 199, 294, 303, 304, 306, 310, 395, 417–419, 421, 427–429, 465, 491 characterization through orientations, 420 round, 206 longest (x, y)-path problem semicomplete digraph, 298 longest [x, y]-path problem semicomplete digraph, 298 longest alternating cycle, 606 longest alternating cycle in 2-edgecoloured complete bipartite multigraph, 604 longest cycle, 264 extended semicomplete digraph, 332, 334 relation to chromatic number, 434 longest cycle problem, 195 longest path, 239, 265

relation to chromatic number, 433
longest path problem, 195 acyclic digraph, 89 weighted acyclic digraph, 53
loop, 4 Lova´sz’s local lemma, 569 Lova´sz’s splitting theorem, 440, 468 lower bound
on an arc, 95 removing from a network, 99 Lucchesi-Younger theorem, 399 proof using submodular ﬂows,
457
Mader’s directed splitting theorem, 358
main (n1, . . . , np)-blocks, 221 majority digraph of a hypertourna-
ment, 628 Marcus’ theorem, 581 Markov chain, 563 matching, 22, 442
perfect, 22 matching diagram digraph, 217 matrix multiplication, 177 matroid, 525, 663–671
base, 663 circuit, 663 cocircuit, 666 cutset, 666 dependent set, 663 dual, 665 examples of, 664 fast algorithm, 667 greedy algorithm, 666, 678 greedy base, 666 independence oracle, 667 independent set, 663 intersection, 669 optimal base, 666 rank, 664 union, 668 matroid intersection, 457 matroid intersection problem, 525,
669, 679 k-matroid intersection problem, 670 matroid partition problem, 668, 678 MAX-2-SAT, 38, 44 Max-ﬂow Min-cut theorem, 109
application to vertex cover in bipartite graphs, 139
relation to Menger’s theorem, 351

Subject Index 743
1-maximal cycle, 44 maximal ﬂow, 112 maximal hamiltonian arc-critical
subdigraph, 432 maximal independent subset of a set
in a matroid, 664 maximal with respect to property P,
2 maximum adjacency ordering, 355
determining edge-connectivity via, 356
maximum capacity augmenting path method, 164
maximum ﬁnite diameter orientation, 61
maximum ﬂow algorithms, 110–125 capacity scaling algorithm, 162 Dinic’s algorithm, 116 for unit capacity networks, 123 Ford-Fulkerson algorithm, 110 maximum capacity augmenting path method, 164 MKM algorithm, 161 on simple networks, 125 preﬂow push algorithm, 119 shortest augmenting paths, 114
maximum ﬂow problem, 108–125 and arc-strong connectivity, 353 in unit capacity networks, 123 integrality theorem, 112 re-optimizing after small perturbation, 161
maximum in-degree of a digraph, 5 maximum matching in bipartite
graphs, 137 algorithm, 138 reduction to ﬂow problem, 137 maximum monochromatic degree,
591 maximum out-degree of a digraph, 5 maximum semi-degree of a digraph, 5 maximum with respect to property
P, 2 mean cost of a cycle, 134 median order, 638 member of a family of digraphs, 7 member of a family of sets, 344 Menger’s theorem, 147, 293, 297,
351–354, 356, 360, 365, 372, 374, 384, 396, 408, 409, 441, 442, 456, 474, 499–501, 517, 518, 537, 538, 586 applied to sets of vertices, 408

744 Subject Index
reﬁnement of, 408 relation to the Max-ﬂow Min-
cut theorem, 408 Mergesort, 32 merging paths in a digraph, see path-
mergaeble digraph meta-heuristic, 673 Meyniel set, 243 Min-ﬂow Max-demand theorem, 127 minimal (x, y)-path, 11 minimal vertex series-parallel di-
graphs, 191 minimally k-arc-strong directed
multigraph, 379–384 characterization of, 384 degree of vertices in, 381 number of arcs in, 380 minimally k-edge-connected multi-
graph, 441, 468 minimally k-strong digraph, 384–388
degrees of vertices in, 387, 388 minimizing a submodular function,
453, 455, 470 minimum
separator, 345 minimum (s, t)-cut in a network
structure of, 159, 164 minimum cost
in-branching, 404 out-branching, 404 submodular ﬂow, 454 minimum cost branching problem,
525 minimum cost cover of directed cuts,
459 minimum cost ﬂow, see minimum
cost ﬂow problem minimum cost ﬂow problem, 128–137
assignment problem, see assignment problem
buildup algorithm, 135 complexity of, 136
buildup theorem, 135 cycle canceling algorithm, 132 integrality theorem, 132 strongly polynomial algorithm,
134 transportation problem, see
transportation problem minimum cost ﬂows
application to Chinese postman problem, 141

applied to a branching problem, 408
characterization, 132 minimum cost out-branching
min-max formula for, 533 minimum cost submodular ﬂow prob-
lem, 454, 458, 471 minimum covering arborescence
problem, 533 minimum diameter orientation, 63–
74 Cartesian products of graphs, 71 complete multipartite graph, 67 extensions of graphs, 69 minimum diameter versus degree,
187 minimum dijoin, 459 minimum equivalent subdigraph,
179, 403 minimum feedback arc set, 638 minimum ﬂow, 127 minimum in-degree of a digraph, 4 minimum out-degree of a digraph, 4 minimum path factor, 227 minimum path factor in acyclic di-
graph application, 235 minimum path factor problem, 235 minimum semi-degree of a digraph, 5 minimum spanning strong subgraph
problem, see MSSS problem minimum spanning tree, 525, 540 mixed branchings, 504 edge-disjoint, 504 mixed graph, 22, 447 arc of, 23 biorientation of, 23 bridge of, 23 complete biorientation of, 23 connected, 23 edge of, 23 orientation of, 23, 408 strong, 23 mixed multigraph, 504 mixed out-branching, 504 modular function, 443 monochromatic complete subgraph, 561 monochromatic subdigraph, 547 monochromatic triangle, 612 Monte-Carlo algorithm, 354 Moon’s theorem, 16

Moore bound, 59 MSSS problem, 330–336, 402, 581
approximation algorithm for, 403
decomposable digraph, 336 extended semicomplete digraph,
332 lower bound, 331, 333 polynomial algorithm
extended semicomplete digraph, 333
quasi-transitive digraph, 333 quasi-transitive digraph, 331,
333 semicomplete multipartite di-
graph, 336 multi-inserting one path into an-
other, 246 multi-insertion partition of a path,
246 multi-insertion technique, 246 multicommodity ﬂow, 518 multigraph, 18 multipartite completion, 647 multipartite tournament, see also
semicomplete multipartite digraph, 27, 68, 69, 75, 76, 93, 252, 274, 277, 278, 307, 315, 327, 572 multiple arcs, 3 multiset, 2 mutual length of an ordering, 643 mutual optimal ordering, 643 MVSP digraph, see minimal vertex serie-parallel digraph
Nash-Williams’ orientation theorem, 441
extension to mixed graphs, 459 proof using submodular ﬂows,
455 Nash-Williams’ strong orientation
theorem, 441 proof for eulerian multigraphs,
468 negation, 35 negative cycle, 46
detection, 56 eﬀect on shortest path problems,
49 in residual network, 132 negative score of a vertex, 641 neighbour, 4

Subject Index 745
neighbourhood, 4, 19 neighbourhood digraph of a neigh-
bourhood structure, 86 polynomially searchable, 86 neighbourhood of a solution, 672 neighbourhood structure for TSP, 83 neighbouring solutions, 672 nested interval graph, 424 net length of an oriented cycle, 658 network, 95 augmenting path in, 109 balance vector of, 96 balanced vertex in, 97 capacity of arcs, 95 circulation in, 101 cost of arcs, 95 ﬂow in, 96 layered, 114 lower bound on arcs, 95 maximum ﬂow in, 108 residual with respect to a ﬂow,
98 simple, 124 sink vertex in, 97 source vertex in, 97 unit capacity, 122 with bounds/costs on vertices,
102 network design, 187 network representation, 346, 351 non-monochromatic directed cycle,
547 non-monochromatic oriented cycle,
547 normal biorientation, 650 nowhere-zero k-ﬂow, see k-ﬂow N P-complete problem, 32, 34, 49, 63,
143, 146, 179, 278, 282, 284, 292, 312, 313, 316, 317, 341, 350, 434, 470, 473, 475, 476, 480, 494, 496, 505, 512, 519, 520, 533, 534, 539, 590, 602, 613, 619, 630, 635, 645, 648, 656–661, 677 N P-hard problem, 34, 49, 62–64, 81, 82, 179, 330, 364, 379, 402, 404, 434, 533, 534, 631, 638, 645, 646, 662, 670, 671, 675, 678 N P-hard optimization problem, 34
2-objective optimization problem, 187
obstruction for line digraph, 185

746 Subject Index
odd chain, 291 locally semicomplete digraph, 291
odd cycle, 11, 25 odd cycle through a ﬁxed arc, 586 (k, p)-odd digraph, 568 odd necklace, 466 odd orientation, 430
strongly connected, 430 odd vertex with respect to a cycle, 87 odd-K4, 430, 466 one-way communication, 81 one-way pair, 366, 385
deﬁciency of, 366 head of, 366 tail of, 366 one-way pairs, 369, 372, 410 family of
subpartition type, 368 independent, 367 independent family of, 368 one-way set of arcs, 217 one-way street problem, 79 O, Ω, Θ-notation, 29 open pth in-neighbourhood, 46 open pth out-neighbourhood, 46 open problem, 83, 238, 265, 274, 287,
311, 314, 316, 318, 321, 326, 328, 376, 397, 404, 430, 433, 443, 480, 482, 505, 520, 522, 571, 595, 611, 613, 621, 624, 650, 652 opposite vertices, 290 1-OPT, 672, 679 optimal augmentation, 360 optimal base of a matroid, 666 optimal ﬂow, 131 optimal linear arrangement problem, 645 optimal submodular ﬂow, 455 optimization problem, 34 order exchange, 593 order of a digraph, 2 order of functions, 29 order reﬂection, 594 ordering the vertices of a digraph of paired comparisons, 640– 648 ordinary arc, 203, 317, 642 ordinary cycle, 203 ordinary path, 203 orientation acyclic, 466

as a quasi-transitive digraph, 414
as a round local tournament, 418
as a transitive digraph, 414 as an in-tournament digraph,
424 eulerian multigraph, 468 odd, 430 of a mixed graph, 447 respecting degree constraints,
443–447 respecting degree constraints on
subsets, 448 strong, 20
of mixed graph, 350 G-orientation, 72 G∗-orientation, 72 S-orientation, 72 S∗-orientation, 73 orientation of a digraph, 24, 79, 224,
225 with high arc-strong connectiv-
ity, 394 with high vertex-strong connec-
tivity, 393, 394 orientation of a graph, see also ori-
entation, 19, 272–274, 315, 350, 413–448, 455–457, 465, 466, 468–471, 502–505, 608, 639, 650, 651, 654, 655, 657–659 maximum ﬁnite diameter, 61 minimum diameter, 63, 81 with high arc-strong connectivity algorithm, 469 with small strong radius, 65 orientation of a locally semicomplete digraph with high strong connectivity, 395 with high vertex-strong connectivity, 395 orientation of a mixed graph, 23, 459– 464 with small diameter, 67 orientation of a mixed multigraph, 408 orientation of a multigraph, 440 oriented cycle, 19 homomorphisms to, 658 oriented forest, 19

oriented graph, 14 oriented hamiltonian cycle in a tour-
nament, 325–326 oriented hamiltonian path, 321–325 oriented hamiltonian path in a tour-
nament ﬁnding a prescribed orientation,
325 oriented independence number, 662 oriented path, 19
interval of, 322 origin of, 322 terminus of, 322 oriented tree, 19, 639 origin of an oriented path, 322 orthogonal rows in a matrix, 183 orthogonal subspaces, 544 out-arborescence, 474, 499 out-branching, 19, 201, 235 arc-disjoint, 408 BFS tree, 51 minimum cost, 404 of shortest paths, 48 out-critical set, see k-out-critical set k-out-critical set, 357 out-degree of a vertex, 4 out-generator of a digraph, 323 out-neighbour, 4 out-neighbourhood, 4 pth out-neighbourhood, 46 closed, 46 open, 46 out-path, 322 out-path-mergeable digraph, 200 out-pseudodegree of a vertex, 4 out-radius, 47 ﬁnite in a weighted digraph, 47 minimizing, 60 out-singular vertex with respect to a
cycle, 252 out-tight set, 371, 372 outer face of a plane (di)graph, 219
P, 33 packing cuts, 398 paired comparison digraph, 640 pancircular digraph, 307
de Bruijn digraph, 307 pancyclic digraph, 299–308, 340
m-pancyclic, 299 de Bruijn digraph, 307 degree conditions, 299 extended semicomplete digraph,
301

Subject Index 747
line digraph, 307 locally in-tournament digraph,
306 locally semicomplete digraph,
306 quasi-transitive digraph, 302 regular semicomplete multipar-
tite digraph, 306 round decomposable digraph,
304 parallel architectures, 187 parallel arcs, 3 parallel composition of digraphs, 191 parallel reduction, 193 partial order, 236 partial reversal, 428 p-partite digraph, 25 p-partite graph, 25 partite sets, 25 partition, 2 path, see also walk, open, 11
algorithm for ﬁnding a path of prescribed length, 549
anti-directed, 321 arc-disjoint, 351, 474 colourful, 549 crossing, 496 even, 11 ﬁnding a colourful path of pre-
scribed length, 549 good reversal, 469 internally disjoint, 474 length, 11 longest, 11 odd, 11 of length Θ(log n), 548 ordinary, 203 oriented, 19 vertex-disjoint, 351, 474 (X, Y )-path, 11 (x, y)-path, 11 [x, y]-path, 11 xy-path, 19 path covering, 334 path covering number, 15, 227, 234,
236, 251, 267 path cycle covering number, 251 path factor, 15, 235, 334
starting at a prescribed vertex, 283
path factor with longest paths, 237 path ﬂow, 104 path mergeable digraph

748 Subject Index
hamiltonian (x, y)-path, 293 k-path problem, 475, 482–498
acyclic digraphs, 536 planar digraphs, 496 2-path problem, 475, 490–494 N P-completeness proof, 476–
480 acyclic digraph, 482, 484 decomposable digraph, 493 generalizations of tournaments,
491–494 quasi-transitive digraph, 493,
494 semicomplete digraph, 490, 491 q-path subdigraph, 15 path-contraction, 229, 301 versus set-contraction, 229 path-cycle covering number, 15, 234,
331 path-cycle factor, 333
with k paths, 145 with minimum number of paths,
145 with prescribed initial/terminal
vertex, 167 q-path-cycle factor, 15 q-path-cycle subdigraph, 15 path-mergeable digraph, 198–199,
224, 237, 238, 276, 293 recognition, 199 (s, t)-paths arc-disjoint, 351 internally disjoint, 351 PC, see also proper coloured PC m-path-cycle subgraph, 590 PC 1-path-cycle subgraph with max-
imum number of vertices, 598 PC cycle subgraph, 590 with maximum number of vertices, 597 PC cycle through a speciﬁed vertex, 598 PC Hamilton path/cycle in Knc , c ≥ 3, 611–617 PC spanning cycle subgraph, 612 PCD, see paired comparison digraph k-perfect family of hash functions, 550 perfect graph, 650 perfect matching, 22, 167, 446, 592, 597, 632, 634

contained in a Hamilton cycle, 603
in a bipartite graph, 140 of minimum weight in a bipar-
tite graph, 147 random, 616 period of a directed pesudograph
associated with a Markov chain, 564 permutation graph, 218 Petersen graph, 438, 467 3-colouring of, 466 5-ﬂow in, 438 even cycle in strong orientation, 466 PFx problem, 284 for totally Φ1-decomposable digraph, 284 planar digraph, 218–220, 227, 407, 473, 484, 495–498, 505, 507, 509, 511, 514, 538 feedback arc set problem, 557 recognition, 220 vertex-strong connectivity of, 407 planar graph, 218 plane (di)graph, 219 pointed set, 424 polygonal curve, 219 polynomial algorithm, 29 polynomial reduction, 34 polynomially searchable neighbourhood for TSP, 84 positive score of a vertex, 641 power of a cycle, 290, 327, 339, 407 connectivity of, 407 power of a digraph, 9 power of a hamilton cycle, 319 power of a matrix kth power of a matrix, 584 power of a path, 339 predecessor of a vertex on a path/cycle, 12 preﬂow, 118, 500 maximum, 164 converting to a maximum ﬂow, 164 preﬂow directed multigraph, 500 preﬂow push algorithm, 119 active vertex, 119 admissible arc, 119 complexity, 120 improving performance of, 160

lifting a vertex, 119 pushing along an arc, 119 saturating push, 120 unsaturating push, 121 using exact distance labels, 160 primal-dual algorithm for the transportation problem,
148–158 problem, 33 proof technique
BB-correspondence, 603 BD-correspondence, 634 colour-coding, 549 contraction, 399 DHM-construction, 607 divide and conquer, 32 gadgets for N P-completeness
proofs, 476, 619, 677 indicators, 660 insertion method, 30 matroid intersection, 457, 679 matroid partition, 678 multi-insertion, 246–250 one-way pairs, 369, 370, 372,
375, 385, 396 probabilistic method, 553, 555,
570, 614–617 random acyclic subdigraph
method, 548 reduction from 3-SAT, 619, 677 reduction to a ﬂow problem, 409 reduction to minimum cost ﬂow
problem, 404 reversing arcs, 396 splitting oﬀ arcs, 362 splitting oﬀ edges, 440 submodular ﬂows, 455–464, 505 uncrossing, 381, 400 using orientations of undirected
graphs, 503 using recursive formulas, 188 using submodularity, 351, 357,
372, 534 using the bipartite representa-
tion of a directed multigraph , 25 vertex splitting procedure, 351 proper backward rank, 643 proper circular arc graph, 413 orientation as a round local tournament, 418 recognition in linear time, 419 proper colouring, 22, 433

Subject Index 749
proper edge-colouring, 652 proper forward rank, 643 proper interval graph, 465 proper mutual rank, 643 proper subset, 2 properly coloured cycle in an edge-
coloured multigraph, 595 properly coloured directed trail, 618 properly coloured Euler trail, 592 properly coloured trail, 590 h-pseudo-hamiltonian directed multi-
graph, 232 pseudo-hamiltonian directed multi-
graph, 232 h-pseudo-hamiltonian walk, 232 pseudo-hamiltonicity
algorithm, 233 pseudo-hamiltonicity number, 232 pseudograph, 18 pseudoregular directed pseudograph,
188, 190
k-quasi-hamiltonian, 230 quasi-hamiltonicity, 230–233
algorithm, 233 quasi-kernel, 648, 651 quasi-transitive digraph, 28, 78, 79,
195–198, 265, 266, 270, 278, 280, 300, 302, 303, 331, 333–335, 340, 342, 397, 414, 416, 417, 493, 494, 524, 539 hamiltonian cycle, 265–268 highly connected orientation of, 397 longest cycle, 271 MSSS problem, 331 recursive characterization, 197 vertex-heaviest paths and cycles, 268–272 quasi-transitive orientation, 414 queue, 51
R´edei’s theorem, 14, 322, 625 radius, 47, 59–61 Ramsey’s theorem, 561 random acyclic subdigraph method,
548 rank of a matroid, 664 re-weighting the arcs of a digraph, 90
eliminating negative arcs, 91 reachable from a vertex, 16 recognition
interval digraphs, 218 line digraph, 184

750 Subject Index
local tournament, 429 path-mergeable digraph, 199 planar digraph, 220 round decomposable locally
semicomplete digraph, 211 round local tournament di-
graphs, 465 totally Φ-decomposable di-
graph, 215 vertex series-parallel digraph,
195 red/blue subgraph of a 2-edge-
coloured multigraph, 590 reduced graph, 419 reducible graph, 419 reduction among ﬂow models, 99 redundant arc of a digraph, 177 reference orientation, 444 regular digraph, 5, 189, 227, 261
arc-disjoint cycles in, 553 immersion, 515 δ0(D)-regular digraph, 5 regular graph, 19 removal of a vertex from a cycle, 85 reorienting arcs, 455 representable in a graph, 424 representation of a digraph, 217 representation of a graph, 413 residual capacity of an arc, 98 residual network, 98 using to update ﬂow, 105 restricted primal problem of transportation problem, 149 retract of a digraph, 657 reversal of a path, 469 reverse of a trail, 591 reversing an arc, 6 reversing arcs, see arc reversal reversing arcs to obtain arc-disjoint
branchings, 471 Robbins’ theorem, 20, 350, 440, 447 root of a branching, 19 root of a DFS tree, 173 round decomposable digraph, see
also locally semicomplete digraph round decomposable locally semicomplete digraph, 207–211 recognition, 211 round decomposition, 207 round digraph, 202–206 s-regular, 580

round labelling, 202 routing problems, 519
2-SAT, 35–38 application to orientability as in-tournaments, 422
3-SAT, 36, 619 reduction to an H-colouring problem, 677
Satisﬁability, see also SAT, 36 satisﬁable boolean expression, 36 saturated arc, 112 scalar product, 544 scaling algorithm for maximum ﬂow,
162 scan register, 551 scheduling jobs on identical ma-
chines, 165 scheduling problems, 191 scheduling reporters, 235 score method, 641 score of a vertex, 444 score sequence, 444 semi-degree of a vertex, 4 semi-partitioncomplete digraph, 263 semicomplete p-partite digraph, see
semicomplete multipartite digraph semicomplete bipartite digraph, 27, 42, 79, 145, 251, 258, 277, 282–284, 327, 341, 603–605, 647, 659, 676, 678 even pancyclic, 340 hamiltonian cycle, 251 hamiltonian path with one end vertex speciﬁed, 282 longest cycle, 252 semicomplete decomposition of a locally semicomplete digraph, 209, 212 semicomplete digraph, 26, 74, 92, 145, 167, 196, 197, 276, 290, 293–298, 306, 311–313, 316–318, 326, 339, 342, 370, 377, 378, 395–397, 410, 411, 486–494, 515, 517, 522, 536, 612, 628, 636, 641–644, 650, 657, 659, 662, 676 2-path problem, 490 critical 2-cycle in, 410 hamiltonian (x, y)-path, 293 polynomial algorithm, 295 hamiltonian connected, 293

highly connected orientation of, 395
semicomplete multipartite digraph, 27, 75–77, 216, 250–252, 255, 256, 258, 259, 261–263, 277–279, 306, 307, 317, 327, 331, 336, 643, 646, 647
‘short’ cycles, 571–574 cycles versus paths, 575–578 hamiltonian cycle, 250–263 hamiltonian path, 251 longest path, 251 MSSS problem, 336 path covering number, 251 regular, 261 relation between longest path
and cycle, 575 separates, see separator separating set, see separator separator, 16
(s, t)-separator, 17 minimum, 345 trivial, 297, 491 (s, t)-separator, 17, 345 sequencing problems, 191 2-serf, 75 series composition of digraphs, 191 series reduction, 193 series-parallel digraph, 191–195 k-set, 2 set-contraction, see contraction Seymour’s second neighbourhood
conjecture, 637 ship loading problem, 129 short cycle in a digraph, 548 shortest cycle, see also girth, 92 shortest path problem, 541
formulated as a minimum cost ﬂow problem, 98
shortest path tree form s, 49 shortest paths
from a vertex s, 49 structure of, 48 k-similar arms of chromosomes, 630 similar size arms of chromosomes, 630 similar vertices, 9 simple network, 124 simplicity preserving augmentations
for rooted arc-connectivity, 541 simulated annealing, 673–675 current acceptance rate, 675 initial acceptance rate, 674

Subject Index 751
parameter tuning, 673 programming project, 679 singular vertex with respect to a cy-
cle, 252 sink
of a network, 97 of an anti-directed trail, 386 vertex with respect to a ﬂow, 97 size of a clause, 35 size of a digraph, 2 solution of an optimization problem,
672 sorting n numbers faster than
Ω(n log n), 54 sorting versus distances in digraphs,
54 source
of a network, 97 of an anti-directed trail, 386 vertex with respect to a ﬂow, 97 spanning strong subgraph, 349 spanning tree, 19 special families of digraphs Φ0, 214, 267, 268, 272 Φ1, 214, 272, 284 Φ2, 214, 267, 268, 272 Ψ , 195, 270 speciﬁc trail problem, 509 Sperner’s lemma, 67 splitting, 357, 468 admissible, 357 complete, 359
for vertex-strong connectivity, 372
ﬁnding an admissible splitting, 409
in eulerian directed multigraphs, 360
in mixed graphs, 360 in undirected graphs, 440 preserving
local arc-strong connectivity, 360
vertices, see vertex splitting procedure
splitting a vertex, 9 splitting oﬀ arcs, 356–365, 384 splitting oﬀ edges, 440 ST-problem, 509 k-ST-problem, 512 stable matching, 654 straight digraph, 465 straight enumeration, 465

752 Subject Index
strictly alternating cycle, 613 k-strong, 16 k-strong augmentation number of a
digraph, 366, 368 strong component, 17, 36, 239
algorithm for ﬁnding, 179 strong component digraph, 17 strong components
application to ﬁnding blocktriangular structure in matrices, 222
strong decomposition of a digraph, 17, 201
strong digraph, 16, 179–182 cycle space of, 545
strong orientation, 20, 350 respecting degree constraints, 447
strong radius, 64 strongly connected, see strong strongly polynomial algorithm
for minimum cost ﬂow, 134 sub-indicator, 660 sub-indicator construction, 660 subdigraph, 5
spanning, see also factor, 5 with prescribed degrees, 142
minimum cost, 142 subdivision, see also subdividing an
arc subdivision of a digraph, 9 subdivision of an arc, 9, 400, 567 submodular ﬂow, 379, 402, 449–464
applications, 455–464 feasible, 449 minimum cost, 454 submodular ﬂow models, 449 submodular ﬂow polyhedron, 450 submodular function, 345 minimizing, 453 submodular proof technique, see
proof technique, submodular submodularity of (s, t)-cuts, 164 of matroid rank functions, 665 subpartition, 2 subpartition lower bound, 368 for arc-strong connectivity, 361 subpartition lower bound for vertexstrong connectivity, 366 subpath, 12 subtree intersection digraph, 217

successive arc-connectivity augmentation property, 365
successor of a vertex on a path/cycle, 12
sum of boolean variables, 35 superdigraph, 5 supermodular function, 443, 450 G-supermodular function, 448 switch, 476 (e, f )-switch, 632 symmetric digraph, 19 symmetric function, 448
tail of a one-way pair, 366 of an arc, 2
TDI system, 528 telecommunications, 519, 533 terminal strong component, 17 terminal vertex of a walk, 11 terminals of a trail in eulerian di-
rected multigraph, 509 terminus of an oriented path, 322 the hamiltonian algorithm, 297 Thomassen’s even cycle theorem, 568 tight arc, 452, 530 tight set, 352, 371, 452, 527, 529 Tillson’s decomposition theorem, 318 time complexity of an algorithm, 29 topological obstruction for disjoint
paths, 495 topological sorting, see acyclic order-
ing total Φ-decomposition of a digraph, 9 totally Φ-decomposable digraph, 9,
195, 214–216, 272 hamiltonian cycle, 268 hamiltonian path, 268 recognition, 215 totally unimodular matrix, 114 tournament, see also semicomplete
digraph, 14, 30, 41, 64, 74– 76, 92, 167, 284–286, 293, 298, 308, 309, 312, 314–316, 319–328, 339–342, 370, 378, 389, 393, 395, 396, 407, 408, 410, 411, 444, 466, 475, 486, 490, 492, 515, 521–524, 537, 621, 637–641, 651, 662, 675, 677 feedback vertex set problem, 552 hamiltonian [x, y]-path, 284 weakly hamiltonian-connected, 284

traceable, see also hamiltonian path, 12, 14, 30, 242, 329
trail, 11 alternating, 590
M -trail, 592 transitive closure, 177, 178
relation to matrix multiplication, 177
versus transitive reduction, 178 transitive digraph, 28, 176, 197, 225 transitive reduction, 177, 191 transitive tournament, 41, 44, 560 transitive triple, 41, 546 transportation problem, 148–158
primal-dual algorithm, 153 transputer-based machine, 81 travelling salesman problem, see TSP
problem tree, 19
spanning, 19 tree solution to a ﬂow problem, 169 triangular digraph, 300, 302 trivial (s, t)-separator, 297 trivial separator, 491 truth assignment, 35 TSP problem, 33, 82–89, 336–338
assignment neighbourhood, 85 heuristic
domination number, 336 linear time searchable exponen-
tial neighbourhoods, 84 neighbourhood digraph, 86 polynomially searchable neigh-
bourhoods, 84 pyramidal neighbourhood, 86 vertex insertion algorithm, 337 k-tuple, 483 Tutte’s 5-ﬂow conjecture, 438 structure of a minimal coun-
terexample, 438, 468 two-terminal parallel composition,
191 two-terminal series composition, 191
unbalanced edge, 419 uncapacitated facility location prob-
lem, 541 uncrossing technique, 381, 400 underlying graph
edge-connectivity of, 393 in-semicomplete digraph, 424 locally in-semicomplete digraph,
422–427

Subject Index 753
locally in-tournament digraph recognition, 422
locally semicomplete digraph, 417–422
non-bipartite, 421 quasi-transitive digraph, 414–
417 transitive digraph, 414 underlying graph of a digraph, see
also underlying graph, 19, 173, 196–198, 216, 224, 225, 237, 316, 330, 350, 393, 394, 401, 413–430, 433, 434, 464, 465, 485, 497, 502, 514, 525, 526, 653, 670 undirected graph, 18 non-critical edge of, 388 unicyclic graph, 425 uniform matroid, 664 uniform PCD corresponding to a digraph, 641 unilateral digraph, 17 union of digraphs, 10, 178 union of matroids, 668 unique alternating cycle, 621 unique trail problem, 510 unit capacity network, 122 universal set, 217 upward embedding, 224 UT-minimal instance, 511 UT-problem, 510
value of a ﬂow, 100 value of a solution, 672 vector space, 544 vertex, 2 vertex cover of a bipartite graph, 139 vertex even pancyclic digraph
bipartite tournament, 340 vertex insertion algorithm for TSP,
337 vertex series-parallel digraph, 191
recognition algorithm, 195 vertex splitting, 351 vertex splitting procedure, 102, 351,
374, 551 vertex-alternating pancyclic
2-edge-coloured complete bipartite multigraph, 604
vertex-alternating-pancyclic 2-edge-coloured complete multigraph, 607 2-edge-coloured multigraph, 591
vertex-arc incidence matrix, 113

754 Subject Index
vertex-heaviest cycle, 268 vertex-pancyclic digraph, 299
extended semicomplete digraph, 301
locally semicomplete digraph, 306
quasi-transitive digraph, 302 round decomposable digraph,
304 vertex-m-pancyclic, 299 vertex-strong connectivity, see strong
connectivity, 16, 343–411 algorithms, 353 certiﬁcate, 404 of complete biorientations, 409 of extensions of digraphs, 391 of special classes of digraphs,
391 reduction to (S, T )-arc-strong
connectivity, 373 vertex-weighted directed pseudo-
graph, 6 Volkmann’s meta-conjecture, 327 VSP digraph, see vertex series-
parallel digraph
walk, 10 arc-disjoint walks, 12 Chinese postman walk, 141 closed, 11 disjoint walks, 12

even, 11 internally disjoint walks, 12 length, 11 odd, 11 open, 11 (x, y)-walk, 10 weak-k-linking, 474 k-weak-double-cycle, 567, 586 weakly k-linked digraph, 505, 506 weakly cycle extendable, 340 weakly eulerian arc-coloured directed
multigraph, 618, 624 weakly hamiltonian-connected, 284–
292 degree condition, 295 extended tournament, 287 locally semicomplete digraph,
292 tournament, 284 weakly-k-linked directed multigraph,
474 weight of a subdigraph, 6, 268 weight of an arc, 6 weighted arc-strong connectivity aug-
mentation problem, 364 weighted directed pseudograph, 6
Yeo’s irreducible cycle subdigraph theorem, 261
Younger’s conjecture, 559 proof of, 561–563

