Theoretical Computer Science 33 ( 1984) 175- 193 
North-Holland 
175 
CONDITIONAL REWRITE RULES* 
Stiphane KAPLAN 
L. R. 1.. Universitt! de Paris-Sud, 91405 Orsay, France 
Commumcatpd by M. Nivat 
Received December 1983 
Revised March 1984 
Abstract, The notion of conditional term rep riting systems that allows to simulate theories specified 
by conditional equatikjns is presented The paper considers general conditional rules, as opposed 
to related works usually dealing with restricted cases. Means for the investigation of conditional 
rewriting (i.e., iterative constructs) are proposed. Evaluation by rec\.;:in; iz shown to be correct 
with respect to the underlying algebraic theory. A general evaluation procedure ic; given. lntractabil- 
ity results about one-step rewriting, even for carlonical systems. and computation of the normal 
lorm function are established. 
la Introddion 
Theory and practice of term rewriting systems are of a well-known interest in 
several fields of theoretical computer science. Rewriting is an essential tool, for 
instance, in the study of’ formal systems, in language theory, in theorem proving, 
algebraic specification and prototyping, semantics, meta-compilation . . . (among the 
prolific literature on the subject, c.f., e.g., [6] for synthesis). 
Essentially, rewriting is used to simulate the behaviour of eqTlatiops on abstract 
algebras of terms. In that sense it allows to investigate mathematical structures and 
data types used in computer science, and to provide some notion of implementation 
for them, in an abstract way. 
The purpose of this paper is to consider so-called condikmzl rules, in order to 
simulate theories specified by conditional equations. 
The following naive and commutative diagram is intended to describe the situ- 
ation: 
equation4 theories 
xirnul;rtcd hy 
l (equational) rewriting 
L 1 
conditional theories p----+ conditional rewriting 
4iniulated b\i 
* This \\ork has been partirllly supported hy A.II.1. <‘ontract Number 639, and by the C’.N.R.S. (Grko 
tie PI 0grammLttion ). 
176 S. Kaplan 
The upper part of this diagram has been abundantly investigated. We are mainly 
interested in the rest of it. 
This question has already been considered by some authors. Compared to their 
works, the characteristic of our approach is that we deal with conditional equations 
and term rewriting systems that are as general as possible, in some sense. 
We show, in Section 2, that, considering the algebraic aspect of the previous 
question, the classical results about equational theories naturally extend to condi- 
tional ones. In particular, both theories share the same specification power and 
tractability. 
In Section 3 we present the notion of conditional rewrite rules, aud a family of 
related results. It is established that cqnditional term rewriting systems are large 
enough to properly simulate conditiona;‘theories. Nevertheless, from an operational 
point of view, they are shown to lead to indecidability by their very nature; this 
states the practical intractability of conditional specifications when app!ied in all 
their generality. 
Nevertheless, general means are given allowing to explore the structure of condi- 
tional rewriting. 
Section 4 contains an overview of related works. They are concerned in general 
with restricted cases of our approach (considering which systems are dealt with). 
This often allows to recover sufficient decidability for the subsequent formalism. 
Here we give notations as they arc used in this article, and also some clausicul 
results. Tt e notations are consistent with standard ones in the field of term rewriting 
systems (cf., e.g., [6]) or of abstract data types (cf., e.g, [I I). 
A .Ggncrtwe (S, 2’) conskts of 
- a finite set S of name of domains, called sorts, 
- a finite family X of name of operators, equipped with an arity function on S. 
An ( S, Z )-morphism h 
( h, 1,. .s of applications 
h,:A,+ R, 
such that 
( imiitinwl rmrite rrrles 177 
from an (S, S)-algebra A to an (S, C j-algebra B is a family 
Vf: s 
0 
I . . . s,, + s, Vt, E A,, 
hJp( 1,. . . . ) W=J%,l(t,) ,..., tl,n(tn)). 
( S. 2: )-algebrtis with (S , 2’ 1 -morphisms form a category, Alg,:. 
The .*=‘* sign will always denote set-theoretical equality. It should be carefully 
distinguibhed from ;Q possible predicate 
EQ’? : s s -9’ boo1 
that should be somehow specified. 
s;.: denotes the algdwa oj the terms 
represents a family ( X, ),, s of (an infinite 
the algebra of the terms with variables. 
well formed on a signature 6, Z 1. X 
number of) sorted variables. T,_, (XI is 
There exists a unique mtxphism, evaI,,, from Y&L to an (S, C )-algebra ,4. One 
\vill csfter Gtr 7” instead of eval.\( t 1. 
The c‘lt f-4 Gen,: of the (S, 2’)~akebra d such that e\Fal,; is surjective is called 
the cI;\s~ uf jnitelr ,qeI1es*Io !nJ nlgehrtls. 
.&I iustclr~tiatiou is an application V: .Y + A (A being a (S, l:)-algebra). u may 
be extended in :I unique way into a morphism 
6: 7-,.\ ! .Y i + A. 
‘Xc generalI\ assimilate u and (F, and write IU instead of U( t.1. _ 
A pruc80ngrrterlc*c is a binary predicate on T,,, or I-,;_, (X ), often de,loted by -+, 
‘compatible’ with the operators of C, i.e., 
if Vi, t, -+ t:, then /It!, . . . , I,, I-+/‘( t;, . . . , t:,) for adequate ./; t,, . . . . 
Moreover, if --* is in TssL (XL it should verify the following ‘instantiation property’: 
it’ tr: .Y --+ Tsa2 (X) is an instantiation and if f --, f’, 
then ttr --, t ‘u. 
A c~~r~~r~rcv~w is a precongruence, which is also an equivalence relation. 
Ear 3 prccongruence -+, -+ ” denotes its reflexive and transitive closure, and +-+” 
ir> reflesi\*e, ynmctric ;rnd tranjitic’c closure. For a given -+, we define the relation 
1 as follows: 
t 3 I’ itf 31r \uch that t 
l,il 
I 
21 
The bet Precongr,., of the precongruerxes, and the set Congrs.\ of the congruences 
on T,> or Tu,\ (A’ 1, both ordered by inclusion, are complete lattices. 
178 S. Kaplart 
2. Algebraic conditional theories 
The purpose of this section is to state some results on the algebraic aspect of 
conditional specifications. 
It is shown, in this section, that from the algebraic point sf view, conditional 
theories and equational (classical) theories give rise to the similar kinds of results. 
In that sense, both theories share the same richness and tractability. 
We shall see, in Section 3, that this becomes false from an operutionui point of 
uiew, i.e.; when axioms are interpreted as rewrite rules; actually, conditional rewrite 
rules happen to be much less tractable than equational ones. 
Definition 2.1. A system (E ) C$ conditional eqrtufions (or a.uioms) is a finite set of 
formulas 
1J I = c, A l * - A 1J,, = L’,, =3 u,, , 1 = c,, , 1 ,
where u,, U, are terms of Ts., (X.) belonging pairwise to the same sorts. 
(This kind of equation is sometimes called equaiilma I R clauses.) 
The “A, u, = u,“ part is called the premisses of tht! for c ,, md *‘u,,+ I = L’,, + ,” is 
called its conclusion. 
We now have to provide semantics for this ~LVIM~ notion. 
Definition 2.2. A modt4 of ( E 1 is an (S, 2‘)~algebra M such that, !\or any instantiation 
tr: .X + M, 
I-11 II N ( If,, + , U) “’ .- ( If,, + 1 tF) “. 
This is consistcilt with the usual definition of ii model 1’~ purely eyuatic,nal 
asioms, which 1s the case when N = 0 for every rule. 
Denote by Alg,. (resp. h) Gen,. ) the class of all models (resp. of all finitely 
gerlrrated models) of ( E ). 
Conditional rewrite rules 179 
(5) For all A belonging to GenE one has 
A= T-&y, 
where t q t” iff t” = 1’“. 
Remarks. ( I ) The proof of the theorem is classical (cf., e.g., [I]) and is not repro- 
duced here. 
(2‘1 
of the 
(3) 
The secol~ld part of (4) is true under the technical requirement hat each sort 
signature is reuchable (cf. [6]). 
In part (3), the existence of = k comes from the following facts: 
- the intersection of a family of congruences verifying (E) still verifies (E), 
* the family o’c the congruences verifying ( E) is not empty (it contains at 
least the trivia! congruence) 
Besides, we can provide a fixpoint property for “!I, from which an iterative 
construction of = F results, 
This technique, which is a generalization of [ 131, is used several times in this paper. 
So, in Congrs,r (the compblete lattice of the congruences on 7&(X) ordered by 
inclusion), c:~nckler the functional 8: Congrs,r + Congrs,E associating to a con- 
gruence = ,, the smallest congruence =* such that 
(a\ IF WE [I . . 111, 14,U F, C,Cr THEN W,,IU =? V,,+lU, 
(b‘) sE,c s,* 
(This is to be- understootl with respect to each conditional equation, and for all 
CT: X 3 7-&X)., 
The same argument proving the existence of = E establishes the well-definedness 
of 0. 
One now has (cf. [8]): 
w 8 is a monotone and continuous functional on the lattice Congrs,I ordered by 
inclusion, 
- = ). is its least fixpoint. 
- Thus, = I may be computed by the iteration, for instance, 
. . ( .G” denoting as usual the plain equality on 7’..,,(X)). 
Finally, one h;ls an exterlsion c,J’ the BirkkoJJ theorem. 
Let ( As) be any conditional clause in ‘&, (X) (i.e., a formula as in Definition 
2. I ). Then we have the followink, theorem. 
Theorem 2.4. ( As 1 is true in very model qf’ Alg,. @‘(Ax) may be deduced syntacticall~~ 
.fFOt’Pl ( E ). 
This means that we can provide a system of inference rules that derives a given 
clause: iff this clause is true in every model of .,._ tll+-. variety. This is written conventionally 
IS0 S. Kaplan 
as l’oilows: 
Alg, i- (Ax) e (E)i= (As). 
Proof. The proof is rather technical. It appears extensively in [S]. For similar results 
concerned with universal algebra, cf. [ 141. 
Note that, compared with the usual Birkhoff theorem, this result is concerned 
with the validation of a conditional clause (and not only of an equation). 
3. General conditional rewrite rules 
AS announced, we present in this section the theory of conditional rewrite rules 
under their more general aspect. This means that we authorize a large class of rules 
corresponding to the ‘natural‘ notion of conditional, avoiding the restriction to a 
particular class as is usually done in the literature. 
First, given a signature (S, 2’). we define a ~or~dirional r rity 1~14 as a rule 
i; [rr, = Z‘, 1 =3 G + 0 
Conditional rcwrrw rules 
(recall that 
rJ t’ iff 3u such that t 1’ 
h*d 
ti 1. 
(i.e., the syntactical equality on TqSz f X 1). 
We discard interpretation (111) as being too much restrictive. It does not allow 
to recursively apply the rewriting on the premisses of the rules. 
It would thus simulate too roughly the rules interyt:*eted as axioms. 
Interpretation a 1) is somehow as general as possible, and turns out to be well 
suited in order to simulate axioms as rewrite rules. Nevertheless, we do not feel 
that the process necessitated in that case by the validation of the premisses corre- 
sponds to the intuitive ncjtion of rewriting. 
Actually, it would involve both left-to-right and right-to-left rewriting for the 
premisses, w!Gch seems contradictory with the strongly oriented aspect of what 
rewritirq should be. 
Thus, we shall adopt bnterpretatiorl l “2’ which corresponds to the intuition about ,,, 
conditional rewriting. Notice that it also allows for recursive evaluation of the 
premisses, and does noli much restrict the generality of interpretation (I). 
Nevertheless, we loose (when there is no confluence) the property that rewriting 
simulates congruence, which is true for interpretation (I). 
So, in the following, we shall only consider interpretation (I I), and use the notation 
-+ for it (cf. next detinition). 
When interpretation ( 1) is preferred, we shall explicitly write + g’. Its algebraically 
‘nice‘ results are given in Appendix A. 
Proof. As in Section 2, tie consider two steps: 
- The existence of --Q siems from the facts that 
there is at least c ne precongruence (the trivial one, that assimilates all the terms 
in :I single class) verifying condition (a)’ of the definition, 
182 S. Kaplan 
- the intersection of any family of precongruences verifying (a)’ is still a precon- 
g ruence verifying (a)‘. 
- But 3s before, we also provide a least fixpoint construction for +K, that really 
allows TO determine (in a certain sense) whether a term is rewritable. 
Let us consider the complete lattice Precongr.q,r of congruences on 7&(X j. 
As in [S, 133, let 
t$ :Precongr.S,L +PrecongrS,r 
be the operator associating to any -+I the smallest +: such that 
!a)” +;l respects R better than -+,, i.e., for a given rule (r\:_:,[ui = o,])+G-* 0, 
(b)” --+I c 92. 
Note that, in the definition, U,(T and v,u +y MT,,,, exactly means that 14,~ 1,tyr (i.e., 
interpretation (II) is chosen, as announced). 
One checks that the operator &, is continuous on Precongrs,l (cf. IS]). Hence, it 
admits a smallest fixpoint, which is precisely aR in Theorem 3. I. 
This shows that -+R may be computed by successive approximations as follows: 
(with V-u, _Y of the same sort, (.x +,&cQ = ~9). 
Notice that when R contains orlly usual classical rewrite rules, it may be considered 
as ;L conditional term rewriting system with a null tlumber of I(,, V, (case )1 = 0). 
Then, -+ K has an interpretation as a classical (inconditional) or as a conditional 
rewrite rule system. One checks that those two interpretations are then coinciding. 
Thus, conditional theory enlarges the classical one. 
One attempt in using corlditional rewrite rules is to siwulcw cwdiriord qtatiow. 
In that sense, we have the following theorem. 
Condirional rewrite rules 183 
Proof. Consider, the following system: 
R=( 
UdQ w+a 
u” b w-*6 
u=u*G-,D }, 
where a, 6, t’, w, G and D are constants. This can be shown schematically as follou,c;: 
One has (equationall;) 
But l ‘u 10” is false, so ‘*G dR D” is false too. And, finally, “G+$ II” is false. Cl,, , 
rRencurk. Here, one has u-g O. Thus, if one had chosen interpretation (I), one 
would haLe had 
In fact, as announced in the Introduction, this is a general fact: It is always true that 
(cf. Appendix A). 
Proof of Theorem 3.2 (continued I. (2) It is clear that 
if = R = 1, 
So, one just has to 
being clear). 
So, suppose that 
then 3% R= e+*R. 
prove that = R = 1, and even that = R c 1 (the reverse inclusion 
t = R I’. From Section 2, there exists a smallest n such that . 
t 2”” 1’ with s“” = (g(“)( -+, 
The demonstration is by induction on n. 
Basis (n = 0): Then, t = I’ and tJ_ 1’ 
induction Step (if t = M +” 2’): One has to delve more deeply into the construction 
of SE” I’_ Relation G’“+” is the smallest congruence generated by 
_ $n’ 
, 
- the pairs (Go, Da) and (Da, Gcr) such that, Vi, u,u=(” vi0 (if j > 0) (for an 
equation (A: _ I [u, = v,]>+G -+ D). 
153 S. Kaplan 
Let us define a - 6 iff 
either a = K h = K with a’s”‘) b’ 
I I 
a’ b’ 
or there exist a rule (A!=, [ui = Ui])*G+ D 
such that, Vi, UiU =“I) U,C (if j > 0) and 
- either a = K and h = K 
i I 
GU DCT 
- or b=Kanda=K 
I I 
GU DC7 
In the first case, a’3 b’ by induction hypothesis, and thus a 1 h. 
In the second t 1, by induction hypothesis, Vi, ti,(r J ~‘,tr. So, a + H b or b + R(l. 
In all cases, one xs that a - b implies a 3 b. 
Now there exist f,, . . . , I,, such that t - t, - . 9 l - t,, = I’. (This is a usual result 
Aoert the smallest congruence generated by a binary predicate.) 
Hy confluency, and because t, J t, + lr a classical diamond lemma finally shows that 
(31 Straightforward, after the hypotheses and part (2). : I, l, 
These results seem quite satisfactory. They should nevertheless be moderiited b\- 
tSle following negative results. 
In the theory of classical (i.e., purely equationul) rewrite rules, one uses in general 
wr~flue~zt and jnitel~~ tunninafing (or ‘crtnonic;~l’) term rewriting systems. In that 
case, any given term admits one unique ~orr~ul /i~r, which ih cwnput;lhle b\i tiny 
‘safe’ sequence of rewritings. 
In the extended formalism of conditional rules we are going to show thut, for ;t 
given set of r!ks, the rewriting of any term is in g~nt’r;tI ;t nondeckktblt problem. 
WC prove that it is still true for canonical systems. 
We exhibit such ;1 system, such that the ‘norm;rl form function, 14 hich still wists. 
will be shown to be rzr,r~~~~~l)lputal)~~. This is not realI_ u conscquctw of the indecidii- 
bility of‘ the rewriting problem: these might be other fang wqs to cl‘ompute it tl~\ 
by successive rewriting. 
To summarize, we have the following. 
Proof. (i) We use MatjxeviT’s answer to Hilbert’s tenth problem, asserting that it 
is pot decidable whether a given integer polynomial has no integer root. 
One may define an abstract type, with suitable signature and equational rules, 
such that its inititil model I is isomorphic to the ring Z[X] of the integer polynomials. 
This is done extensively in [8]. 
For instance, the polynomial 
x’ -2X-t-l 
will be represented by the term: 
. : int + polyn 
+ : polqn polyn + polyn, 
Now add tk folk-wing predicate: ROOT’?: polyn int --* boo\, with the rule - -- ----I__- 
I$)‘!( P 1 ahs( n )]. 0) ( iR EQ‘?{ P[ -abs( II )I, 0) OR RooT? ( P, ab4 n) + 1) 
- ‘I-rutz 
=+ ROOT? ( f, abs( n ) ) 4 True 
(The operator [ 1: polvr~ int dint is supposed to be one of the type, simulating the 
application of a polynomial on 
shows that the term 
recites into “True” if and only 
CN htxu ihe, it ih nonreducible. 
an integer.) With this conditional rewrite rule, one 
if P has ti root of module greater than or equal to n. 
The inttxprcta:ion of the axioms is. I’ hers a root of absolute v;tlue greater than or 
quaI 10 ;I positive intcpcr 11 if: 
cithtx P[ II 1 - 0, 
- or P[ - r~] = 0, 
- or P has a root of absolute value greater than or equal to n + 1. 
Hence, one cannot decide if the term RO(iT?( P, 0) (for any P) is reducible + R, fol 
it would mean that we can decide whether P has no integer root. 
(ii j The normal forms, via + H, of those terms are not computable, for the sam’ 
reaso 11s. L._I 
186 S. Kaplan 
This is the main drawback of the theory. Furthermore, we do not know yet any 
nontrivial criterion insuring the computability of +,+ The point seems to be to avoid 
infinite calis to the reduction procedure recursively on the premisses (as has hap- 
pened on the previous example). But this remains to be done. 
Nevertheless, in order to deal with the computation of the normal form function 
(when possible), we have the following positive result. 
Theorem 3.4. Given a svstem of conditional rewrite rules, such that 
and noetherian, then: the normal form JIunction is computable iff the 
+ R is decidable. 
(Constructive) Proof. It is clear that if we can compute the normal 
we can decide whether it is reducible or not. 
+ R is c’on,fluent 
irreducibility *for 
form of a term, 
Conversely, assuming that, for a given set of rules R, there exists a complete 
‘oracle’ procedure, REnrrc? R testing the reducibility of any term, we now give a 
general procedure computing the normal form function. 
Proc y+- NF( t); 
Clear all the possibly marked rules of R : 
y+- 1; 
if REI>IJC.?R( t ) = no then stop ti: 
while there remain nonmarked rules 
choose a nonmarked rule: 
t/j:’ 1 [u, = P,]) =3 (3 --* II; 
mark it: 
if there is o, cr such that ~1,~ = Gtr then 
if [(n =O) or 
( n > 0 and W E [I . . n), NF( U,V) -r= NF( P,u))] 
then _V t- N F( _v[o\ DU]) 
fi 
fi 
end while 
end proc 
(It is assumed that the mxked rules are somehow remembered WITH!! IC rccursi\.e 
calls to the procedure.) 
Proof of the Correctness of the Procedure. First, consider the new functional cb’ 
defined JS a previously, but assuming now that the \I*,,, are nonreducible. +K is 
rrlso shown to be the least fixpoint of &‘, bec;ruse of -Q being noetheriLtn ;tnd 
confluent. 
Comkional rewrifv rules 187 
Then, 
t*,J iii 3m such that t-Q 
(with, by convention, +,,, = I&‘[“‘( *id)). 
Now, define 
If f is nov Azrrible, then D(t) is nonempty. For, if 
then, actually, 
Let 
E D(t)) if t is reducible, 
otherwise. 
We show tE iit tk procedure is correct by induction on d(t). 
Bmis ( d; 1) = 0); By hypothesis, t is nonreducible, and it is clear that the procedure 
immedititrly stops. yielding t = NF( t). 
Induction Step (d( t) = 11 + 1): The procedure is assumed to be correct for any 1 
such that J( I) s 11. Suppose 
l If t rewrites into t, by a purely equational rewritt% rule, the control will eventually 
reach the instruction 
\‘+ NF(t, 1 . 
(in rrt least one of the possible executions 
l Else, there is a rule A ,‘. I [I(, = c,]*G -+ 
of the nondeterministic procedure). 
I) such that 
Now, according to the induction hypothesis, the procedure will correctly compute 
N F( IJ,V 1, N Fc V,U ). 
Thus;, the procedure will detect that 
Vi, NF( U,U) = NF( ~,a), 
and the control will be at the instruction _v +- NF( ri) (as previously). Then, induc- 
tively, the sequence of instruction 
r+NF(t,) for i=l,...,p 
I88 S. Kaplan 
will be performed, until the procedure stops -with 
j+NF(r,)=f,=NF(!). III 
Thus, we have given a general procedure computing the normal form of any term, 
provided we know fx a given + R a runnable and complete criterion telling whether 
a term is reducible or not. We have shown that such a criterion generally does not 
exist. 
Notice, nevertheless, a case of great practical interest, namely when the left-hand 
sides of the (conditional) rules never match the nonreducible terms. 
Example. Consider the following rules, specifying the integers equipped with the 
-- i ” predicate: : 
.S z--’ { integers, booleans > 
cz‘ zz { () : -+ int 
p s , * : int + int 
..-- :int int --* boo1 } 
Conditional rewrite rules 189 
4. Related works 
In this section we shortly describe several works dealing with the question of 
conditional rewrite rules. 
Recall that our formalism, as it has been exposed, turns out to be somehow too 
much general, because of its inherent indecidability. Though our formalism has 
never been yet considered systematically, it has been foreseen by some authors, and 
then shown_ gut (cf. [3]) that too much generality in the topic leads to drastic 
intractability. ‘T’hu~, most authors have been considering specialized restrictions of 
general conditional rewriting, in order to deal practically with the conditional 
specifications they encountered or had in mind. 
It appears that there has been on the whole rather few investigations in the 
domain. Thus, we may provide an almost exhaustive bibliographic overview of the 
topic, at least when concerned with synthesis papers (and as far as we know). 
(a) In a tirsl ri*oup of authors, Lankford [IO] and Brandt et al. [2] have done pioneer 
research in the field. They showed the possibility of some restricted formal treatment 
for conditid)nal rewriting. These authors realized too that different evaluation 
mechanisms GC-A~ possible. They expressed the need for concepts allowing to 
con:\ider the domain more3 globally. ‘i’iit_ rqort by Brandt’ et al. [2] also contains 
the fun&mental concept of ‘hierarchical evaluation’ (cf. (b) 1. 
(b) A second group [I 2,3,4], has investigated conditional rules under particular 
.F_WIQCGC~~I restric~~or~~ Roughly, they consider classes of rules the left-hand sides of 
M?Gch ilre 
- left-linear 
- do not overlap,. . . . 
In the case of classical ruleb,, it is known that this gives rise to a large class of results, 
including confluency, validity of several evaluation strategies under termination 
hypotheses, etc. (cf. [ 1 I]). These authors have extended these results to their own 
forTAms for conditional rewriting. 
The following two concepts are often used: 
- hr~oltm~ specifications: 
In th;tt CM, rules ;Irt‘ under the restricted form 
This metins that the premisses are reduced to a boolean term l? Semantics is that 
the reduction is allowed whenever P rewrites into the distinguished constant ‘true’. 
It is oflen assumed too that the constants ‘true’ and ‘fal& are nonreducible, and 
that tiny boolean term may be rewritten into one of those. This leads to the following 
concept: 
v hienmhicwl evaluation (and specifications): 
190 S. Kaplan 
The specification has the following aspect: 
SPEC 
- 
G-D 
SPEC, 
jpremiisPr 
1 
The idea i; that, in order to decide whether a conclusian G + D is applicable, t’le 
premisses are evaluated in a specification SPECS at a lower level. 
SPL=C~, may be supposed to be decidable, for instance when it acts as a boolean 
theory specified by equational rewriting (cf. (a)). This is the case in [ 121. 
This has been generalized by U. Pletat, the author considering nonboolean 
specifications such as 
CS,,, 20, 4,) c 6, L 4) = l ’ l = al, x,, K), 
where 
-(S,,~,)C(S,,,,,~,+,), 
- K,, is a classical rewrite rule system, 
- R, (for i 2 1) is a conditional rewrite rule system, the pretnisses of which r-m in 
6 I7 *I s ,> and c;faluated via R, , (which may inductively imply ev;~luation in a w 
lower layer, possibly until R,, which is decidable). 
(c) More recently, R6my [ 131 has considered a ditferent kind of question, namely 
the possibility of proving properties in conditionally specified theories. The tmthor 
obtains some results extending the Knuth-Bendix theorem (cf. [-C, 6,9]) to the 
framework of conditional rewrite rules he considers. These rewritings are boolean 
(cf. (b)). Moreover, the author in:i’c:duces the notion of WIWW~~~/ rewriting for 
terms with variable. 
ConGder for instance the following (incom@etr) specitic;ition for sets: 
EQ’?(.\, _V J -‘-> IS-IN?(s,insert(!:S~) --* true 
-lEQ‘!(.Y, *\9 =-G IS-IN’r(s,inscrt(~:S)) -* IS-IN’!(.Y,S). 
The term 
f = IS-IN:‘(s,insert(!l,insert(;S))) 
is nonreJucible. Nevertheless, it may be rewritten into 
true “in the contest” : (EQ’!( .&_I* 1 v EQ:‘t .I.,: 1) 
IS-IN’?(s,S) “in the cclntcst”:(.-.~EQ:‘(s,?~)~ ---$Q’!(A;z)) 
Conditional rewrite rules 191 
Informally, a context C is a boolean term that ‘implies’ ihat (for some instantiation) 
the premiss P of a rule is true. 
Formally, an operator + is given, simulating the implication through the following 
rewrite rule: 
(at the lower layer of the specification, which needs to support a system for boolean 
algebra). ?‘%cri, Ia :rthc boolean term (Co* Pa) reduces to “true”, then the contextual 
rewriting 
is enabled. 
Notice that the ux of specification containing the booleans as subspecification, 
allows to apprehend notions belonging a priori to the meta-formalism (i.e., a 
condition ‘implying’ another condition, in the previous sense) within the formalism 
itself. 
A notion of contextual cont)ruen<y is then defined. For instance, the system above 
is contextually confluent on the two terms 
t = 6lN?( qinsert(_v,insert( z,s))) 
I’ = IS-I N?( s,insent( z,inserQ,S))) 
(i) they both reduce, in the two previous contexts, into the same terms “true” 
or “IS-1 N“( .I$)*‘, and 
iiii the :wo contexts are complementary (which means that (C v C’) +* true) 
This concept allows to consider the system as confluent (contextually) on two 
terms that are not even reducible. The author then obtains criteria f’ot an e-+&nsion 
of the Knuth-Bendix theorem, allowing to decide, under terminatiijn conditions, 
whether a system is contextually confluent, and thus confluent on ground terms. 
5. Conclusion 
As a conclusion, it appears that there are two possibilities in order to deal with 
conditi0n.A rewrite rules: 
I i ) Consider conditioalal rules in all their generality. This is the apprtrach that 
we promote in this paper. 
The advantage of our method is to apprehend specifications as general as possible. 
Its main drawback is to lead to intractability. Nevertheless, the situation is :.omehow 
analogous to the case of classical (equational) rewrite rules which are not really 
tractable without noetherianity and confluency hypotheses (that are not decidable). 
The m:Jin difference is that an additional hypothesis, insuring finiteness of the 
192 S. Kaplan 
one-step computation, is needed ir, our framework. We do not know yet any good 
sufficient criterion for this, but we believe that it is worth being investigated. 
(2) Consider restricted cases, possibly introducing extra notions such as hierar- 
chical evaluation, boolean premisses, etc. It is the approach used throughout the 
literature. It appears that ir large class of specifications may be taken into account 
within this kind of formalism. Moreover, a large class of results has been obtained 
(such as validation of rewriting strategies, Knuth-Bendix properties, . . J, justifying 
the interest devoted to this approach. 
Appendix A 
In this section we state results about interpretaGo (I) given for a set of conditional 
rewrite rules (cf. Section 4). As announced, this interpretation has nice l tlgebrrtic 
properties. 
Rem, that is was discarded (for the benefit of interpretation ( II 1) because it does 
not really correspond to our requirement of orientedness for rewriting. Neverthele:;s, 
under confluency hypothesis for either interpretation, the two interpretations ;irt’ 
equivalent. 
Proof. The proof f‘ollows aiong the same lines as the proof of Theorem 3.2. i.e., by 
induction on II such that I G- ‘* t’. 
fS~.vis: The case II = 0 is identical. 
Irdlrctiorl Step: For the case II t- 1, suppose (1 - I, (with the same notations). 
Notice that interpretation ( I) has the same intrxtihility aspect as the sritndard 
c)~c’. iin p;~rticular, examples showing indecidability of rewriting and noncomputabil- 
itv of’ the normal form function ;ire relevant for both irlterl,retaticln~. 
193 
References 
[ 11 J.A. Gogen, J.W. Thatcher ant1 E.G. Wagner, An initial approach to the specification, correctness 
and implementation of abstract data types, in: R. Yeh, ed., Curmn t Trends in hpamming 
bkhdohg~* Vol. I\’ i Prentice-Hall. Englewood Cliffs, NJ, 1978). 
iZ] II. Rrandt, J.A Darringer and W-H. Joyner, Completeness of conditional reductions, Rept., IBM 
Res. Center, Yorktown Heights, 1978. 
[3] J. Bergstra and J. Klop, Conditional rewrite rules: (‘onfluency and termination, Rept. 1W 198/82, 
blathematisch Centrum, Amsterdam, 1982. 
[4] K. Drosten, lowarc executable specifications using conditional axioms, Rept. 83-01, T.U. Braun- 
schweig. I9f4I 
[C] CL Huet and J.-h!. Hullot. Proofs b\ induction in equational theories with constructors, Rept. 
- I N RI A 28, Rocquellcourt. I9wO. 
[ti,1 G. Huet and D.C. Oppcn, Equations and revtrite rules: A survey, in: R. Book, eJ., hrmal hguuge.s: 
Pwspccrire ad Open /“hhknro ( Academic Press, New York, 19X0). 
171 \I.-(‘. Gruciel, GnCrar’lon et preuvc de co.n,~ilateurs basic\ sur une sknantique formelle de\ 
langagc\ de pr~3~ramm:rtian. Tht;se d’)ltat, Nancy, I980. 
181 S. Kapl~. \!n Iangage de bp&zitications de types ahstraits algt%-iques. Thtse de 3Pme cycle, Univ. 
de Pari\, Of%t~, I%>. 
191 U.L. klnuth itIld P.H. Bendix, Simple word problems in universal algebra, in: J. Leech, cd.. 
( ‘imipumrioitai fhh1~wr.s in .4hsrruc*r AIgehrcJ i Pergamon Press, Oxford, 1970). 
1 I1.S. Lankt’ord, !&me ne\\ approaches to the theory and tipplications of condition4 term rewriting 
\Fstems, I979 
1 hl. O’l>onn~l. <‘on?puting in systems &scribed by equations. In’ Le(vure Now ( omprtrcr .‘G*ierlc*e 
SS ,Spri- per, 13cl’in, 1977). 
1 Il. Ple;af. G. flngels and H -1). Ehrich, Operation;\1 semantics of algebraic specifications with 
C:otidltion;,tl equ&ion\, M : .44P. Lille. I%! 
[ I.\\ .I. 1 !?crn>, I.tude dcs \ybtirnes de riPcriture conditionnels st applications itux types ahstraits 
;rlgibriyues, Th+ d’E.tat. Nancy. 1982. 
[ 141 A. Selm,m, C‘ompletenes~ o! ctilculi for axiomatically detined classes of algebr:is, Alp+rtr L;k-ersalis 
z t lU?Z\ 20-22. 
