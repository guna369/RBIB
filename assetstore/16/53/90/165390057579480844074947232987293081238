Combining algorithms for deciding knowledge in
security protocols⋆
Mathilde Arnaud1, Ve´ronique Cortier2, and Ste´phanie Delaune2
1 E´cole Normale Supe´rieure de Cachan, Computer Science department, France
2 LORIA, CNRS & INRIA project Cassis, Nancy, France
Abstract. In formal approaches, messages sent over a network are usu-
ally modeled by terms together with an equational theory, axiomatiz-
ing the properties of the cryptographic functions (encryption, exclusive
or, . . . ). The analysis of cryptographic protocols requires a precise un-
derstanding of the attacker knowledge. Two standard notions are usu-
ally considered: deducibility and indistinguishability. Those notions are
well-studied and several decidability results already exist to deal with a
variety of equational theories. However most of the results are dedicated
to specific equational theories.
We show that decidability results can be easily combined for any disjoint
equational theories: if the deducibility and indistinguishability relations
are decidable for two disjoint theories, they are also decidable for their
union. As an application, new decidability results can be obtained using
this combination theorem.
1 Introduction
Security protocols are paramount in today’s secure transactions through public
channels. It is therefore essential to obtain as much confidence as possible in their
correctness. Formal methods have proved their usefulness for precisely analyzing
the security of protocols. Understanding security protocols often requires reason-
ing about knowledge of the attacker. In formal approaches, two main definitions
have been proposed in the literature to express knowledge. They are known as
message deducibility and indistinguishability relations.
Most often, the knowledge of the attacker is described in terms of message
deducibility [17, 19, 18]. Given some set of messages φ representing the knowl-
edge of the attacker and another message M , intuitively the secret, one can ask
whether an attacker is able to compute M from φ. To obtain such a message he
uses his deduction capabilities. For instance, he may encrypt and decrypt using
keys that he knows.
This concept of deducibility does not always suffice for expressing the knowl-
edge of an attacker. For example, if we consider a protocol that transmits an
encrypted Boolean value (e.g. the value of a vote), we may ask whether an at-
tacker can learn this value by eavesdropping on the protocol. Of course, it is
⋆ This work has been partly supported by the RNTL project POSE´ and the ACI
Jeunes Chercheurs JC9005.
completely unrealistic to require that the Boolean true and false are not de-
ducible. We need to express the fact that the two transcripts of the protocol,
one running with the Boolean value true and the other one with false are indis-
tinguishable. Besides allowing more careful formalization of secrecy properties,
indistinguishability can also be used for proving the more involved notion of
cryptographic indistinguishability [6, 1, 16]: two sequences of messages are cryp-
tographically indistinguishable if their distributions are indistinguishable to any
attacker, that is to any probabilistic polynomial Turing machine.
In both cases, deduction and indistinguishability apply to observations on
messages at a particular point in time. They do not take into account the dy-
namic behavior of the protocol. For this reason the indistinguishability relation
is called static equivalence. Nevertheless those relations are quite useful to rea-
son about the dynamic behavior of a protocol. For instance, the deducibility
relation is often used as a subroutine of many decision procedures [20, 7, 11].
In the applied-pi calculus framework [3], it has been shown that observational
equivalence (relation which takes into account the dynamic behavior) coincides
with labeled bisimulation which corresponds to checking static equivalences and
some standard bisimulation conditions.
Both of these relations rely on an underlying equational theory axiomatiz-
ing the properties of the cryptographic functions (encryption, exclusive or, . . . ).
Many decision procedures have been provided to decide these relations under a
variety of equational theories. For instance algorithms for deduction have been
provided for exclusive or [11], homomorphic operators [13], Abelian groups with
distributive encryption [15] and subterm theories [2]. These theories allow ba-
sic equations for functions such as encryption, decryption and digital signature.
There are also some results on static equivalence. For instance, a general decid-
ability result to handle the class of subterm convergent equational theories is
given in [2]. Also in [2], some abstract conditions on the underlying equational
theory are proposed to ensure decidability of deduction and static equivalence.
Note that the use of this result requires checking some assumptions, which might
be difficult to prove. This result has been applied to several interesting equa-
tional theories such as exclusive or, blind signature and other associative and
commutative functions.
For all the previous results, decidability is provided for particular fixed the-
ories or for particular classes of theories. In this paper, we provide a general
combination result for both deduction and static equivalence: if the deducibil-
ity and indistinguishability relations are decidable for two disjoint theories E1
and E2 (that is, the equations of E1 and E2 do not share any symbol), they are
also decidable for their union E1 ∪ E2. Our algorithm for combining theories is
polynomial (in the DAG-size of the inputs). It ensures in particular that if the
deducibility and indistinguishability relations are decidable for two disjoint the-
ories in polynomial time, they are decidable in polynomial time for their union.
The interest of our result is twofold: first, it allows us to obtain new de-
cidability results from any combination of the existing ones: for example, we
obtain that static equivalence is decidable for the theory of encryption combined
with exclusive or (and also for example with blind signature), which was not
known before. Second, our result allows a modular approach. Deciding interest-
ing equational theories that could not be considered before can be done simply
by reducing to the decision of simpler and independent theories.
Our combination result relies on combination algorithms for solving unifi-
cation problem modulo an equational theory [21, 5]. It follows the approach of
Chevalier and Rusinowitch [8], who show how to combine decision algorithms for
the deducibility problem in the presence of an active attacker. However, they do
not consider static equivalence at all, which is needed to express larger classes of
security properties. Moreover, even for deduction, they do not state any combina-
tion result in the passive case, though this result might be obtained by adapting
their proof. Considering static equivalence notoriously involves more difficulties
since static equivalence is defined through overall quantification. In particular,
proving static equivalence requires a careful understanding of the (infinite) set
of equalities satisfied by a sequence of terms.
Outline of the paper. In Section 2 we introduce notation and definitions as well
as the two notions of knowledge. Section 3 provides some material for our combi-
nation algorithms. Then Sections 4 and 5 are devoted to the study of deduction
and static equivalence respectively. In Section 6, we sum up our results and pro-
vide new results obtained as a consequence of our main theorems. Due to lack
of space, some proofs are omitted. They can be found in [4].
2 Preliminaries
2.1 Basic definitions
A signature Σ consists of a finite set of function symbols, such as enc and pair,
each with an arity. A function symbol with arity 0 is a constant symbol. Given
a signature Σ, an infinite set of names N , and an infinite set of variables X , we
denote by T (Σ) (resp. T (Σ,X )) the set of terms over Σ ∪N (resp. Σ ∪N ∪X ).
The former is called the set of ground terms over Σ, while the latter is simply
called the set of terms overΣ. The concept of names is borrowed from the applied
pi calculus [3] and corresponds to the notion of free constant used for instance
in [8]. We write fn(M) (resp. fv (M)) for the set of names (resp. variables) that
occur in the term M . A context C is a term with holes, or (more formally) a
linear term. When C is a context with n distinguished variables x1, . . . , xn, we
may write C[x1, . . . , xn] instead of C in order to show the variables, and when
T1, . . . , Tn are terms we may also write C[T1, . . . , Tn] for the result of replacing
each variable xi with the corresponding term Ti. A substitution σ is a mapping
from a finite subset of X called its domain and written dom(σ) to T (Σ,X ).
Substitutions are extended to endomorphisms of T (Σ,X ) as usual. We use a
postfix notation for their application.
An equational presentation H = (Σ,E) is defined by a set E of equations u = v
with u, v ∈ T (Σ,X ) and u, v without names. For any equational presentationH,
the relation =H denotes the equational theory generated by (Σ,E) on T (Σ,X ),
that is the smallest congruence containing all instances of axioms of E. Abu-
sively, we shall not distinghuish between an equational presentation H over a
signature Σ and a set E of equations presenting it. Hence, we write M =E N
instead of M =H N when the signature is clear from the context. A theory E is
consistent if there do not exist two distinct names n1 and n2 such that n1 =E n2.
Note that, in an inconsistent theory, the problem we are interested in, i.e. de-
duction (defined in Section 2.3) and static equivalence (defined in Section 2.4)
are trivial.
Example 1. Let Σxor be the signature made up of the constant symbol 0 and the
binary function ⊕ and Exor be the following set of equations:
x⊕ (y ⊕ z) = (x ⊕ y)⊕ z x⊕ 0 = x
x⊕ y = y ⊕ x x⊕ x = 0
We have that n1 ⊕ (n2 ⊕ n1) =Exor n2.
Definition 1 (syntactic subterm). The set Sts(M) of syntactic subterms of
a term M is defined recursively as follows:
Sts(M) =


{M} if M is a variable, a name or a constant
{M} ∪
ℓ⋃
i=1
Sts(Mi) if M = f(M1, . . . ,Mℓ)
The positions in a termM are defined recursively as usual (i.e. sequences of inte-
gers with ǫ being the empty sequence). We denote by M |p the syntactic subterm
ofM at position p. The term obtained by replacingM |p by N is denotedM [N ]p.
2.2 Assembling terms into frames
At a particular point in time, while engaging in one or more sessions of one or
more protocols, an attacker may know a sequence of messages M1, . . . ,Mℓ. This
means that he knows each message but he also knows in which order he obtained
the messages. So it is not enough for us to say that the attacker knows the set
of terms {M1, . . . ,Mℓ}. Furthermore, we should distinguish those names that
the attacker knows from those that were freshly generated by others and which
remain secret from the attacker; both kinds of names may appear in the terms.
In the applied pi calculus [3], such a sequence of messages is organized into a
frame φ = νn˜.σ, where n˜ is a finite set of restricted names (intuitively the fresh
ones), and σ is a substitution of the form:
{M1/x1 , . . . ,
Mℓ/xℓ} with dom(σ) = {x1, . . . , xℓ}.
The variables enable us to refer to each Mi and we always assume that the
terms Mi are ground. The names n˜ are bound and can be renamed. Moreover
names that do not appear in φ can be added or removed from n˜. In particular,
we can always assume that two frames share the same set of restricted names.
2.3 Deduction
Given a frame φ that represents the information available to an attacker, we
may ask whether a given ground term M may be deduced from φ. Given an
equational theory E on Σ, this relation is written φ ⊢E M and is axiomatized by
the following rules:
if ∃x ∈ dom(σ) s.t. xσ =M
νn˜.σ ⊢E M
s ∈ N r n˜
νn˜.σ ⊢E s
φ ⊢E M1 . . . φ ⊢E Mℓ
f ∈ Σ
φ ⊢E f(M1, . . . ,Mℓ)
φ ⊢E M
M =E M
′
φ ⊢E M
′
Intuitively, the deducible messages are the messages of φ and the names that
are not protected in φ, closed by equality in E and closed by application of
function symbols. Note that φ and M might be built on a signature Σ′ that
possibly contains some additional function symbol not in Σ. When νn˜.σ ⊢E M ,
any occurrence of names from n˜ in M is bound by νn˜. So νn˜.σ ⊢E M could
be formally written νn˜.(σ ⊢E M). It is easy to prove by induction the following
characterization of deduction.
Lemma 1 (characterization of deduction). Let M be a ground term and
νn˜.σ be a frame built on Σ′. Then νn˜.σ ⊢E M if and only if there exists a
term ζ ∈ T (Σ,X ) such that fn(ζ) ∩ n˜ = ∅ and ζσ =E M . Such a term ζ is a
recipe of the term M .
Example 2. Consider the signature Σenc = {dec, enc, pair, proj1, proj2}. The sym-
bols dec, enc and pair are functional symbols of arity 2 that represent respectively
the decryption, encryption and pairing functions whereas proj1 and proj2 are
functional symbols of arity 1 that represent the projection function on respec-
tively the first and the second component of a pair. As usual, we may write 〈x, y〉
instead of pair(x, y). The equational theory of pairing and symmetric encryption,
denoted by Eenc, is defined by the following equations:
dec(enc(x, y), y) = x, proj1(〈x, y〉) = x and proj2(〈x, y〉) = y.
Let φ = νk, s1.{enc(〈s1,s2〉,k)/x1 ,
k/x2}. We have that φ ⊢Eenc k, φ ⊢Eenc s1 and also
that φ ⊢Eenc s2. Indeed x2, proj1(dec(x1, x2)) and s2 are recipes of the terms k,
s1 and s2 respectively.
We say that deduction is decidable for the equational theory (Σ,E) if the fol-
lowing problem is decidable.
Entries A frame φ and a term M built on Σ
Question φ ⊢E M?
2.4 Static equivalence
Deduction does not always suffice for expressing the knowledge of an attacker,
as discussed in the introduction. Sometimes, the attacker can deduce exactly the
same set of terms from two different frames but he could still be able to tell the
difference between these two frames.
Definition 2 (static equivalence). Let φ be a frame built on Σ′ and M
and N be two terms. We say that M and N are equal in the frame φ un-
der the theory E, and write (M =E N)φ, if there exists n˜ such that φ = νn˜.σ,
(fn(M) ∪ fn(N)) ∩ n˜ = ∅ and Mσ =E Nσ. We say that two frames φ = νn˜.σ and
φ′ = νn˜.σ′ built on Σ′ are statically equivalent w.r.t. (Σ,E), and write φ ≈E φ′
(or shortly φ ≈ φ′) when
– dom(φ) = dom(φ′), and
– for all M,N ∈ T (Σ,X ) we have that (M =E N)φ ⇔ (M =E N)φ′.
Example 3. Consider the equational theory (Σenc,Eenc) provided in Example 2.
Let φ = νk.σ, φ′ = νk.σ′ where σ = {enc(s0,k)/x1,
k/x2}, σ
′ = {enc(s1,k)/x1 ,
k/x2}.
Intuitively, s0 and s1 could be the two possible (public) values of a vote. We have
dec(x1, x2)σ =Eenc s0 whereas dec(x1, x2)σ
′ 6=Eenc s0. Therefore we have φ 6≈ φ
′.
However, note that νk.{enc(s0,k)/x1} ≈ νk.{
enc(s1,k)/x1}.
Let (Σ,E) be an equational theory. We define EqE(φ) to be the set of equa-
tions satisfied by the frame φ = νn˜.σ in the equational theory E:
EqE(φ) = {(M,N) ∈ T (Σ,X )× T (Σ,X ) | (M =E N)φ}.
We write ψ |= EqE(φ) if (M =E N)ψ for any (M,N) ∈ EqE(φ).
Checking for static equivalence is clearly equivalent to checking whether the
frames satisfy each other equalities.
Lemma 2 (characterization of static equivalence). Let φ1 = νn˜.σ1 and
φ2 = νn˜.σ2 be two frames. We have
φ1 ≈E φ2 ⇔ φ2 |= EqE(φ1) and φ1 |= EqE(φ2).
We say that static equivalence is decidable for the equational theory (Σ,E) if
the following problem is decidable.
Entries Two frames φ1 and φ2 built on Σ
Question φ1 ≈E φ2?
3 Material for combination algorithms
We consider two equational theories H1 = (Σ1,E1) and H2 = (Σ2,E2) that
are disjoint (Σ1 ∩Σ2 = ∅) and consistent. We denote by Σ the union of the
signatures Σ1 and Σ2 and by E the union of the equations E1 and E2. The
union of the two equational theories is H = (Σ,E). Note that the equational
theories H1 and H2 share symbols (namely names) that can be used to represent
agent identities, keys or nonces. In other words, two ground terms t1 and t2 such
that t1 ∈ T (Σ1) and t2 ∈ T (Σ2) may share some symbols. We simply require
that Σ1 ∩ Σ2 = ∅, that is intuitively, the two equational theories do not share
cryptographic operators.
3.1 Factors, Subterms
We denote by sign(·) the function that associates to each term M , the signa-
ture (Σ1 or Σ2) of the function symbol at position ǫ (root position) in M .
For M ∈ N ∪ X , we define sign(M) = ⊥, where ⊥ is a new symbol. The term N
is alien to M if sign(N) 6= sign(M). We now introduce our notion of subterms.
A similar notion is also used in [8].
Definition 3 (factors, subterms). Let M ∈ T (Σ,X ). The factors of M are
the maximal syntactic subterms of M that are alien to M . This set is denoted
Fct(M). The set of its subterms, denoted St(M), is defined recursively by
St(M) = {M} ∪
⋃
N∈Fct(M)
St(N)
These notations are extended as expected to sets of terms and frames. Sometimes
we will use St(φ,M) instead of St(φ) ∪ St(M).
Let M ∈ T (Σ,X ). The size |M | of a term M is defined |M | = 0 if M is a name
or a variable and by 1 +
∑n
i=1 |Ni| if M = C[N1, . . . , Nn] where C is a context
built on Σ1 (or Σ2) and N1, . . .Nn are the factors of M .
Example 4. Consider the equational theories Eenc and Exor. Let M be the term
dec(〈n1 ⊕ 〈n2, n3〉, proj1(n1 ⊕ n2)〉, n3). The term n1 ⊕ 〈n2, n3〉 is a syntactic
subterm of M alien to M since sign(n1 ⊕ 〈n2, n3〉) = Σxor and sign(M) = Σenc.
We have that Fct(M) = {n1 ⊕ 〈n2, n3〉, n1 ⊕ n2, n3} and St(M) = Fct(M) ∪
{M, n1, n2, 〈n2, n3〉}. Moreover, we have that |M | = 4. Indeed, we have that
|M | = 1 + |n1 ⊕ 〈n2, n3〉|+ |n1 ⊕ n2|+ |n3| = 1 + 2 + 1 + 0 = 4
This notion of size of terms is quite non-standard and does not correspond
to the actual size of a term. It is only used for proving our lemmas by induction.
Our complexity results stated later on in the paper relies on the more usual
notion of DAG-size.
3.2 Ordered rewriting
Most of the definitions and results in this subsection are borrowed from [9] since
we use similar techniques. We consider the notion of ordered rewriting defined
in [14], which is a useful tool that has been used (e.g. [5]) for proving correctness
of combination of unification algorithms. Let ≺ be a simplification ordering3
on ground terms assumed to be total and such that the minimum for ≺ is a
name nmin and the constants in Σ are smaller than any non-constant ground
term. We define Σ0 to be the set of the constant symbols of Σ1 and Σ2 plus the
name nmin.
Given a possibly infinite set of equations O we define the ordered rewriting
relation→O by M →O M ′ if and only if there exists an equation N1 = N2 ∈ O,
a position p in M and a substitution τ such that:
M = M [N1τ ]p, M
′ =M [N2τ ]p and N2τ ≺ N1τ .
It has been shown (see [14]) that by applying the unfailing completion proce-
dure to a set of equations E we can derive a (possibly infinite) set of equations O
such that on ground terms:
1. the relations =O and =E are equal on T (Σ),
2. the rewriting system →O is convergent on T (Σ).
Applying unfailing completion to E = E1 ∪ E2, it is easy to notice [5] that the
set of generated equations O is the disjoint union of the two systems O1 and O2
obtained by applying unfailing completion procedures to E1 and to E2 respec-
tively. The relation →O being convergent on ground terms we can define M↓E
(or briefly M↓) as the unique normal form of the ground term M for →O. We
denote by M↓E1 (resp. M↓E2) the unique normal form of the ground term M
for →O1 (resp. →O2). We can easily prove the following lemmas.
Lemma 3. Let M be a ground term such that all its factors are in normal form.
Then
– either M↓ ∈ Fct(M) ∪ {nmin},
– or sign(M) = sign(M↓) and Fct(M↓) ⊆ Fct(M) ∪ {nmin}.
Lemma 4. Let M be a ground term such that sign(M) = Σi (i = 1, 2) and all
its factors are in normal form. Then M↓ = M↓Ei .
3.3 Normalization and replacements
If Π is a set of positions in a term M , we denote by M [Π ← N ] the term
obtained by replacing all term at a position in Π by N . We denote by δN,N ′ the
replacement of the occurrences of N which appears at a subterm position by N ′.
It is easy to establish the following lemma.
3 By definition ≺ satisfies that for all ground terms M, N1, N2, we have N1 ≺ M [N1]
when M is not the empty context and N1 ≺ N2 implies M [N1] ≺ M [N2].
Lemma 5. Let M be a ground term such that all its factors are in normal form.
Let N ∈ Fct(M) and N ′ be a term alien to M . We have that
(MδN,N ′)↓ = ((M↓)δN,N ′)↓).
Example 5. Consider the equational theories Eenc and Exor.
Let M = dec(enc(〈n1 ⊕ n2, n1 ⊕ n2 ⊕ n3〉, n1 ⊕ n2), n1 ⊕ n2), N = n1 ⊕ n2 and
N ′ = n. We have that
– MδN,N ′ = dec(enc(〈n, n1 ⊕ n2 ⊕ n3〉, n), n),
– M↓δN,N ′ = 〈n, n1 ⊕ n2 ⊕ n3〉.
Hence, we have that MδN,N ′↓ =M↓δN,N ′↓ = 〈n, n1 ⊕ n2 ⊕ n3〉.
Let ρ : F → n˜F be a replacement (that is a function) from a finite set of
terms F to names n˜F . Let F = {t1, . . . , tk} be a set such that whenever ti is a
syntactic subterm of tj then i > j. For any term M , we denote by M
ρ the term
obtained by replacing in M (in an order that is consistent with the subterm
relation) any subterm N that is equal modulo E to some N ′ ∈ F by ρ(N ′).
Formally, Mρ = (Mδt1,ρ(t1)) · · · δtk,ρ(tk). This extends in a natural way to sets of
terms, substitutions, frames . . .
Example 6. Consider the equational theories Eenc and Exor and the term t =
dec(〈n1 ⊕ 〈n1 ⊕ n2, n3〉, proj1(n1 ⊕ n2)〉, n1 ⊕ n2). Let ρ2 be the replacement
{n1 ⊕ 〈n1 ⊕ n2, n3〉 → k1, n1 ⊕ n2 → k2}. t
ρ2 = dec(〈k1, proj1(k2)〉, k2).
4 Combining algorithms for deduction
This section is devoted to the (sketch of) proof of the following theorem.
Theorem 1. Let (Σ1,E1) and (Σ2,E2) be two consistent equational theories
such that Σ1 ∩ Σ2 = ∅. If deduction is decidable for (Σ1,E1) and (Σ2,E2) then
deduction is decidable for (Σ1 ∪Σ2,E1 ∪ E2).
Our algorithm consists in reducing the problem to decide whether φ ⊢E M
(E = E1 ∪ E2) to several deduction problems. Each of them will be solved either
in the equational theory E1 or in the theory E2. Our procedure first relies on the
existence of a local proof of φ ⊢M which involves only terms in St(φ,M).
Lemma 6 (locality lemma). Let φ = νn˜.σ be a frame and M be a ground
term built on Σ such that terms in φ and M are in normal form. If φ ⊢E M
then there exists a term ζ built on Σ such that fn(ζ)∩ n˜ = ∅ and ζσ =E M , and
for all ζ′ ∈ St(ζ), we have that
– ζ′σ↓ ∈ St(φ, ζσ↓) ∪ {nmin}, and
– ζ′σ↓ ∈ St(φ) ∪ {nmin} when sign(ζ′) 6= sign(ζ′σ↓).
Example 7. Consider the theory E = Eenc ∪ Exor, the term M = n2 ⊕ n3 and
the frame φ = νn2, n3.{enc(〈n1⊕n2,n3〉,n4)/x1}. We have that φ ⊢E M . The recipe
ζ = proj1(dec(x1, n4)) ⊕ proj2(dec(x1, n4)) ⊕ n1 satisfies the conditions given in
Lemma 6.
We also need to decide deducibility in the theory E1 (resp. E2) for terms built
on Σ1 ∪ Σ2. Therefore, we show that we can abstract the alien factors by new
names.
Lemma 7. Let φ be a frame and M be a ground term built on Σ such that terms
in φ andM are in normal form. Let F2 = {N | N ∈ St(φ,M) and sign(N) = Σ2},
n˜F2 be a set of names, distinct from the names occurring in φ and M , of the
same cardinality as F2 and ρ2 : F2 → n˜F2 be a replacement. We have that
φ ⊢E1 M if and only if νn˜F2 .(φ ⊢E1 M)
ρ2 .
A similar result holds by inverting the indices 1 and 2.
We show the lemmas above by using Lemmas 3, 4 and 5 stated in Section 3.
Then, our algorithm proceeds by saturation of φ by the subterms in St(φ,M)
which are deducible either in (Σ1,E1) or in (Σ2,E2).
Algorithm. Given a frame φ and a term M , we saturate φ as follows.
– We start with φ0 = φ ∪ {nmin}.
– For any term T ∈ St(φ,M), if νn˜F2 .(φk ⊢E1 T )
ρ2 or νn˜F1 .(φk ⊢E2 T )
ρ1 where
F1, F2, ρ1, ρ2 are defined like in Lemma 7, we add T in the set of deducible
subterms: φk+1 = φk ∪ {T }.
We start the procedure over until there are no more T ∈ St(φ,M) such that
νn˜F2 .(φk ⊢E1 M)
ρ2 or νn˜F1 .(φk ⊢E1 M)
ρ1 . Let φ∗ be the saturated set. Using
Lemma 6, we can show that φ∗ contains exactly the set of all deducible subterms
of St(φ,M). We deduce that φ ⊢E1∪E2 M if and only if M ∈ φ
∗.
Example 8. Consider again Example 7, we successively add in the frame the
terms n1 ⊕ n2, n3 and n2 ⊕ n3.
Complexity. Our reduction is polynomial. Our notion of size for terms was in-
troduced for proving our lemmas by induction. It does not correspond to the
actual size of a term since our notion of subterms does not take into account in-
termediate syntactic subterms. In addition, complexity results for deduction and
static equivalence are usually given as functions of the DAG-size of the terms.
Thus we express the complexity of our procedure as function of the DAG-size.
The DAG-size of a term T , denoted tdag(T ), is the number of distinct syntactic
subterms. We assume that φ ⊢Ei M can be decided in time fi(tdag(φ)+ tdag(M))
where fi : N → R, i ∈ {1, 2}. Saturating φ requires at most |St(φ,M)| ≤
tdag(φ) + tdag(M) steps. At each step, we check whether νn˜F2 .(φk ⊢E1 T )
ρ2 or
νn˜F1 .(φk ⊢E2 T )
ρ1 for each T ∈ St(φ,M). We deduce that φ∗ can be computed in
time O((tdag(φ)+ tdag(M))2[f1(2(tdag(φ)+ tdag(M)))+f2(2(tdag(φ)+ tdag(M)))]).
In particular, if deciding ⊢Ei can be done in polynomial time for i ∈ {1, 2} then
deciding ⊢E1∪E2 is also polynomial.
5 Combination algorithm for static equivalence
This section is devoted to the (sketch of) proof of the following theorem.
Theorem 2. Let (Σ1,E1) and (Σ2,E2) be two equational theories such that
Σ1 ∩ Σ2 = ∅. If deduction and static equivalence are decidable for (Σ1,E1)
and (Σ2,E2) then static equivalence is decidable for (Σ1 ∪Σ2,E1 ∪ E2).
We more precisely show that whenever static equivalence is decidable for
(Σ1,E1) and (Σ2,E2) and deduction is decidable for (Σ,E), then static equiva-
lence is decidable for (Σ,E) where Σ = Σ1 ∪ Σ2 and E = E1 ∪ E2. Thanks to
our combination result for deduction (Theorem 1), we know it is sufficient for
deduction to be decidable for (Σ1,E1) and (Σ2,E2). Note that the decidability
of ⊢Ei is not necessarily a consequence of the decidability of ≈Ei . The encoding
proposed in [2] works only when there exists a free function symbol in Σ1.
Our decision procedure works as follows. We first add to the frames all their
deducible subterms. This is the reason why we require the decidability of ⊢E.
Then, we show that to decide whether φ1 |= EqE(φ2), it is sufficient to check
whether φ1 |= EqE1(φ2) and φ1 |= EqE2(φ2). Lastly, we abstract alien subterms
by fresh names in order to reduce the signature.
5.1 Step 1: adding deducible subterms to the frames
Given φ1 = νn˜.σ1 and φ2 = νn˜.σ2 such that dom(φ1) = dom(φ2), we define the
frame φ2
φ1
by extending φ2 with some of its deducible terms: those for which
there exists a recipe ζ such that ζσ1↓ is a subterm of φ1.
φ2
φ1 def
= φ2 ∪ {
ζ1σ2↓/y1, . . . ,
ζnσ2↓ /yn}.
where yi is a fresh variable and ζi is a recipe of ti in φ1, i.e. ζiσ1↓ = ti and
fn(ζi) ∩ n˜ = ∅ such that:
– ti ∈ St(φ1) ∪ {nmin}, and
– ti is not in the image of φ1, that is ti 6= xσ for any x ∈ dom(φ1).
Example 9. Let E = Eenc and consider the frames φ2 = νn1, n2.{enc(n1,n2)/x1}
and φ1 = νn1, n2.{〈n1,n2〉/x1}. We have that
φ2
φ1
= νn1, n2.{
enc(n1,n2)/x1 ,
proj
1
(enc(n1,n2)) /y1 ,
proj
2
(enc(n1,n2)) /y2 ,
nmin /y3}
The three corresponding recipes are proj1(x1), proj2(x1) and nmin.
In particular, we have that φ
φ
= φ ∪ {t1/y1, . . . ,
tn /yn} where ti are the
deducible subterms of φ. When φ
φ
= φ, we say that a frame φ contains all its
deducible subterms.
Example 10. Consider the frame φ = νn2, n3.{enc(〈n1⊕n2,n3〉,n4)/x1} given in Ex-
ample 7 and let E = Eenc ∪ Exor. We have that
φ
φ
= νn2, n3.{
enc(〈n1⊕n2,n3〉,n4)/x1,
n1⊕n2/y1 ,
n2/y2 ,
n3/y3,
n1/y4 ,
n4/y5 ,
nmin/y6}.
The following lemma ensures that extending frames preserves static equivalence.
Lemma 8. Let φ1 and φ2 be two frames such that dom(φ1) = dom(φ2). For
any frame ψ such that dom(ψ) = dom(φ1), we have that
φ2
ψ
|= EqE(φ1
ψ
) if and only if φ2 |= EqE(φ1).
In particular, we deduce that φ1 ≈E φ2 if and only if φ1
φ2
≈E φ2
φ2
. Since φ1
φ2
may not contain all its deducible subterms, we need to extend again the frames
with the deducible subterms of φ1
φ2
. However, (φ2
φ2
)
(φ1
φ2)
might not contains
its deducible subterms anymore. Lemma 9 states that actually, extending a frame
preserves the property of containing all its deducible subterms. The proof of this
lemma relies on the locality lemma (Lemma 6) stated in Section 4.
Lemma 9. Let φ be a frame such that φ
φ
= φ and ψ be any frame such that
dom(ψ) = dom(φ). Let φ′ = φ
ψ
. We have that φ′ contains all its deducible
subterms, i.e. φ′
φ′
= φ′.
Thanks to Lemma 8, we deduce that deciding whether φ1 ≈E φ2 is thus
equivalent to deciding whether (φ1
φ2
)
(φ1
φ2)
≈E (φ2
φ2
)
(φ1
φ2)
where (φ1
φ2
)
(φ1
φ2 )
and (φ2
φ2
)
(φ1
φ2 )
contain all their deducible subterms.
Computing φ
ψ
. To compute φ
ψ
, we need to compute the set of deducible sub-
terms of ψ. Moreover, for each deducible subterm T of ψ, we also need to compute
a recipe ζT such that (ζT =E T )ψ. Such a recipe can usually be deduced from
the decision algorithm applied to ψ ⊢E T [2]. However, if it is not the case, once
we know that ψ ⊢E T (using the decision algorithm), we can enumerate all the
recipes until we find ζ such that (ζT =E T )ψ.
5.2 Step 2: Checking for equalities in EqEi
Checking for φ ≈E ψ is equivalent to checking for φ |= EqE(ψ) and ψ |= EqE(φ).
We show that checking for ψ |= EqE(φ) can actually be done using only equalities
in E1 and E2.
Proposition 1. Let φ and ψ be two frames such that φ
φ
= φ. We have that
ψ |= EqE(φ) if and only if ψ |= EqE1(φ) and ψ |= EqE2(φ).
It is straightforward that ψ |= EqE(φ) implies ψ |= EqE1(φ) and ψ |= EqE2(φ).
The converse is more difficult. We first introduce some ordering on pairs of terms.
We have (M,N) < (M ′, N ′) if
(max(|M |, |N |), |M |+ |N |) <lex (max(|M
′|, |N ′|), |M ′|+ |N ′|)
where <lex is the lexicographic order. Now, assuming that ψ |= EqE1(φ) and
ψ |= EqE2(φ), we show by induction on the order on (M,N) that (M,N) ∈ EqE(φ)
implies (M,N) ∈ EqE(ψ). The key lemma for the induction step is as follows.
Lemma 10. Let φ and ψ be two frames such that φ
φ
= φ, ψ |= EqE1(φ) and
ψ |= EqE2(φ). Let (M,N) ∈ EqE(φ) and assume that for all terms M
′, N ′
(M ′, N ′) < (M,N) implies (M ′ =E N
′)φ⇒ (M ′ =E N
′)ψ.
Let φ = νn˜.σ such that (fn(M) ∪ fn(N)) ∩ n˜ = ∅. If there exists ζ ∈ St(M)
such that sign(ζσ) 6= sign(ζσ↓), then there exists M1 such that |M1| < |M |,
(M =E M1)φ and (M =E M1)ψ.
5.3 Step 3: Abstraction of alien subterms
Since ψ and φ are built on Σ (and not on Σi), we cannot check whether ψ ≈Ei φ
using the decision algorithm for ≈Ei . We show however that we can simply
abstract the alien subterms by fresh names.
Lemma 11. Let φ and ψ be two frames built on Σ and in normal form. Let F2 =
{N ∈ St(φ∪ψ) | sign(N) = Σ2}, n˜F2 be a set of names, distinct from the names
occurring in φ and ψ, of same cardinality as F2 and ρ2 : F2 → n˜F a replacement.
We have that
φ |= EqE1(ψ) if and only if νn˜F2 .φ
ρ2 |= EqE1(νn˜F2 .ψ
ρ2)
A similar result holds when inverting the indices 1 and 2.
5.4 Combination algorithm for static equivalence
To sum up, checking for φ1 ≈E φ2 is performed in two steps:
1. Computing φ′1 = (φ1
φ2
)
(φ1
φ2 )
and φ′2 = (φ2
φ2
)
(φ1
φ2 )
.
2. checking for νn˜F2 .(φ
′
1)
ρ2 ≈E1 νn˜F2 .(φ
′
2)
ρ2 and νn˜F1 .(φ
′
1)
ρ1 ≈E2 νn˜F1 .(φ
′
2)
ρ1 .
Complexity. The complexity of the procedure mostly depends on the complexity
of computing φ′1 and φ
′
2 and on their size. In particular, it depends on the time
for computing recipes and on their size. Assume that
– φ ⊢E M can be decided in f3(tdag(φ) + tdag(M)),
– a recipe ζ such that (ζ =E M)φ can be computed in f4(tdag(φ) + tdag(M))
and that we control the size of the recipe tdag(ζ) ≤ f5(tdag(φ) + tdag(M))
– φ ≈Ei ψ can be decided in fi(tdag(φ) + tdag(M)) for i ∈ {1, 2}.
Then it is easy to check that φ ≈E ψ can be decided in time polynomial in
the fi(tdag(φ) + tdag(M)) with i ∈ {1, . . . , 5}. In particular, if the fi are polyno-
mial, ≈E is decidable in polynomial time.
6 Application to new decidability results
Deduction and static equivalence are decidable in polynomial time (in the DAG-
size of the inputs) for any convergent subterm theory [2]. A convergent subterm
theory is an equational theory induced by a finite set of equations of the form
u = v where v is a subterm of u or v is a constant and such that the associate
rewriting system is convergent. For example, Eenc is a convergent subterm theory.
From [12], we also know that deduction and static equivalence are decidable in
polynomial time for the equational theory Exor of the exclusive or and also for the
theory EAG of Abelian group. Applying Theorems 1 and 2, we get the following
new decidability result.
Proposition 2. Let E be a convergent subterm theory. Deduction and static
equivalence are decidable in polynomial time for E ∪ Exor and E ∪ EAG.
Since deduction and static equivalence are also decidable for the theories of
blind signature, homomorphic encryption, exclusive or, and other associative-
commutative functions [2], we get that deduction and static equivalence are
decidable for any combination of these theories.
As further work, we consider extending our combination result for non dis-
joint theories. This would allow us to consider some fragments of the modular ex-
ponentiation theory such as the Diffie-Hellman one, i.e. the axioms exp(x, 1) = x
and exp(exp(x, y), z) = exp(x, y × z) where × is an Abelian group operator; or
to take into account the equation exp(x, y) · exp(x, z) = exp(x, y + z). We might
use for example a notion of hierarchy between theories like in [10].
References
1. M. Abadi, M. Baudet, and B. Warinschi. Guessing attacks and the computational
soundness of static equivalence. In Proceedings of the 9th International Conference
on Foundations of Software Science and Computation Structures (FOSSACS’06),
pages 398–412, 2006.
2. M. Abadi and V. Cortier. Deciding knowledge in security protocols under equa-
tional theories. Theoretical Computer Science, 387(1-2):2–32, November 2006.
3. M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In
Proceedings of the 28th ACM Symposium on Principles of Programming Languages
(POPL’01), pages 104–115. ACM, 2001.
4. M. Arnaud, V. Cortier, and S. Delaune. Combining algorithms for deciding knowl-
edge in security protocols. Research Report 6118, INRIA, Feb. 2007. 28 pages.
5. F. Baader and K. U. Schulz. Unification in the union of disjoint equational theories:
Combining decision procedures. Journal of Symbolic Computation, 21(2):211–243,
1996.
6. M. Baudet, V. Cortier, and S. Kremer. Computationally sound implementations
of equational theories against passive adversaries. In Proceedings of the 32nd In-
ternational Colloquium on Automata, Languages and Programming (ICALP’05),
volume 3580 of LNCS, pages 652–663, Lisboa (Portugal), 2005. Springer-Verlag.
7. Y. Chevalier, R. Ku¨sters, M. Rusinowitch, and M. Turuani. An NP decision pro-
cedure for protocol insecurity with XOR. In Proceedings of 18th Annual IEEE
Symposium on Logic in Computer Science (LICS’03), Ottawa (Canada), 2003.
IEEE Comp. Soc. Press.
8. Y. Chevalier and M. Rusinowitch. Combining intruder theories. In Proceed-
ings of the 32nd International Colloquium on Automata, Languages and Program-
ming (ICALP’05), volume 3580 of LNCS, pages 639–651, Lisbon (Portugal), 2005.
Springer.
9. Y. Chevalier and M. Rusinowitch. Combining intruder theories. Technical Report
5495, INRIA, 2005. http://www.inria.fr/rrrt/rr-5495.html.
10. Y. Chevalier and M. Rusinowitch. Hierarchical combination of intruder theories.
In Proceedings of the 17th International Conference on Rewriting Techniques and
Applications, (RTA’06), volume 4098 of LNCS, pages 108–122, Seattle (WA), 2006.
Springer.
11. H. Comon-Lundh and V. Shmatikov. Intruder deductions, constraint solving and
insecurity decision in presence of exclusive or. In Proceedings of 18th Annual IEEE
Symposium on Logic in Computer Science (LICS’03), Ottawa (Canada), 2003.
IEEE Comp. Soc. Press.
12. V. Cortier and S. Delaune. Deciding knowledge in security protocols for monoidal
equational theories. In Proc. of the Joint Workshop on Foundations of Com-
puter Security and Automated Reasoning for Security Protocol Analysis (FCS-
ARSPA’07), Wroc law, Poland, 2007. To appear.
13. S. Delaune. Easy intruder deduction problems with homomorphisms. Information
Processing Letters, 97(6):213–218, Mar. 2006.
14. N. Dershowitz and J.-P. Jouannaud. Rewrite systems. In Handbook of Theoretical
Computer Science, volume B, chapter 6. Elsevier, 1990.
15. P. Lafourcade, D. Lugiez, and R. Treinen. Intruder deduction for the equational
theory of Abelian groups with distributive encryption. Information and Computa-
tion, 2007. To appear.
16. Y. Lakhnech, L. Mazare´, and B. Warinschi. Soundness of symbolic equivalence for
modular exponentiation. In Proceedings of the Second Workshop on Formal and
Computational Cryptography (FCC’06), pages 19–23, Venice, Italy, July 2006.
17. G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using
FDR. In Proceedings of the 2nd International Workshop on Tools and Algorithms
for the Construction and Analysis of Systems (TACAS’96), volume 1055 of LNCS,
pages 147–166, Berlin (Germany), 1996. Springer-Verlag.
18. J. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic
protocol analysis. In Proceedings of the 8th ACM Conference on Computer and
Communications Security (CCS’01). ACM Press, 2001.
19. L. C. Paulson. The inductive approach to verifying cryptographic protocols. Jour-
nal of Computer Security, 6(1-2):85–128, 1998.
20. M. Rusinowitch and M. Turuani. Protocol insecurity with a finite number of ses-
sions, composed keys is NP-complete. Theoretical Computer Science, 1-3(299):451–
475, 2003.
21. M. Schmidt-Schauß. Unification in a combination of arbitrary disjoint equational
theories. Journal of Symbolic Computation, 8(1/2):51–99, 1989.
