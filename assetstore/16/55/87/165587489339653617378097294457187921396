
This Page Intentionally No Longer Blank
Basic Proof Theory
Second Edition
A.S. Troelstra
University of Amsterdam
H. Schwichtenberg
University of Munich
7.1r
CAMB RID GE
UNIVERSITY PRESS
PUBLISHED BY THE PRESS SYNDICATE OF THE UNIVERSITY OF CANIBRIDGE
The Pitt Building, Trumpington Street, Cambridge, United Kingdom
CAMBRIDGE UNIVERSITY PRESS
The Edinburgh Building, Cambridge CB2 2RU, UK http://www.cup.cam.ac.uk
40 West 20th Street, New York, NY 10011-4211, USA http://www.cup.org
10 Stamford Road, Oakleigh, Melbourne 3166, Australia
Ruiz de Alarcón 13, 28014 Madrid, Spain
© Cambridge University Press 1996, 2000
This book is in copyright. Subject to statutory exception
and 
may take place without
the written permission of Cambridge University Press.
First published 1996
Second edition 2000
Printed in the United Kingdom at the University Press, Cambridge
Typeset by the author in Computer Modern 10/13pt, in D.TEX2E [EPC]
A catalogue record of this book is available from the British Library
Library of Congress Cataloguing in Publication data
ISBN 0 521 77911 1 paperback
Contents
Preface ix
1 Introduction 1
1.1 Preliminaries 2
1.2 Simple type theories 10
1.3 Three types of formalism 22
2 N-systems and H-systems 35
2.1 Natural deduction systems 35
2.2 Ni as a term calculus 45
2.3 The relation between C, I and M 48
2.4 Hilbert systems 51
2.5 Notes 55
3 Gentzen systems 60
3.1 The Gl- and G2-systems 61
3.2 The Cut rule 66
3.3 Equivalence of G- and N-systems 68
3.4 Systems with local rules 75
3.5 Absorbing the structural rules 77
3.6 The one-sided systems for C 85
3.7 Notes 87
4 Cut elimination with applications 92
4.1 Cut elimination 92
4.2 Applications of cutfree systems 105
4.3 A more efficient calculus for Ip 112
4.4 Interpolation and definable functions 116
4.5 Extensions of Gl-systems 126
4.6 Extensions of G3-systems 130
4.7 Logic with equality 134
vi Contents
4.8 The theory of apartness 136
4.9 Notes 139
5 Bounds and permutations 147
5.1 Numerical bounds on cut elimination 148
5.2 Size and cut elimination 157
5.3 Permutation of rules for classical logic 164
5.4 Permutability of rules for Gli 171
5.5 Notes 176
6 Normalization for natural deduction 178
6.1 Conversions and normalization 178
6.2 The structure of normal derivations 184
6.3 Normality in G-systems and N-systems 189
6.4 Extensions with simple rules 197
6.5 E-logic and ordinary logic 199
6.6 Conservativity of predicative classes 203
6.7 Conservativity for Horn clauses 205
6.8 Strong normalization for -1\Ini and A, 210
6.9 Hyperexponential bounds 215
6.10 A digression: a stronger conversion 217
6.11 Orevkov's result 219
6.12 Notes 223
7 Resolution 230
7.1 Introduction to resolution 230
7.2 Unification 232
7.3 Linear resolution 236
7.4 From Gentzen system to resolution 243
7.5 Resolution for Ip 246
7.6 Notes 255
8 Categorical logic 258
8.1 Deduction graphs 259
8.2 Lambda terms and combinators 264
8.3 Decidability of equality 271
8.4 A coherence theorem for CCC's 274
8.5 Notes 281
9 Modal and linear logic 283
9.1 The modal logic S4 284
Contents vii
9.2 Embedding intuitionistic logic into S4 288
9.3 Linear logic 292
9.4 A system with privileged formulas 300
9.5 Proofnets 303
9.6 Notes 313
10 Proof theory of arithmetic 317
10.1 Ordinals below eo 318
10.2 Provability of initial cases of TI 321
10.3 Normalization with the omega rule 325
10.4 Unprovable initial cases of TI 330
10.5 TI for non-standard orderings 337
10.6 Notes 342
11 Second-order logic 345
11.1 Intuitionistic second-order logic 345
11.2 Ip2 and A2 349
11.3 Strong normalization for Ni2 351
11.4 Encoding of A2 Q into A2 357
11.5 Provably recursive functions of HA2 358
11.6 Notes 364
Solutions to selected exercises 367
Bibliography 379
Symbols and notations 404
Index 408

Preface
Preface to the first edition
The discovery of the set-theoretic paradoxes around the turn of the century,
and the resulting uncertainties and doubts concerning the use of high-level
abstractions among mathematicians, led D. Hilbert to the formulation of his
programme: to prove the consistency of axiomatizations of the essential parts
of mathematics by methods which might be considered as evident and reliable
because of their elementary combinatorial ("finitistic" ) character.
Although, by Gödel's incompleteness results, Hilbert's programme could
not be carried out as originally envisaged, for a long time variations of
Hilbert's programme have been the driving force behind the development of
proof theory. Since the programme called for a complete formalization of the
relevant parts of mathematics, including the logical steps in mathematical ar-
guments, interest in proofs as combinatorial structures in their own right was
awakened. This is the subject of structural proof theory; its true beginnings
may be dated from the publication of the landmark-paper Gentzen [1935].
Nowadays there are more reasons, besides Hilbert's programme, for study-
ing structural proof theory. For example, automated theorem proving implies
an interest in proofs as combinatorial structures; and in logic programming,
formal deductions are used in computing.
There are several monographs on proof theory (Schiitte [1960,1977], Takeuti
[1987], Pohlers [1989]) inspired by Hilbert's programme and the questions
this engendered, such as "measuring" the strength of subsystems of analy-
sis in terms of provable instances of transfinite induction for definable well-
orderings (more precisely, ordinal notations). Pohlers [1989] is particularly
recommended as an introduction to this branch of proof theory.
Girard [1987b] presents a wider panorama of proof theory, and is not easy
reading for the beginner, though recommended for the more experienced.
The present text attempts to fill a lacuna in the literature, a gap which
exists between introductory books such as Heindorf [1994], and textbooks
on mathematical logic (such as the classic Kleene [1952a], or the recent van
Dalen [1994]) on the one hand, and the more advanced monographs mentioned
above on the other hand.
Our text concentrates on the structural proof theory of first-order logic and
ix
Preface
its applications, and compares different styles of formalization at some length.
A glimpse of the proof theory of first-order arithmetic and second-order logic
is also provided, illustrating techniques in relatively simple situations which
are applied elsewhere to far more complex systems.
As preliminary knowledge on the part of the reader we assume some fa-
miliarity with first-order logic as may be obtained from, for example, van
Dalen [1994]. A slight knowledge of elementary recursion theory is also help-
ful, although not necessary except for a few passages. Locally, other prelimi-
nary knowledge will be assumed, but this will be noted explicitly.
Several short courses may be based on a suitable selection of the material.
For example, chapters 1, 2, 6 and 10 develop the theory of natural deduc-
tion and lead to a proof of the "classical" result of Gentzen on the relation
between the ordinal 60 and first-order arithmetic. A course based on the
first five chapters concentrates on Gentzen systems and cut elimination with
(elementary) applications.
There are many interconnections between the present text and Hindley
[1997]; the latter concentrates on type-assignment systems (systems of rules
for assigning types to untyped lambda terms) which are not treated here. In
our text we only consider theories with "rigid typing", where each term and
all of its subterms carry along a fixed type. Hindley's book may be regarded
as a companion volume providing a treatment of deductions as they appear
in type-assignment systems.
We have been warned by colleagues from computer science that references
to sources more than five years old will make a text look outdated. For readers
inclined to agree with this we recommend contemplation of the following
platitudes: (1) a more recent treatment of a topic is not automatically an
improvement over earlier treatments; (2) if a subject is worthwhile, it will
in due time acquire a history going back more than five years; (3) results of
lasting interest do exist; (4) limiting the horizon to five years entails a serious
lack of historical perspective.
Numbered exercises are scattered throughout the text. These are immedi-
ately recognizable as such, since they have been set in smaller type and have
been marked with the symbol 4.
Many of these exercises are of a routine character ("complete the proof of
this lemma"). We believe that (a) such exercises are very helpful in famil-
iarizing the student with the material, and (b) listing these routine exercises
explicitly makes it easy for a course leader to assign definite tasks to the
students.
At the end of each chapter, except the first, there is a section called "Notes".
There we have collected historical credits and suggestions for further reading;
also we mention other work related to the topic of the chapter. These notes
do not pretend to give a history of the subject, but may be of help in gaining
some historical perspective, and point the way to the sources. There is no
Preface xi
attempt at completeness; with the subject rapidly expanding this has become
well-nigh impossible.
The references in the index to names of persons concern in the majority of
cases a citation of a publication. In case of publications with more than one
author, only the first author's name is indexed. Occurrences of author names
in the bibliography have not been indexed. There is a separate list, where
symbols and notations of more than local significance have been indexed.
The text started as a set of course notes for part of a course "Introduction
to Constructivism and Proof Theory" for graduate students at the University
of Amsterdam. When the first author decided to expand these notes into a
book, he felt that at least some of the classical results on the proof theory
of first-order arithmetic ought to be included; hence the second author was
asked to become coauthor, and more particularly, to provide a chapter on
the proof theory of first-order arithmetic. The second author's contribution
did not restrict itself to this; many of his suggestions for improvement and
inclusion of further results have been adopted, and a lot of material from his
course notes and papers has found its way into the text.
We are indebted for comments and information to K. R. Apt, J. F. A. K. van
Benthem, H. C. Doets, J. R. Hindley, G. E. Mints, V. Sanchez, S. V. Solovjov,
A. Weiermann; the text was prepared with the help of some useful Latex
macros for the typesetting of prooftrees by S. Buss and for the typesetting of
ordinary trees by D. Roorda. M. Behrend of the Cambridge University Press
very carefully annotated the near-final version of the text, expunging many
blemishes and improving typographical consistency.
A msterdam/Miinchen A. S. Troelstra
Spring 1996 H. Schwichtenberg
Preface to the second edition
In preparing this revised edition we used the opportunity to correct many
errata in the first edition. Moreover certain sections were rewritten and some
new material inserted, especially in chapters 3-6. The principal changes are
the following.
Chapter 1: section 1.3 has been largely rewritten. Chapter 2: the material
in 2.1.10 is new. Chapter 3: more prominence has been given to a Kleene-style
variant of the G3-systems (3.5.11), and multi-succedent versions of G3[mi]
are defined in the body of the text (3.5.10). A general definition of systems
with local rules (3.4) is also new. Chapter 4: the proof of cut elimination
for G3-systems (4.1.5) has been completely rewritten, and a sketch of cut
elimination for the systems m-G3[mi] has been added (4.1.10). There are new
sections on cut elimination for extensions of G3-systems, with applications
to predicate logic with equality and the intuitionistic theory of apartness.
Chapter 5: a result on the growth of size of proofs in propositional logic
xii Preface
under cut elimination (5.2) has been included. Chapter 6: extensions of N-
systems with extra rules, with an application to E-logic, are new; the section
on E-logic replaces an inadequate treatment of the same results in chapter
4 of the first edition. Chapter 11: a new proof of strong normalization for
A2. New are also the "Solutions to selected exercises" ; these are intended
as a help to those readers who study the text on their own. Exercises for
which a (partial) solution is provided are marked with *. The updating of
the bibliography primarily concerns the parts of the text which have been
revised.
In a review of the first edition it has been noted that complexity-theoretic
aspects are largely absent. We felt that this area is so vast that it would
require a separate monograph of its own, to be written by an expert in the
area. Another complaint was that our account was lacking in motivation and
philosophical background. This has not been remedied in the present edition,
although a few words of extra explanation have been added here and there.
A typically philosophical problem we did not deal with is the question: when
are two proofs to be considered equal? We doubt, however, whether this
question will ever have a simple answer; it may well be that there are many
answers, depending on aims and points of view.
One terminological change deserves to be noted: we changed "contraction"
(in the sense of a step in transforming terms of type theory and proofs in natu-
ral deduction), into "conversion". Similarly, "contracts to" and "contractum"
have been replaced by "converts to" and "conversum" repectively. On the
other hand "contraction" as the name of a structural rule in Gentzen systems
is maintained. See under the remarks at the end of 1.2.5 for a motivation.
We are again indebted to many people for comments and corrections, in par-
ticular H. van Ditmarsch, L. Gordeev, J. R. Hindley, R. Matthes, G. E. Mints,
and the students in our classes. Special thanks are due to Sara Negri, who
unselfishly offereI to read carefully a large part of the text; in this she has
been assisted by an von Plato. Their comments led to many improvements.
For the remaining defects of the text the authors bear sole responsibility.
Amsterdam/Miinchen A. S. Troelstra
March 2000 H. Schwichtenberg
Chapter 1
Introduction
Proof theory may be roughly divided into two parts: structural proof theory
and interpretational proof theory. Structural proof theory is based on a com-
binatorial analysis of the structure of formal proofs; the central methods are
cut elimination and normalization.
In interpretational proof theory, the tools are (often semantically moti-
vated) syntactical translations of one formal theory into another. We shall
encounter examples of such translations in this book, such as the Gödel-
Gentzen embedding of classical logic into minimal logic (2.3), and the modal
embedding of intuitionistic logic into the modal logic S4 (9.2). Other well-
known examples from the literature are the formalized version of Kleene's
realizability for intuitionistic arithmetic and Gödel's Dialectica interpretation
(see, for example, Troelstra [1973]).
The present text is concerned with the more basic parts of structural proof
theory. In the first part of this text (chapters 2-7) we study several formal-
izations of standard logics. "Standard logics", in this text, means minimal,
intuitionistic and classical first-order predicate logic. Chapter 8 describes
the connection between cartesian closed categories and minimal conjunction-
implication logic; this serves as an example of the applications of proof theory
in category theory. Chapter 9 illustrates the extension to other logics (namely
the modal logic S4 and linear logic) of the techniques introduced before in
the study of standard logics. The final two chapters deal with first-order
arithmetic and second-order logic respectively.
The first section of this chapter contains notational conventions and def-
initions, to be consulted only when needed, so a quick scan of the contents
will suffice to begin with. The second section presents a concise introduction
to simple type theory, with rigid typing; the parallel between (extensions of)
simple type theory and systems of natural deduction, under the catch-phrase
"formulas-as-types", is an important theme in the sequel. Then follows a
brief informal introduction to the three principal types of formalism we shall
encounter later on, the N-, H- and G-systems, or Natural deduction, Hilbert
systems, and Gentzen systems respectively. Formal definitions of these sys-
tems will be given in chapters 2 and 3.
1
2 Chapter I. Introduction
1.1 Preliminaries
The material in this section consists primarily of definitions and notational
conventions, and may be skipped until needed.
Some very general abbreviations are "iff" for "if and only if" , "IH" for "in-
duction hypothesis", "w.l.o.g." for "without loss of generality". To indicate
literal identity of two expressions, we use E. (In dealing with expressions
with bound variables, this is taken to be literal identity modulo renaming of
bound variables; see 1.1.2 below.)
The symbol E is used to mark the end of proofs, definitions, stipulations
of notational conventions.
IN is used for the natural numbers, zero included. Set-theoretic notations
such as E, C are standard.
1.1.1. The language of first-order predicate logic
The standard language considered contains V, A, -4,1, V, 3 as primitive logi-
cal operators (± being the degenerate case of a zero-place logical operator, i.e.
a logical constant), countably infinite supplies of individual variables, n-place
relation symbols for all n E IN, symbols for n-ary functions for all n E IN.
0-place relation symbols are also called proposition letters or proposition vari-
ables; 0-argument function symbols are also called (individual) constants.
The language will not, unless stated otherwise, contain = as a primitive.
Atomic formulas are formulas of the form Rti tn, R a relation symbol,
t1, ,t,, individival terms, 1 is not regarded as atomic. For formulas which
are either atomic or I_ we use the term prime formula
We use certain categories of letters, possibly with sub- or superscripts or
primed, as metavariables for certain syntactical categories (locally different
conventions may be introduced):
x, y, z, u, y, w for individual variables;
f, g,h for arbitrary function symbols;
c, d for individual constants;
t,s,r for arbitrary terms;
P,Q for atomic formulas;
R for relation symbols of the language;
A, B,C,D,E,F for arbitrary formulas in the language.
1.1. Preliminaries 3
NOTATION. For the countable set of proposition variables we write 'PV . We
introduce abbreviations:
A B :=(A+ B) A (B * A),
:= A * 1,
T
In this text, T ("truth" ) is sometimes added as a primitive. If F is a finite
sequence A1, , An of formulas, A F is the iterated conjunction (... (A1 A
A2) A .A), and V F the iterated disjunction (... (A1 V A2) V ... An). If I'
is empty, we identify V r with 1, and A r with T.
NOTATION. (Saving on parentheses) In writing formulas we save on paren-
theses by assuming that V, ], bind more strongly than V, A, and that in
turn V, A bind more strongly than -4, Outermost parentheses are also
usually dropped. Thus A A B + C is read as ((A A (B)) C). In the
case of iterated implications we sometimes use the short notation
Ai -4 A2 . . . An_1 + An for Ai > (A2 + (An_i An) ...).
We also save on parentheses by writing e.g. Rxyz, Rt0t1t2 instead of R(x, y, z),
R(to, ti, t2), where R is some predicate letter. Similarly for a unary function
symbol with a (typographically) simple argument, so f x for f (x), etc. In this
case no confusion will arise. But readability requires that we write in full
R(f x,gy,hz), instead of Rf xgyhz.
1.1.2. Substitution, free and bound variables
Expressions ', E' which differ only in the names of bound variables will be
regarded by us as identical. This is sometimes expressed by saying that E
and E' are a-equivalent. In other words, we are only interested in certain
equivalence classes of (the concrete representations of) expressions, expres-
sions "modulo renaming of bound variables". There are methods of finding
unique representatives for such equivalence classes, for example the namefree
terms of de Bruijn [1972]. See also Barendregt [1984, Appendix C.
For the human reader such representations are less convenient, so we shall
stick to the use of bound variables. But it should be realized that the issues of
handling bound variables, renaming procedures and substitution are essential
and non-trivial when it comes to implementing algorithms.
In the definition of "substitution of expression E' for variable x in expression
C", either one requires that no variable free in E'' becomes bound by a variable-
binding operator in ', when the free occurrences of x are replaced by E' (also
expressed by saying that there must be no "clashes of variables"), "E' is free
for x in C", or the substitution operation is taken to involve a systematic
renaming operation for the bound variables, avoiding clashes. Having stated
4 Chapter 1. Introduction
that we are only interested in expressions modulo renaming bound variables,
we can without loss of generality assume that substitution is always possible.
Also, it is never a real restriction to assume that distinct quantifier occur-
rences are followed by distinct variables, and that the sets of bound and free
variables of a formula are disjoint.
NOTATION. "FV" is used for the (set of) free variables of an expression; so
FV(t) is the set of variables free in the term t, FV(A) the set of variables free
in formula A etc.
E[x It] denotes the result of substituting the term t for the variable x in the
expression E. Similarly, E[X7r] is the result of simultaneously substituting
the terms E = t1,... , tn for the variables X' x1,... , xn respectively.
For substitutions of predicates for predicate variables (predicate symbols)
we use essentially the same notational conventions. If in a formula A, con-
taining an n-ary relation variable Xn, Xn is to be replaced by a formula
B, seen as an n-ary predicate of n of its variables X' = x1,.. , xn, we write
A[Xn Pd'.13] for the formula which is obtained from A by replacing every
occurrence Xnr by Brij] (neither individual variables nor relation variables
of Vi B are allowed to become bound when substituting).
Note that B may contain other free variables besides X', and that the "AX"
is needed to indicate which terms are substituted for which variables.
Locally we shall adopt the following convention. In an argument, once a
formula has been introduced as A(x), i.e., A with a designated free variable
x, we write A(t) for A[x It], and similarly with more variables. N
1.1.3. Subformulas
DEFINITION. (Gentzen subformula) Unless stated otherwise, the notion of
subformula we use will be that of a subformula in the sense of Gentzen.
(Gentzen) subformulas of A are defined by
A is a subformula of A;
if B o C is a subformula of A then so are B, C, for o = V, A, -->;
if VxB or 3xB is a subformula of A, then so is B[xlt], for all t free for
x in B.
If we replace the fhird clause by:
(iii)' if VxB or 3xB is a subformula of A then so is B,
we obtain the notion of literal subformula.
1.1. Preliminaries 5
DEFINITION. The notions of positive, negative, strictly positive subformula
are defined in a similar style:
A is a positive and a stricly positive subformula of itself;
if B A C or B V C is a positive [negative, strictly positive] subformula
of A, then so are B, C;
if VxB or 3xB is a positive [negative, strictly positive] subformula of A,
then so is B[xIt] for any t free for x in B;
if B C is a positive [negative] subformula of A, then B is a negative
[positive] subformula of A, and C is a positive [negative] subformula of
A;
(IT) if B + C is a strictly positive subformula of A then so is C.
A strictly positive subformula of A is also called a strictly positive part (s.p.p.)
of A. Note that the set of subformulas of A is the union of the positive and
the negative subformulas of A.
Literal positive, negative, strictly positive subformulas may be defined in
the obvious way by restricting the clause for quantifiers.
EXAMPLE. (P --+ Q) R V VxR' (x) has as s.p.p.'s the whole formula,
R V VxR/ (x), R,VxR'(x), R' (t). The positive subformulas are the s.p.p.'s and
in addition P; the negative subformulas are P > Q, Q.
1.1.4. Contexts and formula occurrences
Formula occurrences (f.o. 's) will play an even more important role than the
formulas themselves. An f.o. is nothing but a formula with a position in
another structure (prooftree, sequent, a larger formula etc.). If no confusion
is to be feared, we shall permit ourselves a certain "abus de langage" and talk
about formulas when really f.o.'s are meant.
The notion of a (sub)formula occurrence in a formula or sequent is intu-
itively obvious, but for formal proofs of metamathematical properties it is
sometimes necessary to use a rigorous formal definition. This may be given
via the notion of a context. Roughly speaking, a context is nothing but a for-
mula with an occurrence of a special propositional variable, a "placeholder".
Alternatively, a context is sometimes described as a formula with a hole in it.
DEFINITION. We define positive (P) and negative (formula-)contexts (Ar)
simultaneously by an inductive definition given by the three clauses (i)(iii)
below. The symbol "*" in clause (i) functions as a special proposition letter
(not in the language of predicate logic), a placeholder so to speak.
6 Chapter I. Introduction
* E P;
and if B+ E P, B- E Ar, and A is any formula, then
AAB+ , B+ AA, AVB+, B+V A, A-43+, Vx.B+ , x.B+ E P;
AAB-, .13- AA, AVB-, B-V A, A>B-, B+-+A,Vx13- ,3xI3- E N.
The set of formula contexts is the union of P and Ar. Note that a context
contains always only a single occurrence of *. We may think of a context as
a formula in the language extended by *, in 'which * occurs only once. In a
positive [negative] context, * is a positive [negative] subformula. Below we
give a formal definition of (sub)formula occurrence via the notion of context.
For arbitrary contexts we sometimes write FH, GH, . Then F[A],
G[A], ... are the formulas obtained by replacing * by A (literally, without
renaming variables).
The notion of context may be generalized to a context with several place-
holders *1, , *n, which are treated as extra proposition variables, each of
which may occur only once in the context.
The strictly positive contexts SP are defined by
* E S'P; and if B E SP, then
A A B,B A A, A V B,B V A, A > B,VxB, 3xB E SP.
An alternative style of presentation of this definition is
P=*1AAPI 'P A AI AVP ITV AIA P > A VeP 3xP,
=AAArIATAAIAVIVI.ArVAIA>Arl P --+ A IVx.N.
= * I A A SP IS'PAA1AVS'P ISPVA I A -4 SP 1VxS'P 13xSP.
A formula occurrence (f.o. for short) in a formula B is a literal subformula
A together with a context indicating the place where A occurs (so B may be
obtained by replacing * in the context by A). In the obvious way we can now
define positive, strictly positive and negative occurrence.
1.1.5. Finite multisets
Finite multisets, i.e. "sets with multiplicity", or to put it otherwise, finite
sequences modulo the ordering, will play an important role in this text.
NOTATION. If A is a multiset, we use 1A1 for the number of its elements. For
the multiset union of F and A we write r U A or in certain situations simply
r, A or even rA (namely when writing sequents, which will be introduced
later). The notation I', A or FA then designates a multiset which is the union
of F and the singleton multiset containing only A.
1.1. Preliminaries 7
If "c" is some unary operator and F :-=_ A1, , An is a finite multiset of
formulas, we write cF for the multiset cAl, , cAn.
Finite sets may be regarded as special cases of finite multisets: a multiset
where each element occurs with multiplicity one represents a finite set. For
the set underlying a multiset F, we write Set(F); this multiset contains the
formulas of F with multiplicity one.
NOTATION. We shall use the notations A r, V F also in case r is a multiset.
A r, V r are then the conjunction, respectively disjunction of F' for some
sequence F' corresponding to F. A r, vr are then well-defined modulo logical
equivalence, as long as in our logic A, V obey the laws of symmetry and
associativity.
DEFINITION. The notions of (positive, negative) formula occurrence may be
defined for sequents, i.e., expressions of the form r A, with F, A finite
multisets, as (positive, negative) formula occurrences in the corresponding
formulas A r -4 V A.
1.1.6. Deducibility and deduction from hypotheses, conservativity
NOTATION. In our formalisms, we derive either formulas or sequents (as
introduced in the preceding definition). For sequents derived in a formalism
S we write
SFr or Hs r A,
and for formulas derived in S
S H A or F-5 A.
If we want to indicate that a deduction 7, derives I' A, we can write
D Hs r A (orVHFz if S is evident).
For formalisms based on sequents, S H A will coincide with S H A
(sequent r A with F empty).
If a formula A is derivable from a finite multiset r of hypotheses or as-
sumptions, we write
F Hs A.
In systems with sequents this is equivalent to S H F A. (N.B. In the
literature F H A is sometimes given a slightly different definition for which
the deduction theorem does not hold; cf. remark in 9.1.2. Moreover, some
authors use H instead of our sequent-arrow
A theory is a set of sentences (closed formulas); with each formalism is
associated a theory of deducible sentences. Since for the theories associated
8 Chapter 1. Introduction
with the formalisms in this book, it is always true that the set of deducible
formulas and the set of pairs {(F, A) F H A} are uniquely determined by
the theory, we shall also speak of formulas belonging to a theory, and use the
expression "A is deducible from F in a theory".
In particular, we write
r [-in A, F Hi A, F I-, A
for deducibility in our standard logical theories M, I, C respectively (cf. the
next subsection).
DEFINITION. A system S is conservative over a system S' c S, if for formulas
A in the language of S' we have that if S H A, then S' H A. For systems with
sequents, conservativity similarly means: if H F A in S, with F A in
the language of S', then H F A in S'. Similarly for theories.
1.1.7. Names for theories and systems
Where we are only interested in the logics as theories, i.e. as sets of theorems,
we use M, I and C for minimal, intuitionistic and classical predicate calculus
respectively; Mp, Ip and Cp are the corresponding propositional systems. If
we are interested only in formulas constructed from a set of operators A say,
we write A-S or AS for the system S restricted to formulas with operators
from A. Thus --*A-M is M restricted to formulas in A, > only.
On the other hand, where the notion of formal deduction is under investiga-
tion, we have to distinguish between the various formalisms characterizing the
same theory. In choosing designations, we use some mnemonic conventions:
We use "N", "H", "G" for "Natural Deduction" , "Hilbert system"
and "Gentzen system" respectively. "GS" (from "Gentzen-Schiitte")
is used as a designation for a group of calculi with one-sided sequents
(always classical).
We use "c" for "classical" , "i" for "intuitionistic" , "m" for "minimal" ,
"s" for "S4", "p" for "propositional", "e" for "E-logic". If p is absent,
the system includes quantifiers. The superscript "2" is used for second-
order systems.
Variants may be designated by additions of extra boldface capitals,
numbers, superscripts such as "*" etc. Thus, for example, Glc is close
to the original sequent calculus LK of Gentzen (and Gli to Gentzen's
LJ), G2c is a variant with weakening absorbed into the logical rules,
G3c a system with weakening and contraction absorbed into the rules,
GK (from Gentzen-Kleene) refers to Gentzen systems very close to the
system G3 of Kleene, etc.
1.1. Preliminaries 9
In order to indicate several formal systems at once, without writing
down the exhaustive list, we use the following type of abbreviation:
S[abc] refers to Sa, Sb, Sc; S[ab][cd] refers to Sac, Sbc, Sad, Sbd,
etc.; [mic] stands for "m, or i or c"; [mi] for "m or i"; [123] for "1,
2 or 3", etc. In such contracted statements an obvious parallelism is
maintained, e.g. "G[123]c satisfies A iff G[123]i satisfies B" is read as:
"Glc (respectively G2c, G3c) satisfies A iff Gli (respectively G2i,
G3i) satisfies B".
1.1.8. Finite trees
DEFINITION. ( Terminology for trees) Trees are partially ordered sets (X,<)
with a lowest element and all sets {y : y < x} for x E X linearly ordered.
The elements of X are called the nodes of the tree; branches are maximal
linearly ordered subsets of X (i.e. subsets which cannot be extended further).
Trees are supposed to grow upwards; the single node at the bottom is called
the root or bottom node of the tree. If a branch of a tree is finite, it ends in a
leaf or top node of the tree. If n, m are nodes of a tree with partial ordering
and n m, then m is a successor of n, n a predecessor of m. If n m
and there are no nodes properly between n and m, then n is an immediate
predecessor of m, and m an immediate successor of n.
A tree is said to be k-branching (strictly k-branching), if each node has at
most k (exactly k) immediate successors.
We also consider labelled trees, with a function assigning objects (e.g. for-
mulas) to the nodes. The terminology for trees is also applied to labelled
trees.
1.1.9. DEFINITION. The length or size of a finite tree is the number of nodes
in the tree. We write s(T) for the size of T.
The depth (of a tree) or height (of a tree) I TI of a tree T is the maximum
length of the branches in the tree, where the length of a branch is the number
of nodes in the branch minus 1.
The leafsize ls(T) of a tree T is the number of top nodes of the tree. Z
For future use we note: Let T be a tree which is at most k-branching, i.e.
each node has at most k (k > 1) immediate successors. Then
s(T) < kir1+1, ls(T) s(T).
For strictly 2-branching trees s(T) = 21s(T) 1.
Formulas may also be regarded as (labelled) trees. The definitions of size
and depth specialized to formulas yield the following definition.
10 Chapter 1. Introduction
DEFINITION. The depth 1A1 of a formula A is the maximum length of a
branch in its construction tree. In other words, we define recursively II = O
for atomic P, J = 0, IA o BI max(IA1,1B1) + 1 for binary operators 0,
o AI = AI + 1 for unary operators o.
The size or length s(A) of a formula A is the number of occurrences of logical
symbols and atomic formulas (parentheses not counted) in A: s(P) = 1 for
P atomic, s(I) = 0, s(A o B) = s(A) + s(B) + 1 for binary operators o, s(oA)
= s(A) + 1 for unary operators o.
For formulas we therefore have
s(A) < 21A1+1.
1.2 Simple type theories
This section briefly describes typed combinatory logic and typed lambda cal-
culus, and may be skipped by readers already familiar with simple type the-
ories. For more detailed information on type theories, see Barendregt [1992],
Hindley [1997]. Below, we consider only formalisms with rigid typing, i.e.
systems where every term and all subterms of a term carry a fixed type.
Hindley [1997] deals with systems of type assignment, where untyped terms
are assigned types according to certain rules. The untyped terms may pos-
sess many different types, or no type at all. There are many parallels between
rigidly typed systems and type-assignment systems, but in the theory of type
assignment there is a host of new questions, sometimes very subtle, to study.
But theories of type assignment fall outside the scope of this book.
1.2.1. DEFINMON. (The set of simple types) The set of simple types T,
is constructed from a countable set of type variables P0, P1, P2, . . . by means
of a type-forming operation (function-type constructor) >. In other words,
simple types are generated by two clauses:
type variables belong to T;
ifA,BE7,then(A*B)ET.
A type of the form A > B is called a function type. "Generated" means that
nothing belongs to T, except on the basis of (i) and (ii). Since the types
have the form of propositional formulas, we can use the same abbreviations
in writing types as in writing formulas (cf. 1.1.1).
Intuitively, type denote special sets. We may think of the type variables
as standing for arbitrary, unspecified sets, and given types A, B, the type
A > B is a set of functions from A to B.
1.2. Simple type theories 11
1.2.2.. DEFINITION. (Terms of the sim,ply typed lambda calculus )_.,) All
terms appear with a type; for terms of type A we use tA,5A,rA, possibly with
extra sub- or superscripts. The terms are generated by the following three
clauses:
For each A E 7"._ there is a countably infinite supply of variables of
type A; for arbitrary variables of type A we use uA, vA, wA,xA, y A ZA
(possibly with extra sub- or superscripts);
if tA-rB SA are terms of types A B, A, then App(tA', sA)B is a
term of type B;
if tB is a term of type B and XA a variable of type A, then (AxA.tB)A-43
is a term of type A B. 1E1
NOTATION. For App(t}"B, SA)B we usually write simply (t)"B SA)B
There is a good deal of redundancy in the typing of terms; provided the
types of x, t, s are known, the types of (Ax.t), (ts) are known and need
not be indicated by a superscript. In general, we shall omit type-indications
whenever possible without creating confusion. When writing ts it is always
assumed that this is a meaningful application, and hence that for suitable
A, B the term t has type A* B, s type A.
If the type of the whole term is omitted, we usually simplify (ts) by
dropping the outer parentheses and writing simply ts. The abbreviation
t1t2 tn is defined by recursion on n as (t1t2 ...tn_i)tn, i.e. t1t2 tn is
(... ((tit2)t3 )tn)
For Axi.(Ax2.(... (Axn.t)...)) we write Ax1x2 xn.t. Application binds
more strongly than Ax., so Ax.te is Ax.(tti), not (Ax.t)e.
A frequently used alternative notation for xA ,tB is x: A, t:B respectively.
The notations tA and t: A are used interchangeably and may occur mixed;
readability determines the choice.
CEXAMPLES. n X X S :BAAB A ,, AeyA-413 zA zgy z).Ài: := y ., A
1.2.3. DEFINITION. The set FV(t) of variables free in t is specified by:
FV(xA) := xA,
FV(ts) := FV(t) U FV(s),
FV(Ax.t) := FV(t)\ {x}. N
1.2.4. DEFINITION. (Substitution) The operation of substitution of a term
s for a variable x in a term t (notation t[xls]) may be defined by recursion
12 Chapter 1. Introduction
on the complexity of t, as follows.
x[xIs] :-= s,
y[x Is] := y for y x,
(tit2)[xIs] := ti[xI s]t2[xI s],
(Ax.t)[xIs] := Ax.t,
(Ay.t)[xls] := Ay.t[xIs] for y # x; w.l.o.g. y 0 FV(s).
A similar definition may be given for simultaneous substitution tr
LEMMA. (Substitution lemma) If x 0 y, x FV(t2), then
t[xlti][ylt2] -=- t[yltd[xlti [02]].
PROOF. By induction on the depth of t.
1.2.5. DEFINMON. (Conversion, reduction, normal form) Let T be a set
of terms, and let cony be a binary relation on T, written in infix notation:
t cony s. If t cony s, we say that t converts to s; t is called a redex or
convertible term, and s the conversum of t. The replacement of a redex by
its conversum is called a conversion. We write t s (t reduces in one step
to 8) if s is obtained from t by replacement of (an occurrence of) a redex
e of t by a conversum t" of t', i.e. by a single conversion. The relation
("properly reduces to") is the transitive closure of H and »- ("reduces to") is
the reflexive and transitive closure of The relation - is said to be the
notion of reduction generated by cont. -<1, are the relations converse to
»- respectively.
With the notion of reduction generated by cony we associate a relation on
T called conversion equality: # =conys (t iS equal by conversion to s) if there
is a sequence to,.... ,t,., with to t, tn # 3, and ti ti+1 or ti »- ti+1 for each
i, O< i < n. The subscript "cony" is usually omitted when clear from the
context.
A term t is in normal form, or t is normal, if t does not contain a redex. t
has a normal form if there is a normal s such that t s.
A reduction sequence is a (finite or infinite) sequence of pairs (to, 80), (t1, 50,
(t2, 52), ... with 61i an (occurrence of a) redex in ti and ti - ti+1 by conversion
of Si, for all i. This may be written as
O .51 62
to ti t2
We often omit the ô, simply writing to »-1. t1 »-i t2
Finite reduction sequences are partially ordered under the initial part re-
lation ("sequence o is an initial part of sequence r"); the collection of finite
reduction sequences starting from a term t forms a tree, the reduction tree
1.2. Simple type theories 13
of t. The branches of this tree may be identified with the collection of all
infinite and all terminating finite reduction sequences.
A term is strongly norm,a4izing (is SN) if its reduction tree is finite.
REMARKS. (i) As to the terminology, in the literature on lambda calculus
and combinatory logic, writers use mostly "contraction", "contracts", "con-
tractum" , instead of "conversion", "converts", "conversum". In the lambda
calculus literature "conversion" is used for a more general notion: there t
converts to s if t and s can be shown to be equal by reduction steps (go-
ing in both directions). On the other hand, there is a tradition, deriving
from Prawitz [1965], of using "conversion" instead of "contraction" for the
corresponding notion applied to natural deductions.
Moreover, "contraction" is also widely used in the literature on Gentzen
systems (to be discussed later) for a specific deduction rule, whereas the
notion of "conversion" of the lambda calculus literature is hardly used here.
Therefore after prolonged hesitation we have chosen the terminology adopted
here.
(ii) Usually it is more convenient to think of the reduction tree of a term
t as a tree with its nodes labelled with terms; t is put at the root, and if s
is the label of the node v, there is, for each pair (s', 6) such that s s', an
immediate successor v' to 1/, with label s'.
Instead of the notion defined above, we may also consider a less refined
notion of reduction sequence by disregarding the redexes; that is to say, we
identify sequences
613 51 62 , , , e2
to .-1 t1 -1 t2 . anu to >-1 ti t2
if ti = ei for all i. The notion of reduction tree is then changed accordingly.
The arguments in this book using reduction sequences hold with both notions
of reduction sequence.
NOTATION. We shall distinguish different conversion relations by subscripts;
so we have, for example, conto, conton (to be defined below). Similarly for
the associated relations of one-step reduction: »-34, -, »"0, etc. We write
-=,3 instead of =eonto etc.
1.2.6. EXAMPLES. For us, the most important reduction is the one induced
by 0-conversion:
(ÀaA.tB )sA conts tB [xA Isal].
n-conversion is given by
AxA.tx contn t (x i;Z FV(t)).
14 Chapter I. Introduction
Ori-conversion contsn is conto U contn.
It is to be noted that in defining >-,8,1, conversion of redexes occur-
ring within the scope of a A-abstraction operator is permitted. However,
no free variables may become bound when executing the substitution in a
0-conversion. An example of a reduction sequence is the following:
(Axyz.xz(yz))(Auv.u)(Au'v'.u')
(Ayz.(Auv.u)z(yz))(Atilvi.u')
(Ayz.(Av.z)(yz))(Au'vi.ui)
(Ayz.z)(Au'v' .u')
Az.z.
Relative to conton conversion of different redexes may yield the same result:
(Ax.yx)z yz either by converting the 0-redex (Ax.yx)z or by converting
the ri-redex Ax.yx. So here the crude and the more refined notion of reduction
sequence, mentioned above, differ.
DEFINITION. A relation R is said to be confluent, or to have the Church-
Rosser property (CR), if, whenever to Rti and to Rt2, then there is a t3 such
that t1R t3 and t2 R t3. A relation R is said to be weakly confluent, or to
have the weak Church-Rosser property (WCR), if, whenever to Rt1, to R t2
then there is a t3 such that t1 R* t3, t2 t3, where R* is the reflexive and
transitive closure of R.
1.2.7. THEOREM. For a confluent reduction relation »- the normal forms
of terms are unique. Furthermore, if »- is a confluent reduction relation we
have: t = t' iff there is a term t" such that t t" and t' »- t".
PROOF. The first claim is obvious. The second claim is proved as follows.
If t = t' (for the equality induced by >-), then by definition there is a chain
t to, ti, . . tn t', such that for all i < n ti ti+i or ti+i »- ti. The
existence of the required t" is now established by induction on n. Consider
the step from n to n + 1. By induction hypothesis there is an s such that
to »- s, tn »- s. If tn+i »- tn, take t" = s; if tn tn+i, use the confluence to
find a t" such that s »- t" and tn+1 >- t". N
1.2.8. THEOREM. (Newman's /emma) Let »- be the transitive and reflexive
closure of and /et >-1 be weakly confluent. Then the normal form w.r.t.
of a strongly normalizing t is unique. Moreover, if all terms are strongly
normalizing w.r.t. then the relation »- is confluent.
PROOF. Assume WCR, and let us write s E UN to indicate that s has a
unique normal form. If a term is strongly normalizing, then so are all terms
occurring in its reduction tree. In order to show that a strongly normalizing t
has a unique normal form (and hence satisfies CR), we argue by contradiction.
1.2. Simple type theories 15
We show that if t E SN, t 0 UN, then we can find a ti t with ti 0 UN.
Repeating this construction leads to an infinite sequence t t1 t2 >--
contradicting the strong normalizability of t.
So let t E SN, t 0 UN. Then there are two reduction sequences t >-
t'2 >-- . . . t' and t t' >--1 t" with t', t" distinct normal terms.
Then either = q, or q. In the first case we can take ti := =
In the second case, by WCR we can find a t* such that t* t E SN,
hence t* t" for some normal t". Since t' t" or t" t", either 0 UN
or t' % UN; so take ti := if t' t", ti tg otherwise. The final statement
of the theorem follows immediately.
1.2.9. DEFINITION. The simple typed lambda calculus A, is the calculus of
/3-reduction and /3-equality on the set of terms of A, defined in 1.2.2. More
explicitly, A, has the term system as described, with the following axioms
and rules for --< (is -i3) and -= (is =13):
t t
t »- s
rt »- rs
t s
(AxA .tB)8,4 t13 [xi / sA]
t 8 t »- s t »- s s r
tr »- sr Ax.t »- Ax.s t >-- r
t = s t=s s=r
t = S S = t t = r
The extensional simple typed lambda calculus An, is the calculus of On-
reduction and k-equality =-,3,7 and the set of terms A,; in addition to the
axioms and rules already stated for the calculus A, there is the axiom
Ax.tx »- t FV(t)).
1.2.10. LEMMA. (Substitutivity of »- )3 and »73n) For »- either »- or »-on we
have
if s s' then s[y Is"] _- sqy I s"1.
PROOF. By induction on the depth of a proof of s »- s'. It suffices to check
the crucial basis step, where s is (Ax.t)t' , and s' is t[x It']: (Ax.t)tgyIs"] =
(Ax.(t[yIs"])tlyIs"] = t[y I 3"][x lily I s"]] = t[xI t'][y I s"1 using (1.2.4). Here it
is assumed that x y, x i;Z FV(s") (if not, rename x).
1.2.11. PROPOSMON. »-/3,1 and are wealdy confluent.
PROOF. By distinguishing cases. If the conversions leading from t to t' and
from t to t" concern disjoint redexes, then t'" is simply obtained by converting
both redexes. More interesting are the cases where the redexes are nested.
16 Chapter I. Introduction
If t ...(Ax.$)s' t' s[x/ s']..., and t" (Ax.$)s" s' s",
then t" .. . s[x/s"]..., and t' - t" in as many steps as there are occurrences
of x in s, t" »- ell in a single step.
If t t' s[x/ s']..., and t" (Ax.s")s' s s",
then t"' . Here we have to use the fact that if s »- s", then
s[x/s']»- slx/s11, i.e. the compatibility of reduction with substitution.
The cases involving ri-conversion we leave to the reader.
1.2.12. THEOREM. The terms of A, Ari are strongly normalizing for »-0
and -,377 respectively, and hence the 0- and Oil-normal forms are unique.
PROOF. For -15/ and >--,877 see sections 6.8 and 8.3 respectively.
From the preceding theorem it follows that the reduction relations are con-
fluent. This can also be proved directly, without relying on strong normal-
ization, by the following method, due to W. W. Tait and P. Martin-Löf (see
Barendregt [1984, 3.2]) which also applies to the untyped lambda calculus.
The idea is to prove confluence for a relation -p which intuitively corre-
sponds to conversion of a finite set of redexes such that in case of nesting the
inner redexes are converted before the outer ones.
1.2.13. DEFINITION. >--p on A, is generated by the axiom and rules
(id) x L-p x
t Y- t' t t' s 2: s'
(Amon) P (appmon) 13
Ax.t Ax.9 ta »-p t'a'
t ti
(ßPar)
8 13 (upar) t->:Pti (x FV(t))(Ax.t)s p tqx/s'i t
We need some lemmas.
1.2.14. LEMMA. (Substitutivity of -p) If t t', s hp s', then t[x/s] L-p
e[x/s1].
PROOF. By induction on Iti. Assume, without loss of generality, x FV(s).
We consider one case and leave others to the reader. Let t (Ay.t].)t2 and
assume (induction hypothesis):
if t1 »-p and s p s', then ti[x/ s] t'jx/s1,
if t2 -p t'2 and s s', then t2[x/s] »-p t'2[x/ s'].
Then
t »-p [y/t12] , and
t[x/s] (AY.t1[x/s])t2[x/s] ?:p ti1[X/Si][y/t2[X/S1]]
by the IH, and by 1.2.4 this last expression is (t'1[y/t'2])[x/s1.
1.2. Simple type theories 17
1.2.15. LEMMA. -p is confluent.
PROOF. By induction on Iti we show: for all t', t", if t t', t" then there is
a t" such that t', t" t".
Case I. If t >Th t', t" by application of the same clause in the definition of
the claim follows immediately from the IH, using 1.2.14 in the case of ßpar.
Case 2. Let
t Ax.tox Ax.t'ox, where to -p t'o (Amon), and
t >Th tg, where to tg (war).
Apply the IH to to 4,tg to find tgi such that tio, tg »-p tg/. We can then
take t"
Case 3. Let
t Ax.(Ax.to)x >Th Ax.tio, where to >Th t'o (f3par, Amon), and
t tg, where Ax.t0 tg (npar).
Then Ax.t0 -p Ax.4; since lAx.e0 I < t, the IH applies and there is tg' such
that Ax.4, tg tg,. Then we can put tll' tg'.
Case 4. Let
t (AX.t0)ti
where to »-p >- (Amon, appmon), and
t tg[0111, where to t1 (Opar).
By the IH we find t', t'1" such that
tlo, tg p 41,
then
(Ax .4)4 tgqx I tfl (Opar) and
tg[x/tg] tgi[x/q] (substitutivity of
Take t" tglx1q1.
Case 5. Let
t (Ax.tox)ti L-p
where tO »-p x i;Z FV(to) (npar, appmon), and
t Th tg[X/q], where tox t, ti L-p (Opar).
Also tox p t'ox. Apply the IH to tox (which is possible since 'taxi < ItI) to
find tg' with
t'ox, 4 L-p tg',
Then
t'oti (4x)[x/t'l] L-p (tg/x)[x/q1 tgit' and
t'ax/q] L-p t'ofqx/q1
(both by substitutivity of
1.2.16. THEOREM. 0- and ßr-reduction are confluent.
PROOF. The reflexive closure of .-1 for 077-reduction is contained in and
is therefore the transitive closure of >Th. Write t >-p, t' if there is a chain
t tO >Th tl t2 >Th . -p tn ti. Then we show by induction on n + m,
using the preceding lemma, that if t p,n e, t p,m t" then there is a t" such
that t' -pon t" >--p,n
1.2.17. Typed combinatory logic
We now turn to the description of (simple) typed combinatory logic, which is
an analogue of ), without bound variables.
DEFINITION. ( Terms of typed combinatory logic CL,) The terms are induc-
tively defined as in the case of A,, but now with the clauses
For each A E r+ there is a countably infinite supply of variables of
A wA, xAtype A; for arbitrary variables of type A we use u, vA, ,,A, zA
(possibly with extra sub- or superscripts)
for all A, B,C E T there are constant terms
kA'B E A -4 (B > A),
sA,B,C E (A (B C)) > ((A > B) > (A > C));
if tA-+B SA are terms of the types shown, then App(tA'13,As)B is a
term of type B.
Conventions for notation remain as before. Free variables are defined as in
A,, but of course we put FV(k) = FV(s) = 0.
18 Chapter 1. Introduction
and apply the 1H to t1 to find t'1' such that
ti;
1.2. Simple type theories 19
DEFINITION. The weak reduction relation >--, on the terms of CL, is gen-
erated by a conversion relation contw consisting of the following pairs:
kA,B xA By contw x,SA,B C A-4(B-4C)yArB zA' X contw zz(yz).
In other words, CL is the term system defined above with the following
axioms and rules for .-w and -=w (abbreviated to =):
t t kxy x sxyz -- xz(yz)
t s t s t - s s - r
rt rs tr -- sr t>-- r
t >-- s t = s t = s s = r
t = s s = t t = r
1.2.18. THEOREM. The weak reduction relation in CL, is confluent and
strongly normalizing, so normal forms are unique.
PROOF. Similar to the proof for A, but easier (cf. 6.8.6).
1.2.19. The effect of lambda-abstraction can be achieved to some extent in
CL, as shown by the following theorem.
THEOREM. To each term t in CL, there is another term A*xA.t such that
xA FV(A*xA.t),
(A*xA.t)sA >--w t[xA/sA].
PRooF.We define A*xA.t by recursion on the construction of t:
sA,A,AkA,A-+AkA,A,
.\*xA.yB := kB,AyB for y 0 x
A*xA t134.Cti3 (A*x.ti)(A*x.t2).
The properties stated in the theorem are now easily verified by induction on
the complexity of t.
COROLLARY. CL, is combinatorially complete, i.e. for every applicative
combination t of k, s and variables xl, x2,. there is a dosed term s
such that in CL, H xr, =w t, in fact even CL F- sxi -w t. Z
20 Chapter 1. Introduction
REMARK. Note that the defined abstraction operator A*x fails to have an
important property of Az: it is not true that, if t = t', then A*x.t = A*
Counterexample (dropping all type indications): kxk = x, but A*x.kxk =
s(s(kk)(skk))(kk), A*x.x = skk. The latter two terms are both in weak
normal form, but distinct; hence by the theorem of the uniqueness of normal
form, they cannot be proved to be equal in CL,.
1.2.19A. 01 Consider the following variant A° x.t of A* x.t: A° x.x := skk, A° x.t :-=
kt if x FV(t), A° x.tx := t if x FV(t), A° x.ts := s(Vx.t)(Vx.$) if the preceding
clauses do not apply. Show that this alternative defined abstraction operator has
the properties mentioned in the theorem above, and in addition
A° x.tx h t if x t,
(A° x.t)[yIs] = A° x.t[yI s] if y #z, x FV(s).
Show by examples that A*x.t does not have these properties in general. Also, verify
that it is still not true that if t t', then Vx.t = A° x.t1
1.2.20. Computational content
In the remainder of this section we shall show that there is some "compu-
tational content" in simple type theory: for a suitable representation of the
natural numbers we can represent certain number-theoretic functions. This
will be utilized in 6.9.2 and 11.2.2.
DEFINITION. The Church numerals of type A are 0-normal terms TA of type
(A --+ A) -4 (A -4 A), n E IN, defined by
9.7A AfAritAxa.fn(x),
where f0(x) := f'-I-1(x) := f(fn( \\.X)) NA is the set of all the TA.
N.B. If we want to use ßi-normal terms, we must use AfA-4A.f instead of
Af x. f x for TA.
DEFINITION. A function f:INk --+ IN is said to be A-representable if there is
a term F of A, such that (abbreviating TA as TO
Frti Ttk = f(ni nk)
for all n1, ,k E N, N
1.2. Simple type theories 21
DEFINITION. Polynomials, extended polynomials
The n-argument projections p' are given by pIL (xi, , xn) = xi, the
unary constant functions cm by cm(x) = m, and sg, g are unary func-
tions which satisfy sg(Sn) = 1, sg(0) = 0, T,g(Sn) = 0, q(0) = 1, where
S is the successor function.
The n-argument function f is the composition of m-argument g, n-
argument h1, . . . , hin if f satisfies f = g(hi(1), , hin(1)).
The polynomials in n variables are generated from cm, addition and
multiplication by closure under composition. The extended polynomials
are generated from p, Cm, sg, g, addition and multiplication by closure
under composition.
1.2.20A. 4 Show that all terms in 0-normal form of type (P P) (P P),
P a propositional variable, are either of the form Tip or of the form AfP'P.f.
1.2.21. THEOREM. All extended polynomials are representable in
PROOF. Abbreviate INIA as N. Take as representing terms for addition, mul-
tiplication, projections, constant functions, sg, Tg:
F+ := AxN yN f A zA .x f (yfz),
Fx := AxNyNfA4A .x(yf
Fk := Axiv
:= AxN
Fsg := AxN fArAzA.x(AuA.f z)z,
Fro := AxN fa>AzA.x(Àua.z)(f z).
It is easy to verify that F+, Fx represent addition and multiplication respec-
tively by showing that
(TA f Am) 0 (rnAf A-4A) (n in)A (f A-4A), TIA 0 7,71A (7-cfn)A,
where f o g := f (g(z)). The proof that the representable functions are
closed under composition is left to the reader. N
A proof of the converse of this theorem (in the case where A is a proposition
variable) may be found in Schwichtenberg [1976].
REMARK. Extended polynomials are of course majorized (bounded above)
by polynomials.
However, if we permit ourselves the use of Church numerals of different
types, and in particular liberalize the notion of representation of a function
22 Chapter 1. Introduction
by permitting numerals of different types for the input and the output, we
can represent more than extended polynomials. In particular we can express
exponentiation
TIA-rAnlA = (mn)A (n > 0).
1.2.21A. * Complete the proof of the theorem and verify the remark.
1.3 Three types of formalism
The greater part of this text deals with the theory of the "standard" logics,
that is minimal, intuitionistic and classical logic. In this section we introduce
the three styles of formalization: natural deduction, Gentzen systems and
Hilbert systems. (On the names and history of these 'types of formalism,
see the notes to chapters 2 and 3.) The first two will play a leading role in
the sequel; the Hilbert systems are well known and widely used in logic, but
less important from the viewpoint of structural proof theory. Each of these
formalization styles will be illustrated for implication logic.
Deductions will be presented as trees; the nodes will be labelled with for-
mulas (in the case of natural deduction and Hilbert systems) or with sequents
(for the Gentzen system); the labels at the immediate successors of a node I,
are the premises of a rule application, the label at 1/ the conclusion. At the
root of the tree we find the conclusion of the whole deduction.
The word proof will as a rule be reserved for the meta-level; for formal
arguments we preferably use deduction or derivation. But prooftree will mean
the same as deduction tree or derivation tree, and a "natural deduction proof"
will be a formal deduction in one of the systems of natural deduction. Rules
are schemas; an instance of a rule is also called a rule-application or inference.
If a node C in the underlying tree with say two predecessors and one
successor looks like the tree on the left, we represent this more compactly as
on the right:
A i3
. .
AB
We use script V, e, possibly sub- and/or superscripted, for deductions.
1.3. Three types of formalism 23
1.3.1. The BHK-interpretation
Minimal logic and intuitionistic logic differ only in the treatment of nega-
tion, or (equivalently) falsehood, and minimal implication logic is the same
as intuitionistic implication logic. The informal interpretation underlying in-
tuitionistic logic is the so-called BrouwerHeytingKolmogorov interpretation
(BHK-interpretation for short); this interpretation tells us what it means to
prove a compound statement such as A --+ B in terms of what it means to
prove the components A and B (cf. classical logic, where the truthvalue of
A B is defined relative to the truthvalues of A and B). As primitive notions
in the BHK-interpretation there appear "construction" and "(constructive,
informal) proof". These notions are admittedly imprecise, but nevertheless
one may convincingly argue that the usual laws of intuitionistic logic hold for
them, and that, for our understanding of these primitives, certain principles
of classical logic are not valid for the interpretation. We here reproduce the
clause for implication only:
A construction p proves A --* B if p transforms any possible proof q of
A into a proof p(q) of B.
A logical law of implication logic, according to the BHK-interpretation, is a
formula for which we can give a proof, no matter how we interpret the atomic
formulas. A rule is valid for this interpretation if we know how to construct
a proof for the conclusion, given proofs of the premises.
The following two rules for > are obviously valid on the basis of the BHK-
interpretation:
If, starting from a hypothetical (unspecified) proof u of A, we can find
a proof t(u) of B, then we have in fact given a proof of A > B (without
the assumption that u proves A). This proof may be denoted by Au.t(u).
Given a proof t of A > B, and a proof s of A, we can apply t to s
to obtain a proof of B. For this proof we may write App(t, o) or to (t
applied to s).
1.3.2. A natural deduction system for minimal implication logic
Characteristic for natural deduction is the use of assumptions which may
be closed at some later step in the deduction. Assumptions are formula
occurrences appearing at the top nodes (leaves) of the prooftree; they may
be open or closed. Assumptions are provided with markers (a type of label).
Any kind of symbol may be used for the markers, but below we suppose the
markers to be certain symbols for variables, such as u, y, w, possibly sub- or
sup erscripted.
The assumptions in a deduction which are occurrences of the same formula
with the same marker form together an assumption class. The notations
24 Chapter I. Introduction
D' D'
[A] A
have the following meaning, from left to right: (1) a deduction 7, with con-
clusion B and a set [A] of open assumptions, consisting of all occurrences of
the formula A at top nodes of the prooftree D with marker u (note: both B
and the [A] are part of D, and we do not talk about the mu/tiset [A]u since
we are dealing with formula occurrences); (2) a deduction 1, with conclusion
B and a single assumption of the form A marked u occurring at some top
node; (3) deduction D with a deduction D', with conclusion A, substituted
for the assumptions [A]u of D; (4) the same, but now for a single assumption
occurrence A in D. Under (3) the formula A shown is the conclusion of TY
as well as the formula in an assumption class of D.
In cases (3) and (4) this metamathematical notation may be considered
imprecise, since we have not indicated the label of A before substitution. But
in practice this will not cause confusion. Note that the marker u disappears
by the substitution: only topformulas bear markers.
We now consider a system 1\Ini for the minimal theory of implication.
Prooftrees are constructed according to the following principles.
A single formula occurrence A labelled with a marker is a single-node
prooftree, representing a deduction with conclusion A from open assumption
A.
There are two rules for constructing new prooftrees from given ones, whicla
correspond precisely to the two principles (a), (b) valid for the BHK-inter-
pretation, mentioned above, and which may be rendered schematically as
follows:
[A]u
D D'
A -4 B A.4E
A -4 B
By application of the rule A of implication introduction, a new prooftree is
formed from D by adding at the bottom the conclusion A -4 B while closing
the set of open assumptions A marked by u. All other open assumptions
remain open in the new prooftree.
The rule >E of implication elimination (also known as modus ponens)
construgts from two deductions V, V' with conclusions A > B, A a new
combined deduction with conclusion B, which has as open assumptions the
open assumptions of D and D' combined.
Two occurrences a, /3 of the same formula belong to the same assumption
class if they bear the same label and either are both open or have both been
closed at the same inference.
[Alu Au
1.3. Three types of formalism 25
It should be noted that in the rule -*I the "degenerate case", where [Alu
is empty, is permitted; thus for example the following is a correct deduction:
AL
B --+ A-
A * (B --+ A)
At the first inference an empty class of occurrences is discharged; we have
assigned this "invisible class" a label y, for reasons of uniformity of treatment,
but obviously the choice of label is unimportant as long as it differs from all
other labels in use; in practice the label at the inference may be omitted in
such cases.
In applying the rule --A, we do not assume that [Al consists of all open as-
sumptions of the form A occurring above the inference. Consider for example
the following two distinct (inefficient) deductions of A-+(A-+A):
A u , A u 9,
A A w A A - Ay
A A
A - A -* A 9,,
A > (A > A) - A (A -* A) -
The formula tree in these deductions is the same, but the pattern of closing as-
sumptions differs. In the second deduction all assumptions of the given form
which are still open before application of an inference --+I are closed simulta-
neously. Deductions which have this property are said to obey the Complete
Discharge Convention; we shall briefly return to this in 2.1.9. But, no matter
how natural this convention may seem if one is interested in deducible formu-
las, for deductions as combinatorial structures it is an undesirable restriction,
as we shall see later.
1.3.3. EXAMPLE.
A -4 (B Aw A By Aw
B - C
C w
A C
(A .13) -4 (A
(A -4 (B C)) -4 ((A > B) > (A -4 C))u
We have not indicated the rules used, since these are evident.
1.3.4. Formulas-as-types
As already suggested by the notation, the BHK-valid principles (a) and (b)
correspond to function abstraction, and application of a function to an argu-
ment respectively. Starting from variables u, y, w associated with assumption
26 Chapter 1. Introduction
formulas, these two principles precisely generate the terms of simple type
theory A,.
Transferring these ideas to the formal rules constructing prooftrees, we
see that parallel to the construction of the prooftree, we may write next
to each formula occurrence the term describing the proof obtained in the
subdeduction with this occurrence as conclusion.
To assumptions A correspond variables of type A; more precisely, for-
mulas with the same marker get the same variable. If we have already used
variable symbols as markers, we can use these same variables for the corre-
spondence.
For the rules --A and *E the assignment of terms to the conclusion,
constructed from term(s) for the premise(s), is shown below.
Thus there is a very close relationship between A, and -4Nm, which at
first comes as a surprise. In fact, the terms of A, are nothing else but
an alternative notation system for deductions in -4Nm. That is to say, if
we consider just the term assigned to the conclusion of a deduction, and
assuming not only the whole term to carry its type, but also all its subterms,
the prooftree may be unambiguously reconstructed from this term. This is
the basic observation of the formulas-as-types isomorphism, an observation
which has proved very fruitful, since it is capable of being extended to many
more complicated logical systems on the one hand, and more complicated
type theories on the other hand, and permits us to lift results and methods
of type theory to logic and vice versa.
By way of illustration, we repeat our previous example, but now at each
node of the prooftree we also exhibit the corresponding terms. We have not
shown the types of subterms, since these follow readily from the construction
of the tree. We have dropped the superscript markers at the assumptions,
as well as the repetition of markers at the line where an assumption class is
discharged, since these are now redundant.
1.3.5. EXAMPLE.
w:A v:A>.13 w: A
uw: B C vw: B
uw (vw): C
Aw.uw(vw): A > C
Avw.uw(vw): (A > B) > (A C)
Auvw.uw(vw): (A --+ (B C)) --+ ((A B) (A + C))
[u: A]
t: B u
MLA .tB : A B
D'
t:A*B s: A
(0-4B sA): B
1.3. Three types of formalism 27
1.3.6. Identity of prooftrees. When are two prooftrees to be regarded as
identical? Taking the formulas-as-types isomorphism as our guideline, we can
say that two prooftrees are the same, if the corresponding terms of simple type
theory are the same (modulo renaming bound variables). Thus the following
two prooftrees are to be regarded as identical:
(A A)u A' (A --+ A)u A'AAA,, A w A + A A v
A AAAW AAV
since the first one corresponds to the term Atu.(Av.uv)w, and the second to
Av.(Av.uv)v, and these terms are the same modulo renaming of bound vari-
ables. On the other hand, the two deductions at the end of 1.3.2 correspond
to Awu.(Av.u)w and Awv.(Au.u)v respectively, which are distinct terms.
In the right hand tree, the upper 4 closes only the upper occurrence A v;
the lower q only the lower occurrence of A' (since at that place the upper
occurrence has already been closed). In other words, the two A v-occurrences
belong to distinct assumption classes, since they are closed at different places.
Without loss of generality we may assume that the labels for distinct as-
sumption classes of the same formula are always distinct, as in the first of the
two prooftrees above.
However, there is more to the formulas-as-types isomorphism than just
another system of notation. The notion of /3-reduction is also meaningful for
prooftrees. A 0-conversion
(AxA .tB\ sA
) conto tB [xA/sAl
corresponds to a transformation on prooftrees:
[A]u
D'
A > B A
Here the prooftree on the right is the prooftree obtained from D by replacing
all occurrences of A in the class [A] in 7, by V'. Note that the f.o. A > B in
the left deduction is a local maximum of complexity, being first introduced,
only to be removed immediately afterwards. The conversion may be said to
remove a "detour" in the proof. A proof without detours is said to be a
normal proof. Normal deductions may be said to embody an idea of "direct"
proof.
In a normal proof the left (major) premise of >E is never the conclusion
of +I. One can show that such normal deductions have the subformula
28 Chapter I. Introduction
property: if a normal deduction 1, derives A from open assumptions r, then
all formulas occurring in the deduction are subformulas of formulas in r, A.
The term notation for deductions is compact and precise, and tells us ex-
actly how we should manage open and closed assumptions when we substi-
tute one prooftree into another one. Using distinct markers for distinct closed
assumption classes corresponds to the use of separate variables for each oc-
currence of a binding operator. The tree notation on the other hand gives us
some geometric intuition. It is not so compact, and although in principle we
can treat the trees with the same rigour as the terms, it is not always feasi-
ble to do so; one is led to the use of suggestive, but not always completely
precise, notation. In our discussion of natural deduction we shall extend the
term notation to full predicate logic (2.2) and give a notion of reduction for
the full system in chapter 6.
1.3.7. Gentzen systems
There are two motivations leading to Gentzen systems, which will be discussed
below. The first one views a Gentzen system as a metacalculus for natural
deduction; this applies in particular to systems for minimal and intuitionistic
logic. The second motivation is semantical: Gentzen systems for classical logic
are obtained by analysing truth conditions for formulas. This also applies to
intuitionistic and minimal logic if we use Kripke semantics instead of classical
semantics.
A Gentzen system as a metacalculus. Let us first consider a Gentzen system
obtained as a metacalculus for the system >Nm. Consider the following four
construction steps for prooftrees.
The single-node tree with label A, marker u is a prooftree.
Add at the bottom of a prooftree an application of -4I, discharging an
assumption class.
Given a prooftree D with open assumption class [B]u and a prooftree
Di deriving A, replace all occurrences of B in [B]u by
Di
A > By A
B
Substitute a deduction of A for the occurrences of an (open) assumption
class [Art of another deduction.
These construction (or generation) principles suffice to obtain any prooftree of
-->Nm, for the first construction rule gives us the single-node prooftree which
derives A from assumption A, the second rule corresponds to applications of
>I, and closure under >E is seen as follows: in order to obtain the tree
1.3. Three types of formalism 29
D1 D2
A ./3 A
from the prooftrees D1, D2, we first combine the first and third construction
principles to obtain
D2
A + Bu A
and then use the fourth (substitution) principle to obtain the desired tree.
Let I' A express that A is deducible in 1\1111 from assumptions in F.
Then the four construction principles correspond to the following axiom and
rules for obtaining statements F A:
U {A} A (Axiom)
U {A} B Auff3I
CL_*PUAU{A+B} C
AU{A} Bcut
Call the resulting system S (an ad hoc designation). Here in the sequents
F A the r is treated as a (finite) set. For bookkeeping reasons it is
often convenient to work with multisets instead; multisets are "(finite) sets
with repetitions", or equivalently, finite sequences modulo the order of the
elements. If we rewrite the system above with multisets, we get the Gentzen
system described below, which we shall designate ad hoc by S', and where in
the sequents A the I' is now a multiset. The rules and axioms of S' are
A A (Axiom)
r,A,A>BC
rA
ALW r,BA
A A,AB
R-4 and L--+ are called the logical rules, LW, LC and Cut the structural rules.
LC is called the rule of (left-)contraction, LW the rule of (left-)weakening.
Due to the presence of LC and LW, derivability of is equivalent to
derivability of Set(r) A where Set(r) is the set underlying the multiset
Cut
30 Chapter I. Introduction
F. We have simplified the axiom, since some applications of LW produce
F, A A from A A.
If one uses sequences instead of sets, in order to retain equivalence of deriv-
ability of F A and derivability of Set(F) A, an extra rule of exchange
then has to be added:
F,A,B,A C T
F,B,A,L C
EXAMPLE. (Of a deduction in S and S')
AA B B
A > B, A B
A (A B) B
R+
A ((A B) B)
The natural deduction of (A + (B > C)) > ((A B) > (A > C)),
which we gave earlier in example 1.3.3 may be obtained by repeated use of
the generation principles 1-3 (not 4) as follows:
3: A (B > C)u 3: Aw 2: A By 2: Aw
1: B C 1:B
0: C
4: A + C w v
5: (A B) > (A > C)
6: (A > (B > C)) -4 ((A B) > (A C)) u
In the displayed tree, the numbers 0-6 indicate the seven steps in the construc-
tion of the tree. The number 0 corresponds to an application of construction
principle 1, the numbers 4-6 to applications of principle 2, the numbers 1 and
3 to applications of principle 3, and number 2 to an application of principle
3 in the construction of the subtree with conclusion B. We can now readily
transform this into a sequent deduction in S:
BB (0)
AA B , B > C C (1)
AA A, A --+ B , B > C C (2)
A, A > B , A --+ (B C) C (3)
A -4 B , A > (B > C) A --+ C (4)
A > (B > C) (A B) > (A > C) (5)
(A > (B > C)) -4 ((A -4 B) > (A -4 C)) (6)
where the lines 1-6 correspond to the steps 1-6 above; the only axiom appli-
cation appearing as a right premise for L>, namely C C, corresponds to
step O.
Only a slight change is necessary to formulate the deduction in the calculus
with multisets:
1.3. Three types of formalism 31
B C=CAA B , B --+ C C
AA
A, A, A + B , A (B C) =Cc
A, A B , A + (B --+ C) C
A B , A (B + C) A C
A + (B C) (A B) (A --+ C)
(A (B --+ C)) ((A B) + (A + C))
The appearance of two occurrences of A just before the LC-inference corre-
sponds to the two occurrences of A t" in the original deduction in --+Nm.
It is not hard to convince oneself that, as long as only the principles 1-3
for the construction of prooftrees are applied, the resulting proof will always
be normal. Conversely, it may be proved that all normal prooftrees can be
obtained using construction principles 1-3 only. Thus we see that normal
prooftrees in -41\Tm correspond to deduction in the sequent calculus without
Cut; and since every proof in natural deduction may be transformed into a
normal proof of the same conclusion, using (at most) the same assumptions,
it also follows for the sequent calculus that every deducible sequent F A
must have a deduction without Cut.
Deductions in S without the rule Cut have a very nice property, which is
immediately obvious: the subformula property: all formulas occurring in a
deduction of r A are subformulas of the formulas in F, A.
A point worth noting is that the correspondence between sequent calculus
deductions and natural deductions is usually not one-to-one. For example, in
our transformation of the example 1.3.3 above, the steps 2 and 3 might have
been interchanged, resulting in a different deduction in S.
Another remark concerns construction principle 3: it follows in an indirect
way from the rule >E. Instead of --*E we might take the following:
[B]u
Do vi D2
--+E*,uA + B A C
which closely corresponds to construction principle 3 (cf. 6.12.4).
1.3.7A. * There are other possible choices for the construction principles for
prooftrees. For example, we might replace principle 3 by the following principle 3':
Given a prooftree D with open assumption class [B]u, replace all occurrences of
B in [B]u by
A > By A
Show that this also generates all natural deduction prooftrees for implication logic;
what sequent rules do these modified principles give rise to?
32 Chapter 1. Introduction
1.3.7B. * Show that the following prooftree requires an application of construc-
tion principle 4:
AAB AuA Au
B n
Au
1.3.8. Semantical motivation of Gentzen systems
For classical logic, we may arrive in a very natural way at a Gentzen system
by semantical considerations. Here we use sequents F A, with r and A
finite sets; the intuitive interpretation is that F A is validiffAF-4VA
is true. Now suppose we want to find out if there is a valuation making all of
F true and all of A false. We can break down this problem by means of two
rules, one for reducing A B on the left, another for reducing A > B on
the right:
r A, F, B A L.4 r, A B, A
.14_*B, A
R+
r,A--+B A
The problem of finding the required solution for the sequent at the bottom is
equivalent to finding the solution(s) for (each of) the sequent(s) at the upper
line. Thus starting at the bottom, we may work our way upwards; along each
branch, the possibility of applying the rules stops, if all components have been
reduced to atoms. If all branches terminate in sequents of the form r',P
P, A', there is no valuation for the sequent r A making r true and A false.
Taking sequents r',P P, A' as axioms, the search tree for the valuation
has then in fact become a derivation of the sequent r A from axioms and
L-4, R-4. This very simple argument constitutes also a completeness proof
for classical propositional logic, relative to a Gentzen system without Cut.
This idea for a completeness proof may also be adapted (in a not entirely
trivial way) to intuitionistic and minimal logic, with Kripke semantics as the
intended semantics.
The reader may be inclined to ask, why consider Gentzen systems at all?
They do look more involved than natural deduction. There are two reasons
for this. First of all, for certain logics Gentzen systems may be justified by
semantical arguments in cases where it is not obvious how to construct an
appropriate natural deduction system. Secondly, given the fact that there is
a special interest in systems with the subformula property (on which many
elementary proof-theoretic applications rest), we note that the condition of
normality, guaranteeing the subformula property for natural deduction, is a
global property of the deduction involving the order in which the rules are
applied, whereas for Gentzen systems this is simply achieved by excluding
the Cut rule.
1.3. Three types of formalism 33
1.3.9. A Hilbert system
A third type of formalism, extensively used in the logical literature, is the
Hilbert system. Here there is a notion of deduction from assumptions, as for
natural deductions, but assumptions are never closed. In Hilbert systems, the
number of rules is reduced at the expense of introducing formulas as axioms.
In most systems of this type, modus ponens (+E) is in fact the only rule for
propositional logic.
The Hilbert system Hm for minimal implication logic has as axioms all
formulas of the forms:
(B A) (k-axioms),
(A > (B C)) ((A > B) + (A > C)) (s-axioms),
for arbitrary A, B and C, and has *E as the only rule. A deduction of B
from assumptions F is then a tree with formulas from F and axioms at the
top nodes, and the conclusion B at the root. (Usually, one finds K and S
instead of k and s in the literature, since K and S are standard notations
in combinatory logic. However, in modal logic one also encounters an axiom
schema K, and we wish to avoid confusion.)
EXAMPLE. A deduction DA of A A:
[Aq(A>A)A)) >.[(A>(AA))(AA)) A«A>A)A)
(A-4(A A)) > (A A)
A > A
A>.(A>A)
Deductions in Hilbert systems are often presented in linear format. Thus,
in the case of implication logic, we may define a deduction of a formula A
as a sequence A1, A2, , An such that A An, and moreover for each k
(1 <k < n) either Ak is an axiom, or there are Ai, Ai with i, j < k such that
Ai 4. Ak. For example, the prooftree above may be represented by the
following sequence:
In fact, it is also possible to present natural deduction proofs and Gentzen
system deductions in such a linear form. Where the primary aim is to discuss
the actual construction of deductions, this is common practice in the literature
on natural deduction. The disadvantage of the tree format, when compared
with the linear format, is that the width of prooftrees for somewhat more
complicated deductions soon makes it impracticable to exhibit them. On the
(1) [Aq(A>/1)A)] [(A*(A+A))*(AA)] s-axiom
(2) A«A+A)>A) k-axiom
(3) (Aq/1-4,4)) > (A>A) (1), (2)
(4) A 4. (A > A) k-axiom
(5) A > A (3), (4)
34 Chapter 1. Introduction
other hand, as we shall see, the tree format for natural deductions has decided
advantages for meta-theoretical considerations, since it provides an element
of geometrical intuition.
There is also a formulas-as-types isomorphism for Hm, but this time the
corresponding term system is CL, where the constants k and s represent
the axioms (cf. 1.2.17)
A * (B --+ A),
: (A > (B --+ C)) ((A B) + (A --+ C)),
and application corresponds to *E as for natural deduction.
EXAMPLES. We write AB as an abbreviation for A + B.
kB(CB),A (B(CB))(A(B(CB))) kB 'C : B(CB)
kB(CB),AkB,C : A(B(CB))
The prooftree exhibited before, establishing A + A, corresponds to a term
sA,A-4A,AkA,A-4AkA,A
The notion of weak reduction of course transfers from terms of CL, to Hm,
but is of far less interest than 0-reduction for >Nm. However, the construc-
tion of an "abstraction-surrogate" A*x in 1.2.19 plays a role in proving the
equivalence (w.r.t. derivable formulas) between systems of natural deduction
and Hilbert systems, since it corresponds to a deduction theorem (see 2.4.2),
and thereby provides us with a method for translating natural deduction
proofs into Hilbert system proofs.
Chapter 2
N-systems and H-systems
Until we come to chapter 9, we shall concentrate on our three standard logics:
classical logic C, intuitionistic logic I and minimal logic M. The informal in-
terpretation (semantics) for C needs no explanation here. The logic I was
originally motivated by L. E. J. Brouwer's philosophy of mathematics (more
information in Troelstra and van Dalen [1988, chapter 1]); the informal inter-
pretation of the intuitionistic logical operators, in terms of the primitive no-
tions of "construction" and "constructive proof", is known as the "Brouwer-
HeytingKolmogorov interpretation" (see 1.3.1, 2.5.1). Minimal logic M is a
minor variant of I, obtained by rejection of the principle "from a falsehood
follows whatever you like" (Latin: "ex falso sequitur quodlibet", hence the
principle is often elliptically referred to as "ex falso"), so that, in M, the
logical symbol for falsehood J. behaves like some unprovable propositional
constant, not playing a role in the axioms or rules.
This chapter opens with a precise description of N-systems for the full
first-order language with proofs in the form of deduction trees, assumptions
appearing at top nodes. After that we present in detail the corresponding
term system for the intuitionistic N-system, an extension Of simple type the-
ory. Once a precise formalism has been specified, we are ready for a section on
the GödelGentzen embedding of classical logic into minimal logic. This sec-
tion gives some insight into the relations between C on the one hand and M,
I on the other hand. Finally we introduce Hilbert systems for our standard
logics and prove their deductive equivalence to the corresponding N-systems.
2.1 Natural deduction systems
We use script D, e, possibly sub- and/or superscripted, for deductions,. and
adopt the notational conventions for prooftrees with assumptions and con-
clusion adopted at the beginning of 1.3.2.
2.1.1. DEFINITION. (The systems Nm, Ni, Nc) Assumptions are formula
occurrences always appearing at the top of a branch (assumptions are "leaves"
35
36 Chapter 2. N-systems and H-systems
of the tree), and are supposed to be labelled by markers (e.g. natural numbers,
or variable symbols). The set of assumptions of the same form with the
same marker forms an assumption class. Distinct formulas must have distinct
markers. We permit empty assumption classes!
Assumptions may be closed; assumption classes are always closed "en bloc",
that is to say, at each inference, either all assumptions in a class are closed,
or they are all left open. Closure is indicated by repeating the marker(s) of
the class(es) at the inference.
For ease in the exposition, we shall reserve u, y, w for assumption markers,
and x, y, z for individual variables.
Deductions in the system of natural deduction are generated as follows.
Basis. The single-node tree with label A (i.e. a single occurrence of A) is a
(natural) deduction from the open assumption A; there are no closed assump-
tions.
Inductive step. Let Di, D2, D3 be deductions. A (natural) deduction D may
be constructed according to one of the rules below. The classes [A]u, [B]' ,
[,A]u below contain open assumptions of the deductions of the premises of
the final inference, but are closed in the whole deduction.
For A, V, V, 3 we have introduction rules (I-rules) and elimination rules
(E-rules).
D1 D2 Di Di
A A B A A BAELA B AER
A A B A
[A]u
Di D2
A -4 B A .4E
--+I,u
A + B
Di DiAB
VIR VIL
A V B A V B
Di In VI: y x or y 0 FV(A),
A[x I y] and y not free in any assump-
VxA V/ tion open in
[A[x I Au
Di D2
3xA C 3E5u
[A]u [B]v
Di D2 D3
A V B C C vE,u,v
In 3E: y a-- x or y FV(A),
and y not free in C nor in any
assumption open in D2 except
2.1. Natural deduction systems 37
This completes the description of the rules for minimal logic Nm. Note that
1 has not been mentioned in any of the above rules, and therefore it behaves
in minimal logic as an arbitrary unprovable propositional constant.
To obtain the intuitionistic and classical systems Ni and Nc we add the
intuitionistic absurdity rule _Li and the more general classical absurdity rule
respectively:
(1, is more general than _Li since [,A]u) may be empty.) In an E-rule ap-
plication, the premise containing the occurrence of the logical operator being
eliminated is called the major premise; the other premise(s) are called the
minor premise(s) of the rule application. As a standard convention in display-
ing prooftrees, we place the major premises of elimination rule applications
in leftmost position.
To spell out the open and closed assumptions for the rules exhibited above:
When A is applied, the set [Ar of open assumptions of the form A in
D becomes closed; when VE is applied, the set [Art of open assumptions
of the form A in D2 and the set [B]V of open assumptions of the form
B in D3 become closed; when 3E is applied, the set [A[xI y]]u of open
assumptions of the form A in D2 becomes closed; when J. is applied,
the set [--,A]u of open assumptions of the form -IA in D1 becomes closed.
All other assumptions, not covered by the cases just mentioned, stay
open.
As to the individual variables which are considered to be free in a deduction,
we stipulate
The deduction consisting of assumption A only has FV(A) as free vari-
ables;
at each rule application, the free individual variables are inherited from
the immediate subdeductions, except that
in an application of 3E the occurrences of the free variable y in D2
become bound, and in an application of VI the occurrences of variable
y in D1 become bound, and
in A the variables in FV(A) have to be added in case [Al' is empty, in
VIR those in FV(B) have to be added, and in VIL those in FV(A) have
to be added.
38 Chapter 2. N-systerns and H-systerns
The individual variable becoming bound in an application a of VI or 3E is
said to be the proper variable of a.
Instead of closed (assumption) one also finds in the literature the terminol-
ogy eliminated or cancelled or discharged. Because of the correspondence of
closed assumptions with bound variables in the term calculus (to be explained
in detail in the next section) we also sometimes use "bound" for "closed". If
A is among the open assumptions of a deduction D with conclusion B, the
conclusion B in D is said to depend on A in D. From now on we regard
"assumption of D" and "open assumption of 7," as synonymous. E
2.1.2. DEFINITION. A convenient global assumption in the presentation of
a deduction is the variable convention. A deduction is said to satisfy the
variable convention if the proper variables of the applications of 3E and VI
are kept distinct. That is to say, the proper variable of an application a of
3E or VI occurs in the deduction only above a.
If moreover the bound and free variables are kept distinct, the deduction
is said to be a pure-variable deduction. Henceforth we shall usually assume
that the pure-variable condition is satisfied.
2.1.3. REMARKS. (0 Since in our notation for prooftrees, [A]u refers to
all assumptions A labelled u, it is tacitly understood that in VE the label u
occurs in D2 only, and y in D3 only. Similarly, in 3E the marker u occurs
in D2 only. This restriction may be relaxed, at the expense of a much more
clumsy formulation of 3E and VE.
(ii) The rules of (extensions of) natural deduction systems are often pre-
sented in a more informal style. Instead of using inductive clauses "If Do,
D1, . . . are correct deductions, then so is D" as we did above, we can also de-
scribe the rules by exhibiting premises and assumptions to be discharged (if
any), where the deductions between assumptions and premises are indicated
by vertical dots. Thus --+E and VE are given by the schemas
[A]u [B]v
A > B A
--+E
AV B C CVEu,v
2.1.4. EXAMPLES. The first example is in the classical system Nc:
2.1. Natural deduction systems 39
Px-43yQy Pxu
3E,w ]YQY
A(x)u
axA(x)u AxA(x) 31*I
+I7v
,A(x)
VIVx,A(x) *E
,Vx,A(x) + 3xA(x)
The next example is in Ni:
QYw
Px--+Qy
2y (Px>QY)
Ay(Px--*Qy)
3Y(PxQY) VIVx3y(Px--*Qy)
A Vx3y(PxQy)
Pxt) Px"' _+E
Ii_LQy
2Y(PxQY)2VIE,u,
where A Vx(Px V ,13x) A Vx(Px > 3yQy), and where D, TY are
A's' A ui
Vx(PxV-,./3x)
AE
Vx(Px--+3yQy)
AE
PxVPx VE
We also give two examples of incorrect deductions, violating the conditions
on variables in VI, 3E. The conclusions are obviously incorrect, since they
are not generally valid for the standard semantics for classical logic. We have
marked the incorrect assumption discharges with an exclamation mark.
Pxu VI,!
VY PY u
Px --4Vy Py
VIVx(Px > Vy Py)
px_43yQy VE
py Qu pyv
>EPxw Q 3E v !,
3x Px > Q A, u
(Py Q) --+ (3x Px Q)
Vy((Py Q) (3x P x
Q)) VI
2.1.5. DEFINITION. The theories (sets of theorems) generated by Nm, Ni
and Nc are denoted by M (minimal logic), I (intuitionistic logic) and C
(classical logic) respectively.
r Hs A for S = M, I, C iff A is derivable from the set of assumptions r in
the N-system for S. IE1
40 Chapter 2. N-systerns and H-systems
2.1.6. Identity of proof trees. (i) Prooftrees are completely determined if we
indicate at every node which is not a top node which rule has been applied to
obtain the formula at the node from the formulas at the nodes immediately
above it, plus the assumption classes discharged, if any.
(ii) From 1.3.6 we recall that two prooftrees are regarded as (essentially) the
same, if (1) the underlying (unlabelled) trees are isomorphic, (2) nodes cor-
responding under the isomorphism get assigned the same formulas, (3) again
modulo the isomorphism, the partitioning of assumptions into assumption
classes is the same, and (4) corresponding assumption classes are discharged
at corresponding nodes. Moreover, under the isomorphism, corresponding
open assumptions should get the same marker.
Needless to say, in many cases it is not really necessary to indicate the
rule which has been used to arrive at a particular node, since this is already
determined by the form of the formulas at the nodes; but in a few cases
the rule applied cannot be unambiguously reconstructed from the formulas
alone. Nor is it essential to indicate a variable for a discharged assumption
class at a rule application, if the assumption class happens to be empty.
The reason why we insisted, in the definition of deduction above, that in
principle this variable should always be present, is that this convention leads
to the most straightforward correspondence between deductions and terms of
a typed lambda calculus, discussed in the next section.
2.1.7. REMARKS. (0 The absurdity rules J..j and 1, might be called elimi-
nation rules for 1, since they eliminate the constant J_; this suggests the des-
ignations _LE, for these rules. However, they behave rather differently
from the other E-rules, since neither has the conclusion a direct connection
with the premise, nor is there an assumption directly related to the premise,
as in VE, E. Therefore we have kept the customary designation for these
rules. This anomalous behaviour suggests another possibility: taking Nm as
the basic system, Ni and Nc are regarded as Nm with extra axioms added.
For Ni one adds \g/ '(.1_ -4 A), with a FV(A), and for Nc one adds stability
axioms V(--A -4 A) (see 2.3.6).
(ii) Sometimes it is more natural to write VE and 3I as two-premise rules,
with the individual term as second premise (a minor premise in case of VE):
VxA t A[x/t] t
A[x/t] 2xA
This emphasizes the analogies between --+E and VE, and between AI and
I. The mixing of deduction with term construction might seem strange
at first sight, but becomes less so if one keeps in mind that writing down
a term implicitly entails a proof that by the rules of term construction the
term denotes something which is in the domain of the variables. Such extra
premises become indispensable if we consider logics where terms do not always
2.1. Natural deduction systems 41
denote; see 6.5. This convention is also utilized in chapter 10. If one wants to
stress the relation to type theory, one writes t: D (D domain of individuals)
for the second premise.
The statement of the rules VI and AE may be simplified somewhat if
we rely on our convention that formulas differing only in the naming of bound
variables are equal. These rules may then be written as:
[A]u
A Di D2
VxA
VI 3xA C 3E,u
where in VI x is not free in any assumption open in 1,1, and in 3E x is not
free in C nor in any assumption open in 7,2 except in [A]u.
In theories based on logic, we may accommodate axioms as rules with-
out premises; so an axiom appears in a prooftree as a top node with a line
over it (in practice we often drop this line).
2.1.8. Natural deductions in sequent style
In the format described above, the assumptions open at any node y in a de-
duction tree 1, are found by looking at the top nodes above zi; the ones bearing
a label not yet discharged between the top node and y are still open at v.
Less economical in writing, but for metamathematical treatment sometimes
more convenient, is a style of presentation where the open assumptions are
carried along and exhibited at each node. We call the set of open assumptions
at a node the context. A context is a set
u1: A1, u2: A2,. , un:
where the ui are pairwise distinct; the Ai need not be distinct. The deductions
now become trees where each node is labelled with a sequent of the form
r B, r a context. Below, when writing a union of contexts such as rA
(short for r U A), it will always be assumed that the union is consistent, that
is to say, again forms a context. In this form the rules and axioms now read
as follows:
u : A A (Axiom)
r[u: B T
rA A B rAonAi
AI AErA ,4/\,8 r Ai
r Ai
VI
rAvB A [u: A] C Aqv: B] C vE
42 Chapter 2. N-systems and H-systems
r[x: ---,A] 1 1 F _L
_LiFA --C FA'
F A[xly] F VxA
VI VEr VxA F A[xlt]
r A[x It] 3, F 3yA[x/y] A[u: A] C
3E
F 3xA C
Here [u: C] means that the assumption u: C in the context may be present or
absent. Moreover, in q u: A does not occur in F, in VE u: A and 1): B do
not occur in FA!, in ic u: does not occur in F, and in 3E u: A does not
occur in F.
The correspondence is now such that at any node precisely the inhabited
assumption classes which are not yet closed at that node are listed.
2.1.8A. 4 Give proofs in Nm or Ni of
A > (B -4 A);
AV B, B (AV B);
(A C) [(B C) > (A V B C)];
AAB>B, A>(B>.AAB);
1 A;
V x A A[x It]; A[x It] 3x A;
Vx(B -4 A) 44 (B VyA[x/y]) (x Ø FV(B), y x or y 0 FV(A));
Vx(A B) (3yA[xly] B) (x Ø FV(B), y x or y Ø FV(A)).
2.1.8B. 4* Give proofs in Nm of
A >
-,(A B)
A B) ( -,.4 A -,-,B);
(A V B) 44 (-,A A -,B);
VxA
2.1.8C. 4 Give proofs in Nm of
(B > (A > B) > A > (b-axioms),
(A B B -4 A > (c-axioms),
(A -4 A > B) -4 A B (w-axioms).
2.1.8D. 4 Prove in Ni B). Hint. First construct
deductions of and of from the assumption -,(A B).
2.1. Natural deductzon systems 43
2.1.8E. 4* Prove in Nc
A V B A ,B),
3xA
((A B) > A) > A (Peirce's law).
2.1.8F. 4* Construct in 114-n a proof of
((A 13) C) (A C) C
from two instances of Peirce's law as assumptions: ((A B) A) A and
((C A) C) C.
2.1.8G. 4* Derive in q\I'm PA,BAC frOM PA,B and PA,C, where Pxy iS ((X
Y) X) X, i.e., Peirce's law for X and Y.
2.1.8H. 4* Let F[*], GH be a positive and negative context respectively. Prove
in Nm that
Vi(A B) (F[A] F[B]),
F- VY(A B) (G[B] G[A]),
where consists of the variables in A B becoming bound by substitution of A
and B into FH in the first line, and into GH in the second line.
2.1.9. The Complete Discharge Convention
One possibility left open by the definition of deductions in the preceding sec-
tion is to discharge always all open assumptions of the same form, whenever
possible.
Thus in *I we can take [A]x to represent all assumptions of the form A
which are still open at the premise B of the inference and occur above B; in
an application of VE [A]u, [B]v represent all assumptions of the form A still
open at C in the second subdeduction, and all assumptions of the form B
still open at C in the third subdeduction respectively; in an application of 3E
[A[x 10 represents all assumptions of this form in the second subdeduction
still open at C.
It is easy to see that a deduction remains correct, if we modify the discharge
of assumptions according to this convention. We call this convention the
"Complete Discharge Convention", or CDC for short.
Note that the use of markers, and the repetition of markers at inferences
where assumption classes are being discharged, is redundant if one adopts
CDC (although still convenient as a bookkeeping device).
From the viewpoint of deducibility, both versions of the notion of deduc-
tion are acceptable; CDC has the advantage of simplicity. But as we shall
44 Chapter 2. N-systems and H-systerns
discover, the general notion is much better-behaved when it comes to studying
normalization of deductions. In particular, the so-called "formulas-as-types"
analogy ("isomorphism"), which has strong motivating power and permits us
to transfer techniques from the study of the lambda calculus to the study
of natural deduction, applies only to the general notion of deduction, not to
deductions based on CDC.
2.1.10. Digression: representing CDC natural deduction with sequents
Let No be intuitionistic natural deduction for implication under CDC. No can
be presented as a calculus in sequent notation, N1, in the following (obvious)
way:
AA r B r A B rr\-(241 -AB rur, B
Here the antecedents are regarded as sets, not multisets.
Ni-deductions are obtained from No-deductions by replacing the formula
A at node y by the sequent A, where r is the set of assumptions open
at v.
At first sight one might think that the following calculus N2 -
I', A A
where the antecedents of the sequents are treated as multisets, represents a
step towards the standard *Ni (without CDC), since it looks as if distinct
occurrences of the same formula in the antecedent might be used to represent
differently labelled assumption classes in No-deductions. But this impression
is mistaken; in fact, if we strip the dummy assumptions from deductions in
N2, there is a one-to-one correspondence with the deductions in Ni.
Let us write v[ri for the deduction in N2 obtained from D by replacing
at each node 1, of D the sequent r A at that node with IT' A.
We show how to associate to each deduction D of I' A in N2 a deduction
D' of r' A, r c I' with the same tree structure, such that
(0 all A E r occur as conclusion of an axiom and r is a set,
D is TY[(r that is to say D is obtained from D' by weakening
the sequents throughout with the same multiset,
if Di, is the subdeduction of D associated with node y, and we replace
everywhere in D the conclusion of Dv by the conclusion of (V'), then
the result is a deduction (/)(D) in Ni.
2.2. Ni as a term calculus 45
The construction is by induction on the depth of D, and the properties just
listed are verified by induction on the depth of D.
Case 1. To an axiom r, A A we associate the axiom A A.
Case 2. Let the proof D end with --+I:
Do
I', A B
A B
To Do we have already assigned, by 1H, a Dio with conclusion r B. There
are two cases: A does not occur in P, or r is of the form r", A, A not in r".
In the first case, D' is as on the left, in the second case as on the right below:
D'o[A
I', A B f", A Br A > B r" A B
Case 3. Let D end with
Do
r A
B
The 1H produces two deductions
D'o
ro A --> B A
and we take for TY
Ayr, ro) ro
rourl rour, A
ro U r
We leave it to the reader to construct a map from N1 to N2 which is inverse
to 0.
2.1.10A. 04 Define the map /,b mentioned above and show that it is inverse to 0.
2.2 Ni as a term calculus
2.2.1. Extending the term notation for implication logic, described in sec-
tion 1.3, we can also identify the full calculi Ni, Nm with a system of typed
terms in a very natural way. The typed terms serve as an alternative nota-
tion system. In a sense, this makes the use of calligraphic D,E for deductions
in the case of N-systems redundant; we might as well use metavariables for
terms in a type theory (say s, t) for deductions. Nevertheless we shall use
both notations: D,E if we wish to emphasize the prooftrees, and ordinary
term notation if we wish to exploit the formulas-as-types parallel and study
computational aspects.
46 Chapter 2. N-systerns and H-systerns
2.2.2. DEFINITION. (Term, calculus for the full system Ni) The variables
with formula type are distinct from the individual variables occurring in the
types (formulas), and the sets of variables for distinct types are disjoint. We
exhibit the generation of terms in parallel to the rules. To each rule corre-
sponds a specific operator. For example, the first term-labelled rule AI corre-
sponds to a clause: if to: Ao and t1: A1 are terms, then p(t0:A0, ti Ao A Ai ,
nAor p(440, 1)A01, is a term. Together with the listing of the clauses for the
generation of the terms, we specify variable conditions, the free assum,ption
variables (FVa) and the free individual variables (FVi). As in type theory, we
abbreviate App(t, s) as ts.
u: A FVi(u) := FV(A), FVa(u) := {u}.
t: A s: B AT FVi(p(t, s)) :=FV i(t)UFVi(s);
p(tA, sB): A A B FVa(p(t, s)) := FVa(t) U FVa(s).
FVi(t);
:= FVa(t)-
., FVi (Pi (t)t: A0 A Ai AE (jE{O, 11.)
FVa(Pi(t))(tAonAi ):
t: A FV;(ki(t)) := FVi(t) U FV(Ai_i), and
VI UE{0,1})
ki(tAi): Ao V Ai FVa(ki(t)) := FVa(t).
[u: A] [v: B]
Do Di
t:AV B s:C s':C ",
E\u/ ,v(tAv sc 8/c): c v
[u: A]
t: B
(ÀatA .tB): A -4 B -41
u 0 FVa(t, s'), y 0 FVa(t, s),
FVi(Etv,,v(t, s, s')) := FVi(t, s');
FVa(Ent, s')) :=
FVa(t) U (FVa(s) \ {u}) U (FVa(s') \ {v}).
FVi(AuA.t) := FV;(t) U FV(A);
FVa(AuA.t) := FVa(t) \ {u}.
t: A B s: A FV;(ts) := FVi(t) FVi(s);
tA-4. B B FVa(ts) := FVa(t) U FVa(s).
2.2. Ni as a term calculus 47
t[xI y]: A[xIy]
Ax.tA :V x A VI
t: VxA
VE
exAs: A[xIs]
t: A[xI .5]
p(tA[x/si, s):3xAl
[u: A[x Iy]]
t:3x A s: C
sc): C
t: _L
Ei(t1): A
y x or y FV(A), and
if uB E FVa(t), then x FV(B);
FV;(Ax.t) :-= FVi(t) \ {x};
FVa(Ax.t) := FVa(t).
FV;(ts) :-= FVi(t) U FV(s);
FVa(ts) := FVa(t).
FV;(p(t, s)) := FVi(t),
FVa(p(t, s)) := FVa(t).
y mx or y 0 FV(A),
u 0 FVa(t), y 0 FV(C), and
if vB E FVa(8) ful, then y 0 FV(B);
FV,(K y(t, s) := FVi(t) U (FV;(s) \ {y});
FVa(EL(t, s) := FVa(t) U (FVa(s) \ {u}).
FVi(EA-(t)) := FVi(t) U FV(A);
FVa(EA-(t)) := FVi(t).
Finally, we put FV(tA) := FVi(tA) U FVa(tA).
REMARKS. (i) Dropping the terms and retaining the formulas in the schemas
above produces ordinary prooftrees, provided we keep assumptions labelled
by variables, and indicate where they are discharged.
The term assigned to the conclusion describes in fact the complete
prooftree, i.e. the deduction can unambiguously be reconstructed from this
term.
Since the variables are always supposed to have a definite type (we
could say that individual variables have a type I), it would have been possi-
ble to define FV straight away, instead of FVi and FVa separately, but the
resulting definition would not have been very perspicuous.
We may assume that proper parameters of applications of 3E and VI are
always kept distinct and are used only in the subdeduction terminating in the
rule application concerned; this would have resulted in slight simplifications
in the stipulations for free variables above. Similarly, assuming that all bound
assumption variables are kept distinct permits slight simplifications.
The conditions u 0 FVa(t, s'), 'u FVa(t, s) in VE, and the condition
U 0 FVa(t) in 3E may be dropped, but this would introduce an imperfection
48 Chapter 2. N-systems and H-systems
in the correlation between deduction trees as described earlier in 2.1.1 and the
term calculus. The conditions just mentioned correspond to the conditions
in 2.1.1 that the u in VE occurs in D2 only etc.
There is considerable redundancy in the typing of terms and subterms,
and in practice we shall drop types whenever we can do so without creating
confusion.
Instead of the use of subscripted variables for the operators, we can use
alternative notations, such as E3(t, (y, z)s), Ev(t, (y)s, (z)s'). Here variables
are bound by "( )" , so as not to cause confusion with the A which is associated
with q and VI.
As noted before, in the rules VE and 3I the term s may appear as
a second premise; in certain situations this is a natural thing to do (analogy
with type theories).
Extra axioms may be represented by addition Of constants of the ap-
propriate types.
2.2.2A. ** Give proofs in Nm of (A v B ((A C) A (B C)) (A,B,C
arbitrary), and of Vx(Rx .14) (3xRx ley) (R, unary relation symbols)
and label the nodes with the appropriate terms; compute E'Va and FIT; for the
terms assigned to the conclusions.
2.3 The relation between C, I and M
In this section we discuss some embeddings of C into M or I, via the so-called
"negative translation". This translation exists in a number of variants.
2.3.1. DEFINFrION. A formula A in a first-order language is said to belong
to the negative fragment (or "A is negative") if atomic formulas P occur only
negated (i.e. in a context P I) in A, and A does not contain V, 3.
2.3.2. LEMMA. For A negative, M H A i4
PROOF. As seen by inspection of exercise 2.1.8B, the following are all provable
in Nm:
A 44 -IA;
A B) A
B) -,B), 44 (A -4
-->
Using these implications, we establish the lemma by induction on the depth
of A; A has one of the forms ,13 (P atomic), I, B A C, B -4 C, VxA.
Consider e.g. the case A as B --> C. Then C) which implies
(B and by IH (B C); this finally yields C). We leave
the other cases to the reader. El
2.3. The relation between C, I and M 49
2.3.2A. 4 Do the remaining cases.
2.3.3. DEFINITION. For all formulas of predicate logic the (GödelGentzen)
negative translation g is defined inductively by
Pg := for atomic P;
1g :=
(Ho (A A B)g := Ag A Bg;
(A > B)g := Ag Bg;
(VxA)g := WAg;
(A V B)g := 1(-1Ag A --Og);
(3xA)5
Inessential variants are obtained by dropping clause (ii) and applying the
first clause to 1 as well, or by adding a process of systematically replacing
by
2.3.4. THEOREM. For all A
(i) C F- A i4 Ag;
F I, A <=> Fg hm Ag,
where rg := {Bg : B E rl.
PROOF. The proof shows by induction on the length of deductions in Nc that
whenever I' H A, then Fg I Ag. The rules for V, 2 are in Nc derivable from
the other rules, if we use the classical definitions A V B := n(nA A 0), 3x A
:= NixA. So we may restrict attention to Nc for the language AV>I.
All applications of rules, except applications of 1,, translate into applica-
tions of the corresponding rules of Nm, e.g.
[A]x
translates as
B x
A B
For the translation of I, we need lemma 2.3.2:
[A]x
translates as
J_
X
A
DA
> Ag
Ag
HAT
pg- X
nnAg
where DA is a standard proof of ,Ag Ag as given by lemma 2.3.2. El
2.3.5. COROLLARY. For negative A, C I A iff M I A, i.e. C is conservative
over M w.r.t. negative formulas.
50 Chapter 2. N-systerns and H-systems
2.3.5A. 4 Derive the rules for defined V, 3 from the other rules in Nc.
In a very similar way we obtain the following:
2.3.6. THEOREM. Let r, A be formulas without V, 3, and let Nc F =- A.
Then there is a proof of M H r, A =- A where A consists of assumptions
RY), R a relation symbol occurring in F, A. (Such assumptions
are called stability assumptions.)
PROOF. Since V, 3 are classically definable, we may assume that the whole
proof of Nc H F A is carried out in the language without V, 3. For this
fragment, all instances of 1, are reducible to instances with atomic conclu-
sion relative to the rules of Nm (exercise). For the rest, the proof proceeds
straightforwardly by induction on the length of classical deductions in the
language without V, 3.
2.3.6A. 4 Show that in Ni all instances of _Li are derivable from the instances
of _Li with atomic conclusion. Show that in Nc, for the language without V, 3,
all instances of I, are derivable from instances I, with atomic conclusion. (For a
hint, see 6.1.11.)
2.3.7. Other versions of the negative translation
One of the best known variants is Kolmogorov's negative translation k. Ak
is obtained by simultaneously inserting double negations in front of all sub-
formulas of A, including A itself, but excepting 1, which is left unchanged.
Inductively we may define k by:
Pk := for P atomic;
_Lk ;_
(A o ß)k := o ßk) for o E {A, V, 4;
(QxA)k := --,(Qx)Ak for Q E {V, 3}.
Another variant Aq (Kuroda's negative translation) ("q" from "quantifier")
is obtained as follows: insert after each occurrence of V, and in front of
the whole formula.
2.3.8. PROPOSITION. M Ag 44 Ak, I H Ag 44 Aq.
2.3.8A. 4* Prove the proposition.
COROLLARY. For formulas A not containing V, C H iff I H
PROOF. Let C H -IA, then C H hence M H Now (-,A)
and by the proposition I H (_,A) +-* (--,A)q. But (-,A)q and
I H
2.4. Hilbert systems 51
2.4 Hilbert systems
Hilbert systems, H-systems for short, are very convenient in proofs of many
metamathematical properties established by induction on lengths of deduc-
tions. But the main theme of this text contains cutfree and normalizable
systems, so we shall not return to Hilbert systems after this section, which
is mainly devoted to a proof of equivalence of Hilbert systems with other
systems studied here.
By a Hilbert system we mean an axiomatization with axioms and as sole
rules *E and VI; so there are no rules which close hypotheses (= assump-
tions). In a more liberal concept of Hilbert formalism one can permit other
rules besides or instead of +E and VI, provided that no rule closes assump-
tions. (For example, we could allow a rule: from A, B derive A A B.)
2.4.1. DEFINITION. (Hilbert system,s Hc, Hm, Hi for C, M and I) The
axioms for Hm are
A + (B A), (A + (B C)) -4 ((A * B) * (A * C));
A*AV B, B-4 AV B;
(A -4 C) ((B + C) + (AV B C));
AAB*A, AAB+B, A+(B+(AAB));
V x A > A[x It], A[x -4 3xA;
Vx(B > A) --* (B VgA[xly]) (x FV(B), y x or y Ø FV(A));
Vx(A B) (3yA[x/y] B) FV(B), y x or y 0 FV(A)).
Hi has in addition the axiom 1 > A, and Hc is Hi plus an additional axiom
schema + A (law of double negation). Instead of the law of double
negation, one can also take the law of the excluded middle A V
Rules for deductions from a set of assumptions r:
Ass If A E r, then r A.
>E If 1" H A * B, rHA, then 1" B;
VI If r H A, then r H VyA[x/y], (x Fv(r), y x or y Ø FV(A)).
>E is also known as Modus Ponens (MP), and VI as the rule of Generalization
(G).
Deductions from assumptions r may be exhibited as prooftrees, where ax-
ioms and assumptions from r appear at the top nodes, and lower nodes are
formed either by the single-premise rule VI or by the two-premise rule *E.
As observed already in 1.3.9, quite often the notion of deduction is presented
in linear format, as follows:
A1, ,A is said to be a deduction of A from r, if An -= A, and each Ai
is either an element of r, or an instance of a logical axiom, or follows from
A5, j < i, by VI, or follows from A5 and Ak with j and k < i, by 4E. E
52 Chapter 2. N-systems and H-systems
2.4.2. THEOREM. H[mic] and N[mic] are equivalent, i.e. r I A in H[mic]
iff A in N[MiC].
PROOF. We concentrate on the intuitionistic case. The direction from left to
right is straightforward: we only have to check that all axioms of Hi are in
fact derivable in Ni (exercise 2.1.8A, example 1.3.3); the rules *E, VI are
also available in Ni.
Now as to the direction from right to left. First we show how to transform
a deduction in Ni into a deduction in the intermediate system with axioms of
Hi and rules VI and -4E only, by induction on the height of deductions.
There are as many cases as there are rules. On the left hand side we show
a derivation of height k + 1 terminating in AI, VE, 3E; on the right we
indicate the transformation into a deduction with axioms and and -->E
only. By induction hypothesis, 7,1, D2 7,3 have already been transformed into
TYI,T,,V1/3 respectively.
1,1 D2
A B
A A B
[A] [B]
Di D2 V34
AV B C C
[A[xly]]
Di D2 4
3xA C
A (B (A A B)) A
B (A A B)
A A B
[A]
[B]
(AW),«BrC)>(AVBrC)) A + C
(B+C)-4(AVBW) B + C
AV BW A v B
[A[x I y]]
T;o
A[xly]+C
Vx(AW)(3xA>,C) Vx(AW)
3xA C 3xA
In the second prooftree it is tacitly assumed that x i;Z FV(C); if this is not
the case, we must do some renaming of variables. Alternatively, we may rely
on our convention that formulas and prooftrees are identified if differing only
in the names of. bound variables. The remaining cases are left as an exercise.
Now we shall show, by induction on the height of a deduction in the in-
termediate system, how to remove all applications of First we recall
that A > A can be proved in Hi by the standard deduction DA exhibited in
subsection 1.3.9.
Consider any deduction D with axioms, open hypotheses and the rules *I
and --*E. Suppose D ends with say D is of the form
2.4. Hilbert systems 53
[Aix
D1
B
A * B
and let TY1 be the result of eliminating a from 7,1 (induction hypothesis).
We have to show how to eliminate the final from
We do this by showing how to transform each subdeduction Do (with conclu-
sion C say) of IY1 into a deduction
A C
by induction on the height of Do.
Basis. A top formula occurrence C not in the class indicated by [A]x in VI
is replaced by
C (A C) C
D2
D C
and for C VxB
D2
B[xly]
VxB
A + C
and the top formula occurrences in [Aix are replaced by DA.
Induction step. Do ends with +E or with VI. We indicate the corresponding
step in the construction of 7); below.
D3
D goes to
goes to
A>C A>.13>C
(A>D)>A C A D
A -4 C
Vx(A*B)(A >VxB)
A VxB
A > B[x y]
Vx(A B)
By induction hypothesis, TY,D; have already been constructed for V2, V3.
The case for minimal logic is contained in the argument above. The extension
to the classical case we leave as an exercise.
54 Chapter 2. N-systerns and H-systerns
REMARKS. (i) This argument may also be read as showing that Hi itself is
closed under +I, i.e. it shows how to construct a proof of F I A > B from
a proof of F, A H B. This is called the deduction theorem for Hi.
The compactness of term notation is well illustrated by the following
example. Suppose we want to show that the rule VE can be replaced by
instances of the axiom (A-4C) * (B+C) --+ (AV B --+ C). Let so(xA): C,
si(y3):C , t: AV B be given, and let d be a constant for the axiom. Then
d(AxA .4)(4B .si9tAvB:C takes the place of the voluminous prooftree oc-
curring at the relevant place in the argument above.
If we concentrate on implication logic, we see that the method of
eliminating an open a,ssumption A, in the proof 6f the deduction theorem, is
exactly the same, step for step, as the definition of the abstraction operator
A*xA in combinatory logic (1.2.19). Consider, for example, the induction step
in this construction. By induction hypothesis, we have constructed on the
prooftree side deductions of r I A -4 (C D), corresponding to a term
A. xA .tC--+D and of F H A > C, corresponding to a term A*xA.sc. The
deduction of A * D constructed from this corresponds to
sA,C,D: (A(CD))((AC)(AD)) A* xA A(CD)
s(A*xA.t):(AC)(AD) A*xi t.sc Ac
s(A*x.t)(A*x.$): AD
where > has been dropped, that is to say, EF is short for E + F.
2.4.2A. 4 Do the remaining cases of the transformation of a natural deduction
in the intermediate system.
2.4.2B. 4 Show the equivalence of Hc and Nc.
2.4.2C. 4 Show that Hi with as primitive operator may be axiomatized by
replacing the axiom schema 1 A by A B) and (A B) (-43 >
2.4.2D. 4* An alternative axiomatization for *Hm is obtained by taking as
rule modus ponens, and as axiom schemas A B A, (A > A B) B
(contraction), (A B C) (B A C) (permutation), (A B)
(C A) > (C B) (when combined with permutation this is just transitivity of
implication). Prove the equivalence.
2.4.2E. 4 Show that a Hilbert system for V).AM is obtained by taking as the
only rule -4E, and as axioms ViF, where F is a formula of one of the following
forms: A > B -4 A; (A > B C) > (A B) A C; A > B > A A B;
Ao AA1 r A (i E 1041); B
2.5. Notes 55
VxB VxC (y 0 FV(Vx(B C)); VxA A[x/t]. Can you extend this to full
M?
2.4.2F. 01 Show that the following axiom schemas and rules yield a Hilbert system
for Ip: (1) A > A, (2) if A, A B then B, (3) if A B and B C then A C,
(4)AAB-- A,AAB> B, (5)AAVB,BAvB,(6)ifA> C, B C
then AVB C, (7) if A B, A C then A B AC, (8) if AAB C
then A (B C), (9) if A > (B C) then A A B C, (10) 1 A. This is
an example of a Hilbert system for propositional logic with more rules than just
modus ponens. (Spector [1962], Troelstra [1974)
2.5 Notes
2.5.1. The BrouwerHeytingKolmogorov interpretation. This interpreta-
tion (BHK-interpretation for short) of intuitionistic logic explains what it
means to prove a logically compound statement in terms of what it means to
prove its components; the explanations use the notions of construction and
constructive proof as unexplained primitive notions. For atomic formulas the
notion of proof is supposed to be given. For propositional logic the clauses of
BHK are
p proves A A B iff p is a pair (po, pi) and po proves A, pi proves B,
p proves A V B iff p is either of the form (0, pi), and pi proves A, or of
the form (1) and pi proves B,
p proves A > B iff p is a construction transforming any proof c of A
into a proof p(c) of B,
J_ is a proposition without proof.
It will be clear that A V (that is to say, A V (A --+ ±)) is not generally
valid in this interpretation, since the validity of A V would mean that for
every proposition A we can either prove A or refute A, that is to say we can
either prove A or give a construction which obtains a contradiction from any
alleged proof of A. (The only way of making A V generally valid would
be to give "proof" and "construction" a non-standard, obviously unintended
interpretation.) More information on the BHK-interpretation and its history
may be found in Troelstra and van Dalen [1988, 1.3, 1.5.31, Troelstra [1983,
1990].
For predicate logic we may add clauses:
p proves (VxED)A if p is a construction such that for all d E D, p(d)
proves A[x/d],
56 Chapter 2. N-systems and H-systems
p proves (3xED)A if p is of the form (d, p') with d an element of D, and
p' a proof of A[xI 4
2.5.2. Natural deduction. Gentzen [1935] introduced natural deduction sys-
tems NJ and NK for intuitionistic and classical logic respectively. NJ is like
Ni, except that --, is treated as a primitive with two rules
Di D2
A ,A
_,E
J_
which reduce to instances of -->I, -->E if ,A is defined. Gentzen's NK is
obtained from NJ by adding axioms A V ,A. Gentzen was not the first to
introduce this type of formalism; before him, Jagkowski [1934] gave such a
formalism (in linear, not in tree format) for classical logic (cf. Curry [1963, p.
249]).
Gentzen's examples, and his description of the handling of open and closed
assumptions, may be interpreted as referring to the N-systems as described
here, but are also compatible with CDC. In the latter case, however, Gentzen's
marking of discharged assumptions would be redundant. On the other hand,
Gentzen's examples are all compatible with CDC.
Subsection 2.1.10 improves the discussion of Troelstra [1999, p. 99], where
the system N3 is misstated; N1 as defined here is the correct version.
In Curry [1950,1963] natural deduction is treated in the same manner as
done by Gentzen. For classical systems he considers several formulations,
taking as his basic one the intuitionistic system with a rule already considered
by Gentzen:
1-1,4
A
However, in the absence of negation Curry includes for the classical systems
the Peirce rule P:
[A -4 gu
D
_A p,u
A
Beth [1962b,1962a] also considers natural deduction for C with the Peirce
rule. Our Nm, Ni and Nc coincide with the systems for M, I and C in
Prawitz [1965] respectively, except that Prawitz adopts CDC as his standard
convention. The more liberal convention concerning the closure of open as-
sumptions is also described by Prawitz, but actually used by him only in his
discussion of the normalization for a natural deduction system for the modal
logic S4.
2.5. Notes 57
Many different presentation styles for systems of natural deduction are
considered in the literature. For example, Ja6kowski [1934] and Smullyan
[1965,1966] present the proofs in linear style, with nested "boxes"; when a
new assumption is introduced, all formulas derived under that assumption
are placed in a rectangular box, which is closed when the assumption is dis-
charged. See also Prawitz [1965, appendix C].
Although natural deduction systems were not the exclusive discovery of
Gentzen, they certainly became widely known and used as a result of Gentzen
[1935]. However, we have reserved the name "Gentzen system" for the cal-
culi with léft- and right-introduction rules (discussed in the next chapter),
since not only are they exclusively due to Gentzen, but it was also for these
formalisms, not for the N-systems, that Gentzen formulated a basic meta-
mathematical result, namely cut elimination. The words used by Gentzen
in the preamble to Gentzen [1935] indicate that he had something like nor-
malization for NJ, but not for NK; however, he did not present his proof for
NJ.
2.5.3. Hilbert systems. Kleene [1952a] uses the term "Hilbert-type system";
this was apparently suggested by Gentzen [1935], who speaks of "einem dem
Hilbertschen Formalismus angeglichenen Kalkiil". Papers and books such
as Hilbert [1926,1928], Hilbert and Ackermann [1928], Hilbert and Bernays
[1934] have made such formalisms widely known, but they date from long
before Hilbert; already Frege [1879] introduced a formalism of this kind (if
one disregards the enormous notational differences). We have simplified the
term "Hilbert-type system" to "Hilbert system". There is one aspect in which
our system differs from the systems used by Hilbert and Frege: they stated
the axioms, not as schemas, but with proposition variables and/or relation
variables for A, B, C, and added a substitution rule. As far as we know, von
Neumann [1927] was the first to use axiom schemas. Extensive historical
notes may be found in Church [1956, section 29].
Many different Hilbert systems for I and C appear in the literature. Our
systems are fairly close to the formalisms used in Kleene [1952a]. The axioms
for implication in exercise 2.4.2D are the ones adopted by Hilbert [1928].
Kolmogorov [1925] gave a Hilbert system for minimal logic for the fragment
-4, V, 3. The name "minimal calculus" (German: Minimalkalkül) or
"minimal logic" was coined by Johansson [1937], who was the first to give a
formalization w.r.t. all operators in the form of a Gentzen system.
Glivenko [1929] contains a partial axiomatization for the intuitionistic logic
of A, V, The first (Hilbert-type) axiomatization for the full system I is
in Heyting [1930a,1930b]. Heyting [1930b] attempts unsuccessfully to use a
formal substitution operator, and makes an incompletely realized attempt to
take "partial terms" into account, i.e. terms which need not always denote
something. Heyting's propositional rule "If A, B, then A A B" was shown to
58 Chapter 2. N-systerns and H-systerns
be redundant by Bernays (see his letter to Heyting, reproduced in Troelstra
[1990]). Bernays also considered the problem of formalizing intuitionistic
logic, and noted that a suitable formalism could be obtained by dropping
A from Hilbert's formalism, but these results were not published.
The deduction theorem, which is crucial to our proof of equivalence of nat-
ural deduction and Hilbert systems, was discovered several times indepen-
dently. The first published proof appears to be the one by Herbrand [1930]
(already announced in Herbrand [1928]). Tarski [1956, p.32, footnote] claims
earlier, unpublished discovery in 1921. For more historical information see
Curry [1963, p.249].
2.5.4. Rule of detachment. Interesting variants of Hilbert systems for propo-
sitional logics are systems based on the so-called Condensed Detachment rule
(CD). These systems are based on axioms and the rule
A * B C
CD
cd(A B,C)
where cd(A B, C) is defined as follows. Let PV(F) be the set of proposi-
tional variables in F. If A and C have a common substitution instance, let
D = Acri = Co-2 (cri, a-2 substitutions defined on (part of) the propositional
variables of A and C respectively) be a most general common substitution
instance such that Pv(D) n (Pv(B) Pv(A)) = 0; then take cd(A B, C)
to be Bcri. (There is an algorithm for finding a most general common substi-
tution instance, namely the unification algorithm discussed in 7.2.11, where
is treated as a binary function constant.) It can be shown that, for exam-
ple, -4-M is complete for the system based on the axioms obtained from the
schemas k, s (1.3.9) and b, c, w (2.1.8C) by choosing distinct propositional
variables P,Q,R for A, B, C, plus the rule CD. For more information on this
see Hindley and Meredith [1990], Hindley [1997, chapter 6].
2.5.5. Negative translation. See Kolmogorov [1925], Gödel [1933b], Gentzen
[1933a], Kuroda [1951]. More on the negative translation and its variants,
as well as stronger conservativity results for C relative to I and M, may be
found in Troelstra and van Dalen [1988, section 2.3].
2.5.6. Formulas-as-types. For intuitionistic implication logic, the idea is
clearly present in Curry and Feys [1958, sections 9EF]; in embryonic form
already in Curry [1942, p. 60, footnote 28]; the first hint is perhaps found
in Curry [1934, p. 588]. The idea was not elaborated and/or exploited by
Curry, possibly for the following two reasons: the parallel presents itself less
forcefully in the setting of type-assignment systems than in the case of type
theories with rigid typing, and, related to this, the parallel did not seem
2.5. Notes 59
relevant to the problems Curry was working on. In any case it is a fact that
the parallel is not even mentioned in Curry [1963].
In Howard [1980] (informally circulating since 1969), the parallel is made
explicit for all the logical operators (with some credit to P. Martin-L5f). N.
G. de Bruijn has been developing a language AUTOMATH for the writing
and checking of mathematical proofs since 1967; he independently arrived at
formulas-as-types to deal with logic in his language. The logical community
at large became only slowly aware of this work. There is now an excellent
account in Nederpelt et al. [1994], with an introduction and reproduction
of the more important papers on AUTOMATH, many of which had not been
widely accessible before.
Chapter 3
Gentzen systems
Gentzen [1935] introduced his calculi LK, LJ as formalisms more amenable to
metamathematical treatment than natural deduction. For these systems he
developed the technique of cut elimination. Even if nowadays normalization
as an "equivalent" technique is widely used, there are still many reasons to
study calculi in the style of LK and LJ (henceforth to be called Gentzen
calculi or Gentzen systems, or simply G-systems):
Where normal natural deductions are characterized by a restriction on
the form of the proof more precisely, a restriction on the order in
which certain rules may succeed each other cutfree Gentzen systems
are simply characterized by the absence of the Cut rule.
Certain results are more easily obtained for cutfree proofs in G-systems
than for normal proofs in N-systems.
The treatment of classical logic in Gentzen systems is more elegant than
in N-systems.
The Gentzen systems for M, I and C have many variants. There is no reason
for the reader to get confused by this fact. Firstly, we wish to stress that in
dealing with Gentzen systems, no particular variant is to be preferred over
all the others; one should choose a variant suited to the purpose at hand.
Secondly, there is some method in the apparent confusion.
As our basic system we present in the first section below a slightly modified
form of Gentzen's original calculi LJ and LK for intuitionistic and classical
logic respectively: the Gl-calculi. In these calculi the roles of the logical rules
and the so-called structural rules are kept distinct.
It is possible to absorb the structural rules into the logical rules; this leads
to the formulation of the G3-calculi (section 3.5) with the G2-calculi (not very
important in their own right) as an intermediate step. Finally we formulate
(section 3.6) for classical logic the GentzenSchiitte systems (GS-systems),
exploiting the De Morgan dualities. The use of one-sided sequents practically
halves the number of rules. In later chapters we shall encounter the G4-
60
3.1. The G1- and G2-systems 61
and G5-systems, designed for special purposes. Two sections respectively
introduce the Cut rule, and establish deductive equivalence between N- and
G-systems.
3.1 The Gl- and G2-systems
The Gentzen systems G1c, G1i below (for classical and intuitionistic logic)
are almost identical with the original Gentzen calculi LK and LJ respectively.
The systems derive sequents, that is to say expressions r A, with F, A
finite multisets (not sequences, as for Gentzen's LJ, LK); for the notational
conventions in connection with finite multisets, see 1.1.5.
3.1.1. DEFINITION. (The Gentzen systems Glc,G1m,Gli) Proofs or de-
ductions are labelled finite trees with a single root, with axioms at the top
nodes, and each node-label connected with the labels of the (immediate) suc-
cessor nodes (if any) according to one of the rules. The rules are divided into
left- (L-) and right- (R-) rules. For a logical operator CI say, LC1, RC indicate
the rules where a formula with ® as main operator is introduced on the left
and on the right respectively. The axioms and rules for Glc are:
Axioms
Ax A A L± J.=
Rules for weakening (W) and contraction (C)
F A
LW RW
A, I' A
LC
AAr
A, A
Rules for the logical operators
Ai, A
LA
A
(i = 0,1)
c, A A
AFL
LV AVB,FA
rA,AL>
A --+ A
LV
A[x F A
B,r
A,A,A
RC FA,A
A, A
RA
.
RV (t = 0,1)FA,A0VAI.
R-4 A'rA,B
A --+ B
RV
A[x y]
F A,B
62 Chapter 3. Gentzen systems
A[xIy],F A r. A, A[x1t]
L3 RA
]xA,F A F A, 3xA
where ih 1.2, RV, y is not free in the conclusion.
The variable y in an application a of RV or L3 is called the proper variable
of a. The proper variable of a occurs only above a.
In the rules the r, A are called the side formulas or the context. In the
conclusion of each rule, the formula not in the context is called the principal
or main formula. In a sequent F A r is called the antecedent, and A
the succedent. The formula(s) in the premise(s) from which the principal
formula derives (i.e. the formulas not belonging to the context) are the active
formulas. (Gentzen calls such formulas "side formulas", which rather suggests
an element of the context.) In the axiom Ax, both occurrences of A are
principal; in L_L the occurrence of I is principal.
The intuitionistic system Gli is the subsystem of Glt obtained by re-
stricting all axioms and rules to sequents with at most one formula on the
right, and replacing L--* by
FA B, F A
Glm, the system for M, is G1i minus LI. Note that, due to the absence
of LI, every sequent derivable in Glm must have a non-empty succedent,
i.e., the succedent consists of a single formula. (This is straightforward by a
simple induction on the depth of deductions.)
For the possibility of restricting the active formulas in Ax to prime A, see
3.1.9.
3.1.2. DEFINMON. As for N-systems, a convenient global assumption for
deductions is that the proper variables of applications of L3 and RV are kept
distinct; this is called the variable convention.
If moreover the free and bound variables in a deduction are kept disjoint,
the deduction is said to be a pure-variable deduction.We shall usually assume
our deductions to satisfy the pure-variable condition
3.1.2A. * Show that each deduction may be transformed into a pure-variable
deduction.
3.1.3. EXAMPLES. (Some proofs in Gle,G1m) We have not explicitly in-
dicated the rules used. The following two deductions are in Glm:
3.1. The G1- and G2-systems
B B AA
AABB AABA
AABBAA
(A A B) (B A A)
(P + Q) P P
((P Q) P) P
It not difficult to see that there are no proofs of the conclusions if we admit
only sequents with at most one formula on the right.
The use of the contraction rule in the following two deductions (the left
one is a deduction in Glm, the right one is a deduction both in Glc and
G1i) cannot be avoided:
P P 1 1
P, 1 1
P,(P V ,P) _L _L
(P V
(P V ,P) P V LP
1 1
(P V ,P) _L , _L _L
(P V P) _L, (P V ,P) > 1
(P V P) _L _L LC
((P V ,P) 1) 1
B BAA A,BBAA A,A+BB
A, A (A + B) B
A-4(A.13) A+B
(A --+ (A --+ B)) (A
B B
Ax B
Ax,]x(Ax B) B Ax B
VxAx,3x(Ax --+ B) B ]x(Ax + B)
(VxAx --+ B) 3x(Ax B)
LC
63
3.1.3A. 4 Prove in Glm A A for arbitrary A from atomic instances P P.
3.1.3B. 4 Give sequent calculus proofs in G1m of
AAB-4A, A(B(AAB)),
A > AV B, B AV B,
(A V B C) ((A C) A (B C)),
A (B > A),
(A (B C)) ((A B) (A C)),
VxA A[xlt], A[x 3xA.
3.1.3C. 4* Prove in Gli that ( ,.4
The fact that more than one formula may occur on the right enters essentially
into certain classical proofs, for example the following two deductions in Glc
(the left deduction derives Peirce's Law, in the right deduction x FV(B)):
Ax Ax
P Ax Ax,B
Ax, Ax B
PP
P,P
PA
64 Chapter 3. Gentzen systems
3.1.3D. 4* Give sequent calculus proofs in Glc of
(A 3xB) 3x(A B) (x Ø FV(A))
3x(Ax VyAy),
(A B) V (B A).
3.1.4. NOTATION. Some notational conventions in exhibiting deductions in
sequent calculi:
Double lines indicate some (possibly zero) applications of structural
rules.
In prooftrees the union of finite multisets F, F', F", ... of formulas is
indicated simply by juxtaposition: FF'F", or the multisets are separated
by commas for greater readability: F, F', F". The union of a multiset F
with a singleton multiset {A} is written FA or F, A.
In prooftrees An stands for a multiset consisting of n copies of A; so A°
is the empty multiset.
3.1.5. REMARK. Context-sharing and contextfree rules. In the two-premise
rules, the contexts in both premises are the same (exception: succedent of in-
tuitionistic L>, because of the restriction to at most one formula in the succe-
dent). Rules with such a treatment of contexts are called context-sharing.
But because of the presence of the structural rules of contraction and weak-
ening, equivalent systems are obtained if some or all of these context-sharing
rules are replaced by context-independent (non-sharing, context-free) versions,
where the contexts of both premises are simply joined together. For example,
the context-independent versions of L-4 and RA are
F A, A F',B r A, A r B,
AA B, A'
To see that the two versions of say RA are equivalent, consider
FA F' B' r AA F BA
W W
IT' AAA' IT' BAA' rr (A A B)AA
rr (A A B)AA' r (A B)A
If we replace in Glc the rule L--> by its non-sharing version, the intuition-
istic version may be obtained by simply restricting attention to sequents with
at most one formula on the right everywhere.
For "non-sharing" and "sharing" sometimes the terms multiplicative and
additive respectively are used. This terminology derives from linear logic,
where the distinction between sharing and non-sharing versions of the rules
3.1. The GA.- and G2-systems 65
is crucial; the terminology was suggested by consideration of a particular type-
theoretic model of linear logic (Girard domains). However, "context-free" and
"context-sharing" as defined above apply to rules with more than one premise
only, whereas "multiplicative" and "additive" also apply to rules with a single
premise (see 9.3.1); hence, in chapter 9 the meaning of "context-free" and
"context-sharing" will be extended and equated with "multiplicative" and
"additive" respectively.
3.1.6. The systems G2[mic]. Due to the weakening rules, we obtain an
equivalent system if we replace the axioms by the more general versions:
r,A -A,A _1_,r,A
This suggests consideration of:
DEFINITION. G2c is the system obtained from Glc by taking the general-
ized axioms and leaving out the weakening rules. The intuitionistic system
G2i is the subsystem of G2c obtained by restricting all axioms and rules to
sequents with at most one formula on the right. G2m is obtained from G2i
by dropping the rule LI. [E]
As for Glm, all sequents derivable in G2m have a single formula in the
succedent.
3.1.7. PROPOSITION. (Depth-preserving weakening, equivalence of Gl- and
G2-systems) Let us write I-- r A if there is a deduction of depth at most
n. In G2[mic],
if hn r A then 1--n IT' AS
where IAA'l < 1 for G2[mi]). As a consequence,
Gl[mic] H r A iff G2[mic] h r A.
PROOF. By induction on the length of derivations. Or, starting at the bottom
conclusion, and working our way upwards, we add In' and A' to the left and
right side of sequents respectively, except when we encounter an application
of intuitionistic L>, where we add l'' in both premises, but A' in the right
premise only. E
(Essentially) the same proof works for the other systems we shall consider in
the sequel. The proof of the next lemma is left to the reader.
66 Chapter 3. Gentzen systems
3.1.8. LEMMA. (Elimination of empty succedents) If r A is provable
in G2[mi], then there is a proof which exclusively contains sequents with a
single formula on the right. If r is provable, then there is also a proof of
r A, for any A.
If r A is provable in Gli, it is also provable in Gli*, a system obtained
from Gli by replacing the axiom L_L by the set of axioms 1 B. The
formula B may be restricted to being prime (in fact, even to atomic, since
1,r J.. is an instance of Ax).
3.1.8A. * Carry out the proof of the preceding lemma
3.1.9. PROPOSITION. (Restriction to prime instances of axioms) The A in
the axioms of G[12][mic] may be restricted to prime formulas, while 3.1.7
stays true under this restriction. In the systems G2[mic] the formulas in r, A
in the axioms may also be assumed to be prime, but with these restrictions
proposition 3.1.7 does not hold. El
3.1.9A. 4 Prove the proposition.
3.1.10. REMARK. We can also restrict the wdom Ax to the case that A is
atomic instead of just prime. The special case r, J.. I, A is also an instance
of LJ_ in G2[ic], and is derivable by weakening from LI in G1[ic]. In the
systems for minimal logic, we have to add 1 J_ or r,
3.2 The Cut rule
The systems introduced so far, namely G[12][mic], all obey the subformula
property: in any deduction of a sequent r A, only subformulas of r and A
occur. A consequence of this fact is the separation property for G[12][mic]: a
proof of a sequent r A requires logical rules only for the logical operators
(.1_ is regarded as a 0-place operator) actually occurring in this sequent. This
is no longer the case when the so-called Cut rule is added. The Cut rule
Cutr A, A A, r'rr, AA'
expresses a form of transitivity of The A in the instance exhibited is
called the cutformula; an application of the rule Cut is called a cut. We may
add this rule to our systems, but then the subformula property is no longer
valid; the cutformula A in the premises is not necessarily a subformula of a
formula in rr'AA'.
3.2. The Cut rule 67
There is also a context-sharing version of the Cut rule, also called additive
Cut (left classical, right intuitionistic):
FA AF A FA Ar
CUtcs CUtcsF A r B
It is easy to see that due to the presence of weakening and contraction the
addition of Cut is equivalent to the addition of Cut.
Do new formulas become derivable by adding Cut? The answer is: not if we
treat formulas modulo renaming of bound variables. The following example
shows that the possibility of renaming bound variables is essential in predicate
logic: without renaming bound variables, we cannot derive VxVy(RyA Qx)
Qy (R,Q unary relation variables) in Gic or G2c without Cut. To see this,
note that such a proof, say in G2c, ought to have the following structure:
Qt Qy
Rs A Qt Qy
Vy(Ry A Qt) Qy
VxVy(Ry A Qx) Qy
The top can only be an axiom if t y, but this is a forbidden substitution:
t is not free for x in Vy(Ry A Qx). Note that introducing contractions would
not help in finding a proof. On the other hand, with Cut we can give a proof:
Qz Qz
By A Qz Qz
Vy(Ry A Qz) Qz
VxVy(Ry A Qx) Qz Qy Qy
VxVy(Ry A Qx) -VzQz VzQz Qy
Cut
VxVy(Ry A Qx) Qy
The impossibility of finding a cutfree proof is obviously connected with the
fact that the variables can occur both free and bound in the same sequent.
As will be shown later, if we permit renaming so as to keep bound and free
variables disjoint, the addition of the Cut rule becomes conservative.
3.2.1. THEOREM. (Closure under Cut) Any sequent r A in which no
variable occurs both free and bound, and which is provable in G[12][mic]
Cut, is also provable in G[12][mic].
The proof will be postponed till section 4.1. We note that we can restrict
attention to so-called pure-variable deductions, defined in 3.1.2.
3.2.1A. 4* We form a calculus m-Gil from G1c by changing RV to
r,A A[x/y]
68 Chapter 3. Gentzen systems
Equivalent to m-Gli is the variant m-Gli' with for RV
F, A B F A[xly]
A > B VxA
Show that the resulting calculi are equivalent to Gli in the sense that Gil H r
V A iff m-Gli r A iff m-G1i' r A (where V denotes iterated disjunction;
the empty disjunction is identified with 1). What restriction on R-->, RV in G2c
produces equivalence to G2i and Gli? Hint. Use closure under Cut for Gli.
3.2.1B. 4 If m-Gli r A, IAI > 1, and F does not contain V, then m-Gli
r A for some A E A. Prove this fact (Dragalin [1979]).
3.2.1C. 4 As a generalization of the preceding exercise, prove the following. Let
r not contain V,. If m-Gli r AA', IAA11 > 1, A containing existential
formulas, then m-Gli H A for some A E A' or m-Gli A[xlt] for some
3xA E A (Dragalin [1979]).
3.3 Equivalence of G- and N-systems
In this section we establish the equivalence between the N-systems and the
corresponding G-systems. Let us write N[mic] H r A iff there is a context
r* a u1: A1, , un: An, such that r , An, and N[mic] H r* A
in the sequential notation variant (cf. 2.1.8); in other words, I- r A in
an N-system if there is a prooftree deriving A using the open assumptions in
r; the multiplicity of a formula B in r is equal to the number of inhabited
assumption classes with distinct labels containing occurrences of B.
Observe that the N-systems are closed under contraction and weakening;
that is to say, if I- FEB C then I- rB C, and if I- r C then
C. Contraction is achieved by identifying the labels for two dis-
tinct assumption classes containing the same formula B. Weakening may be
achieved as follows. Let D derive A from assumptions r. Then the deduction
(x a "fresh" label)
A EX
AAB
A
derives A from r, B.
3.3.1. THEOREM. G[12][Mi] Cut H r A iff N[mi] r A.
PROOF. We give the proof for G2i + Cut, Ni. The result for G2m is
contained in that for G2i. Moreover, G1[mi] is equivalent to G2[mi], and
by the closure under Cut, also G1[mi] + Cut is equivalent to G2[mi] + Cut.
3.3. Equivalence of G- and N-systems 69
For the proof from left *to right we use the fact that a sequent F A
can always be proved by a deduction where all sequents have exactly one
formula in the succedent. The proof proceeds by induction on the depth of a
deduction in G2i; at each step in the proof we show how to construct from a
G-deduction of F A an N-deduction of F' A for some with Set(P) C
F.
Basis. The base case starts from axioms F, A A or r,± A, correspond-
ing to deductions consisting of a single node A and deductions respectively.
Induction step. For the induction step, we have to review all the rules. As
ill, we assume that to each deduction D of r A of depth at most k in G2i
+ Cut a deduction TY of r A, F' C Set(r) has been found. The R-rules
correspond to introduction rules in Ni, for example (on the left the sequent
calculus deduction, on the right the corresponding deduction in Ni)
etc. For the L-rules, we have to replace assumptions at a top node by an
E-rule application deriving the assumption. Examples:
A, F C
AAB,FC
Do
A PA B
FF'B
goes to
goes to
A A B
[A]
D*
D;
[A]
For the direction from right to left, we use induction on the depth of prooftrees
in Ni.
Do A -4 B AFA r,B C goes to [B]
A* B, r c
etc. Cut is treated by substitution:
Do TN; DIFA r goes to A B
FAAB A A B
[A]
F, A B goes to
F A * B A + B
70 Chapter 3. Gentzen systems
Basis. A corresponds to A A.
Induction step. Let us assume that for deductions in Ni of depth at most k,
corresponding deductions D+ in G2i + Cut have been constructed. Again
the I-rules correspond to R-rules in the sequent calculus, for example
Do Di
A B
A A B
(ro,r,)
(ro,r) is short for set(ro,r1). The upper double line indicates some (pos-
sibly zero) weakenings; the lower double line refers to some (possibly zero)
contractions. The elimination rules are translated with help of the corre-
sponding L-rule and the Cut rule:
_L goes to
A
goes to
A A B goes to
A
Do Di
A + B A
D+ri JAFA cut
goes to
ro,r, A ro,r, B
ro,r, AAB
AA
FAAB AABAFA Cut
DjE
A 1 B
ro A -4 /3 A-4 B,ri B
Cutro,r, B
(ro,r,) B
etc.
REMARK. The step for translating in the first half of the proof is not
uniformly "economical" as to the size of the translated proof tree, since D;
may have to be copied a number of times. More economical is the following
translation:
[B]x
Dj".
C x A -4 B A
B C
D+
A similar remark holds for the translation of the Cut rule.
3.3.1A. * Complete the proof of the theorem.
S.S. Equivalence of G- and N-systems 71
3.3.2. The classical case
DEFINITION, c-equivalence between sequents is the reflexive, symmetric and
transitive closure of the relation R consisting of the pairs ((F A, A),
(F, A)) and ((F, A A), (r A, ,A)). Thus sequents
F', e' and F, A', F', e are c-equivalent.
Sequents of the form + A) are called stability axioms; "Stab"
is the set of all stability axioms. El
LEMMA. (Shifting from left to right and vice versa)
IfS, S' are c-equivalent sequents, then G1c+Cut H S iff Glcd-Cut H S';
in G1i + Cut we have A, r A if H +
and H if H F A, and also H F iff H r, A
PROOF. The proof follows from the following deductions:
F,
J_ 1_ AAFA r, F F, A A
F, --+ A, r A
permitting shift of A from left to right, from left to right, A from right
to left, and from right to left respectively.
PROPOSITION. Glc + Cut H r A iff Gli+ Cut + Stab H F' A', where
A' is c-equivalent to r A, and A' contains at most one formula.
Hence Glc + Cut H r A iff Gli + Cut + Stab H1. A.
PROOF. The direction from right to left is proved by a straightforward in-
duction on the length of deductions. The direction from left to right is also
proved by induction on the length of deductions.
Note that, whenever we can prove in Gli + Cut + Stab a sequent A'
which is c-equivalent to I' A, then we can prove in G1i + Cut + Stab all
sequents r" A" which are c-equivalent to r A, by the lemma.
We illustrate two cases of the induction step.
Case 1. The final inference in the proof of I' A is L>:
r A, A' B
r
r,A
72 Chapter 3. Centzen systems
By the induction hypothesis we have deductions in Gli + Cut + Stab of
A and F', B, apply L-+ and find r, -'A', A B
Case 2. Let the final inference be RV:
F A, A
F A V B,
By the induction hypothesis we have in Gli+ Cut +Stab a proof of F,
A, from which we obtain a proof of r, A V B.
REMARK. Inspection of the proof shows that in transforming a deduction D
in Glc + Cut into a deduction in Gli + Cut + Stab, we need only instances
of A) for formulas A occurring in D.
3.3.3. THEOREM. G[121C + Cut H r A iff Nc r A.
REMARK. The proof and the statement of this theorem also apply to all
X-fragments of C for which {->, C X C {-+, 1, A, V, V, 3}. For fragments
containing but not 1, we must proceed differently. A method which
applies to these fragments is given in Curry [1950], cf. exercise 3.3.3B below.
3.3.3A. 4 Complete the proof of the proposition and theorem.
3.3.3B. 4* (a) For N-systems, let us write I- r A if A can be deduced from
assumptions in I'. Let Nc' be Nc with 1, replaced by the Peirce rule P, defined
in 2.5.2. Show Nc A iff Nc' I. A.
In the following two parts of the exercise we extend the equivalence between
N-systems and G-systems to fragments X such that {-q c X c {->., V, A, V, 3}.
Let G be X-G2c + Cut.
If S a. I' A, A , then a sequent s* I', A A A is called a 1-equivalent
of S; A A abbreviates B1 -> A, B2 A, . . . , B,-, -> A for A -a B1, B2, Bn.
Show that any two 1-equivalents 5*, 5** of a sequent 8 are provably equivalent in
G.
Show that G H r A iff X-Nc' I- I' A. Hint. For the proof from left to
right, show by induction on the depth of deductions in G, that whenever G H 8,
then for some 1-equivalent S* of 8, Ncl F- 8* (Curry [1950]).
3.3.3C. 4 Prove equivalence of Gli with the Hilbert system Hi directly, that is
to say, not via the equivalence of Gli with natural deduction.
3.3.4. From Gentzen systems to term-labelled calculi
In the discussion of term assignments for intuitionistic sequent calculi, the
versions where empty succedents are possible are less convenient. Hence we
S.S. Equivalence of G- and N-systerns 73
consider slight modifications Gli*, G2i* (these are ad hoc notations), where
all sequents have exactly one formula in the succedent (cf. lemma 3.1.8). In
fact, there are two options. In the case of G2i, we can replace I', 1 A,
(IA1 < 1) by the more restricted F,1 A, or we may instead add a rule
F=i
FA
Similarly, we may obtain a system Gli* from G1i by replacing i=- by
axioms i =- A, or by a rule as above. For definiteness, we keep to the first
possibility, the modification in the axioms (instead of the addition of a new
rule).
It is instructive to describe the assignment of natural deduction proofs
to proofs in the sequent calculus in another way, namely by formulating the
sequent calculus as a calculus with terms; the terms denote the corresponding
natural deduction proofs.
A term-labelled calculus t-G2i corresponding to G2i* may be formulated
as follows. Consider a term t: B with FV(t) = {ui: A1, , un: An} as repre-
senting a deduction of A1, , An, F B for arbitrary F. The assignment
then becomes:
F, u: P u: P (axiom)
F t:C
w: Ao A A1, r t[ui/piw]:c
u:A,Fto:C v:B,F
w: Av B, r E\ui,v(w, to, to: C
r t: A u: B ,F s:C
w: A > B,F s[u wt]: C
u: A[x y], r t:C
w:3xA,r (w, t): C
u: A[x I' s:C
w: VxA, F s[u wt]: C
u: A, v: A, r t:B
r,z:B t: A
N.B. The obvious map from t-G2i-derivations to derivations in G2i* with
non-empty succedent is not one-to-one, cf. the following two t-G2i-derivations:
w: A, r t[u, v Iw , w]: B
The w is always a fresh variable.
The same assignment works for Gli*, where weakening does not change
the term assignment:
r t: A
r, u: 1 E ( u ) : C (axiom)
Fs:B
r p(t, s): A A B
r t:
r kit: Ao V Ai
u:A,1" t:B
F= Au.t: A > B
F=. s: A[x It]
F p(t, s): 3xA
r t[xI y]: A[x Iy]
Ax.t: VxA
74 Chapter 3. Centzen systems
x: A,y: A y: A x: A,y: A y: A
y: A Ax.y:A>A x: A Ay.y: A--+A
Ayx.y: A-4(A--+A) Axy.y: A-4(A---A)
which map to the same derivation in G2i*.
Note that if the substitutions in the terms are conceived as a syntactical
operation in the usual way, we cannot, from the variables and the term of the
conclusion alone, read off the sequent calculus proof. Thus, for example, the
deductions BB CC B B C=C
B,CBAC B,CBAC
B,CADBAC AAB,CBAC
AAB,CADBAC AAB,CADBAC
produce the same term assignment.
If we wish to design a term calculus which corresponds exactly to deductions
in a Gentzen system, we must replace the substitution on the meta-level
which takes place in the term-assignment for the left-rules into operations
from which the rule used may be read off.
In particular, this will be needed in LA, L-4, LV and contraction. So write
let(t:B,s:A) for the result of the operation of "taking s for w in t" (also
called a "let-construct" and written as "let w be s in t"). letw(t,$) denotes
the same as t[w / s], but is not syntactically equal to t[w/s]. Similarly, we
need contrzyz(t) for the result of replacing x and y by a single variable z in t.
The rules LA, L-4, LV and contraction now read:
LA
et,: A, r t: C
w: A0 A Ai, r (t, piw): C
s:CL>
w: A>B, r ietu(s, wt):C
LV
u: A[x r
LC
s: C u: A, y: A, I' s: B
w: VxA, letu(s, wt): C w: A, r contr(s): B
REMARK. Instead of introducing "let" and "contr", we can also leave LC
implicit, that is to say the effect of a contraction on a deduction represented
by a term t(x, y, 2') is obtained by simply identifying the variables x, y instead
of having an explicit operator; and instead of "let" we can treat substitution
operations WE] as an explicit operation of the calculus, instead of a meta-
mathematical operator. If substitution is an operation of the term calculus,
then, for example, t differs from x[x
3.3.4A. * Check that the two proofs of A A B, CAD -BAC above are indeed
represented by distinct terms if we use "let" and "contr".
3.3.4B. 4* Show for the map N assigning natural deductions to derivations in
G2i with inhabited succedent in 3.3.1 that IN(D)1 < c2IDI (c positive integer). For
the full system we can take e = 2, and c = 1 for the system without I.
3.4. Systems with local rules 75
3.3.4C. 4 The following modification of the term assignment corresponds to the
alternative mentioned in the remark of 3.3.1:
t:A u:B,F s:C
w: A B, (Au.$)(wt): C
Adapt also the other clauses of the term assignment, where necessary, so as to
achieve (for t-G2i, without Cut) s(N(D)) < c(s(D)), c a fixed natural number,
and similarly with depth instead of size; here N(D) is the natural deduction proof
assigned to the sequent calculus proof by the procedure.
3.4 Systems with local rules
The following section contains some quite general definitions, which however
will be primarily used for G-systems.
3.4.1. DEFINITION. Deductions (of LR-systems to be defined below) are
finite trees, with the nodes labelled by deduction elements. (Deduction ele-
ments may be formulas, sequents etc., depending on the type of formalism
considered.)
An n-premise rule R is a set of sequences So, , Sn_i, S of length n + 1,
where Si, S are deduction elements. An element of R is said to be an instance
or application of R. An instance is usually written
Ss Si Sni
S
S is the conclusion, and the Si are the premises of the rule-application. Where
no confusion is to be feared, we often talk loosely about a rule when an
application of the rule is meant. An axiom is a zero-premise rule. Instances
of axioms appear in prooftrees either simply as (labels of) top nodes, or
equivalently as deduction elements with a line over them:
In principle, we shall assume that the premises are always exhibited in a stan-
dard order from left to right (cf. our convention for N-systems that the major
premise is always the leftmost one), so that expressions like "rightmost branch
of a prooftree" become unambiguous. (In exhibiting concrete prooftrees, it is
sometimes convenient to deviate from this.)
3.4.2. DEFINITION. A formal system with local rules, or LR-system, is
specified by a finite set of rules; a deduction tree or prooftree is a finite tree
with deduction elements and (names of) rules assigned to the nodes, such
that if So, , Sn_i are the deduction elements assigned to the immediate
76 Chapter 3. Gentzen systems
successors of node y, and S is assigned to the node u, R is the rule assigned
to y, then So, , S belong to rule R. Clearly, the rules assigned to top
nodes must be axioms. The deduction element assigned to the root of the
tree is said to be deduced by the tree. If we consider also deduction trees
where some top nodes vo, . . . do not have names of axioms assigned to
them, we say that the deduction tree derives S from So,Si,..., where S is
the deduction element assigned to the root, and So, Si, ... are the deduction
elements assigned to the top nodes which do not have an axiom assigned to.
them.
REMARKS. The rules of an LR-system are local in the sense that the cor-
rectness of a rule-application at a node v can be decided locally, namely by
looking at the name of the rule assigned to v, and the proof-objects assigned
to v and its immediate successors (i.e., the nodes immediately above it). The
G-systems described above are obviously local. The notion of a pure-variable
proof is not local, but this is used at a meta-level only.
Not all systems commonly considered are LR-systems. For Hilbert systems
the deduction elements are formulas, for G-systems sequents. If we want to
bring the N-systems also under the preceding definition, we can take as deduc-
tion elements sequents F A, where the F is of the form u1: A1, , un: An,
i.e. a set of formulas with deduction variables attached. The use of this for-
mat frees us from the reference to discharged assumptions occurring elsewhere
in the prooftree.
3.4.3. NOTATION. We write D l-r, S if a prooftree D derives S and has
depth at most n, and 7, hs<n S if 7, derives S and has size most n. We write
Hn S7 Hs<n S if for some T, we have T, I-n S, T, 1-s<n S respectively. If we
want to stress the dependence on a system T, we wr-ite HT, HT, etc.
3.4.4. DEFINITION. Let T be an LR-system, the rules specifying the system
we call the (primitive) rules of the system. A rule R is said to be a derivable
rule in T, if for each instance So, , Sn_i, S there is a deduction of S from
the Si be means of the rules of T. That is to say, in this deduction the Si are
treated as additional axioms.
A rule R is said to be admissible for T (or T is closed under R), if for all
instances So, ... ,Sn_i, S of R it is the case that
if for all i <n Si, then I- S.
R is said to be depth-preserving admissible (dp-admissible) for T (or T is
dp-closed under R) if for all m
if for all i <n Hm Si, then Hm S.
3.5. Absorbing the structural rules 77
An n-premise rule R of T is said to be i-invertible for T [i-dp-invertible for
TI if the rule
{(S, Si) : (So, . , Sn_i, S) E R}
is admissible [dp-admissible]. R is invertible [dp-invertible] if R is i-invertible
[i-dp-invertible] for all 0 < i < n.
For two-premise rules, we may also use left-invertible, right-invertible for
0-invertible and 1-invertible respectively. El
3.5 Absorbing the structural rules
We now consider Gentzen systems in which not only weakening but also
contraction has been "absorbed" into the rules and axioms: the family of G3-
systems. This has advantages in an upside down search procedure for proofs
of a given sequent. (See also 4.2.7.)
A number of results in this section involve the notion of depth of a proof;
but the proofs go through if we use the notion of size of a proof instead.
3.5.1. DEFINITION. (The Gentzen systems G3c, G3m, G3i) The system
G3c is specified by the following axioms and rules:
Ax P, A, P (P atomic) L_L I, 1' A
LA A'B'r RA
A rA
LV
rA,A
L-4
A -4 B, A
LV
VxA A[xltb A
VxA,r A
L3
A[x y], A
3xA, A
FA,AAB
RV
R-4
Ar A,B
RV
A[x y]
VxA
R3
A[x t], 3xA
3xA
A,B
where in RV, L3 the y is not free in the conclusion.
The intuitionistic version G3i of G3c has the following form:
Ax P, r P (P atomic) LI A
78 Chapter 3. Gentzen systems
ABr-C FA 1' =- B
LA ' ' RA
A A B,r C ri4.A./3
A
LV
1' C
AVB,r
A + B,F AL+
B,r C
B,r C
RV
FA
(i = 0, 1)rA0 vAi
R* r Br A -4 B
LV VxA'
A[x/t], r C
RV
r A[x /y]
VxA,rC r VxA
L3 RA
A[xI r C r A[x It]
]xA, rC r ]xA
where in L3 and RV the y is not free in the conclusion.
G3m is G3i with LI left out, and 1, r 1 added (to compensate for
this missing instance of Ax). Alternatively, one can let the P in Ax range over
prime, instead of atomic formulas; then G3m is simply a restriction of G3i.
Sequents derivable in G3m always have a single formula in the succedent
(just as for Glm and G2m).
The concepts of principal and active formula occurrence in an inference
are copied from the systems Gl[mic]; but note that in, for example, an
application of LV, only the occurrence of VxA in the conclusion is principal.
3.5.1A. 01 Show that A A is derivable in G3[mic] for arbitrary A. Show that
in Ax, L_L in G3cp all formulas in PA may be taken to be atomic. What goes
wrong for full G3c? And for G3ip?
3.5.1B. 4 Give a proof of Peirce's law ((A B) A) > A in the system G3c.
3.5.2. LEMMA. (Substitution of terms) For the systems G[123][mic], if
r A, then 7,[x/t] H r[x/t] A[x/t], provided t is free for x in
r A and does not contain variables used as proper parameters of L3,
RV. The substitution does not change the size, depth or logical depth of the
proof. Hence, by renaming proper parameters of1,2, RV: if hi, A then
1,-, r[x/t] A[x/t] provided t is free for x in r, A.
PROOF. By induction on the depth of proofs.
3.5. Absorbing the structural rules 79
3.5.3. LEMMA. (dp-admissibility of weakening) G3[mic] is dosed under
weakening. That is to say, if h is deducibility in G3c, then
If Hri F A then
where IALY1 _< 1 for G3[ni].
N.B. This lemma is not true if we insist that in Ax, L_L all formulas of F, A
are atomic.
3.5.4. PROPOSITION. (Inversion lemma) Let H be deducibility in G3c.
If 1-7, A A B, F A then 1- B, F
ITn F A,A V B then 1-7, F A,A, B.
If Hn Ao V A1,rL then Hn Ai, F A (i E {0, 1}).
Ifl-n F A, A0 A A1 then H7, r (i E {0,1}).
B, .6, thenHF,AB,L.
IfHr,A-BL then I-7, F A, A and ka
1f F,, F A,VxA then Hn F = 1A[x/y], for any y such that y
Fv(r, A, A).
If 1- 2xA,r A then Hi, A[x I y], r A, for any y such that y
Fv(r, A, A).
The properties above, with the exception of (ii) and (vi), also hold for G3 [mi],
under the intuitionistic restriction on sequents. For G3[mi] one half of (vi)
remains provable:
(vi) If Hr, I', A -> B C then F,B C.
PROOF. The proposition is proved by induction on n. As a typical example,
we prove (vi) for G3c. Assume (vi) to have been proved for n, and all r, A.
Let 1-,i+1 A -> B, F A by a deduction D. If D is an axiom, then A -> B
is not principal, and r, B A as well as r A, A are axioms. If D is not
an axiom and A -4 B is not principal, we apply the IH to the premise(s) and
then use the same rule to obtain deductions of I' A, A and B, r A.
If on the other hand A -4 B is principal, the deduction ends with
F A, A B, r
A-* B,r A
and we can take the immediate subdeduction of premises. Similarly in the
case of G3i, where only the second premise counts, if A -4 B is principal. E
80 Chapter 3. Gentzen systems
3.5.4A. 4 Complete the proof of the inversion lemma.
3.5.5. PROPOSITION. (dp-admissibility of contraction) Let I be deducibility
in G3c. Then we have for all A, r, A
Him A, A, r A, then Hn A, r A.
If hn F A, A,A, then F-n r A, A.
The first property, under the intuitionistic restriction, also holds for G3 [mi].
PROOF. By induction on n. We consider the first assertion; the second is
treated symmetrically. Let D be a deduction of length n +1 of A, A, r A.
If A is not principal in the last rule applied in V, apply IH to the premise.
If A is principal in the last rule applied, we distinguish cases.
Case I. The last rule applied is LA:
1r, A,B,A A B,F A
Im+1 A V B, AV B, r A
We use the inversion lemma and apply the induction hypothesis.
F-n+i A A B, A A B, r A
Apply the inversion lemma to the premise and find a proof of
hn A, B, A,B, r A
and use IH twice.
Case 2. The last rule applied is L. Then
hn r, A[x/y], 3xA A
hn+1 r, 3xA,3xA A
By the inversion lemma, there is a y' such that for some D'
D' I-7, I', A[x / y], A[x/y1 A,
and y, y' 0 Fv(rA), y' V FV(A[x/y]), y 0 FV(A[x/y1, y # y'. Using the
substitution lemma we may conclude that
hn r, A[x / z], A[x / z] A
where z is a fresh variable not occurring free in r, A. Then we apply the
induction hypothesis w.r.t. A[x / z] and find 1-7, r, A[x / z] A.
Case.3. The last rule applied is LV:
Hn A, A V B,1" A hn B, A V B, r A
1-1 A -4 B , A B,r A
By the inversion lemma applied to the first premise, I-7, r A, A, A, and
applied to the second premise I-7, r, B, B A. We then use the II-I and
obtain 1-, r A, A and 1--, r, B A, from which F-7,+1 r, A -4 B A.
In the case of G3i the treatment is slightly different, but we leave this to
the reader (the occurrence of A B in the left premise of L--+ makes up for
the missing h-alf of the inversion lemma in this case).
Case 5. The last rule applied is LV. Immediate.
3.5.6. REMARKS. (i) If A --> B is omitted in the left premise of L-+ of G3i,
the proof of the preceding proposition breaks down at Case 4. A counterex-
ample in the implication fragment is provided by the sequent (P, Q E PV)
(((P-Q)->Q)- P)-4Q Q-413 Q
We leave it to the reader to check this.
The inversion lemma may be stated as follows. In G3c, if 1-r, r, A A
(respectively 1-r, r A, A) then there is a proof of depth < n + 1 with A as
principal formula, if A is composite, but not of the form VxA' (respectively
composite, but not of the form 3xA'); an appropriate adaptation holds for
G3i.
It is possible to improve on the result for G3c as follows: we may take
"depth < n" instead of "depth < n + 1", provided we restrict attention to
proofs where all axioms Ax, LI are such that the formulas in r are atomic
or V-formulas, and the formulas in A are atomic or 3-formulas. But we
have to pay a price for this: for this class of proofs, the weakening operation
transforming a proof of r A into a proof of I', I" A, A' cannot be done
while preserving the depth (a corresponding observation for G[12] [mic] was
made in proposition 3.1.9).
If we drop the restriction on Ax, that is if we consider G3[mic] + GAx,
where GAx is the axiom schema I', A A, A without restrictions on the A,
we can still formulate a version of the inversion lemma which is sometimes
useful. For example, for G3c + GAx we have the following version of (vi)
of the inversion lemma (3.5.4): if D l', A -4 B A and A ./3 is not
principal in an axiom in D, then hn r A, A and r,B A.
3.5.7. PROPOSMON. The dp-admissibility of weakening and contraction,
dp-closure under substitution of terms and the dp-inversion lemma hold for
G3[mic] + Cut.
PROOF. The proof for G3[rnic] readily extends.
3.5. Absorbing the structural rules 81
Case 4. The last rule applied is L-4:
A -> B,r A, A I-- A B,B, A
82 Chapter 3. Gentzen systems
3.5.7A. 4* Show that the example under (i) of the preceding remarks is indeed
provable in G3i, but unprovable in G3i if A -- B is omitted in the rule L-.
3.5.7B. 4 Show that we can establish the stronger variant of the inversion lemma
under the appropriate restriction on the axioms, as described above.
3.5.8. PROPOSITION. In G3[ic], if H,. F 1, A, then 1-n F A, A.
PROOF. By induction on n. Let D be a proof of length n of F 1, A. If
D is an axiom, then either I occurs in r, so then r A, A is an axiom; or
some P occurs in both r and A, and again F A, A is an axiom. If D is not
an axiom, we apply the IH to the premise(s) that the occurrence of 1 derives
from. IE
3.5.9. PROPOSITION. (Equivalence) G1c H F A iff G3c H r A, and
Gl[mi]H F A iff G3[mi] H F A.
PROOF. Straightforward by closure of G3[ic] under weakening and contrac-
tion. In both directions the proofs proceed by induction on the depth of
deductions. IE
REMARK. As a corollary to the proof one obtains that
If Gl[mic] 1-n r A then G3[mic] 1-n r A.
But the converse does not hold: for P E PV, P V -,13 has a proof of depth 2
in G3c, but not in Glc. Shortest proofs in Glc, G3c respectively are shown
below:
.13 .1D
13 P,_L
P,P -+ 1_
.I 3 V -,P, P -> 1_
PV -,P,PV -,P
.13V-iP
P P, 1
P,P -4 1
PV--,.13
3.5.10. Intuitionistic multi-succedent systems
The systems in the following definition are used in 4.1.10 and some of the
exercises only, so the definition may be skipped until needed.
DEFINITION. In 3.2.1A we already encountered a multi-succedent version of
the system G3i. We may also define a multi-succedent version m-G3i of G3i,
in which we keep as close as possible to G3c, permitting whenever possible
3.5. Absorbing the structural rules 83
a multiset in the succedent. The system m-G3i is obtained from G3c by
restricting R+ and RV to
F A B r A[x/y1
B, A
RV
F VxA, A
where in RV x Fv(r), y x or y FV(A, F), and L--> is modified into
L-4 F'
A + B A, A F, B A
F, A * B A
The system m-G3m is obtained from m-G3i by omitting the axiom L_L, but
then one has to add F, 1 I, A as an instance of Ax.
A slight variant of m-G3i, m-G3i', has a left premise in L> of the form
r, A + B A (no A). 121
The substitution lemma (3.5.2), the lemma on dp-admissibility of weak-
ening (3.5.3), a suitable version of inversion (3.5.4) and dp-admissibility of
contraction (3.5.5) are valid also for m-G3[mi].
Intuitionistic multi-succedent systems arise quite naturally in semantical
investigations (cf. 4.9.1).
REMARK. We do not know of a designation of this type of system, that
is completely satisfactory in the sense that it is mnemonically convenient,
consistent, and not cumbersome. The classical systems are always "multi-
succedent" , so there we drop the prefix m-. Also, in a publication where only
multi-succedent G-systems are discussed, the prefix m- is redundant.
3.5.10A. * Check that the substitution lemma, dp-admissibility of wea.kening,
and contraction and a suitable version of inversion are valid for m-G3[mi].
3.5.11. Kleene-style G3-systems
The systems G3[mic] are inspired by Dragalin; the system closest to Dra-
galin's system for intuitionistic logic is m-G3i. Kleene's original systems of
the G3-family differ in one important respect from G3[micl: they are strictly
cumulative, that is to say, if in the classical case r A is the conclusion of
an application of a rule of the system, then I' A appears as a subsequent
of the premises of the application; and in the intuitionistic case, if r A
is the conclusion of a rule-application, then F appears as a sub-multiset of
the antecedents of the premises of the application. In other words, in the
intuitionistic and minimal cases the antecedent can only increase when going
from the conclusion to one of the premises, and in the classical case both the
antecedent and the succedent can only increase.
Going downwards form premises to conclusion, any formula "introduced"
on the left or on the right (classical case only) is already present in the
84 Chapter 3. Centzen systems
premises; the active formula(s) in the antecedent and the succedent (in the
classical case) are, so to speak, absorbed into the conclusion.
DEFINITION. (The systems GK[mic]) The rules for GKi are almost the
same as for Kleene's system G3 in Kleene [19524 The subscript i appearing
in some of the rules may be 0 or 1.
Ax P,F P (P atomic) L_L I, r A
Ai, Ao A Ahr C
RA
A 1' B
Ao A Ai, F C
LV Aa'Ao v
Al, I' C Ai, Ao V Ai, F C
RV
r Ai
1. Ao V A1A0vA1,rc
A--*B,FA A B,B,F C
A --+ B, r c
LV VxA'
A[xlt], r C
VxA, r C
L3 AxA'A[xly],r
C
2xA,r C
RV
r A[xly]
F VxA
R3
F A[x It]
F 3xA
R-4 A'
I' B
1 B
where in L3 and RV the y is not free in the conclusion. The corresponding
system GKm is obtained by dropping L1_, and adding I, 1"
The classical system GKc is obtained by extending the cumulativeness of
the rules in a symmetric way to the succedent, and generalizing the axioms
and rules to arbitrary contexts on the right. Thus we have
RA
r Ao, Ao A A, r A, Ai, Ao A Ai r A, Ai, Ao V
RVr Ao A Al r Ao V Ai
R* F z,B,A > B RV 1. A[xly], VxA
A, A > B rz,vxA
etc.
The proof of dp-closure.under contraction for these systems is virtually trivial;
there is no need to appeal to an inversion lemma. But dp-inversion lemmas
for the left rules become trivial (with the exception of left-inversion for L-4),
since each premise is a left-weakening of the conclusion.
3.5.11A. ** Prove the following simple form of Herbrand's theorem for G3[mic]:
if I', A and A are quantifier-free, and 1-n r, VxA A, then there are such
that 1-,, r,A[xlti],...,A[xltm] A. For G3c we also have: if He 1. 3xA
then for suitable t1, , tm H 1. A, A[x/ii], , A[xltm].
3.6. The one-sided systems for C 85
3.5.11B. 4 Describe an assignment N of natural deductions to G3i-deductions
in such a way that, for a suitable constant c E IN, IN(D)I < cIDI (cf. exercise
3.3.4C). In fact, we can take c = 8.
3.5.11C. 4 Check that an assignment G of proofs in G3i + Cut to proofs in Ni
can be given such that s(G(D)) < c(s(D)) for some c E IN (in fact we can take
c= 5), and similarly with depth instead of size.
3.5.11D. 4 Prove that m-G3i I- r A iff G3ii--rvA. (m-G3i was defined
in 3.5.10.)
3.5.11E. 4 Show that if m-G3i H r A for non-empty A, and r does not
contain V, then for some A E A, m-G3i H r A (m-G3i as in the preceding
exercise).
3.5.11F. 4 Formulate and prove lemmas on dp-invertibility of the rules of the
systems GK[mic].
3.6 The one-sided systems for C
The symmetry present in classical logic permits the formulation of one-sided
Gentzen systems, the Gentzen-Schiitte systems; one may think of the se-
quents of such a calculus as obtained by replacing a two-sided sequent r A
by a one-sided sequent -II', A (with intuitive interpretation the disjunction
of the formulas in --,1", A), and if we restrict attention to one-sided sequents
throughout, the symbol is redundant. Each of the systems G[123]c has
its one-sided counterpart GS[123]. One may also think of "GS" as standing
for "Gentzen-symmetric" , since the symmetries of classical logic given by the
De Morgan duality have been built in.
In order to achieve this, we need a different treatment of negation. We
shall assume that formulas are constructed from positive literals P, P', P",
R(to,...,tn), R(so,...,s,n) etc., as well as negative literals -,P, --,P', --,P",
,t), ... by means of V, A, V, 3. Both types of literals are treated as
primitives.
3.6.1. DEFINMON. Negation -, satisfies --,--,P P for literals P, and is
defined for compound formulas by De Morgan duality:
--,(A A B) := (-DA V -13);
i(A V B) := (-IA A -0);
-,VxA := 2x--,A;
86 Chapter 3. Gentzen systems
(iv) -,3xA := Vx---iA. Z
3.6.2. DEFINITION. The one-sided calculus GS1 (corresponding to Glc)
has the following rules and axioms:
Ax P,-,13
r r A A
RW RC "
r, A F, A
r A, r B
RVL rtVRF,AVB F,AVB
Rv r, A[xIy]
r, VxA
under the obvious restrictions on y and t.
In the calculus GS2 corresponding to G2c the axiom is generalized to
r,P, -,P
and the rule W is dropped. Finally, in the calculus GS3, corresponding to
G3c, the axioms are generalized to r, P, --,13 (P atomic), the rules W and C
are dropped and RV, R3 are replaced by
F A BRV "r,AVB
The Cut rule takes the form
Cut I''
A A, --,A
r, A
The letter "R" in the designation of the rules may be omitted, but we have
kept it since all the R-rules of the one-sided calculi are just the R-rules of the
systems G[123]c for sequents of the form A.
3.6.2A. * Prove an inversion lemma for GS3:
If 1-n r, A V B then 1-n r, A, B;
If 1-n r, A A B then 1-n r, A and 1-rt r, B;
If 1-n r,VxA then 1-n r,A[xly] (y not free in r, and also y az x or y 0 FV(A)).
R3 I',
A[xI t]
r,3xA
R,3 r'A[x/t]'
3xA
r,3xA
F A r, B
RA 'r, A A B
Z
3.6.2B. * Use the inversion lemma to prove closure of GS3 under contraction.
3.7. Notes 87
3.7 Notes
3.7.1. General. Some papers covering to some extent the same ground as our
chapters 1-6 are Gallier [1993], Bibel and Eder [1993]. For an introduction
to Gentzen's work, see M. E. Szabo's introduction to Gentzen [1969].
3.7.2. Gentzen systems; the calculi Glc, G1i. Gentzen gave formulations
for classical and intuitionistic logic; but, as already mentioned in the preceding
chapter, Johansson [1937] was the first to give a Gentzen system for minimal
logic.
Gentzen's original formulation LK differs from the subsystem Glc in the
following respects:
Instead of a primitive constant 1_, Gentzen uses a negation operator
with rules
F A, A
It-,
Ar A
F A F
In Gentzen's system, sequences instead of multisets were used; accord-
ingly there were exchange or permutation rules (cf. 1.3.7):
LE r"A B RE
r, B,A, A r B, A, A'
For L>, Gentzen used the non-sharing version.
Gentzen defined his systems so as to include the Cut rule, whereas we
have preferred to take the systems without Cut rule as basic.
LK is equivalent to Glc which may be seen as follows. If we define I :=
A A for some fixed A, we can derive I in Gentzen's system:
AA
AAA,ALA
A, ,./4
LA
LCAA-1A
Conversely, defining A := A > I as usual, we obtain in Glc the rules for
and as a special case of L--+ and by an application of RW followed by
R> respectively.
Kleene [19521)] gives the rules for Glc and Gli as in this text. G1[ic]
+ Multicut (where "Multicut" is a generalization of the Cut rule, defined in
4.1.9) is nearly identical with the G2-systems in Kleene [19524
88 Chapter 3. Gentzen systems
3.7.3. The calculi G[23][mic]. As explained in the introduction to this chap-
ter, the calculi G2[mic] serve only as a stepping stone to the more interesting
systems G3[mic].
The systems G3[mic] as presented here are inspired by Dragalin [1979], but
are not quite identical with Dragalin's systems. The form of the rules LA and
RA was first used in a sequent calculus for classical logic by Ketonen [1944].
Our G3c corresponds indeed to Dragalin's classical G-system, except that
Dragalin has as an additional primitive. Dragalin's intuitionistic G-system
corresponds most closely to m-G3i, with as an additional primitive. In a
letter to H. A. J. M. Schellinx, dated 22-11-1990, Dragalin points out that
instead of the form of L> in the intuitionistic system proposed in his book,
the following form is preferable:
A B, r A, B, r A
A + B,r A
One of the advantages mentioned by Dragalin is dp-invertibility of this rule
with respect to both premises.
The differences between our systems GK[mic] and the G3-systems formu-
lated in Kleene [1952a] are the following.
In Kleene's systems, is primitive, not I.
The rule LA has in Kleene's intuitionistic system the form
r' Ao Ai' Ao A Ai BLA r: AoA Ai B
and similarly for RV and LA in the classical system.
Kleene wished to interpret these rules so that for every instance of a
rule
any instance
with Set(r) = Set (r), Set(r) = Set(r), Set() = Set() and Set(A) =
Set('), is also an application of the rule.
In other words, by the convention under (iii) the premises and conclusions
of the rules may be read as finite sets, with rLA short for ruAu {A}, etc.
It is perhaps worth pointing out that this means for, say, LA that if we
write the premise as A, B, A A B, r with A, B,AAB r, then the conclusion
may be any of the following:
AAB,r A,AAB,r B,A A A,B,A A B,r.
3.7. Notes 89
(The last possibility is actually redundant, since it results in repetition of
the premise.) Our reason for deviating from Kleene as mentioned under (ii)
above arises from the fact that the version presented here is in the case of
GKi better suited for describing the correspondence between normal natural
deductions and normal sequent calculus proofs, to be discussed later.
Pfenning [1994] has recently described a computer implementation of cut
elimination for Kleene's G3-systems combined with context-sharing Cut.
The semantic tableaux of Beth [1955], and the model sets of Hintikka [1955]
are closely connected with G3-systems. See also 4.9.7.
Hudelmaier [1998, p. 25-50] introduces a generalized version of the notion
of a multi-succedent G3-type system; for the systems falling under this defi-
nition, cut elimination is proved.
3.7.4. Equivalence of G-systems and N-systems. The construction in 3.3.1
of G-deductions with Cut from N-deductions is already found in Gentzen
[1935]. The construction of a normal N-deduction from a cutfree G-deduction
is outlined in Prawitz [1965, App. A, §2]. As to the assignment of cutfree G-
deductions to normal N-deductions, see section 6.3.
3.7.5. Gentzen systems with terms. The assignment of typed terms to the
sequents in a sequent calculus proof is something which might be said to be
already present, for the case of implication logic, in Curry and Feys [1958,
section 9F2], and follows from proofs showing how to construct a natural
deduction from a sequent calculus proof, when combined with the formulas-
as-typ es idea.
For a bijective correspondence between deductions in a suitable Gentzen
system and a term calculus, less trivial than the one indicated at the end of
3,3.4, see, for example, Herbelin [1995].
Vestergaard [1998b,1998a] studies implicational G3-systems where the de-
ductions are represented as terms, as in the paper by Herbelin mentioned
above; the Cut rule is interpreted as an explicit substitution operator. The
steps of the cut elimination procedure (the process of cut elimination is dis-
cussed in the first part of the next chapter) recursively evaluate the sub-
stitution operator. Vestergaard's results seem to indicate that -->Gam is
computationally better behaved than -->G3m; for (his version of) the latter
calculus Vestergaard presents an infinite sequence of deductions which (intu-
itively) represent distinct deductions but are mapped to the same deduction
under cut elimination. Recent work by Grabmayer [1999] indicates that the
results are highly sensitive to the precise formulation of the rules and the cut
elimination strategy.
3.7.6. Inversion lemmas. Ketonen [1944] showed the invertibility of the
propositional rules of his Gentzen system (using Cut, without preservation
90 Chapter 3. Gentzen systems
of depth). An inversion lemma of the type used in our text first appears
in Schiitte [1950b], for a calculus with one-sided sequents. Schiitte does not
explicitly state preservation of depth, but this is obvious from his proof, and
in particular, he does not use Cut for showing invertibility. Curry [1963] con-
tains inversion lemmas in practically the same form as considered here, with
explicit reference to preservation of (logical) depth and (logical) size.
Related to the inversion lemmas is the so-called "inversion principle" for
natural deduction. This principle is formulated by Prawitz [1965] as follows:
the conclusion of an elimination does not state anything more than what
must already have been obtained if the major premise had been obtained by
an introduction. This goes back to Gentzen [1935, §5]: "The introductions [of
M] represent, as it were, the 'definitions' of the symbols concerned, and the
eliminations are no more, in the final analysis, than the consequences of these
definitions." The term "inversion principle" was coined by Lorenzen [1950].
3.7.7. The one-sided systems. Gentzen systems with one-sided sequents for
theories based on classical logic were first used by Schiitte [1950b]. Schiitte
has negation for all formulas as a primitive and writes iterated disjunctions
instead of multisets. The idea of taking negation for compound formulas as
defined is found in Tait [1968]. Tait uses sets of formulas instead of multisets.
Because of these further simplifications some authors call the GS-calculi "Tait
calculi".
In the paper Rasiowa and Sikorski [1960] a system similar to GS3 is found;
however, negation is a primitive, and there are extra rules for negated state-
ments. For example, --,(A V B) is inferred from -IA and la In addition there
is a rule inferring from A. The inspiration for this calculus, which is
halfway between the calculi of Schiitte and Tait, derives from the ideas of
Kanger and Beth, in other words, from semantic tableaux.
3.7.8. Varying Gentzen systems. In the literature there is a wide variety of
"enrichments" of the usual Gentzen systems as described in this chapter. We
give some examples.
Gentzen systems with head formulas. Sequents take the form r; =.
A; A'; the formulas in PA are treated differently form the formulas in riA'.
An example is given in 6.3.5, where sequents of the form II; I' A with
1111 < 1 are considered. In this example, if 11; r A has been obtained
by a left rule, 1111 = 1 and the formula in II is principal. See also 9.4 and
Girard [1993].
Gentzen systems with labelled formulas. Extra information may be
added to the formulas in sequents; the term-labelled calculus described in
3.3.4 is an example.
Hypersequents are finite sequences of ordinary sequents:
ri r2
3.7. Notes 91
Hypersequents were first introduced in Pottinger [1983] for the proof-theoretic
treatment of certain modal logics, and have been extensively used and studied
in a series of papers by Avron [1991,1996,1998]. They can be used to give cut-
free formulations not only of certain modal logics, but also for substructural
and intermediate logics. (In substructural logics the structural rules of weak-
ening and contraction are not generally valid, intermediate logics are theories
in the language of propositional logic or first-order predicate logic, which are
contained in classical logic and contain intuitionistic logic.) An interesting ex-
ample of an intermediate logic permitting a cutfree hypersequent formulation
is the logic LC, introduced in Dummett [1959]; a Hilbert-type axiomatization
for LC is obtained by adding axioms of the form (A + B) V (B + A) to
Hip.
The hypersequent formulation CLC of LC (Avron [19911) uses sequents
with a single formula in the succedent, and
ri Ai I I r. An
is interpreted as
(A ri Ai) v v (A rn An).
A typical rule of GLC is the "commutation rule" showing interaction between
various sequents in a hypersequent:
E1Ir1A1E E2 I r2 A2 I EI2
Ei E2 I Pi A2 E2 Al I E1 Elz
where E1E2, E, E12 are hypersequents. (If E1E27 E, E/2 are empty, r1 a A17
F2 A2, this immediately yields (A1 > A2) V (A2 -4 A1) on the interpreta-
tion.)
Labelled sequents. Instead of labeling formula occurrences, we may
also label the sequents themselves. An example is Mints [1997], where the
sequents in hypersequents are labelled with finite sequences of natural num-
bers. Mints uses this device for a cutfree formulation of certain propositional
modal logics. The indexing is directly related to the Kripke semantics for the
logics considered.
Display Logic. This is a very general scheme for Gentzen-like systems,
introduced by Belnap [1982], where the comma in ordinary sequents has been
replaced by a number of structural operations. Mints [1997] relates Display
Logic to his hypersequents of indexed sequents, and Wansing [1998] shows
how formulations based on hypersequents may be translated into formalisms
based on display sequents. See furthermore Belnap [1990], Wansing [1994].
Chapter 4
Cut elimination with applications
The "applications of cut elimination" in the title of this chapter may perhaps
be described more appropriately as "applications of cutfree systems", since
the applications are obtained by analyzing the structure of cutfree proofs;
and in order to prove that the various cutfree systems are adequate for our
standard logics all we need to know is that these systems are closed under
Cut (that is to say, Cut is a an admissible rule). Nevertheless there are
good reasons to be interested in the process of cut elimination, as opposed
to semantical proofs of closure under Cut. True, the usual semantical proofs
establish not only closure under Cut, but also completeness for the semantics
considered. On the other hand, the proof of cut elimination for G3c is at
least as efficient as the semantical proof (although G3cp permits a very fast
semantical proof of closure under Cut), and in the case of logics with a more
complicated semantics (such as intuitionistic logic, and the modal logic S4
in chapter 9) often more efficient. For linear logic in section 9.3, so far no
semantical proof of closure under Cut has been published. Other reasons for
being interested in the process of cut elimination will be found in certain
results in sections 5.1 and 6.9, which describe bounds on the increase in size
of deductions under cut elimination and normalization respectively.
4.1 Cut elimination
As mentioned before, "Cut" is the rule
r A, A A, ri Al
r, I',
Closure under Cut just says that the Cut rule is admissible: if I- r AA and
AP A' in the system considered, then also I- rr AA'. This in itself
does not give us an algorithm for constructing a deduction of rr AA' from
given deductions of I' AA and Ar A'. In the systems studied here
the deductions are recursively enumerable. So, if we know that the system is
closed under Cut, there exists, trivially, an uninteresting algorithm for finding
92
4.1. Cut elimination 93
a deduction of FF' AA' given the fact that r AA and AF' A' are
deducible: just search through all deductions until one arrives at a deduction
for rr, AA'. For such a trivial algorithm we cannot find a bound on the
depth of the cutfree proof in terms of the depth of the original proof.
We shall say that cut elim,ination holds, for system S + Cut, if there is
a "non-trivial" algorithm for transforming a deduction in S + Cut into a
deduction with the same conclusion in S. In our proofs such a non-trivial
algorithm is based on certain local transformation steps, such as permuting
rules upward over other rules, or replacing a cut on a compound formula A
by some cuts on (A and) its immediate subformulas, and on certain simple
global transformations on subdeductions, as for example the transformations
implicit in the inversion lemma and closure under Contraction for G3[mic].
4.1.1. DEFINITION. The level of a cut is defined as the sum of the depths of
the deductions of the premises; the rank of a cut on A is IAI +1. The cut rank
of a deduction D, cr(D), is the maximum of the ranks of the cutformulas
occurring in D.
4.1.2. NOTATION. For the deduction D* with conclusion F, A, A'
obtained by applying dp-admissible Weakening to D with conclusion F A
we write D[F/ A1]. We say in this case that D has been weakened with
A'; similarly for individual sequents.
In intuitionistic and minimal systems with at most one formula in the succe-
dent this is usually weakening with sequents r (i.e., empty succedent); in
this case D[1" ] may be abbreviated as v[r].
4.1.3. LEMMA. For all systems closed under dp-weakening, prooftrees with
instances of Cut may be transformed in a prooftree with instances of con-
textsharing Cut, defined in 3.2; the transformation preserves depth. Hence
eliminability of Cut is a consequence of eliminability of Cut.
PROOF. If T is a system closed under dp-admissible Weakening, then so is
T + Cut: if we weaken premises and conclusion of an instance of Cut with
the same sequent, the result is again an instance of Cuto.
Let D be a prooftree containing instances of Cut and Cut; take a top-
most instance a of Cut, conclusion of a subdeduction D', and with premises
F A, A and r', A A', derived by Do, D1 respectively. Then Do[1.A'1,
7,1[1" -A] have conclusions rr ALA' and IT/ A AA' respectively; now
apply Cut to to these deductions to obtain the original conclusion of D';
replace D' by the transformed deduction. Thus we may successively replace
all instances of Cut by instances of Cut.
94 Chapter 4. Cut elimination with applications
4.1.4. NOTATION. In this section we adopt as a local convention, that the
deduction(s) of the premise(s) of the conclusion of a prooftree 7, are denoted
by Do (Do, DO; the deductions of the premise(s) of the conclusion of Di are
etc. The depth of 1, is d, the depth of D21. in is dii...in
4.1.5. THEOREM. Cut elimination holds for G3[mic] + Cut.
PROOF. We shall in fact establish cut elimination for G3[mic] + Cut. Our
strategy will be to successively remove cuts which are topmost among all cuts
with rank equal to the rank of the whole deduction, i.e. topmost maximal-rank
cuts. It suffices to show how to replace a subdeduction D of the form
Do D1
F D D,F
Cutcs
where cr(Di) < IDI cr(D) 1 for i E {0, 1}, by a V* with the same
conclusion, such that cr(D*) < IDI. The proof proceeds by a main induction
on the cutrank, with a subinduction on the level of the cut at the bottom of
D.
We treat the classical and the intuitionistic cases; the treatment for minimal
logic is contained in the discussion of the intuitionistic case. For future use
we shall also verify in the course of the proof the following property:
(*) d* < do + di for G3c, d* < 2(do + di) for G3[mi].
However, we recommend that initially the proof is read without paying at-
tention to the verification of (*).
We use closure under Contraction and Weakening all the time. Recall that
we consider only proofs with axioms where the principal formula is atomic.
There are three possibilities we have to consider:
at least one of Do, D1 is an axiom;
Do and D1 are not axioms, and in at least one of the premises the
cutformula is not principal;
the cutformula is principal on both sides.
Case 1. At least one of Do, 7,1 is an axiom.
Subcase la. Do is an instance of Ax, and D is not principal in Do. Then D
is of the form
A,P,D
4.1. Cut elimination 95
The conclusion is an axiom, so we can take the conclusion for our V*. Simi-
larly if Do is an application of Li. The intuitionistic case is similar and the
verification of (*) trivial.
Subcase lb. The premise on the left is an application of Ax and the succedent
principal formula is also a cutformula:
P,F A
V* is obtained by applying closure under Contraction to D1. The intuition-
istic case proceeds in the same way, and the verification of (*) is trivial.
Subcase lc. The premise on the right is an application of Ax or L_L, and
the antecedent principal formula is not a cutformula. This case is similar to
subcase la.
Subcase ld. The premise on the right is an application of the axiom Ax and
the cutformula is also a principal formula of the axiom. This case is similar
to subcase lb.
Subcase le. The premise on the right is an application of the axiom LI and
the cutformula is also a principal formula of the axiom.
Do
r
If Do ends with a rule in which I is principal, r A, I is of the form
r, I A, I and hence is an instance of L_L; then r", A, which is the
same as I' A, is also an axiom. If Do ends with a rule in which I is not
principal, say a two-premise rule, D is of the form
D00
A', I r" A" I
Rr
A
r A
uutcs
This is transformed by permuting and duplicating the cut upwards over R on
the left:
V00 Vol
Cut
ry, p"I Ir" A" Cutcscs P ril All
r
In this deduction V' we can apply the IH to V'0, V'1. If Do ends with a one-
premise rule, the transformation is similar, but no duplication is needed. The
intuitionistic case is also similar, but slightly simpler.
96 Chapter 4. Cut elimination with applications
Verification of (*) in the classical case: if we replace, using the IH, in D'
the immediate subdeductions D'o, D'i. by (D)*, (D'i)* respectively, the depth
of the resulting deduction D* is
d* < max(doo + 1, 41 + 1)
which is precisely what we have to prove for (*). Similarly for the intuitionistic
case.
Case 2. Do and D1 are not axioms, and the cutformula is not principal in
either the antecedent or the succedent. Let us assume that D is not principal
in the succedent, and that Do ends with a two-premise rule R:
V00 Doir A 'D r" A"D R D1r AD DF =ZA
r =- A
This is transformed by permuting the cut upwards over R on the left:
V00 [F] 7)1[1".61 V01 {F1 7,1[1'" Au]
¿1 AA'D Drri AA' rr" AA"D Drr" AA"ut CutIT' AA' IT" AA" Rrr AA
Call the resulting deduction D'; replacing D'o, D'1 by respectively (D/0)*, (D'1)*
given by the IH produces a deduction A" which after use of closure under
Contraction produces D*. Note that R may in particular be a cut with rank
< D. The intuitionistic case is treated similarly, except where Do ends with
L>; then the cut is permuted upwards over one of the premises only.
Verification of (*) in the classical case. Note that d" = d*. We have to
show d* < max(doo, doi) + 1 + di.. By the IH,
(dor < doo + di, (dir < doi + di,
and so d* < max(doo + di., cloi. + di.) + 1 = max(doo, doi) + 1 + cll.. The intu-
itionistic case is similar.
If the cutformula is not principal in the antecedent, the treatment is similar
(symmetric in the classical case).
Case S. The cutformula is principal on both sides. We distinguish cases
according to the principal logical operator of D.
Subcase 3a. D Do A D1.
Doo Vol pm
r A, Do r A, Di Do, Di, r A
r A, Do A Di Do A Di, r A
I' A
becomes
4.1. Cut elimination 97
which is replaced by
V00
rDo D1 D10
r r,D04Di Do
utcsr
r D1
Doo
rDo DllCute,
A Cutc.
Doo[D]. ]
Vol Dir =- A, Do Do, Di, I' A
A
A
and similarly in the intuitionistic case.
Verification of (*). We have to show
d* < max(doo, 41) + 1 + do + 1 = MaX(doo + 1, doi + 1) + dip + 1.
In fact inspection of the constructed D* shows
d* = max(doi, max(doo, dio) + 1) + 1
= max(doi, doo + 1, dio + 1) + 1
< max(doo + 1, doi + 1) + dio + 1.
Subcase 3b. D Do V Di.. The treatment in the classical case is symmetric
to the preceding case; the intuitionistic case is somewhat simpler.
Subcase Sc. D Do + Di.. The deduction in G3c has the form
V00 Vio A.1
r,D0D1,L r =- Do, A r, A
r Di, A r, + A
A
This is transformed into a deduction D':
Doo 7,11[D0 ]
Dio , D0 D1,z I', Do, Di A
r, Do, r, Do A
A
The new cut on Do > D1 is of a lower level than the original one, so by the
subinduction hypothesis we can remove this cut. In the intuitionistic case we
have
D10 7,11
r,D0D1 r, Do -4 D1 Do I', Di A
r Do -4 Di r,D0 > Di A
r A
98 Chapter 4. Cut elirnination with applications
The new cut on Do --+ D1 has a lower level, and can therefore be removed
by the subinduction hypothesis; let D'a, be replaced by (D0)*, the resulting
deduction is D* (and (D*)oo = CrYoo)*)
Verification of (*). The classical case is similar to subcase 3a, and left to
the reader. We verify the intuitionistic case. We have to show
(1) d* < 2(doo + 1 + max(dio, did) + 1)
= max(2d00 + 2d10 + 4, 2d00 + 2d11 + 4).
The deduction (D*)oo satisfies 40 < 2(d00 + 1 +di.0) (using the IH), hence V*
satisfies
d* < max(max(2d00 + 2dio + 2, doo) + 1, dii) + 1
= max(2d00 + 2d10 + 4, doo + 2, d11 + 1),
and this is obviously smaller than the right hand side of (1).
Subcase 3d. D VxDo. We transform (y FV(Do, r, A), y FV(t))
V00 Vio
r Do[x 1 y] V xDo , Do[x t], r A
F =. A, VxDo YxDo, F A
r A
into
Doo [Do [xlt]
Do[xlt], =. Do[x ly] Die
Doo[ylt] Do[xlt],F VxDo VxDo, Do [x It], r A
r Do[xlt] Do[xlt], F A
r A
The subdeduction D' ending in the cut on VxDo is of lower level, so may be
replaced by the 1H by a deduction (D')*. This produces the required D*.
Verification of (*) in the classical case. We have to show d* < doo + d10 + 2;
for D* we have
d* < max(doo, doo + 1 + dio) + 1
= max(doo dio + 2, doo + 1)
= doo + die + 2.
The treatment of the intuitionistic case is completely similar.
Subcase 3e. D 3xD0. The classical case is symmetric to the case of the
universal quantifier; the intuitionistic case is simpler. We leave the verification
to the reader. N
4.1.5A. * Supply the missing cases in the preceding proof.
From the proof we obtain the following lemma, which will be used in the next
chapter to obtain an upper bound on the increase of depth of deductions as
a result of cut elimination:
4.1. Cut elimination 99
4.1.6. COROLLARY. (Cut reduction lemma) Let V', D" be two deductions
in G3c + Cut, with cutrank < I DI, and let 7, result by a cut:
D' ly/
r D, A F, D A
F A
Then we can transform 1, into a deduction D* with lower cutrank and the
same conclusion such that ID*1 < 17,1 + 17,"1. A similar result holds for
G3i + Cut,, with 1D*1 < 2(1/Y1+ ID"I)-
4.1.7. REMARK. The cut elimination procedure as described above does not
produce unique results: there is indeterminacy at certain steps. In particular
when both cutformulas are non-principal, we can move a cut upwards on the
right or on the left. By way of illustration, consider the following deduction:
P' , P, Q P, R, P'VQ' P AQ, R, P' P' , Q' , P
P', P AQ P, R, P'VQ' P AQ, R, P' P'VQ' , P
P', PAQ P, P'VQ'
The cutformula R is not principal on either side. So we can permute the cut
upwards on the right or on the left. Permuting upwards on the left yields
P, Q, PAQ, R, P' P' , Q' , P
PAQ , P, Q , P' P, R, P'VQ' P, Q, PAQ, R,P' P'vQ',P
PAQ , P' , P, Q P, P'VQ'
PAQ, P', PAQ P, P'VQ'
Now we have to apply closure under Contraction to get the required conclu-
sion; following the method of transformation of the deductions in the proof
of dp-closure under Contraction (3.5.5) the result is
P,Q , R, P' P' , Q1 , P
P, Q, P' P, R, P'VQ1 P, Q, R, P' P'VQ' , P
P' , P,Q P, P'VQ'
P', PAQ P, P'VQ'
The remaining cut is now simply removed by noting that the conclusion of
the cut is an axiom (subcase la in the proof of 4.1.5):
P' , P, Q P, P'V Q'
P',PAQ P, P'VQ'
If we start, symmetrically, permuting the cut upwards on the right, we end
up with
P' , PAQ P, P' ,Q'
100 Chapter 4. Cut elimination with applications
These two results represent obviously different proofs.
Another source of indeterminacy in the cut elimination process appears in
case 3, where in the subcases which reduce a cut of degree n + 1 of level k
into two cuts of degree n (and possibly a cut of degree n + 1 and level less
than k); one has to choose an order in which the cuts of degree n are applied.
4.1.8. Variations
The most commonly used strategy in proofs of cut elimination is the removal
of topmost cuts; that is to say, we show how to replace a subdeduction 1, of
the form
Do /),rA,D D,r,6,
F A
where D0,1,1 are cutfree, with a cutfree proof 1,* with the same conclusion.
The preceding proof can almost be copied for this strategy. We have to
distinguish the same main cases, and the same subcases in case 3.
In permuting cuts upwards, as in subcase le and case 2, permuting over a
cut of lower rank does not occur. In the subcases of case 3, we have to appeal
not only to the subinduction hypothesis, but to the main IH as well. Take
for example the prooftree obtained in subcase 3d after transformation. We
first appeal to the subinduction hypothesis to remove the cut on VxDo, and
then to the 1H to remove all cuts of lower degree.
In the proof above, we have removed instances of Cut. Under the strat-
egy of removing topmost cuts, we can also directly remove instances of Cut;
the details are rather similar to those presented in the proof above, but the
appeals to closure under Contraction appear at other places. For example, in
the subcase 3d we now have:
Doo [Y] D10
r A, Do[x Iy] VxDo, Do[x I t], r' A'
r A, VxDo VxDo, ri A'
F,r,
into
Doo[y]
r A, Do[xIy] Dim
Doo[0] I' A, VxDo VxDo, Do[x 1 t], r A'
r A, Do[xIt] Do[x It], r, r' A, A'
rrri AAA'
We remove the cuts by appeal to 1H and sub-IH, and finally have to apply
closure under Contraction. On the other hand, in the treatment of case 2 the
appeal to dp-closure under Contraction is not any longer necessary.
4.1. Cut elimination 101
The strategy of removal of topmost maximal-rank cuts does not work with
Cut, since we cannot guarantee dp-closure under Contraction for the system
with Cut.
4.1.9. Gentzen's method of cut elimination
There is another method, going back to Gentzen, which applies to G[12][mic],
not directly, but via a slight modification of these systems, and which works
as follows.
If we try to prove cut elimination directly for G2 [mic], by (essentially) the
same method as used above for G3[mic], we encounter difficulties with the
Contraction rule. We should like to transform a deduction
F', A, A B
LC
A F', A B
Cutr, B
into
TY
DI FA r', A, A B
CutFA r,P,A
Cut
LC
but this does not give a reduction in the height of the subtrees above the
lowest new cut. The solution is to replace Cut by a derivable generalization
of the Cut rule:
A, An Am, r' A'Multicut (n, m> 0)r, B, A'
where A", k E IN., stands for k copies of A. Multicut, also called "Mix", can
then be eliminated from this modified calculus in the same way as Cut was
eliminable from the G3-systems.
Rank and level of a Multicut application (a multicut) are defined as rank
and level of a cut. We can apply either the strategy of removing topmost
cuts, or the strategy of removing topmost maximal-rank cuts.
Under both strategies we use an induction on the rank of the multicut,
with a subinduction on the level of the multicut, in showing how to get rid
of a multicut of rank k 1 applied to two proofs with cutrank 0 (on the first
strategy) or less than k 1 (on the second strategy). In the example above,
the upper deduction is simply replaced by
DI/
FA B
Multicut
102 Chapter 4. Cut elimination with applications
Instructive is the following case, the most complicated one: let D be obtained
by a multicut on the following two cutfree deductions:
Doo Dlo D11
rA B(AB)m (A+Br AA' r (A--+B)B A'
F (AB)m1 A R.> l'(A+B)n±1 A'
In the case where m, n > 0 we construct Da,Db,Dc:
In each of these deductions the multicut on A -4 .B has a lower level than
in D. Therefore we can construct by the 1H their transforms D'a, D,D, of
cutrank < IA -4 BI and combine these in
Dia
rr,A BAA' AAA'
rrriri BAAA'A' rr'.73 AA'
(IT')3 (AAI)3
rr' AA'
The multicuts are now all of lower rank.
4.1.9A. * Show also for the other cases how to reduce the rank of an application
of Multicut when the cutformula is principal in both premises.
4.1.9B. 46 Argue that Gentzen's cut elimination procedure applies equally well
to the system G2i* mentioned in 3.3.4. (One can save a few cases in the argument
if the A in the axioms r, I A is restricted to be prime.) What happens to this
argument if, instead of the axioms 1-',1 A, we adopt the rule "If F 1, then
F A"?
D
FA
Doo
B(A)B)rn
vio
r/(AB)n
vil
AA' ri (Aq3)nB
r,(A*Br+1 A'
BAA'
D00
FA B(A+B)m D10Db = { r(A*B)n AA'r (AB)m+1A
Fri AAA'
D00
D
FA B(A+B)m D11
F (A+B)m+1A (A--+B)'B A'
rriB AA'
4.1. Cut elirnination 103
4.1.10. Cut-elimination for m-G3i
The proofs of cut elimination for G3i can be adapted to m-G3i. We shall
not carry this out in detail, but instead provide a sketch.
LEMMA.
In m-G3i the following rule is depth-preserving admissible:
r A
LV, LA, L3, RV, RA, R3 are invertible in m-G3i.
m-G3i is 'closed under depth-preserving left- and right-contraction. 121
THEOREM. Cut is eliminable from deductions in m-G3i + Cut.
PROOF. We follow the standard strategy of removing topmost cuts; so we
have to show how to remove a cut applied to two cutfree deductions of the
premises. The main case distinctions are:
one of the premises of the cut is an axiom;
case 1 does not apply, and the left premise of the cut is obtained by a
rule application for which the cutformula is not principal;
cases 1 and 2 do not apply, and the right premise of the cut is obtained
by an application of rule R for which the cutformula is not principal;
the cutformula is principal in both premises.
The asymmetry between cases 2 and 3 is caused by the rules R> and RV
which deviate from the general pattern. The only new element, when com-
pared with the proof for G3i, occurs under case 3, in particular where the
rule R is R--+ or RV. For example, if R is R>, the proof ends with
A, I', C D
I' A, A A, F' C > D, A'
r c -> D, A, A'
Since we are in case 3 and cases 1 and 2 do not apply, A is principal on the left.
If the left premise is obtained by R>, or RV, say R-4, with A E A1 > A2,
the proof ends
r, A1 A2
I' A, A
Then we transform the end of the proof simply into
104 Chapter 4. Cut elimination with applications
F, A1 A2rA,z A, ri, C D
r, F', C D
C + D, A'
However, if the left premise has been obtained by one of the invertible rules
RV, RA, R3, we use inversion. For example, let RV be the rule for the left
premise, so the deduction ends with
A,A,B AV B,P,C D
LY,C
we replace this by
A V B, C D
A, I'', C D (Inv)Av B, F', C D (Inv)
A, A, B A, I' C D, B, F', C D
r,ri A, A', B,C + D B,ri C + D,
FTT AA'A', C + D
Here the dotted line indicates an application of Inversion to transform a
proof with conclusion as above the line into a proof of no greater depth with
conclusion as below the line.
4.1.10A. Prove the lemma.
4.1.10B. Adapt the proof of cut elimination for m-G3i to elimination of Cuto.
4.1.10C. A Check that Cut or Cut es is also eliminable from m-G3i' plus Cut or
Cuto.
4.1.11. Semantic motivation for G3cp
In the introduction we described for the case of implication logic a very natural
way of arriving at a cutfree sequent calculus for G3cp. We extend this here
to all of G3cp.
In testing the truth of a sequent r A, we try to give a valuation such
that A r becomes true and VA becomes false, in other words, the valuation
should make all formulas in r true and all formulas in A false.
In order to make r A, A > B false, we try to make r, A true and A, B
false, i.e. we try to find a refuting valuation for the sequent I', A A, B.
In order to make r, A -4 B A false, we try to make either I' true and
A, A false, or r,B true and A false. In other words, we try to find a refuting
valuation either for I' A, A or for r,B
4.2. Applications of cut elimination 105
Thus at each step we reduce the problem of finding a refuting valuation to
corresponding problems for less complex sequents. In the end we arrive at
r A with F A consisting of atomic formulas only. These have refuting
valuations if they are not axioms.
Our rules for reducing the problem of finding a refuting valuation for a
sequent correspond to the following rules read upside down:
F,A,B A rA,A rA,B
F,AKBA
A,rL B,Ft F
AVB,FA
FL,A B,FL A,F
F,A*./3A
These rules are precisely the propositional part of G3c. If we start "bot-
tom upwards", the different branches of the refutation search tree represent
different possibilities for finding a refutation. This gives us the following:
THEOREM. (Completeness for G3cp) A sequent r A is formally derivable
by the rules listed above iff there is no refuting valuation.
This idea may be extended to predicate logic G3c. Since Cut is obviously
valid semantically, one thus finds a proof of closure under Cut by semantical
means; but the proof does not provide a specific algorithm of cut elimination.
See also 4.9.7.
4.2 Applications of cutfree systems
From the existence of cutfree formalizations of predicate logic one easily ob-
tains a number of interesting properties.
Below, positive and negative occurrences of formulas in r A are defined
as positive and negative occurrences in the classical sense in A r--> A, where
A is used for iterated conjunction.
4.2.1. PROPOSITION. (Subformula property, preservation of signs in deduc-
tions) Let D be a cutfree deduction of a sequent r A in G[mic][123].
Then for any sequent A' in D we have
(i) the formulas of r occur positively in r, or negatively in A;
106 Chapter 4. Cut elimination with applications
the formulas of A' occur either positively in A, or negatively in F;
moreover, for Gl[mic],
if a formula A occurs only positively [negatively] in F =- A, then A is
introduced in D by a right /left./ rule.
PROOF. Immediate by inspection of the rules. El
An appropriate formulation of the third property for systems G[23ilmic]
requires more care, since formulas may now also enter as context in an axiom.
COROLLARY. (Separation property) Any provable sequent F =- A always has
a proof using only the logical rules and/or axioms for the logical operators
occurring in F =- A.
4.2.1A. 4 Show that the separation property holds for Ni, and that it holds
for Hi in the following form: let X be any subset of {A, v, 1, V, 3} containing
>; show that the X-fragment of Hi can be axiomatized by the axioms and rules
involving operators from X only. Hint. Combine the equivalence proofs of 2.4.2
and 3.3 with the subformula property for G3i.
4.2.1B. 4 Show that the separation property holds for Nc in the form: if r A
is provable in Nc, then it has a proof using only axioms/rules for logical operators
occurring in 1' -4 A, and possibly 1c. Extend the sepaxation theorem to He for
fragments containing at least -4, I. (For the case of >Hc see 4.9.2, 6.2.7C, 2.1.8F.)
4.2.2. THEOREM. (Relation between M and I) Let P be a fixed proposition
letter, not occurring in r, A. For arbitrary B not containing P let B* :=
B[±1.13], and put F* := {B* : B E r}. Then (with the notation of 1.1.6)
r Hm A iff r* Hi A*.
PROOF. If F Hm A, then r* Hm A* (since I behaves as an arbitrary propo-
sition letter P in minimal logic), hence r* Hi A*. Conversely, if r* Hi A*,
we can show r* A* by a cutfree proof in one of the intuitionistic systems;
by the separation property for cutfree systems, the proof does not use the
I-axiom, so F* Hm A*, hence I' hm A.
4.2.3. THEOREM. (Disjunction property under hypotheses) In M and I, if
F does not contain a disjunction as s.p.p. (= strictly positive part, defined in
1.1.4), then, if FHAV B, it follows that F H A or I' H B.
PROOF. Suppose I' Hi A V B, then we have a proof D in G3i of r A V B,
where r does not contain a disjunction as strictly positive part.
4.2. Applications of cut elimination 107
A sequent F' A V B in D such that r' clods not contain a s.p.p. which
is disjunctive, and where A V B is not principal, has exactly one premise of
the form A V B where F" has no disjunctive or existential s.p.p.'s.
(Only LV can cause two premises with A V B in the succedent, but then I'
would contain a disjunction, hence a disjunctive s.p.p.) Therefore there is a
sequence
Fc, AVB,Fi
in D such that A V B is principal in the first sequent, ri A V B is the
premise of ri+, A V B (0 < i < n) and 17,, A V B is the conclusion.
Note that ro A V B cannot be an axiom (except when 1 E ro, in
which case the matter is trivial), because of the restriction to atomic principal
formulas in axioms. Therefore ro A V B is preceded by ro A or ro B,
say the first; replacing in all ri A V B the occurrence of A V B by A and
dropping the repetition of ro A results in a correct deduction. 121
There is a similar theorem for the existential quantifier:
4.2.4. THEOREM. (Explicit definability under hypotheses) In M or I
if F does not contain an existential s.p.p., and r H 3xA, then there are
terms t1, t2,. , tr, such that r H A(t1) v A(t.),
if r contains neither a disjunctive s.p.p., nor an existential s.p.p., and
F H 3x A, then there is a term t such that r H A(t). N
REMARK. RasiowaHarrop formulas (in the literature also called Harrop
formulas) are formulas for which no s.p.p. is a disjunction or an existential
formula. For r consisting of RasiowaHarrop formulas 4.2.3 and 4.2.4 both
hold.
4.2.4A. * Prove theorem 4.2.4.
4.2.4B. 06 Reformulate the arguments of theorem 4.2.3, 4.2.4 as proofs by induc-
tion on the depth of deductions.
4.2.4C.* (Alternative method for proving the disjunction property) The method
of the "Aczel slash" provides an alternative route to a proof of: if F hi A VB, then
Phi A or r B, for suitable r. We describe the method for propositional logic
only. Let F be a set of sentences; FIA is defined by induction on the depth of A by
FIP := F F- P for P atomic;
riA A B := rIA and 11/3;
rIA V B := rIA or rIB;
108 Chapter 4. Cut elimination with applications
(iv) riA B := (If riA then FIB) and r h A B.
By induction on the depth of A one can prove that, if PIA, then F I- A. By
induction on the length of proofs in Hi one can show that, if one assumes ric for
all C E r and r E- A, then ro. Deduce from this that if ric for all C E F, and
F E- A v B, then F A or r E- B. Show finally that if no formula in F contains
a disjunction as a strictly positive subformula, then Fr for all C E F. Conclude
from this: if hi B v C, then hi B or C.
4.2.5. THEOREM. (Herbrand's theorem) A prenex formula B, say
Bm Vx3x/Vy3y/ A(x, z', y, y', .),
A quantifier-free, is provable in GS1, iff there is a disjunction of substitution
instances of A of the form
D V yi, Si,. .),
i=0
such that D is provable propositionally and B can be obtained from the se-
quent A(xo, to, yo, ...),... , A(xn,tn, yn, sn, ...) by structural and quantifier
rules.
PROOF. For a detailed proof and a more precise statement see 5.3.7. The
idea of the proof is as follows. Suppose B has a proof in GS1, then we can
rearrange the proof in such a way that all quantifier-inferences come below
all propositional inferences. For example, a succession of two rules as on the
left may be rearranged as on the right (x FV(FB)):
A,B,F A, B, F
VxA,B,r A, B V C,r
VxA,B v c,r VxA,B V C, F
where, in case x E FV(C), we have to rename the variable x in A in the infer-
ences on the right. Ultimately we find a propositional sequent which is the last
sequent of the propositional part and the first sequent of the quantifier part;
this sequent must then consist of a multiset of formulas A(xi, t, yi, si, . . .).
4.2.5A. 4 Give complete details of the permutation argument in the proof of
Herbrand's theorem.
4.2.6. THEOREM. Ip is decidable.
PROOF. Let 1" A be a propositional sequent. We can construct a search
tree, for "bottom-up" proof search in the system G3ip.
More generally, in order to describe the search tree we note that
4.2. Applications of cut elimination 109
Each node of the search tree represents the problem of proving (simul-
taneously) a finite set of sequents F1 A1,. , An.
A predecessor of a problem is obtained by replacing a Fi Ai by
F' A' or by a pair F' =- A', I" =- A" such that
F' =- A' A' A"
orri Ai ri Ai
is a rule application of G3i.
We regard two problems {r, Ai, , rn An} and {A1 B1, ,
In An} as equivalent, if to each ri Ai there is a A3 .133 such that
Set(Fi) = Set(L) and Ai B. If along a branch of the search tree we meet
with an axiom, the branch ends there; and if along a branch a repetition
of a problem occurs, that is to say we encounier a problem equivalent to a
problem occurring lower down the branch, the branch is cut off at the repeated
problem.
Because of the subformula property, there are only finitely many prob-
lems. This puts a bound on the depth of the search tree.
REMARK. The proof that such a decision method works is still easier for
Kleene's original calculus G3, or for GKi, defined in 3.5.11.
4.2.7. EXAMPLE. The following example illustrates the method. In order to
shorten the verifications a bit, we note in advance that sequents of the forms
r, > A2, A2 A3, . An-i An Ai -4 An
r, Ai, Ai A2, .. , An, > An An
are derivable. Below, P, Q, R E PV . We drop -4 to keep formulas short. Let
us now attempt in G3i a backward search for a proof of the sequent
(QP)R,QR, RP P
We add "NA f" to indicate derivability and underivability, respectively. (N.B.
We may conclude underivability if a sequent is obviously classically falsifi-
able.) "Indifferent" after a sequent indicates that the derivability for this
sequent does not matter since the branch in the search tree breaks off already
for other reasons.
(a) Apply L-4 with principal formula RP; this requires proofs of
(QP)R,QR, RP R,
(QP)R,QR, P P .
110 Chapter 4. Cut elimination with applications
Since the second sequent is an axiom, the problem reduces to (2). We continue
the search with (2) first.
(aa) Apply in (2) L-4 with principal formula RP; we find
(QP)R,QR, RP R and
(QP)R,QR, P R (indifferent),
so this operation is useless, since we are back at (2).
(ab) Apply L--+ with QR principal:
(3) (QP)R,QR, RP Q,
(Q P)R, RP, R R V.
We continue with (3).
(aba.) Apply L*, with RP principal, to (3):
(QP)R,QR, RP R (repetition),
(QP)R,QR,P Q (indifferent),
so this track breaks down.
(abb) Apply L>, with QR principal, to (3):
(QP)R,QR, RP Q (repetition),
(QP)R, R, RP Q t,
so this track also breaks down.
(abc) Apply L-4, with (QP)R principal to (3):
(QP)R,QR, RP QP V,
R,QR, RP Q t,
again breakdown. We return to (2).
(ac) Apply L-4, with (QP)R principal, to (2):
(QP)R,QR, RP QP V,
QR,RP,R R/,
so this track leads to a derivation. We have now investigated all possibilities
for (2).
4.2. Applications of cut elirnination 111
Apply L+, with QR principal, to (1):
(4) (QP)R,QR, RP Q,
(QP)R, R, RP P
(4) is identical with (3), so this track fails.
Apply L-4, with (QP)R principal, to (1):
(QP)R,QR, RP QP V,
QR, RP, R QP V,
so this leads to a derivation. All in all, we have found two roads leading to a
deduction, all others failed.
4.2.7A. 4* Show proof-theoretically that I V x(P V Rx) P V V xRx (P E PV,
R a unary relation symbol). You may use classical unsatisfiability as a shortcut to
see that a sequent cannot be derivable.
4.2.7B. 4* Apply the decision procedure for Ip to the following sequents:
(P Q) V (Q P), ((P Q) P) P, V P , R(P Q)
Q) Q, Q P Q (P,Q, R E PV).
4.2.7C. A Prove the following lemma for the calculi Gl[mic]: a provable se-
quent always has a proof in which the multiplicity of any formula in antecedent or
succedent is at most 2. Derive from this a decision method for Ip based on Gli.
Let Gl[mic]° be the calculi obtained from Gl[mic] by replacing by the
original version of Gentzen:
A B ,r ,r/
Show that the statement above also holds for Gl[mic]° if we read 'at most 3' for
'at most 2' (Gentzen [1935]).
4.2.7D. 4* Let us call a proof in Gl[mic]° (see the preceding exercise) restricted
if in all applications of L>
A B
A B does not occur in V. Show that every [cutfree] proof of a sequent r A
can be transformed into a [cutfree] restricted proof of r A (DoAen [1987]).
112 Chapter 4. Cut elimination with applications
4.2.7E. 4 Use the preceding result to show that every sequent A provable
in G1[mic]°, with multiplicity of formulas in r and in A at most 2, has also a
deduction in which all sequents have multiplicity at most 2 for all formulas in
antecedent and succedent (Dokn [1987]).
4.2.7F. 4* Let C be a formula of I not containing and let I' = {Ai >
B1, , B}. Prove that if r H C, then r I- A, for some i < n (Prawitz
[1965]).
4.2.7G. 4 Show the decidability of prenex formulas in I for languages without
function symbols and equality.
4.2.7H. 4 Show that the following derived rule holds for intuitionistic logic: If
I F- (A B) C V D, then I I- (A B) C or I H (A -4 B) D or
I I- (A B) A.
Generalize the preceding rule to: If E Ai(A, Bi) and I H E CV D, then
IHECorIHE>DorIF-E>A,forsomei.
4.3 A more efficient calculus for Ip
The fact that in the calculus G3i in the rule L> the formula A B in-
troduced in the conclusion has to be present also in the left premise makes
the bottom-up proof search inefficient; the same implication may have to be
treated many times. Splitting L--> into four special cases, such that for a
suitable measure the premises are strictly less complex than the conclusion,
produces a much more efficient decision algorithm.
4.3.1. DEFINITION. The Gentzen system G4ip has the axioms and rules of
G3ip, except that L> is replaced by four special cases (P E PV):
PB r
LO-4 P B,P, E
C (D B),1' E
LA*
C B,D E
LV-4 CVD--+B,FE
D B,C,I D B,I EL>-4
(C D) -4 B , E
Note that all rules are invertible, except L>-->, RV.
El
4.3. A more efficient calculus for Ip 113
4.3.1A. * Observe that we do not have the subformula property in the strict
sense for this new calculus; can you formulate a reasonable substitute?
It is not hard to obtain an upper bound on the length of branches in a
bottom-up search for a deduction, once we define an appropriate measure.
4.3.2. DEFINMON. We assign to propositional formulas A a weight w(A)
as follows:
w(P) = w(I) := 2 for P e PV,
w(A A B) := w(A)(1+ w(B)),
w(A V B) := 1 + w(A) + w(B),
w(A -- B) := 1 + w(A)w(B).
For sequents F A we put
w(F A) := Efw(B): B E PA}
where each w(B) occurs as a term in the sum with the multiplicity of B in
rA. z
Now observe that for each rule of the calculus G4ip, the weight each of the
premises is lower than the conclusion. So all branches in a bottom-up search
tree for a proof of the sequent 1" =- A have length at most w(r A). We
now turn to the proof of equivalence between G4ip and G3ip.
The idea of the proof is to show, by induction on the weight of a sequent,
that if G3ip 1-- r A, then G4ip h r A. If G3ip h r A and we can
find one or two sequents (S, S' say) from which r A would follow in G4ip
by an invertible rule, the sequents S, S' are also derivable in G3ip and have
lower weight, so the IH applies.
If none of the invertible rules of G4ip is applicable, we must look at the
last rule applied in the G3ip-proof. Except for one "awkward" case, we can
then always show in a straightforward way that there are sequents of lower
weight provable in G3ip, which by a rule of G4ip yield r A. However, by
lemma 4.3.4 we can show that we may restrict attention to proofs in G3ip
in which the awkward case does not arise.
4.3.3. DEFINMON. (Irreducible, awkward, easy) A multiset r is called
irreducible if r neither contains a pair P,P --> B (P E PV), nor J_, nor a
formula C A D, nor a formula C V D. A sequent r A is irreducible iff r
is irreducible. A proof is awkward if the principal formula of the final step
occurs on the left and is critical, that is to say of the form P -4 B, otherwise
it is easy. Z
114 Chapter 4. Cut elirnination with applications
4.3.4. LEMMA. A provable irreducible sequent has an easy proof in G3ip.
PROOF. We argue by contradiction. Assume that there are provable irre-
ducible sequents without easy proofs. Among all the awkward proofs of such
sequents, we select a proof 7, of such a sequent with a leftmost branch of
minimal length. Let r C be the conclusion of that proof. r c
P B, r' C with P ry, since F is irreducible. Hence 1, has the form
D'
P -+ B,F' P C
P B,ri C
1,' cannot be an axiom since P r'. P B, r' P is also irreducible, and
not all possible deductions of this sequent can be awkward, for then 1," would
be an awkward proof with a leftmost branch shorter than the leftmost branch
of D, which is excluded by assumption. Hence P B, P must have
an easy proof T," and end with an application of a left rule; r P --+ B, r'
is irreducible, so the last rule applied must have been L-* with principal
formula D --+ E, D not atomic (since T," was easy), i.e. if we replace 1,' by
D" we get a deduction of the form
1,1
P B,D E, r" D E,P--+ B,F" P
P --+ B, D --+ E,r" P B, D E , r" C
P B, D E , r" c
where r D --+ E, r". We permute the application of rules and obtain
vi .2)//
Do E,P > B,r" P B,D> E,r" C
P B,D E, r" D E , P B, r" C
P-+ B,D--+ E,r"
The new proof is easy. E]
4.3.5. THEOREM. G3ip and G4ip are equivalent.
PROOF. Let 1-* be derivability in G3ip and G4ip respectively. The rules
of G4ip are derivable in G3ip, so G4ip C G3ip.
For the converse, consider any G3ip-proof of a propositional sequent r
E; we show by induction on the weight of the sequent that we can find a
G4ip-proof of the same sequent.
Case 1. If J..E r we are done.
Case 2. Let r r', A A B E; then also 1- r', A, B E, and r', A, B has
lower weight than r, so i* r', A, B E.
Case 3. r A V B, r': similarly.
4.3. A more efficient calculus for Ip 115
Case 4. r P, P -+ B. Then also H F', P, B E, so by the IH
F', P, B E; apply LO>.
Case 5. If none of the preceding cases applies, F is irreducible. By the
preceding lemma, F E has a G3ip-proof, which is either an axiom, or has
a last rule application with principal formula on the right, or has a principal
formula on the left of the form A B, A not atomic.
Subcase 5.1. If the final step is an axiom, we are done.
Subcase 5.2. If the last rule is RV, RA or R-4, we are done since the premises
are lower in weight than the conclusion.
Subcase 5.3. The last rule is L-* with A B as principal formula, A not
atomic.
5.3(i) If A C A D, then because of
H (C A D B) (C (D --+ B))
also C (D B), E in G3ip, which by IH is provable in G4ip, hence
with LA--> F E.
5.3(ui) Similarly for A CV D, then H* C B, D B, F' E; apply
LV-4.
5.3 (iii) Let A C D; then the last rule application has the form
(C D) --+ B,ri C D B,F' E
(C D) B , E
In G3m we have generally H r, (A0 > A1) -4 A2 Ao A1 iff H r, A, -4
A2 Ao A1 (exercise) iff F, A, --+ A2, Ao A1 (by inversion); hence
(C > D) > B , C --+ D iff H D > B, C, D, and this second
sequent is lower in weight, so H* D -+ B, C, D; also H* B, E; now
apply L-4>.
5.300 Let A 1. Then 1- _1_ B, E iff [-- E iff H* E
(III); use admissibility of Weakening to obtain H* A > B, I" E.
4.3.6. EXAMPLE. The following example illustrates what may be gained in
reducing the possibilities for "backtracking". If we search for a proof of the
purely implicational sequent (writing for brevity XY for X > Y)
(QP)R,QR, RP P,
we find in G4ip a single possibility:
PR, R, P,Q P
PR, RP, Q , R P °-+ P,QR P
LO-4PR,QR, RP, Q p R,QR, RP P
(QP)R,QR, RP P
Compare this with the proof search in 4.2.7 for the same sequent.
116 Chapter 4. Cut elimination with applications
4.3.6A. ** Test the following formulas for derivability in Ip: A P)
V A > P) V (-,P V and [((P R) R) >
((Q R) (((P Q) R) R).
4.3.6B. 4 Prove that in G3m P,(Ao Ai) > A2 Ao > Ai if F- r, ->
A2 AO Al .
4.4 Interpolation and definable functions
The interpolation theorem is a central result in first-order logic; therefore
we have reserved a separate section for it. An important corollary of the
interpolation theorem, historically preceding it, is Beth's definability theorem
(4.4.2B).
4.4.1. NOTATION. In this section we adopt the following notation. Rel±(r),
Rel-(r) are the sets of relation symbols occurring positively, respectively
negatively in F. We put Rel(r) := Rel±(r) U Rel-(r). Con(r) is the set of
individual constants occurring in F.
4.4.2. Interpolation theorem for M, I, C
An interpolant for a derivable implication I- A > ./3 is a formula F such
that I- A > F, F B, and such that F satisfies certain additional
conditions. For example, for propositional logic, one requires that F contains
propositional variables occurring in both A and B only. For sequents r A,
the obvious notion of interpolant would be a formula F satisfying additional
conditions such that I- r F, F A. However, in order to construct
interpolants by induction on the depth of derivations of sequents, we need a
more general notion of interpolant, as in the following theorem.
THEOREM. Suppose G3[mic] IT' AA' (with lAil < 1 and A = 0 for
G3[mi]); then there is an interpolation formula (interpolant) F such that
(i) G3[mic] I' AF, G3[mic] rF A';
Reli(F) C n Reli A') for i E {m };
Con(F) C Con(r, n Con(-r, A');
(iv) FV(F) c Fv(r, n FV(-V, A').
PROOF. By induction on the depth of cutfree deductions in G3[mic]. A split
sequent is an expression r; A; A' such that IT' AA' is a sequent. A
4.4. Interpolation and definable functions 117
formula F is an interpolant of the split sequent F; F' A; A' if H r A, F
and H F A'. If F is an interpolant of F; A; A' we write
r; F > A; A'
Basis. We show below how the interpolants for an axiom r, P, F' A, P,
are to be chosen, dependent on the splitting. The second line concerns cases
which can arise in the classical system only.
1'; PF' L; A; PA' FP; F > A; PA'
F; PF' -P> AP; A' FP; r' AP; A'
For axioms L_L the interpolants are given by
FI; > L;' F; ±-3j5- A; LV
Induction step. We show for some cases of the induction step how to construct
interpolants for a splitting of the conclusion from interpolants for suitable
splittings of the premises. We first concentrate on the classical case; for
G3[mi] slight adaptations are needed.
Case I. The last rule is L+. There are two subcases, according to the
position of the principal formula in the splitting:
r'; r A'; AA r.B, r' A; A' r; r' 1 ) A; AA' r; Br' A, A'
r(A B); r; (A B)ri
To see that, for example, the case on the left is indeed correct, note that
by the 1H for the premises we have (1) rc AA, (2) rip A', (3)
Br D, A, (4) I' CA'. From (1) and (3), by closure under Weakening,
CF .AD, rBc AD; from this with L-4, r(A --+ B)C DA, and by
1"(A -4 B) (C > D)A. Fi(C > D) A' is obtained from (2) and
(4) by a single application of L-4.
C > D and C A D satisfy the requirements (i)(iv) of the theorem, as is
easily checked.
Case 2. The last rule applied is R-4. There are again two subcases:
AF; c > BA; A' F; c >
F; c > A -4 B, A; A' r; r' > ;A -4 B,
The first of these cases has no analogue in G3[mi]. To see for the first case
that the interpolant for the premise is also an interpolant for the conclusion,
note that FA AC implies r A, A -4 B, C. The checking of the other
properties is left to the reader.
118 Chapter 4. Cut elirnination with applications
Case 3. The last rule is Lb. The two subcases are
r, VxA, A[xlt];ri > A, A' F; A[xlt], VxA, F' >
F, VxA; A; A'
In the first subcase,
FV(C) \ (FV(FAVxA) n FV(PA')),
Con(C) \ (Con(FAVxA) n Con(F'A')),
77 a sequence of fresh variables; in the second subcase,
= FV(C) \ (Fv(rA) n FV(VxA F'A')),
cr= Con(C) \ (Con(FA) n Con(VxA F'A')),
il a sequence of fresh variables. The case where the last rule is R3 is treated
symmetrically.
Case 4. The last rule is L.
FA; F' C > A; A' r; c >
F; VxA, F'
Bigc
[dig]A, A'
F, 3xA; C > A; A' F; 3xA, F' A; A'
where x FV(IVAA'). To see that the indicated interpolant is correct, note
that C does not contain x free.
The case where the last rule is RV can be treated symmetrically.
Let us now consider one of the least boring cases for G3m, namely where
the last rule is L-4. The interesting subcase is
r'; A > B, r C > A r, B; r' D > E
r, A > B; C-4D> E
By the Ill we have A -4 B, c, r A and r, B D, and by weakening also
r, A > B,C D; applying L-4 we find r, A > B,C D, hence with R>
r,A B C* D.
By the Ill we also have r C and r', E; weakening the first yields
r', c > D C, and then by a single application of L-4 c --+ D E. E
4.4.2A. A Complete the proof of the interpolation theorem.
4.4.2B. A (Beth's definability theorem) Let A(X) be a formula with n-ary rela-
tion symbol X in language L. Let R, R' be relation symbols not in L, and assume
A(R) A A(R') Ve(Re R'e). Show that there is a formula C in L such that
A(R) .`91e.(C Re).
4.4. Interpolation and definable functions 119
Interpolation with equality and function symbols
We shall now show how the interpolation theorem for logic with equality and
function symbols may be obtained by a reduction to the case of pure predicate
logic.
4.4.3. DEFINITION. We introduce the following notations:
Eqo Vx(x = x) AV xy(x = y + y = x) AVxy z(x =gAy=z --+ x = z),
Eq( f) = = fi'),
Eq (R) = A
For a given language let Eq be the set consisting of Ego, Eq(f) for all func-
tion symbols f, and Eq (R) for all relation symbols R of the language. We put
Eq(Ri, ...,R) Eq(Ri), ,Eq(Rn), and Eq(fi,... , fn) Eq(f1), ,Eq(fn).
For notational simplicity we shall assume below that our language has only
finitely many relation symbols and function symbols. This permits us to
regard Eq as a finite set, but is not essential to the argument.
We write Eq(A), Eq(r) for Eq with the function symbols and relation sym-
bols restricted to those occurring in a formula A or a multiset F. Let
3!y Ay := Ay(Ay A z(Az + z = y)).
If Fi is a predicate variable of arity p(i) + 1, for 1 < i < n, then
Fn (Fi) := Vi3!y Fi(xy) A Eq(Fi),
,F) := Fn(Fi), . , Fn(Fn)
Let us assume that to each n-ary function symbol A in A there is associated
the n 1-ary relation symbol F, Fi not occurring in A. Then Fn(A) consists
of all Fn(Fi) for the A occurring in A. Similarly for Fn(r), r a multiset.
4.4.4. DEFINITION. Let . . ,f be a fixed set of function symbols of the
language, and F1, . , Fn be a corresponding set of predicate symbols, such
that the arity of F, is equal to the arity of A plus one. Relative to this set of
function symbols we define for each term t of the language a predicate t*(x)
(x Ø FV(t)) by the clauses:
Y*(x) := (x = y);
fi(ti, , tp)*(x) := Vxj. xp (tI (xi ) A . .. A tp* (xp) Fixi xpx);
g (ti, , tp)* (x) := Vxi xp(ti (xi) A... A tp*(xp) > g (xi, , xp) = x),
for all function symbols g distinct from the A.
We associate, relative to the same set of function symbols, to each formula A
not containing P a formula A*, by the clauses:
120 Chapter 4. Cut elimination with applications
(t1 = t2)* := Vxix2(tI(xi) A t(x2) x1 = x2);
(Rti tp)* := Vxi xp(tT (xi) A . . . A t(x) Rxi xp);
* is a homomorphism w.r.t. logical operators.
Finally, for any formula A we let A° be the formula obtained from A by
replacing everywhere subformulas of the form Fiti tpt by fiti tp = t. El
Note that (I = I')* is equivalent to = I', and that (f())* (y) is equivalent
to F(, y).
Up till 4.4.12, we may take the discussion to refer to a fixed set , fn
of function symbols, with corresponding relation symbols F1,. , Fn; we shall
sometimes abbreviate En (P) as En.
4.4.5. LEMMA. In G3[mic] we have
H Eq, F A iff F- Eq (FA), r A, F- r A;
if I-- Eq, Fn(P), r A, then Eq, ro A°.
Combining (i) and (ii) produces
if 1- Eq \ Eq(f), Fn(P), r A, then I-- Eq, ro A°.
PROOF. The first statement is proved by replacing in the proof of Eq, rA
all occurrences fti...tn of n-ary function symbols f not occurring in 1.
A by t1, which amounts to interpreting f by the first projection function
(from an n-tuple to the first component), and replacing all predicate symbols
not occurring in 1- A by T J > I. This makes the corresponding
equality axioms trivially true; the result will be a derivation of a sequent
Eq(FA), E, 1. A, where E is a set of derivable formulas which may be
removed with Cut.
The proof of the second statement is easy: if we replace formulas Fit' tnt
by fiti tn = t throughout, Fn(P) becomes provable.
4.4.6. LEMMA. The following sequents are provable in G3m:
Eq (x = t)
Eq (A 4-÷ A*°),
where t is arbitrary, and does not contain x, and A is any formula not con-
taining Fn
PROOF. The first assertion is proved by induction on the complexity of t, the
second statement by induction on the logical complexity of A, with the first
assertion used in the basis case.
4.4. Interpolation and definable functions 121
4.4.7. LEMMA. For any term t, G3m Eq, Fn(P) 3!x(t* (x)).
PROOF. By induction on the construction of t. We consider the case t
fi(ti, , ti,); other cases are similar or simpler. To keep the notation simple,
let p = 1. By the Ili,
Eq, Fn, 4(y), q(z) y z, so
Eq,Fn,t1(y), f;(z), F(y, u) F(z, u).
Now t* (z) = Vy(t(y) Pyz), hence
Eq, Fn, (y), F(y, u) t* (u).
Fn contains Vx3!yFxy, hence
Eq, Fn, (y) 3ut* (u).
We can also prove
Eq, fl(y),e(z),e(u) z u,
which suffices for the statement to be proved.
4.4.8. LEMMA. Let t, s(y) be terms, A(y)* a formula not containing F1, . .
F. Then we can prove in G3m:
Eq, Fn, t* (x) s(x)*(z) ++ s(t)* (z),
Eq, Fn, t* (x) A(x)* A(t)* (z).
PROOF. The first statement is proved by induction on the complexity of s,
the second statement by induction on the logical complexity of A, using the
first statement in the basis case.
As a typical example of the inductive step in the proof of the first state-
ment, let s(x) g(si(x), , sp(x)) (g not one of the fi). Then s(t) E
g(si(t), , sp(t)). By the
Eq, Fn, t(x)* si(t)* (y) ++ si(x)*(y) (1 i p).
Assume now t* (x) and
g (s (t), , sp(t))* (y) Vyi Yn (Aisi (t)*(yi) y = g (yi , , yp)).
Using the II-I, the displayed assumption is equivalent to
Vyi Yn(Aisi(x)*(Yi) Y = (Yi yp)),
i.e. to g(si(x), , sp(x))* (y).
122 Chapter 4. Cut elimination with applications
4.4.9. LEMMA. Let A(x) be a formula not containing a relation symbol
from P. Then we can prove in G3m:
Eq, Fn(P),VxA(x)* A(t)*; H Eq, Fn(P), A(t)* 3xA(x)* .
PROOF Immediate by lemmas 4.4.7, 4.4.8.
4.4.10. LEMMA. Let r A not contain relation symbols from P. Then we
have in G3 [mic]:
if H Eq, F A then H Eq,Fn,r. A*.
Hence, by 4.4.5, if H Eq, =- A, then h Eq \ Fn(?), Fn (P), r. A*.
PROOF. The easiest way to establish this result is to use the equivalence of
sequent calculi with Hilbert-type systems; so it suffices to establish for H[mic]
that
If Eq h A then Eq, Fn h A*.
The proof is by induction on the depth of derivation of Eq h A in the H-
system.
Basis. If A is an element of Eq, other than Eq(fi), the assertion of the theorem
is trivial. If A a Eq(fi), A* becomes equivalent to
= =
which is equivalent to
Vigi(g = -4 Vyy'(Figy A FiVy' > y = y')),
which follows from Fn(Fi).
If A is a propositional axiom, or a quantifier axiom of one of the following
two types (x FV(B), y a x or y FV(A)):
Vx(B -4 A) -4 (B VyA[x/y]) or
Vx(A B) > (3yA[x/y] B),
then A* is an axiom of the same form. If A is one of the axioms
Vx A > A[x A[x It] -43x A,
the statement of the theorem follows from the lemma 4.4.9.
Induction step. It s readily seen that application of >E or VI permutes with
application of *.
4.4. Interpolation and definable functions 123
4.4.11. THEOREM. (Interpolation theorem for languages with functions and
equality) For G[123][mic], if f- Eq, A B, then there is an interpolating
formula C such that
Eq, A Eq, C B;
all free variables, individual constants, function constants, predicate
letters (not counting =) in C occur both in A and in B.
PROOF. Assume
Eq, A B
then by 4.4.5, (i)
Eq (A), Eq (B), A B.
Applying 4.4.10 and 4.4.5(i) we find that
Eq- (A), Fn(A), Eq-(B), Fn(B), A* r. B*,
where Eq- (A) = Eq(A) \ (f), Eq-(B) = Eq(B) \ (f). Hence
(AEq- (A) A AFn(A) A A*) (AEq-(B) A AFn(B) B*),
hence by the interpolation theorem for predicate logic without function sym-
bols and equality, for some D
AEq-(A) A AFn(A) A A* D,
D AEq-(A) A AFn(A) A A* > B*,
that is to say
Eq- (A), Fn (A), A* D and H Eq- (B), Fn(B), D B*.
Then apply the mapping ° and let C D°, then by 4.4.5:
Eq(A), A C, Eq(B), C B.
Condition (ii) for C readily follows from the corresponding condition satisfied
by D.
As a by-product of the preceding arguments (in particular 4.4.10) we obtain
the following theorem on definable functions.
124 Chapter 4. Cut elimination with applications
4.4.12. THEOREM. (Conservativity of definable functions) Let T be a first-
order theory in a language L, based on C, I or M. Let T H Vg3!yA(g, y)
of length n). Let f be a new function symbol not in L. Then T+VgA(g, f x)
is conservative over T w.r.t. (i.e. no new formulas in L become provable
when adding `vt 'A(1, f x) to T).
PROOF. Let F0 be a finite set of non-logical axioms of T, such that ro
VgA!yA(Y, y). Consider the mapping * of 4.4.4 with f for fi, , fn, and F
for F1, , Fn. If I F1 B in T, with r, a finite subset of T, F1 in language
{f}, B in L, then by 4.4.10 in the original T with F added to the language
H F1, Fn(F) B (since F1 is not affected by *). But if we substitute A(g, y)
for F, Fn(F) is provable relative to ,C from F0, hence I rori B in L, i.e.
T B.
REMARK. The result extends to certain theories T axiomatized by axioms
and axiom schemas, in which predicates appear as parameters. Let T H
VgA!yA(g, y), let f be a new function symbol not in the language G of T, and
let T* be T with the axiom schemas extended to predicates in the language
G U {f}. If now the new instances of the axiom schemas translate under
* (substituting A for F) into theorems of T, the result still holds. This
generalization applies, for example, to first-order arithmetic, with induction as
an axiom schema; the translation * transforms induction into other instances
of induction.
Interpolation in many-sorted predicate logic
4.4.13. Many-sorted predicate logic is a straightforward extension of or-
dinary first-order predicate logic. Instead of a single sort of variables, there
is now a collection of sorts J, and for each sort j E J there is a countable
collection of variables of sort j; the logical operators are as before. We think
of the collection of sorts as a collection of domains; variables of sort j range
over a domain D.
Furthermore the language contains relation symbols, constants, and func-
tion symbols as before. In the standard version, the sorts of the arguments
of an n-ary relation symbol of the language are specified, and the sorts of
arguments and value of the function symbols is specified.
Only marginally different is a version where for the relation symbols the
sort of the arguments is left open, so that is a well-formed formula
regardless of the sorts of the terms t1, . ,tn.
Here we restrict attention to many-sorted languages with relation symbols,
equality and constants, but no function symbeds; the sort of the arguments
of a relation symbol is left open.
4.4. Interpolation and definable functions 125
4.4.14. DEFINITION. A quantifier occurrence a in A is essentially universal
[essentially existential], if a is either a positive occurrence of V of [3] or
a negative occurrence of 3 [of V]. A quantifier occurrence a in a sequent
F A is essentially universal [essentially existential] if the corresponding
occurrence in A F V .6, is essentially universal [essentially existential].
Let Un(A) be the collection of sorts such that A contains an essentially
universal quantifier over that sort, and Ex(A) the collection of sorts such that
A contains an essentially existential quantifier over that sort; and similarly
for sequents.
Inspection of our proof of the interpolation theorem shows that essentially
universal quantifiers in the interpolant derive from essentially universal quan-
tifiers in A =- F and that essentially existential quantifiers derive from es-
sentially existential quantifiers in F' A'. So an interpolant C to A =- B
contains an essentially universal [existential] quantifier if A [if B] contains an
essentially universal [existential] quantifier.
This observation straightforwardly extends to many-sorted predicate logic,
so that one obtains
4.4.15. THEOREM. (Interpolation for many-sorted predicate logic without
function symbols) If H A + B, there exists an interpolant C satisfying all
the conditions of theorem 4.4.11 and in addition
Sort(C) c Sort(A) n Sort(B),
Un(C) c Un(A), Ex(C) c Ex(B).
PROOF. For many-sorted languages without equality and without function
symbols, we can check by looking at the induction steps of the argument for
theorem 4.4.2 that an interpolant satisfying the conditions of the theorem
may be found; this is then extended to the language with equality by taking
from the argument for 4.4.11 what is needed for equality only. We leave the
details as an exercise.
4.4.15A. 4 Prove the interpolation theorem for many-sorted logic.
4.4.16. Persistence. We sketch an application of the preceding interpolation
theorem to the model theory of classical logic.
A first-order sentence A is said to be persistent, if the truth of A in a model
is preserved under model-extension. Let us consider, for simplicity, a language
with a single binary relation symbol R. For variables in .0 we use x, y, z.
Persistence of a sentence A means that for any two models M (D, R) and
M' (D', R') such that
D c D', n (D x D) = R,
126 Chapter 4. Cut elimination with applications
we have
If .A4 A then .A4' A.
This may also be expressed by looking at two-sorted structures satisfying
(*) M* _= (D, D', R, R') with D c D', R' n (D x D) = R.
We extend ,C to a two-sorted language L' by adding a new sort of variables
x', y', z' and a new predicate symbol R'. In this language the persistence of
A in ,C may be expressed as
1- Ext AA A',
where Ext is the formula Vx3y/(x = y') A Vxy(R(x, y) ÷--> R' (x, y)), expressing
the conditions on the two-sorted structure in (*). A' is obtained from A by
replacing quantifiers of L by quantifiers of the new sort, and replacing R by
R'. By interpolation, we can find a formula F such that
Ext A A --+ F', F' A'.
Since Ext is not essentially universal w.r.t. the new sort of variables, F'
contains only variables of the new sort and all quantifiers are essentially ex-
istential. From this we see that for F obtained from F' by replacing R' by R
and new quantifiers by old quantifiers, that f- F E4 A. So A is equivalent to
a formula in which contains only essentially existential quantifiers.
It is not hard to prove the converse: if all quantifiers in A are essentially
existential, then A is persistent. The obvious proof proceeds by formula
induction, so we need an extension of the notion of persistence to formulas.
A formula A with FV(A) = g is persistent if for all sequences of elements cr
from D of the same length as g we have
If M A[g Id] then M' A[g 14.
4.5 Extensions of G1-systems
This section is devoted to some (mild) generalizations of cut elimination, with
some applications.
4.5.1. Systems with axioms
Extra (non-logical) axioms may be viewed as rules without premises; hence
an application of an axiom A in a prooftree may be indicated by a top node
labelled with A with a line over it.
It is possible to generalize the cut elimination theorem to systems with
wdoms in the form of extra sequents ("non-logical axioms"). In the case of
the systems Gl[mic] we again use Gentzen's method with the derived rule
of Multicut (4.1.9). The statement is as follows:
4.5. Extensions of Gi-systerris 127
PROPOSITION. (Reduction to cuts on a.xioms) Let D be any deduction in
Gl[mic] + Cut from a set of axioms closed under substitution (i.e. if r =- A
is an axiom, then so is r[/r1
Then there is also a deduction containing only cuts with one of the premises
a non-logical axiom.
If the non-logical axioms consist of atomic formulas only, there is a deduc-
tion where all cuts occur in subdeductions built from non-logical axioms with
Cut. Alternatively, if the non-logical axioms contain atomic formulas only
and are dosed under Cut, we can assert the existence of a cutfree proof.
PROOF. The cut elimination argument works as before, provided we count as
zero the rank of a cut between axioms removing their principal formulas. Z
In particular, when the axioms contain only atoms, and possibly I, we con-
clude that a deduction of F =- A with cuts only in subdeductions constructed
from non-logical axioms and Cut, contains only subformulas of F A, atoms
occurring in non-logical axiornS, and I (if it occurs in a non-logical axiom).
Below we present two examples; but in order to present the second example,
we must first define primitive recursive arithmetic.
4.5.1A. * Prove the proposition by carefully checking where Gentzen's proof of
cut elimination (cf. 4.1.9) needs to be adapted.
4.5.2. Primitive recursive arithmetic PRA
This subsection is needed as background for the second example in the next
subsection, and may be skipped by readers already familiar with one of the
usual formalizations of primitive recursive arithmetic, a formalism first intro-
duced by Skolem [1923]. For more information, see e.g. Troelstra and van
Dalen [1988, 3.2, 3.10.2], where also further references may be found. PRA
is based on Cp, with equality between natural numbers and function sym-
bols for all primitive recursive functions. Specifically, there are the following
equality axioms (in which t, t', t", r, §. are arbitrary (sequences of) terms):
t = t,
t = t" A = t" --+ t =
r= f() =
for all function symbols f of the language. For the functions we have as
axioms
0S0, St = Ss -4 t = s,
and defining axioms for all primitive recursive functions. For example, for
addition f + we have axioms (t, s arbitrary terms)
f +(t, 0) = t, f +(t, Ss) = S(f_E(t, s)).
128 Chapter 4. Cut elimination with applications
Finally, we have a quantifier-free rule of induction:
If F I- A(0) and A(x) --+ A(Sx), then A(t),
for quantifier-free A(x) and r not containing x free.
REMARKS. (i) If we define I as SO -= 0, the axiom SO 0 becomes re-
dundant: define by recursion a "definition-by-cases" function satisfying
Os° = t, Ots(Sr) = s, then 0 = SO t =- Ots0 = Ots(S0) = s, i.e.
O = SO -+ t = s, and from this, by induction on 1A1, o = so A, for
all formulas A.
The axiom St = Ss -4 t = s is in fact a consequence of the presence
of the primitive recursive predecessor function prd satisfying prd(St) = t,
prd(0) = 0. For if St = Ss, then t = prd(St) = prd(Ss) = s.
The axioms may be formulated with variables, e.g. x=zAy=z
x -= y, and the induction rule with conclusion r A(x), provided we add a
substitution rule:
If r(x) A(x), then r(t) A(t).
The equality axioms for the primitive recursive functions are in fact
provable from t = s -4 St = Ss and induction; the proof is long and tedious
and left to the reader.
If we base PRA on Ip instead of Cp, then decidability of equality,
and hence by formula induction, A V for all A, is provable (Troelstra and
van Dalen [1988, 3.2]), hence this theory coincides with the theory based on
classical logic.
PRA can be formulated as a calculus of term equations, without
even propositional logic (the addition of propositional logic is conservative;
references in Troelstra and van Dalen [1988, 3.10.2]).
4.5.3. EXAMPLES. Example I. Logic with equality may be axiomatized by
adding the following sequents as axioms:
t = t
t = s, A[x It] A[x I s] (A atomic)
Example 2. Primitive recursive arithmetic may be axiomatized by adding to
the axiomatic sequents of example 1 the following:
St =Ss t = s; 0 = St ;
t = s for any defining equation t = s
of a primitive recursive function;
t< s<t s<St, s=t s<St;
s < St s < t, s = t, s < t, u = t, t < s;
R(ti,.. fR(ti, ,tn) = 0;
4.5. Extensions of Gl-systents 129
For any primitive recursive relation P there is among the primitive recursive
functions a function tp, such that tp(y,F) := min[u <y A ,P(Su, 2')], that
is to say, tp(y,,F) is the least u < y such that ,P(Su, 2') if existing, and y
otherwise. tp is characterized by the equations (dropping the parameters 2'
for notational simplicity):
te(0) := 0,
/tp(y)
if tp(y) < y,
tp (Sy) := Stp(y) if tp (y) = y A P(Sy),
tp(y) if tp(y)= y A P(Sy).
These equations can easily be brought in the standard form of a primitive
recursive definition. We can express induction w.r.t. P by the sequents:
P(0, P(tp(u, P(u,
P(0,1, P(Stp(u, 1
To see that the first sequent holds, observe that if P(0, then either tp(u,)
u, and then P(tp(u, 2"), while .1J(Stp(u, 42.), or tp(u, = u, and
then P(u, 2'). Also, by the preceding, if P(0, and P(Stp(u, 2'), 2'), then
tp(u, u is excluded, hence tp(u, = u and then P(u,2'); this explains
the second sequent.
We want to show that the following induction rule (x not free in 1') is
derivable: if H r P(0), H r, Px P(Sx), then H r Px. By Cut we get
P(tp(x)), P(x) and 1', P(Stp(x)) P(x). Then
P(tp(x)),P(x) P(tp(x)) P(Stp(x))
P(Stp(x)) P(x) r, r P(x),P(Stp(x))
r, r, r P(x),P(x)
and then r P(x) by closure under Contraction. Application of the gener-
alized cut elimination to the systems of these examples yields the following
proposition (also easily proved model-theoretically).
4.5.4. PROPOSMON.
Predicate logic with equality is conservative over the propositional part
of predicate logic with equality;
PRA with full predicate logic is conservative over PRA with proposi-
tional logic only.
130 Chapter 4. Cut elimination with applications
REMARK. We also obtain an alternative proof of: if F A is a sequent not
containing =, which is provable in predicate logic with =, then in fact F A
is also provable without the axiom sequents for equality (cf. 4.7).
4.6 Extensions of G3-systems
Here we shall consider additional non-logical axioms and rules for G3-systems.
We concentrate on the intuitionistic case, that is to say, extensions of G3i.
The case of G3c can be dealt with similarly.
We consider additional rules of four types
4.6.1. DEFINITION. Let F be an arbitrary multiset, A an arbitrary formula,
P1, . . . , Pn, Qi, , Qk-1, Q' atomic formulas. (If k = 0, IQ' is
taken to be empty.) We list four types of rules below, where the formulas in
, Q' represent active formulas in the premises, and 15, P' are principal in the
conclusion.
Rui (P, Pi) F, P
Ru2(P) r,P A
Ru3(P; C2)
F,P,Qi A (1<i<k-1)
r,P A
Ru4(0., (21, r'c-j P
If we want to deal with extensions of G3c, the treatment of antecedent and
succedent must become symmetric.
REMARK. Addition of Ru2(P ) to G3i + Cut, s is equivalent to addition of
r, 1, as follows by cutting r, P 1 with F, P, 1 A.
Addition of Ru3(P, ej) to G3i + Cut is equivalent to the addition of
(1) r,P
To see that (1) justifies Ru3(P; Cj), let D derive r, P,v A from sequents
r, P,Q, A by repeated use of LV. Then the rule is justified by
r:13'"Acutcs
4.6. Extensions of GS-systems 131
Conversely, we obtain (1) by deriving from the axioms r,P,Qi Q, by
repeated RV the sequent r, P, Q. then the rule yields r,P V (j.
Ru2 may be seen as a degenerate case of Ru3 where the number of premises
is zero.
Addition of Ru4(, Q', P) is equivalent to the addition of
(2) r, A Q'P.
c,For if r, Q' then by LA and R--> we find r A 0. Q', and Cut
with (2) yields r P. Conversely,
r, A Q',0
(1 < k) RA
r, A Q',(v A
F' Q*' Q/
r, crQ. Ru4(0,q,P)
Ci
r, A cJ P
Finally, the addition of Rui(i", P') is equivalent to the addition of Ru3(./5; P')
by the following one-step deductions:
r r,P,p/ A
Cutcs r,P A
4.6.1A. * Assuming dp-closure under LC and LW, show that a generalization of
Ru3 to a rule with several active formulas in the premises, for example
r, P, Qi, (22 A r,P,Q3,Q4A
r, P A
is equivalent to a finite set of rules of type Ru3.
4.6.2. DEFINITION. A basic cut is a cut with atomic cutformula principal
in the conclusions of instances of Rui (1 < i < 4). N
4.6.3. DEFINITION. A set of rules X is closed under substitution, if for every
instance a of a rule from X, the inference obtained by applying a substitution
to each of the premises and the conclusion of a, is again an instance of
a rule from X.
A set of rules X is closed under (left-)contraction, if contraction on the
conclusion of an instance of X yields the conclusion of another instance of X.
A G3i-system is a system of sequents formulated in a first-order language,
containing the axioms and rules of G3i, and in addition (1) a collection
of rules of types Rui (1 < i < 4) which is closed under substitution and
Contraction plus (2) basic context-sharing cuts.
r P P' P'
Ru3 r,pP'
132 Chapter 4. Cut elimination with applications
LEMMA. Let S be any G3i-system. Then
The inversion lemma of G3i extends to S.
S and S + Cut are dp-closed under left-weakening and left-contraction,
and under the rule: if 1-,,, r I then f-7, r A (a variant of right-
weakening).
PROOF. (i) The proof for G3i also applies to S, since all the principal formulas
in the additional rules are atomic.
(ii) Routine extension for the proofs for G3i. El
4.6.4. THEOREM. (Cut elimination for G3i-systems) Context-sharing cuts,
except possibly basic cuts, may be eliminated from proofs in S + Cut.
PROOF. The proof for G3i extends to G3i-systems, since it remains true that
whenever at least one of the cutformula occurrences (say a) in a cut is not a
principal formula, then either the a belongs to the context of an axiom, and
the whole cut is redundant, or a occurs in the conclusion of a rule, and the
cut may be permuted upwards on that side where a occurs. The new extra
axioms and rules, and the basic cuts, may be dealt with just as the other
rules and axioms. Finally note that the new rules can never participate in a
cut where both cutformula occurrences are principal unless the cut is basic,
since the principal formulas of the logical rules are never atomic.
Let us check on the slight modifications in some of the cases.
Subcase la. Do is a non-logical axiom, and D is not principal. So D must be
of the form
Di
r' ./5 D (Ru2) D,r, 13. ACut
r 15, A
Now the conclusion is an instance of the same non-logical axiom.
Subcase lb. Do is a non-logical axiom and D is principal. Then T, is of the
form
D1
r,f3 P' (Rui)
Pi ' r' P A cute,
r,./5' A
If PI is context on the right, we can permute the cut upwards on the right.
If P' is also principal on the right, then either D1 is an instance of Ax, so A
is P', and the conclusion coincides with Do, or D1 is a non-logical rule, and
then we have a basic cut.
Subcase lc. Di is a non-logical axiom, and D is not principal in Di. Then
we have
4.6. Extensions of OS-systems 133
Do
F,13 D D, 15 P' (Rui)
F, P'
and the conclusion is again an instance of Rui; similarly if D1 is an instance
of Ruz.
Subcase id. D is a non-logical axiom, say of type Rui, and D is principal in
D1. Let P. . . . Then D is of the form
Do
, /5* P0 P0,F,15* P' (Rui)
F, P. P'
We may assume that Do is not an axiom (otherwise one of the earlier subcases
applies); now we may permute the cut upwards on the left. This is routine,
except in the case where Po is principal; but then we have an instance of a
Ru4-rule, and the cut is a basic cut.
Case 2. Neither Do nor D1 is an axiom, and D is not principal either on the
left or on the right. Then we can permute upwards as before, for example
Doi
r, P, Qi D < i < k)
r,./3" A
becomes
Doi Di[Qi
r,P,Qi D A
r,P,Qi A
(0 < i < k)
r,./3" A
Since we used "economical" thinning in this case, no appeal to closure under
Contraction is needed.
Case 3. This can at most yield basic cuts in the new situations.
COROLLARY. If the additional axioms and rules in S have their principal
formulas on the left only (i.e., are of the types Ruz, Ru3), then cut elimination
results in a cutfree proof (no basic cuts left).
4.6.4A. 4 Show that rules of the four types in 4.6.1 are sufficient to eliminate all
logically compound principal and active quantifier-free formulas from extra axioms.
Hint. A logically compound quantifier-free formula may be replaced by a set of
atomic formulas linked together by suitable axioms; for example, if we have asso-
ciated to B and C the atomic formulas PE and Pc respectively, we can associate
with B C a new atomic formula PE_G, with additional axioms PE_yc, PE Pc,
and PE
134 Chapter 4. Cut elirnination with applications
4.6.4B. 01 Formulate an adequate set of rule-types similar to 4.6.1 for the classical
case.
4.6.4C. 4 Give details of the cut elimination proof.
4.7 Logic with equality
4.7.1. DEFINITION. The theory of equality may be axiomatized by adding
to G3[mic] the rules
Ref t=t'F A R t = s, P[x / s], P[x/tbrep
F A t = s, P[x /t],F =- A
where P is atomic. Let us call these theories G3[mic]. By the remarks
above, these theories are closed under Cut, Weakening and Contraction, pro-
vided the extra rules are themselves closed under ContraCtion. Duplication
can happen in Rep if P x = s; in this case Rep concludes t = s,t = s, F
A from t = s, t = s, s = s,r A. But if we contract the instances of t -= s
in premise and conclusion, the result is in fact an instance of Ref.
In order to prove equivalence with the extension of Gl[mic] with axiomatic
sequents for equality given before, we prove
4.7.2. LEMMA. In G3[mic] the following rules are admissible for all A:
A
(i) H t = s, A[x/t] A[x/ s] (ii)
t = s, A[x/ s], A[x /t],
t= s , A[x/t], A
PROOF. (i) is proved by induction on the depth of A. The most complicated
induction step is where A(x) B(x) C (x). In G3[mi] this case is
handled by the following deduction:
t = s, Bt =. Bs (IH)
= t,t = t,t = S, Bt =. BS
Rep
s = t, t = t, Bt Es
Refs = t, Bt Bs s = t,Cs Ct (IH)
s = t, Bs > Cs, Bt Bs s = t,Cs, Bt Ct
s = t, Bs > Cs, Bt Ct
= t, BS -4 CS Bt Ct R-4
In G3c= the lower weakening on the left is left out. The other cases are left
to the reader. (ii) is readily derivable from (i) and closure under Cut and
Contraction.
4.7.2A. 4 Supply the missing details in the preceding proof.
4.7. Logic with equality 135
4.7.3. DEFINITION. Let us introduce a name for the following contracted
instance of Rep:
s = t,t = t, F A
Rep*
s = t, F A
This is at the same time an instance of Ref, but in the next lemma we shall
show how to remove Ref from deductions (except possibly Rep*).
LEMMA.
If r A is equality-free and derivable in G3[mic]+ Ref + Rep* + Rep,
all sequents F' A' in the proof have no equality in A'.
1fF is equality-free, and derivable in G3[mic]+ Ref + Rep* + Rep,
Ref can be eliminated from the proof.
PROOF. (i) If somewhere in the deduction of an equality-free r A there
appears a F' A' containing = in a formula A of A', A can only become
active in a logical rule, but will then appear as a subformula of the conclusion.
(ii) We show how to eliminate a Ref-application appearing as the last in-
ference in a deduction 7, containing no other applications of Ref. The proof
is by induction on the depth of D. Let
s = s, A'
be the bottom inference of D; if s = s is not principal, we can permute the
application of Ref upwards over the preceding rule and apply the IH. If s = s
is principal, it is principal in Rep or Rep*:
s = s, P[x/ s], P[x/ s], A'
Rep
or
s = s, P[x / s], r" A'
P[x/s]
s = s, s = s, F' A'
Rep*
s = s, A'
F'
In both cases we can apply dp-closure under Contraction to the derivation of
the topline, apply Ref and apply the IH to the resulting deduction.
4.7.4. THEOREM . G3 [mic] is conservative over G3 [mic] .
PROOF. Immediate from the preceding lemma: once an equality appears on
the left, in a deduction without Ref, equalities remain present on the left,
whereas the appearance of an equality on the right is excluded by the first
half of the lemma. N
136 Chapter 4. Cut elimination with applications
4.8 The theory of apartness
4.8.1. Apartness is intended as a positive version of inequality. Thus, for
example, in the intuitionistic theory of real numbers, two numbers are apart
if the distance between them exceeds a positive rational number The pure
theory of apartness AP has besides equality a single primitive binary relation,
#; a simple description is to say that it can be formalized on the basis of Ni
with the following axioms added:
REFL Vx(x = x),
SYM Vxy(x = y y = x),
TRA Vxyz(x =y A y=z x = z),
# EQ Vxyx(x#y A x = x' Ay=y1+ x'
AP1 Vxy(--ix # y + x = y),
AP2 Vx( x # x),
AP3 Vxyz(x#y-->x#zVy#z).
In this theory we can prove that it # s t = s. This permits us to consider
instead of AP an equivalent theory AP', formulated with a single binary
relation #, where equality is simply defined as
t = s := # s.
The only extra axioms are now AP2 and AP3.
From AP3 one easily proves in AP' the equality azdom # EQ for #. To
see this, note that if x # y, x = x', then by the definition of equality ,(x # x'),
and since by AP3 applied to x # y we find x # x' V x' # y, and the first disjunct
is excluded, we have x' # y, etc.
We can reformulate AP' as a G3i-system AP-G3i as follows: there are an
extra wdom of type Ru2 and an extra rule of type Ru3:
#1 r,t#t A
t#s,t#r,r A t#s,s#r,r A
#2 t#8,1- A
We define t = s := # s. As an immediate consequence of the fact that the
principal formulas appear on the left only, we have
4.8.2. THEOREM. Cut es is completely eliminable from AP-G3i (i.e. we need
not even basic cuts).
4.8. The theory of apartness 137
4.8.3. COROLLARY. A cutfree deduction of r A in AP-G3i contains
only subformulas of F, A and atomic formulas. E
We now want to characterize the equality fragment of the theory of apartness.
We introduce "approximations" to apartness as a sequence of inequalities of
ever increasing strength:
t# °s := -'t= 8; t #n+1 S := V X(t #n X V 8 #n X).
DEFINITION. The theory EQAP consists of the pure theory of equality
(REFL, SYM, TRA) with in addition the following axioms for all n E IN:
INEQn --it #n+1 s t = s. E
It follows that
For all n, --it #n s ¡4 t = s.
4.8.4. DEFINITION. We extend the notions of positive and negative context
as follows. A positive seguent-context S+[*[ is of the form F, ./V. A or of
the form F P, where A f, P are negative and positive formula contexts
respectively. Similarly for a negative seguent-context S-H, with the roles of
Ar, P interchanged. E
The proof of the following lemma is immediate.
LEMMA. Let S+[*], S-[*[ be a positive and a negative sequent-context re-
spectively. Then
if H s+[t #n+1. 8], then I-- S+[t #n s],
if I-- S[t #n 8], then I-- Sit #n+1 sl.
4.8.5. DEFINITION. Let r A be a sequent in the language of AP-G3i.
Then (r A)' is obtained from r A by replacing all positive occurrences
of # by 0, and all negative occurrences by #. For (r A)' we also write
rn An. El
By repeated use of the lemma we have that if h (r A)' then H (F A)'+1,
for all n E IN. Note that if all occurrences of # in I' A occur under a
negation (i.e., r A is a statement in equality theory), then (r A)' holds
in EQAP iff r A is provable in EQAP, since -it e s i4 t = s -4 --it # 8.
4.8.6. THEOREM. Let I" A be a sequent in the language of pure equality
which has been proved in AP-G3i by a deduction D. Then we can effectively
transform 7, into a deduction V* in EQAP of Am for a suitable m.
138 Chapter 4. Cut elimination with applications
PRooF. We show by induction on the depth of deductions 7, in AP-G3i with
conclusion r A that we can transform 1, into Ton inEQAP with conclusion
(F A)" for a suitable n. For definiteness we shall assume EQAP to be
axiomatized with in a system based on G3i with Cut, and logical axioms
with principal formulas of arbitrary complexity. Furthermore below p will
always be max(n, m).
Case 1. 1, is an axiom. For any axiom 1 , , D° is provable in EQAP.
Case 2. V ends with an application of #2 and is of the form
Di D2
t # s,t# r, r A t # ,s, s # r,F A
t # s,r A
Remember that t #P+1 s = vz(t #P z v 8 #P -= z). Then we can take for the
transformed 1,
DI' DTtr 87t#nr7rn An t #m 8 8 #m r ,rrn Am
t#P s,t#P r,FP AP t#P s,s#Pr,FP AP
Lvt#P s,t#PrV s#Pr,FP AP
t #P+1 s,t#P r V s #P r,rP AP
LV
t #P+1 s, FP AP
t #P-ki s, rP+1 AP+1
The transitions marked by the dashed lines are justified by the preceding
lemma, since rn' An' (n' > n) is obtained from rn An by replacing a
number of negative occurrences of #n by #''.
Case 3. 7, ends with a logical rule, for example a two-premise rule
D1 D2
r1 A1 r2 A2FA
Using the induction hypothesis for D1, D2, we see that we can take for the
transform of 1,
TY? 7,n
r= r2n AT
ri; .i=173' ri .4
rP AP
For single-premise rules the transformation is even simpler. Z
4.8.7. THEOREM. The equality fragment of APP is EQAP.
PROOF. A formula in the language of equality is expressed in the language
with only # as a formula where all atomic formulas t # s occur negated. Let
F A be such a statement, derived in APP. By the preceding proposition
we then obtain a proof of rn An for some n in EQAP. But since --it #n s
k--> --it # s, this is in EQAP equivalent to r A. El
4.9. Notes 139
4.9 Notes
4.9.1. The Cut rule. The Cut rule is a special case of a rule considered in
papers by Hertz, e.g. Hertz [1929]; Gentzen [1933b] introduces Cut. The proof
of cut elimination in subsection 4.1.5 follows the pattern of Dragalin [1979].
The calculus in 4.1.11 is precisely the propositional part of the calculus of
Ketonen [1944].
It was recently shown that the introduction of Multicut in establishing
cut elimination for Gl-systems (4.1.9) can be avoided; see von Plato [1999],
Borisavljevie [1999].
A detailed proof of cut elimination for m-G3i is found in Dyckhoff [1996].
In studying the computational behaviour of the cut elimination process, it
makes sense to have both context-free and context-sharing logical rules within
the same system (cf. refconrules), see Joinet et al. [1998], Danos et al. [1999].
Strong cut elimination means that Cut can be eliminated, regardless of
the order in which the elementary steps of the process are carried out (the
order may be subject to certain restrictions though). Strong cut elimination
is treated in Dragalin [1979], Tahhan Bittar [1999], Grabmayer [1999].
The considerations in 4.1.11 may be extended to classical predicate logic,
and used to give a perspicuous completeness proof relative to a cutfree sys-
tem, thereby at one stroke establishing completeness and closure under Cut
(not cut elimination). This was discovered in the fifties by several people
independently: Beth [1955], Hintikka [1955], Schiitte [1956], Kanger [1957].
For more recent expositions see, for example, Kleene [1967], Heindorf [1994],
Socher-Ambrosius [1994]. The ba,sic idea of all these proofs is to attempt,
for any given sequent, to construct systematically cutfree proofs "bottom-
up"; from the failure of the attempts to find a proof a counterexample to the
sequent may be read off. It was Beth who introduced the name "semantic
tableau" for such an upside-down Gentzen system; cf. 4.9.7.
This idea is also applicable to intuitionistic logic, using Beth models (Beth
[1956,1959]) or Kripke models (Kripke [1965], Fitting [1969]), and to modal
logics, using Kripke's semantics for modal logic (cf. Fitting [1983]). See 4.9.7
below. Beth was probably the first to use multi-succedent systems for intu-
itionistic logic, namely in his semantic researches just mentioned.
4.9.2. Separation theorem. Wajsberg [1938] proved the separation theorem
for Hip; however, Wajsberg's proof is not completely correct; see Bezhan-
ishvili [1987] and the references given there. In exercise 4.2.1B a proof of the
separation property is sketched for all fragments of Hc except for the frag-
ments not containing negation, such as the implicative fragment. In order
to extend the sep_ar_ation theorem to this case, we consider the variant of Hc
with > A replaced by Peirce's law. Then the axioms k, s (1.3.9) and
Peirce's law axiomatize 41c. This result is due to P. Bernays, and is not
140 Chapter 4. Cut elimination with applications
hard to prove by a semantical argument. For other axiomatizations of
see Curry [1963, p. 250].
Below we give a short semantical proof of Bernays' result, communicated
to us by J. F. A. K. van Benthem. The argument consists in the construction
of a Henkin set not containing a given unprovable formula A, i.e. a maximal
consistent set of formulas not containing A; the required properties are proved
with the help of the result of exercise 2.1.8F.
Suppose 1,L A. Then, using a countable axiom of choice, we can find a
maximal set X of formulas such that X bz A (enumerate all formulas as
Fo, F2, .. ., put Xo = 0, X7,±3. = X7, if X U {Fr} H A, X7,±1 = X U {Fr,}
otherwise, and let X = UnEIN Xn). It is easy to see that X is deductively
closed, that is to say, if X H B then B E X. For all B,C
(*) B + C E X if B%XorCEX.
For the direction from left to right, let B C E X; if B E X then by
deductive closure C E X. Hence the right hand side of (*) holds. For the
direction from right to left, we argue by contraposition. Case I. Assume
C E X. Then X H B C, hence X H A; contradiction, hence C ;Z X.
Case 2. Assume B X. Then X,B H A (maximality), hence X I B + A
(deduction theorem); also by the deduction theorem X H (B + C) --+ A.
Hence with 2.1.8F X H A; again contradiction, so B E X.
By (*) we can now define a valuation vx (propositional model) from X, for
which we can prove for all formulas G: G E X iff v(G) = true.
We have not found a really simple syntactical proof of the separation the-
orem for -41-1c. A syntactical proof may be obtained from the result in
Curry [1963, p. 227, corollary 2.3]; another syntactical proof is outlined in
exercise 6.2.7C.
4.9.3. Other applications. 4.2.2 was proved in Malmnds and Prawitz [1969],
and 4.2.3, 4.2.4 were proved in Prawitz [1965] (in all three cases by using N-
formalisms). Buss and Mints [1999] study the disjunction property and the
explicit definability property from the viewpoint of complexity theory. The
proof of 4.2.6 corresponds to Kleene's decision method for the system G3 in
Kleene [1952a].
The notion of a RasiowaHarrop formula was discovered independently by
H. Rasiowa and R.. Harrop (Rasiowa [1954,1955], Harrop [1956,1960]). For
more information on the "Aczel slash" of exercise 4.2.4C (Aczel [1968]) and
similar relations, see the references in Troelstra [1992b].
Another type of application of cut elimination, not treated here, concerns
certain axiomatization problems for intuitionistic theories, such as the ax-
iomatization of the f-free fragment of the theory of a single Skolem function
with axiom ViR(i, R a relation symbol, see Mints [1999]. For other
examples, see Motohashi [1984a], Uesu [1984].
4.9. Notes 141
4.9.4. The Gentzen system G4ip. This calculus, with its splitting of 1,4,
was recently discovered independently by Dyckhoff [1992] and Hudelmaier
[1989,1992]. Here we have combined the notion of weight as defined by Hudel-
maier with Dyckhoff's clever proof of equivalence with the ordinary calculus.
Long before these recent publications, a decision algorithm based on the same
or very similar ideas appeared in a paper by Vorob'ev [1964]; but in that pa-
per the present formalism is not immediately recognizable. Remarks on the
history of this calculus may be found in Dyckhoff's paper.
In Dyckhoff and Negri [1999], a direct proof, without reference to G3i,
of the closure of G4ip under Weakening, Contraction and Cut is presented.
Such a proof is more suitable for generalization to predicate logic and to
systems with extra rules, since induction on the weight of sequents may break
down when rules are added. However, the proof is somewhat longer than the
"quick and dirty" proof presented here.
A very interesting application of the system G4ip is found in a paper by
Pitts [1992]. In particular, Pitts uses G4ip to show that in Ip there exist
minimal and maximal interpolants (an interpolant M of I A B is said to
be minimal if for all other interpolants C we have h M =- C; similarly for
maximal interpolants). The corresponding property of Cp is trivial. Since
Pitts [1992] several semantical proofs of this result has been given; see for
example Visser [1996].
4.9.5. Interpolation theorem. This was originally proved by Craig [1957a]
for C without function symbols or equality, and in Craig [1957b] extended
to C with equality. Craig's method is proof-theoretic, using a special modifi-
cation of the sequent calculus. The theorem was inspired by the definability
theorem of Beth [1953]. Craig's theorem turned out to have a model-theoretic
counterpart, namely the consistency theorem of A. Robinson [1956].
The refinement taking into account positive and negative occurrences is
due to Lyndon [1959]; Lyndon's method is algebraicmodel-theoretic. The
example 2x(x = c A --,Rx) --,Rc shows that we cannot extend the Lyndon
refinement to constants or function symbols in the presence of equality (c
occurs positively on the left, negatively on the right, but has to occur in
every interpolant).
Schiitte [1962] proved the interpolation theorem for I, using the method
of "split sequents", which he apparently learned from Maehara and Takeuti
[1961], but which according to Takeuti [1987] is originally due to Maehara
[1960].
Nagashima [1966] extended the interpolation theorem to both C and I with
function symbols, but without equality, using as an intermediate the theories
with equality present. Inspection of his proof shows that with very slight
adaptations it also works for languages with function symbols and equality.
Kleene [1967] also proved interpolation for languages with equality and func-
142 Chapter 4. Cut elimination with applications
tion symbols by essentially the same method. Our exposition of interpolation
for languages with functions and equality combines features of both proofs.
Felscher [1976] gives an essentially different proof for languages with func-
tion symbols but without equality (this paper also contains further historical
references).
Oberschelp [1968] proved, by model-theoretic reasoning, for classical logic
with equality, but without function symbols or constants, interpolation w.r.t.
positive and negative occurrences of relation symbols plus the following con-
dition on occurrences of = in the interpolant: if = has a positive [negative]
occurrence in the interpolant C of I- A =- B (i.e., I- A =- C, F- C B) then =
has a positive occurrence in A [negative occurrence in B]. As noted by Ober-
schelp, we cannot expect a symmetric interpolation condition for =, as shown
by the sequents x = y =- Rx V -,Ry and Rx A -,Ry x 0 y. Fujiwara [1978]
extended this to interpolation w.r.t. functions, positive and negative occur-
rences of relations, and the extra condition for =. Motohashi [1984b] gave a
syntactic proof of this result and moreover extended Oberschelp's result (i.e.
without the interpolation condition for functions) to intuitionistic logic.
Schulte-Mönting [1976] gives a proof of the interpolation theorem which
yields more fine-structure: one can say something about the complexity of
terms and predicates in the interpolant.
For a model-theoretic proof of interpolation for C with functions and con-
stants, but no =, see, for example, Kreisel and Krivine [1972]. There is an
extensive literature on interpolation for extensions of first-order logic, most
of it using model-theoretic methods.
The interpolation theorem for many-sorted languages, with the applica-
tion to the characterization of persistent sentences (4.4.13-4.4.16), is due to
Feferman [1968].
A syntactic proof of the eliminability of symbols for definable functions is
already in Hilbert and Bernays [1934] (elimination of the t-operator). Cf.
also Schiitte [1951], Kleene [1952a]. For our standard logics there are very
easy semantical proofs of these results, using classical or Kripke models.
4.9.6. Generalizations with applications. Perhaps Ketonen [1944] may be
said to be an early analysis of cutfree proofs in Gentzen calculi with axioms;
but he considers the form of cutfree derivations in the pure calculus where
axioms are present in the antecedent of the sequents derived. Schate [1950b]
considers for his one-sided sequent calculus derivations enriched with sequents
of atomic formulas as axioms, and proves a generalized cut elimination the-
orem for such extensions. A proof for a context-free variant of the standard
Gentzen formalism LK is given in Sanchis [1971]. Schfitte and Sanchis require
the axioms to be closed under Cut; whereas Girard [1987b]) does not require
closure of the set of azdoms under Cut.
The examples of this generalized cut elimination theorem are given as they
4.9. Notes 143
appear in Girard [1987b].
The possibility of completely eliminating cuts for G3[mic] extended with
suitable rules was first noticed in Negri [1999] for the intuitionistic theory of
apartness, and is treated in greater generality in Negri and von Plato [1998].
Among the applications are predicate logic with equality, the intuitionistic
theory of apartness just mentioned, and the intuitionistic theory of partial
order.
The paper Nagashima [1966] axiomatizes intuitionistic and classical logic
with equality by the addition of the two rules
t = t, F A r A(s) A(t),F'
FA s = t, r, F' A, A'
to Gentzen's systems LJ and LK. Nagashima states cut elimination for these
extensions, and a corresponding subformula property: each formula in a cut-
free proof in one of these extensions is either a prime formula or a subformula
of a formula in the conclusion. From this he then derives the conservativity
of the extensions over pure predicate logic without equality. This result is
an essential ingredient of Nagashima's proof of the interpolation theorem for
languages with functions but without equality.
The proof of this conservativity result presented in 4.7 is due to J. von Plato
and S. Negri.
The characterization of the equality fragment of the predicate-logical theory
of apartness in 4.8 is due to van Dalen and Statman [1979]. They obtained
this result by normalization of an extension of natural deduction. The present
simpler proof occurred to us after studying Negri [1999].
The latter paper also contains the interesting result that the propositional
theory of apartness is conservative over the theory of pure equality plus the
stability axiom (i.e., =s>t=s; Negri [1999] defines equality as the
negation of apartness, which automatically ensures stability).
4.9.7. Semantic tableaux. Semantic tableaux may be described as a par-
ticular style of presentation of a certain type of Gentzen calculus in fact,
Kleene's G3-calculi mentioned in 3.5.11. In the literature, the details of the
presentation vary.
The motivation of semantic tableaux, however, is in the semantics, not in
the proof theory in the spirit of the semantic motivation for G3cp in 4.1.11.
They have been widely used in completeness proofs, especially for modal
logics. For classical logic, there is a detailed treatment in Smullyan [1968];
for intuitionistic and modal logics, see Fitting [1969,1983,1988].
Let us describe a cumulative version of semantic tableaux for Cp, starting
from GK3c. Signs are symbols t, f, and we use s, s', for arbitrary
signs. Signed formulas are expressions sA, A a formula. We encode a sequent
r A, with r, A finite sets, as the set of signed formulas tr,
144 Chapter 4. Cut elimination with applications
If we turn the rules of GK3c upside down, then, for example, LA, RA take
the form (9 a set of signed formulas):
t A
e,t(A A B)
f A
O, f(A A B)
e,t(A A B), tA,tB e,f(A A B), fA I e,f(A A B), fB
where we have used 1, instead of spacing, to separate the possible "con-
clusions" (originally, in GK3c, premises). In this form the rules generate
downward growing trees, called semantic tableaux (cumulative version). A
tableau with tr, fA at the top node (root) is said to be a tableau for tr, fA.
The semantic reading of the rules is as follovvs (cf. the motivation for G3cp
above): tr, fA represents the problem of finding a valuation making r true
and A false; the problem represented by the premise of a rule application is
solved if one can solve the problem represented by one of the conclusions. A
node of the tableau is closed if it contains either t1 or tA,fA for some A.
So a closed node represents a valuation (satisfiability) problem solved in the
negative, and is in fact nothing but an axiom of the sequent calculus. We
assume that a tableau is not continued beyond a closed node.
A branch of the tableau is a sequence of consecutive nodes starting at the
root, which either is infinite, or ends in a closed node. A subbranch is an
initial segment of a complete branch. A branch is said to be closed when
ending in a closed node; a tableau is closed if all its branches are closed.
As an example we give a closed tableau forOmf(AVB-4BVA):
O
0,t(A V B),f(B VA)
9,t(A V B),f(B V A), fB, fA
0,t(A V B),f(B V A),fB,fAJA
I
0,t(A V B),f(B V A),fB,fAJB
Obviously, a closed tableau is nothing but a GK3c-derivation, differently
presented. All formulas obtained at a given node are repeated over and over
again at lower nodes in this cumulative version of semantic tableaux; so, in
attempting to construct a tableau by hand, it is more efficient to use a non-
cumulative presentation, as in Beth's original presentation; see, for example,
Smullyan [1968].
The use of signed formulas, due to R. M. Smullyan, is a convenient nota-
tional device which avoids the (in this setting) awkward distinction between
formulas to the left and to the right of If we do not want to use signed
formulas, we can take the set r, -IA, corresponding to the sequent r,
instead of 0, fA.
Another'useful device of Smullyan is the notion of a formula type. In the
tableaux, t(A A B), f(A V B), f(A B) on the one hand, and f(A A B),
t(A V B), t(A -4 B) on the other hand, show the same type of behaviour.
Let us call formulas of the first group a-formulas, and of the second group 0-
formulas. To these formulas we assign components al, a2 and 03., /32 according
4.9. Notes 145
to the following tables:
e f(A- B)
ce az 01 /32
t(A A B) tA tB f (A A B) fA fB
f (A V B) fA fB t(A V B) tA tB
f (A B) tA fB t(A B) fA tB
The rules for the propositional operators may now be very concisely formu-
lated as
Fa ro
faceiaz roilr,802
The idea of formula types may be extended to predicate logic, by introducing
two further types,
type -y : fVxA, t3xA and type : tVxA, fAxA.
If we adopt the convention that for -y, b as above, -y(t),b(t) stand for A[x It],
the tableau rules may be summarized by
F(t) 1'88(y) ( y a new variable).-y
The simplification which is the result of the distinction of formula types may
be compared to the simplification obtained by using one-sided sequents in the
GS-calculi. Both devices use the symmetries of classical logic. However, the
distinction of formula types is still useful for intuitionistic logic, whereas there
is no intuitionistic counterpart to the GS-systems (cf. Fitting [1983, chapter
911.
For intuitionistic logic, the semantic motivation underlying the tableaux is
the construction of suitable valuations in a Kripke model. In the remainder
of this subsection we assume familiarity with the notion of a Kripke model
for Ip.
A top node tr, LA in a tableau now represents the problem of finding
a Kripke model such that at the root A r is valid and V A invalid. Now
cumulative rules such as tA, fA mentioned above correspond to (in standard
notation for Kripke models)
k II- A A B iff (k II- A and k B), and
kilL A A B iff (k IlL A or k IlL B)
respectively (the classical truth conditions at each node). However, for k
A -+ B we must have a k' > k with k' II- A, k' IF B. But if kJ C, there is
no guarantee that k' 1L C for k' > k: only formulas forced at k are "carried
over" to k'. Thus, to obtain a rule which reflects the semantic conditions for
k W A -4 B, we take
146 Chapter 4. Cut elimination with applications
F A+ B,
exactly as in the calculi m-Gli in 3.2.1A and m-G3i in 3.5.11D, but for the
fact that r and r, A, etc. are interpreted as sets, not as multisets. Thus we
see that multiple-conclusion Gentzen systems for I appear naturally in the
context of semantic tableaux.
with et := { tC : tC E 0}. Putting k tA iff k II- A, k fA iff k IF A,
this rule may be read as: in order to force e,f(A B) at k, we must find
another node k' > k, k' forcing et, fB, tA. So f--+ is not strictly cumulative
any more. Of course, if we interpret this rule as a rule of a Gentzen system,
we find
F, A B
Chapter 5
Bounds and permutations
This chapter is devoted to two topics: the rate of growth of deductions under
the process of cut elimination, and permutation of rules.
It is not hard to show that there is a hyperexponential upper bound on
the rate of growth of the depth of deductions under cut elimination. For
propositional logic much better bounds are possible, using a clever strategy
for cut elimination. This contrasts with the situation for normalization in the
case of N-systems (chapter 6), where propositional logic is as bad as predicate
logic in this respect.
In contrast to the case of normalization for N-systems, it is not easy to
extract direct computational content from the process of cut elimination for
G-systems, since as a rule the process is non-deterministic, that is to say the
final result is not a uniquely defined "value" . Recent proof-theoretical studies
concerning linear logic (9.3) lead to a more or less satisfactory analysis of the
computational content in cut elimination for C (and I); in these studies linear
logic serves to impose a "fine structure" on sequent deductions in classical
and linear logic (some references are in 9.6.5).
We also show that in a GS-system for Cp with Cut there are sequences of
deduction with proofs linearly increasing in size, while the size of their cutfree
proofs has exponentially increasing lower bounds.
These results indicate that the use of "indirect proof", i.e. deductions that
involve some form of Cut play an essential role in formalized versions of proofs
of theorems from mathematical practice, since otherwise the length of proofs
would readily become unmanageable.
The second topic of this chapter is the permutation of rules. Permutation
of rules permits further standardization of cutfree deductions, and in par-
ticular one can establish with their help a (version of) Herbrand's theorem.
Permutation arguments also play a role in the theory of logic programming;
see 7.6.3.
147
148 Chapter 5. Bounds and permutations
5.1 Numerical bounds on cut elimination
In this section we refine the analysis of cut elimination by providing numerical
bounds. We analyze the cut elimination procedure according to the proof of
4.1.5. We recall the following corollary to that proof:
5.1.1. LEMMA. (Cut reduction lemma) Let D', D" be two deductions in
G3c + Cut, with cutrank < 'DI, and let D result by a cut:
D'
r
Then we can transform D into a deduction D* with lower cutrank such that
ID*1 < ly'l + D" I. A similar result holds for G3i + Cut, with ID*I <
2(I'D'I+17r1).
REMARKS. (i) Taking Glc,Gli instead of G3c, G3i, and using Gentzen's
method based on the Multicut rule, we can only give a cut reduction lemma
with an estimate in terms of logical depth H II. IIDII is defined as ID except
that applications of W and C do not increase the logical depth. We then find
for both Glc and G1i 117,11 < 2(I Mil I + I ID_ "II), although the proof has to
proceed by induction on ID'I + 17,"1. Let us illustrate the proof by the case
of a multicut on an implication which is principal in both premises. Let TY
be the deduction
Do
FA B(A->B)mA
d r (Aq3)m+1A
and let Dll be the deduction
vi V2
h di 1 r (A-4 B) AA' Id/_1: r (A-4B)n B A'
: Br+1
In the case whete m,n > 0 we construct TYTYTY as in section 4.1.9. An
easy computation yields bounds on their logical depth of 2d+ 2d' 2 in each
case, and then the final deduction has depth 2d + 2d':
TY3 TY4
1-2d+2&_2 rriA BAA' h2d-E2d1_2 AAA' TY5
Hd+26/1-1 (17)2 B(As)2 h2d-F2d1-2 rriB AA'
5.1. Numerical bounds on cut elimination 149
etc.
(ii) In the absence of the -4-rules, we can use the estimate I1D*Il < (11D/11+
117'1). We can also use this estimate in the case of G1c, if we split R+ into
R-41
5.1.2. NOTATION. Let "hyp" be the hyperexponential function defined by
hyp(x, 0, z) = z, hyp(x, Sy, z) = xhYP(''Y'z)
We abbreviate
zik hyp(2,k,i), 2k := hYP(2, lc, 1),
and similarly for 4,4k.
5.1.3. THEOREM. (Hyperexponential bounds on cut elimination) To each 7,
in G3[mic] + Cut of cutrank k there is a cutfree 7,* with the same conclusion,
obtained by eliminating cuts from 1), such that
ID* < 2 1DI (for G3c + Cut), 1D*I <4I (for G3[mi] + Cut).
PROOF. We show by induction on IDI that, whenever cr(D) > 0, then there
is a 1,* with cr(D*) < cr(D), ID*1 < 21D1 (for G3c) or ID*1 < 41v1 (for G3i).
If T, does not end with a cut, or ends with a cut of rank less than cr(D),
we can apply the IH to the immediate subdeduction(s) of the premise(s), and
find (in the case of G3c)
1V*1 = IVo + 1 < 21D01 +1 < 21vI (1-premise rule),
1D*I = max(IT41, + 1 < max(21v01, 211'11) + 1 <
21v01 + 21v11 < 2max(11)01,11)11)+1 = 212,1 (2-premise rule).
There remains the case where 7, ends with a cut on A, IAI +1 = cr(D). Then
we can apply the reduction lemma.
5.1.4. The inversion-rule strategy
It follows from known results (see, for example, the remark at the end of
6.11.1) that hyperexponential bounds are unavoidable in the case of predicate
logic, in the sense that no bounded iteration of exponentiation can provide
bounds for cut elimination.
On the other hand, if we restrict attention to propositional logic, consider-
able improvements in the estimate are possible, by using a different strategy
for eliminating cuts. This points to an essential difference between normaliza-
tion for natural deduction and cut elimination by the inversion-rule strategy.
More about this in 6.9. Before explaining this strategy for the case of classical
implication logic, we first give a definition:
150 Chapter 5. Bounds and permutations
DEFINITION. The cutlength c1(D) of a deduction D is the maximum value of
E{s(A) : A occurrence of cutformula in o-}
taken over all branches o- of the prooftree.
The strategy works as follows. We first show how to replace a deduction
ending with a single cut on A (i.e. the deductions of the premises of the
cut are cutfree) by a deduction of the same sequent, such that the cutlength
decreases, i.e the cutlength of the new deductjon is less than s(A).
If the deduction ends with a cut on a prime formula, we use essentially the
same transformations as in Gentzen's procedure; and if the cutformula is not
atomic, we use inversion lemmas which permit us to replace the cut by cuts
of lower rank. The Cut rule we use is context-sharing (for the reason behind
this choice, see the remarks in the next section).
Then we define a transformation "Red" on arbitrary deductions by recur-
sion on the construction of the deduction; this operator removes all uppermost
cuts, i.e. all cuts without cuts above them.
NOTATION. Let us write D Hdn F A if D proves F A with depth < n,
cutlength < d. r A if such a D exists.
5.1.5. The rules of >G3c plus context-sharing Cut can be stated as
r, P P, for P atomic, all d and m
1-`71,2 F, A B, F-FA, A 1-'4, r,B A
r A > B, A F, A -4 B A
In addition we have Cut:
1-1,2 r A, A r, A A
Ld+deg(A) r A
1-m+1
As already noted, the Cut rule is context-sharing. The reason for this is that
with ordinary Cut, the transformations of deductions of I' A used yield
deductions of sequents A' where contraction would be needed to get
r A back; and we have depth-preserving closure under contraction for
deductions without Cut, but not when ordinary context-free Cut is present.
By the use of Cute, the need for contraction is avoided (moreover, depth-
preserving contraction is derivable for the system with Cut).
We need the following results:
Do
rA B r ABA
CUtcs n
A
5.1. Numerical bounds on cut elirnination 151
5.1.6. LEMMA. (Weakening, Contraction, Inversion lemma for --+G3c)
Iff-1 A then1-1 F, A
if F1, AL'A' then AA';
if 1-1 , A --+ B then 1-1, F =- A, A, F-cn) F,B A;
if 1-1 r A*B,,6, then Pr), r,A B, A.
PROOF. This has been established before.
5.1.7. LEMMA. (Cut elimination lemma for --+G3c)
If r P, A and1-1 F,P =- A then1-4., F A;
A-+ B,A and F-;,' I', A --+ B then F-sn(+ts(B) r A.
PROOF. (i) Let two cutfree deductions
D'
FP,L r,P
be given. We prove (i) by induction on n + m.
Basis. n + m = O. V', V" are axioms. If P is not principal in either D' or
V", then also r A is an wdom, so r A. If P is principal in TY and
D", then r r',P and PP PA, and D" becomes r'PP A. One of the
occurrences of P in D" is not principal, so rip A is also an axiom, hence
again F-8 A.
Induction step. If n +m = k +1, then at least one of D', V" is not an axiom,
say D'. If D' ends with L-4, then r A-B, and we have deductions
Do F-t_i I" APA, D1 h1 riB PA; by the inversion lemma, we also
have deductions D2 I-1, AA, D3 hs, r'PB A. Combining Do with
D2, D1 with D3, the IH yields AA, A; with L->
it follows that 1-4,7i PA-4B A. The case where D' ends with R-4 is even
simpler.
As to (ii), let D' A-4B, and D" r, A->/3 A. By the
inversion lemma there are Do 1", A B, z, D1 r A, A, D2
r,B A; then
Hsrz(-EA1 r BA h?'173 A Cutes
s(A)+s(B) r A
where DI is obtained by weakening all sequents in D1 on the right with B
(weakening lemma).
152 Chapter 5. Bounds and permutations
5.1.8. THEOREM. (Numerical bounds on cut elimination, classical case)
In --*Gl3c + Cut, if F-47., F A, then P24Fi r A;
for each V in +G3c + Cut there is a cutfree I,* with the same
conclusion, obtained by eliminating cuts from D, such that
ID*I + 1)2c1(D);
for each V in G.3c + Cut there is a cutfree D* with the same
conclusion, obtained by eliminating cuts from D, such that
IV* 1 (11,1+ 1)2P1+1)2cr(D).
PROOF. (i) We define a transformation Red on deductions 7, as follows.
V is an axiom: Red(D) := D.
V is obtained from cutfree Do, D1 by a cut. By the cut elimination
lemma we construct a new deduction Red(D) with cl(Red(D)) < cl(D). Also
IRed(D)I < 2IDI + 1 which may be seen by inspection (n + 2 < n + (n + 1)
since n > 0).
7, is obtained from other deductions Do, or from Do, D1, by a logical
rule or a cut which is not a top cut. Then Red(D) is obtained by applying
the same rule to Red(D0), or to Red(D0), Red(DO
(ii) follows from (i) by iteration. As to (iii), let D r A. Then cl(D)
< p(n +1) where pis the maximum size of cutformulas in D; p < 2(V), hence
cl(D) < 2"(v)(IDI + 1).
5.1.9. The inversion-rule strategy for intuitionistic implication logic
In principle, the same strategy works for intuitionistic --+GICi + Cut, but
we now have much more work to do since we do not have such strong inversion
properties as in the classical case.
5.1.10. DEFINITION. Let the weight w(A) of a formula A be defined as in
4.3.2. We define the cutweight cw(D) of a deduction D as the maximum of
E{w(A): A occurrence of cutformula in o-},
o- ranging over the branches of D.
The notion of weight has the property
w(A B) + w(B > C) < w((A B) C)
since, if a = w(A), b = w(B), c = w(C), we have 1+ab+1+bc = 2 + (a + c)b
< 2 + abc (since a, b, c > 2) < 1 + c + abc = 1+ (1 + ab)c. Moreover we recall
that
w(A) < 2'(A) <2211.
5.1. Numerical bounds on cut elimination 153
5.1.11. DEFINITION. We define Hmd r A, "r A is derivable with depth
at most m and cutweight at most d" as follows:
F- r,pp for P atomic, all d and m
F- (4, F , A B 1-`,1nr, A > A A --+ B, B C
F-ln+, A > B F , A B C
F-crin r A prin r, A B
i_d-Fw(A) Bnm+1
Note that the Cut rule is context-sharing (as in the classical case), and that
moreover we have chosen a variant of L-+ where the principal formula A B
occurs in the antecedent of both premises (cf. 3.5.11). The reason for the
choice of context-sharing Cut is the same as for the classical case. On the
other hand, we might have used the ordinary L-4 for G3i, but then we
must prove a slightly stronger form of depth-preserving contraction, namely
that depth-preserving contraction is also derivable in the presence of context-
sharing Cut.
5.1.12. LEMMA. (Weakening, Contraction and Inversion for -4G.Ki)
HE-% r A, then I--? r, A;
r, A, A B, then 1-1 l', A B.
If B, then F-°r,A B;
If h% r, A -4 B C, then I--? r, B C.
.1f1-1 r, (A -4 B) C D, then r, A, B C D.
PROOF. We use induction on m. Proofs of the first four statements have been
given before (see the end of 3.5.11). As to the last statement, let us consider
two typical cases. Assume (A --F B) --> C to be principal in the final step of
the deduction of 1--% r, (A -4 B) C D. Then
r, (A -4 B) -4 C A -4 B
1--?i I', A, (A-4B) C B
Inv
r, A,A,B>CB IH r, (A > B) C,C D
r, A,B>CB Leb1 r, A, B --> C, C D
L-4
154 Chapter 5. Bounds and permutations
In this "pseudo-prooftree" the dashed lines indicate transformations of de-
ductions given by the lemmas on weakening ("LW"), contraction ("LC") and
inversion ("Inv") as well as the IH.
If (A B) C is not principal, 1-m° r, (A -+ B) C D follows
from a one-premise rule or a two-premise rule with (A B) C in the
context. We consider the case of the one-premise rule; the case of the two-
premise rule is similar. So let hm° r, (A B) --+ C D be obtained from
H1 I'', (A --+ B) D'. Then
F', (A B)-+C D'
IHF-?, I'', A, B CD'
F-1) A'
where C in the statement of (ii) is A > A', then
5.1.13. LEMMA. (Cut elimination lemma for -+GKi+ Cutcs)
If F--(n) r P and F- P B, then r B.
P B --+ B =C, andm <n, then Pa r
C.
If1-1,P=P-->B andl-,?ir,BC and F-,9 r,P--+B=P andm< n
thenl-Z2+1 r C.
If r (A > B) --+ C and F- (A > B) > C D, then
F+m+2 r D with d = w(A > B)+ w(B --+ C).
PROOF. (i) is proved as before.
(ii) and (iii) are proved simultaneously by induction on m. The case where
m = 0 we leave to the reader.
Induction step for (ii): Assume F-y,-> B, 7 )I--°mF,P B C.
Let us first assume that P B is principal in the last rule of D. Then we
argue as represented schematically below (first step on the left by (iv) of the
preceding lemma):
F-(71 r P B B
PIH(iii)r
If D ends with an application of R-+, say
r, A, P --> B A'
5.1. Numerical bounds on cut elimination 155
A P B LW F, A, P --+ B A'
IH(ii)
F-n+m-1w(B) F A A'
R-+
F-wn4), F A A'
Finally, let FIT,F, P -+ B C follow by L-4, with principal formula A --+ A'
distinct from P -+ B, so F F', A -+ A'. Then
F P-4B
F-cn' F, A' P-il3 LW r, A' ,P-4B C
IH(h)
and
1-wP)-1 r A' Cn+m
r P-43 F, P-/3 A
i_vv(B)
-1
p A
n+m
and the conclusions may be combined by
and
r A i-wnj:2-1 r, A' C
IH(ii)
L-4
F-,v4 r c
Induction step for (iii): Suppose I-I., r P F, B C and D
r,P --+ B P, m < n. Suppose P > B to have been principal in the last
rule of 7,, then
Ejni r r, B c B P
From this obviously I-V1 r C. Now let the final rule of D be L> with
principal formula A --> A' distinct from P --+ B and let F r', A>A1. Then
F-(7.1 P B
LW
B C
r, A' P B I-1 I', A', B C P
IH(iii)
F-71 r, A' C
F-(n) r p B > B A
MOO
F-w(B) r A
IH(iii)
156 Chapter 5. Bounds and permutations
from which r A. Combining these with a final L-4 yield
F-w(B)n+m r c.-1-1
Induction step for (iv). Assume I--,?. r (A -+ B) -4 C, 1, F-om r, (A --*
B) -4 C D. The proof again proceeds by induction on m. We consider
only the inductive subcase where (A --* B) -* C is principal in the last rule
of D. Then
and
1-?, 1-' (A --* B) -4 C
1--?,,r,A-413 C Inv
Inv
1-,?,, P, B C
R--F-0 rB->Cn+1
Flir (A > B) -4 C
I--?, I', A -- B C
111v
1-t_i f, (A -+ B) --* C A --* B
I-?n_i f, A, (A > B) -+ C B Inv
1---1 r, A, A,B>CB 'Mr
Im?_]. I', A, B --* C B LC
F-1 r,B > C A >BR-4
Cuthw(B-4c) r A > Bmax(n+2,m+1)
L..w(C)
' max(n+1,m) r7A--3.D
1-1 P, (A B) > C D
1--?n_i f, C D
1-';'1',A--.13,C DLW
Cut
which then may be combined by a final application of Cut with result
hnd+m+2 r D, where d = w(A-4B)-I-w(B-4C). N
5.1.13A. 06 Supply proofs for the missing cases in proof of the preceding lemma.
5.1.13B. * Check where changes in the axgument are needed if we replace L-+
of ->GKi by standard L-> of G3i.
5.1.13C. ** Let us write F-2, r t: A, where r is a sequence of typed variables
xi: Ai, ... , xn: An, if there is a deduction D in GKi with I'DI < n, such that under
the obvious standard assignment (cf. 3.3.4) of natural deduction terms to proofs in
GKi, D gets assigned t: A. Show the following
If F-g r, x: A, y: A t: B, then I-1 I', x: A t[x,y1x,x]: B.
If hg r t: A B, then t a- AxA.t' and Fi r, x: A * t': B.
If I-?., r, u: (A->B)->C * t: D, then there is a t' ../3 t[ulAxA--0 3 .zB4c(xyA)]
such that 1-s, r, y: A, z: B-W t': D.
5.2. Size and cut elimination 157
5.1.14. THEOREM. For deductions in --*G3i + Cut as described, we have
If f-1+1 F =- A then Fin+, F =- A;
for all D there is a cutfree V* with the same conclusion, obtained by
eliminating cuts, such that
1D*1 < + 1)2ew(1)).
For all D there is a cutfree D* with the same conclusion, obtained by
eliminating cuts, such that
1D*1 (1D1 1)2(11)1+1)22cr(D)
PROOF. It suffices to prove the theorem for This is because deduc-
tions in plus context-sharing Cut are easily transformed by dp-closure
under weakening into deductions in GKi plus Cut, preserving depth and the
measure for cuts. On cutfree deductions of the variant we can apply an inverse
transformation with the help of dp-admissible weakening and contraction.
(i), (ii) are proved as in the classical case: we define an operator Red on
deductions 1, which removes all top cuts from D in such a way that the
cutweight (instead of the cutlength, as in the classical case) is reduced. The
crucial case is the treatment of a top cut; for this we use the cut elimination
lemma, (i), (ii) and (iv).
As to the proof of (iii),
IV* < 2cw(D) (ID I + 1) < 2m(ID)I+1) (IV I + 1),
where m is the maximum weight of cutformulas in D, say m = w(A). We
observe that w(A) < 2s(A) < 22`r1v1 N
5.2 Size and cut elimination
In this section we present an example of an infinite sequence (Sn),, of sequents,
with deductions in GS3p + Cut of size linear in n, while any cutfree proof
of in GS3p has size > 2". In fact, the result will be slightly stronger than
just stated, since we shall consider a version of GS3p with the logical wdom
generalized to principal formulas of arbitrary logical complexity:
F, A,
We call this version GS3p*.
The result will entail a corresponding result for G3p[mi], also with the ax-
ioms generalized. As an auxiliary system we shall use the following "strictly
158 Chapter 5. Bounds and permutations
increasing" system G for classical propositional logic (which combines fea-
tures of GK- and GS-formalisms):
Ax F, A,
RV
F A
B'
AV B RAr'A A B, A F,AAB,B
FAV B F,AAB
In what follows we use the notations Is<n, HsS<n which have been introduced
in 3.4.3. The following lemma is easily established, and its proof left as an
exercise.
5.2.1. LEMMA. If GS3p* F-s<n r then G Hs<n F.
5.2.2. DEFINITION. We define a sequent Sn for each positive n as follows:
Sn := Tn) Fn+17 62 n+17
where
:= A1 A ,A+1 A B+1;
F0 := (P V Fn+1 := (Fn A (Fn+1 V Qn+i));
An+1 := Fn A 113n+1, Bn+1 := Fn A 'Qn-0.
For use later on we also define the following abbreviations for i < n:
Tn,i := Al A Bi, , A Bi], Ai+1 A Bi+i, , An+1 A Bn+1,
So := Tn,i, n+1, Qn+1
It is not hard to see that Sn must be valid for all n: note that Sn+i is equivalent
to ,(A1 A BO A ... A ,(An+1 A Bn+1) Pn+1 V Qn+i, and that --i(A1 A BO is
equivalent to P1VQ1, ,(AiABi) is equivalent to Ai<k<i(PivQi) --+ Pi+1VQi+1
The validity follows more formally from the arguments below.
To simplify the proofs of the next few lemmas, we observe that if we can
produce a derivation using instead of RA the more general rule
r, I'', A I", r", B
F, ri,r", A A B
which generalizes both the context-sharing and the context-free versions of
RA, there is a derivation of the same size in GS3p*: simply use the closure
under weakening to transform a proof using the hybrid rule into a proof using
only the context-sharing RA.
In the remainder of this section until the final theorem we consider only
cutfree proofs in G.
5.2. Size and cut elimination 159
5.2.3. LEMMA. In GS3p* there are a cutfree deduction Dk of size 7 of
Ak+1 A Bk+i, Plc+1)Q1c+1,
and a cutfree deduction £k of size 10 of
---Fk, Ak+i A Bk+1, Fk+1.
PROOF. We take for Dk
Fk -1Fk, Pk+17 -1Fk, Fk 1-Fkl(2k-1-1)-7Qk+1
Ak+11 Pk+1 1Fk, Bk+1,Q1c+1
Ak+i A Bk+17 Pk-1-1,Qk+1
and for £k we take
plc
Ak+1 A Bk+1, Pk+1,Q1c+1
-1F,,, Ak+i A B,,+1, Plc+1 V CA-F1
Ak+1 A Bk+1, Fk+1
5.2.4. PROPOSITION. Sn has a deduction in GS3p* + Cut of size lln +10.
PROOF. We first construct a deduction .7; (with cuts) of size lln + 2 of
Ai A B1, . , An A Bn, Fn
We use induction on n. The basis case for n =
Fo
has size 2, and once .Fn of size lln + 2 has been obtained, we find .T92+3. as
Fn
Ai A Bi, , An A Bn, Fn An+1 A Bn+i, Fn+1
A1 A , An A Bn, An+i A Bn+i, Fn+1
Cut
which then has size lln + 2 + 10 + 1 = 11(n + 1) + 2. Now take for the
deduction of Sn
Fn Dn
Fn, A1 A B1, , An A Bn -7Pn, An+i A B+1, Pn+i, Qn-Fi
Sn
with size lln + 2 + 7 + 1 = lln + 10.
5.2.5. DEFINITION. A cutfree deduction D in G is called strict, if along any
branch of 7, no formula is introduced more than once.
160 Chapter 5. Bounds and permutations
5.2.6. LEMMA. If D is a [strict] cutfree derivation of I', A, A with s(D) < n,
there is also a [strict] cutfree derivation D' of I', A with s(D') < n.
PROOF. Straightforward by induction on the size of D; since the conclusion
in the rules of G is always contained in the premise(s), we can delete an
occurrence of A throughout the deduction; strictness is not affected by this
operation.
5.2.7. LEMMA. (Inversion in G) Let DI-s<7, I', A, and A not be principal in
an axiom, then
if A BAC then there are deductions D' 1-s<r, , A and D" r, B,
if A BVC then there is a deduction D' 1-5<7,F, A, B.
Strictness is preserved in the construction of V', V" from D.
PROOF. Assume D hs<7, r, A A B, where A A B is not principal in axioms of
D. We use induction on the size of D. If D is an axiom, AA B is not principal,
so I', A and I', B are again axioms. If the last rule in D introduces A AB, D
has immediate subdeductions DA, DB deriving r, A A B, A and I', A A B, B
respectively.
Apply the induction hypothesis to DA, this yields a proof of r, A, A; then
appeal to closure under contraction, etc.
If D ends with another rule, not introducing A A B, we apply the induction
hypothesis to the immediate subderivation(s).
Case (ii) of the lemma is proved similarly.
5.2.8. LEMMA. HD Fr, I', there is a strict D' such that D' 1--s<r,
PROOF. We show how to reduce the number of violations of strictness in D.
If D is not strict, there are a formula A and a branch a in D such that A is
introduced at least twice along u. Let us consider the two lowest introductions
a and f3 of A in u, and assume A BAC (the case A E BVC is similar
but simpler). If a passes through the left premise of the lowest introduction
of a (the case of the right premise is symmetric), D has the form
D2 e2
B A C, B , B F2, B A C, B C
F2, B A C, B
D1 C1
Fi,BAC,B ri,B c,c
rl,B c
pc,
with a passing through r2, B A C, B and r1, B A C, B, and no introductions
of B A C along a in D1 and Do. By closure under contraction we find from
5.2. Size and cut elimination 161
7,2 a A such that
TY2 F-s<s(D2) F2, B A C, B.
Now replace the subdeduction with conclusion 1'2, B A C,B in D by A.
The resulting proof has fewer violations of strictness and is smaller than D.
Repeating this we finally arrive at a strict proof TY with s(D') < s(D). E
5.2.9. DEFINITION. If a formula A is not principal in the axioms of a
deduction D, and A is nowhere introduced in D, we say that A is passive. E
The following lemma is immediate.
LEMMA. If D 1,< F, A with A passive in 7,, then D[A]s- s<n r, where
D[A] is the deduction obtained by deleting one occurrence of A from all
sequents in D.
If a strict D ends with an introduction of A, and A is not principal in any
axiom of D, then A is passive in the immediate subdeductions of D.
5.2.10. LEMMA. In any deduction of Sn, Sn,, the formulas Ak A Bky Aky Pk,
Fk, Pk V Qk cannot occur as principal formula in an axiom.
PROOF. Each of the subformulas listed has only positive occurrences in the
sequent Si,, Sn, which means that everywhere in the deduction they can only
occur positively. N
5.2.11. LEMMA. Let 1 < i < n. If hs<n Sn+Li then 1s<n Sn
PROOF. The rules and axioms in a cutfree deduction of Sn+i,i can use only
subformulas of Sn+Li. On multisets of subformulas of 5n+1,i we define, for a
fixed i, 1 < i < n + 1, a mapping * which is essentially nothing else but the
erasing of Pi, Qi everywhere. For the empty multiset A we put
A* := A,
and for the singleton-multisets, which we identify with formulas, we put
L* := A if L E {Pi, Qi, L* L for other literals L;
(Pi V Qi)* := A, * is the identity on other disjunctions,
:= Fk for k <i, Fi* := Fi-i, Fr:+1 := PI A (Pk V Qk) for k >
:= A Pk, B; := Fi*,`_]. A --1(2k (k i);
(Ak A Bk)* := A BZ (k i).
Finally, for multisets of arbitrary size we put
(r, AY := r*, A*.
162 Chapter 5. Bounds and permutations
Assume A to be a strict cutfree deduction such that 1, S,i. We trans-
form 1, into a deduction D*; we do this by defining * on subdeductions of V,
using recursion on the depth of D.
Any subdeduction with one or more of Pi, Qi, Pi V Qi in the conclu-
sion is mapped under * to the empty deduction. Observe that introductions
of Pi V Qi, and axioms with Pi, 43, as principal formulas can occur in 1, only
above introductions of F, hence they will be discarded.
Axioms F not having Pi or Qi as principal formula are translated into
axioms F*.
Subdeductions of the form
and
7,2
Fi, Fi_i A,F,PvQi
A, Fi
Note that the whole subdeduction on the right is deleted by the process, in
keeping with the fact that such subdeductions are mapped to the empty de-
duction. In D1 the formula Fi is passive, since D1 is part of a strict deduction
and F., cannot be principal in an axiom (5.2.9). This property is preserved
under *.
(iv) In all other cases
is translated as
A/ is translated as pi*
A A*
The resulting structure is a correct deduction, since axioms, when not dis-
carded, are translated into axioms, and applications of rules are translated
into correct applications of rules. We end up with a deduction of
A1 A B1, . , Ai_i A Bii, AL-1 A B:+i, . . , An*+2 A Bn* +2, '13n+2, Qn+2.
By renaming propositional variables Pk+i Pk, Qk+11-4 Qk (k > i), leaving
the rest invariant, we obtain a deduction of size < n of Sn+1.
5.2.12. PROPOSITION. If D is a cutfree derivation of Sn, then s(D) > 271+1
for all n > O.
*are replaced by D[F*]1
PROOF. Since So A1 AB1, P1, Qi is not an axiom, any proof of this sequent
must have size > 2.
5.2. Size and cut elirnination 163
Assume now the statement of the theorem to have been proved for Sn. Let
To be a strict cutfree proof of 5n+1, i.e. of
A1 A , An+2 A Bn+21Pn+2) Qn+2.
must necessarily end with the introduction of Ai A B, for some i. We
distinguish two cases.
Case I. 1, ends with the introduction of An+2 A Bn+2, so there are D A,D B
such that
VA 1-s<rn Yn, An+27Pn+2762n-1-2, DB Hs<rn, Tn, Bn+2, Pn+2 7 Qn+2,
s(D) m m' +1.
In DA the formula An+2 cannot be principal in an axiom (lemma 5.2.10) hence
by lemma 5.2.7
Hm Tn, F+1, Pn+2, Qn+2,
Since P+2,n+2, Qn+2 do occur only once in this sequent, they cannot be principal
in axioms, hence F-s<rn Tn Fn+i i.e. hs<m Tn, Fn A (Pn+1 V Qn+i); since Fn
and Pn+i V Qn±i cannot be principal in axioms, we find, again by lemma
5.2.7, that there must be a deduction showing Hs<rn Tn, Pn+17Qn+1. Since
Ta, Pn+i, Qn+A. is Sn, we find by induction hypothesis 2n+1 < m, and similarly
we find 2n+1 < MI, so s(D) > 2n+2.
Case 2. 7, ends with the introduction of Ai A Bi, i < n. Then there are
DA,DB such that
VA Hs<m Tn+1,i) Ai) Pn+2, Qn+2, DB hs<mi Tn+1,i, Bi, Pn+2, Qn+2,
s(D) m + rn' + 1.
Since Ai cannot be principal in an axiom, we find by lemma 5.2.7
H s<m Tn+1,i, Pn+2,Qn+2) i.e., hs<rn 8n+1,i
With an appeal to lemma 5.2.11, we see that hs<rn S,, hence 2n+1 < m.
Similarly 2n+' < m' by consideration of DB, hence-again s(1,) > 2n+2.
5.2.13. THEOREM. In GS3p* + Cut there is a sequence (Sn)n with de-
ductions Dn of s(V) linear in n, while any proof of Sn in GS3p* has size
2n; a corresponding result holds for G3[mi]*, i.e. G3[mi] with the axiom
generalized to A A for arbitrary A.
PROOF. The statement for the classical system is immediate form what has
been proved before. To prove the statement for the intuitionistic systems,
we use a lemma. Let Ac be the standard translation of A into negation-
normal form, that is to say, we first replace subformulas B C by V C
and then push negations inward until they appear in front of prime formulas
164 Chapter 5. Bounds and permutations
only; finally we delete occurrences of For sequents we put (F Ay :=
Ac. Then one easily checks by induction on size of deductions that if
(*) G3m I-5<n F A then GS3p* Hs<7, (r A)c.
Now we define
Pn+i V Qn+1,
where
:= 1V B , Al1 V B:,+1;
Fo := P), Fn+1 := (Fn A (Pn+i V Qn+i));
A'n+1 := F --+ Pn+1, B41 := Fn + n+1.
Noting that (S,)c Sn, we see that the result follows from (*) and the result
for the classical system.
5.2.13A. 4 Prove lemma 5.2.1.
5.2.13B. 4 The deductions in 5.2.4 are easily transformed into deductions in
GS3p (with axioms with atomic principal formulas only). Determine the size of
the deductions of Sn in GS3p.
5.2.13C. 4 Describe cutfree proofs Dn for S, (as defined in 5.2.13) in G3m*
such that the depth of Dn is linearly bounded in n.
5.3 Permutation of rules for classical logic
S. C. Kleene has analyzed in detail for the calculi Glc and Gli when two
successively applied rules of the sequent calculus may be reversed in the order
of their application. A similar analysis applies to GS1. In this section we
want to give the analysis for GS1 and Glc; the next section will deal with
G1i.
But first of all we need a precise definition of the notion of permutability
of rules.
5.3.1. DEFINITION. (Permutability of rules in Gentzen systems) Let us
call two logical inferences adjacent if they are separated by applications of
structural rules only.
Rule R is said to be permutable below (or permutable down over) rule R',
if the following holds: for all inferences a E R, ß E R', a adjacent to and
above 0, such that
5.3. Permutation of rules for classical logic 165
the (descendant of the) principal formula of a is not active in
a has as premises a set of sequents A, the conclusion of a yields after
some structural inferences a sequent S, [3 takes premises from {S} U B
(B is possibly empty) and yields a conclusion S',
there is a deduction of S' from A U B in which one or more applications
of R', preceded by (zero or more) structural inferences, occur above and are
adjacent to an application of R, which is followed by (zero or more) structural
inferences.
In the remainder of this section, "inference" will always mean "logical in-
ference".
Let us consider an example in Glc. A deduction
(A A B)n, A, F A
(AA B) F,AABLX LA
1-",AABCD,A/R">
can be rearranged as
(A A B)n, A, F A
(A A B), c A', D
(A A B)n,A,P C
LA
(A A B),A A B,r1 C
AAB,r1
This shows that LA can always be permuted below R>. On the other hand,
the sequent VxA(x),3x(A(x) 1) has a derivation with L3 below LV:
Ax Ax
Ax, Ax >
VxAx , Ax -4 1
VxAx,3x(Ax > 1)
but there is no deduction where the application(s) of L3 appear above LV.
We now turn to the study of permutability for GS1.
5.3.2. LEMMA. (Permutation lemma for GS1) R can always be permuted
below R' except when R = R3, R' = RV.
PROOF. We give the schemas for permutation of R over Dn for a formula
D means n copies of D. r is the set of active formulas for the rule application
a E R, and A is a set of formulas which after applying some structural
(Structural rules transform
F into ri,C; A into A', D;
and (A A B) , A A B into
AA B.)
166 Chapter 5. Bounds and perrnutations
rules become A', the active formulas of the inference ß E R'. e is a set of
passive formulas changed by structural rules into e'. A double line marks the
application of zero or more structural rules.
One-premise rule over one-premise rule:
rAnAe
AAnAe
AA'01
ABe'
becomes
One-premise rule over two-prem,ise rule:
AnFAe
AnAAe
AB& ACe'
A(B A C)CY
becomes
Two-premise rule over one-premise rule:
A(A A B)nA8 B(A A B)nA8 a
(A A B)n+1,603
(A A B)Z1/19'
(A A B)Ce'
becomes
Two-premise rule over two-premise rule:
(A A B)nAAe (A A B)BAe a
(A A B)+1Ae
(A A B)C0' (A A B)1316'
(A A B)(C A D)6'
becomes
(A A B)nAáe (A A B)De' (A A B)nBAID (A A B)DCY
(A A B)n+1ACCY (A A B)+i ADei (A A B)+1 BCe' (A A B)n+1B De'
(A A B)n+1A(C A D)8' (A A B)n+1B(C A D)8/ a
(A A B)n+2(C D)®'
(A A /3)(C A D)8'
FAnAe
FAnAV
rAnBe' o
AAnBe'
ABO'
AnFAe ACe'
AAnrBe' AnAFCe'
An+1F(B A C)8'
An+2(B C)6' a
A(B A C)8'
A(A A B)nA8 B(A A B)nAID
A(A A B) 'e' B(A A B)nAICY
A(A A B)nCe' B(A A B)nCe' a
(A A B)n+1Ce'
(A A B)C8'
5.3. Permutation of rules for classical logic 167
5.3.3. DEFINITION. (Partitions, order-restriction) Let D be a deduction of
a sequent S. Let , C be a partition of all occurrences of logical symbols
in S into classes; a class Ci is said to be higher than Ci iff i < j. The partition
is admissible if it satisfies the following two conditions:
If c is a symbol occurrence within the scope of another symbol occur-
rence c', then c and c' are either in the same class or c is in a higher
class than c'.
If ac, ß are the rules corresponding to occurrences c, e' respectively,
c' is not within the scope of c, c is an occurrence of ], and e' is an
occurrence of V, then c is in the same or a higher class than c'.
We shall say that D satisfies the order-restriction (corresponding to the given
admissible partition) if in any branch of D no inference a occurs above an
inference de if a corresponds to a symbol occurrence in a lower class than the
symbol occurrence corresponding to )3. E
5.3.4. LEMMA. (Bottom-violation) Let D be a deduction in which at most
the final logical inference a has an inference [3 above it which belongs to a
lower class than a. Then we can rearrange D to obtain D' with the same
conclusion, without violation of the order-restriction, and with all logical
inferences in D' corresponding to logical inferences in D. If D appears as a
subdeduction of a pure-variable deduction Do, it can be arranged that the
replacement of D by D' results in a D'o with the pure-variable property.
PROOF. Let the grade g(D) of D be the number of inferences )3' above a
violating the order-restriction. Apply induction on the grade. In case g(D) =
0 we are done. So let g(D) = n + 1, and let /5' be the lowest inference violating
the restriction relative to a; then ß must be adjacent to a, and a, ,8 introduce
distinct formulas which do not overlap (i.e. neither is a subformula of the
other). Now we can permute )3 below a. The only situation where this is not
possible is are precisely the ones not causing violation of the order-restriction
(part (b) of the admissibility condition). E
5.3.5. THEOREM. (Ordering theorem for GS1) Let D be a deduction in
GS1 and let an order-restriction relative to a partition of the occurrences of
logical symbols in the conclusion of 7, be given. Then we can transform D
into a deduction of the same sequent satisfying the order-restriction.
PROOF. Let the degree d(D) of D be the number of logical inferences a, such
that there is a logical inference Oci violating the order-restriction. For degree
0 we are done; so let d(D) = n + 1. We look for an uppermost a, with
a violating inference above it; we apply the bottom-violation lemma to the
subdeduction ending with a,. This reduces the degree.
168 Chapter 5. Bounds and permutations
5.3.6. THEOREM. Let A be a prenex formula obtained as the conclusion of
a deduction 7, in GS1. We can rearrange D to obtain a deduction TY such
that all quantifier-inferences come below the propositional inferences in any
branch of V'.
PROOF. We can distribute the symbols in A into two classes: C1 contains
all propositional operators, C2 all quantifiers. This gives rise to an order-
restriction meeting (a) and (b) of the definition.
5.3.7. THEOREM. (Herbrand's theorem) Let us consider predicate logic
without equality. A prenex formula B, say
B Vx]x'VyAy' A(x, ...),
with A quantifier-free, is provable in GS1, iff there is a sequent F consisting
of substitution instances of A of the form A(xi, ti, yi, si, ...) such that F is
provable propositionally and B can be obtained from F by structural and
quantifier rules only.
PROOF. A proof was already sketched in 4.2.5. We can now obtain a proof as
a corollary to the ordering theorem. Applying the ordering theorem for GS1,
we can achieve that all quantifier rules are applied below all propositional
rules in the derivation of B. So the final part of the deduction derives the
formula B from the sequent corresponding to the disjunction D using only
RV, R3 and contractions (there is obviously no need for weakenings). N
REMARK. If the prenex formula B is of the form 2xVyA(x, y), A quantifier-
free, I' may be assumed to have the following form:
A(to, Yo), , A(tn, Yn)
where the ti are such that Vi i;Z FV(ti) for i > j. This is because the first
logical inference must be RV, to be applied to an A(ti, Vi) such that yi does
not occur in ti for any j. So let us assume i = n. By the ordering theorem,
we may assume without loss of generality that this is followed (if necessary
preceded by some contractions) by R3 on VyA(tn, y), producing 3xVyA. Then
the next step must be RV again, applied to some yi, say yn-1, such that yi
does not occur in any tp for p < n, etc.
A similar analysis applies to the more complicated case of B E Vx3yVz
A(x, y, z), A quantifier-free; in this case r may be assumed to have the form
(*) A(xo, to, ZO), 7 A(Xi7 ti7 zi), A(Xn7 447 zn)1
where z Ø FV(ti) for j < i. Without loss of generality we may assume that
in the tn no variables occur except the xi and the yi.
5.3. Permutation of rules for classical logic 169
5.3.7A. 4 Prove that the conditions on F are necessary and sufficient to guarantee
that Vx3yVzA can be derived from (*).
5.3.7B. 4 Let F be the sequent
A(to(xi), xo, so Yo), A(t1(x2), x, si(Yo),Y1),
.A.(t2(X3), X2, 82(y1)) y2), A(t3, X3, 83(y2), Y3))
with A quantifier-free. All xi, yi occurring in the tk,sk are shown. Derive from r the
prenex formula 3uVx3yVyA(u, x, y, y). (This example shows that the dependence
of the terms on the variables in the Herbrand disjunction can become complicated
for the case of more than two quantifier alternations.)
We turn now to the formulation of the ordering theorem for Glc. The
proof runs largely parallel to the proof for the one-sided calculus GS1. The
definition of partitions and ordering condition are practically the same as for
GS1, except that the second condition (b) in the definition of admissible
partition has to be adapted:
5.3.8. DEFINITION. (Partitions, order-restriction) The definition runs as
before except that the second restriction in the definition of admissible par-
tition is modified as follows:
(b) If are the rules corresponding to occurrences c, c' respectively, c'
is not within the scope of c, a, is an occurrence of LV or R3, and is
an occurrence of L3 or RV, then c is in the same or a higher class than
e'. N
5.3.9. NOTATION. We may think of a sequent A1, , An B1, . ,
as a multiset of signed formulas tAi, .. , tAn, fBi, , fBn. We write for
sequents simply S, S', T, T', U, U',.... If S := r A, S' := A', then
SS' := AA'. We write s, s' for arbitrary signs from {t, f}. So sA may
stand for tA or fA.
The use of signs can be avoided in the classical context (e.g. by using one-
sided sequents), but is especially useful in the intuitionistic case.
REMARK. Since in A Ai > V Bi the Ai occur negatively and the B; posi-
tively, it might seem more natural to use +, for f, t. But f, t are customary
(and natural) in semantic tableau theory (4.9.7), and we have adopted the
same notation here.
170 Chapter 5. Bounds and perrnutations
5.3.10. LEMMA. (Local permutation lemma for Glc) In the calculus G1c
rule R is always permutable below R' in pure variable deductions except when
R E {I,V, R3}, R' E {L3, Rb}.
PROOF. In the following general transformation schemas involving two-
premise rules we adopt as notational conventions: sA, s'B are principal in
R, R' respectively; the letter S is reserved for sequents of active formulas in
R, the letter T for sequents of active formulas in R'; the letter U refers to
passive sequents. Indices 1,2 refer to first and second premise; primes serve
to indicate the effect of structural rules, e.g. U' follows from U by structural
rules.
The schemas are quite similar to the permutation schemas for GS1. The
principal reason for exhibiting them in full is that we want to be able to refer
to them in the case of G1i in the next section.
One-premise rule over one-premise rule:
S(sA)nTU
(sA)(sA)nTU R
(sA)T/U1
(sA)(s'B)U/ R
Two-premise rule over one-premise rule:
Si(sA)nTU S2 (sA)nTU
(sA)(sA)nTU R
(sA)T'U'
(sA)(s'B)U/ R
S(sA)nTiU
(sA)(sA)nTiU R
(sA)Ti'U/ (sA)T2U/
'
(sA)(s/B)U1
R
becomes
becomes
One-premise rule over two-premise rule:
becomes
S(sA)nTU
S(sA)nT'U'
S (s A)n (s' B)U/ R
(sA)(sA)n (s/ .13)U1 R
(sA)(s/B)U'
Si(sA)nTU S2(sA)nTU
Si(sA)nT/U/ S2 (sA)nT'U'
Si(sA)n (81.13)U/ Ft' S2(sA)n (s/ .13)U1
(sA)(sA)n(s/ .13)U'
(sA)(s'B)U'
S(sA)nTiU (sA)T2U/
S(sA)(sA)nTiU/ S(sA)(sA)nT2U/
R'
S(sA)(sA)n (s/ .13)U1
(sA)(sA)(sA)n (s/ B)U/ R
(sA)(s'B)U/
Two-premise rule over two-premise rule:
Si(sA)nTiU S2 (sA)'2TiU
(sA)(sA)nTiU R
(sA)T1EP (sA)T2Er
R'
5.4. Permutability of rules for Gil 171
becomes
Si(sA)'TiU (sA)T2U/ S2(sA)'2T1U (sA)T2UI
Si(sA)(sA)'2TIU' Si(sA)(sA)'T2U1 S2(sA)(sA)'T1U' S2(sA)(sA)'2T2U/
' 'Si(sA)(sAr (s' B)U' R S2 (sA)(sAr (s' BP R
(sA)(sA)(sA)'2 (s1.13)U'
(sA)(s/B)U'
In the case of quantifier rules being involved, we have to check whether the
conditions on variables remain satisfied after transformation. This turns out
to be the case except in the cases listed above. For example, if R = RV, R' =
LV, the variable condition on the given piece of deduction requires that TU
does not contain the proper parameter y of the R-inference free; this remains
correct since new variables introduced by weakening in U' must be distinct
from y in a pure variable deduction. The counterexamples are:
LV over RV: VxAx Vx(Ax V B),
LV over L3: VxAx, 3x(Ax --+ I) ,
R3 over LA: 3x(Ax A B) ]xAx,
R3 over RV: 3xAx,Vx(Ax + I).
The second example has been discussed before.
5.3.10A. A Show that the counterexamples in the preceding proof are indeed
counterexamples.
REMARK. All these examples are "absolute" , that is to say in each case there
is a deduction of the provable sequent with R over R', but no deduction where
all occurrences of R' are over R, separated by structural rules only. Giving
relative counterexamples, where the given sequent can be derived from some
other given sequents with R over R', but not with R' over R, is easier. The
following describes an application of the permutation theorem for Glc.
We can now prove a "bottom-violation lemma" and an "ordering theorem"
exactly as for GS1.
5.3.11. THEOREM. The ordering theorem holds for G1c (cf. 5.3.5). Z
5.4 Permutability of rules for Gli
As in the preceding section, "inference" is short for "logical inference" =
application of a logical rule. Permutability of rules has already been defined
in 5.3.1.
172 Chapter 5. Bounds and permutations
5.4.1. LEmmA. (Local permutation lemma) In pure-variable deductions in
Gli, R is permutable below R' except in the following so-called forbidden
cases:
LV Lb', R3 L> R+, RA, RV, RV, R3
R' RV L3 R> LV
PROOF. Observe first of all that certain combinations of rules need not be
considered, due to the intuitionistic restriction on sequents. In particular,
permutation of a right rule below another right rule is not possible, since the
definition of permutability of rules will never apply: the principal formulas
concerned are nested. For the rest, the proof in this case follows the general
pattern of the proof in the classical case, but now we have to check the
intuitionistic restriction on the succedent, and moreover must pay special
attention to the L--* rule since the A appears only in the second premise.
Let us check the intuitionistic restriction for the case of a 2-premise rule over
a 1-premise rule. Let us first observe that in the transformations indicated for
the classical case, the structural rules leading from U to U' may be postponed,
in the transformation, till after the application of R shown.
Difficulties can arise, if among the structural rules applied below R in the
given deduction there is an application of RW serving to introduce a positive
formula serving as an active formula for the next R'-application. (If the RW
concerns U, the discussion is usually simpler.) If this is the case, sA= A,
(71U)+ = A. This application may become incorrect after transformation if
Si or 82 contains a positive formula, which is only possible if R = L>, when
Si consists of a positive active formula. The following R'-inference can be
RV, R3, RV (for L-4 over R-4 nothing is claimed).
Let us consider the case of R' = RV. Then we transform as follows.
becomes
FA F,B
I'', A *B C
r',A>BCVD
r,B=-
r,B
becomes r A r,B C V D
r,A>B=-CVD
ri,A -4B CVD
A similar analysis applies for a 2-premise rule over a 2-premise rule. Consider
e.g. L--+ over L-4 with an essential RW in between.
A
I", A B C I'', A --+ B, D E
E
5.4. Permutability of rules for Gli
FA
F', (A * B)2,C )=- E
P,A-413,C>DE
etc. Counterexamples establishing the exceptions: for (R,R') = (LV,RV),
(LV,L3),(RA,L3) we can use the same examples as in the classical case. For
(L+,R) take A (A --+ 1) =. A B,
(L-4,LV) take A V B,A B B,
(RV,LV) take AVB A,
(RA,LV) take Ax V Ay 3zAz.
These examples are "absolute" in the sense that the provable sequents exhib-
ited simply have no deductions where all the R'-inferences occur above the
R-inferences. In the following cases we can only give local counterexamples,
that is to say the deduction deduces a sequent from some other sequents, such
that the permutation is impossible. The derivations
C, A B
DA+B
CVDA--*B
Ax
C VxAx D VxAx
CV E) VxAx
give counterexamples for the pairs (R,R') = (R-4,LV), (RA,LV), (RV,LV)
respectively.
5.4.1A. Show that the counterexamples for (L).,R-0, (L).,LV), (RV,LV),
(R3,LV) are indeed counterexamples.
The argument concerning possibly awkward cases of RW can also be dealt
with by considering only so-called W-normal deductions in Glii, according
to the next proposition.
5.4.2. PROPOSITION. Let D be a deduction in Gli. D can be transformed
into a deduction TY by moving applications of weakening downward such
that the order of the logical inferences is retained (except that some of them
become redundant and are removed), and such that weakenings occur only
immediately before the conclusion, or
to introduce one of the active formulas of an application of L-4, the
other active formula not being introduced by weakening, or
173
F', A * B,D E
CA C=B
CAAB
Cv.DAAB
174 Chapter 5. Bounds and permutations
(iii) for introducing a formula of the context of one the premises of a 2-
premise rule, the occurrence of the same formula in the context of the
other premise not being introduced by weakening (but not in the right
hand context of intuitionistic L-4).
As a result, any formula not just introduced by weakening can be traced to
an axiom.
PROOF. By induction on the depth of D. IE
5.4.2A. 4 Give details of the proof.
DEFINITION. A deduction D satisfying (i)(iii) of the preceding proposition
we call W-normal. El
5.4.3. DEFINMON. (Partitions, order-restriction) We copy the definition of
an admissible partition from the definition for Glc and GS1 in the preceding
section, but with the following modification:
(b) Let R, R' be the rules corresponding to occurrences c, c' respectively,
and let e' not be within the scope of c. In the following cases c is in the
same or a higher class than c':
5.4.3A. 4 If we relax (ii) in 5.4.2 by replacing "L>" by "L)., LV, L3", we
can achieve that the transformation from D to D' leaves the term denoting a
corresponding assigned natural deduction unchanged. Show that this may fail if
we do not permit LV, L.
The following lemma is easily proved.
5.4.4. LEMMA. Instances of a rule R adjacent to, and above, a rule R', can
be permuted if
RE {R-4, RA, RV} and R' = LV, and
over the other premise of the R'-instance (i.e. not the one deriving from
the R-application) either a weakening or another instance of R intro-
duces the active formula. El
"Permuted" is here meant in a slightly more general sense than in the defi-
nition, since in the transformation the rule introducing the active formula in
the second premise is also involved.
R LV LV, R3 L> L-4, RV, R3
R' RV L2 R* LV LEI
5.4. Permutability of rules for Gil 175
5.4.4A. 4 Prove the lemma.
5.4.5. LEMMA. (Bottom-violation lemma) Let 7, be a W-normal deduction
in which only the lowest inference violates the order-restriction relative to a
given partition. Then 1, can be rearranged so that the order-restriction is
met, and the resulting deduction is W-normal.
PROOF. Let 1, be given; we assume all instances of the axioms to be atomic,
and 1, W-normal. Let a be the last inference in D; a violates the order-
restriction w.r.t. a partition C1, , Ck. Then there is an inference ß adjacent
to a violating the order-restriction. As before we let the grade of 1, be the
total number of inferences violating the order-restriction relative to the lowest
inference. We show how to reduce the grade by considering cases.
Case I. The grade can be reduced by permuting 0 below a according to
the local permutation lemma, except when ß E {R+, RV, RA} and a E LV.
(Note that the other exceptions mentioned in the local perinutation lemma
cannot play a role since these cannot produce a violation by the conditions
on admissible partitions.)
Case 2. E RA, RV, R+, a E LV, and the principal formula A of ß in the
other premise of a introduced by weakening; we can then reduce the grade
by applying the special permutation lemma.
Case 3. ßE RA, RV, R--+, a E LV, and the principal formula A of ß in the
second premise of a not introduced by weakening. We have two subcases.
Subcase 3.1. A is also a principal formula in the second premise of a, and has
therefore been introduced by an inference 0' of the same type as 0, necessarily
belonging to the same class of the partition; then by the special permutation
lemma we can reduce the grade.
Subcase 3.2. A is not a principal formula in the second premise, and the
inference 0' above the second premise adjacent to a must in fact be a left-
rule application. Since A was not introduced by weakening, it follows from
W-normality that there is above /3' an inference of the same rule as the rule
of 0, introducing A in the second premise of a; then -y and ß belong to the
same class and it follows that 0' also violates the order-restriction, since a is
the only inference with respect to which violations occur. But then we can
apply the local permutation lemma w.r.t. /3' and a. N
We now get as before
5.4.6. THEOREM. The ordering theorem with order-restriction as defined
above holds for Gli (cf. 5.3.5).
5.4.6A. A (Herbrand's theorem for negations of prenex formulas in the language
without = and function symbols) Let B be a prenex formula
Vg03goVA.N.. ., ),
176 Chapter 5. Bounds and permutations
A quantifier-free, and assume I I- Then we can find a finite conjunction C
of substitution instances of A such that I I- and is provable from In
particular, if B 3iVil2E g , E) with A quantifier-free, the members of the
conjunction are of the form A(gi, Ei), where we may assume the ri to consist of
variables in {go, ... gn, Yo, (Kreisel [1958]).
5.4.6B. 4 For GU we define two classes of formulas simultaneously:
gamigAgivxgi3xgli,->g
where At is the set of atomic formulas, excluding I. D is called the set of hereditary
Rasiowa-Harrop formulas. Use the ordering theorem for Gli to show that if a
sequent G with F c 1), G E g is derivable in Gli, there is a deduction such
that (i) all sequents occurring in the deduction are of of the form G' with
c D, G' E g, and (ii) if the succedent formula G' is non-atomic, it is a principal
formula.
Try to give a simple direct proof of this theorem, not relying on the ordering
theorem. Note that (a) if we add T as a primitive with axioms T, we can add
a clause ga T , and that (b) actually the conditions mentioned in the local
permutation lemma already suffice.
5.5 Notes
5.5.1. Bounds on cut elimination. Tait [1968] explicitly states the hyper-
exponential bound on the depth of deductions for a one-sided Gentzen system
for classical logic. Girard [1987b] presents a detailed proof of the hyper-
exponential growth under cut elimination for Gentzen's system; the proof is
also given, with a slight emendation, in Gallier [1993]. Here we have lifted
the argument to G3-systems, thereby removing the need for distinguishing
between "depth" and "logical depth" of deductions.
Curry's proof (Curry [1963]) of cut elimination for G1i plus Peirce's rule
is analysed in Felscher [1975], who showed that Curry's procedure cannot be
formalized in primitive recursive arithmetic; Gordeev [1987] showed that a
different strategy, using appropriate inversion lemmas for a suitable system
with Peirce's rule, produces the same hyperexponential estimates as in the
case of the standard Gentzen systems. The better bounds for Ip obtained by
the inversion-rule strategy have been found by Hudelmaier [1989,1992]; the
exposition here is indebted to Schwichtenberg [1991], and hence indirectly to
unpublisfied notes by Buchholz. See also Hudelmaier [1993].
The result in 5.2 is a slightly modified version of the presentation in Fitting
[1996], which in its turn originated in a proof in Statman [1978], as simplified
by S. Buss and G. Takeuti.
5.5. Notes 177
An area which we have not touched upon in this book is complexity the-
ory for propositional and predicate logic. For an illuminating survey, see
Urquhart [1995]. From this it will be seen that seemingly slight modifications
in systems, which seem irrelevant from a general theoretical (metamathemat-
ical) point of view, may result in quite different behaviour from the viewpoint
of complexity theory.
5.5.2. Permutation of rules. The results in the sections on permutation of
rules are entirely based on Kleene [1952b]. In our exposition we have at one
point simplified Kleene's argument for the intuitionistic case. Curry [1952b]
discusses permutation of rules in classical Gentzen systems.
Already the proof of the "verschärfter Hauptsatz" (sharpened Hauptsatz)
in Gentzen [1935] contains a permutation argument. The sharpened Haupt-
satz states that a cutfree deduction in classical logic may always be arranged
in such a way that the propositional inferences precede all quantifier infer-
ences; the quantifier part of the deduction is linear, the last sequent of the
propositional part is called the midsequent, and hence the sharpened Haupt-
satz is also known as the midsequent theorem. Obviously the midsequent
theorem contains a version of Herbrand's theorem; in other respects Her-
brand stated a more general result, not only for formulas in prenex normal
form (cf. the Introductory Note to Herbrand [1930] in van Heijenoort [1967],
where also corrections to Herbrand [1930] are discussed).
Clearly, a Herbrand disjunction contains more information than the prenex
formula derived from it. This suggests that it might be profitable to look for
Herbrand disjunctions in mathematical proofs; if we are lucky, we can extract
from the terms appearing in the disjunction explicit information, such as
bounds on the size or number of realizations of existential quantifiers. An
example of such a "Herbrand analysis" is given in Luckhardt [1989]. Such
analyses are not applications of Herbrand's theorem as such, since (1) we
want more precise information than is provided by Herbrand's theorem in its
original form, and (2) interesting proofs for analysis will go beyond pure logic.
Chapter 6
Normalization for natural deduction
We now embark on a more thorough study of natural deduction, normaliza-
tion and the structure of normal derivations. We describe a simple normal-
ization strategy w.r.t. a specific set of conversions which transforms every
deduction in Ni into a deduction in normal form; moreover, for 1\im we
prove that deductions are in fact strongly normalizable, i.e. every sequence of
normalization steps terminates in a normal deduction, which is in fact unique.
As in the case of cut elimination, there is a hyperexponential upper bound
on the rate of growth under normalization. From a suitable example we
also easily obtain a hyperexponential lower bound. This still leaves open
the possibility that each theorem might have at least some cutfree deduction
of "modest" length; but this possibility is excluded by an example, due to
Orevkov, of a sequence of statements Cn, n E IN, with deductions linearly
bounded by n, for which the minimum depth of arbitrary normal proofs has
a hyperexponential lower bound.
This points to the very important role of indirect proof in mathematical
reasoning: without indirect reasoning, exemplified by non-normal proofs, we
cannot present proofs of manageable size for the C.
6.1 Conversions and normalization
In this and the next section we shall study the process of normalization for
Ni, which corresponds to cut elimination for intuitionistic sequent calculi.
We shall assume, unless stated otherwise, that applications of have
atomic conclusions in the deductions we consider.
As mentioned already in section 1.3.4, normalizations aim at removing local
mwdma of complexity, i.e. formula occurrences which are first introduced and
immediately afterwards eliminated. However, an introduced formula may be
used as a minor premise of an application of VE or 3E, then stay the same
throughout a sequence of applications of these rules, being eliminated at
the end. This also constitutes a local maximum, which we should like to
eliminate; for that we need the so-called permutation conversions. First we
178
6.1. Conversions and normalization 179
give a precise definition.
6.1.1. NOTATION. In order to be able to generalize conveniently later on,
we introduce the term del-rule (from "disjunction-elimination-like"): the del-
rules of N[mic] are ]E, VE. El
6.1.2. DEFINITION. A segment (of length n) in a deduction D of Ni is a
sequence A1, , An of consecutive occurrences of a formula A in D such
that
for 1 < n, i < n, Ai is a minor premise of a del-rule application in D,
with conclusion Ai+1,
An is not a minor premise of a del-rule application,
A1 is not the conclusion of a del-rule application.
(Note: An f.o. which is neither a minor premise nor the conclusion of an
application of VE or 3E always belongs to a segment of length 1.) A segment
is maximal, or a cut (segment) if An is the major premise of an E-rule, and
either n > 1, or n = 1 and A1 An is the conclusion of an I-rule. The
cutrank cr(o-) of a maximal segment a with formula A is l AI. The cutrank
cr(D) of a deduction D is the maximum of the cutranks of cuts in D. If there
is no cut, the cutrank of D is zero. A critical cut of D is a cut of maximal
cutrank among all cuts in D. We shall use o, o' for segments.
We shall say that o- is a subformula of a' if the formula A in o is a subformula
of B in o-'. A deduction without critical cuts is said to be normal. N
REMARK. The obvious notion for a cut segment of length greater than 1
which comes to mind stipulates that the first formula occurrence of the seg-
ment must be the conclusion of an I-rule; but it turns out we can handle
our more general notion of cut in our normalization process without extra
effort. Note that a formula occurrence can belong to more than one segment
of length greater than 1, due to the ramifications in VE-applications.
6.1.3. EXAMPLE.
Bw
A V B Cw'Au
AV B B V Cv (a) (AVB)VC (a1) (AVB)VC w, w'
AV(BVC) (v) (AVB)VC (b) (AVB)VC
u, v
(c) (AVB)VC
In this deduction (a),(b),(c) and (a!),(b),(c) mark segments of length 3, and
(131),(c) a segment of length 2. We are now going to define the various con-
version steps we shall consider for the calculus Ni.
We first show how to remove cuts of length 1. We write "cony" for "converts
to".
A-conversion:
D1 D2
A1 A2
A1 A A2
Ai
V-conversion:
[AO [A2r
Ai Di D2cony [Ai] for i E {1, 2}.
Ai V A2 C CViu, V
>-conversion:
[A]u
T,1 cony
A B u A
V-conversion:
A
VyA[x/y]
A[xI t]
2-conversion:
COI1V
cony
D [A]u
A[y/t] y/
2xA[ylx] C
u
6.1.5. Permutation, conversions
In order to remove cuts of length > 1, we permute E-rules upwards over minor
premises of VE, 2E.
V-perm conversion:
D D1V2
V B C C
C Dl E-rule
Di
for i E {1, 2}.
Ai
cony
D[xlt]
A[x It]
cony
Vi D2
C D' C D'
A V B D
180 Chapter 6. Normalization for natural deduction
6.1.4. Detour conversions
6.1. Conversions and normalization 181
s-perm conversion:
D' D'
3xA C V C 7,"convDu
E-rule 3xA D
6.1.6. Simplification conversions
Applications of VE with major premise A1VA2, where at least one of [Al], [A2]
is empty in the deduction of the first or second minor premise, are redundant;
we accordingly introduce simplifying conversions. Similarly, an application
of 3E with major premise 3xA, where the assumption class [A[x/y]] in the
derivation of the minor premise is empty, is redundant. Redundant applica-
tions of VE or 3E can be removed by the following conversions:
D Di D2
Ai V A2 C C COI1V
where no assumptions are discharged by VE in Di, and
D'
3xA C
where no assumptions of TY are discharged at the final rule application.
The simplification for VE introduces a non-deterministic element if both dis-
charged assumption classes [Ai] are empty.
6.1.7. Term notation. In term notation the conversions take the following
compact form:
PiP(to, t1) conv t (i E {0, 1}),
E01 (kit, to , t1) cony ti[ui/t],
(AuA.t)sA cony t[u/s],
(Ax.t)s conv t[x/s],
E3uy (p(t, s), t') conv tqu, y/t, s];
f[E(t, to, ti)] cony (t, f [t o] f [t
f [E,4 (t, s)] cony (t, f [s]) ;
Euvoui (t, to, t1) cony ti (lij not free in ti),
Eu3y(t, t') conv t' (u, y not free in t').
Di
cony D'
182 Chapter 6. Normalization for natural deduction
The first group expresses the detour conversions, the second group the per-
mutation conversions and the third group the simplification conversions. In
the second group, f is another elimination operator, with [] the argument
corresponding to the main premise.
REMARK. The detour conversions are sometimes simply called 0-conver-
sions, after the typical case of -4-detour conversions.
Notationally, there is something to be said for reserving a special type (say
"I") for individuals; VI then gives a term Axi .t : VxA.
The notion of a normal deduction can be defined very compactly, indepen-
dently of the definition of cut segments as redexes, by stipulating that in a
normal deduction each major premise of an E-rule is either an assumption or
a conclusion of an application of an E-rule different from the del-rules.
6.1.8. THEOREM. (Normalization) Each derivation 7, in Ni reduces to a
normal derivation.
PROOF. In applications of E-rules we always assume that the major premise
is to the left of the minor premise(s), if there are any minor premises. We
use a main induction on the cutrank n of D, with a subinduction on m, the
sum of lengths of all critical cuts (= cut segments) in D.
By a suitable choice of the critical cut to which we apply a conversion we
can achieve that either n decreases (and we can appeal to the main induction
hypothesis), or that n remains constant but m decreases (and we can appeal
to the subinduction hypothesis). Let us call a a t. c.c. (top critical cut) in D
if no critical cut occurs in a branch of 7, above u. Now apply a conversion
to the rightmost t.c.c. of D; then the resulting D' has a lower cutrank (if the
segment treated has length 1, and is the only maximal segment in D), or has
the same cutrank, but a lower value for in.
To see this in the case of an implication conversion, suppose we apply a
conversion to the rightmost t.c.c. consisting of a formula occurrence A -4 B
[A] 2y/
D' [A]
cB V" onv D'A + B A
Then the repeated substitution of V" at each f.o. of [A] cannot increase the
value of m, since 7, does not contain a t.c.c. cut in V" above the minor premise
A of >E (such a cut would have to occur to the right of A > B, contrary to
our assumption). We leave it to the reader to verify the other cases.
REMARK. If we use the term notation for deductions, our strategy may be
described by saying that we look for the rightmost redex of maximal degree
not containing another redex of maximal degree.
6.1. Conversions and normalization 183
It is worth noting that this strategy also produces normal deductions if
we assume that our deductions obey the Complete Discharge Convention (cf.
2.1.9).
6.1.8A. 4 Do the remaining cases of the proof of the theorem.
6.1.8B. 4 If we permit in Ni non-atomic applications of _Li, a local maximum
of complexity may arise if the conclusion of _Li is the major premise of an elim-
ination rule. Devise extra conversions to remove such maxima and extend the
normalization theorem.
6.1.9. REMARK. The term notation also suggests the possibility of a more
general concept of conversion, namely (restricting attention to --+Nm)
(Aiy.t)gr convo (Àdt[y/r])§..
We call this generalized beta-conversion (0-conversion). Consideration of
this conversion has advantages when computing bounds on the number of
reduction steps needed to reach normal form. For this more general notion
of conversion, essentially the same strategy leads to normal forms (see 6.10).
It is worth noting that the following theorem holds:
6.1.10. THEOREM. Deductions in Ni are strongly normalizing w.r.t. the
conversions listed, that is all reduction sequences terminate (every strategy
produces normal forms).
We do not prove this for the full system here; for references, see 6.12.2.
The important case of -4-logic will be treated in section 6.8, with some ex-
tensions indicated in the exercises. Strong normalization also holds w.r.t.
0-conversion, by essentially the same method. See also section 8.3.
6.1.11. REMARK. The system Nc is not as well-behaved w.r.t. to normaliza-
tion as Ni. In particular, no obvious "formulas-as-types" parallel is available.
Nevertheless, as shown by Prawitz, a form of normalization for Nc w.r.t. the
1_AN-language is possible, by observing that le for this language may be
restricted to instances with atomic conclusions. For example, the left tree
below may be transformed into the tree on the right hand side:
(B *C)' B
C)]u 1_
+ C)] u
I u
B C
w v
B C
184 Chapter 6. Normalization for natural deduction
6.1.11A. 4 Extend normalization to _LA V-Nc. Hint. Use the preceding remark
and the result of exercise 2.3.6A (Prawitz [1965]).
6.2 The structure of normal derivations
6.2.1. Normal deductions in implication logic
By way of introduction, let us first consider the structure of normal derivations
in *Nm. Let D be a normal derivation in A sequence of f.o.'s
A0, , An such that (1) Ao is a top formula (leaf) of the prooftree, and (2)
for 0 < i < n, Ai+1 is immediately below Ai, and (3) A, is not the minor
premise of an *E-application, is called a track of the deduction tree D. A
track of order 0 ends in the conclusion of D; a track of order n + 1 ends in
the minor premise of an +E-application with major premise belonging to a
track of order n.
Since by normality E-rules cannot have the conclusion of an +I-application
as their major premise, the E-rules have to precede the I-rules in a track, so the
following is obvious: a track may be divided into an E-part, say A0, ,
a minimal formula Ai, and an I-part A2+1, , An. In the E-part all rules are
E-rules; in the I-part all rules are I-rules; A, is the conclusion of an E-rule and,
if i < n, a premise of an I-rule. It is also easy to see that each f.o. of D belongs
to some track. Tracks are pieces of branches of the tree with successive f.o.'s
in the subformula relationship: either Ai+1 is a subformula of Ai or vice versa.
As a result, all formulas in a track Ao, , An are subformulas of Ao or of An;
and from this, by induction on the order of tracks, we see that every formula
in D is a subformula either of an open assumption or of the conclusion.
The tree to the left illustrates the
structure of a normal derivation
in *Nm. A dotted line connects
a minor premise of *E with its
conclusion; a solid line connects a
(major) premise with the conclu-
sion. The parts of branches made
up of solid lines are the tracks; the
unramified parts are always the I-
part of a track. The tree shown
has tracks of order 0-2. The only
track of order 2 consists of three
nodes.
The notion of track and the analysis given can readily be extended to -4AVI-
Ni. In the WI-fragment there is always a unique track of order 0, but as
soon as A is added to the language, there may be several tracks of order 0 in
a normal derivation.
6.2. The structure of normal derivations 185
However, if we want to generalize this type of analysis to the full system, we
encounter a difficulty with the rules VE, E. The conclusion of an application
of VE or AE is not necessarily a subformula of the major premise. Hence
restricting attention to pieces of branches of the prooftree does not lead to a
satisfactory analysis of the form of normal deductions. The subformulas of a
major premise A V B or AxA of an E-rule application do not appear in the
conclusion, but among the assumptions being discharged by the application.
This suggests the definition of track below.
The general notion of a track has been devised so as to retain the subformula
property in case one passes through the major premise of an application of a
del-rule. In a track, when arriving at an Ai which is the major premise of an
application a of a del-rule, we take for Ai+1 a hypothesis discharged by a.
6.2.2. DEFINITION. A track of a derivation 1, is a sequence of f.o.'s A0, , An
such that
(i) Ao is a top f.o. in 1, not discharged by an application of del-rule;
(ii) A, for i <n is not the minor premise of an instance of +E, and either
Ai is not the major premise of an instanee of a del-rule and J1.2+1
is directly below Ai, or
Ai is the major premise of an instance a of a del-rule and Ai+1 is
an assumption discharged by a;
(iii) An is either
the minor premise of an instance of >E, or
the conclusion of T,, or
the major premise of an instance a of a del-rule in case there are
no assumptions discharged by a.
6.2.3. EXAMPLE. Consider the following derivation:
Vxy(Pxy Pyx)wi
Vy(Puy Pyu)
Puv VEPvu Puy°
--+EPuy° Pvu
AIVx3yPxy w Puv A Pvu
VE3yPuy y( uy A Pyu) 3I
2E w"
3y(Puy A Pyu)
Vx3y(Pxy A Pyx)
Vxy(Pxy Pyx) Vx3y(Pxy A Pyx) -4/
-41w
186 Chapter 6. Normalization for natural deduction
The diagram below represents the tree structure of the derivation, with the
rules and discharged assumption classes as labels. For easy reference we have
also given a number to each node.
11w'
12 VE
13 VE 10w"
3w" 14 +E
1w 4A1
2 VE 521
62E
7 VI
8 *I w'
9 *I w
All nodes are numbered; top
nodes have a variable as assump-
tion label; below the top nodes
the rule applied is indicated, plus
the label of the discharged as-
sumption class where applicable.
Tracks: 1-9;
11-14, 4-9;
1, 2, 10.
REMARK. To a deduction D we can associate a labelled tree (D), by induc-
tion on VI, as follows. The labels are formulas, and each node in 7, labelled
with a formula A corresponds to a set of nodes labelled with A in (V). (It
is sometimes convenient to think of the labels in (D) as also containing the
rule used to obtain the formula in the label, and if applicable, the discharged
assumption classes.)
If D ends with an f.o. A which is the conclusion of a rule R {VE, 3E},
with deductions Di of the premises Ai, then (V) is obtained by putting A
below the disjoint union of the partially ordered (Di);
If D terminates with a VE, i.e. D ends with
[A]u [B]v
Do Di. D2
AVE C Cu,u
then we insert a copy of (D0) above each formula occurrence in (D1) and (7,2)
corresponding to the occurrences in assumption classes labelled u, v. Below
the resulting disjoint trees we place an occurrence of C. (The notion of cor-
responding occurrence is the obvious one.) Similarly if the final rule applied
in D is 3E. This second clause (b) is the reason that several occurrences of
B in (D) may correspond to a single occurrence B in D. Thus the prooftree
above yields a labelled tree with skeleton indicated below (the numbers are
copied from the numbering of the corresponding occurrences in D.)
61 The structure of normal derivations 187
11 1
1 12 2
1
2 13 10
/
3 14\
4
/
51
6
71
8
9
The tracks correspond in this tree to
branches starting at a leaf and terminating
either in a minor premise of an --+E or in
the conclusion. If we do not insist on hav-
ing trees, we can also have partial orders as-
sociated to prooftrees such that the formula
occurrences of the prooftree are in bijective
correspondence with occurrences of the same
formulas in the associated labelled partial or-
der; in the second clause (b) of the descrip-
tion we then stipulate that a single copy of
(7,0) is above all occurrences in the classes
labelled w and w' in the ordering of (D). In
the tree to the left this ordering would be
obtained by identifying nodes with the same
label (1 and 2 each occur twice).
6.2.4. PROPOSITION. Let D be a normal derivation in I, and let ir
uo, , 0-7, be a track in D. Then there is a segment o-i in ir, the minimum
segment or minimum part of the track, which separates two (possibly empty)
parts of 7, called the E-part (elimination part) and the I-part (introduction
part) of ir such that:
for each a in the E-part one has j < i, a is a major premise of an
E-rule, and cri+i is a strictly positive part of o- and therefore each
is an s.p.p. of ao;
for each cri in the I-part one has i < j, and if j n, then cri is a premise
of an I-rule and an s.p.p. of ci+i, so each a is an s.p.p. of an;
if i n, o-i is a premise of an I-rule or a premise of _Li (and then of the
form 1) and is an s.p.p. of o-0.
6.2.5. DEFINITION. A track of order 0, or main track, in a normal derivation
is a track ending in a conclusion of D. A track of order n + 1 is a track ending
in the minor premise of an +E-application, with major premise belonging to
a track of order n.
A main branch of a derivation is a branch ir in the prooftree such that ir
passes only through premises of I-rules and major premises of E-rules, and ir
begins at a top node and ends in the conclusion of the deduction. .
If we do not include simplifications among our conversions, a track of order
0 ends either in the conclusion of the whole deduction or in the major premise
of an application of a del-rule, provided the classes of assumptions discharged
by the application are empty.
188 Chapter 6. Normalization for natural deduction
REMARK. If we search for a main branch going upwards from the conclusion,
the branch to be followed is unique as long as we do not encounter an AI-
application.
6.2.6. PROPOSITION. In a normal derivation each formula occurrence be-
longs to some track.
PROOF. By induction on the height of normal deductions. For example,
suppose D ends with an VE-application:
[Adu [A2]v
D1 7,2 D3
A1 V A1 C C
IL, V
C in D2 belongs to a track ir (induction hypothesis); either this does not start
in [A1]u, and then ir, C is a track in D which ends in the conclusion; or ir
starts in [A1]u, and then there is a track 7r' in D1 (induction hypothesis) such
that C is a track in D ending in the conclusion. The other cases are left
to the reader.
REMARK. In the case discussed in the proof, we can explicitly describe all
tracks of D, they are of the following four types:
tracks of order > O in D1, or tracks of order > 0 in Di+1 not beginning
in [Ai], or
of the form iri, 72 with 7r1 a track of order 0 in D1 and ir2 a track of
order > 0 in Di+1 beginning in [Ai], or
of the form 7r1, 7r2, C with ri is a track of order O in 7,1, 1-2 a track of
order 0 in Di+i beginning in [Ai], or
of the form 7ri, C, with 7ri is a track of order 0 in Di+i not beginning in
[Ai].
6.2.7. THEOREM. (Subformula property) Let D be a normal deduction in I
for r h A. Then each formula in D is a subformula of a formula in I' U {A}.
PROOF. We prove this for tracks of order n, by induction on n.
6.2.7A. 4 Give full details of the proof of the subformula property.
6.3. Normality in G-systerns and N-systerns 189
6.2.7B. * For 1AN-Nc (cf. 6.1.11) the following subformula property holds: if
D derives A from r, and D is normal with atomic instances of I, only, then every
formula in D is either a subformula of A, r or the negation of an atomic formula
in A, r. Prove this fact (Prawitz [1965]).
6.2.7C. 4 Prove the separation theorem for >Iic (cf. 4.9.2) via the following
steps.
If A is an implication formula derivable in He, it is derivable, say by a
deduction D, in LLNc with Ii, I, restricted to atomic conclusions.
Replace in D the instances of I, by uses of PQ, j_, where Pxy is Peirce's
Law, i.e., ((X > Y) X) > X, and where Q E PV. The result is a derivation D'
in >iNi of A from PQ,,± (1 < i < n) with Qi E PV.
Let Pi, , Pm be the conclusions of instances of _Li occurring in D', and let
B A P. Replace I everywhere by B; by interpolating some steps, the instances
of are transformed into a sequence of AE-applications. The result is a proof V"
in ANm from assumptions Pc?,13 (1 < i < n).
Use exercise 2.1.8G to transform this into a derivation of A from PQ,,p,
(1 < i < n, 1 < j < m). By the subformula property for Nm, this reduces to
a normal deduction in 1Tm; from this we readily construct a proof in Hm plus
assumptions PQ,,pi, hence a proof in He.
6.2.7D. 4 Prove the following proposition. Let D be a deduction of A in Ni
without open assumptions, which is normal w.r.t. detour conversions. If A is not
atomic, D ends with an I-rule. Hence if Ni I- A V B, it follows that either Ni I- A
or Ni I-- B (Prawitz [1965]). Hint. Consider a main branch in D.
6.2.7E. 4 Prove theorems 4.2.3, 4.2.4 using normalization instead of cut elimi-
nation (Prawitz [1965]).
6.3 Normality in G-systems and N-systems
This section is not needed in the remainder of this chapter and may be
skipped. In this section we study the relationship between normal natu-
ral deductions and cutfree G-proofs. We first present a simple construction
of G-proofs from normal N-proofs; this motivates the study of the class of
so-called normal cutfree G-proofs.
As noted before (3.3.4), several cutfree G-deductions may correspond to
a single normal N-deduction. However, by imposing the extra condition of
normality plus some less crucial conditions, we can achieve, for the right choice
of G-system, a one-to-one correspondence between normal Ni-deductions and
normal G-deductions. For our G-system we choose a term-labelled version of
GKi.
190 Chapter 6. Normalization for natural deduction
6.3.1. Constructing normal cutfree G-proofs from normal N-proofs. As a
preliminary warming-up for the more precise results later in the section, we
describe first a simple construction of cutfree G-proofs from normal proofs
in Ni. The argument takes no account of assumption markers, and applies
therefore also to Ni under CDC. On the other hand, the construction is largely
insensitive to the precise G-system for which we want cutfree deductions.
Below we present the argument for Gli; for other systems small adaptations
are necessary.
Let us write HG F D if G1i r D, and r FN D if there is a normal
natural deduction proof of D from assumptions in F.
THEOREM. FG r D iff r HN D.
PROOF. We show by induction on the depth of normal N-deductions that if
F HN D, then HG F D.
Case I. Suppose that 7, consists of the assumption A; this is translated as
the axiom A A.
Case 2. Let 1, be a normal derivation for F FN D, and suppose that the
final step in D is an I-rule application. Let C be the deduction(s) in the
sequent calculus corresponding by induction hypothesis to the immediate
subdeduction(s) of D; apply to C the corresponding R-rule. For example,
if D ends with
[A]
A + B
we have by induction hypothesis a deduction showing HG 1", A B (use
weakening on the conclusion of C to introduce A on the left if necessary,
hence by R--+ we have G1il-FA> B.
Case 3. The conclusion of D is the result of an E-rule application, or of _Li.
We note beforehand, that if a main branch ending with an E-rule contains an
application a of VE or 3E, then a is the sole application of one of these rules
and moreover it is the final rule applied in the main branch; for suppose not,
then D is not normal, since in this case the uppermost occurrence /3 (which
may, or may not coincide with a) of an application of VE or 3E is followed
by an E-rule, and it is possible to apply a permutation conversion.
Let r be the main branch of D. r is unique, since the I-part of T is empty
(multiple main branches can only occur as a result of AI). T does not contain
a minor premise, hence no assumption can be discharged along r.
Thus the first f.o. C of T belongs to I' and is a major premise of an E-rule.
Suppose e.g. C C1 > C2. Then D has the form
6.3. Normality in G-systerns and N-systerns 191
ana therefore by +L:
HG C1 --+ C2, r A.
To consider yet another subcase, suppose now that C Ci V C2.
has the form
[Cdu [C2]v
7,1 D2
CI. V C2 A A u, V
A
deriving A from C1 V C2, F. Then
[C1] [C2]
7,1 and 7,2
A A
D'
C1C2 C2 Ci
(C2)
Du
A
where (C2) refers to a single occurrence in V". The f.o. C1 cannot depend on
other assumptions besides the ones on which A depends, since no assumptions
are discharged in T, which passes through the f.o. C2.
Thus, if 7, establishes F, C1 --* C2 HN A, then TY establishes F HN C1, and
V" shows F, C2 Im A. By the induction hypothesis,
I-G. r Ci, F-G F, C2 A.
Then 1,
are correct normal derivations of smaller depth and therefore by the induction
hypothesis
hG r, Ci A, 1--G r, C2 A
Then the VL rule gives us a deduction showing E-G r, C1 V C2 A. The
other cases are left to the reader. Z
REMARK. If we adapt the argument to the construction of proofs in G3i,
then either we have to generalize the axioms to F, A A for arbitrary A, or
we must in the basis case use standard proofs of the axioms for compound A.
The argument also yields a quick proof of the subformula property for
normal deductions, requiring a partial analysis of their structure only: the
cutfree Gentzen proof constructed contains formulas from the original N-
deduction only, and for Gentzen proofs the subformula property is immediate.
6.3.1A.* Let D be a normal deduction in Ni, and let G(D) be the corresponding
deduction in GKi constructed in the proof of the theorem above. Then 1G(D)1 <
192 Chapter 6. Normalization for natural deduction
6.3.1B. 4 Show that for deductions in G3i + Cut or GKi + Cut (with atomic
A in L_L) we can find a normal proof N(D) in Ni such that IN(D)1 < c2IDI for a
positive integer c. For the full system we can take c = 2, for the system without 1
it suffices to take c =1 (cf. 3.3.4B).
6.3.2. If we analyse the construction in the proof of the preceding theo-
rem, we discover that we do not obtain arbitrary cutfree proofs, but in fact
proofs satisfying an extra property: whenever we encounter an application of
L*, LA or LV, the antecedent active formula in (one of) the premise(s) is
itself principal. We call deductions obeying this condition normal deductions.
The question rises, whether there is perhaps a one-to-one correspondence be-
tween normal natural deductions and normal cutfree G-proofs? Before we
can answer this quewstion however, we first have to be more precise as to
the systems' we want to compare. For the N-systems the choice is canonical:
standard Ni, which is isomorphic to a calculus of typed terms. On the side
of the G-systems, we choose a term-labelled version of GKi.
6.3.3. NOTATION. Below we use u, y for deduction variables (with formula
type), x, y for individual variables. If we wish to emphasize that a term is a
deduction term, we use d, e.
6.3.4. DEFINITION. The system t-GKi with term labels is given by the
following rules (i = 0,1).
Ax 1 P u: P LI r, u: _L EI(u): A
LA
r,u:A0 A Ai, v: t(u, v): B
RA
r t0: A0 r
r, u: Ao A Ai t(u,piu): B r P(to, Ao A .A.J.
L_> r' u: ,L10A1
s(u): A0 r, u: .i10A1, v: A1 t(u, y): B
r, u: A0>A1 t(u, us(u)): B
R> r'u: A t: Br Au.t: A-4B
Lv
F u: AoVAi, Ao to(u, y):C r, u: AoVAi, w: A1 ti(u, w):C
r, u: AcIVAi (u, to(u, v), ti(u, 0): C
r t: Ai
RV
F ki(t): Ao V Ai
LV
F u: VxA, A[x s(u, B
RV
r t: A
6.3. Normality in G-systems and N-systems 193
LA F' u:
3xA(x),v: A(y) s(u, v, y): B
RA
F s: A[x t]
F, u: xA(x) EL(u, s(u, y, y)): B F p(t, s):]xA
The variable restrictions on the rules are as usual: in RV x ;Z FV(F, VxA), in
LA x Fv(r, AxA, B).
By dropping all the term-labels from the formulas we obtain the system
GKi. El
6.3.5. DEFINITION. (Normal and pruned deductions) A deduction 1, in GKi
or t-GKi is normal, if the active antecedent formula in any application of LV,
LA, L* is itself principal, and in the applications of L_L only atomic A are
used.
A deduction 7, of r t: A in t-GKi is said to be pruned, if all deduction
variables of F actually occur free in t. A deduction of r A in GKi is
pruned if F is a set (a multiset where every formula has multiplicity 1) and D
cannot be written as DIF' for inhabited F'. (The notation DIP wa,s
explained in 4.1.2.) El
The restriction to atomic A in applications of L_L in the definition of normality
is needed because we had a corresponding restriction on I in Ni.
One easily sees that every deduction in GKi of I' A or in t-GKi of
F t: A may be pruned to deductions of F' A or r t: A respectively,
with I" C 1"; the original deduction is obtained from the pruned deduction by
a global weakening. The two notions of "pruned" do not fully correspond: if
we have in the antecedent of the conclusion of a pruned deduction in t-GKi
X: B, y: B, with x, y distinct, then stripping of the terms produces a deduction
in GKi with in the conclusion multiple occurrences of B in the antecedent,
so some further pruning is then needed.
DEFINITION. The system h-GKi with head formulas is specified as follows.
Sequents are of the form II; F A with III< 1. To improve readability, we
often write for an empty II.
Ax P; P r A
LA A'i.A0AA1,FB
Ao A Ai;1"
RA
IIr Ao II;
II; F A0 A A1
L.4 ; r' Ao-4A, Ao Ai; F, Ao>A1 B R> "' Ao
A0-4,41; r B II; I'
LV ; A0VAi, Ao C ;F,A0VA1,A1 C RV IIr Ai
194 Chapter 6. Normalization for natural deduction
LV
A[xI t]; I', VxA B
RV II.'
F A
VxA; F B II; F VxA
L3
A[x/y]; r, 3xA B
R3 H.'
r A[x/t]
3xA;F B II; F 3xA
D A"r
; A, F B
hi RV x FV(IIF), in L3 y 0 FV(F, 3xA, B); P atomic; and i = 0 or i = 1.
The formula in front of the semicolon, if present, is called the head formula.
The names of the rules are given as usual; "D" stands for dereliction (since
A loses its status of head formula).
We may also formulate a combination ht-GKi in the obvious way. El
Dropping in a deduction 7, in h-GKi the semicolons, and deleting the repe-
titions resulting from D, results in a normal deduction in GKi. Conversely,
a normal deduction in GKi can straightforwardly be transformed into a de-
duction in h-GKi. The proof that every sequent derivable in GKi also has
a normal proof may be established either by proving closure under Cut of
h-GKi, or via the correspondence, to be established below, of normal deriva-
tions in GKi with normal derivations in Ni.
6.3.6. LEMMA. (Contraction for h-GKi)
If I-- A; r, A B thenhr, A; r B, and
if I r, A, A B then I-- r, A B.
6.3.7. THEOREM. (Cut elimination for h-GKi) The system with head for-
mulas is closed under the rules of Head-cut (Cuth) and Mid-cut (Cut,):
Cut.;F A 11;1',A
II; rr, B n; rri B
PROOF. The proof follows the standard proof of Cut elimination for the
system GKi without term labels.
6.3.8. THEOREM. The systems GKi and h-GKi are equivalent:
iff h-GKi ; A.
A;r' B
k_iuth
PROOF. The direction from right to left is trivial, as observed before. The
other direction is proved by induction on the depth of deductions in GKi,
6.3. Normality in G-systerns and N-systems 195
using closure under Cut of h-GKi. We consider a typical case. Suppose the
proof in GKi ends with
A-413,r A A-4B, B, C
C
Then by the IH we have deductions in h-GKi of
; A-413,r A and ; C.
Then we obtain a proof of ; A*B, C with the help of Cut as follows:
A; A*.13 A
; A, A-413 A B; A, A-413 B
A-4.13; A B
; A*B , A B ; B,r c
Cut; A*B r A ; (A+B)2, A, C
; (A-4.13)3 r2 C Cut
where Xn is short for n copies of X. The desired conclusion follows by closure
under contraction. If A or B are not atomic, we have to insert at the top
standard deductions for A; A-4.B A or B, A+B B respectively. IE
6.3.9. The correspondence between pruned normal proofs in t-GKi and
normal proofs in Ni. Instead of using the conventional notation Po and pi
for the projections, we find it more convenient for the arguments below to
switch notation and to introduce two constants 0 and 1 such that pot tO,
Pit ti. Then successive application of L>, LA, LV results in a term of the
form uto tn_i where each ti is either a deduction term or an individual term
or one of 0, 1, corresponding to L-4, LV and LA-applications respectively.
The deduction variable u is called the head-variable.
6.3.10. LEMMA. The term t in a proof in t-GKi of r t: A represents a
normal natural deduction.
PROOF. We only have to check that the applications of rules cannot introduce
terms of the following form:
13(, E \v/,w(ki, Eu3,y(P(,
Euvo, (( ) , , ) , ) ; ), Eu", (E, , ) , Eu3a, (E, )
where the stand for arbitrary terms or 0 or 1 (at least when this makes sense
syntactically). The different occurrences of do not necessarily represent
the same expression. The E stands for a term of the form Ez,v,,, (, ) or
E3u,y(,
It is straightforward to carry out the check.
196 Chapter 6. Normalization for natural deduction
6.3.11. PROPOSITION. To a normal term t, representing a normal deduction
in Ni and deriving A from r, corresponds a unique pruned normal deduction
Di in t-GKi deriving F t: A.
PROOF. By induction on the size of t.
Case I. If t begins with an I-operator, that is to say, if t has one of the
following forms:
P(do, P(s, d), Au.d, Ax.d,
then the last rule applied in t is AI, 31, *I, VI, AI, respectively, and Di ends
with a corresponding application of RA, R3, R*, RV, RA. For example, if t
ends with AI, TY has the form
Di
r do: Ao d1:A1
r p(do, Ao A Ai
and we can apply the Ill to do and ch.
Case 2. Case 1 does not apply. Then t has one of the following forms:
to, (to, t2), Ev3,0 (to, ti), EI (to)
where to a UE, and e is a (possibly empty) string so, si... sn_i such that each
si is either a deduction term, or an individual term, or one of 0, 1. u is called
the head-variable of t. Note that the fact that t is normal, and that case 1
does not apply, precludes that to begins with an introduction operator (i.e.,
one of p, Ax, Av, ki), or that t is of the form Etv,,,, (to, ti, t2) or Ev3,y(to, ti),
while to begins with an elimination operator.
Subcase 2a. t u or t E\v/i,(U; ti, t2) or t a EZy(u, ti) or t a- El(u). Then
TY is an axiom Ax, or ends with LV, or ends with L3, or is an axiom LI
respectively, and the Hi may be applied to ti, t2.
Subcase 2b. If t E to or t Euv,v(to, ti, t2) or t a Ey3,y(to,t1) or t E_i(to),
and to is not a variable, then to a utie. If t a to, put e(v) ye; if t
(to, ti, t2), let e(v) (ve, ti, t2), and if t E EL (to, ti), put e(v) a
EL(ve, ti), and if t El(to), put e(v) Ei(ve). Then either
2b.1. t' is 0 or 1, V ends with an LA-application
u: A0 A Ai, v: Ai, r e(u, ve): B
u: Ao A A1, e(u, uie)
where i stands for 0 or 1, we may apply the IH to e(u, ve); or
2b.2. If t' is a deduction term, Dt ends with a L>-application
u:A0>A1,r d' Ao u: A0>A1 v: Air e(u , ve): B
u: Ao>A1, r e(u, ut'e): B
and we can apply the IH to d', e(u, ve), or
6.4. Extensions with simple rules 197
2b.3. If t' is an individual term, TY ends with Lb:
u: VxA, A[x/t/] e(u, ve): B
u: V x A e(u, ut' e): B
and we can apply the IH to e(u, vE).
6.3.12. THEOREM. There is a bijective correspondence between pruned
normal deductions in t-GKi and normal deductions in Ni.
PROOF. Immediate from the preceding arguments.
In fact, there is an effective procedure for transforming a non-normal de-
duction into a normal t-GKi-deduction by permuting rules; as shown by
Schwichtenberg, even strong normalization holds for this process. See 3.7.4.
If we relax the restriction to atomic conclusions on _Li in Ni, then we may
also relax the restriction on L_L in normal proofs.
6.4 Extensions with simple rules
The extensions considered are extensions of N[mi] with rules involving only
atomic premises, conclusions, and discharged assumptions. These extensions
are the counterpart for N-systems of the extensions of G-systems considered
in 4.5.
We recall that we shall assume restriction of _Li to instances with atomic
conclusions throughout.
6.4.1. DEFINITION. Let N* be any system obtained from N[mi] by adding
rules Rule1(P0, P-i, Q) of Type Ia or Rulei (Po, , P71) -I-) Of Type Ib -
Po Pn 1 resp. Po Pn
or Rulei(Ro, , Rn; Po, Pn, (2) of Type Ic -
[Rdut
P. -1, Un
or rules Rule2(Qi, , Qm; P1, , Pn) of type II
[pitti,,
chQm c
1.11 tin
198 Chapter 6. Norrnalization for natural deduction
The Q3 are the major premises, the premises C are the minor premises. The
P2, Qi, Rk are all atomic. The formula C in rules of type II is arbitrary.
We also require that the set of additional rules is closed under substitution
of terms for individual variables, that is if we make in premises, assumptions
and conclusion of one of the additional rules a substitution PA, then the
result is another rule of the same type.
In these extended systems the del-rules are the rules VE, 3E and the type-II
rules.
REMARKS. Note that addition of a rule of type II is equivalent to the addition
of an axiom
Qi A .. A Qv, --+ Pi V ... V Pn
or a rule(Qi A A Q.*) Pi V ... V Pm
as may be easily checked by the reader.
Combination of two rules Rulei(P, Q) and Rulei(Q, R) produces a deduc-
tion containing
This corresponds in G-systems to a basic Cut on Q. By our conventions the
occurrence of Q is not counted as a cutformula in N-systems.
6.4.2. Conversions are now extended with permutative conversions and
simplifications involving rules of type II. The notion of a maximal segment
may be defined as before with our new notion of del-rule, and we can prove
normalization.
LEMMA. Each derivation in a system Ni* can be transformed into a normal
derivation with the same conclusion.
PROOF. The proof follows the same strategy as before, namely removing a
cut of maximal complexity which is topmost in the rightmost branch of the
deduction containing such cuts.
The definition of track is as before, but with our new notion of del-rule.
6.5. E-logic and ordinary logic 199
THEOREM. Let D be a normal derivation in N*, and let ir be a track in
D. Then 7r may be divided into three parts: an E-part as,., o-i_i (possibly
empty), a minimal part o-2, , o-k, and an I-part o-k+i, . . , o-n (possibly empty)
such that
for each o-3 in the E-part one has j < i, a-3 is a major premise of an
E-rule, and o-3+1 is a strictly positive part of a-3, and therefore each o-3
is an s.p.p. of ao,
for each o-3 in the I-part one has k < j, and if j n, then o-3 is a premise
of an I-rule and an s.p.p. of 0-+i, so each o-3 is an s.p.p. of an,
for i <j < k the segment o-3 is a premise of a type-I rule or the major
premise of a type-II rule, and for i < j < k the segment o-3 is the
conclusion of a type-I rule or an assumption discharged by a type-II
rule,
if k n, crk is also a premise of an I-rule or of J.
LEMMA. In a normal deduction in a system Ni* each f.o. belongs to a track.
THEOREM. Let D be a normal deduction of A from assumptions r in a
system Ni*. Then each formula in D is either a subformula of I', A or an
atomic formula occurring in one of the additional rules.
6.4.2A. * Check the proof of lemma and theorem.
6.5 E-logic and ordinary logic
E-logic is an adaptation of first-order predicate logic which accommodates
possibly empty domains and possible non-denoting (undefined) terms. Such
terms may arise, for example, in the theory of partial functions. This is
achieved by adding a special unary predicate E, the existence predicate. Et
means "t denotes" or "t is defined".
Two notions of equality play a role: strict equality =, where t = s means
that t and s are both defined and equal, and weak equality s t means that
s is defined iff t is defined, and if one of these is defined, they are equal. In
this section we want to compare a version of E-logic with modified quantifier
rules with ordinary logic with some special axioms for E added.
This section makes use of the results of the preceding section on extensions
of N-systems.
200 Chapter 6. Normalization for natural deduction
6.5.1. DEFINMON. Let Nie be the system obtained from Ni by adding a
special unary predicate E, and modifying the quantifier rules of Ni as follows:
[Ey]u
A[x I y]
VI VxA
Do D1
VE
Vx A Et
At
Do D1
[A[x I yfiu [Ey]v
A[x It] Et Do
3E 3xA C u]xA
with the usual variable restrictions.
Nie is obtained from Nie by adding a predicate for weak equality with
axioms:
(al) t t,
s t A A(s) A(t) (A atomic),
(Es V Et s t) s t,
E(f ti . . . ti,) --+ Et, (1 < i < n),
Rti .t + Et, (1 < i < n)
(R a relation symbol, f a function symbol of the language). The correspond-
ing theory is designated by Te.
NiE is obtained from Ni by adding a unary predicate E and equality =,
with extra axioms and rules
Et At t = s
(A atomic)
t = t As
Rti tn to = t1 E(ft1 tn)
Eti Eti Eti
where j E {0, 1}, 1 < i < n, R is a predicate letter and f a function symbol
of the language. The last three rules are called the strictness rules.
6.5.2. DEFINITION. We define the following map from formulas of Nie" to
formulas of NiE:
(Et)E := Et,
(to ti)E := Eto V Eti > to = ti,
(Rta . .t_1)E := Rto tn-17
(A o B)E := AE o BE for o
(V x A)E := Vx[Ex AE],
(2xA)E := x[Ex A AE]. N
6.5. E-logic and ordinary logic 201
6.5.3. DEFINITION. Let .us call a formula of NiE bounded if all quantified
subformulas of A are of the form Vx(Ex B) or ]x(Ex A Bx). We define
a mapping * from the bounded formulas of NiE to the formulas of Nie as
follows:'
(Et)* := Et,
(-L)* =1,
(s = t)* :=stAEsAEt,
(Rto := Rto tn-i,
(A o B)* := A* o B* for o E {A, V, -±},
(Vx(Ex A))* :=VxA*,
(3x(Ex A A))* := 3xA*. E
6.5.4. LEMMA. Nie" I- A 44 (AE)*.
PROOF. By induction on the complexity of A. The most interesting case is
that of prime formulas to = ti:
((to = ti)E)* (Eto V Eti to = ti)*
Eto V Eti ---> (to ti A Eto A Eti)
(EtoVEti + to t1) A (EtovEt, EtonEti).
The first half of this conjunction is by axiom (a3) equivalent to to t1, and
the second part is derivable from to ti with the help of (a2).
6.5.5. LEMMA. If Nie" F A, then NiE FE AE.
PROOF. By induction on the depth of proofs in Nie". The more interesting
cases concern the axioms. Let us consider the axiom
s t A A[xIs] > A[xI t],
for A atomic. For example, let A r r'. Assume
A[x I s]E Er[xI .9] V ErlxIsi > r[x Isi= rqxI s],
(s t)E Es V Et --+ s = t,
Er[x/t] V Erlx It].
We have to show r[xlt]= ri[xlt]. Because of the strictness of function sym-
bols, if x actually occurs in r, Er[xlt] V ErIxIt] implies Et. With the second
assumption this yields s = t and Es. By induction on the complexity of r"
one proves for all r":
s = t ---> r"[xI .5]= r"[xlt],
hence in particular r[xIs] = r[xlt], ri[xI = rqx It], and so by strictness
Er[xI s] V ErqxIsi. Therefore r[xIs] = rqx I3] (first assumption), so r[xlt]=
lxIt]. The rest of the proof is left to the reader. E
202 Chapter 6. Normalization for natural deduction
6.5.6. LEMMA. Let F, A consist of bounded formulas. If NiE r A then
F* A*.
PROOF. By induction on the IDI, where D is a normal proof of r A in
NiE, we construct a proof D* of r* A*. Let us consider the four cases
where the last rule R applied in 7, is a quantifier rule. Observe that due to
the subformula property for normal deductions, quantifiers appear only as
the restricted quantifiers of bounded formulas.
Case I. R = VI. The conclusion of D is of the form Vx(Ex + Ax), and the
conclusion and its premise belong to the I-part of the track to which they
belong, so 7, is of the form shown on the left below. By the IH applied to Do
there exists a deduction D* as shown on the right.
[Ex]u [Ex]'
Do
Ex -4 Axu A* x
Vx(Ex + Ax) V xA* x
Case 2. R = I. Then for similar reasons 1, must be of the form on the left
below, while by the IH we can then construct D* as on the right below:
pl
Et At
Et A At
3x(Ex A Ax)
Do
Vx(Ex > Ax)
Et > At
[Ex A Ax?
Do
3x(Ex A Ax) C
u
Et A*t
3xA*x
Case 3. R = VE. Then D is of the form on the left, and we construct, using
the 1H, a deduction as on the right:
VxA*x Et'
A*t
Et -4 A*t
Case 4. R = E. Then D is of the form on the left, and we construct, using
the IH, a deduction as on the right:
Exu A*xv
[Ex A A*x]
3xA*x C* u, v
C*
All other cases are trivial. N
The following is now immediate by combining the preceding lemmas.
6.5.7. THEOREM. Nie r A iffNiE rE
6.6. Conservativity of predicative classes 203
6.5.7A. 4 Complete the proof of lemma 6.5.5.
6.6 Conservativity of predicative classes
6.6.1. We shall now give a proof-theoretic argument for the conservativity
of the addition of predicative classes to intuitionistic first-order theories, as
an application of normalization for natural deduction systems. This is an-
other type of extension of the logical N-systems: we now add second-order
quantifiers, and need a different argument to extend normalization.
Let T be a first-order theory formalized on the basis of intuitionistic pred-
icate logic, plus some (individual) first-order axioms and a set of axiom
schemas
Let L be the language of T; we add n-argument predicate variables XI',
Z' (i E tO L, the extended language we call L'.
An axiom schema ..Ti is a formula in the language L', say
yi(xin(i,1), xrn((:),r(i))),
where Xi is n(i, j)-ary. Each substitution of predicates of suitable arity de-
finable in T, say
xl . . . (xi , xn(i,i)) (1 <j _< r(i)),
for the X7(ij) yields an axiom of T.
6.6.2. DEFINITION. The weak second-order extension T* (extension by
predicative classes) of T is defined as follows. We add to the language of
T relation variables X", Yn, Z',... for n-ary relations, for each n, and the
corresponding quantifiers VXn, 3Xn. If t1, , in are individual terms, then
Xnti tn is a prime formula. We add the elementary comprehension schema:
ECA aXnVxi xn[Xn(xi, , xn) A(xi, ,xn)]
for each A of T* not containing bound relation variables. The axiom schemas
of T are replaced by corresponding axioms
EXAMPLE. Let HA be the system of intuitionistic first-order arithmetic,
also called Heyting arithmetic, containing symbols for all primitive recursive
functions, with as axioms the equality axioms as in 4.4.3, Vx(0 Sx) (S
successor function), Vxy(Sx = Sy > x = y), defining axioms for all primitive
recursive functions, and all instances of induction: A[x/0] A Vx(A > A[xlSx])
VxA. The weak second-order extension HA* is defined as indicated above,
with extra axioms VXxy(x = y A Xx Xy), and the induction schema is
replaced by the induction axiom VX(X0 A Vn(Xn > X (Sn)) -4 VmXm).
For weak second-order extensions we have the following theorem:
204 Chapter 6. Normalization for natural deduction
6.6.3. THEOREM. T* is a conservative extension of T.
PROOF. We make use of a mild extension of the normalization theorem for
Ni. The axiom schema ECA can be dispensed with at the cost of introducing
second-order quantifier rules of the following forms:
A[Xn lYn]
2
VXn .,,A
w2IVXnA V A[Xn1A.B]v
[A[Xn I YIP'
A[Xn Y.B] ]XnA C 2E
]XnA 321
Here A[Xn/Axi xn..13] is the formula obtained from A by replacing each
prime formula of the form Xnt1t2 tn by B[xi,...,xniti,...,t7d
In V2I, Yn does not occur in assumptions on which the formula occurrence
A(Y) depends; in 32E Yn does not occur free in assumptions on which C
depends, except A[Xn /Yn], nor does Yn occur free in C. B does not contain
bound predicate variables.
To the conversions we add conversions for the second-order quantifiers, and
permutative conversions for 32E (and if desired simplifications as well).
The 2-complexity c2 (A) of A is the number of second-order quantifiers in
A. The 2-cutrank of D, cr2(D), is the maximum of the 2-complexities of
formulas in maximal segments. The 1-cutrank of D, crl(D), is the maximum
of IA for all cutformulas with c2(A) = cr2(D). A critical cut is a maximal
segment o- with A E o- and I AI = crl(D), c2(A) = cr2(D). The cutlength of
D, cl(D) is the total number of cutformulas A in critical cuts.
A t.c.c. (topmost critical cut) is now defined as before. The notion of
subformula is extended by stipulating that A(Aai xn.B) is a subformula of
VXnA(Xn), 3XnA(Xn), for any B not containing bound relation variables.
With this notion of subformula we prove normalization and give an analysis
of the structure of tracks as before, and obtain the subformula property. The
normalization proof uses a nested induction: a main induction on cr2(D),
with a subinduction on crl(D), and a sub-subinduction on cl(D). At each
reduction stej either cr2(D) is lowered, or crl(D) is lowered and cr2(D) stays
the same, or cl(D) is lowered and cri(D) and cr2(D) stay the same.
Alternatively, one may describe this as an induction on the lexicograph-
ically ordered triples (cr2 (D), crl (D), cl(D)). The induction hypothesis is
then that for all D' with (cr2(D'), crl(D'), cl(V)) < (cr2(D), crl(D), cl(D))
the transformation into a normal deduction has already been achieved.
Now let A be a formula in the language of T such that T* I A, and let D
be a normal derivation in T* with conclusion A. By the subformula property
6.7. Conservativity for Horn clauses 205
all formulas in 1, are subformulas either of A, or of axioms of T*. Each
second-order axiom can only occur at a top node and it cannot appear as
subformula of another formula occurring in D; therefore it occurs as the first
formula of a track followed by V2E-applications, until a first-order formula has
been reached; this first-order formula is then an instance of an axiom schema
in T. IE
REMARK. For a reader familiar with ordinals and transfinite induction, the
argument may be described more simply: give formulas A a complexity IAl2
= w . cr2 (A) + IA I, and give deductions D an induction value win+ n, with m
the maximal complexity of formulas in cut segments of D, n the total length
of critical cut segments. Each reduction step then lowers the induction value,
which is an ordinal below w3.
6.6.3A. 4 Let V2E', 321' be the versions of V2E, 321 where for B only a relation
variable may appear. Show that V2E', 321 plus ECA is equivalent to V2E, 321
relative to the other axioms and rules. What would go wrong in the proof of the
theorem if B were completely unrestricted?
6.7 Conservativity for Horn clauses
The results in this section will be used in a proof of the completeness of a gen-
eralization of linear resolution. Throughout his section we restrict attention
to the language without V, 3.
6.7.1. DEFINITION. An expansion of a deduction D in Nm consists in the
replacement of a subdeduction D' by another subdeduction according to one
of the following three rules:
(1) Di
A - > B
(2) D'
VxA
(3) TYA A B
is replaced by
is replaced by
is replaced by
TY
VxA
A[x I y]
VxA
D'
A -4 B AY
-4BA B
y
D' D'
AAB AAB
A B
A A B
(y not free in TY)
(y not free in D')
In term notation the expansions correspond to replacing, respectively,
206 Chapter 6. Normalization for natural deduction
6.7.3. LEMMA. Let D be a normal deduction. There is a terminating
sequence of expansions transforming D into a deduction in long normal form.
tA-4B by MLA .tA-÷B u (u % FV(t)),
tVxA by Ay.tvxAy (y % FV(t)),
tAAB by P(Pot, Pit). El
Cases (1) and (2) are often called 77-expansions; this term is sometimes ex-
tended to case (3). The term "expansion" has been chosen since the inverse
replacements (right hand side replaced by left hand side) are usually called
in the terminology of the A-calculus contractions; in particular the inverses of
(1) and (2) are called 77-contractions (in this book we have used "conversion"
instead of "contraction" however).
Expansions may create new redexes. Therefore we want to allow them only
in positions where no new redexes are created. We define:
6.7.2. DEFINITION. (Minimal position, long normal form) A formula oc-
currence A is said to be in end position in a deduction D, if A is either the
conclusion of D, or the minor premise of an application of +E. A formula
occurrence A is said to be in minimal position, if either
A is the conclusion of an E-rule application and a premise of an I-rule
application or
A is in end position and the conclusion of an E-rule application.
A deduction is in long normal form if 7, is in normal form and no expansions
at minimal positions are possible. El
REMARKS. (i) The expansion of an occurrence at a minimal position of a
normal deduction does not create new redexes. Clearly, the minimal part of
a path in a deduction in long normal form always consists of a single atomic
formula. In order to construct, starting from a given deduction, a deduction
in long normal form with the same conclusion, we first normalize, then apply
expansions.
(ii) A deduction in long normal form is comparable to a sequent calculus
deduction with the axioms I', A A, A or A A restricted to atomic A. The
construction of a deduction in -->Nm from a deduction in a Gentzen system,
with atomic instances of the axioms only, as in 3.3 produces a deduction in
long normal form. Conversely, the construction in 6.3 produces a deduction
with atomic instances of the axioms from a deduction in long normal form.
6.7. Conservativity for Horn clauses 207
PROOF. Let ed(D), the expansion degree, of 1, be the sum of the sizes of
formulas in minimal position. Assume T:t to be normal. Now search for
an occurrence A of a compound formula in minimal position, such that no
formula occurrence of this kind occurs above A. Then an expansion of 7, at
A decreases the expansion degree of the deduction.
REMARKS. (i) The depth of the long normal form 1,' of 1, constructed ac-
cording to the recipe above is at most 31D1
1-
(ii) the transition to long normal form corresponds in Gentzen systems to
the replacement of axioms with non-atomic active formulas by deductions of
these axioms from axioms with atomic active formulas (cf. 3.1.3A).
6.7.4. DEFINITION. A generalized Horn formula is a formula of the form
Vi(A° A ... A An_i --+ B)
where B is atomic and A0, , An_i are formulas without -4. A generalized
Horn formula is called definite if B is atomic, not equal to I. If the Ai are
atomic, we have Horn formulas, definite Horn formulas respectively. A fact
is a Horn formula with n = 0, that is to say, a fact is of the form VIB. El
6.7.5. THEOREM.
Let Nc H r 1, where r is a set of generalized Horn formulas. Then
Nm r 1, by a deduction not involving
Let Nc H r B, where B is atomic, and r is a set of definite general-
ized Horn formulas. Then Nm r B, by a deduction not involving
If we drop the "generalized" from the preceding two statements, the
deduction in Nm may be assumed to contain applications of AI and
E-rules only.
PROOF. Given Nc r 1, there is by theorem 2.3.6 a deduction in Nm
of r, A 1, where A is a set of stability assumptions V(---R i --+ Rg). By
lemma 6.7.3 we may assume 7, to be in long normal form.
Closure of assumptions in an Nm-deduction 7, in long normal form of
r, A A, r a set of generalized Horn formulas, A a set of stability assump-
tions, A -4-free, can only occur in subdeductions of the following form (the
double line stands for 0 or more VE-applications):
(1) Rg) _L
VE >Lu-> Rt_>E
RtPDF compression, OCR, web optimization using a watermarked evaluation copy of CVISION PDFCompressor
208 Chapter 6. Normalization for natural deduction
This fact can be proved by induction on the size of deductions D. Every
formula occurrence in 7, belongs to a main branch or to a subdeduction
ending in a minor premise of >E. A main branch must start in a generalized
Horn formula or in a stability assumption. We note that along the main
branch no +I can occur.
If the main branch started in a generalized Horn formula, we can apply
the IH to the subdeductions of minor premises (which are implication-free)
of >E along the main branch.
If the main branch started in a stability assumption, the minor premises of
+E-applications along the main branch are of the form ,---,Rrfor R a relation
symbol of the language. In this case, the subdeduction of the minor premise
must end with an q, since the whole deduction is in long normal form. Now
note that the subdeduction D' of I (as in the prooftree exhibited above)
again may be seen as a deduction of an atomic formula from generalized Horn
formulas, since --,RE is itself a special case of a generalized Horn formula. So
we can apply the IH to D'.
Next we observe that in the subdeductions D' as above, the assumption
u : --,Rr necessarily appears as the major premise of an instance of *E.
Occurrence as the minor premise of an instance of *E is excluded since it
would conflict with the long normal form. Occurrence as premise of an I-rule
is excluded since this would lead to subformulas of a form not present in the
conclusion and assumptions of the deduction. Hence the elements of Hliflu
appear in a subdeduction of the form
7.,"
(2) --,Rr RrI
Case 1. Assume there are closed assumptions; then we may look for a sub-
deduction of type (2) in which a closed assumption --Rrappears such that D"
does not contain closed assumptions. Then we may replace the corresponding
subdeduction of type (1) by D" and we have removed an application of a
stability assumption. This may be continued till we arrive at
Case 2. There are no assumptions closed by *I. If there are no stability
assumptions used, we are done. If there are still stability assumptions, we
look for a subdeduction of type (1) such that D' does not contain stability
assumptions. Then the whole deduction D may be replaced by D'.
Part (ii) of the theorem for B distinct from 1 is proved in a quite similar
way, but now in case 2 the situation that a subdeduction without stability as-
sumptions' might derive J_ is excluded (conflict with the subformula property
of normal deductions). E
REMARK. As follows from the preceding result, if r is a set of definite Horn
formulas, the deduction 7, of 1 or an atom from r is something like (double
lines indicating possibly some VE-inferences)
6.7. Conservativity for Horn clauses
Hl
H11
Cn A C12 -+
Cl
V11 V12
Cu1 C12
CH A C12 C21 A C22 -* C2
C2
209
V21 V22
C21 C22
C21 A C22
Ci A C2 C Ci A C2
Here Hl, H11, 1112 are definite Horn formulas which in the prooftree above
have been assumed to have the form VY(Ai A A2 --+ B). The formulas C1 A
C2 C etc. are substitution instances of the clauses obtained by repeatedly
applying VE. Vn, V12 V211 V22 are deductions of the same general shape as
the whole D. If some of the Horn formulas are facts, the structure of D is
correspondingly simplified at those places.
A simplified presentation of such a deduction is an implication tree. The
notion of an implication tree for a formula relative to a set of Horn formulas
F is defined inductively by
a substitution instance C' of a fact V-iC from r is in itself a single-node
implication tree for C';
if A1 A...A An B (n > 0) is a substitution instance of a Horn formula
of r, and the Di are implication trees for the Ai, then
D1 pn
is an implication tree for B.
The fact that the implication trees give a notion of derivation which is
complete for derivations of atoms from Horn formulas I' is also very easily
proved by the following semantical argument, due to R. Stark.
We construct a model M for r, such that (1) the domain of M is the
set of all (open or closed) terms of the language; (2) function symbols f are
interpreted by functions 1M given by fm(r):. f(E); and (3) relations R are
interpreted by relations RA4 such that Rio (r) holds in M iff R(E) has an
implication tree.
Then M is a model for P. If VgB E r is a fact, then every substitution
instance of B' of this fact is in itself an implication tree and hence valid in
M; hence the fact itself is valid in M. If A1 A ... A An --> B is a substitution
instance of an arbitrary H E r, and A1, , An are true in M, then they have
implication trees, but then also B has an implication tree, and so is true in
M; therefore H is true in M.
If now an atomic A semantically follows from r, then A holds in M, and
hence has an implication tree. Note that this gives us a semantical proof of
the conservativeness of Nc over Nm for formulas of the form A B (B
atomic), since an implication tree obviously corresponds to a deduction in
minimal logic.
210 Chapter 6. Normalization for natural deduction
6.8 Strong normalization for -41\IM and A,
Strong normalization is a useful property to have: suppose we have a mapping
0 from a term system S to a term system S' such that a reduction step in S
translates under 0 into one or more reduction steps in S'. Then from strong
normalization for S' we may infer strong normalization for S. Normalization
as a rule is not enough for such a transfer, unless we can indicate for S a
strategy which translates under 0 into a strategy for normalizing in S'. In
preparation for strong normalization of intuitionistic second-order logic, we
prove strong normalization for intuitionistic implication logic.
6.8.1. DEFINITION. SN(t) := t is strongly normalizing.
A term t is non-introduced if t is not of the form Ax.s. More generally, in
term calculi a term t is non-introduced if the principal operator of t is not an
operator corresponding to an introduction rule for the type of t.
So if conjunction is added to the type-forming operations, and pairing with
inverses to the constant terms, non-introduced terms are the terms not of
the form Ax.s or pts. In the present case, we might also have used the term
non-abstract for non-introduced.
6.8.2. DEFINITION. For each formula A we define by induction on the depth
of A a "computability" predicate of type A, CompA, applicable to terms of
type A, as follows:
Compx(t) := SN(t) (X a propositional variable),
CompA,B(t) := Vs(CompA(s) CompB(ts)).
6.8.3. LEMMA. The following three properties hold for CompA:r.
Cl If CompA(t), then SN(t).
C2 If CompA(t) and t t', then CompA(t1).
C3 If t is non-introduced, then it CompA(e) implies CompA(t).
As a corollary of C3:
C4 If t is non-introduced and normal, then CompA(t).
PROOF. We establish C1-3 simultaneously by induction on IA I.
Basis. A X. Cl, C2 are immediate. As to C3, for a non-introduced t such
that Vti*t CompA(e), any reduction path starting from t passes through a
t' t, t' E SN by Cl, so t E SN.
Induction step. A B C.
6.8. Strong normalization 211
Cl. Suppose t E CompB,c, and let x be a variable of type B. By C4, as a
consequence of C3 for B, we have x E CompB, hence tx E Compc. Clearly
the reduction tree of t is embedded in the reduction tree for tx, hence SN(t),
since SN(tx) by Cl for C.
C2. Let t E COMN3c, e t, 5 E CompB. Then ts E COMpc, ts es, so
Compc(es) by C2 for C; s is arbitrary, so t' E COMpgc.
CS. Let t be non-introduced, and assume Ve t(CompB,c(e)). Let s E
CompB, then by induction hypothesis SN(s); let h, be the number of nodes
in the reduction tree. We prove ts E Comp with a subinduction on h,. If
ts t", then either
t" e s, t t'; by assumption for B C, ComPBc(e), hence
Compc (t/ s); or
t" , s s'; by C2 CompB(s/), and he < h,, so by the subinduction
hypothesis for s', E CoMpc.
There are no other possibilities, since t is non-introduced; therefore, using
C3 for ts, we find that ts E Compc. This holds for all s E CompB so
t E CompBc.
6.8.4. LEMMA. VS E CompA(CompB(t[x/s])) implies CompA,B(Ax.t).
PROOF. Assume VsECompA(t[x/s] E CompB); we have to show (Ax.t)s E
CompB for all s E CompA. We use induction on h, ht, the sum of the
sizes of the reduction trees of s and t. (Note that ht is well-defined since our
assumptions imply CompB(t), using CompA(x) for variable x, and by Cl of
the preceding lemma SN(t).) (Ax.t)s is non-introduced; if (Ax.t)8 t", then
either
t" (Ax.t)s' with s s', then by C2 s' E Comp and by induction
hypothesis t" E CompB follows; or
t" (Ax.e)s with t t', then by C2 t' E Comp and by induction
hypothesis t" E CompB; or
t" -a t[x / s], and CompB(t") holds by assumption.
Now apply C3.
6.8.5. THEOREM. All terms of A, are strongly computable under substitu-
tion, that is to say if FV(t) C {xi: Ai, , xn: An}, si E Compit (1 < i < n),
t: B then
CompB(t[xi, ,x./si,
212 Chapter 6. Normalization for natural deduction
As a corollary, all terms are computable and therefore strongly normalizable.
PROOF. By induction on the construction of t. Let r* r[xi, . , x,,/s1, ,sn]
for all terms r.
Case I. t is a variable: immediate.
Case 2. t t1t2, Then t* t74; by induction hypothesis ComPA-4s(tn,
CompA(t;). Then CompB(t*) by definition of ComPA-4s
Case 3. t AyB.tiC. Let FV(ti) C fy, xi:Ai, ,xn:Anl, s E ComPB,
si E CompiL Then by induction hypothesis, ti[Y, xi, , X,/S, s1, ,S,] E
Compc, i.e. tl[y/s] E Compc. By the preceding lemma Ay.tI E ComPB-ci2
We now immediately obtain
6.8.6. THEOREM. All terms of A, (deductions of -4Nm) are strongly nor-
malizable under 0-reduction.
Uniqueness of normal form is either proved directly, or readily follows from
Newman's lemma (1.2.8). Strong normalizability for CL, may be proved
by the same method as used above for A,, or can be reduced to strong
normalization for A, by the obvious embedding of terms of CL, into A,
(cf. the next subsection).
6.8.7. As a simple example of a reduction of strong normalization for a
system of terms S to strong normalization for S' via a mapping of terms
which translates a one-step reduction in S into one or more reduction steps
in S', we take for S the term calculus Av,, and for S' the calculus A,. The
reduction map is defined on formulas as follows:
O(Rti tn) := R* (R* E PV),
'(A B) := -4 OB,
0(VxA) := (Q -4 Q) -4 A (Q E 'PV distinct from the R*).
R* is a propositional variable assigned to the relation letter R. We extend
to deductions by assigning to a singleton tree "A" the singleton tree "OA",
and extending the definition of as a homomorphism relative to VI, VE, i.e.
[A] [OA]
-41A -4 B i,b(A -4 B)
etc. For VI, VE we translate
A VI
VyA[x/y]
6.8. Strong norrnalization 213
VxA (Q-4Q)--0A Q-4Q
_+EA[x / t]
Checking that this has the desired effect we leave as an exercise.
6.8.7A. 4 Show that the embedding '0 just defined has the required properties
for reducing strong normalization for to strong normalization for A. The
embedding has the property that if F A is provable, then so is '0(F) 0(A).
This property is not needed for the reduction; show that 7,/, may be somewhat
simplified if this property is not required.
6.8.7B. 4 Assuming strong normalization for show how to obtain strong
normalization for A_4ovv3.
6.8.7C. 4* Extend the proof of strong normalization via computability to AA,
the term calculus for intuitionistic +A-logic, putting
ComPAAB := ComPA(Pot) and ComPB (pit).
The new detour-conversions are of course pi(p(to, ti)) cont t (i = 0,1). Show
that lemma 6.8.3 extends to this case, and prove an extra lemma: if t E CompA,
s E CompB, then pts E CompAAB; then prove the strong normalization theorem.
6.8.7D. * Extend the uniqueness of normal form (modulo the renaming of bound
variables) to the full calculus Ni, relative to detour- and permutative conversions.
Including simplification conversions may spoil uniqueness of normal form; why?
6.8.8. Failure of strong normalization under CDC
The following example, due to R. Statman, shows that strong normalization
fails for natural deduction under the CDC. Let Do(P, Q) be the deduction
Q Q-413 Q
p Q P
Q
and let Dn+i(Q , P) be
+ Q Dri(P,Q)
214 Chapter 6. Normalization for natural deduction
Note that Dn(P, Q) has conclusion P.
Let P2n P, Q2n Q, P2n+1 Q, Q2n+1 P. Dn(P, Q) has the form
Q Q
p P Q
Q + P
n
We now start with a deduction E:
Do(po,ce)
p0
Q0 3. p0 Do (Qo, p0)
p0
After one reduction step at the cut shown we obtain a deduction containing
as a subdeduction:
DO (P1 Ql)
pi
Q' *P' vi(Q1 pl)
P1
By induction on n we can prove that after the n-th reduction step we have
obtained a deduction containing a subdeduction
Dn(Pn ,Qn)
pn pn+1(Qn Pn)
Qn
pn Qn
pn
where no assumption open in this subdeduction is cancelled in the remainder
of the deduction. Applying a normalization step to the Qn Pn shown
produces a deduction with as subdeduction
pn
Dn+1(Qn Pn) Qn Pn Dn+1 (Qn Pn)
pn Qn pn
Qn
with no assumption open in this subdeduction discharged in the remainder
of the deduction. This subdeduction is equal to
Dn+1(Qn, Pn)
pn Qn Dn+2(pn Qn)
QnPDF compression, OCR, web optimization using a watermarked evaluation copy of CVISION PDFCompressor
6.9. Hyperexponential bounds 215
which may be rewritten as
Dn+1(pn+1, Qn+1)
Qn+1 pn+1
Dn+2(Qn+1, Pn+1)
pn+1
As a result, the sequence of reduction steps indicated produces deductions
forever increasing in size and depth.
6.9 Hyperexponential bounds
6.9.1. Hyperexponential upper bounds on the growth of deductions. It is not
difficult to estimate the growth of the depth of a deduction on normalizing,
by analogy with the result in 5.1. For deductions D in --+Nm, the cutrank
cr(D) of D is simply the maximum of IA for all cutformulas A in D.
LEMMA. Let D be a deduction in +Nm with cutrank < k. Then there is a
deduction D* --< D with cr(D) < k such that 11,1 < 21D1.
PROOF. By induction on IV; the details are left as an exercise.
From this lemma we obtain immediately
THEOREM. To each D in >lTm there is a normal D* 7, with ID*I <2)
(which is equal to hyp(2, cr(D), ID D).
6.9.1A. * Provide details of the proof of the lemma.
6.9.2. Hyperexponential lower bounds on the growth of deductions. We can
easily show, by considering a particular example, that no elementary function
(i.e. a primitive recursive function defined with recursions bounded by some
finitely iterated exponentiation) can give a universal bound on the increase
of the length of a deduction under normalization.
6.9.3. DEFINITION. Let X be a fixed proposition variable, and define the
iterated types by
OX := X, (k +1)X := kX > kX.
The Church numerals of type kX are defined by (cf. 1.2.20)
kX
:= AykXAX xkX .yn(x).
Fi
Below we shall abbreviate hkx as I.
then
o Ir(y) =fl Irn(y), =13 .1r, =13 irn > 0).
The following deduction, logically trivial, represents the Church numeral A:
f:A>A x:A
PA-4A fx:A
f:A-4A f2x: A
f3x: A
Ax. f3 x: A A
3: (A A) (A --+ A)
Note that the deduction corresponding to TtA has depth n + 2.
6.9.4. THEOREM. We write Drd for the normal form ofD in -+Nm. There
is no fixed k such that we always have 1Dnfl < 2.
PROOF. Consider the following special deduction term r,:
rn := In2 -142-2 =0
r2,.
The depth of the left hand side is easily seen to be n +3, while on the right
the depth is 2n + 2.
However, a still stronger result is possible; in 6.11.1 we shall exhibit a
sequence of formulas (types) Ck with non-normal deductions of a size linear
in k, such that every normal deduction of Ck contains at least 2k nodes.
From the theorem above plus earlier results, it follows that the "inversion-
rule strategy" of 5.1.9 cannot possibly correspond to normalization. To see
this, we observe:
A deduction D in >1\im may be transformed into a deduction G(D) in
G3i* + Cut such that
IG(V)I 01,
for a positive constant c, and the cutrank of G(D) is bounded by the maximum
depth of formulas in D. The proof is the same as for G3i + Cut (3.5.11C).
For a derivation D in -+ G3i* + Cut we can find a cutfree deduction
D* with bounds on ID*1 as in 5.1.14.
For a deduction 7, in --+G3i* Cut we can construct a translation to
a proof N(V) in >Nm such that
216 Chapter 6. Normalization for natural deduction
Recall that, if we put
tos := Ax.t(s(x)),
6.10. A stronger conversion 217
(cf. 6.3.1B). Moreover, if D is cutfree, then N (V) is normal.
Suppose that we apply (a), (b), (c) successively to the deductions rr, in
the proof of the theorem. The maximal depth of formulas in rr, is easily seen
to be n + 1, hence G(r) has cutrank at most n + 2. It is then readily seen
that I N(G(rn)*)I is bounded by 4+3 for a fixed k.
We finally observe that the mapping N under (a) is inverse to G under
(c) in the sense that NG(D) and 7, have the same normal form. Therefore,
for sufficiently large n, the normal form of N(G(r,.,)*) cannot coincide with
the normal form of rn.
6.10 A digression: a stronger conversion
6.10.1. The following generalization of [3-conversion, already mentioned in
6.1.9, is more readily suggested by the term notation than by deduction trees:
(Afiv.t)gr cont (Àolt[v/r]) (63-conversion).
The normal forms w.r.t. this notion of conversion however are the same as for
(3-conversion. For the purposes of illustration, let us also exhibit an instance
of this conversion in tree form:
[Br [A]u
DO
t:C
Av.t:B C u
Auv.t: A > (B s: A
(Auv.t)s: B --+ C
(Auv.t)sr:C
D2
r: B
cont
D2
[B]V [A?
Do
t[v/r]: C u
Au.t[v/r]: A > C s: A
(Au.t[v Ir])s: C
This more general notion of reduction permits us to count the complexity of
formulas in a more economical way, namely by the notion of (implication-)
level.
DEFINITION. Let -"<gfi be the reduction relation w.r.t. this more general con-
version. A g-cut is simply a redex w.r.t. the generalized notion of conversion.
For implication formulas A we define the level lev(A) by
lev(P) :-= O (P atomic), lev(A B) := max(lev(A) + 1,1ev(B)).
In a redex (AfivB .t)grB we call B the pre-cut formula. The l-rank (level-rank)
of a redex will be the level of its pre-cut formula plus 1. We write lcr(D) for
the maximum of the 1-ranks of g-cuts (redexes) in D.
A critical 9-cut (critical redex) of a deduction D is a cut with pre-cut
formula of maximal level among all pre-cut formulas of the deduction.
218 Chapter 6. Normalization for natural deduction
Suppose now we eliminate from a deduction the rightmost redex (in the
term), or equivalently a critical g-cut which is topmost on the rightmost
branch of the prooftree which contains critical g-cuts. Say the redex is
(AuP AuvB.t)sP snA'rB . Then in the result of converting: (AuP
AuA..t[v/rDsP s- the only increase in critical g-cuts could arise from du-
plication of r when substituted in t for v; but this is excluded since r is free
of critical g-cuts, if the original redex chosen was a rightmost redex.
Substitution of rB in t might create new g-cuts, but necessarily of lower
level, since they will be g-cuts with pre-cut formula B1, B B2, and
lev(Bi) < lev(B). (Observe that, if n > 0, the converted redex is again
a redex with pre-cut formula A1, but this redex was already present as a
subredex (Au]. un(Av.t)si sn) in the original redex, so this is not a new
critical redex.)
It is to be noted that, if we restrict attention to ordinary 0-conversion, the
notion of level as a measure for the complexity of (pre-)cuts fails: consider
again our example above, and assume now that A is a pre-cut formula of
maximal level. Reduction would produce
and we have obtained a new g-cut with pre-cut formula B, which may have
the same level as A Summing up, we have
6.10.2. THEOREM. (Normalization for -- gß) There is a standard strategy
for obtaining a normal form w.r.t. gß(as described above).
Virtually the same argument as for ordinary 0-conversion yields:
6.10.3. THEOREM. All terms of A, are strongly normalizable under gfi-
reduction and hence normal forms are unique (cf. 6.8.6).
An upper bound for the number of reduction steps needed to normalize a term
according to our standard strategy, for the extended notion of conversion, is
easily given as a function of the leafsize of the prooftree.
THEOREM. (Upper bound on the number of reduction steps) Let t be a
deduction-term with ls(t) = p. Put
sk-Fi(P) := sk(p) + p2""(v)
6.11. Orevkov's result 219
Then 8k (p) is an upper bound on the number of steps needed to lower the
g-cutrank of t by k.
PROOF. Observe that replacing (Agu'.r)gs' by (Aft.r [u7 s1),S' in t can at most
square the leafsize of t. Assume by III that sk(p) is an upper bound on the
number of steps needed to lower the g-cutrank by k. The leafsize of the term
after this normalization is
_2' k (P)
since each step at most squares the leafsize; hence we find that sk+i(p) as de-
fined above is a bound on the number of steps needed to reduce the g-cutrank
by one more.
REMARK. Replacing (Au.r)s by r[u/s] at most squares the leafsize of t, a
special case of the observation in the proof above. However, in the case of
ordinary 0-reduction, we work with a cutrank which is in general higher than
the g-cutrank.
6.11 Orevkov's result
6.11.1. We present an example, due to V.P. Orevkov, of formulas Ck such
that each Ck has a non-normal natural deduction of size linear in k, while on
the other hand every normal derivation of Ck has at least hyp(2, k, 1) = 2k
nodes. So this is even worse than our example above, which demonstrated
that normalizing a given sequence of deductions of Ak, which are linear in k,
may produce deductions hyperexponential in k.
The example is analogous to Gentzen's proof of transfinite induction up to
cok in arithmetic (cf. 10.2.2).
Let R be a ternary relation symbol for the graph of the function Ayx. (y+2x),
i.e. Ryxz is supposed to express y + 2x = z. We introduce two axioms, which
are in fact Horn formulas, fixing the meaning of R, in a language with a
constant 0 for zero, and unary function symbol S for successor:
Hypi := VyR(y, 0, Sy),
Hyp2 := Vyxzzi(Ryxz > Rzxzi R(y, Sx, z1)).
For Ck we take the formula expressing that hyp(2, k, 1) is defined:
Ck := 2.4 ... Zo(R004 A ROzkzk-i A ... A ROzizo)
(Actually, our final choice will consist of variants CL of the Ck.) In the short
deductions for Ck we use formulas Ai with parameter x:
Ao (x) :=Vy3zRyxz,
Ai+i(x):= Vy(Aiy > 3z(Aiz A Ryxz)).
220 Chapter 6. Normalization for natural deduction
To grasp the intuitive significance of A, put
fo (Yo, x) := Yo + 2x,
fn-H. (Yo, Yn, Yn+i, x) := fn (YO, Y1 Yn, Yn+i 2x)
Using .1, to express "is defined" we can say that Ai+i(x) expresses
Vyi+i (fi (yo, ,y, + (Yo, , 40,
or
Vyi+1.(fi(Yo, , Yi, fi(Yo, , + 2x)-1-)
6.11.2. LEmmA. In Nm for every i Hypi --+ Hyp2 > Ai0, by a proof with
size bounded by a constant (that is to say, not depending on i).
PROOF. We have to show how to construct formal proofs E, of A,O. We leave
the cases of ea, Ei to the reader. We define abbreviations:
Ao(x, y) := 3zRyxz,
A1 (x, y) := Ay + Az(Aiz A Ryxz).
We construct deduction g+2:
Aiz A Ryxzw HyP2 VE(4x)
Aizi A Rzxziv Ryxz Ryxz--Rzxzi-->R(Y,Sx, z1)
Rzxzi Rzxzi>R(y, Sx, 21)
R(y, Sx, z1)
We construct deduction ei+2 from g+2:
Aizi A Rzxziv
e'i+2u Aiz A Ryxzw Aizi
Ai+ix u Ai+ixz Aiz _.>E
Aizi A R(y, Sx, z1)
Ai+ixy Ay u' 3z1(Aizi. A Rzxzi) 3z(Aiz A R(y, Sx, z)) 3E, v
3z(Aiz A Ryxz) 3z(Aiz A R(y, Sx, z)) 3E, w
3z(Aiz A R(y, Sx, z)) q, u'
Aiy --> 3z(Aiz A R(y, Sx, z)) Hypi
R(x, 0, Sx)
VEAi+i(Sx)
AIAi+i(Sx) A R(x, 0, Sx)
3z(A.iz A Rx0z)
3I--q, u
Ai+ix --> az(Ai+lz A Rx0z)
A+20 E
6.11. Orevkov's result 221
6.11.3. PROPOSITION.
In Nm Hypi Hyp2 Ck by a deduction linear in k.
In AVI-Nm, for every k, Hypi + Hyp2 by a deduction
linear in k. Here ck is a negative version of Ck:
---,Vzk...zo(ROOzk ROzkzk_i > ROzizo I).
PROOF. For the deductions TA of Ck from Hypi, Hyp2 we introduce some
further abbreviations.
zk+i := 0, R1 := ROzizo, := ROzi+izi A R (1 < i < k)
Boz := ROziz, Biz := Ai_iz A ROzi+iz.
For 1 <i < k:
Bi(zi)
:= Aoz
3zBoz
Dk+1
3zBkz
Di :
D.oB (zo)
1 ROzizo
B(z) ek
Ak0 'k_1
Ak00 Ak_10
3z.B2z 3zBkz
B_1 (z_1) D2-1
7,7 := ROzizi_i Rii
Finally we can construct the required deduction D;, as follows:
Ei-2
Ai_iziO A_20
[Bk-1(4-1)]
[Bk(4)] Dk-1
Dk aZBk-2Z
3zBk_lZ
Ck
Ck
Dk+1
[Bk-2(4-2)1
Dk-2
32Bk-3Z
Ck
[Biz]] pro
D1 Rk
rk3I3zBoz
Ck
k
Ck
If we now apply the GödelGentzen negative translation, it is not hard to
see that deductions D in Nm are translated into deductions D' in VA>l-
Nc such that for a constant c, provided that the instances of
> Ag have proofs of fixed depth. This is indeed the case, because the
only critical cases in the deductions above are the applications of 3E in but
these are applied to existential formulas, which are translated as negations,
and for which the property -4 Ag is indeed provable with fixed depth,
by specializing the standard proof of 0. As an example consider
a deduction terminating with 3E on the left, translated as on the right:
222 Chapter 6. Normalization for natural deduction
[Agx]
--MyOgy
Thzi.gx
Vx--,Agx
rnVyBgy --1-1-1VyOgy +
Here .T is a substitution instance of the standard proof of >
From this we see that 1,;, translates into a proof of
-,vzk zo(R0Ozk A R044-1 A ... A R0,z1,z0 I).
Finally there is a deduction of C from C linear in k. (The sole reason for
replacing cif by CI', is to get rid of A, facilitating the comparison with the
next proposition.)
6.11.4. PROPOSITION. Any normal derivation in AVI-Nm of Cik from
Hypi, Hyp2 has at least hyp(2, k, 1) = 2k nodes.
PROOF. Let D be a normal derivation of 1 from Hypi, Hyp2 and the hypoth-
esis
D :=Vzk...zo(R0Ozk ROzkzk_i > --+ ROzizo
Without loss of generality we may assume that there are no variables appear-
ing free anywhere in the deduction (unless bound later by VI, a case which
actually does not arise). If there are such variables, we can always replace
them everywhere by O.
The main branch of the derivation D must begin with D, since (1) Hypi and
Hyp2 do not contain 1, and (2) the main branch ends with an elimination,
so 1 is a subformula of the top formula, which cannot be discharged along
the main branch.
The main branch starts with a series of VE-applications, followed by --+E-
applications; all minor premises are of the form R0t13-7) (Tc abbreviates SkO, as
before).
Any normal deduction D' of Rfitiik from Hypi, Hyp2 and D (1) actually
does not use D, (2) has at least 2n occurrences of Hypi, and (3) satisfies
k = m+ 2. (1) is readily proved by induction on the depth of the deduction,
and is left to the reader. (2) and (3) are proved by induction on ñ. For the
induction step, assume that we have shown that any normal derivation of
RrTifik uses > 2n occurrences of Hypi, and satisfies k = m + 2n. Consider a
normal derivation D' of Rrit,(Sii)k. This must be of the form
[Ax]
Vi 7,2
AxAx 3yBy
3yBy
6.12. Notes 223
D'o
Rthfift > (Riif-tk --+ Rfi-i(Sfl,)k) Rthirifi A
Rüñk-+Rth(Sñ)i
Rfit(Sf-t)k
Application of the IH to A, A produces (2), (3) for D'.
Returning to the derivations of the minor premises along the main branch
of the original 1,, this observation tells us that they derive R0020, R020 21, ,
RO2k_i 2k. This uses at least 24-1 = 2k times Hypi.
REMARK. The preceding result is transferable to Gentzen systems. From a
cutfree proof Dk of Ck in G3i of depth < 2k_2 we can construct an Nm-proof
of depth < 2k_i (6.3.1B), hence of size < 2k, contradicting the proposition,
so any such Dk necessarily has depth >
6.12 Notes
6.12.1. Concepts concerning natural deduction prooftrees. The notions of
segment, branch, track, track of order n appear in Prawitz [1965], as segment,
thread, path, path of order n respectively. We have replaced thread by path,
as being the more usual terminology for trees in mathematics, and we have
replaced path by track, in order to avoid confusion with the usual notion of a
path in a tree. The notion of maximal segment used here slightly generalizes
the notion in Prawitz [1965], as in Mints [1992a] (in Prawitz [1965] a maximal
segment must be the conclusion of an I-rule). The concept of a main branch
is taken from Martin-Löf [1971a].
Detour conversions and permutative conversions are from Prawitz [1965];
the simplification conversions from Prawitz [1971]. Prawitz has an extra
simplification conversion in the case of Ni, simplifying
to D, provided no assumptions in D become bound in D'. In Prawitz [1971, p.
254] it is also observed that a derivation in normal form may be expanded to
a derivation in what is here called long normal form.
An example of a detour conversion is already present in Gentzen [1935]
(end of section 111.2).
224 Chapter 6. Normalization for natural deduction
6.12.2. Normalization and its applications. The proof of the normalization
theorem follows Prawitz [1965]; this proof is in fact a straightforward exten-
sion of a very early (1942!) unpublished proof by A. M. Turing of normaliza-
tion in simply typed lambda calculus (i.e. implication logic); see Gandy [1980].
The next proof known to us is in Curry and Feys [1958, theorem 9 in section
9F], where normalization is obtained via cut elimination. For normalization
of Nc see Prawitz [1965], Smullyan [1965], Stalmarck [1991], Andou [1995]
and the references given in these papers. In the case of Andou [1995] it is
essential that is a primitive with rules E.
Extensions (section 6.4) with rules of type Ja are discussed in Prawitz
[1971]. There is also a brief discussion of extensions of N-systems in Negri
and von Plato [1998]; in that paper rules of type II are introduced.
The result in 6.5, relating E-logic to ordinary logic with some special ax-
ioms, is due to Scott [1979], who gave a semantic proof, but the idea of the
present proof is due to G. R. Renardel de Lavalette (unpublished). There is
a variant of E-logic where free variables stand for "existing" objects, the do-
mains are always inhabited, but where terms need not be always defined: the
logic of partial terms (LPT), called E±-logic in Troelstra and van Dalen [1988].
As to the conservative extension of predicative classes (6.6.3), the corre-
sponding result for classical theories is wellknown; a result of this type appears
for example in Takeuti [1978]. A similar result for a theory based on intu-
itionistic logic, namely the conservativeness of Emo r over HA, is proved in
Beeson [1985, p. 322] by means of Kripke models. The present proof is taken
from Troelstra and van Dalen [1988, chapter 10].
Between 1965 and 1970 there appeared many proofs (cf. Troelstra [1973,
2.2.35]) of the fact that the terms of suitable term calculi for the primitive
recursive functionals of Gödel [1958] could be brought into normal form, and
hence the numerical terms evaluated. Usually these proofs implicitly estab-
lish normalization for A,. There is little or no attention given to strong
normalization; exceptions are Sanchis [1967] (for a theory with combinators)
and Howard [1970] (for lambda abstraction). But in most other cases the
proofs might have been adapted to strong normalization without difficulty.
For example, in Tait [1967], where the method using computability predi-
cates is introduced, normalization for a system of terms with combinators
and recursors is proved, but not strong normalization, although it is easy to
adapt Tait's proof to strong normalization for a system of terms with lambda
abstraction (see, for example, Troelstra [1973, section 2.2]). The proof of
Diller [1970] can also be adapted so as to obtain a proof of strong normal-
ization fqr simple type theory, etc. Strong normalization was firmly put on
the map by Prawitz [1971], who proved strong normalization for a natural-
deduction version of intuitionistic second-order logic, using Girard's extension
of Tait's method. In this text we followed the Tait method, adapted to strong
normalization.
6.12. Notes 225
For the proof of strong normalization for the full system, see Prawitz [1971],
For an exposition, one may also look at Troelstra [1973, Chapter 4] (disregard-
ing everything which concerns arithmetic).
Another method for proving strong normalization, by assigning suitable
functionals to terms or derivations, is introduced in Gandy [1980]. Gandy
did not treat permutative conversions; this step is taken in van de Pol and
Schwichtenberg [1995].
A new elegant approach to proofs of normalization and strong normaliza-
tion for systems of typed terms or typable terms, especially for A2 and its
extensions, is described in Matthes [1998]. In Joachimski and Matthes [1999]
these methods are applied to a lambda calculus with sumtypes, where per-
mutative conversions are also treated; these methods obviously also apply to
strong normalization for Ni.
The conservative extension result in 6.7.5 is taken from Schwichtenberg
[1992].
As to the failure of strong normalization under CDC, see also Leivant [1979].
The result in 6.9.4 and the generalization of 0-conversion are taken from
Schwichtenberg [1991]. The presentation of Orevkov's result in 6.11.1 is a
slight modification of an exposition by Schwichtenberg, which in turn is an
adaptation to N-systems of Orevkov [1979]. Orevkov's result is an adaptation
of a result in Statman [1978] for languages containing function symbols. Other
papers of Orevkov dealing with bounds are Orevkov [1984,1987].
6.12.3. Comparing G-systems with N-systems. (Continued from 3.7.4.) The
natural map N from cutfree G-deductions to normal N-deductions, originally
due to Prawitz [1965], is many-to-one, not one-to-one. Prawitz also described
an inverse, Gd, assigning a cutfree G-proof to a normal N-proof; this is the
argument in 6.3.1 (Prawitz [1965, App.A §3]). The images under Gcf in fact
not only are cutfree, but satisfy some extra conditions; they are so-called
normal G-deductions, as in 6.3.5. This insight, with credit to Curry, is present
in Howard [1980, section 5] which was written in 1969.
The precise notion of normality differs for the various G-systems, but in any
case the antecedent active formulas in applications of L-4, LA and LV have to
be principal themselves. Zucker [1974] showed that in the negative fragment
of LJ + Cut (that is to say, the fragment of > AV1) two deductions have the
same image under N, if they are interreducible using permutations of rules
and reductions of cuts. Pottinger [1977] extends Zucker's work. Mints [1996]
proves normalization of cutfree proofs by permutation of rules, sharpening
the notion of normality so as to obtain a one-to-one correspondence between
normal natural deductions and normal proofs in a system which is practically
identical with Gli (the treatment needs to be supplemented for contraction).
Dyckhoff and Pinto [1999] prove a result similar to the result of Zucker
[1974] but for a cutfree calculus. Schwichtenberg [1999] proves strong nor-
226 Chapter 6. Normalization for natural deduction
malization for the permutations involved. Troelstra [1999] describes a normal-
ization procedure for cutfree G3-deduction in implication logic under CDC.
The treatment given in this book tries to avoid the complications arising
from contraction and weakening in Mints [1996] and describes the correspon-
dence between normal proofs in GKi and normal proofs in Ni, using the
G-system with privileged "headformulas" as an intermediate. The use of
headformulas is found in Herbelin [1995] and also crops up in the proof the-
ory of linear logic (cf. 9.4).
6.12.4. Generalized elimination rules. In the papers von Plato [1998], Negri
and von Plato [1999] a version of natural deduction is studied with generalized
forms of AE, *E and VE:
[A]U[13]v [13]u A[x/t]L
A A B C A .13 A C VxA C vE*,u
The usual rules are readily seen to be special cases; for example, to obtain
the usual *E, take for the rightmost subdeduction simply the assumption
B (with B a C). The rule AE* was already considered in Schroeder-Heister
[1984].
Let us use Ni* as an ad hoc designation for this system. (N.B. In the papers
just mentioned the assumption classes are not treated in quite the same way
as for our Ni, but we shall disregard these differences here.)
Now all E-rules have the indirect form of VE, 3E in Ni. Extra permutation
conversions may be defined for the new extended rules.
If we define maximal segments just as before in Ni, namely that a segment
is said to be maximal if it either is of length 1 and is the conclusion of an
I-rule and major premise of an E-rule, or is of length greater than 1 and
major premise of an E-rule, we can prove normalization as before. A normal
deduction may now be defined as a deduction where major premises of E-
rules are assumptions. For otherwise the deduction of some major premise
either ends with an I-rule, and a detour conversion is possible, or ends with
an E-rule and a permutation is possible.
Normal deductions D in Ni* can be translated in a straightforward way
into cutfree proofs V*. Let us illustrate the idea for implication logic.
(i) A final application of *I is translated as an application of R-4:
[A]'
Do goes to
Ty(;
r,A
A > B
6.12. Notes 227
(ii) A final application of -*E* with major premise an assumption is trans-
lated as an application of L--+:
[Br D*2
7,1 7,2 goes to F A B , F' C
A BA A -+ B ,F ,F' C
(If the major premise had been derived by, say, Do, we would have needed a
Cut to make the translation work.) Conversely, cutfree proofs in a G-system
may readily be translated into normal deductions in Ni*. The important
difference with the correlation between Ni and, say, G3i is that now the
order of the rules corresponds: the normal natural deduction is constructed
from the cutfree proof by looking at each step at the last rule applied in order
to find the last rule for the translated deduction.
By suitably choosing the N-system on the one hand and the G-system on
the other hand one can easily obtain a one-to-one (bijective) correspondence.
In Negri and von Plato [1999] one considers for this purpose a G-system
with context-free rules where multiple copies of the active formulas may occur
(possibly zero); thus, for example, LA becomes
Am , , F C
A A B,F
For the corresponding N-system, written with sequents, one has
F .AAB Am, Bn,r c
F C
This leads to a smooth correspondence, which may be extended to include
Cut for the G-system and a rule of substitution for the N-system:
Sub
FA A, A C
1", A C
For the classical propositional system one may add an atomic rule of the
excluded middle,
EM-At P c C
,
(P atomic)
F A C
which corresponds on the natural deduction side to
[P] [-'P]
Summing up, the construction of the correspondence between G-deductions
and a suitable variant of Ni*-deductions makes us understand why in the
correspondence for standard Ni (6.3) the rules LA, LV, L-+ need to be treated
differently from LV and L.
228 Chapter 6. Normalization for natural deduction
6.12.5. Multiple-conclusion and sequence-conclusion natural deduction. In
Shoesmith and Smiley [1978] and Ungar [1992], systems are considered where
the inferences produce finite sequences of assertions as conclusions; all for-
mulas in such a conclusion may be used as premises for other inferences,
simultaneously. That is to say a (fragment of a) proof may look like the
following:
A
E F G
The deductions are therefore no longer trees.
Technically more manageable are systems with finite multisets or sequences
of formulas as conclusions, one formula of which may be used as the active
formula in a premise of the next inference. Such systems for C are considered
in Bori6ie [1985] and Cellucci [1992]. For example, Bori6ie [1985] has the
following rules for Cp A multisets):
[A]x [A] x
I;f3 F(A B) AAx,>1 x,
P(A + B) FAB +E
FLA AA E FA AB AI F(Ao A A1) AEFA ro A B) rA,
Ai
VI
F(A V B)
VEl -r FAAV V C
F(A0 V A1) FAB PA rA
(Actually, BoriCie uses sequences instead of multisets, and hence also has a
rule of exchange.) For predicate logic C one adds
rA FVxA
FVxA FA[xIt] "
FA[x/t]
F3xA 3/
F3xA
E,3 
FA[x/63xA]
[Aix
F2xA B 3E
with the obvious restrictions on x in VI, E. 3E rather spoils the regular
pattern of the rules, so Cellucci [1992] considers a calculus in which 3E has
been replaced by
where e3xA is an e-term in the sense of Hilbert's e-symbol (cf. Hilbert and
Bernays [1939]), i.e. a term which satisfies 3xA ++ A[x/e3xA]. For these
systems normalization with the usual consequences (subformula property etc.)
is provable.
6.12. Notes 229
6.12.6. Higher-order rules. In Schroeder-Heister [1984] a generalization of
natural deduction is considered, where not only formulas may appear as hy-
potheses, but also rules; a rule of order n + 1 may contain rules of order n as
hypotheses. Ordinary rules are rules of order O.
Chapter 7
Resolution
In this chapter we study another form of inference, which forms the keystone
of logic programming and certain theorem-proving systems. We do not aim at
giving a complete introduction to the theory of logic programming; rather, we
want to show how resolution is connected with other formalisms and to pro-
vide a proof-theoretic road to the completeness theorem for SLD-resolution.
The first three sections deal with propositional resolution, unification and
resolution in predicate logic. The last two sections illustrate for Cp and Ip
how deductions in a suitably chosen variant of the Gentzen systems can be
directly translated into deductions based on resolution, which often permits
us to lift strategies for proof search in Gentzen systems to resolution-based
systems. The extension of these methods to predicate logic is more or less
straightforward.
7.1 Introduction to resolution
Propositional linear resolution is a "baby example" of resolution methods,
which is not of much interest in itself, but may serve as an introduction to
the subject.
We consider programs consisting of finitely many sequents (clauses) of the
form r P, P a propositional variable and r a finite multiset of propositional
variables ("definite clauses" , "Horn clauses" or "Horn sequents"). A goal or
query r is a finite (possibly empty) set of propositional variables, and may be
identified with the sequent r [Jis the empty goal. The so-called (linear)
resolution rule is in the propositional case just an instance of Cut:
r, A ¿A
r, A
A resolution derivation consists of a sequence of such instances of Cut, where
the right premise is a rule from the given program. A successful derivation,
starting from an initial goal r, is a finite derivation tree ending in the empty
goal. Identifying a program clause 74 A A with the formula (A A) -4 A,
230
7.1. Introduction to resolution 231
and a goal F with A F, we see that a successful derivation derives I from
the initial goal and thus provides in fact a refutation of the initial goal on
the basis of the program clauses. In short, seen as a refutation of the initial
goal, a resolution proof is nothing but a very special type of deduction in a
Gentzen system.
7.1.1. EXAMPLE. Consider atomic propositions ST,i, Sn,W, H (for "Sum-
mer", "Sunny", "Warm", "Happy") with a program of four clauses:
The following are examples of, respectively, a successful and an unsuccessful
derivation from this program:
H (1)
Sm, W (4)
W (3)
Sm (4)
[1
The derivation on the right cannot be continued since there is no clause with
Sr, on the right. The left hand derivation in our example infers H from the
assumptions embodied in the program clauses.
From the viewpoint of classical logic, refuting --i A r is tantamount to prov-
ing A F. This suggests that it is also possible to look at a resolution proof
as an ordinary deduction of the initial goal constructed "backwards". Let a
resolution proof be given,
rn = FA
and assume that we have already constructed a derivation Dn of P* A rn,
where P* is the multiset consisting of formulas (A I'') 4 A', one formula
occurrence for each clause F' A from the program P. We construct a
derivation Dn_i of P* A rn_i as follows.
Let V, Dn" be Gentzen-system deductions constructed in a standard way
from Dn, with conclusions 2* 2* A F respectively, and let D' be
(1) S m, W H
(2) Sn W
(3)
(4)
Sn, W
Sn.,
with n-th step
rn_i FA A A
H (1)
Sm,W (2)
Sm, S (4)
Sn
232 Chapter 7. Resolution
AZXALS.AA
P* AA-4i=1
1)*,/\AA
From this we construct Dni:
Din D'
P*,AA
P* A r P* A
P* AFAA
Another point worth noting is the following. Assume we have derived the
empty sequent (goal) from an initial goal ro and a set of program clauses P.
We may regard the program clauses as axioms. Then the generalized form
of the cut elimination theorem (cf. 4.5.1) tells us that an arbitrary classical
Gentzen system deduction can be transformed into a deduction where all cut
formulas occur in an axiom. Hence this may be read as a resolution proof;
i.e. we have obtained a completeness theorem.
7.2 Unification
The present section contains some results on substitution operations needed
in what follows.
7.2.1. NOTATION. A substitution is a mapping, say u, of variables to terms
such that the domain of u, dom(o-) = {x : o-x x}, is finite. We may
therefore represent a substitution by [xi/ti, , xn/tn], with all xi distinct,
and xi 0 ti for 1 < i < n. An equivalent notation is [x1,...,xniti, , tni
e is the identical substitution, with empty domain. In many arguments we
treat [xi/ti, , xn/tn] as a set of ordered pairs {(xi, ti), , (xn, tn)}.
For a substitution o [xi/ti, , xn/tn], ranv(o-) := FV({ti, , tn1). (We
do not use "ran" as the abbreviation, since this suggests the range of a func-
tion in the usual sense.) o is said to be a variable substitution if o-x is a
variable for all x.
For an arbitrary quantifier-free expression e and substitution u, Go- is
obtained by replacing every variable in e by its cr-image. eo- is called an
instance (induced by u) of O.
If o, T are substitutions, o-r, the composition of o and r, is the substitution
defined by
x(o-r)= (xo-)r for all variables x.
7.2. Unification 233
REMARK. Note that substitutions do not commute: [x /y][y / z] is distinct
from [y/z][x/y].
Composition of substitutions may be defined in a more direct way by saying
that if T, a are substitutions given by
T = [Xilti, Xnitn]) a = [Y1/si, , Ymism],
then the substitution TO" is the sequence p found by deleting from
[xi/tio-, , Xnitna, Yl/S1, , Ym/Smi
the xi/tio- for which tio- = xi, and the yi/s3 for which yi E {x1, ,xn}.
To see this, note that, for each variable x, (xo-)r is the same as xp, where
p is defined as above from a and T. (One considers three cases: x = xi,
x {xi, , xn, , yml, and x = y3 but x {x1, . . . ,n}.)
7.2.1A. 4 Elaborate the preceding remark.
7.2.2. LEMMA. Let 0, u, T be substitutions. Then:
u = r iff tu = tr for all terms t iff xo- = XT for all variables x;
re = CT = r;
(tr)o- = t(ro-) for all terms t;
0(o-r) = (00-)r.
PROOF. (ii) is obvious, (i) and (iii) are proved by a routine induction on
terms, and (iv) is an immediate consequence of (i) and (iii).
REMARK. (iv) permits us to write Bo-r (without parentheses) for the com-
position of 9, u, r.
7.2.2A. 4 Prove (i) and (iii) of the preceding lemma.
7.2.3. DEFINMON. A variable-permutation is a substitution u with inverse
o--1 such that o-o--1 = aa = e. If e is a quantifier-free expression and a is
a variable-permutation, then 6u is called a variant of O.
u < r iff there is a û such that u = r9. u and r are said to be equivalent
(notationar)ifa<randr<a.
234 Chapter 7. Resolution
7.2.4. LEMMA. For equivalent o-,T there is a permutation 0 such that o-0 =
T, TO-1 =
PROOF. Let Cf,T be equivalent; then there are p, p' such that a = rp, T = o-p',
and hence o-p' p = u, rpp' = T. p' must be injective on A = U{FV(xo-)
x variable}, and map variables to variables, since pi p is the identity on A. It
is now easy to construct a variable-permutation O which coincides with p' on
A.
7.2.4A. 4 Complete the proof of the lemma.
7.2.5. NOTATION. We call the expression t s an equivalence. We use
E, E', . . . for finite multisets of equivalences {t1 si, sn}. The
inconsistent multiset of equivalences is
7.2.6. DEFINITION. A substitution a unifies E or a is a unifier of E, if, for
each t s in E, to- E so-. No substitution unifies {1}.
is a relevant unifier of E, if dom(o-) C FV(E), ranv(o-) C FV(E).
is called a most general unifier (m.g.u. for short) if a is a unifier of E,
and for every other unifier T of E we have r < u.
o- is a unifier (most general unifier) of two atoms(P,t.., , 471),(2(81, , sn)
if P Q and n m, and a is a unifier (most general unifier) of { t1 Fze
si, , tm Re, sm}
REMARK. If o, a' are m.g.u.'s of an expression 0, and is t a term in 8, then
to and to-' are variants (since a = ode, a' = o-0', this follows by lemma 7.2.4).
EXAMPLE. {gx fy} has no unifier. {gx gfy, fy fgz} has a unifier
[x/fgz,y/gz]; this is an m.g.u., as we shall see.
7.2.7. DEFINITION. A substitution 0 is idempotent if 00 = O.
LEMMA. 0 idempotent iff dom(0) n ranv(0) = O.
PROOF. Let x E dom(0) n ranv(9), and ye = t with x E FV(t), then y(00) =
(y0)0 = te t = ye. Hence BO 0 O.
Conversely, if dom(0) n ranv(9) = 0, then, for all variables x, FV(x0) n
dom(9) = O. Hence (x0)0 = x0; therefore by (iii) 00 = O.
7.2.8. LEMMA. Let 0 be a unifier of 0. Then 0 is an idempotent m.g.u. iff
o- = 0o- for all unifiers of 8.
PROOF. Let o be unifier of 8. Since O is an m.g.u., we have o = OT for
some substitution T. Hence a = OT = 00r (idempotency) = Bo-. The other
direction is immediate, since 0 itself is one of the u. El
7.2. Unification 235
7.2.9. DEFINITION. Let E >, E' be defined by the following clauses:
f xl u E >,{xt} U E if t is not a variable;
{x x}U E >,E;
{f (81, , sn) f(t1,..., tn)} u E > {si ti, , sn U E, and
ff (si, , sn) g(ti, , t,n)} u E DE {1}, if f g;
t, s1R.% t1,... ,s Pe' tn}>[x it]
fsi[x/t] sn[x/t] tn[x/t11, if x FV(t), and
t} u E >, {_L}, if x E FV(t) and t # x.
7.2.10. LEMMA. Let E >p E'. Then
If o- unifies E', then po- unifies E.
If o- unifies E, then o- = po-, and o- also unifies E'.
PROOF. By case distinction according to the definition of E >p E'. The only
interesting case is the first part of (d) of the definition.
If a' is a unifier of E', then [x/t]o-' is a unifier of E.
Let o- be a unifier of E. Then xo- = tu, hence [x/t]o- = o- (since both
substitutions agree on all variables), and also si[x/t]o- = SO" = tu = ti[x/t]0-.
Hence u is also a unifier of E'.
7.2.11. THEOREM. (Unification) Let El be a finite multiset of equivalences.
Then a sequence E1 >pi E2 >p2 E3 . . . always terminates in an En which is
either the empty set or the inconsistent set. In the first case, p1p2p3... pn is
an idempotent and relevant most general unifier of El; in the second case, a
most general unifier does not exist.
PROOF. (i) The sequence El, E2, E3, . . . terminates. To see this, we assign to
a set of equivalences E a triple (ni, n2, n3) where ni is the number of variables
in E, n2 the total number of occurrences of function symbols in E, and n3 the
total number of equations of the form t = x in E, where t is not a variable.
Case (a) of the definition of r>p lowers n3, while n1, n2 remain the same; in
cases (b),(c) n2 is lowered and ni is not increased; in case (d) ni is lowered.
If the last En+1 = 0, then by (i) of the lemma pi... pn is a unifier of El.
If û is a unifier of E1, then û = pn0. This is proved by induction on n,
using (ii) of the preceding lemma.
If En+1 = {I}, E is not unifiable.
EXAMPLE. If we apply the algorithm to E1 = {gx ;:z.1 gfy, fy fgz}, we
obtain E1 >,{xPt; fy, f y fgz} >, {x fy,y gz} >[./fy] {y r&, gz}
0, producing an m.g.u. [x,y/fgz,gz].
236 Chapter 7. Resolution
F
NOTATION. We write mgu(E) for a most general unifier according to the
algorithm.
7.2.11A. 4 Decide whether the following sets of equivalences are unifiable, and
if this is the case, find an m.g.u.: {f (fx) gyz, hx f z}, {f (x,gx) f (y,y)},
If (hx,hv) f (h(gu),h(fuw)}, {h(x,gx,y) h(z,u,gu)} (f,g,h function sym-
bols).
7.3 Linear resolution
As in the preceding section, we have a fixed first-order language L which is
kept constant throughout the section.
7.3.1. DEFINITION. A Horn clause is a sequent of the form A1, , An B
with the Ai and B atomic; a definite Horn clause is a Horn °clause with B I.
We use di, possibly sub- or superscripted, for Horn clauses. If 71 (r B)
is a Horn clause, let 7-tv be a corresponding formula Vi(A r B) where
= FV (F B).
A definite program consists of a finite set of definite Horn clauses. We use
the letter P for programs. Pv = : 7-t E Pl.
A goal or query r is a finite set of atomic formulas A1, . , An, Ai I; a
corresponding goal formula is A r A, A ... A A. We use r, possibly sub-
or superscripted, for goals. The empty goal is denoted by [].
REMARK. If we think of r and the antecedent of a Horn clause as multisets,
the formulas A r and '1-1v are not determined uniquely, but only up to logical
equivalence. This will not affect the discussion below.
Definite Horn clauses A1, , An B are in the logic programming liter-
ature usually written as B: A1, , A.
7.3.2. DEFINITION. The unrestricted resolution rule Ru derives a goal r,
from a goal r and program P via a substitution 9 (r is derived unrestrictedly
from r and P via 0) if I' a A, A, if there is a variant 71' a A' B of a
clause 9-1 in P; û is a unifier of A and B, and r (A, A')O. We can write
F 71'
Ru, 0
or, not specifying the variant 71', we may also write
7.3. Linear resolution 237
In a still more precise notation, we may append the clause and/or the pro-
gram. The implication
A(Fi) A(FO)
is called the resultant of the Re-inference; if I' is empty, we also identify the
resultant with re.
The resolution ru/e R is the special case of Ru where the resultant is most
general among all possible resultants of unrestricted resolution with respect
to the same program clause and the same atom occurrence in the goal r,
that is to say, if A r * A ro' is another resultant relative to the same
rule and selected atom occurrence, then there is a substitution a such that
(A r' A ro)0. = A r' -4 Are'. We use
F
for a resolution step.
REMARK. It readily follows that r' in a resolution step is unique modulo
equivalence. For a resolution step it is not sufficient to require that we have
an Re-application with O an m.g.u. of A and B, as may be seen from the
following example. Consider a program {Dy Az} and an instance of Ru:
Cy, Ax Dy Az
R.,[z 1 x]
Cy, Dy
with resultant Cy A Dy > Cy A Ax. A more general resultant is Cy A Du -4
Cy A Ax, obtained from
Cy, Ax Du Az
Ru,[z / xi
Cy, Du
Given the possibility of an unrestricted resolution step w.r.t. a partial goal,
selection of atom in the goal, and rule from the program, a recipe for finding a
resolution step for the same choice of rule and atom is given by the following:
7.3.3. PROPOSMON. Let r, A be a goal, '14 a rule from the program P, and
let there exist an unrestricted resolution step w.r.t. '14 and atom A in the goal.
Then a resolution step for the same goal, and same choice of atom and rule, is
obtained by taking a variable-permutation a such that FV(1-1a)nFv(r) = 0,
and then constructing an m.g.u. O of A and B, where 1-lce = (A B).
7.3.3A. * Prove the proposition.
238 Chapter 7. Resolution
7.3.4. DEFINITION. An unrestricted resolution derivation from the program
P is a "linear" finite or infinite tree of the form
ro 7-to e
F1
0
r,
rn-i
ei
rn
with the Fi goals, Ili variants of program clauses, 0, substitutions, and each
rule an application of R. Instead of the tree notation, one usually writes
00 r, 01 020 >u 11 ±u I 2 7u
The resultant of a finite unrestricted derivation
F0 24. ... rn
is the implication
Arn -4 (AF°)M1 en-1'
7.3.5. It now seems natural to define a resolution derivation as an un-
restricted resolution derivation where each unrestricted resolution step is in
fact a resolution step. By this we expect to achieve that the resultant of any
finite subderivation is always most general. The following example, however,
shows that the requirement that every step is a resolution step is not quite
enough to achieve this. Consider the program {Py Rxy, Py}, and the
following derivation:
Rxy Py Rxy
e
Py Py
[ylx]
[1
Each step is a resolution step, and the computed substitution is [ylx] with
resultant Rxx. This is not a most general resultant, since the derivation
Rxy PyRxy
e
Py Pz
[Yizi
[1
produces the more general resultant Rxz. The difficulty is caused by the fact
that in the first derivation, the variable x, which disappeared at the first step
(was released), was reintroduced at the next by the substitution [ylx], and
therefore occurred in the resultant. This motivates the following:
7.3. Linear resolution 239
7.3.6. DEFINITION. A resolution derivation or SLD-derivation from P is
an unrestricted resolution derivation with all applications of Ru in fact appli-
cations of R, and such that the variant of the clause chosen at each step has
its free variables distinct from the free variables occurring in the resultant so
far.
REMARK. The variable condition will guarantee that among "similar" deriva-
tions the resultant at every step will be most general. Two derivations are
similar if they start from the same goal, and at each step the same clause is
applied in both derivations, to the corresponding atom occurrences. In the
set X of all derivations similar to a given derivation, a derivation 1, with res-
olution (instead of unrestricted resolution) will be most general in the sense
that the resultants of any derivation in X may be obtained by substitution
applied to the resultants of D. This question is treated in greater detail in,
for example, C. [1994]. The variable condition given is sufficient, but not
necessary, for this result.
The abbreviation "SLD" stands for "Selection-driven Linear resolution for
Definite clauses".
7.3.7. DEFINITION. An (unrestricted) resolution derivation is called (unre-
strictedly) successful if terminating in the empty goal, and (unrestrictedly)
unsuccessful, if terminating in a goal not permitting unification with the con-
clusion of a program clause.
A successful derivation via Be, , On_i starting from r ro using program
P yields a computed answer on PIP of the form 0. r Fv(ro)
7.3.8. DEFINITION. Let P be a program, r a goal; an answer to the query
rIP ("can goal I' be reached by program P?") is a substitution a with
dom(u) c Fyn; a correct answer to FIP is a a such that Pv (A no-. El
By the completeness theorem for classical logic r (A r)o- is equivalent
to r (A r)o- where k is the usual semantical consequence relation.
7.3.9. THEOREM. (Soundness for linear resolution) Every computed answer
is a correct answer.
PROOF. For any resolution step relative to a program P
I' A
we can obviously prove in minimal logic
240 Chapter 7. Resolution
since A A E P, and since r and iv must be of the form PB, (rA)0
respectively, with BB = AG. Hence, if we have an unrestricted resolution
derivation of goal rn from ro:
ro 7to
r1 G01-ti A
r2
rn._ un-1
rn
we have
Pv 1-7. A rn
Pv H. A rni. (An-2)en-2,
Pv A ri --+ (A0)90,
from which it readily follows that for all i, O < i < n,
2v 1-m A rn -4 (A ri)eiei+i en_i.
Hence, if rn is an empty goal,
'Pv I--, (A ro)90t91 en_i. [2]
7.3.10. The interesting aspect of linear resolution is that more is achieved
than just a refutation: there is also a computed substitution. This permits us
to use linear resolution for computations. Consider e.g. the following program
P+ in the language (sum, 0, S), where "sum" is a ternary relation, 0 a constant,
and S a unary function:
sum(x, 0, x)
sum(x, y, z) sum(x, Sy, Sz)
Suppose we take as goal sum(x, 3, y) (as usual, the numeral n abbreviates
S(S (SO)) (n occurrences of S). We get
sum(x, 3, y) (1/41 sum(x, 2, y)
sum(x, 1, Y)
sum(x, 0, y)
Eu/x1
[
with computed answer [y/SSSx]. That is to say, refuting Vxy -isum(x, 3, y)
provides an instantiation of 3xy sum(x, 3, y). A more complicated example is
given by the program P. which is P+ plus
mult(x, 0, 0)
mult(x, y, u), sum(u, x, z) mult(x, Sy, z)
en-1
7.3. Linear resolution 241
where "mult" is a new ternary relation added to the language. The following
is a derivation from Px
mult (3, 2, z)
[v/31
[u/Su]
u
[u/Su]
-+ u
[u/Su]
u
[u/01
[z1Sz]
u
[z /Sz]
u
[z /Sz]
-+ u
[z/31
mult (3, 1, u), sum(u, 3, z)
mult (3, 0, u), sum(u, 3, z), sum(v, 3, u)
sum(u, 3, z), sum(3, 3, u)
sum(Su, 3, z), sum(3, 2, Su)
sum(52u, 3, z), sum(3, 1, S2u)
sum(53u, 3, z), sum(3, 0, S3u)
sum(3, 3, z)
sum(3, 2, z)
sum(3, 1, z)
sum(3, 0, z)
sum(3, 0, 3)
[
with computed answer substitution [z/6]. That is to say, we have derived
mult (3, 2, 6).
7.3.10A. * Is the unrestricted derivation above also a SLD-derivation?
7.3.11. THEOREM. (Completeness of SLD-resolution) When Pv A Fa,
then there exists a successful SLD-deduction of r from P with computed
answer 0, such that there is a substitution -y such that ro- = ro-y.
PROOF. The proof uses the conservative extension result of theorem 6.7.5. If
Pv he A ro-, we have Nc Pv (A r)Cf; the deduction may be transformed
into a deduction in Nm in long normal form. By recursion on k we construct
SLD-derivations for pir, r -a ro of the form
741
nk-1
and substitutions -yrc, deductions N, for the atoms in rk-yr, such that
roc" -= roe() elc-1-YZ.
For k = 0 we take r a ro, u. So by soundness Ark --+ (A ro)00
rk
k -1
242 Chapter 7. Resolution
Suppose we have carried out the construction up to k, and Fk is not empty,
say Fk PA. By the IH, there is an Nm-deduction 7, of All in long normal
form from Tv in Nm, say with r nodes. The final step in 7, must be of the
form
74 Vi(A B)
VE
(A B)7- (A A)7. +EBT
where D' contains deductions of all atoms of AT with sum of sizes < r 1
nodes. Without loss of generality we may assume A B to be such that
B) is a variant of a clause in P with
(1) FV(7-4) n (Fv(rk) u Fv(reo Ok-1)) = O.
If we take
O := T rFAT (Hk) U 7; r (Fv(rk) u Fv(reo 0 k -1))
it follows that AO = BO. So we may add a step
rk 'Hk
rk+i k
such that a new resolution derivation results. The condition (1) implies that
the recipe of proposition 7.3.3 applies, i.e. that 7-lk can play the role of 7-la
0141+1in the proposition. Ok is an m.g.u. of A and B; = 0, for some 741.
Therefore
rk+17Z+1 = Ti, A)9k-YZ+1
= rovricr+i, At9041 re, At9 = AT'
hence reo ek_leofc+J. reo . ok_le reo Ok_il Po-. We now have
deductions in long normal form for the atoms in rk+11+1 with the total sum
of sizes of these deductions less than the size for Fog (these deductions are
encoded in D' above).
7.3.12. REMARKS. (i) Inspection of the proof shows that the choice of
the atom A in rk is irrelevant: the result will always be a successful SLD-
resolution.
(ii) From the proof we also see that a deduction 7, in long normal form
in Nm of A ro-, for a goal r, in an obvious way encodes an unrestricted
derivation of ro- If A ro- is, say, (A1 A A2)o-, the deduction must end with
7.4. From Gentzen system to resolution 243
VY(A A + B) D' Vg(A Ai --* B') Ty,(A B)u, VE (A A)a, (A A, B,)u VE
(A A')a"
Bo' B' o."
Bo-' A B' o-" (A1 A A2)a
Without loss of generality we can assume in il = 0, Aio- = Bo.' , A2o- = B' o-" ,
which translates into the beginning of an unrestricted derivation
A1, A2 ¿=B ,
Bo-' , Ao-' a A' B' an
which can be continued using V', D" in the same manner.
7.4 From Gentzen system to resolution
In this section P,Q , R will be positive literals.
7.4.1. At the end of section 7.1 we indicated how in propositional logic
cutfree deductions of an empty goal could be read as resolution derivations,
with "linear resolution", i.e. all program clauses were of the form r P, r
consisting of proposition letters only, or in one-sided notation ,1, P. So
the program clauses in linear resolution contain a single positive literal.
A more general form of propositional resolution is just Cut on literals:
r,P A, --,P
rA
We shall now describe a very simple method of transforming cutfree deduc-
tions of a GentzenSchiltte system GS5p for Cp into a sytem based on gen-
eral resolution. This method applies to program clauses of the form r A
(or in the form of a one-sided sequent, -ir, A).
The principal reason for discussing this very simple case is that it can serve
as an introduction to the more complicated case of intuitionistic propositional
logic, to be treated in the next section.
7.4.2. DEFINITION. The axioms and rules of GS5p are
Ax P, RA P'
A A, B
--,13
(r, A, A A B)
Rvi r'A' B r, A r,BRV2
244 Chapter 7. Resolution
Here (I') is the set corresponding to the multiset F. The system is not yet
closed under weakening; if we add weakening
RW
F,
we can always transform deductions such that weakening occurs only imme-
diately before the final conclusion.
7.4.2A. * Show that in GS5p plus RW the applications of RW can always be
moved to the bottom of the deduction. Show that GS5p + RW is equivalent to,
say, GS1p.
7.4.3. DEFINITION. A clause formula is a disjunction of literals (... (L1 V
...) V Ln). We identify clause formulas which differ only in the order of the
literals, and shall assume L1,. , Ln to be a set; this justifies the notation
without parentheses: L1 V ... V Ln. A clause is a finite set {L1, , Ln} of
literals. The number n of elements of the disjunction in a clause formula [the
number of elements in the clause] is called the length of the clause formula
[clause].
We might dispense with the separate syntactical category of clauses; but the
distinction is convenient in discussing the connection between resolution and
Gentzen system deductions in standard notation.
7.4.4. DEFINMON. (The resolution system Rep) In this system clauses are
derived from sets of clauses using the following axiom and rule:
Axiom P, RP,F P,
F, A
As before, "R" is called the resolution rule (but is in fact Cut on proposition
letters).
7.4.5. PROPOSMON. For each formula F constructed from literals using
V, A, there is a set of clause formulas Clause(F) and a proposition letter 1F
such that in'Cp F is derivable iff the sequent Clause(F) IF is derivable in
a Gentzen system for Cp.
PROOF. Let F be an arbitrary formula constructed from positive and negative
literals by means of V, A. With each subformula A of F we associate a
propositional variable IA, the label of A. For atomic formulas P we assume
P IF. For A a BA C, B V C, ,13 we let A* IB A lc, lBV le', Then
(1) lA i4 A*
7.4. From Gentzen systern to resolution 245
for all subformulas A of F guarantees that IA i4 A for all subformulas A of
F. The equivalences (1) may be expressed by a set of clause formulas FF of
length < 3 as follows: for each subformula A let CA C U C,
CAC := {-'1B V -11C V 1BAC}, GAC l'IBAC V 113)-11BAC V 10
C=BEVC := flBvc V -71B, IBvC V -110, eBvC := {1B V 1C V -11BVC}
:=PP V l,p}
The formulas in C correspond to A* 1A (with positive occurrence of lA),
and the formulas in CA- to lA A* (with negative occurrence of lA). If we
replace in rF IF all labels by the corresponding subformulas, all formulas
in F become true, hence F holds if F F IF holds. The converse is obvious.
NOTATION. If A A1,... An, we write /A for /Al, , /A
7.4.6. THEOREM. There is a mapping R which transforms any deduction
1, of Fr, in GS5p into a resolution proof R(D) of 1F1,... ,lF from C
:= U{Cla(Fi) : 1 < i < n}, where Cla(F) is the set of clauses corresponding
to Clause(F).
PROOF. The deduction in GS5p has at its nodes (multi)sets of subformulas
of F1, , F. We show by induction on the depth of the deduction that if the
multiset A has been derived, then in the resolution calculus we can derive lb,
from the clauses in C as axioms.
Case 1. An axiom P,,.13 translates into
/_,p, /p (input) /p, dp
1P 7 LP
where "(input)" means that the clause is an axiom clause from C.
Case 2. If the final rule in 1, is RVi, as on the left, we add to the derivation
in Rp existing by IH the part shown on the right:
/AvB,--dA (input) (ir, /A, /B)
1 AvB, 413 (input) (iAvn, 1B 7 lr
(r, A V B) (lAvB 7 lAVB )1r)
The cases of RV2, RV3 are simpler and left to the reader.
Case 3. Similarly if the last rule is RA:
1AAB,,1A, 11B (input) 1r, IA
r,A A,B (1)1ABI-11B,ir) la, IB
(1',A,A AB) (1AAB, ir, la)
246 Chapter 7. Resolution
7.4.6A. 4 What goes wrong in the argument above if GS5p has RVi, but not
RV2,RV3? What is the reason behind the choice of a context-free version of RA?
7.4.7. COROLLARY. The calculus Rcp is complete for Cp (in the sense that
there is a transformation of a formula F into a problem of deriving a letter
1F from a set of clauses, such that the the latter deduction is possible in Rcp
iff F was derivable in Cp).
7.4.8. REMARK. In dealing with predicate logic, a standard procedure is
to use "Skolemization": formulas are brought into prenex form, and existen-
tial quantifiers are eliminated by the introduction of new function symbols
("Skolem functions" ). But there is also a method, due to N. Zamov, which
avoids the process of prenexing and Skolemizing, and which is briefly sketched
here.
In predicate logic, literals are atomic formulas or their negations, and initial
clauses are disjunctions of literals L1 V ... V Ln (n > 2), or existentially
quantified disjunctions of literals Ay(Li V ... V Ln) (n > 2). Clauses are
simply disjunctions of literals (n arbitrary). (We make no distinction between
clauses and clause formulas in this description.)
In the spirit of proposition 7.4.5 one can show that there is a finite set ClaF
of initial clauses such that a formula F holds if the universal closure of ClaF
is inconsistent.
Resolution appears in two versions, namely as ordinary resolution
RLVC
(C V C9o-
with o an m.g.u. of the literals L, , and 3-resolution
3y(L V C) --11 V C'
.n3
(C V Clo-
where o is an m.g.u. of L, L' not containing the assignment y/t, and such
that (C V C')o- does not contain y.
7.5 Resolution for Ip
In this section P,Q,R.EPV.
7.5.1. We now apply the ideas of the preceding section in the more compli-
cated context of Ip. We start by introducing yet another variant of the intu-
itionistic Gentzen system, the system G5ip. The antecedents of sequents are
multisets. There is no weakening rule, but weakening has been built into some
7.5. Resolution for Ip 247
of the logical rules. There is also no separate contraction rule, but most of the
rules have contraction built explicitly into the conclusion. This is indicated by
putting parentheses around the multiset of the antecedent; thus in the conclu-
sions of the rules below, an expression like (F, F', , A, A', ...) indicates the
multiset obtained by taking the multiset union of r, , {A}, {A}, ... and
contracting whenever possible, i.e. all formulas in the union are contracted to
multiplicity one. In other words, (r) will be Set (F). Note that sets are repre-
sentable as multisets in which every formula has multiplicity one. The rules
below are such that in a deduction every multiset occurring in the antecedent
of a sequent is in fact a set.
DEFINITION. (The Gentzen systems G5ip, G5i) The system G5ip is given
by axioms and rules:
Axiom,s
Ax A A LJ_ _L =- A
Rules for the logical operators
oFA C F, C
Lni ' LA2
(r, Ao A AO C (r, Ao A Ai) C
r,A0,A1C FA A B
LA3
(r,A0 A A1) C RA(r, A) A A B
A,rC B,AC (i=0,1)LV(A v B, F, A) C Rvi rAovAi
FA B, C R1 A'1' B r BL-4
(1", A, A -4 B) C r A n-42--+B AB
The system can be extended to a system G5i for predicate logic by adding
LV
A[xIt], r B
RV
A[xIy]
(VxA,r) B r VxA
1,3
A[xly],r B
R3
r A[xlt]
(3xA,r) B rxA
where in L3, RV y 0 FV(F, A), and also y x or y FV(A). However, we
shall not discuss predicate logic in the remainder of this section.
G5i has the following property.
248 Chapter 7. Resolution
7.5.2. PROPOSITION. If we add the Weakening rule
F B
LW
A, F B
then any derivation in G5i + LW can be transformed into a derivation where
the only application of weakening appears just before the conclusion; the
ordering of the subtree of the prooftree consisting only of nodes where a
logical rule is applied, with the names of the rules attached to these nodes as
/abels, remains the same under this transformation.
PROOF. The proof is straightforward, by "pushing down" applications of LW.
The fact that there are several variants of certain rules, such as R> and LA,
which incorporate an element of weakening, makes this possible.
7.5.3. PROPOSITION. The system G5ip is equivalent to the system Glpi
in the following sense: if F =- A is provable in G5ip, then it is also provable
in Glpi, and if r A is provable in Glpi, then r A is provable in G5ip
for some r' c F.
7.5.4. DEFINITION. An intuitignistic clause is a sequent of one of the fol-
lowing forms (P1, . . P, treated as a set):
(P > Q) R, P (Q V R), , Pn Q
(P,Q,R,P1, .. ,P atomic). A clause is initial if it is of the first, second or
third type with n < 2. n = 0 is possible for clauses.
An intuitionistic clause formula is of the form
(P Q) R, P >(Q V R), (P2 . . .(P,,--*Q) . . .).
In the third case there corresponds more than one clause formula to a clause
(because of permutations of the Pi).
7.5.5. THEOREM. Let F be an arbitrary propositional formula, and suppose
that we have associated with each subformula A of F a propositional variable
1 A (the label of A). Then there is a set Clause(F) of initial clause formulas
involving only labels of subformulas of F such that
F iff Clause(F) 1F
PROOF. For atomic formulas A we may take IA A. For compound A of the
forms B V C, BA C, B > C we let A* be 1/3 V 1c, 1B A lc, 1B lc respectively.
The set of equivalences of the form
1 A <4 A*
A P
Res
(AA') Q
P, Q
with P, Q, R, S propositional variables.
7.5. Resolution for Ip 249
fixes the relationship between the formulas and their labels, and entails
IA ++ A
for all subformula,s A of F. We express A* --+ IA (where the label of A appears
positively) by a set of clause formulas C-Af-, and lA -+ A* (where IA appears
negatively) by a set of clause formulas C.
cIAD {/13,113 1BAD} CB- AD = {1BAD -+ 1B, 1BAD -+ 1D}
CiF3vD = {1B -+ 1BVD, 1D 1BVD} CB-VD = {1BVD 1B V 1D}
CD {(1B -+ 1D) 1B D} CB-+D = {1B-s D -+ (1B -+ D)}
Now take for Clause(F) the collection
U{C-IA: U CA- : A non-atomic subformula of F}.
Then we have: if Clause(F) lF, then F, for if we substitute A for the
IA everywhere, all the formulas of Clause(F) become true and lF becomes
F. Conversely, if F, the Clause(F) entails F 1F, so Clause(F) lF
follows.
REMARK. The theorem can be extended to sequents A F in a straight-
forward way.
7.5.6. DEFINITION. (The resolution calculus Rip)
Axioms
P P, P (A atomic).
Inference rules
r (P Q) R Q
-+
A R
([11 indicates that P may be present or not).
PQVR CS, P A",RS
Vr
(AA'A") S
250 Chapter 7. Resolution
7.5.7. THEOREM. For any 7, : F F in G5ip we may construct a deriva-
tion R(D) : A HRpi 1r 1F where lr 1E31, ,ln if F B1,. , Bn, and
A consists of all initial clauses corresponding to the initial clause formulas
constructed in 7.5.5.
PROOF. By induction on the length of D.
Basis. D is an axiom A A or I A. Then R(D) is the corresponding
axiom /A /A, I 1A
Induction step. We show below on the left the last rule application in D,
and on the right the corresponding final steps in R(D); if we have on the left
premises r A, A B etc. Then /r 1A, la IB are clauses derived by
the induction hypothesis.
1AAB lA 1A,1B,lr 113
A, B, F D Res
1AAB IB (1AAB,1B,1r) -1D
(A A B, F) D Res
(1AAB,11') 1D
FA B,AD
(A + F, D
1A-B,1A1B 1B, la
Res
1r /A (1A-03,111,11)
/71AsB) 1D
Res
A,r#.D B, A D 1Ava#.1A V 1B 1AvB#'1AvB 1A, /r 11, 1B, l#. in
(AvB,r,A) D (1Avs,lr,16,)#.1D
etc. The other cases are left to the reader.
7.5.8. THEOREM. Clause(F) HRip 1F iff G5ip F. z
7.5.9. LEMMA. Let D : r F in G1pi or G5ip. Then for any sequent
A1,. , A, B in D, the A, are negative subformulas of F or positive sub-
formulas of r, and B is a positive subformula of F or a negative subformula
of F.
PROOF. By inspection of the rules. z
7.5.10. COROLLARY. (Refinement) For anyt F, /et Clause*(A F) be
the set of initial clauses containing only the CA for A occurring positively in r
or negatively in F, and the CI for A occurring negatively in I' and positively
in F. If G5ip A F, then Clause*(A F) la 1F
PROOF. By inspection of the proof of 7.5.7 and the preceding lemma.
7.5. Resolution for Ip 251
7.5.11. EXAMPLE. We demonstrate the transformation of theorem 7.5.7 by
an example. Since in this example only --+ is involved as operator, we write
simply AB for A --* B. The purely implicational sequent (QP)R,QR, RP
P has the following deduction in G5ip:
Q Q R R
Q,QR R P-P
Q, QR, RP P R - R P P
QR, RP QP R, RP P
(QP)R, QR, RP P
By theorem 7.5.7, we can construct a deduction of
1(Qp)R,1QR,1Rp P
from clauses
lqp,l(Qp)R R
1QR,Q R
1Rp,R P
Q --* P lQp
The proof gives the following deduction in Rpi:
1QR,Q R R R
Q Q lQR, Q R
1QR,Q R
Q -4 P 1Qp 1QR,1Rp,Q P
1QR,1Rp 1Qp
1(Qp)R,1Rp,1QR P
where D is the deduction
R,1Rp P P P
P P R,1Rp P
l(Qp)R,lQp R R,lRp ZZP
1(Qp)R,1Qp,1Rp P
This can be simplified to
1QR,Q R 1Rp, R P
Q P 1Qp lQR,1RP,Q P 1(Qp)R,1Qp R R,lRp P
lQR,lRp 1Qp 1(Qp)R,1Qp,1Rp P
1(Qp)R,1Rp,1QR P
lRp,R P P P
lRp,R P
1)
252 Chapter 7. Resolution
7.5.12. Permutability of rules
We recall the definition 5.3.1 of the permutability of rules in Gentzen systems.
LEMMA. In G5ip the following permutation properties hold:
R+ permutes over LV, L-4;
LV permutes over L+, LV;
L--* permutes over L-4,
PROOF. By checking the various cases.
From now on, we consider deductions in G5ip with atomic instances of the
axioms only.
7.5.13. LEMMA. Let D be a (cutfree) deduction in G5ip of a sequent of
the form F P, P atomic, r a set of initial clause formulas. Then D can be
transformed into a deduction TY such that the following three conditions are
met.
An f.o. P Q is principal in the succedent if it is at the same time an
active formula of an L> application.
An f.o. P --+ Q y R is principal in the antecedent, and the active occur-
rence of Q V R in one of the premises is itself principal.
An fo. P (Q --+ R) is principal in the antecedent, and the active
occurrence of Q R is itself principal.
PROOF. We note that because of the subformula property, every succedent
formula must be of the form Q or Q > R, and an antecedent formula has
one of the following forms: Q, Q R, Q V R, Q (R 8), (Q --+ R) S,
Q > R y S; formulas of the last three forms belong to F.
We now extensively use permutability of rules, as follows.
Step 1. We permute any application of introducing a formula Q R
downward over LV, L> until we reach an application with Q R as
active formula. fi is easy to see that each permutation of this kind decreases
the number of occurrences of implications in the succedents of the deduction.
Note that premises of applications of L> with Q it or Q V R as active
formula on the left will have an atomic formula as succedent.
Step 2. If the deduction does not yet meet the second or third condition,
there will be applications of L> with an active formula occurrence of the
form Q R or Q V R on the left such that this active occurrence is not the
principal formula of an application of L-4 or LV. Such an occurrence and
7.5. Resolution for Ip 253
its ancestors we call "offending occurrences" . We apply induction w.r.t. the
number of offending occurrences of Q > R or Q V R. We search for a topmost
application of this kind, and permute it upwards over the preceding two rules
(L-4, L--* or LV, or R>, L-4) corresponding to an application of L+
meeting condition (i), (ii) or The number of offending occurrences of
the offending active formula Q V R or Q R will diminish by this procedure.
The final result will be a deduction meeting all requirements.
7.5.13A. 4 Check the cases of Step 2 in detail.
7.5.14. THEOREM. G5ip F- r* P iff r F-Rpi P.
PROOF. The direction from right to left is straightforward. Conversely, let
us assume G5ip F* P. We may assume this to have been proved by
a cutfree deduction D in standard form according to the preceding lemma.
Each sequent occurring in D will be of the form
E, A A
where E c F. We prove by induction on the depth of D that l IA is
derivable in Rip from r.
Case I. D is an axiom; trivial.
Case 2. Suppose the deduction ends with L> introducing (P Q) R E
r. Then the final part of the deduction has the form
E, [P] Q
E, A P Q R, A', E' P'
((P > Q) R, E, E'A, A') P'
with (P + Q) R E r. By III we have resolution proofs of
1r,[13] Q, R, P'.
We construct a resolution proof terminating in
P > Q lpQ 1A,[13] Q
IA R
(1,l) P'
Case 3. The deduction ends with L-4, introducing P (Q R) E r*; then
the final part of the deduction has the form
E', A' Q E", A",
E, A P (E', E", A', A", Q)
254 Chapter 7. Resolution
By 1H we have resolution proofs of
We construct from these a resolution proof terminating in:
P,
(Q , 1 a) R 1 a, Q
(1la,) R 1 , R P'
lpil P
Case 4. The deduction ends with LV introducing P (Q V R) E r*. The
final part of the deduction has the form
A', E', Q P' A", E", R P'
E P (A', A", E', E", Q V R) P'
(A, A', A", E, E', E", P --+ (Q + R)) P'
By DI we have resolution proofs of
/A P, la, Q ,
We construct from these a resolution proof by application of the V-rule:
PQVR la P P'
(la, ls,, P'
Case 5. The deduction ends with introduction of P Q E r* on the left:
A, E P A', Q R
(A, A', E, E', P Q) R
By Ifl we have resolution proofs of
/E P, 1E, , Q R.
We construct a resolution proof terminating in
lE P P Q
/E Q Q R
(1E , 1E,) R
etc.
7.5.14A. * Show by a direct argument that for the resolution calculus Rpi there
is a decision procedure for sequents.
7.6. Notes 255
7.5.14B. 4 Give deductions in Rpi of (P V Q R) (P R) A (Q R) and
(P (P Q)) (P (2).
7.6 Notes
There is a very extensive literature on resolution methods, theorem proving
and logic programming. Some good general sources are Lloyd [1987], Apt
[1990], Eisinger and Ohlbach [1993], Hodges [1993], C. [1994] and Jä.ger and
Stärk [1994]. For the older literature see Chang and Lee [1973]. For the
connection with Maslov's so-called "inverse method" , see Lifschitz [1989].
There are many important aspects of logic programming which have not
even been mentioned in this chapter. For example, there is an extensive
literature on the correct interpretation and handling of negation in logic pro-
gramming. (For a first orientation, see C. [1994].) Another example of a
neglected topic is the peculiarities of the search mechanism of languages such
as PROLOG, which are not reflected in the deduction systems considered in
this chapter. As to the possibility of expressing the search mechanism of
PROLOG and related languages in a deduction system, see, for example, Kals-
beek [1994,1995].
7.6.1. Unification. The first to give an algorithm for unification together
with an explicit proof of its completeness was J. A. Robinson [1965]. The idea
for the unification algorithm presented here goes back to Herbrand [1930, sec-
tion 2.4], where such an algorithm is sketched in a few lines. A full description
together with a proof of the termination and correctness of this algorithm is
first given in Martelli and Montanari [1982]; this proof has been followed
here. Cf. also C. [1994, 3.10]. More on unification may be found in Baader
and Siekmann [1994].
7.6.2. Resolution. The first to study resolution as a proof method in predi-
cate logic was J. A. Robinson [1965]. One of the earliest references for SLD-
resolution is Kowalski [1974]; around the same time PROLOG was developed
by a group around A. Colmerauer. The concise proof of completeness for
linear resolution given here is essentially due to Stärk [1990]; combination of
Stärk's proof with the proof of the conservative extension result in Schwicht-
enberg [1992] transforms it into a proof-theoretic reduction of completeness
for resolution to completeness for other systems.
The material in the last two sections is based on papers by Mints, in par-
ticular Mints [1990,1994b].
7.6.3. Languages suitable for logic programming. In the literature a good
deal of attention has been given to discovering languages suitable for logic
256 Chapter 7. Resolution
programming, and of greater expressive power than is provided by programs
consisting of definite clauses and goals which are conjunctions of atoms.
Generalization is possible in several ways. For example, one may enlarge
the classes of formulas which are used as goals and clauses of programs,
while keeping the notion of derivability standard, that is to say, classical.
A further generalization consists in considering also intuitionistic or minimal
derivability. A more radical move is the consideration of logical languages
with more or different logical operators, such as the languages of higher-order
logic and of linear logic.
A good example of such an investigation is Miller et al. [1991]. The idea in
this paper is to look for logical languages for which the "operational seman-
tics" (which provides the computational meaning and which is similar to the
BHK-interpretation of intuitionistic logic (2.5.1)) coincides with provability.
Let G be a goal formula, F be a program, specified as a finite set of formulas,
and let F H0 G express that our search mechanism succeeds with program F
for goal G. Then one requires for ho: F H0 T, r H0 G1 A G2 iff r Ho G1 and
rH0G2,rH0GivG2iffrH0GiorrH0G2,FH0D Giffru{D}H0G,
F H0]xA iff r A[xlt] for some term t, r Ho VxA iff r H0 A[xly] for some
variable y, not free in r or VxA, and free for x in A. As a formalization of
Ho one can take the notion of uniform provability in a Gentzen system. A
deduction is said to be uniform if, whenever in the course of the deduction
G is proved for a non-atomic goal G, the last step of the deduction
consists in the application of the right-introduction rule for the principal
operator in G.
One now looks for triples (T, G, I-) with V, F formula classes, and I- a
notion of derivability in a Gentzen system such that for r c F, G E g one
has r H0 G iff there is a uniform deduction of r G iff r G. Such
triples are called abstract programming languages in Miller et al. [1991].
A simple example is obtained by taking for H classical provability (say in
Glc), for G the class inductively characterized by
gaTIAtIGAGIGVG1 3xg,
where At is the class of atomic formulas, and for F the class characterized by
D = Atig> At I A I VxT.
The proof that this triple is an abstract programming language involves
showing that whenever a sequent of the right form is provable, it has a uniform
deduction; the argument uses the permutability of certain rules in the Gentzen
system (cf. 5.4.6B). Permutation arguments are also an important ingredient
of the papers mentioned below.
In Harland [1994], Hodas and Miller [1994], Miller [1994], and Pym and
Harland [1994] suitable (fragments of) linear logic are used as formalisms for
7.6. Notes 257
logic programming (references to related work in Hodas and Miller [1994]).
For examples of programming in such languages see Andreoli and Pareschi
[1991] and Hodas and Miller [1994].
Andreoli [1992] shows how by choosing an appropriate formalization of
linear logic one can greatly restrict the search space for deductions.
Chapter 8
Categorical logic
For this chapter preliminary knowledge of some basic notions of category
theory (as may be found, for example, in Mac Lane [1971], Blyth [1986],
McLarty [1992], Poigné [1992]) will facilitate understanding, but is not nec-
essary, since our treatment is self-contained. Familiarity with chapter 6 is
assumed.
In this chapter we introduce another type of formal system, inspired by
notions from category theory. The proofs in formalisms of this type may
be denoted by terms; the introduction of a suitable equivalence relation be-
tween these terms makes it possible to interpret them as arrows in a suitable
category.
In particular, we shall consider a system for minimal --+AT-logic connected
with a special cartesian closed category, namely the free cartesian closed
category over a countable discrete graph, to be denoted by CCC(PV). In
this category we have a decision problem: when are two arrows from A to B
the same?
This problem will be solved by establishing a correspondence between the
arrows of CCC(PV) and the terms of the extensional typed lambda calculus.
For this calculus we can prove strong normalization, and the decision problem
is thereby reduced to computing and comparing normal forms of terms of the
lambda calculus.
Another interesting application of this correspondence will be a proof of
a certain "coherence theorem" for CCC(PV). (A coherence theorem is a
theorem of the form: "between two objects satisfying certain conditions there
is at most one arrow".) The correspondence between lambda terms modulo
ßi-equality and arrows in CCC('PV) will enable us to use proof-theoretic
methods.
In this chapter P, P', P", Q, R E PV.
258
8.1. Deduction graphs 259
8.1 Deduction graphs
Deduction systems ("deduction graphs") inspired by category theory manip-
ulate 1-sequents. A 1-sequent is a sequent of the form A B. A sequent
B is interpreted as a sequent T B. Below we shall describe deduction
graphs for intuitionistic --+AT-logic.
8.1.1. DEFINITION. A deduction graph consists of a directed graph A =
(.40,A1) consisting of a set of objects (vertices, nodes) Ao and a set of arrows
(directed edges) A1 such that (writing f: A B or A 4. B for an arrow from
A to B)
If f:A B, g:B C, then there is an arrow g o f:A C, the
composition of f and g;
For each A E Ao there is an identity arrow idA: A A.
A is the domain of f: A B, and B is the codomain of f: A B. For the
set of arrows from A to B we also write Ai(A, B).
A tci-deduction graph or positive deduction graph ("tci" from "truth, con-
junction, implication") is a deduction graph A = (Ao, Ai.) with a special
object T E A0 (truth or the terminal object) and with the objects closed un-
der binary operations A, that is to say, if A,B E .40, then also AAB E Ao
(the product or conjunction of A and B), and A + B E Ao (the implication,
exponent or function object from A to B). There are some extra arrows and
arrow-constructors:
trA: A T (the truth arrow);
71-61'B: A A B A, riA'B: A A B B, and if f C A, g: C B , then
(f,g):C A A B. We shall sometimes use p(f, g) for (f, g);
(IT) evA,B: (A > B)AA B, and if h: CAB A then cur(h): C B > A.
("cur" is called the currying operator, "ev" is called evaluation.)
We shall frequently drop type superscripts, whenever we can do so without
danger of confusion. Instead of x: A, t: A we also write xA,tA. N
8.1.2. EXAMPLES. (a) We obtain a deductive system for minimal TA-4-
logic by taking as objects all formulas built from proposition variables and T
by means of A, and as arrows all arrows constructed from idA, trA, roA'B,
71-j.LB, eVA'B by closing under o, ( , ) and cur. The construction tree of an
arrow corresponds to a deduction tree, or alternatively, the expressions for
the arrows form a term system for deductions with axioms and rules:
idA: A A; trA: A T
260 Chapter 8. Categorical logic
t: A B s: B C
s o t: A C
A,B A B:.AAB -A; 71' :AABB
t:C A s:C B
(t,$):CAAB
evA'B: (A --+ B) A A B
t:AABC
cur (t): A B + C
A formula A is said to be derivable in this system if we can deduce a sequent
T A.
An example of a deduction, establishing associativity of conjunction (ab-
breviating "A AB" as "AB", and leaving out the terms 70 and and 7r1 for the
axioms to save space):
(DE)F DE DE =E
(DE)F DE DE D 71070: (DE)F E (DE)F F
irooro: (DE)F D Orioro, (DE)F EF
(DE)F D(EF)
where
ceD,E,F (70070, (71070, 71).))
Adding constants c: A B amounts to the addition of extra axioms. Note
that there may be different c for the same 1-sequent. Adding more than
one constant for the same 1-sequent may arise quite naturally: a particular
sequent may be assumed as axioms for different reasons, so to speak. Thus we
obtain T T both as tri- and as icIr. Adding "variable arrows" x: A B
corresponds to reasoning from assumptions A B. See also example (c)
below.
Given a directed graph A (A0, A1) we may construct a free deductive
graph FG(A) over A by taking as objects Ao, and as arrows the expressions
generated from elements of A1 and idA by means of composition; the elements
of A1 are treated as constants. Two arrows given by expressions are the same
iff they are literally identical as expressions.
The free tci-deduction graph D(A) over a directed graph A is ob-
tained similarly; objects are obtained from T and elements of Ao by clos-
ing under A, >. The arrows are obtained by adding to the arrows of A1
trA, idA 4,B,inB evA,B and closing under o, ( , ) and cur. If we take PV for
A, we are back at our first example.
8.1. Deduction graphs 261
8.1.2A. * Show that the free tci-deduction graph over the discrete graph of all
propositional variables is equivalent, as a deduction system, to one of the usual
formalisms for the TA>-fragment of minimal logic.
8.1.3. In systems of natural deduction, the reduction relation generated
by the usual conversions suggests an equivalence relation on the terms de-
noting deductions. Similarly we can impose identifications on the arrows of
deduction graphs and tci-deduction graphs; this time the identifications are
suggested by the notion of category and cartesian closed category respectively.
DEFINITION. A category A is a deduction graph such that the arrows satisfy
iden f o id A = f, ¡dB o f = f for every arrow f : A =- B,
ass f o(goh)=(fog)oh
for all arrows f:C D, g: B C, h: A =- B.
DEFINMON. A cartesian closed category (a "CCC" for short) is a tci-de-
duction graph which is a category and in which the arrows satisfy for all
f : A =. T:
true f = trA,
and for all f : C A, g: C B, h:C =- A A B:
proj (f7g) f5 o g) g5
surj (70h, 71h) = h,
and for all h:CAB=-A,k:CB+A:evcurLeVA'B o (cur(h) o 7ro 'CA CA), 7ri = ,
curev cur(evA,B o (k o 1-0", 7r1c'A)) = k.
REMARK. If we write f A g for (f o ro, g 01'0, the last set of equations reads
evo (cur(h) A id) = h, cur(ev o (k A id)) = k.
From this last equation follows cur(ev) = idA'B. The equation cur(evA2B) =
idB together with cur(h)ok = cur(ho(k Aid) again yields cur(evo (k Aid)) =
k.
262 Chapter 8. Categorical logic
8.1.4. EXAMPLES. (a) There are numerous examples of categories; they
abound in mathematics. A very important example is the category Set, with
as objects all sets, and as arrows from A to B all set-theoretic mappings
from A to B. Composition is the usual function composition, and idA is the
identity mapping on A. Set is made into a CCC by choosing a singleton set
as terminal object, say {0}. It is then obvious what to take for trA, since
there is no choice; for the product A A B we choose a fixed representation of
the cartesian product, say {(a, 0) : a E A} U {(b, 1) : b E B} where 0 = 0,
1 = {0}, and (x, y) is the set-theoretic ordered pair of x and y. A B is
the set of all functions from A to B. We leave it as an exercise to complete
the definition. Note that in this example elements of a set A are in bijective
correspondence with the arrows f : T A, and that there is a bijective
correspondence between the arrows from A to B and the elements of the
object A + B.
(b) Given a directed graph A a (A0, A1), we obtain a free category over A,
Cat(A), by taking as objects the objects of A, and as arrows the equivalence
classes of arrows in the free deduction graph over A. That is to say the
equality between arrows is the least equivalence satisfying
t o (s o r) (t o s) o r, t o id t, id o t t,
and congruence:
if t t', s s' then tos t' o s'.
In other words, equality between arrows can be proved from the axioms t o
(s o r) = (t o s) o r, t o id = t, id o t = t, t = t, by means of the rules
t = t' e = t" t = t' t = t' s = s'
t = t" t' = t tos=t'os'
Similarly we construct the free CCC(A) over A, by first constructing the free
tci-deduction graph and then imposing as equivalence on arrows the least
equivalence relation satisfying
t o (s o r) (t o s) o r, t o id t, id o t t,
f trA for all f : A T ,
7ro o (t, 8) Pz% t, ir o (t, s) s, (7ro o t, 7r1 o t,
ev o (cur(s) o 7r0, 7ri) s, cur(ev o (t o 70, 71)) t,
and the congruences
if t t', s s' then t o s Pe, t' o s' ,
if t t', s s' then (t, s) (t', s'),
cur(e).
8.1. Deduction graphs 263
Again this can be reformulated as: equality = between arrows can be proved
from axioms t = t, (7ro o t,7r1 o t) = t, ... by means of the rules
t = t' t' = t" t = t' t = t' s = s'
, etc.
t = t" t' =t (t,$) = (ti,s1)
An important special case of this construction is CCC(PV), where PV , the
collection of proposition variables, is interpreted as a discrete category with
no arrows and with PV as its objects.
8.1.4A. 4 Complete the definition of Set as a CCC.
REMARK. Free categories, graphs and CCC's may also be defined by cer-
tain universal properties, or via the left adjoint of a forgetful functor; but
since we concentrate here on the proof-theoretic aspects, while minimizing
the category-theoretic apparatus, we have chosen to define the free objects
by an explicit construction; cf. Lambek and Scott [1986, section 1.4].
8.1.5. LEMMA. The following identities hold in any CCC and will be fre-
quently used later on:
(f,g)oh= (foh,g0h),
ev(cur(f),g) = f (id, g),
cur( f) o g' = cur(f o (g' o 70,71)),
where f:A A B C, g: A B, g': A' A.
8.1.5A. 4 Prove this lemma.
8.1.6. DEFINITION. Two objects A, B in a category A (A0, A1) are
isomorphic, if there are arrows f : A B, g : B A such that g o f = idA,
f o g = idB. We write A B for "A and B are isomorphic".
One readily sees that if A A', B B', then there is a bijective cor-
respondence between the arrows from A to B and the arrows from A' to
B'
For example, the isomorphism A --+ T = T holds in every CCC. This is
verified as follows: trA-+T : A T T and cur(trTAA) : T A > T are
inverse to each other; trA-41- o f = trT = idT for every f : T A > T;
Aand cur(trTA) o trA'1- = cur(trT" o (trA'T A idA)) = cur(tr(A'1-)AA)
cur(evA'T,A) idA>T. We shall have occasion to use this isomorphism,
together with others mentioned in 8.1.6A below.
264 Chapter 8. Categorical logic
8.1.6A. 4 Show that in any CCC the following isomorphisms hold: A A B
B A A, T A - -A,(AAB)ACfL-AA(BAC),TA- -,A,A-1-- -T,
(C A A B) (C > A) A (C B), (B A C A) fL- B > (C A).
We note the following:
8.1.7. PROPOSITION. (One-to-one correspondence between Ai(A, B) and
(T, A + B)) In any tci-deduction graph there are operators E and
such that for f : A B, g : T A * B:
g : A B.
Moreover, in a CCC they satisfy:
f, rg^-n = g.
PROOF. Take
g ev, ocur(f AB (g o trA , idA).
8.1.7A. 4 Verify the required properties for r and as defined.
8.2 Lambda terms and combinators
In this section we construct a one-to-one correspondence between the arrows
of the free cartesian closed category over a countable discrete graph CCC(PV)
and the closed terms of the extensional typed lambda calculus with function
types and product types, A714A. This is the term calculus for -4A-Ni with
two extra conversions, namely n-conversion and surjectivity of pairing, in
prooftree form
D 7, D
A > B A' Dcont A1 A A2 A1 A A2, B A > B A1 A2
/1> B Ai A A2
We have already encountered the inverses of these transformations (so-called
expansions) in section 6.7.
8.2.1. DEFINITION. (The calculus )rp+AT) We introduce an extension of
A, with product types (conjunction types) and a type of truth T. The
type structure T---yAT corresponds with the objects of the free cartesian closed
category CCC(PV) over the countable discrete graph PV:
(i) T T, P E TAT for all p E PV.
cont
Ai A A2
8.2. Lambda terms and cornbinators 265
If A, B E 7-_,AT, then (A B), (A A B) E 7-4AT
Terms are given by the clauses:
There is a countably infinite supply of variables of each type;
*: T;
(y) if t: Ao A Ai, then pit: A (i E {0,1});
if t: A --+ B, s: A, then ts: B;
if t: A, s: B, then p(t, s): A A B; for p(t, s) we also write (t, s).
Axioms and rules for 07i-reduction are
true tT
ta[x/si,Ocon (AxA .tB)8A
?icon AxA.tx t (x FV(t)),
proj pi(toti) t, (i E {0, 1.}),
surj (pot, pit) t.
In addition we have
t »- s
(refl) t t (repl)
s[xlr]
where x in "repl" denotes any occurrence, free or bound, of the variable x. E]
The rule repl may be split into special cases:
t s »- t t' 8 -
p(t, 8) P(ti, ts »- ti
t e
Ax.t »- Ax.e
t »- t'
pit -; pit'
(i E 0,11)
Below we shall prove strong normalization for An_yA, extending the proof of
section 6.8 for A_,; by Newman's lemma (1.2.8) uniqueness of normal form
readily follows.
8.2.2. NOTATION. Below we shall very often drop o in the notation for
composition, and simply write tti for tot', whenever this can be done without
impairing readability. El
DEFINITION. An expression denoting an arrow in CCC(PV) is called a com-
binator. An A-combinator is a combinator in CCC(PV) constructed without
ev, cur,
266 Chapter 8. Categorical logic
8.2.3. THEOREM. Let A, B be conjunctions of propositional variables and
T, such that no propositional variable occurs twice in A and such that each
variable in B occurs in A. Then there is a unique A-combinator
e AB: A B.
Moreover, if A and B have the same variables, and also in B no variable
occurs twice, then AB is an isomorphism with inverse i3A
PROOF. We use a main induction on the depth 1B1 of B. If B = Bo AB1, we
put eAB := (eAB0) eABi) . For the basis case, B is either T or a propositional
variable. If B is T, take eAT := trA. If B is a P E PV, then B occurs as a
component of A and may be extracted by repeated use of Po, pi. This may
be shown by a subinduction on IA1: suppose A -a Ao A A1, then P occurs in
Ai for i = 0 or i = 1; take CAP eA,P7ri
The uniqueness of the A-combinator from A to B may be shown as fol-
lows. Again, the main induction is on IBI. Suppose [3: A B is another
A-combinator. If B Bo A B1, then ir i o A/3 : A =- B. By the IH it follows
that ir i o AB = 7rio 0, but then AB = (7ro eAB 71 0 eAB) = (70 o ß, 7ri. 0 0)
=
So we are left with the case of B prime. B = T is trivial; so consider
B = P for some variable P. We may assume that ß is written in such a way
that no associative regrouping 0' of ß (i.e. 13' obtained from i3 by repeated
use of the associativity for arrow composition) contains a subterm of one of
the forms 7ri o (t, s), id o t, t o id. Let 13 be written as (... (tot') tn) such
that no ti is of the form t' o t". tn cannot be of the form (t', t") , for then .B
could not be a variable, since this would require somewhere a projection 7ri
to appear in front of some (s', s") (use induction on n).
So either n = 1 and then ß = id = AB, or n> 1, and then tn 7r0 or
depending on whether, if A Ao A A,, P occurs in Ao or in Al. Suppose
tn 70, then (... (toti) tn_1) is an A-combinator of Ao P; now apply the
IH, and it follows that (... (toti) tn-i) -= Clop, hence ß = eitoP 01rO = CAP.
8.2.4. DEFINITION. Let
xi: Ai, , xn: An, CY Bi, , B,n
be lists of typed variables such that in e all variables are distinct, and such
that all variables in e' occur in 8. Put
G := (.. . (P1 A P2) Pa), 8' := ( (Q1 A Q2) Qn)
such that Q3 = P iff yi = xi. By theorem 8.2.3 there is a unique A-combinator
Now define ,800, as the combinator obtained by replacing pi by Ai in
the types of the components of eoc),. Furthermore put, for any list e:
Tx (idA)
rx(trA)
Tx (AB
rx((t 8))
Tx (eVA'B)
AX ,
:= *,
:= pixAAB
:= (TA Tx8) P(Txt, Tx8),
(pox(A-4B)AA)(pix(ArB)AA),
8.2. Lambda terms and combinators 267
e° := (... ((T A A1) A A2) ... A An). [s]
The following lemma is then readily checked.
8.2.5. LEMMA. Let 8, 8' be as above, 8" a permutation of 8.
/30,e = id; /3e,c13e,,,e = id; =
Sex,e,x = (00,e,70,7r].) if x 0 88';
= ,(30,e, o 4, where in OT each variable occurs exactly once,
and where 4 is a string of operators 7r0 of the appropriate types, of a
length equa/ to the length of T;
A) = 4 o /30,0,, where each variable in e'T also occurs in 8, and
where 741 is a string of operators 7r0 of the appropriate types, of a length
equal to the length of W. El
8.2.5A. * Prove the lemma.
8.2.6. DEFINITION. (Mapping T from arrows in CCC(PV) to typed terms)
The mapping r assigns a typed term tB [xA] to each arrow from A to B in the
CCC(PV). r(t) has at most one free variable. We write 7-y(t) to indicate that
y is the letter chosen to represent the variable free in the expression r(t).
Tx (cur(t4^13-4)) := AzB .(AyAAB .ryt)(xA z.13),
rx(t o s) := (Ay.ryt)rxs.
One should think of the variable x in r(t) as being bound, i.e. what re-
ally matters is Ax.rx(t). However, the use of Ax.rx(t) is less convenient in
computations. N
8.2.7. DEFINITION. (Mapping o from typed terms to arrows) Let tB be a
typed lambda term with its free variables contained in a list O. By induction
on It we define a combinator o-e(tB) : 8° B.
268 Chapter 8. Categorical logic
8.2.8. LEMMA. (7- preserves equality between combinators) For terms t,s
denoting arrows in CCC('PV) such that t = s we have r(t) = Tx(S).
PROOF. The proof is by induction on the depth of a prooftree for t = s. We
have to verify the statement for instances of the axioms, and show that the
property is transmitted by the rules. The latter is straightforward. For the
basis case of the axioms, we shall verify two complicated cases.
Case I. The axiom evcur. Let t: A A B C.
rx(ev(cur(t)70,71)) = (def. of T)
(Ay. (ev)) (Tx (cur(t)7o), Tx7ri) = (def. of T)
(Ay.poy(piy))(rx(cur(t)7ro), Tx7r1) = (Own, Prop
(rx(cur(t)70))(rx7i) = (def. of r)
(Ay.ry(cur(t))7x70)(PixA^B) = (def. of T)
(Ay! I Az.B .puAAB .Tu(t)) (yA zB)))(poxAA/3)(pixAAB) = (Own)
(AuAna. \/TA\ Pox, Pix) =
pkuAna.ruoxAAB =
Case 2. The axiom curev.
Tx(cur(ev(tro,r1))) = (def. of r)
zB (411AB .Ty (ev(tro, ri))(xA, zB), abbreviated (*).
We observe that
(ev(bro, 70) = (def. of T)
Au(B-4C)1\B.Tu(ev)Ty((bro,71)) = (def. of T)
(Au(B-W)AB .(POU) (P1u))(T0(bro),Ty7ri) = Pcon, Aron
AxA.Txt) (poyAAB) (pi yAAB
TY (t7r0 )7Y71 = (def. of 7) (
).
Therefore
Tx (cur (ev(tro, 70)) = (*) =
AzB.(AyAA.B., xA Txt)(POY)(PlY))(xA7 ZB) = (ficon, Proi)
A.0.(AxA.Txt)xAzB = (ßcon) AzB.Tx(t)zB = (ncon) Txt.
:= SyTexAcy,xA,
evA'B(o-et, o-es),
:= (Cret, eS),
CUr(Cf exA(tB)) (w.l.o.g. xA 6),
7rio-e(t) (i E {0, 1}),
tre°.
(ßeon) rut.
8.2. Lambda terms and combinators 269
Now
8.2.8A. * Complete the proof.
8.2.9. LEMMA. Let 8, 8' be lists of typed variables without repetitions,
such that all variables of e are in 8', and FV(t) is contained in8. Then
0-01(0 = Cle(t)ßyTel,yTo.
PROOF. By induction on Itl. We check one case. Let t a AxA.s. Then
ere, (t) = cur(o-cyxA(s)) = (IH)
cur(o-exA (s)Ou-re,xA,y-rexA) = (8.1.5)
cur (crexA (s))(ATcy,y-re)70 , iri) = (8.1.5)
cur(o-exA(s)),(3y-re,,y-re = cro(AxA.$),3y-re,,y-re (def. of o`). El
8.2.9A. * Complete the proof of the lemma.
8.2.10. LEMMA. (a® respects 0-conversion)
0.®((AxA.t.$)8A) 0.e(tn[xi v sA]).
PROOF. The proof proceeds by induction on Iti. We first note that
cre ((AxA.tB)sA) = ev(cur(o-e (tB)), o-es) = o-e(t)(id, o-es).
Hence we only need to show
o-ex(t)ry = o-e(t[x/s]) where 7 := (id, cre(s)).
If x is not free in t, then t[x/ s] E t, and o-exy = o-e70(id, o-e(s)) = o-e(t) =
o-e(t[x/s]). So we may concentrate on cases where x actually occurs free in t.
We check the most complicated case of the induction step, and leave the
other cases to the reader.
Case 1. Let t AyD.e.
aex(t)7 = (def. of u)
cur(o-oxy(e))7 = (8.1.5)
cur (o-oxy (e) (77o, 7r1)) =
(since Oz-rexml-eyx = ((rorch 7r1), mimo), and 8.2.9)
cur (o-eyx (e)((7ro7ro, 70, 7r1.7r0)) (Tiro , 7r1)
270 Chapter 8. Categorical logic
ueyx(e)((ro7ro,71),71.7ro) (77ro,71-1) = (8.1.5)
Ueyx(e) ((7o7ro, 71) (77o, 71), 717o (77ro 71)) = (8-1.5, Pron
Ueyx(e)((7ro7ro (77ro, 70,71(77o, 70), 7177o) = (Prop
0-eyx(e)((7roWro,71),71.77ro) = (def. of -y)
aeyx(e)(7ro(id,0-08)7ro,71),71(id, ues)7ro) = (Pron
aeyx (e)((7ro,71-1), ue (8)70) = (surj)
ueyx(e)(id, o-e(s)70) = (since o-e(s)7ro = o-ey(s) and 8.2.5)
Creyx (e) (id, o-oy(s)) = (by 1H) crey(tqx/s1) hence
a-e(t[x/s]) = cur(a-e0e[x/s]) = a-e(t)[x/s]. E
8.2.10A. 4 Do the remaining cases in the proof of the lemma.
8.2.11. LEMMA. (a- preserves 07i-equality) If for lambda terms t, t' we have
t = t', then for all appropriate O, cr®t = a-et'.
PROOF. We prove this by induction on the depth of a deduction of t = t'.
Preservation under the rules is easy; we also have to check that the property
holds for axioms. For example, if x FV(t),
a-e(Ax.tx) = (def. of u) cur(o-ox(tx) = (def. of u)
cur(ev(o-oxt, 0-ex)) = (8.2.9) cur(ev((aet)70,71)) = (8.1.5) o-et.
Also a-e((Ax.t)s) = a-e(t[x/s]) by lemma 8.2.10. Other cases are left to the
reader.
8.2.12. LEMMA. (ax is inverse to Tx modulo a projection)
crxA(rx(t)) = t7T'A.
PROOF. By induction on t. We check two difficult cases of the induction
step and leave the others to the reader.
Case I. Let t cur(s), s: A A B C.
crxrx(cur(s)) = (def. of T)
CI x()ZB .(ÀyAr13 .7-0)(xA zgk)) (def. of u)
cur(o-xz(AyA'1 .7-ys)(xA , zB))) = (def. of u)
cur(ev(o-x,(AyA'B.rys),o-x,(xA,zB))) = (def. of u)
cur(ev(cur(o-xnrys), Orgro, 70)).
Now observe that
axzy(TyS) = (8.2.9) (o-0rys)(7o7r0ro, mi) = (III)
8.3. Decidability of equality 271
Hence
cur(ev(cur(o-x,yrys), (717ro, 71))) =
cur(ev(cur(s71), (7170,71))) = (8.1.5)
cur (s71 (id, (7170, 7))) = (proj)
cur(s(7170,71)) = (8.1.5) cur(5)71.
Case 2. Let t s o s', s:C B, C.
o-xA(rx(ss')) = (def. of 7-)
o-xA((Ayc .rys)rxs') = (def. of u)
eVC'B(o-x(Ay.Ty8),CrxrxSt) = (def. of u)
e-vc,B (cur (o-xyry s), 0-sTxSt, abbreviated (*).
Observe that
xyry S = (8.2.9) o-yrys(7070,70 = (IH)
(7070, 7riTAA,C) TAA C(proj) s71 '
hence (*) is
evc,B(cur(o-xyrys), axrx5') = (8.1.5)
C B isrTAA,C s/rTAA,C%ev (cuR , Ì (8.1.5)
C g ,/ \ ,TAA,Cev cur 5 Pi (8.1.5) S o s/
73TAA,C.
8.2.12A. 4 Complete the proof.
8.2.13. THEOREM. For combinators t, s, t = s iff rx(t) = rx(s).
PROOF. If t = s then r(t) = rx(s) by lemma 8.2.8. If for two combinators
t, s: A B we have r(t) = rx(s), we have by lemma 8.2.11 o-x(rx(t)) =
ax(Tx(8)), hence t71 = s7i:T A A =. B (lemma 8.2.12). Therefore t
tri (trA , idA) = sri (trA, idA) = s.
8.3 Decidability of equality
We consider here the question of decidability of equality between combina-
tors. First of all, we note that we can restrict attention to the case where A
and B are objects of CCC(PV) which do not contain T. To see this, one ob-
serves that any object B constructed from PV, T by means of A, -4 is either
isomorphic to T or to an object B' not containing T. This follows from the
isomorphisms (cf. 8.1.6A):
A>T- T;
272 Chapter 8. Categorical logic
By the results of the preceding section, the problem is equivalent to comparing
closed terms in A71A. By proving strong normalization and uniqueness of
normal form for Arr.,A we obtain decidability between the lambda terms, hence
between the combinators. (In the calculus Aii,AT uniqueness of normal form
fails, see 8.3.6C.)
8.3.1. We extend the results of section 6.8 in a straightforward way; the
method uses a predicate "Comp" as before. We use -4, V and A also on the
metalevel, as in the following definition.
DEFINITION. For each formula (type) A in the A>--fragment we define the
computability predicate CompA, by induction on the complexity of A; for
prime A and A B > C the definition is as before (6.8.2), for A -= B A C
we put
ComPosnc (t) :=
SN(t) A Vtit"(t -- p(t', t") CompB (e) A Compc(t"))
8.3.2. LEMMA. The properties C1-4 of lemma 6.8.3 remain valid for CompA
PROOF. The proof proceeds by induction On the complexity of A, as before.
We have to consider one extra case for the induction step, namely where
AaBAC.
Cl is trivial in this case, since included in the definition.
If t h t*, then obviously ComPBAc(t*) since SN(t*) follows from SN(t)
and if e - p(t', t"), then also t »- p(t', t").
Assume Vti -- it(ComPanc(ti)), and t non-introduced, that is to say
not of the form p(t', t"). It is obvious from the assumption that SN(t). As-
sume t »- p(t', t") in n steps. n = 0 is excluded since t is non-introduced;
so there is a t1 such that t --1 t1 p(ti, t"); it now follows that CompB(e),
ComPc (t").
For the induction step where A a B C, we have to take 77-conversion
into account, but this does not change the proof.
8.3.3. LEMMA. VS E CompA (CompB (t[xls]) -4 Comp,4B (Ax.t) ) .
PROOF. We extend the proof of lemma 6.8.4. There is only one extra case if
(Àx.t)s >-1 t", namely
t a t'x, t" s.
But also in this case CompB(t") by the assumption.
8.3. Decidability of equality 273
8.3.4. LEMMA. CompB(t) A Compc(e) ComPBAc(P(t, ti))
PROOF. p(t, t') is strongly normalizable. For consider any reduction sequence
of p(t, t'):
t" a- p(t, t') »-i 4 ».-1 4 >--1
If there is no step in the sequence where
(1) 4 P(tn, tin) P(Pot41, Pot4i) t'941
occurs, the reduction sequence is essentially a combination of reduction se-
quences of t and t' and hence bounded in length by ht + he. If on the other
hand there is a first step as in (1), then the length of the reduction sequence
is bounded by ht + he + 1, since the reduction tree of t',/, is embedded in the
reduction tree of t.
Now assume p(t, t') p(s, s'). Then either this reduction is obtained by
reducing t to s and t' to s', and then CompB(s), Compc(s') follow; or the
reduction sequence proceeds as
P(t, t') P (Pot", Pit") - t" p(8, s'),
where t h pot", t' pit". But in this case, also t pot" »- pop(s,s') >--1 s,
t' »- pot" »- pip(s, s') »-i s', and therefore CompB(8), Compc(8').
8.3.5. THEOREM. All terms of An..+A are strongly computable under substi-
tution, and hence strongly normalizable.
PROOF. The proof extends the proof of section 6.8 by considering some extra
cases.
Case 4. t pot'. We have to show that for any substitution * with com-
putable terms, e is computable. e po(t'*), and by the induction hypothe-
sis t' is computable. So it suffices to show that whenever CompBAc (s), then
CompB(pos) for arbitrary s of type B A C. This is done by induction on h3.
Since pos is non-introduced, it suffices to prove CompB(t) for all t pos. If
t pos, then either
t p0(5') with s' s; then CompB(t) by induction hypothesis, or
s p(s', 3"), t s'; CompB(t) is now immediate from CompBAc(s).
Case 5. t pit' is treated symmetrically.
Case 6. t p(to, ti). We have to show that for a substitution * with com-
putable terms, e p(4, VI) is computable; but this now follows immediately
from the induction hypothesis plus lemma 8.3.4.
274 Chapter 8. Categorical logic
8.3.6. PROPOSITION. Y-1 is weakly confluent and hence normal forms in
)tiv,A are unique.
PROOF. The proof of this fact proceeds as for A, (cf. 1.2.11). Z
8.3.6A. 4 Prove the confluence of terms in Avv,A.
8.3.6B. 4 Show that in Arv,A long normal forms (cf. 6.7.2) are unique. Hint.
Show by induction on the complexity of t that if t,s are expanded normal and
t 8, then t -a s.
8.3.6C. 4 Give an example showing failure of confluence in An_.>AT. Hint. Con-
sider p(pot, pit) with pot or pit of type T, or AxA.tx with tx of type T, x 0 FV(t).
8.4 A coherence theorem for CCC's
Coherence theorems are theorems of the following type: given a free category
C of a certain type (here cartesian closed) and objects A, B of C satisfying
suitable conditions, there is exactly one combinator from A to B (modulo
equality of arrows in a category of the given type). In this section we prove
a coherence theorem for CCC(PV); the proof is based on Mints [19924
8.4.1. NOTATION. In this section we write I- I' A if A is deducible
from open assumptions I' in A>-Nm (cf. 2.1.8). In term notation we write
g: r t: A, or sometimes more compactly t[ fi': 1]: A or trill: A. We write
[x: B], il: I' A, or [x-B], il: I' A to indicate that the assumption xB may
be either present or absent. N
8.4.2. DEFINITION. A A>-formula A is balanced if no propositional variable
occurring in A has more than one occurrence with the same sign (so there
are at most two occurrences of any propositional variable, and if there are
two, they have opposite signs). A sequent I' A is balanced if the formula
A I' > A is balanced. El
The theorem which we shall prove is
8.4.3. THEOREM. (Coherence theorem) Let A, B be objects of CCC('PV)
not containing T. If A B is ba/anced, there is at most one combinator in
CCC(PV) from A to B.
The theorem is obviously false if we drop the condition of balance: in A there
are two distinct arrows f , g : Po A Po Po A Po, namely idP°^P° a (70, 71),
and (r1, 70). The theorem will first be proved for so-called 2-sequents.
8.4. A coherence theorem for CCC's 275
8.4.4. DEFINITION. A 2-sequent is a sequent of the form F R, where
each formula in F has one of the following forms:
P + P', (P P') + P", P" (P P'), P" P A P'
for distinct P, P', P" E PV
8.4.5. PRoPosiTioN. Let Y: F t: R be a /3n-normal deduction term for a
2-sequent. Then t has one of the following forms:
xR ,
xP'(Q--,R)trt?,
xQ-Rt?,
x(P-+Q)-4 R yP -4Q ,
x(P'Q)'R(AyP.t?),
x(P-sQ)-4R (yP' Q)tri
po (xP-rRAQtr or pi (xP'QARtp),
where t1, t2 are again normal.
PROOF. If t is not a variable (case (a)), t represents a deduction ending
in an E-rule; a main branch must therefore begin in an open assumption,
corresponding to a variable. Since R is a 2-sequent, we have the following
possibilities. In the first three cases we assume that the final rule is --+E.
The open assumption is of the form x(Q'R); this yields case (b).
The open assumption is of the form XP 41 (case (c)).
The open assumption is of the form x(Q)R, and t has the form
X(P-4Q)- RtP0-+Q . to may either be a variable (case (d)), or end with *I (case
(e)), or end with an E-rule. In the third subcase, the main branch of to mUst
start in an open assumption, i.e. a variable yPi -4(P ; this yields case (f) of
the proposition.
Now assume that the final E-rule is AE. The open assumption is of the
form P --+ R A Q or P --+ Q A R; this yields case (g). N
8.4.6. LEMMA. If F R, R E PV is derivable, then R has a positive
occurrence among the formulas of r.
PROOF. F R is intuitionistically true, hence classically true; if R has no
positive occurrences in F, we can take a valuation v with v(R) = I, v(Q) = T
for all Q distinct from R; this would make r true and R false.
276 Chapter 8. Categorical logic
8.4.7. LEMMA. Let 1: F t: R be a /3r-normal deduction term for a 2-
sequent. Then any propositional variable occurring negatively in F also occurs
positively in F.
PROOF. By induction on ti, using proposition 8.4.5 to distinguish cases. We
shall leave most of the cases to the reader.
Case (b). t x4R)trt? , t1, t2 also normal. For negative occurrences of
propositional variables in the sequents corresponding to t1, t2 we can therefore
apply the 1H. Q in the type of x is a negative occurrence; but il: t2: Q
plus the preceding lemma shows that r c r necessarily contains a positive
occurrence of Q. El
8.4.7A. 4 Do the remaining cases of the proof.
8.4.8. DEFINITION. Let S : F R be a balanced 2-sequent. An S-sequent
is a sequent Q where r' c r, Q occurs positively in S, and A is a list
of propositional variables such that if P E A then a formula (P P1) P2
occurs in F.
8.4.9. LEMMA. Let S: r R be a balanced 2-sequent, and let A E r be a
formula with a strictly positive occurrence of R. Then all positive occurrences
of R in the antecedent of any S-sequent are in a single occurrence of A.
PROOF. Strictly positive occurrence of R in A, A occurring in the antecedent
of a 2-sequent, means that A has one of the forms P --+ R, P' --+ R),
P >RAPI,P> P' A R. We argue by contradiction. Let r'A .0C2 be an
S-sequent containing a positive occurrence of R not in A.
The occurrence cannot be in ry, because then S would be unbalanced, since
C P. Also, the occurrence can not be in A, because then r would contain
P1) P2 for certain P1, P2, again making S unbalanced.
8.4.10. DEFINMON. An occurrence A E r, r R a 2-sequent, is called
redundant in the sequent if A contains a negative occurrence of R (so A is of
one of the forms R --> P2, Pi -+ (R -4 P2), (P1 -> R) P2, R (P1 -4 P2) ,
R Pi A P2).
8.4.11. LEMMA. Let S be a balanced 2-sequent, R an S-sequent,
g: r t: R a normal deduction term. Then r contains no redundant ele-
ments.
PROOF. We use induction on It', arguing by cases according to 8.4.5.
Case (a). t a xR. r R has no negative occurrences, hence no redundant
members.
8.4. A coherence theorem for CCC's 277
Case (b). t xR-4(Q-4R)tiRt?. Then [xP-4(Q-+R)], Fi ti: P and
[xP-4(42-'9,2': r2 t2: Q represent deductions of S-sequents, hence x must
be absent, by the IH. P -+ (Q R) contains a strictly positive occurrence
of R, so the preceding lemma applies and we see that r1, r2 contain no pos-
itive occurrences of R. And thus by lemma 8.4.7 there is also no negative
occurrence of R.
The other cases are left to the reader.
8.4.11A. é Do the remaining cases of the proof.
8.4.12. PROPOSITION. (Coherence for 2-sequents) Let F R be a bal-
anced 2-sequent, g: F' t: R, F" s: R normal deduction terms such that
r" c F , r) u (il: r") = 2 r for suitable g. Then I" = r" r and
t s.
PROOF. By induction on it + Isl. Assume iti> isi. We use a case distinction
according to proposition 8.4.5.
Case (a). t is a variable; then t xR s.
Case (b). Suppose t x)trt?. The term s' cannot have one of
the other forms, since this would yield that there were two distinct positive
occurrences of R in F. Therefore s sf4. Furthermore
[xP'(Q-'1)1, t1: P, [xP'()], g2: F t2: Q,
s 1: P, [x(')], s2: Q.
P -> (Q R) F Pisa (r R)-sequent. In this sequent P (Q --> R)
is redundant, since it contains a negative occurrence of P. Then M.:
t1: P, and similarly
il2 1- t2: Q, si: P, 1-i s2:Q.
It follows that ill: F U rg and p'2: F'2 U 2'2: are again balanced, and we
can apply the induction hypothesis.
Cases (c) and (d). Similar, and left to the reader.
Case (e). t x(R-'0'R(AyP.t?). The possibility that s falls under one of
the cases (a)-(c), (g) is readily excluded. For (e) we can argue as in case (b)
above, using the IH. The possibilities (d) and (f) can both be excluded; since
the argument is similar in both cases, we restrict ourselves to (f). So we have
s = x(P-40-+R(ypi-qP-+Q)(8/)Pi).
The terms t and s correspond to deductions
ti: Q z : P' (P Q) s' : P'
X: (P Q) -> R Ay.ti: P Q x: (P Q) -4 R zs': P Q
t
[(P + Q) --+ R], [P' + (P Q)], P'.
z: P' + (P Q) is redundant, hence absent in s'. But then x: (P --+ Q) R
is also absent, since Q is a negative occurrence in F, while another positive
occurrence outside R' (P --+ Q) ought to be present but cannot be present
since this would make F R unbalanced.
Among the assumptions of ti there must be positive occurrences of Q; also
c {(P --+ Q) --+ R, P' (P + Q),Fn U {(P Q) R,
But then these must coincide with P' --+ (P Q) in PI (otherwise there
would be two positive occurrences of Q in r); and since Q is strictly positive
in P' (P Q), this is the only occurrence in I). This would give as the
only possibility for ti
z: (P Q) t2:./31
zt2: P Q t3: P
ti (zt2)t3: Q
But again from the balancedness of F' R it follows that apart from the
occurrence of P in (P Q) > R there can be no other positive occurrence
of P in F. Hence t3: P must be the bound assumption variable yP , which
contradicts the 77-normality of t (for if t3 is not a variable, the main branch
of the subdeduction of t3: P must contain another positive occurrence of P).
The cases (f) and (g) are left to the reader.
8.4.12A. * Do the remaining cases of the proof.
8.4.13. Reduction to 2-sequents. Let us assign to a formula a "deviation"
which measures the deviation of the formula from a form which is acceptable
as antecedent formula in a 2-sequent:
dev(B > C) := IBI + dev(B A := IBI ICI + 1.
For a multiset F, let n be the maximum of the deviations of formulas in F,
and let m be the number of formula occurrences in r with deviation n. If we
replace, in a multiset with formulas of deviation > 0, a formula A of maximum
deviation by one or two formulas FA according to a suitably chosen line in
the table below, either n is lowered, or n stays the same and m is lowered.
DEFINITION. (Deviation reductions) A formula A which has a logical form
not permitted in the antecedent of a 2-sequent may be replaced by a set PA
278 Chapter 8. Categorical logic
s': P' is a normal deduction of
FA is not uniquely determined by A, but by A together with a subformula
occurrence B in A, which is represented in FA by a new propositional variable
P. In all cases except (d) the free variables of the OA are {y, .z}; in case (d)
y is the only free variable. Note that by a suitable substitution for the new
propositional variable P in rA we get A back.
Repeated application of appropriate deviation reductions to a multiset
results ultimately in a multiset A, from which I' is recoverable by a suitable
substitution in the propositional variables, and such that A consists of for-
mulas of one of the following forms only: P, P P', P (P' > P"),
(P > P') --+ P", P > P' A P". Thus A is almost the antecedent for a 2-
sequent, except that P, P', P" are not necessarily distinct. But further trans-
formation to a 2-sequent can be achieved, again using the replacements in the
table above; for example, (P P') --+ P' may be replaced by (P > Q) P',
Q P', with Q a fresh propositional variable. Summing up, we have shown:
LEMMA. Repeated replacement of formulas A by PA for a suitable choice
of reduction rule from the table above in a sequent A R terminates in a
2-sequent. N
8.4.14. LEmmA. Let A, PA and OA correspond according to one of the lines
of the table in the preceding definition. Let P be a propositional variable not
occurring in AA B. Let ft. be the new variables appearing as free variables
in OA. Then
(i) If AA B is balanced, so is B.
A rA sbA
(a) B -+ C B _), p, p _), c AuB .zp-W (yB-)PuB)
(b) (D -+ B) C B P,
(D Y P) -+ C
AuD-03 .z(D-)P)-W (AvD .yB-)P (uD-rB vD))
(C) (B -+ C) D P > B,
(P > C) Y D
AuB-W .z(P-W)-03 ovP .uB-)C (yP-)B vP))
(d) BACYD B>(C>D) AUBAC .yB-r(C-r.13)(pou)(piu)
(e) C > (D > B) C (D > P),
P > B
Au0AvD.z.13 (yC-)(D-)P)uC vD)
(f) B A C B,C 013,z9
(g), DBAC DPAC,
P Y B
Au]) 0P-r.13 (po (zD(PAC)u)), pi (zD-(PAC)uD))
(g), DCAB D>CAP,
P > B
AUD (po (z.D.(CAND) y P-03 (pi (zDr (CAP)up))
8.4. A coherence theorern for CCC's 279
with at most two elements; we also define for each replacement a term OA,
according to the following table. The propositional variable P is fresh.
280 Chapter 8. Categorical logic
If x: A, t: B, then 17: rA, t[x/ 0,4]: B.
If x: A, g: A t:B and x: A, il: s: B, then t =fln s iff t[x/0,1] =fln
S [XNA] and x is On-equal to some substitution instance of 0A[p/E] for
a suitable formula E.
Here OA[p[E] is obtained from OA by substituting in the the types of all vari-
ables (free and bound) of OA the formula E for the proposition variable P.
In fact, it will turn out that for E we can always take B as appearing in the
table of the preceding definition.
PRooF. (i) by direct verification. (ii) is obtained by combining ti: rA (here
77 are the free variables of OA) with x: A, il: A t: B (using closure under
substitution for prooftrees in N-systems).
Assume x: A, g: A t: B and x: A, g : A s: B. Suppose first t =on s.
Then t[x/ OA] =on s[x/OA] holds because [397-conversion is compatible with
substitution.
Conversely, suppose t[x/OA] =fln s[xAbA]. Choose a substitution of a for-
mula E for the propositional variable P in OA suc-h that A becomes logically
equivalent to the conjunction of r A[pi El (in fact, for E we can always take B
in the table of the preceding definition), and a substitution [q1] in (/) A{p E],
such that OA[pig[ii/r] =fln x. Then this shows that t =pn s. The appropri-
ate substitution [ft/f1 is defined according to the cases of the table in the
foregoing definition.
Case (a). A[P/B] Aus.zB>C(yrisus ) Substitution [y, z/AvA.t), XA-+B].
z(13)-C pkvD .yB-+B (11D-YB vB)).Case (b). OA[p/B]
Substitution [y, z pkwa .w x(D-g3)-495
Case (c). Similar to the preceding case, and left to the reader.
Case (d). There is no propositional substitution.
Substitution [y/AvBAwc.xBAC-+Dp(vB ,wC)].
+B) AwB.wi.Case (e). Substitution [y, z/x
Case (f). Substitution [y, z/poxBAC ,pixBAC].
D-4AB1Case (01. Substitution [y, z/AwB .w x C j for y, z.
Case (02. Similar to the preceding case. N
8.4.14A. 01 Check the missing details.
8.4.15. LEMMA. For any sequent A B, with A = A1, ,A, there are a
2-sequent r R, a sequence of terms s= sl, . . ,s,-, and a term r, in variables
el: r, such that
If 1: A t: B, then fi: r(t[Vg]): R.
If g: A t: B, g: A t': B, then t =on s ifir(t[g/3])., r(tIV§.1).
8.5. Notes 281
(iii) If A B is balanced, so is r R.
PROOF. We consider the sequent AB * R R (R a fresh propositional
variable). If A t: B then A, V: B R vt: R. Conversely, if
Y: Ls., y: B R vt: R, we can substitute B for P, AtoB .toB for y, and
we get Y: A t: B back, using the fact that AwB .wB : B -4 B and the fact
that the deduction terms are closed under substitution. Now repeatedly ap-
ply the preceding lemma to I: y: B R t: R until we have found a
2-sequent as in the statement of the lemma of 8.4.13.
8.4.16. Proof of the coherence theorem. This is now almost immediate: an
arbitrary combinator from A to B in CCC(PV) with A * E balanced is
representable by a lambda term; this may be seen as deduction term of a
sequent. Lambda terms for balanced r B are in bijective correspondence
with arrows for a suitable 2-sequent by the preceding lemma, and for arrows
between 2-sequents the coherence theorem was proved in proposition 8.4.12.
8.5 Notes
8.5.1. The presentation in the first section is inspired by Lambek and Scott
[1986], but in the next section, in the treatment of the correspondence between
terms in the .\it-calculus and arrows in the free cartesian closed category we
have followed Mints [1992b]. The treatment of strong normalization for typed
A71-+A extends the earlier proof for A. The first proof of the extension was
due to de Vrijer [1987]; a proof by a quite different method, reducing the *A-
case to the implication case, is given in Troelstra [1986], see also Troelstra
and van Dalen [1988, 9.2.16].
8.5.2. Coherence for CCC's. Mints [1979] indicated a short proof of the co-
herence theorem for cartesian closed categories for objects constructed with --*
alone; Babaev and Solovjov [1979] proved by a different method the coherence
theorem for -4A-objects. Mints [1992d] then observed that the properties of
the depth-reducing transformations (our lemmas 8.4.14, 8.4.15) established
in Solovjov [1979] could be used to give a simplified proof (similar to his proof
for the -4-case) for this result. The depth-reducing transformation as such
was already known to Wajsberg [1938], and to Rose [1953]. Our treatment
follows Mints [1992d], with a correction in proposition 8.4.12. (The correction
was formulated after exchanges between Mints, Solovjov and the authors.)
There are obvious connections between these results and certain results on
so-called BCK-logic. In particular, it follows from the -4A-coherence theorem
that for balanced implications *A-I is conservative over the corresponding
fragment of BCK-logic. See, for example, Ja6kowski [1963], Hirokawa [1992],
282 Chapter 8. Categorical logic
Hindley [1993]. In the direction of simple type theory, this "ramifies" into
theorems counting the number of different deductions of a formula (type).
8.5.3. Other coherence theorems. There is a host of coherence theorems for
various kinds of categories; some use, as for the result sketched here, proof-
theoretical methods, by reduction to a logical language (usually a fragment of
the typed lambda calculus), for example Mints [1977], Babaev and Solovjov
[1990]; others use very different methods, for example, Joyal and Street [1991].
In Kelly and Mac Lane [1971] the presentation of a coherence result for
closed categories is entirely in terms of categories. However, inspired by
Lambek [1968,1969], the proof uses an essential ingredient from proof theory,
namely cut elimination (cf. Kelly and Mac Lane [1971, p. 101]). The results of
Kelly and Mac Lane [1971] are extended and strengthened in Voreadou [1977]
and Solovjov [1997].
Lambek [1968,1969,1972] systematically explores the relationships between
certain types of categories and certain deductive systems, in the spirit of our
first section in this chapter. The first of these papers deals with categories
corresponding to the so-called Lambek calculus, the second paper deals with
closed categories, and the third paper with cartesian closed categories; it
contains a sketch of the connection between extensional typed combinatory
logic (which is equivalent to An) and arrows in the free CCC(PV). A different
treatment was given in Lambek [1974], Lambek and Scott [1986].
The link between (a suitable equivalence relation on) natural deduction
proofs and arrows in free cartesian closed categories was made more precise
in Mann [1975].
Curen [1985,1986] also investigated the connection between the typed
lambda calculus and CCC's; in these publications an intermediate system
has been interpolated between extensional A71 and the categorical combina-
tors. Hardin [1989] investigates ChurchRosser properties for (fragments of)
these calculi.
Chapter 9
Modal and linear logic
Another possible title for this chapter might have been "some non-standard
logics" , since its principal aim is to illustrate how the methods we introduced
for the standard logics M, I and C are applicable in different settings as well.
For the illustrations we have chosen two logics which are of considerable
interest in their own right: the wellknown modal logic S4, and linear logic.
For a long time modal logic used to be a fairly remote corner of logic. In
recent times the interest in modal and tense logics has increased considerably,
because of their usefulness in artificial intelligence and computer science. For
example, modal logics have been used (1) in modelling epistemic notions such
as belief and knowledge, (2) in the modelling of the behaviour of programs,
(3) in the theory of non-monotonic reasoning.
The language of modal logics is an extension of the language of first-order
predicate logic by one or more propositional operators, modal operators or
modalities. Nowadays modal logics are extremely diverse: several primitive
modalities, binary and ternary operators, intuitionistic logic as basis, etc. We
have chosen S4 as our example, since it has a fairly well-investigated proof
theory and provides us with the classic example of a modal embedding result:
intuitionistic logic can be faithfully embedded into S4 via a so-called modal
translation, a result presented in section 9.2.
Linear logic is one of the most interesting examples of what are often called
"substructural logics" logics which in their Gentzen systems do not have all
the structural rules of Weakening, Exchange and Contraction. Linear logic
has connections with S4 and is useful in analyzing the "fine-structure" of
deductions in C and I. In section 9.3 we introduce linear logic as a sequent
calculus Gel and sketch a proof of cut elimination, and demonstrate its ex-
pressive power by showing that intuitionistic linear logic can be faithfully
embedded in Gcl. The next section shows for the case of intuitionistic impli-
cation logic how linear logic may be used to obtain some fine-structure in our
standard logics. Finally we leave the domain of Gentzen-system techniques
and discuss the simplest case of proofnets for linear logic, which brings graph-
theoretic notions into play (section 9.5). Proofnets have been devised so as to
exploit as fully as possible the symmetries present in (classical) linear logic.
283
284 Chapter 9. Modal and lineariogic
9.1 The modal logic S4
The modal theory S4 discussed in this section includes quantifiers; for its
propositional part we write S4p. The language of S4 is obtained by adding
to the language of first-order predicate logic a unary propositional operator
D. DA may be read as "necessarily A" or "box A". The dual of D is 0; OA
is pronounced as "possibly A" or "diamond A"; OA may be defined in S4 as
9.1.1. DEFINITION. (Hilbert system Hs for the modal logic S4) A Hilbert
system for S4 is obtained by adding to the axiom schemas and rules for
classical logic Hc the schemas
DA -4 A (T-axioms)
D(A B) (DA -4 DB) (K-axioms, or normality axioms)
DA -4 ODA (4-axioms)
and the necessitation rule:
DI If I- A then F- OA.
The notion of a deduction from a set of assumptions r may be defined as
follows.
The sequence A1, , An is a deduction of r F- A (A from assumptions r)
if A An, and for all Ai either
Az E r, or
there are j, k <i such that Ak Ai, or
Ai Vx4i, j <i, x not free in r, or
Ai DAi, j < i, and there is a subsequence of A1, ,A which is a
derivation of I- A.
An alternative formulation of a "deduction from assumptions" is as follows:
a deduction is a tree constructed starting from (r, z sets of formulas)
r F- A (A E r) A (A axiom)
by means of rules.
r I- A -A
DI
P, B F- A I- DA
F- A r
-4E VI (x Fv(r))r VxA
9.1. The modal logic S4 285
REMARK. Instead of -4E, DI one usually talks about "modus ponens" and
"necessitation" (or "rule N") when discussing Hilbert systems. The designa-
tion "axiom K" or "K-axiom" ("K" from "Kripke") is standard in the litera-
ture on modal logics. "Axiom K" is also used in the literature for the axiom
(schema) A -+ (B A), because of the connection with the combinator
called K (in standard notation for combinatory logic) via the formulas-as-
types parallel. In order to avoid confusion we have used in this text k for the
combinator, and k-axiom for an axiom of the form A > (B -4 A).
9.1.2. LEMMA. The deduction theorem
If P,AF-B then FF-A-4B
and the generalization of DI
If 0131, ,OBH A then 0.131, , 0./3,1 I- OA
are derived rules in Hs.
PROOF. We leave the proof of the deduction theorem to the reader. The
generalization of the necessitation rule is proved by induction on n. Suppose
we have already derived for all or of length n that Or I- A or h DA.
Now let or, OA I- B. Then
or DA B (deduction theorem)
or I- 0(0A -4 B) (induction hypothesis)
or h DDA OB (normality axiom, modus ponens)
or H DA -4 OB (4-axiom, transitivity of >).
Hence with modus ponens and or, DA h DA we find or, DA I- OB.
REMARK. One often finds in the literature the notion of a deduction from
assumptions formulated without restriction on the rule DI, i.e.
F- A
r H DA
Let us write 1-* for the notion of deducibility with this more liberal rule of
necessitation. Forl-* we can prove only a "modal deduction theorem" , namely
If r, A F-* B, then r h* OA > B.
In fact,
F-* B iff 01'1-* B iff or B.
Of course, the generalized DI of the preceding lemma is now trivial. We
have chosen the definition in 9.1.1, because it is more convenient in proving
equivalences with Gentzen systems and systems of natural deduction.
286 Chapter 9. Modal and linear logic
In the notion of "deduction from assumptions" in first-order predicate logic
we formulated the rule VI as: "If F I- A, then F VxA, provided x FV(F)".
The variable restriction on VI is comparable to the restriction on DI (namely
that the premise of OI is derived without assumptions). An alternative version
of VI, "If F F- A, then r H VxA" without the condition "x Fv(r)" is
analogous to the strong version of DI considered above. The unrestricted
VI also entails a restriction on the deduction theorem, which now has to be
modified as "If F, A I- B then F H VA B" where VA is the universal closure
of A.
9.1.2A. 4 Defining "deduction from assumptions" as in the preceding remark,
prove the modal deduction theorem and the equivalences r H. B ifOr B iff
Or I- B.
9.1.2B. 4 Prove modal replacement for S4p in the following form:
0(A B) (F[A] F[B])
for arbitrary contexts F[*]. Refine this result similaxly to 2.1.811.
9.1.3. DEFINITION. (The Gentzen system Gis) This calculus is based on
the language of first-order predicate logic with two extra operators, O and O.
To the sequent rules of Gic we add
LO I"'
A =- A
RE
DF B, OA
F, DA =. A or DB, OA
or A OA r A, A
LO RO
OF, OA =. OA r OA, A
From these rules we easily prove OA 4--F as follows:
AA _1_
A,
A, 0-1A
OA, 0-,A
OA, 0-1A 1
OA =-
A A 1
A
-IA, OA
O-,A, OA _L
-11:1-1A OA
So it suffices to add LO, RO (with A = O in Ro), or LO, RO (with r = O in
LO).
9.1.3A. A Show the equivalence of the Hilbert system Hs with Gis in the fol-
lowing sense: treat 0 as defined and show r I-- A in Hs iff GYS A, for sets
r.
9.1. The modal logic S4 287
9.1.3B. 4 Formulate a one-sided sequent calculus for S4.
9.1.4. DEFINITION. (The Gentzen system G3s) A version of the sequent
calculus where Weakening and Contraction have been built into the other
rules is obtained by extending G3c with the following rules:
LO F' A'
OA A OF A, 0A
RO
r, DA A F', OF OA, 0A, A'
L
OF, A 0A r A, OA, A
O RO
F', DF, OA 0A, A' F OA, A
In order to retain the symmetry both 0 and 0 have been adopted as primi-
tives.
9.1.4A. 4 Prove that Contraction is derivable for G3s.
9.1.5. THEOREM. Cut elimination holds for G3s, Gis.
PROOF. For G3s, we can follow the model of the proof for G3c. Let us
consider the case where the cut formula DA is principal in both premises of
the Cut rule, so the deduction with a critical cut as last inference terminates
in
D1 D2
Or -} A, OA' F,A, OA A
F", or DA, OA', A" F, DA A
F, 1', DF' A, A", OA'
This is transformed into
Di
or A, OA' D2
D1 F", DF' DA, OA', A" r, A, DA A CutDF' A, OA' In r, DF', A A, OA', A"
CutF, 1', DF', DF'A, OA', OA', A"
The extra cut is of lower degree, and the rank of the subdeduction ending
in the cut of maximal degree is lower than in the original deduction. By
the induction hypothesis we know how to eliminate cuts from this deduction;
then we use closure under Contraction to obtain a cutfree deduction of the
original conclusion.
Cut elimination for Gis does not work directly, but via introduction of the
"Multicut" rule, as in 4.1.9.
IE
P° := P
_L°
(A A B)° := A° A B°
(A B)° := OA° V DB°
(A -4 := OA° B°
(3xJ1.)° := ]x1=1A°
(VxA)° := VxA°
p0 := OP
:=
(A A := A° A B°
(A V B)° := A° V B°
(A -+ D(A° B°)
(AxA)° := ]xA°
(VxA)° LIVxA°
9.2.2. PROPOSITION. The two versions of the modal embedding are equiv-
alent in the following sense: S4 I- OA° i4 A° and hence S4 I- Or° A° iff
S4 F- rci A°.
9.2.2A. 4 Prove OA° 44 A° by induction on the depth of A.
9.2.3. THEOREM. The embeddings ° and ° are sound, i.e. preserve de-
ducibility.
PROOF. It is completely straightforward to show, by induction on the length
of a deduction in G3i, that if G3i F- r A, then G3s A°. We
consider two typical cases of the induction step, namely where the last rule
in the G3i-deduction is L-4, R-4 respectively.
L-4: the deduction terminates with
r, B c
r, A B C
which is transformed into
r°, B°
r°, o(A° B°) A° r°, o(A° -4 B°), B° C°
r°, o(A° B°), A° -4 B° C°
288 Chapter 9. Modal and linear logic
9.1.5A. 4 Complete the proof of the theorem and describe cut elimination for
Gis with the help of "Multicut".
9.1.5B. 4 Formulate a G3-type system for the logic K, defined as S4, but with
only K-axioms, no T- and 4-axioms. Prove a cut elimination theorem for this
system.
9.2 Embedding intuitionistic logic into S4
9.2.1. DEFINITION. (The modal embedding): The embedding exists in sev-
eral variants. We describe a variant °, and a more familiar variant °. The
definition is by induction on the depth of formulas (P atomic, not I):
9.2. Ernbedding intuitionistic logic into S4 289
The transition marked by the dashed line is justified by a weakening trans-
formation applied to the proof of F°, .
R+: We use as a lemma, that DA° ÷-> A° for all A (proof by induction on
IAI). The deduction in G3i terminates in
r, A B
ro AD .4 Bo
Dro AD _+ Bo Cuts
Dro 0(A0 Bo)
Cuts
r° B°)
where the "Cuts" are cuts with standard deductions of DC° C°,
DC° (C E r).
So apart from these cuts, the transformation of deductions is straightfor-
ward. A direct proof of soundness for ° requires more complicated cuts. Z
9.2.3A. 4 Complete the proof.
9.2.4. More interesting is the proof of faithfulness of the embeddings. We
prove the faithfulness of ° via a number of lemmas.
DEFINITION. Let F be the fragment of S4 based on A, V, D. We
assign to each deduction D in the .F-fragment of G3s a grade p(D) which
counts the applications of rules in D other than R>, RA, RV. More precisely,
the assignment may be read off from the following schemas, where p, p' are
grades assigned to the premises, and the expression to the left of the conclu-
sion gives the grade of the conclusion, expressed in terms of the grade(s) of
the premises.
for LA,RV, LO, RD, LV
p + 1;
p : r , A p' B A,A p' , B
p + p' + 1 : F,AVBA p + p' + : F, A -4 B
p: F, A B , p: F A[xly],VxA, A
p : F A > B , p :F VxA, A
p :r A, A p' : F B , A
p + p' :F AAB, A
p(D) = 0 for an azdom D
:F
F A B
which is transformed into
r°, A°
290 Chapter 9. Modal and linear logic
9.2.5. LEMMA. (Inversion lemma) Let F-7, F A mean that F A can be
proved by a G3s-derivation D with p(D) < n, where the axioms have only
atomic principal formulas. Then
F =- A B, A iff I--n r, A =- B, A;
r A A B, A iff r A, A and I--n F B, A;
I-7, r VxA, A iff r A[x/y], A (y not free in F, A, VxA).
From this it follows that a cutfree derivation D of r A in the Y-fragment
may be assumed to consist of derivations of a number of sequents ri Ai,
with all formulas in Ai atomic, disjunctions, existential or modal, followed by
applications of RA, R-4 and RV only.
9.2.5A. * Prove the inversion lemma.
9.2.6. DEFINITION. A formula C is prim,itive if C is either atomic, or a
disjunction, or starts with an existential quantifier.
LEMMA. Let ° be the embedding of 9.2.1. Suppose we have derivations of
either
OF°, A° =- OA°, or
or., A. DA., B. (-.n primitive).
Then there are derivations of these sequents where any sequent with more
than one formula in the succedent has one of the following two forms:
DE., De., A with lei _> 1, A° primitive, or
D0, A0 =- De°, with ie > 2.
PROOF. We apply induction on p(D). If p(D) = 0, D is necessarily an axiom
and the result is trivial.
Suppose p(D) > 0. If a sequent of type (a) is the consequence of a right
rule, the rule must be RO; in this case A = 0, A = 1, hence the deduction
ends with
OF° A°
OF OA°
The premise has been obtained by application of RA, R-4 and RV from de-
ductions Di of Oil A, A7 primitive. Now apply the induction hypothesis
to the V.
9.2. Embedding intuitionistic logic into S4 291
If a sequent of type (b) is the conclusion of a right rule, the rule must
be RV or R. Consider the case where the rule is RV. Then the final rule
application is
OF° DA°, OB,
OF° DM, OB,3 V 0./3
We can then apply the IH to the premise. Similarly if the last rule applied
was R.
Now assume that a sequent of type (a) or (b) was obtained by a left rule,
for example
A°, OF° OA°, OA° A°, or°, B° DA°
A., or., DA. B. ono
Then we can apply the IH. Other cases are left to the reader.
9.2.7. DEFINITION. Let (a), (b), (i), (ii) be as in the preceding lemma.
Standard derivations are cutfree derivations with conclusions of type (a) or
(b) and each sequent with more than one formula in the succedent of types
(i) or (ii) only. 1E1
LEMMA. If G3s or. A°, then there is a cutfree derivation such that
all its applications of R-4, RV have at most one formula in the succedent.
PROOF. By the inversion lemma, OF° A° can be obtained from deductions
Di of oil il) with ./4.) primitive, using only R>, RA, RV, and by the
preceding lemma the Di may be assumed to be standard. So if we have
somewhere an application of R> or RV with more than one formula in the
succedent of the conclusion, the conclusion must be of one of the forms (i), (ii)
in the statement of the preceding lemma, which is obviously impossible.
9.2.8. THEOREM. (Faithfulness of the modal embedding)
G3s 1- Er A° iff G3s r° An iff Ip A r -+ A.
PROOF. The first equivalence has already been established, so it suffices to
show that if OF° A° then Ip I- A r -4 A. Now delete all modalities in
a standard derivation of OF° A'; then we find a derivation in a classical
sequent calculus in which all applications of R--+ and RV have one formula in
the succedent; it is easy to see that then all derivable sequents are intuition-
istically valid, by checking that, whenever I' A occurs in such a deduction,
then r provable in Ip (cf. 3.2.1A). N
292 Chapter 9. Modal and linear logic
9.3 Linear logic
There are several possible reasons for studying logics which are, relative to our
standard logics, "substructural", that is to say, when formulated as Gentzen
systems, do not have all the structural rules.
For example, in systems of relevance logic, one studies notions of formal
proof where in the proof of an implication the premise has to be used in an
essential way (the premise has to be relevant to the conclusion). In such
a logic we cannot have Weakening, since Weakening permits us to conclude
B --+ A from A; B does not enter into the argument at all. On the other
hand, Contraction is retained.
In the calculus of Lambek [1958], designed to model certain features of the
syntax of natural language, not only Weakening and Contraction are absent,
but Exchange as well. Therefore the Lambek calculus has two analogues
of implication, AIB and A\B. The rules for these operators are (r, A, A'
sequences, antecedents of sequents always inhabited)
A ABA' C
Ar(A\B)A' C
ir ABA1 C
A (A/B)rA' C
R'
ArB
'" 1 A\B
r AIB
In so-called BCK-logic, Weakening and Exchange are permitted, but Con-
traction is excluded (see, for example, Ono and Komori [1985]).
If we think of formulas, not as representing propositions, but as types of
information, and each occurrence of a formula A as representing a bit of
information of type A, we naturally may want to keep track of the use of
information; and then several occurrences of A are not equivalent to a single
occurrence. These considerations lead to linear logic, introduced in Girard
[1987a]. In the Gentzen system for linear logic we have neither Weakening
nor Contraction, but Exchange is implicitly assumed since in the sequents
A considered the r, A are multisets, not sequences.
From the viewpoint of structural proof theory, the most interesting aspect
of linear logic is that it can be used to obtain more insight into the systems
for the standard logics. This is illustrated in a simple case (intuitionistic
implication logic) in the next section. See in addition the literature mentioned
in the notes
9.3.1. Conjunction
In order to set the stage, we consider the rules for conjunction. For both the
left and the right rule two obvious possibilities present themselves:
LA
r A A
(i = 0, 1) LA' l''
Ao, Ai A
9.3. Linear logic 293
In the absence of the rules W and C, we have to consider four possible com-
binations: (LA,RA), (LA',RA), (LA,RA'), (LA',RA'). However, the second
and the third combination yield undesirable results: versions of Weakening
and/or Contraction become derivable. For example, combining LA' with RA
permits us to derive Contraction by one application of the Cut rule:
A
_AAAA F,AAALXr,,A
Therefore only the first and the fourth combination remain. It is easy to see
that for each of these combinations the crucial step in cut elimination, where
the cut formula has been active in both premises, is possible:
F Ao, r Ai, A r',A0
Ao A Ai A'
Cut
becomes
and
RA
rA0,z F Ai, A
F Ao A Ai,A
RA'
ro Ao, Ao
F0, F1 Ao A Ai, Ao,
r Ao, r Ai, r", Ao, A"
Ao A A1, A, A' F", A0 A Ai A"
Cutr" A, A', A"
becomes
F A0, A PI, A0, A1
Cut
Cutr,r",r" A, A', A"
"Context-free" or "context-sharing" becomes visible only in the case of rules
with several premises. But a secondary criterion is whether rules "mesh
together" in proving cut elimination. That is why LA' is to be regarded as
"context-free": its natural counterpart RA' is context-free.
9.3.1A. * Investigate the consequences of the second and third combinations of
conjunction rules in more detail; can you get full Weakening and Contraction?
r Ao6,
Cut
294 Chapter 9. Modal and linear logic
9.3.2. Gentzen systems for linear logic
In linear logic Weakening and Contraction are absent. As we have seen, in the
absence of these rules, the combinations LA, RA and LA', RA' characterize
two distinct analogues of conjunction: the context-free tensor (notation *),
with rules corresponding to (LA,RA), and the context-sharing and (notation
n) with rules corresponding to (LA',RA'). In a similar way V splits into
context-free par (-I-) and context-sharing or (Li), into context-free linear
implication (-0) and context-sharing additive implication (-4). There is a
single, involutory, negation
The logical constants T (true) and 1 (false) also split each into two op-
erators, namely T (true), 1 (unit) and 1 (false), 0 (zero) respectively. This
yields the following set of rules for the "pure" propositional part of classical
linear logic:
Logical axiom and Cut rule:
F A, A F', A
Ax A A Cut
Rules for the propositional constants:
r A
,A A A
Ln (2; 0,1) Rn
r
r,AonAl rAnB,A
L* r'A'B A R*r A,,6. I ' ' .13,A'
F,A*B A
r A ,6, r,B
Lu ' Ru ' (2 = 0,1)r,AuB,6, r AouAl, A
L+ R+
ri,BA,' l' A,B,A
r A+ B,A
r A,,6, r',B 'A R___, r,AB,A
L-0
r A,A r,B A rB,A, r,A=.A
L---> rt^'4r,,4---BA, riLl---4B,A r ,L1---B,A,
Li
r Rl 1
r,P
9.3. Linear logic 295
(no LT)
LO O
LI r,±
RT F T, A
(no RI)
It is routine to add rules for the quantifiers; in behaviour they are rather
like the context-sharing operators (no good context-free versions are known),
even if this is not "visible" since there are no multi-premise quantifier rules.
More interesting is the addition of two operators ! ("of course" or "storage")
and ? ("why not" or "reuse") which behave like the two S4-modalities 0, O.
These operators re-introduce Weakening and Contraction, but in a controlled
way, for specific formulas only. Intuitively "!A" means something like "A
can be used zero, one or more times", and "?A" means "A can be obtained
zero, one or more times". The rules express that for formulas !A we have
Weakening and Contraction on the left, and for ?A we have Weakening and
Contraction on the right.
Rules for the exponentials:
W! L! A R!
F A !F A,? C! r, !A, !A A
A
r, !A A r, !A A !A, ?A F, !A A
F A m A .`?A A, A ?A, A
W? L? ' R? C?
F ?A, A T, ?A ?A F ?A, A F ?A, A
DEFINITION. We denote the Gentzen system of classical linear logic by Gcl.
Intuitionistic linear logic Gil is the subsystem of Gcl where all succedents
contain at most one formula, and which does not contain ?, +, O, We use
CL, IL for the sets of sequents provable in Gcl and Gil respectively.
Rules for the quantifiers (y not free in F, A):
A[xI t]
LV
A
RV
A[x/y1, A
F, Vx A z FVxA,z
L3 F'
A[x I y] A
R3
F A[x t], A
F,3xAA 3xA,A
296 Chapter 9. Modal and linear logic
EXAMPLES. We give two examples of deductions in Gil:
AA B B
A1113 A AnBB
!(AnB) A !(AnB) B
!(AnB) !A !(AnB) !B
!(AnB),!(AnB) !A*!B
!(An B) !A *!B
AA CC B gc
(A--0C)n(B-0C),AC (A--0C)n(B--0C),C
(A--0C)n(B--0C),AuBC
(A-0C)n(B-0C) (AuB)-0C
(A 0 C) (B ---0 C) 0 ((A u B) 0 C)
9.3.3. De Morgan dualities
There is a great deal of redundancy in the very symmetric calculus Gcl: there
is a set of "De Morgan dualities" which permits the elimination of many
constants. Using I- A .#> B as abbreviation for "I- A B and I- B A",
we have
I- A *B -#> I- A + B ,B),
AnB I- A U B .#> ,(An B),
- A 0 B ,A+B, I-- A B ,AuB,
VxA <#;> 3xA
H !A A, I- ?A
The operators *, +, n and U are associative and commutative modulo ,#>, and
further n and U are idempotent modulo <*. The constants 0, 1, J_ and T
behave as neutral elements w.r.t. +,*, U and 11 respectively (i.e. I- A*1 <#. A,
I- A U .4.> A, etc.).
Exploiting the symmetries of the classical calculus, we can introduce a
system GScl which has one-sided sequents only, just like the GS-systems for
ordinary classical logic (9.3.3G).
9.3.3A. * Prove in Gcl the De Morgan dualities listed above.
9.3.3B. * Prove in Gcl for the relevant operators the associativity, idempotency,
comnfutativity, and neutral-element properties. Which of these properties also hold
in Gil?
9.3.3C. 4 Prove in Gil !A*!B !(AnB) and (A U B)* C (A* C)U (B *C).
Show that (A u B) n C (A n C) u (B n C) is not derivable in Gcl.
9.3. Linear logic 297
9.3.3D. 4 A natural deduction system for 0IL is given by the axioms and rules
(1)AA,(2)IfF,ABthenFA-0 B, (3)IfF=.AoBandAA
then FA B (r, A finite multisets). Prove equivalence with Gil.
9.3.3E. 4 Show that a Hilbert system for 0IL is obtained by taking the axiom
schemas (A 0 B) 0 ((B 0 C) 0 (A 0 C)) and [A 0 (B 0 C)] 0 [B 0
(A 0 C)], with modus ponens as deduction rule (Troelstra [1992a]). Hint. Use
the preceding exercise, and derive a deduction theorem for the Hilbert system.
9.3.3F. 4 The positive (2) and negative (./V) contexts in the language of linear
logic are defined as for the language of ordinary first-order logic, that is to say that
P AnPIPnAIA*PIP*AIA+PIP+Al AUP
= AnArpfnAIA*IVI.Af*AIA+Arl.Af+AlAuAr
Let F[*], G[*] be a positive and a negative context respectively, and let be a list
of variables free in B or C but bound in F[B] or F[C]; similarly, let 77 be a list
of variables free in E or C but bound in G[B] or G[C]. Ptove that in Gcl, Gil
without exponentials !,? (Troelstra [1992a, 3.10])
I-1 FIV,F(B 0 C) FEB] 0 F[C],
I- 1 nV7.7(B--0C) G[C] 0 G[B].
In the full theories we only have
If (B 0 C) then I- F[B] 0 F[C] and G[C] 0 G[B].
9.3.3G. 4 Write down a system GScl with one-sided sequents for CL, similar
to the GS-systems for C.
9.3.3H. 4 (Approximation theorem, Girard [1987a]) Prove the following result.
Let
!A := (1 nA)*... (n times ) ...* (1 nA)
?nA := (0 Li A) + (n times )...+ (0 u A).
Suppose that we have shown GScl r (GScl as in the preceding exercise), and
assume each occurrence a of ! in I' to have been assigned a label n(a) E 11\1 \ {0}.
Then we can assign to each occurrence ß of ? a label n(0) E DI \ {0} such that if
F' is obtained from r by replacing every occurrence a of ! and every occurrence
0 of ? by !n(,), ?7,(3) respectively, then in GScl without !, ? we have I- v. Hint.
Use induction on the depth of deductions, staxting from atomic instances of the
axioms, and use the monotonicity laws of exercise 9.3.3F.
298 Chapter 9. Modal and linear logic
9.3.4. THEOREM. Cut elimination holds for Gcl and Gil.
PROOF. The proof is more or less standard, and similar to the proof for G3s.
However, we cannot "absorb contraction", so we need an analogue of the
Multicut rule. For example, one would like to replace
D'
!r A, ?A F', !A, !A
!F -!A, ?A F', !A
!F, F' -`:?A, A' Cut
by
!r A, ?A D'
!r A, ?A !r ?A P, !A, !A A'
Cut
!F -!A, ?A !A, !F, -`?A, A'
Cut
F, !F, ?LX, ?A, A'
C!,C?
T, A'
where the double line stands for a number of C!- and C?-applications. This
does not work because the lower cut will have the same height as the original
one. The solution is to permit certain derivable generalizations of the Cut
rule, similar to "Multicut":
A, !A r, (!A)n, -!A, A'
Cut! (n > 1)
r, A, A'
(?A), A I'', ?A A'
Cut? (n > 1)
r, F'
Let us write "Cut*" for either Cut?, Cut!, or Cut. Now we can transform the
deduction above into
!r A, ?A D'
!r -!A, ?A ri, !A, !A A'
F, Cut!! -?A, A'
If the cutformula is not principal in at least one of the premises of the terminal
cut, we have to permute Cut* upwards over a premise where the cut formula is
not principal. This works as usual, except where the Cut* involved is Cut! or
Cut? and the multiset (!A)'2 or (?A) removed by Cut! or Cut? is derived from
two premises of a context-free rule (R*, L+, L-0 or Cut*); a representative
example is
F, (!A)P A, B F', (!A)q A', C
r" !A, A" 1", ri, (!A)P+q A, A', B * C
Cut*
*
9.3. Linear logic 299
If either p = 0 or q = 0, there is no difficulty in permuting Cut! upwards on
the right. But if p, q > 0, then in this case cutting F" !A, A" with both the
upper sequents on the right, followed by R*, leaves us with duplicated F", A".
To get out of this difficulty, we look at the premise on the left. There are two
possibilities. If !A is not principal in the left hand premise of the Cut!, we can
permute Cut! upwards on the left. The obstacle which prevented permuting
with the right premise does not occur here, since only a single occurrence of
!A is involved. On the other hand, if !A is principal in the left hand premise,
we must have r" !F", A" ?A" for suitable F", A", and we may cut with
the upper sequents on the right, followed by contractions of !r-, r" into !r-
and of ?A'", ?A" into ?A", and an application of the multiplicative rule (R*
in our example).
9.3.4A. 4 Complete the proof (cf. Lincoln et al. [1992]).
9.3.4B. 4 Devise a variant of Gcl where the W- and C-rules for the exponentials
have been absorbed into the other rules, and which permits cut elimination. Hint.
Cf. G3s.
9.3.5. PROPOSMON. A fragment of CL determined by a subset of {*,
0, n, u, 1, 1, T, V, 2, !} is conservative over IL (i.e. if CL restricted to
proves A, then so does IL restricted to L) iff L does not include both 0 and
I.
PROOF. .@ Suppose that J.. is not in L, let D be a cutfree deduction of
F A, and assume that D contains a sequent with a succedent consisting
of more than one formula. This can happen only if there is an application of
L-0 of the form r A, C , B
r,r,,A-0/3 C
We can then find a branch in the deduction tree with empty succedents only.
This branch must end in an axiom with empty succedent, which can only
be LO or LI. The first possibility is excluded since the whole deduction is
carried out in a sublanguage of Gil; the second possibility is excluded by
assumption.
If 0 is not in L, we can prove, by a straightforward induction on the length
of a cutfree deduction of a sequent A B, that all sequents in the deduction
have a single consequent.
As to the converse, in the fragment {o, 1} of Gel we can prove
(P, Q, R, S atomic)
P 0 ((± ---0 Q) 0 R), (P 0 S) --o R
This sequent does not have a cutfree deduction in Gil. E]
300 Chapter 9. Modal and linear logic
9.3.5A. 4 Construct a Gcl-derivation for the sequent mentioned in the proof.
9.3.6. DEFINITION. The Girard embedding of I into CL is defined by
:= P (P atomic),
J_
(A A B)* := A* n B*,
(A V B)* := !A* LJ !B*,
(A B)* := !A* 0 B*,
(AxA)* := ]x!A*,
(VxA)* := VxA*.
CL is at least as expressive as the standard logics, as shown by the following
result:
9.3.7. THEOREM. If Gcl h F* A*, then Gli r A.
PROOF. Almost immediate from the observations that (1) if we replace n, u,!
by A, V, El in the *-clauses, and we read ° for *, we obtain the.faithful embed-
ding of I into S4 of 9.2.1, and (2) ! behaves like El in S4, and all the laws
for V, A, 0,11, ±, 1 in Gel are also laws for their analogues V, 3, -4, A, V, _L
in S4. This second fact has as a consequence that if Gcl h r* A*, then
S4 I r° A° for the modal embedding °, hence G1i r A.
9.4 A system with privileged formulas
In this section we illustrate how linear logic may be used to encode "fine struc-
ture" of Glc and G1i. We consider a version of the intuitionistic Gentzen
system for implication, rather similar to >h-GKi of 6.3.5, in which at most
one of the antecedent formulas is "privileged". That is to say, sequents are
of the form
11; 1. A, with 1111 < 1.
So H contains at most one formula. To improve readability we write ; r
(H; -) for a11; r with empty II (empty 1'). The rules are suggested by thinking
of H; F A as H*, A* in linear logic, where * is the Girard embedding.
9.4.1. DEFINMON. The system IU ("U" from "universal") is given by
Axioms
A; A
Logical rules
;FA B;ri C
L.4 R+ 11' r'A BH;rA-4./3
9.4. A system with privileged formulas 301
Structural rules
LW II"
r A
LC
ri; r'B'B A D B"r AII;r,B ;B,r
REMARK. An equivalent system is obtained by taking the context-sharing
version of L*. Observe also that A B can never be introduced by L*, if B
has been introduced by Weakening or Contraction. Thus deleting semicolons
in all sequents of an IU-proof, we have, modulo some repetitions caused by
D, a restricted kind of intuitionistic deduction.
9.4.2. PROPOSMON. The system TU is closed under the rules "Headcut"
(Cuth) and "Midcut" (Cut,n):
II; F A A; ri B ;FA II; A, r B
Cuth Cutm
By 1H we have in TU
and
So we cannot apply L--> directly, since this would require a premise B; r C.
However, we can derive ;
A;- A;AA B;.B
A*B;AB
and then we may construct a derivation with the help of cuts
B
uutni , B C cutm
C
LC;r,A>BC
ri; r, B
9.4.2A. 4 Show that TU is closed under Cuth and Cutm.
9.4.3. THEOREM. If Gli r A then TU ; r A.
PROOF. By induction on the length of deductions D of A in Gli.
Problems can arise only when the last rule in D is 1,--> or LV. So suppose 1,
to end with
P B
302 Chapter 9. Modal and linear logic
As noted above, the rule L+ of TU is motivated by the Girard embedding:
if we read B; r C as B*, !F* C*, it precisely corresponds to
!F* A*
!F* -!A* !A*, B* C*
leads to
!C* !C* B* B*
!C*, !C* 0 B* B*
!(!C* 0 B*), !C* B*
!(!C* --o B'), !C* !B*
!(!C* 0 B*) !C* !B*
!F*, !A*, !A* 0 B* C*
It is easy to see that the soundness of * for TU can be proved by a straightfor-
ward step-by-step deduction transformation, without the need for auxiliary
cuts.
This contrasts with the proof of soundness of * for Gli. In that case we
need cuts to correct matters (cf. the proof of 9.2.3). For example,
AA
C=C B,AA
C , C B , A A
!C* !C*
!C*, !C* 0
!C*, !(!C* --o B), !A* A*
A* A*
!A* A*
!B*, !A* A*
!B*, !A* A*
Cut
After translating and eliminating the auxiliary cut we are left with
A* A*
!A* A*
!C*, !(!C* 0 B*), !A* A*
deriving from a deduction with weakenings alone, not requiring auxiliary
cuts under translation. This suggests that translated deductions of Gli after
elimination of the auxiliary cuts will correspond to deductions in TU; this
impression is confirmed by the following result.
9.4.4. PROPOSITION. If D is a deduction in the !-0-fragment of Gcl of
a sequent II*, T* !E*, A*, where all cutformulas are of the form A* or
!A*, and all identity axioms of the form A* A*, then the skeleton of D,
sk(D), obtained by replacing sequents II*, !F* !E*, A* by 11; r E, A, is
an TU-deduction modulo possible repetitions of sequents.
PROOF. We prove the statement of the theorem, together with III U El < 1
and IE U AI < 1 simultaneously by induction on the length of D.
Basis. For an axiom A* A*, with skeleton ; A A, all conditions are
met.
9.5. Proofnets 303
Induction step. Case 1. Suppose the last step is L-0:
!E*0`, A*0` B*, !ET, AT
lit, HI, !A* 0 B*, !Ft, !r1. !E:, !ET, At
With the IH we see that
Fli = Eo = Ao = 0, lEi U Ail = 1.
Case 2. Suppose the last rule is L!, so 7, ends with
II*, A*, !r* !E*, A*
II*, !A*, !F* !E*, A*
So by IH 1E U = 1, 1E1 = 0, hence 1A1 = 1, and hence A; r A; then
; A, F A by dereliction D.
Case 3. The last step is R!
!r* A*
!F* !A*
By the IH we can derive ; r A which is the skeleton of the conclusion. El
9.4.4A. A Extend IU so as to cover the other propositional operators as well.
9.5 Proofnets
9.5.1. In this section we present Girard's notion of proofnet for the context-
free ("multiplicative") fragment containing only +,* as operators, and as a
defined operation; formulas are constructed from positive literals P,Q,P',...
and negative literals by means of + and *, using the De
Morgan symmetries of 9.3.3 for defining -,A for compound A (as with the
GS-calculi for C). As our starting point we take the one-sided Gentzen system
for this fragment, with axioms and rules
AA A'r
B,
1"A ABF ,A
,
,A
Cut
A * B, r, A A , r r, A
Just as in the Gentzen systems for our standard logics, cutfree sequent proofs
may differ in the order of the application of the rules, e.g. the two deductions
A,
A* CC
(A*
(A * B) * C, A +
A* B,,A+
(A * B) * C, A +
304 Chapter 9. Modal and linear logic
represent "essentially" the same proof: only the order of the application of
the rules differs. The proofs also exhibit a lot of redundancy inasmuch as
the inactive formulas are copied many times. There is also a good deal of
non-determinism in the process of cut elimination, due to the possibilities for
permuting cut upwards either to the left or to the right.
Proofnets were introduced by Girard [1987a] in order to remove such re-
dundancies and the non-determinism in cut elimination, and to find a unique
representative for equivalent deductions in Gcl. In the same manner as Ni
improves upon Gli, proofnets improve on Gcl. For the full calculus Gcl
proofnets are complicated, but for the +*-fragment there is a simple and sat-
isfying theory. Proofnets are labelled graphs, and therefore we define in the
next subsection some graph-theoretic notions for later use.
9.5.2. Notions from graph theory
DEFINMON. A graph is a pair G (X, R), where X is a set, and R is an
irreflexive symmetric binary relation on X (R irreflexive means Vx,Rxx, and
R symmetric means Vxy(Rxy > Ryx)). The elements of X are the nodes or
vertices of the graph, and the pairs in R are the edges of the graph. (X', R')
is a subgraph of (X, R) if X' C X and R' C R.
We shall use lower case letters x, y, z, . . . for nodes; an edge (x, y) is simply
written as xy or yx.
A node is of order k if it belongs to exactly k different edges.
In the usual way finite graphs may be represented as diagrams with the nodes
as black dots; dots z, y are connected by a line segment if Rxy. For example
the picture below is a graph with five nodes and seven edges (so the crossing
of the two diagonal lines does not count as a node).
DEFINMON. A path x1x2...xn in a graph G is a sequence of nodes xl, x2,
, xn with n > 1, and XiXi-Fi an edge for 1 < i < n. A path xix2 xn is
said to be a path from xl to xn. A subpath of a path x1x2...xn, is a path
... xi with 1 < i <j < n.
A cycle is a path of the form x1x2 XnXi, such that for no i j Xi =
(so a cycle cannot contain a proper subpath which is a cycle).
For the concatenation xl... xnxn+i xm of paths a = xl ...xn and ß =
Xn+1 Xm we write a 13.
9.5. Proofnets 305
REMARK. A cycle is sometimes defined as a path of the form x1x7,. xnxi;
cycles satisfying our extra condition above are then called simple cycles.
DEFINITION. A graph is connected if for each pair of nodes x, y there is a
path from x to y. The component of a node x in G is the largest connected
subgraph containing x. A tree (-graph) is a graph which is connected and
contains no cycles.
9.5.3. Proof structures
A proof structure with hypotheses is a graph with nodes labelled by formulas
or by the symbol "cut", built from the following components, each consisting
of 1, 2 or 3 labelled nodes with 0, 1 or 2 edges between them:
single nodes labelled with a formula H (a hypothesis); the conclusion
and premise of this component are H.
axiom links A with conclusions A, A and no premises;
cut 14 k cut A with premise A, A and no conclusions;
logical links with premises A, B, namely
tensor links or *-links A A *BB, with conclusion A *B, and
par links or +-links AA + BB with conclusion A + B.
So edges with cut, A * B or A + B always appear in pairs. More precisely we
define proof structures as follows:
DEFINMON. The notion of a proof structure and the notion of the set of
conclusions of a proof structure are defined simultaneously. We write 1,,p,
for proof structures. CON(v) is the set of conclusions of 1,, a subset of the
labelled nodes of v. Let 1,, A, B,.. .D indicate a proof structure (PS) u with
some of its conclusions labelled A, B, . , . D. We shall indulge in a slight abuse
of notation in frequently using the labels of the nodes to designate the nodes
themselves. Proof structures are generated by:
(hypothesis clause) a single node labelled with a formula H is a PS with
conclusion H;
(axiom clause) A ---,A is a PS (axiom), with conclusions A,
(join clause) if v, are PS's, then so is 1/ U i, with CON(v U ti) =
CON(v) U CON(p);
(cut clause) if u, A, is a PS, so is the graph obtained by adding
edges and the symbol "cut" Acut --,A; the new conclusions
are CON(v) U {cut} \ {A, (i.e. conclusions of v except A, and
"cut" added);
306 Chapter 9. Modal and linear logic
(y) (*-clause, +-clause) if u, A, B is a PS, then so are the graphs obtained
by adding two edges and a node A A * B B (*-link) or
A A + B B (+-link). The conclusions are CON(v) with A, B
omitted and A * B, respectively A + B added.
The hypotheses of a PS are simply all the nodes which went into the construc-
tion by the hypothesis clause. Sometimes we shall use the expression "the
conclusions of a PS" also for the multiset of labels corresponding to the set
of conclusions. A notation for PS which is closer to our usual deduction no-
tation is obtained by the following version of the definition (with the obvious
clauses for terminal nodes):
(i)' iÏ is a hypothesis for any multiplicative formula H;
(0 A A is a PS (axiom link);
(iii)' the union of two PS's is a PS;
(iy)' connecting conclusions A, B in a PS by
A BA B
A*B orA+ B
gives a new PS (adding a *-link and a +-link respectively);
(\T)' connecting terminal nodes A, A in a PS by
A
cut
gives a new PS.
REMARK. Alternatively, a PS may be globally characterized as a finite graph,
with nodes labelled with formulas or "cut"; every node is either a hypothesis
or conclusion of a unique link, and is the premise of at most one link. A
formula which is not the premise of another link is a conclusion.
A hypothesis which is a conclusion is of degree 0, otherwise of degree 1;
axioms are of degree 1 when conclusions of the PS, otherwise of degree 2; and
conclusions of +,*-links are of degree 2 when conclusions of the PS, otherwise
of degree 3.
9.5.3A. 4 Show that the global characterization of a PS in the remark is equiv-
alent to the inductive characterization in the definition of PS.
9.5. Proofnets 307
EXAMPLE. The two deductions at the beginning of this section are both
represented by the following PS without hypotheses, and with conclusions
+
A
If we delete any single edge entering one of the nodes + A* B, or
(A *B)*C, the result is no longer a PS. If we delete both edges in
or any of the axiom links, the result is again a PS, but now with hypotheses.
Another graphic representation of the PS exhibited above:
,,,13 A B
A* B C
(A* B)* C
A certain subset of the PS's, the set of inductive PS's corresponds in an
obvious way to sequent deductions.
9.5.4. DEFINITION. Inductive PS's (IPS's) are obtained by the clauses:
A single node with label H (a hypothesis) is an IPS;
A is an IPS (axiom), with A, as conclusions;
if 1/, A and v', ,A are IPS 's, then so is v, A cut A, 1/ (cut
link: two new edges and a node labelled "cut"), the conclusions are
(CON(v) U CON(v') U {cut}) \ {A, ,A};
if v, A and i/ , B are IPS's, then so is 1/, A A* B B,v/ (two new
edges and a node A * B), the conclusions are
(CON(v) U CON(11) U {A * B})\ {A, B};
if 1,, A, B is an IPS, then so is
v,A,B
\/
308 Chapter 9. Modal and linear logic
(two new edges and a node A +B), conclusions as in the corresponding
clause of the preceding definition.
N.B. The example above of a PS is in fact an IPS. An IPS can usually be
generated in many different ways from the clauses (i)(v).
LEMMA. The multiset r is derivable in the sequent calculus iff F is the
multiset of conclusions of an IPS without hypotheses.
The proof of the lemma is straightforward and left to the reader. We are now
looking for an intrinsic, graph-theoretic criterion which singles out the IPS's
from among the PS's.
9.5.5. DEFINITION. A switching of a PS is a graph obtained by omitting
one of the two edges of every +-link of the PS. We call a PS a proofnet if
every switching is a tree.
We shall now establish that a PS is a proofnet iff it is ari IPS. One side is
easy:
9.5.6. LEMMA. Each IPS is a proofnet.
9.5.6A. 4 Prove the lemma by induction on the generation of an IPS.
In order to to prove the converse we move to a more abstract setting and
prove a graph-theoretic theorem. In this connection it is useful to observe
that we need not consider proofnets with cut links: if we replace in a PS a
cut link Acut by a *-link, A A*,-,A ---,A, the result is
again a PS which is a proofnet iff the original PS was a proofnet.
9.5.7. Abstract proof structures
DEFINITION. An abstract proof structure (APS) S a (N, E, P) is a triple
with (N, E) a finite graph, P set of pairs (xy, xz) of edges with y z; x is
the basis of the pair. A node can be the basis of at most one pair in P. An
element of P is said to be a pair of S. The graph terminology introduced
above is also applied, with the obvious meaning, to an APS.
A sub-APS (N', E', P') of an APS (N, E, P) is an APS with (N', E') a
subgraph of (N, E), and such that P' is P restricted to E x E.
A switching of an APS (N, E, P) is a subgraph (N, E') of (N, E) such E'
is obtained by omitting one edge from each pair of the APS. (So if the APS
has n pairs, there are 2" switchings).
An APS is a net, if all its switchings are trees.
9.5. Proofnets 309
EXAMPLE. The following picture shows an APS on the left (with the pairs
marked by * at the bases of the pairs), with its four switchings on the right.
Clearly this APS is a net.
9.5.7A. 4 Is there a PS with this APS as underlying graph, the pairs correspond-
ing to +-links?
9.5.8. DEFINITION. Let S (N, E, P) be an APS, cEP a pair with edges
xy, x z and ba,sis x. Let c(S) := S \ {xy, xz}
S: is the component of x in c(S), ,57 is c(S)\ S The pair c is a section
if S does not contain y or z; that is to say, each path in S from x to y or
from x to z passes through one of the edges xy,xz.
9.5.9. LEMMA. Let S be an APS, and c a section of S. Then S is a net if
S: and S: are nets.
PROOF. Each switching of S decomposes into switchings of St, St connected
by a single edge.
9.5.10. DEFINITION. A pair of edges {xy,xz} is free in the APS S if xy, xz
are the only edges with x as endpoint (in other words, x is of degree 2).
A path passes through a pair if it contains both its edges.
A free path (free cycle) is a path (cycle) which passes only through free
pairs, and passes through at least one pair.
A path -y is nice if for each node x -y, there are two free paths from x to
-y, distinct in x (i.e. starting with distinct edges in x), each intersecting 7 in
a single node.
N.B. Since a cycle does not contain smaller cycles, it follows that a cycle
passes through a pair {xy, x z} iff the edges appear consecutively in the cycle
(as yxz ...).
9.5.11. PROPOSMON. Let S be a net with an inhabited set of pairs P,
then one of the pairs is a section.
PROOF. We shall derive a contradiction from the following three assumptions:
310 Chapter 9. Modal and linear logic
S is a net,
P is inhabited,
no pair of P is a section.
Assuming H1-3 we shall construct a properly increasing sequence So, Si, S2,
... of sub-APS's of S, which contradicts the finiteness of S. In our construc-
tion of the sequence we use the following double induction hypothesis:
Hil[n] Sn is a sub-APS of S;
Hi2[n] Sn has a free, nice cycle D.
Basis. S must contain a cycle So; for if not, each pair of S is a section,
contradicting H2-3. Then Do := So satisfies Hil[0], Hi2[0]. (Observe that
relative to So each pair through which So passes is necessarily free.) Note
also that we can assume So to have at least one pair; for if cycles did not
contain pairs, there would be switchings containing cycles.
Induction step. Now assume Hil[n], Hi2[n] for Sn, Dn. Dn is free in Sn, and
must contain at least one pair - otherwise there would be a switching of S
containing a cycle.
Let {yx, xz} be a free pair in Dn; it cannot be a section of S, hence there is
a path in S from x to y or from x to z, not passing through yx, xz. Starting
from x, let u E Sn be the first edge after x that the path ha' s in common with
S. Let a be this path from x to u; a intersects Sn in x and u only. We put
SnU a. Sn+i will be Sn' with a new set of pairs added, namely all edges
paired in S, and not yet paired in Sn. We note
Either such a pair entirely belongs to a, and then it is free, or the pair
has u as basis, and then one edge belongs to a;
The only possible non-free new pair has basis u;
The only old pairs possibly becoming non-free have basis x or u.
We now have to check Hil[n + 1], Hi2[n + 1] for the new Sn+i. Hil[n + 1] is
automatically guaranteed.
Construction of Dn+1. By Hi2[n] for Sn, if u Ø Dn, there exist two free paths
61462 in Sn from u to Dn, distinct in u, each intersecting Dn in a single point
only. We call these intersection points u1,u2 respectively (see fig. a). x = 711
and x = u2 are excluded since x has degree 2 in Sn, and u1, u2 have degree 3.
One of the paths a - 61, a 02 is free. For 61, 62 are free in 5n (by
hypothesis), hence also free in Sn+i; a is also free, and a 61, and a -
intersect in u only. 61 and 62 differ in u, so a 61, a 62 cannot both pass
through a possible new pair with basis u; say a - 61 does not do so. Then
ce 61 is free.
9.5. Proofnets 311
There are two proper subpaths 01, 02 ofDn connecting ui with x. Then
either a Si f3i or a 02 is free. To see this, note (fig. b) a (5].
and 01, a 61 and 02 respectively intersect in { ui, x} only; 01,02 are free in
Sn+i (since they are free in Sn) and do not contain pairs which can become
non-free going from Sn to Sn+1. 01 and 02 are distinct in ui, and hence one
of the two joins in ui is correct, i.e. does not pass through a new pair added
in u. And since the unique pair with basis x belongs to Dn, the junctions
a, 02 a do not pass through this pair.
Suppose, say, a -Th 01 is free; then this will be our D+1.
If u E Dn, then argue as above, with ui = u.
Niceness of Dn+1. Finally we have to show that Dn+i is nice. Take some
V* E Sn+1 Dn+1. Then by the construction y* E S.
If v* E Dn, take the two proper subpaths of Dn connecting y with x
and with ui.
If y* i;Z Dn, there are two free paths 61,62 from y ending in Dn, distinct
from y, by Hi2[n]. Two possible situations for (y*, 61,12) are pictured in fig. c:
ei, 62) and (//, 6'2).
Consider ci. If it does not intersect Dn+i, one can continue it to x or to ui
such that it is free.
Or if it does intersect Dn+1, then the piece of ei from y to the first inter-
section with Dn+i is correct. The two free paths 61,62 are distinct in y* since
they always agree on the first edge with 61,62 respectively, where they must
be different. N
312 Chapter 9. Modal and linear logic
v '
'...e1
9.5.11A. * The preceding abstract theory for APS's still functions if we permit
that a pair has the form (xy,xy), but then in the definition of free pair we must
restrict attention to pairs with x, y, z distinct. We consider two contractions on such
APS's when finite: (a) deleting an edge xy not belonging to a pair and identifying
x and y, and deleting the edges of a pair (xy,xy) and identifying x and y. This
yields a notion of reduction which is terminating and confluent. Show that an
APS S is a net iff the normal form with respect to this reduction is a single point
(Danos [1990]).
9.5.12. Equating IPS's and proofnets
We are now ready to prove that inductive proof structures and nets coincide.
We have already seen that inductive proof structures are proofnets (9.5.6). It
remains to show the converse.
THEOREM. Every proofnet is an IPS.
PROOF. Let y be a given proofnet, and S = (N, E, P) the corresponding
APS, where (N, E) is the graph underlying y, and P consists of the pairs of
edges corresponding to +-links in v. S is a net, since y is a proofnet. We
apply induction on the number of +-links in v.
Basis. There are no +-links in v; we apply a subinduction on the number of
*-links in y.
Subbasis. If there is no *-link, v has been obtained from axiom links, hy-
potheses and join (cf. 9.5.3). But join is excluded, since v is connected; hence
v is an axiom or a hypothesis, hence an IPS by definition.
Subinduction step. Suppose there is at least one *-link in v. The last clause
applied in an inductive construction of v can never have been a join, since
9.6. Notes 313
this would conflict with y being connected. So let the last clause applied in
an inductive construction of v be a tensor clause, with conclusion A * B and
premises A, B, and let VA, vB be the components of A and B in y after deletion
of the tensor link. VA, vB are connected (if not, v would not be connected),
are disjoint (otherwise v would contain a cycle) and together with the tensor
link make up all of v (otherwise v would not be connected). Hence, by IH,
vA, vg are IPS's, and so is V.
Induction step. v has +-links, so S has pairs. Hence we can find a pair c
in S which is a section. Then Sc- and 5? are nets. The proof structure zi:
corresponding to 5? has conclusions A, B and is an IPS by the IH; add a +-
link to obtain an IPS v* with conclusion A +B. Sc- corresponds to zi which
has A + B as hypothesis and which is also an IPS by the IH; substituting v*
for the hypothesis A + B in zi yields v as an IPS. Z
COROLLARY. A PS v is an IPS iff v is a proofnet. E
9.6 Notes
For a general introduction to modal logics, the reader may consult, for ex-
ample, Bull and Segerberg [1984], Hughes and Cresswell [1968], Fitting [1983,
1993], Mints [1992d].
9.6.1. The modal logic S4. The first axiomatization of S4 is due to C. I.
Lewis (in Lewis and Langford [1932]), but the Hilbert system given here is
due to Gödel [1933a]. For some background information on this paper see the
"Introductory Note to 1938f' in Gödel [1986].
An early reference for a Gentzen system for S4 with a proof of cut elimina-
tion is Curry [1952a]. A form of G3s with 0 as the only primitive modality
appears in Kanger [1957].
Some examples of modal logics which in many respects can be treated in
the same way as S4 are the following sublogics of S4 (cf. the definition of
S4 in 9.1.1), based on the same classical basis and the same deduction rules
as S4, but with only some of the modal axioms: K (K-axioms only), K4
(K- and 4-axioms only), T (K- and T-axioms). These systems are examples
of normal modal logics, i.e. they have a modal-logic Kripke semantics of the
standard type.
In Mints [1990,1994b] resolution calculi for S4 and some closely related
logics are developed, in the spirit of sections 7.4, 7.5.
9.6.2. Interpolation for modal logics. Fitting [1983] and Rautenberg [1983]
contain proofs of interpolation for many modal formalisms. In Fitting [1983,
3.9, 7.13] it is shown that in S4 (and some closely related modal logics such
314 Chapter 9. Modal and linear logic
as K, K4, T) one can impose an additional condition on the interpolant of
A B.
In order to define this extra condition, let us extend the notion of positive
and negative formula occurrence by adding to the clauses for positive and
negative contexts in 1.1.4: DB+ , 0B+ E P and OB-, OB- E Al. A formula
is said to be of 0-type ((>-type) if all occurrences of O occur positively (neg-
atively) and all occurrences of 0 occur negatively (positively). Then we can
require for the interpolant C of A B
if B is of 0-type, then C is of 0-type;
if A is of 0-type, then C is of 0-type;
if A is of 0-type and B is of 0-type, then C is non-modal, that is to
say contains neither 0 nor O.
9.6.3. Modal embedding of I into S4. There are many, slightly different,
embeddings of I into S4. Gödel [1933a] proved correctness and conjectured
faithfulness for a particular embedding and a slight variant of this, in the case
of Ip and S4p.
The original motivation in Gödel [1933a] for the embedding was provided
by reading DA as "A is (intuitionistically) provable", where "provable" is
not to be read as "formally provable in a specific recursively axiomatizable
system" (as Gödel was careful to point out), but rather as "provable by any
intuitionistically acceptable argument" , or "provable in the sense of the BHK-
interpretation" (2.5.1).
For some variant embeddings, see McKinsey and Tarski [1948], Maehara
[1954]. The ° mapping is copied from the Girard embedding (9.3.6, Girard
[1987a]) of intuitionistic logic into classical linear logic. For ° (the mapping
used by Rasiowa and Sikorski [1953,1963], but for the fact that we have
1 instead of as a primitive) the proof of faithfulness is somewhat easier
to give. The proof of faithfulness given here is an adaptation of the proof
by Schellinx [1991] of faithfulness for the original Girard embedding of I
into classical linear logic. Our proof is rather similar to the argument in
Maehara [1954]; as in Maehara's proof, a sequent calculus for I with finite
multisets in the succedent plays a role (cf. exercise 3.2.1A).
A very elegant alternative method for proving faithfulness is found in Flagg
and Friedman [1986]; this method works not only for predicate logic, but also
for other formalisms based on intuitionistic logic on the one hand, and S4 on
the other hand (for example, intuitionistic arithmetic and so-called epistemic
arithmetic; proof-theoretic arguments for the faithfulness of the embedding
in this case had been given before in Goodman [1984] and Mints [1978].
It should be pointed out, however, that S4 is by no means the strongest
system for which such an embedding works (cf. again the Introductory Note
to 1933f in Gödel [1986]).
9.6. Notes 315
9.6.4. Semantic tableaux for modal logics. Semantic tableaux (cf. 4.9.7)
have been widely used in the study of modal logics (for example, see Fitting
[1983,1988], Goré [1992] to obtain completeness proofs relative to a suitable
Kripke semantics. These proofs as a rule then establish completeness for a
cutfree sequent calculus, with closure under Cut as a by-product.
Direct proofs of cut elimination by a Gentzen-type algorithm are less nu-
merous (e.g. Curry [19524 Valentini [1986]).
Just as for intuitionistic logic, semantic tableaus for modal logics cannot
have all rules strictly cumulative. Thus we have for the modalities in S4 the
rules
8, tA 6, fA
8*, tOA 8*, f DA
where 6* := {t : t OA E el U {f0A : f0A E e}. More flexibility is
achieved by considering tableaus with indexed sequents, also called "prefixed
tableau systems" (Fitting [1983, chapter 8]); the idea for such systems (but
without the indices explicitly appearing) goes back to Kripke [1963]. The
indices correspond to "worlds" in the Kripke semantics for the logic under
consideration.
Mints [1994a] gives a cut elimination algorithm for a whole group of such
systems. He also shows that there is a close relationship between these sequent
calculi with indexed sequents, and systems (Wansing [1994]) in the display-
logic style of Belnap [1982]. N- and G- systems with a linearly ordered set of
"levels" are considered in Martini and Masini [1993], Masini [1992,1993].
9.6.5. Linear logic. For a first introduction beyond the present text, the
reader may consult Troelstra [1992a]. Full bibliographical information on
linear logic may be found in electronic form under http : / /www . cs . cmu edu/
-carsten/linearbib/linearbib.html.
The system of linear logic in its present form was introduced by Girard
[1987a]. As already noted in the preamble of section 9.3, this was not the
first study of Gentzen systems in which (some of) the structural rules had
been dropped; see Do6en [1993] and the references given there. The novel
idea of Girard was to reintroduce Weakening and Contraction in a controlled
form by means of the exponential operators (namely !, ?).
Some of our symbols for linear logic deviate from the ones used in Girard
[1987a] and many other papers on linear logic: we use n, u,*, +, , 0, for
Girard's Sz, ED, 0, ga, 0, I, (note the interchange between 0, I); does not
appear in Girard's paper; the other symbols coincide. ga is also printed as an
upside-down 8.6. For the r'easons behind our choice of notation, see Troelstra
[1992a, 2.7].
The embeddability of I into Gcl is stated in Girard [1987a] and completely
proved in Schellinx [1991]. A one-sided version of G3s is embedded into
classical linear logic Gcl in Martini and Masini [1994]. Combining this with
316 Chapter 9. Modal and linear logic
the embedding of I into S4 yields another proof of the embeddability of I into
Gcl. The results in 9.4 are taken from Schellinx [1994]. For much farther-
reaching results in this direction, see Danos et al. [1997,1995].
Interpolation for fragments of CL is treated in Roorda [1994]. For resolu-
tion calculi for linear logic, see Mints [1993].
Natural deduction formulations of IL are discussed in Benton et al. [1992],
Mints [1995], Ronchi della Rocca and Roversi [1994], Troelstra [1995].
Proofnets were introduced in Girard [1987a]. The original criterion for
a proof structure to be a proofnet was formulated as the so-called "longtrip
condition". It is not hard to see that this criterion is equivalent to the switch-
ing criterion as given here (the terminology of "switching" was suggested by
the notion of a longtrip). Later Girard [1991] gave a much simpler proof,
also covering the case of quantifiers, reproduced (without the quantifiers) in
Troelstra [1992a, chapter 17]. Another proof, of independent interest, was
given in the thesis of Danos [1990]; this is the proof presented here. For yet
another proof see Metayer [1994]. An important early paper on proofnets is
Danos and Regnier [1989]. In the meantime, the concept of proofnets has
been extended (without the "boxes" of Girard [1987a]) to cover quantifiers
and context-sharing operators ri, LI as well (Girard [1996]).
Basic logic of Sambin et al. [1997], Sambin and Faggian [1998] goes one
step beyond linear logic; here also the role of the contexts is isolated. Among
the extensions of basic logic we find linear logic and quantum logic, and the
cut elimination procedure for basic logic extends to these systems.
9.6.6. Computational content of classical logic. For a long time the quest
after a form of "computational content" in classical logic, comparable to the
computational content in I provided by the formulas-as-types parallel, seemed
hopeless. But recently the picture has changed. See for example Danos et
al. [1997], Joinet et al. [1998], Danos et al. [1999], where methods for "con-
structivizing" classical logic, in the sense just referred to, are being studied
via a classification of possible methods for embedding Gentzen's system LK
into linear logic.
Chapter 10
Proof theory of arithmetic
This chapter presents an example of the type of proof theory inspired by
Hilbert's programme and the Gödel incompleteness theorems. The principal
goal will be to offer an example of a true mathematically meaningful prin-
ciple not derivable in first-order arithmetic. Some experience with formal
proofs in arithmetic and the first elements of recursion theory will facilitate
understanding for the reader, even if most sections (the last two excepted)
are essentially self-contained.
The main tool for proving theorems in arithmetic is clearly the induction
schema
Ind(A, x) A[x10] --+ Vx(A + A[xISx]) > VxA.
Here A is an arbitrary formula. An equivalent form of this schema is "cumu-
lative" induction
Ind(A, x)* Vy<x (A[xly] A) + VxA.
Ind(A, x) and Ind(A, x)* refer to the standard ordering of the natural num-
bers. Now it is tempting to try to strengthen arithmetic by allowing more
general induction schemas, e.g. with respect to the lexicographical ordering
of IN x IN. More generally, we might pick an arbitrary well-ordering < over
IN, i.e. a linear ordering without infinite descending sequences. Then the
following schema of transfinite induction holds.
TI< (A, x) Vx (Vy <1x A [xly] > A) -4 WA.
This can be read as follows. Suppose the property A(x) is "progressive", i.e.
from the validity of A(y) for all y < x we can always conclude that A(x) holds.
Then A(x) holds for all x.
To see the validity of this schema consider the set of all x such that A(x)
does not hold. If this set is not empty, then by the well-foundedness of <1
it must contain a smallest element xo. But by the choice of xo we have
Vy<xo A(y) and hence a contradiction against the assumed progressiveness
of A(x).
317
318 Chapter 10. Proof theory of arithmetic
One might wonder whether this schema of transfinite induction actually
strengthens arithmetic. We will prove here a classic result of Gentzen [1943]
which in a sense answers this question completely. However, in order to state
the result we have to be more explicit about the well-orderings used. This is
done in the following section 10.1.
10.1 Ordinals below 60
From elementary set theory we know that there are particular well-ordered
sets called ordinals such that any well-ordered set is isomorphic to an ordi-
nal, and the ordinals themselves form a well-ordered class. Here we restrict
ourselves to a countable set of relatively small ordinals, traditionally called
ordinals below E. Moreover, we equip these ordinals with an extra structure
(a kind of algebra). It is then customary to speak of ordinal notations. These
ordinal notations can be introduced without any set theory in a purely formal,
combinatorial way. Our treatment is based on the Cantor "normal form for
ordinals; for detailed information we refer to Bachmann [1955]. We also in-
troduce some elementary relations and operations for such ordinatnotations,
which will be used later. For brevity we from now on use the word "o-rdinal"
instead of "ordinal notation".
10.1.1. DEFINITION. We define the two notions a is an ordinal and a <
for ordinals a, ß simultaneously by induction:
If cem, , ao are ordinals, m > 1 and am > > do (where a >
means a > or a = ,8), then
warn wa()
is an ordinal. Note that the empty sum denoted by 0 is allowed here.
If wam + + wa° and co)3' + + c4.»3° are ordinals, then
wam + + wa° < c.,P3" + + c.4,°
iff there is an i > 0 such that am_i < On-i, am-i+1 = 13n-i+17 =
On, or else m < n and am = ßn,. ao = ¡3n-m.
For proofs by induction on ordinals it is convenient to introduce the notion
of level of an ordinal by the stipulations (a) if a is the empty sum 0, level(a)
= 0, and (b) if a = ...+ b..)'° with am > > ao, then leyel(ce)
level ( cem ) + 1.
For ordinals of level k, cok < < wk+i, where coo = 0, c4.)1 = C4), Wk+1 = C,-)4'k
10.1. Ordinals below 60 319
NOTATION. We shall use the notation 1 for w°, a for w° + + w° with a
copies of w° and waa for wa + + wa again with a copies of wa
Note that limit ordinals (ordinals 0 not having an immediate predecessor)
are written as a + w' a for c> 0, a > O.
10.1.1A. 4 Prove (by induction on the levels in the inductive definition) that <
is a linear order with 0 as the smallest element. Show that the ordering is decidable.
10.1.2. DEFINITION. (Addition) We now define addition for ordinals:
(warn + + c2°) + (wd3' + + w'3°) := cem + + + w°' + + wfl°
where i is minimal such that ai > [3n; if there is no such i, take i = m + 1
(i.e. w8" + + w'8°). 1E1
10.1.2A. 4 Prove that + is an associative operation which is strictly monotonic
in the second argument and weakly monotonic in the first argument. Note that +
is not commutative: l+w,--ww+ 1.
10.1.2B. 4 There is also a commutative version of addition: the natural (or
Hessenberg) sum of two ordinals is defined by
(w u.,00) := w7m+n . . w70
where 7,n+n,... ,70 is a decreasing permutation of am, ... ao, On, 7 00. Prove
that # is associative, commutative and strictly monotonic in both arguments.
10.1.3. We will also need to know how ordinals of the form ,8 + (AP can be
approximated from below. First note that
< ce --+ß + w5a < + wa.
Rirthermore, for any -y < + coa with a> 0 we can find a 8 < a and an a
such that
< + co6 a.
10.1.3A. 4 Prove this, and describe an algorithm that, when given a> O, 0, 7
such that 7 < + wa, produces 6, a with 7 < + w5a.
10.1.4. DEFINITION. We now define 2a for ordinals a. Let am > >
ao > w > kn > > k1 > O. Then (writing exp2(a), expw(a) for 2, w')
exP2(Wam
cock° + colon wki w0a)
:= (exp(wam wao wkn-1 wk1-1))2a. N
320 Chapter 10. Proof theory of arithmetic
10.1.4A. * Prove that 2+1 = 2' +2" and that 2a is strictly monotonic in a.
10.1.5. In order to work with ordinals in a purely arithmetical system we
set up some effective bijection between our ordinals < eo and non-negative
integers (i.e. a Gödel numbering). For its definition it is useful to refer to
ordinals in the form
u.,am km + w'ko with am > >a and ki 0 (m > 1).
(By convention, m = 1 corresponds to the empty sum.)
DEFINITION. For any ordinal a we define its Gödel number ra-' inductively
by
(rwakm+ + wa'ko-1 := 11Pti, 1,
i<n-t
where pr, is the n-th prime number starting with Po := 2. For any non-negative
integer x we define its corresponding ordinal notation o(x) inductively by
o ( (H pli) 1) := E co°(i)qi,
i<t
where the sum is to be understood as the natural sum.
10.1.6. LEMMA. (i) o(ra-') = a, (ii) r o(x) x.
PROOF. This can be proved easily by induction.
Hence we have a simple bijection between ordinals and non-negative in-
tegers. Using this bijection we can transfer our relations and operations on
ordinals to computable relations and operations on non-negative integers.
10.1.7. NOTATION. We use the following abbreviations.
x y := o(x) < o(y),
wx := rC4./0(x)1,
x 1ED y := ro(x) o(yr,
xk := ro(x)k7,
wk := r k
where wo := 1, wk+i :=W.
We leave it to the reader to verify that Ax.wx, Axy.x le y, Axk.xk and
Mc!' wk-1 are all primitive recursive.
10.2. Provability of initial cases of TI 321
10.2 Provability of initial cases of TI
We now derive initial cases of the principle of transfinite induction in arith-
metic, i.e. of
TI,a(P) Vx(Vy-<xPy Px) Px
for some number a and a predicate symbol P, where is the standard order
of order type ec, defined in the preceding section. In section 10.4 we will
see that our results here are optimal in the sense that for our full system of
ordinals < 60 the principle
TI_<(P) Vx(Vy-x Py Px) +VxPx
of transfinite induction is underivable. All these results are due to Gentzen
[1943].
10.2.1. DEFINITION. By an arithmetical system Z we mean a theory based
on minimal logic V*_L-M (including equality axioms) with the following
properties. The language of Z consists of a fixed (possibly countably infinite)
supply of function and relation constants which are assumed to denote fixed
functions and relations on the non-negative integers for which a computation
procedure is known. Among the function constants there must be a constant
S for the successor function and 0 for (the 0-place function) zero. Among
the relation constants there must be a constant = for equality and for the
ordering of type eo of the natural numbers, as introduced in section 10.1.
In order to formulate the general principle of transfinite induction we also
assume that a unary relation symbol P is present, which acts like a free set
variable.
Terms are built up from object variables x, y, z by means of f(ti,...
where f is a function constant. We identify closed terms which have the same
value; this is a convenient way to express in our formal systems the assumption
that for each function constant a computation procedure is known. Terms of
the form S(S(... 5(0) ...)) are called numerals. We use the notation SnO or
rt, or (only in this chapter) even n for them. Formulas are built up from J_
and atomic formulas R(ti,..., t,,), with R a relation constant or a relation
symbol, by means of A -4 B and VxA. Recall that we abbreviate A -4 I by
The axioms of Z will always include the Peano axioms, i.e. the universal
closures of
PA1 Sx = Sy --+ x = y,
PA2 Sx= 0 >A,
322 Chapter 10. Proof theory of arithmetic
with A an arbitrary formula. We express our assumption that for any relation
constant R a decision procedure is known by adding the axiom Rni whenever
Rit is true, and 1171 whenever Rfi is false. Concerning we require irreflex-
ivity and transitivity for - as axioms, and also following Schfitte the
universal closures of
ordl - 0 --+ A,
ord2 z y w° (z y A) (z = y A) A,
ord3 x ED 0 = x,
ord4 x ED (y ED z)= (x y) z,
ord5 0 ED x = x,
ord6 wx0 = 0,
ord7 wx(Sy) = wxy wx,
ord8 z-<yED WSx we(s'Y'z)m(x, y, z),
ord9 z y ED WSX e(x, y, z) Sx,
where ED, Axy.wxy, e and m denote the appropriate function constants and
A is any formula. (The reader should check that e, m can be taken to 6e
primitive recursive.) These axioms are formal counterparts to the properties
of the ordinal notations observed in the preceding section; for example, ord8
correponds to the remark in 10.1.3. We also allow an arbitrary supply of true
formulas Vi'A with A quantifier-free and without P as axioms. Such formulas
are called Ili-formulas (in the literature also 1--formulas).
Moreover, we may also add an ex-falso-quodlibet schema or even a stability
schema for A:
Efq A,
Stab > A.
Addition of Efq leads to an intuitionistic arithmetical system (the V>±-
fragment of a version of Heyting arithmetic HA, cf. 6.6.2) and addition of
Stab to a classical arithmetical system (a version of Peano arithmetic PA;
see 10.5). Note that in our V-41-fragment of minimal logic these schemas
are derivable from their instances
EfqR VY(1
StabR Rg),
with R a relation constant or the special relation symbol P. The proof uses
theorem 2.3.6 and the first half of exercise 2.3.6A. Note also that when the
stability schema is present, we can replace PA2, ordl and ord2 by their more
familiar classical versions
PA2c Sx 0,
ordlc X 74 0,
z y ED w°
10.2. Provability of initial cases of TI 323
We will also consider restricted arithmetical systems Zk. They are defined
like Z, but with the induction schema Ind(A, x) restricted to formulas A of
level lev(A) < k. The level of a formula A is defined by
lev(Ri') := lev(1) := 0,
lev(A B) := max(lev(A) 1,1ev(B)),
lev(VxA) := max(1,1ev(A)).
However, the trivial special case of induction A[x/0] + VxA[x/Sx] VxA,
which amounts to case distinction, is allowed for arbitrary A. (This is needed
in the proof of theorem 10.2.3 below; in the full language with V this is
equivalent to adding Vx(x = 0V 3y(x = Sy)).)
10.2.2. THEOREM. (Provable initial cases of TI in Z) Transfinite induction
up to tan, i.e. for arbitrary A(x)
Vx(Vy-<x A(y) A(x)) V x -<can A(x)
is derivable in Z.
PROOF. To any formula A(x) we assign a formula A±(x) (with respect to a
fixed variable x) by
A+ (x) := Vy(Vz-q A(z) --+ Vz-q cox A(z)).
We first show
If A(x) is progressive, then A+ (x) is progressive,
where "B(x) is progressive" means Vx(Vy-x B(y) --+ B(x)). So assume that
A(x) is progressive and
Vy--<x A+(y).
We have to show A+(x). So assume further
Vz--q A(z)
and z y wx. We have to show A(z).
Case x = 0. Then z y co°. By ord2 it suffices to derive A(z) from z y
as well as from z = y. If z y, then A(z) follows from (2), and if z = y, then
A(z) follows from (2) and the progressiveness of A(x).
Case Sx. From z y e wsx we obtain z y e we(x,,,z)m ix( y, z) by (ord8) and
e(x, y,z) Sx by ord9. From (1) we obtain A+(e(x, y, z)). By the definition
of A+ (x) we get
Vu-q we(x'Y'z)v A(u) Vu-<(y El) we(x,y,z)v) we(x,y,z) A(u)
324 Chapter 10. Proof theory of arithmetic
and hence, using ord4 and ord7
Vu-q e cide(x'Y'')v A(u) Vu-<y ED we(x'Y'')S(v) A(u).
Also from (2) and ord6, ord3 we obtain
Vu-q ED we(x'Y'')0 A(u).
Using an appropriate instance of the induction schema we can conclude that
Vu-q ED we(x'Y'z)m(x, y, z) A(u)
and hence A(z).
We now show, by induction on n, how for an arbitrary formula A(x) we
can obtain a derivation of
Vx(Vy-<x A(y) > A(x)) Vx-o.) A(x).
So assume the left hand side, i.e. assume that A(x) is progressive.
Case O. Then x 23 and hence x 0 ED w° by ord5. By ord2 it suffices to
derive A(x) from x 0 as well as from x = O. Now x A(x) holds by
ordl, and A(0) then follows from the progressiveness of A(x).
Case n+1. Since A(x) is progressive, by what we have shown above A+ (x) is
also progressive. Applying the IH to A+ (x) yields Vx- cori A+ (x), and hence
A+ (o.,,i) by the progressiveness of A+(x). Now the definition of A+(x) (to-
gether with ordl and ord5) yields V z--<cow' A(z).
Note that in the induction step of this proof we have derived transfinite
induction up to wri+i for A(x) from transfinite induction up to for a formula
of level higher than the level of A(x).
10.2.3. We now want to refine the preceding theorem to a corresponding
result for the subsystems Zk of Z.
THEOREM. (Provable initial cases of TI in Zk) Let 1 < E < k. Then in Zk
we can derive transfinite induction for any formula A(x) of level < L up to
wke+2[m] for arbitrary in, i.e.
Vx(Vy-x A(y) A(x)) Vx-c4.;k_e+2[m] A(x),
where wi [m] := m, [m] :=
PROOF. Note first that if A(x) is a formula of level E > 1, then the formula
A+ (z) constructed in the proof of the preceding theorem has level E + 1, and
for the proof of
If A(x) is progressive, then A+ (x) is progressive,
10.3. Normalization with the omega rule 325
we have used induction with an induction formula of level E.
Now let A(x) be a fixed formula of level < t, and assume that A(x) is
progressive. Define A° := A, A2+1 := (A4)+. Then lev(A2) < i, and hence
in Zk we can derive that A1, Az Aki+1 are all progressive. Now from the
progressiveness of A"+1(x) we obtain A"+1(0), A"+1(1), Ak(2) andi+1.
generally Aki+1(m) for any m, i.e. Aki+1(Wi[m]). But since
Aki+1(x) (Akt)±(x)
we first get (with y = 0) V.z-<co2[m] A"(Z) and then A"(cid2[m]) by the
progressiveness of A". Repeating this argument we finally obtain
VZ-<Wk_t+2[717.] A° (Z).
Our next aim is to prove that these bounds are sharp. More precisely, we
will show that in Z (no matter how many true 111-formulas we have added as
axioms) one cannot derive "purely schematic" transfinite induction up to eo,
i.e. one cannot derive the formula
Vx(Vy-x Py Px) VxPx
with a relation symbol P, and that in Zk one cannot derive transfinite induc-
tion up to wk+i, i.e. the formula
Vx(Vy-x Py Px) Vx-<cok+i Px.
This will follow from the method of normalization applied to arithmetical
systems, which we have to develop first.
10.3 Normalization with the omega rule
We will show in theorem 10.4.12 that a normalization theorem does not hold
for arithmetical systems Z, in the sense that for any formula A derivable in Z
there is a derivation of the same formula A in Z which only uses formulas of
a level bounded by the level of A. The reason for this failure is the presence
of induction axioms, which can be of arbitrary level.
Here we remove that obstacle against normalization in a somewhat drastic
way: we leave the realm of proofs as finite combinatory objects and replace
the induction azdoms by a rule with infinitely many premises, the so-called
co-rule (suggested by Hilbert and studied by Lorenzen, Novikov and Schiitte),
which allows us to conclude that VxA(x) from A(0), A(1), A(2), ..., i.e.
DO
A(0) A(1) ' ' A(n) "
co
= Vy(Vz-q A"(z) --+ V.z.-<y ED biX A" (Z))
VxA(x)
So derivations can be viewed as labelled infinite (countably branching) trees.
As in the finitary case a label consists of the derived formula and the name of
326 Chapter 10. Proof theory of arithmetic
the rule applied. Since we define derivations inductively, any such derivation
tree must be well-founded, i.e. must not contain an infinite descending path.
Clearly this w-rule can also be used to replace the rule VI. As a consequence
we do not need to consider free individual variables.
It is plain that any derivation in an arithmetical system Z can be trans-
lated into an infinitary derivation with the w-rule; this will be carried out
in lemma 10.3.5 below. The resulting infinitary derivation has a noteworthy
property: in any application of the w-rule the cutranks of the infinitely many
immediate subderivations Dr, are bounded, and also their sets of free assump-
tion variables are bounded by a finite set. Here the cutrank of a derivation is
as usual the least number > the level of any subderivation obtained by *I as
the main premise of +E or by the w-rule as the main premise of VE, where
the level of a derivation is the level of its type as a term, i.e. of the formula
it derives. Clearly a derivation is called normal iff its cutrank is zero, and
we will prove below that any (possibly infinite) derivation of finite cutrank
can be transformed into a derivation of cutrank zero. The resulting normal
derivation will continue to be infinite, so the result may seem useless at first
sight. However, we will be able to bound the depth of the resulting derivation
in an informative way, and this will enable us in 10.4 to obtain the desired
results on unprovable initial cases of transfinite induction. Let us now carry
out this programme.
N.B. The standard definition of cutrank in predicate logic measures the
depth of formulas; here one uses the level, as in section 6.10.
10.3.1. DEFINITION. We introduce the systems Z" of w-arithmetic as fol-
lows. Z' has the same language and apart from the induction axioms
the same axioms as Z. Derivations in Z" are infinite objects. It is useful to
employ a term notation for these, and we temporarily use d, e, f to denote
such (infinitary) derivation terms. For the term corresponding to the deduc-
tion obtained by applying the w-rule to di, i E IN we write (di)i<. However,
for our purposes here it suffices to only consider derivations whose depth is
bounded below 60.
In the present chapter we will also regard the term t in VE as a "minor
premise" , as mentioned in 2.1.6, remark (v). The notion of a track (see 6.2.2)
is adapted accordingly.
DEFINITION. We define the notion "d is a derivation of depth < a" (written
dl < a) inductively as follows (i ranges over numerals).
(A) Any assumption variable uA with A a closed formula and any axiom
axA is a derivation of depth < a, for any a.
-4.8(A) If dB is a derivation of depth < ao < a, then (AuAAB)A is a
derivation of depth < a.
10.3. Normalization with the omega rule 327
(+E) If dA-+B and eA are derivations of depths <aj < a (i=1,2), then
(dA-4.13 eA)B is a derivation of depth < a.
(w) For all A(x), if d) are derivations of depths < ai < a (i < w),
then ((diA(i))2<w)VmA is a derivation of depth < a.
(VE) For all A(x), if dv.A is a derivation of depth < ao < a, then, for all
(d'dx Ai)A(i) is a derivation of depth < a.
NOTATION. We will use PI to denote the least a such that d < a.
Note that in (VE) it suffices to use numerals as minor premises. The reason
is that we only need to consider closed terms, and any such term is in our
setup identified with a numeral.
10.3.2. DEFINITION. The cutrank cr(d) of a derivation d is defined by
cr(uA) := cr(axA) := 0,
cr(Au.d) := cr(d),
cr(dAseA) r max(lev(A + B), cr(d), cr (e)) if d = Au.d',
max(cr(d), cr(e)) otherwise,
cr((di)i<w) := cr(di),
f max(lev(VxA), cr(d)) if d =cr(exAi) :=
cr(d) otherwise.
Clearly cr(d) E IN U {w} for all d. For our purposes it will suffice to consider
only derivations with finite cutranks (i.e. with cr(d) E IN) and with finitely
many free assumption variables.
10.3.3. LEMMA. If d is a derivation of depth < a, with free assumption
variables among u, fi and of cutrank cr(d) = k, and e is a derivation of depth
< ,8, with free assumption variables among 7.7 and of cutrank cr(e) =
then d[u/e] is a derivation with free assumption variables among 77, of depth
I d[u/e] I <fi + a and of cutrank cr(d[u/e]) < max(lev(e) , k,E).
PROOF. Straightforward induction on the depth of d.
10.3.3A. * Give the proof in some detail.
10.3.4. Using this lemma we can now embed our systems Zk (i.e. arithmetic
with induction restricted to formulas of level < k) and hence Z into Z°°. In
this embedding we refer to the number 711(d) of nested applications of the
induction schema within a Zk-derivation d.
328 Chapter 10. Proof theory of arithmetic
DEFINITION. The nesting of applications of induction in d, ni(d), is defined
by induction on d, as follows.
ni(u) := ni(ax) := O (axioms and assumption variables),
nI(Ind) := 1,
ni (Ind de) := max(ni(d), ni(e) + 1),
ni(de) := max(ni(d), ni(e)), if d is not of the form Ind do,
ni(Au.d) := ni(d) (case of -*I).
ni(Ax.d) := ni(d) (case of VI).
ni(dt) := ni(d) (case of VE).
10.3.5. LEMMA. Let a Zk-derivation in long normal form (see 6.7.2) be
given with <m nested applications of the induction schema, i.e. of
Ind(A, x) A[x/0] Vx(A -+ A[x/Sx]) -+ VxA.
all with lev(A) < k. We consider subderivations dB not of the form Ind E or
Ind rdo. For every such subderivation and closed substitution instance Bo- of
B we construct (d) in Ze° with free assumption variables for tic free
assumption of d, such that Idr1 < wm+1 and cr(dn < k, and moreover such
that d is obtained by iff dr is, and d is obtained by VI or of the form
Ind rdoe iff do.' is obtained by the w-rule.
PROOF. By recursion on such subderivations d.
Case zic or ax. Take etc' or ax.
Case Ind rde'. Since the deduction is in long normal form, e' = Axv.e. By IH
we have do.e° and ea."). (Note that neither d nor e can have one of the forbidden
forms Ind r and Ind rdo, since both are in long normal form). Write e,'(t, f)
for eo.'[x, v/t, f], and let
(Ind Ed(Axv .e))r := (dr, e0 (O, dr), er (1, 40(0, dr)), .).
By IH 1401 < .p and WI < wmq for some p,q < w. By lemma 10.3.3
we obtain
140(0, dc,`,11 < wm.q +
Ie0(1,e0(0,d0))I < wm.q + win-1.2p
and so on, and hence
1(Ind d(Axv.e))(:1 < wm.(q + 1).
Concerning the cutrank we have by IH cr(dn, cr(e,') < k. Therefore
cr(e)(0, dn) < max(1ev(A(0)), cr(dc:), cr(e°)) k,
10.3. Norrnalization with the omega rule 329
and so on, and hence
cr((Ind d(Axv.e)),'.)) k.
Case AuC .d3 . By 1H, we have (dT)B6 with possibly free assumptions uc'.
Take (Au.d),7 := AuCff
Case de, with d not of the form Ind tor Ind tdo. By III we have d," and ec".
Since de is subderivation of a normal derivation we know that d and hence
also do" is not obtained by Therefore (de)" := de" is normal and
cr(d,we" ) = max(cr(dn,cr(e")) < k. Also we clearly have ld"e." I < w"1.
Case (Ax.d)vxB(x). By 1H for every i and substitution instance B(i)o- we have
dZi. Take (Ax.d)." := (do"i)i<c.
Case (dt)B[xiti. By IH, we have (don (Vx.13)o Since dt is a subderivation of a
normal derivation, d is not obtained by VI, hence dwo is not obtained by the
w-rule. Therefore we may take (dt)" := don, where i is the numeral with the
same value as tu.
10.3.6. DEFINITION. A derivation is called convertible or a redex if it is of
the form (Au.d)e or else (d)<j, which can be converted into d[u/e] or dj,
respectively. A derivation is called normal if it does not contain a convertible
subderivation. Note that a derivation is normal iff it is of cutrank O.
Call a derivation a simple application if it is of the form clod]. ...dm with
do an assumption variable or an axiom.
10.3.7. We want to define an operation which by repeated conversions
transforms a given derivation into a normal one with the same end formula
and no additional free assumption variables. The usual methods to achieve
such a task have to be adapted properly in order to deal with the new situation
of infinitary derivations. Here we give a particularly simple argument due to
Tait [1965].
LEMMA. For any derivation dA of depth < a and cutrank k +1 we can find a
derivation (dk)A with free assumption variables contained in those of d, which
has depth < 2 and cutrank < k.
PROOF. By induction on a. The only case which requires some argument is
when the derivation is of the form de with Idl < <a and ll <a2 < a, but
is not a simple application. We first consider the subcase where dk = Au.di(u)
and lev(d) = k 1. Then lev(e) < k by the definition of level (recall that
the level of a derivation was defined to be the level of the formula it derives),
and hence di[u/ek] has cutrank < k by lemma 10.3.3. Furthermore, also by
lemma 10.3.3, di[u/ek] has depth < 2a2 + 2'1 < 2'('2,"1)+1 < 2'. Hence we
can take (de)k to be di[u/ek].
330 Chapter 10. Proof theory of arithrnetic
In the subca,se where dk = (di),<, lev(d) = k 1 and ek = j we can take
(de)k to be d3, since clearly di has cutrank < k and depth < 2. If we are not
in the above subcases, we can simply take (de)k to be dkek. This derivation
clearly has depth < 2°. Also it has cutrank < k, which can be seen as follows.
If lev(d) < k + 1 we are done. But lev(d) > k +2 is impossible, since we have
assumed that de is not a simple application. In order to see this, note that
if de is not a simple application, it must be of the form dodi d,-,e with do
not an assumption variable or axiom and do not itself of the form d'd"; then
do must end with an introduction q or w, hence there is a cut of a degree
exceeding k + 1, which is excluded by assumption.
10.3.7A. 4 Complete the proof.
As an immediate consequence we obtain
10.3.8. THEOREM. (Normalization for Z') For any derivation dA of depth
<a and cutrank < k we can find a normal derivation (d*)A with free assump-
tion variables contained in those of d, which has depth < 2, where 27 := a,
4+1 := 22k
As in section 6.2 we can now analyze the structure of normal derivations
in Z`K). In particular we obtain
10.3.9. THEOREM. (Subformula property for Z°°) Let D be a normal de-
duction in Z' for r A. Then each formula in D is a subformula of a formula
in r u {A}.
PROOF. We prove this for tracks (see 6.2.2) of order n, by induction on n. Z
10.3.9A. 4 Complete the proof.
10.4 Unprovable initial cases of TI
We now apply the technique of normalization for arithmetic with the w-rule
to obtain a proof that transfinite induction up to ro is underivable in Z, i.e.
a proof of
Z V Vx(Vy-<x Py > Px) VxPx
with a relation symbol P, and that transfinite induction up to cok+i is unde-
rivable in Zk, i.e. a proof of
Zk V Vx(Vy--<x Py Px)
10.4. Unprovable initial cases of TI 331
It clearly suffices to prove this for arithmetical systems based on classical
logic. Hence we may assume that we have used only the classical versions
PA2c, ordlc and ord2c of the axioms from section 10.2.
Our proof is based on an idea of Schiitte, which consists in adding a so-
called progression rule to the infinitary systems. This rule allows us to con-
clude Pj (where j is any numeral) from all Pi for i j.
10.4.1. DEFINITION. More precisely, we define the notion of a derivation in
Z"' + Prog(P) of depth <c by the inductive clauses of definition 10.3.1 and
the additional clause Prog(P):
(Prog) If for all i j we have derivations dr of depths <cj < a, then
Wi)P. i is a derivation of depth < a.
We also define cr(d.i).i,i) := cr(di).
Since this progression rule only deals with derivations of atomic formulas, it
does not affect the cutranks of derivations. Hence the proof of normalization
for Z' carries over unchanged to Z' + Prog(P). In particular we have
10.4.2. LEMMA. For any derivation dA in Z" + Prog(P) of depth < a
and cutrank < k + 1 we can find a derivation (dk)A in Z°° + Prog(P) with
free assumption variables contained in those of d, which has depth < 2' and
cutrank < k.
10.4.3. We now show that from the progression rule for P we can easily
derive the progressiveness of P.
LEMMA. We have a normal derivation of Vx(Vy--<x Py Px) in Ze° +
Prog(P) with depth 5.
PROOF.
PyiPi VE
Pi (all i j)
Prog
Pj
Vy-0 PyPj ... (all j)>
Vx(Vy-<x Py > Px)
10.4.4. The crucial observation now is that a normal derivation of Pr
must essentially have a depth of at least 0. However, to obtain the right esti-
mates for the subsystems Zk we cannot apply lemma 10.4.2 down to cutrank
0 (i.e. to normal form) but must stop at cutrank 1. Such derivations, i.e.
those of cutrank < 1, will be called quasi-normal; they can also be analyzed
easily.
332 Chapter 10. Proof theory of arithmetic
10.4.5. We begin by showing that a quasi-normal derivation of a quantifier-
free formula can always be transformed without increasing its cutrank or its
depth into a quasi-normal derivation of the same formula which
does not use the w-rule, and
contains VE only in the initial part of a track starting with an axiom.
Recall that our axioms are of the form Vi 'A with A quantifier-free.
DEFINITION. (Quasi-subformula) The quasi-subformulas of a formula A are
given by the following clauses.
A, B are quasi-subformulas of A B;
A(i) is a quasi-subformula of VxA(x), for all numerals i;
if A is a quasi-subformula of B, and C is an atomic formula, then C -+ A
and VxA are quasi-subformulas of B;
"... is a quasi-subformula of ..." is a reflexive and transitive relation.
EXAMPLE. Q > Vx(P --+ A), P, Q atomic, is a quasi-subformula of A -4 B.
We now transfer the subformula property for normal derivations (theo-
rem 10.3.9) to a quasi-subformula property for quasi-normal derivations.
10.4.6. THEOREM. (Quasi-subformula property) Let T, be a quasi-normal
deduction in Z + Frog(P) for I' I- A. Then each formula in T, is a quasi-
subformula of a formula in r U {A}.
PROOF. We prove this for tracks of order n, by induction on n.
10.4.6A. 4 Prove this in detail.
10.4.7. COROLLARY. Let 7, be a quasi-normal deduction in Z"+Prog(P) of
a formula VgA with A quantifier-free from quantifier-free assumptions. Then
any track in 7, of positive order ends with a quantifier-free formula.
PROOF. If not, then the major premise of the >E whose minor premise is
the offending end formula of the track, would contain a quantifier to the left
of >. This contradicts theorem 10.4.6. Ei
Our next aim is to eliminate the w-rule. For this we need the notion of an
instance of a formula.
10.4. Unprovable initial cases of TI 333
10.4.8. DEFINITION. (Instance) The instances of a formula are given by the
following clauses.
If B' is an instance of B and A is quantifier-free, then A -4 B' is an
instance of A -4 B;
A(i) is an instance of VxA(x), for all numerals i;
The relation "... is an instance of ..." is reflexive and transitive.
10.4.9. LEMMA. Let D be a quasi-normal deduction in Zc° + Prog(P) of a
formula A without V to the left of -4 from quantifier-free assumptions. Then
for any quantifier-free instance A' of A we can find a quasi-normal derivation
TY of A' from the same assumptions such that
TY does not use the w-rule,
TY contains VE only in the initial elimination part of a track starting
with an axiom, and
ITY1 IDI.
PROOF. By induction on the depth of D. We distinguish cases according to
the last rule in D.
Case >E.
A -4 B A >E
By the quasi-subformula property 10.4.6 A must be quantifier-free. Let B' be
a quantifier-free instance of B. Then by definition A -4 B' is a quantifier-free
instance of A > B. The claim now follows from the IH.
Case
-41A -4 B
Any instance of A > B has the form A > B' with B' an instance of B.
Hence the claim follows from the IH.
Case VE.
VxA(x) i
A(i) VE
Then any quantifier-free instance of A(i) is also a quantifier-free instance of
VxA(x), and hence the claim follows from the IH.
Case w.
A(i) ... (all i <w)
co
VxA(x)
Any quantifier-free instance of VxA(x) has the form A(i)' with A(i)' a quan-
tifier-free instance of A(i). Hence the claim again follows from the IH. N
334 Chapter 10. Proof theory of arithmetic
10.4.9A. 4 Do the remaining cases.
DEFINITION. A derivation d in Z°°+Prog(P) is called a P g-refutation
if C't and g are disjoint and d derives a formula 2,1" --+ B := A1 -+ --+ Ak B
with JT and the free assumptions in d among Prai-', ,
-13'73n-I or true quantifier-free formulas without P, and B a false quantifier-
free formula without P or else among P'731-1, , P'73n7 .
(So, classically, a .P:(3'-refutation shows A, Prai7 -4 V, Prie[.)
10.4.10. LEMMA. Let d be a quasi-normal Pd',---,Pg-refutation. Then
min (T3) < dl + lh(ä),
where ä is the sublist of S consisting of all cx, < min(Th, and 1h(ä) denotes
the length of the list 5'.
PROOF. By induction on ldl. By lemma 10.4.9 we may assume that d does not
contain the w-rule, and contains VE only in a context where leading universal
quantifiers of an axiom are removed. We distinguish cases according to the
last rule in d.
Case By our definition of refutations the claim follows immediately from
the IH.
Case >E. Then d fc-r(I-r13)ec If C is a true quantifier-free formula
without P or of the form Pr-y1 with -y < min* the claim follows from the
IH for f:
min(g) If I + lh(51) +1 Idl +
If C is a false quantifier-free formula without P or of the form Pr-y-1 with
min(g) < -y, the claim follows from the IH for e:
min(T) lel +1h(ä) + 1 <_ Idl + ih(ein
It remains to consider the case when C is a 5uantifier-free implication involv-
ing P. Then lev(C) > 1, hence lev(C > (A > B)) > 2 and therefore (since
cr(d) < 1) f must be a simple application (10.3.6) starting with an axiom.
Now our only axioms involving P are Eqp: Vx, y(x = y > Px -+ Py) and
Stabp: Px), and of these only Stabp has the right form. Hence
f = Stabpr-y7 and therefore e: -I-Pr-C. Now from 1ev(-1-,Pr-y1) = 2, the
assumption cr(e) < 1 and again the form of our axioms involving P, it follows
that e must end with >I, i.e. e = Au-Pr-Y1.4. So we have
[u: -,./3r77]
eo
J_
pr71
pry-i
10.4. Unprovable initial cases of TI 335
The claim now follows from the IH for eo.
Case VE. By assumption we then are in the initial part of a track starting
with an axiom. Since d is a P5, -,P[3'-refutation, that axiom must contain
P. It cannot be the equality axiom Eqp: Vx, y(x = y Px Py), since
1-7-1 = EP PE77 -4 PEP can never be (whether -y = 6 or 7 0 (5) the
end formula of a Pa', -,Pß-refutation. For the same reason it can not be the
stability axiom Stabp:Vx(-,---,Px Px). Hence the case VE cannot occur.
Case Prog(P). Then d = (drr),P,r-71-. By assumption on d, 7 is in g. We
may assume 'y = := min(g), for otherwise the premise deduction P73-1
would be a quasi-normal Pd, -43g-refutation, to which we could apply the
IH.
If there are no a., < -y, the argument is simple: every clj is a Pa,
refutation, so by IH, since also no ai <6,
min (g, 6) = d5I
hence 7 = min(g) <
To deal with the situation that some cei are less than 'y, we observe that
there can be at most finitely many ai immediately preceding 7; so let E be
the least ordinal such that
V6(e < 6 < -y -> ô E
Then e,e + 1, , + k - 1 E 5, e + k = -y. e is either a successor or a limit.
If e = e' + 1, it follows by the IH that since de is a Pa, -
refut ation ,
e - 1 < 14_1 +lh(&) - k,
where ee' is the sequence of ai < 7. Hence e < idi+ lh(Ckg) - k, and so
-y < di = lh(61).
If e is a limit, there is a sequence (6f(n)),, with limit e, and with all ai < e
below 6 f(0), and so by IH
6 f (n) id f (n)1 lh(&) - k,
and hence e 5_ Idf(n)1+ lh(cV) - k, so 7 < I dI N
10.4.11. THEOREM. Transfinite induction up to ec, is underivable in Z, i.e.
Z V Vx(Vy--<x Py Px) VxPx
with a relation symbol P, and for k > 3 transfinite induction up to wk+i is
underivable in Zk, i.e.
Zk Px) Vx-<wk+i Px.
336 Chapter 10. Proof theory of arithmetic
PROOF. We restrict ourselves to the second part. So assume that transfinite
induction up to wk+i is derivable in Zk. Then by the embedding of Zk into
Z" (lemma 10.3.5) and the normal derivability of the progressiveness of P
in Zoo + Prog(P) with finite depth (lemma 10.4.3) we can conclude that
Vx-<wk+i Px is derivable in Z" + Prog(P) with depth < wm+1 and cutrank
< k. (Note that here we need k > 3, since the formula expressing transfinite
induction up to wk+i has level 3). Now k 1 applications of lemma 10.4.2
yield a derivation of the same formula Vx-<wk+i Px in Z' + Prog(P) with
depth 7 < 2r1+1 < wk+i and cutrank < 1.
Hence there is also a quasi-normal derivation of Prry+37 in Z" + Prog(P)
with depth 7 + 2 and cutrank < 1, of the form
Vx-<wk+iPx TY
+ coic+i Pr7 + r'y + (.4.4+1
Pr'y
where TY is a deduction of finite depth (it may even be an axiom, depending
on the precise choice of axioms for Z); this contradicts lemma 10.4.10. E
10.4.12. Normalization for arithmetic is impossible
The normalization theorem for first-order logic applied to one of our arith-
metical systems Z is not particularly useful since we may have used in our
derivation induction axioms of arbitrary complexity. Hence it is tempting to
first eliminate the induction schema in favour of an induction rule allowing
us to conclude VxA(x) from a derivation of A(0) and a derivation of A(Sx)
with an additional assumption A(x) to be cancelled at this point (note that
this rule is equivalent to the induction schema), and then to try to normalize
the resulting derivation in the new system Z with the induction rule. We will
apply theorems 10.4.11 and 10.2.2 to show that even a very weak form of the
normalization theorem cannot hold in Z with the induction rule.
THEOREM. The following weak form of a normalization theorem for Z with
the induction rule is false: "For a.ny derivation dB with free assumption vari-
ables among itA for formulas A, B of level < t there is a derivation (d*)B,
with free assumption variables contained in those of d, which contains only
formulas of level < k, where k depends on t only."
PROOF. Assume that such a normalization theorem holds. Consider the
formula
Vx(Vy-x Py Px) Px
expressing transfinite induction up to b..),,+1, which is of level 3. By theo-
rem 10.2.2 it is derivable in Z. Now from our assumption it follows that there
10.5. TI for non-standard orderings 337
exists a derivation of this formula containing only formulas of level < k, for
some k independent of n. Hence Zk derives transfinite induction up to wn+i
for any n. But this clearly contradicts theorem 10.4.11. El
10.5 TI for non-standard orderings
The results proved up to now in this chapter all refer to the standard definition
of a well-ordering -- of order type 60 in section 10.1. We now consider the
question whether these results can be transferred to orderings defined in a
less standard way. It will turn out that all our attempts in this direction fail.
The results in this section require classical logic, but apart from that are
to a large extent independent of the particular formulation of an arithmetical
system. However, in 10.5.4 it will be convenient to be more specific about
the function constants allowed. Therefore we assume that we have constants
for all primitive recursive functions; clearly it then suffices to have a single
relation constant = for equality. As non-logical axioms we take the defining
equations for all primitive recursive functions (and of course the equality
axioms) plus the Peano axioms PA1, PA2c and the induction schema from
10.2.1. The resulting formalism is called Peano arithmetic PA.
10.5.1. We first consider the schema TI< (A, x), where < is a primitive
recursive (non-standard) definition of a well-ordering of order type <ro. By
means of a counterexample we will see that in general TI< (A, x) is unprovable
in PA, even if the ordering defined by < is the standard ordering < of the
natural numbers.
Let VxA(x) be an arbitrary universal formula of arithmetic. We may as-
sume that x < y AA(y) > A(x) is provable; otherwise take Vz<x A(z) instead
of A(x). Depending on A we define an ordering <A by
{n < m and A(n), or
n <A RI :=
771 <n and -,A(n).
Then n <A m or m <A n whenever n m. To see this, suppose n < m.
Then in case A(n) we have n <A m, and in case -,A(n) we also have -,A(m)
by our assumption on A, hence m <A n.
If VxA(x) is true, <A defines the standard ordering < of IN. Otherwise there
is a minimal k such that -A(k) holds; the ordering may then be visualized as
0, 1, 2, 3, ..., k 1, ... k + 3, k + 2, k + 1,k,
i.e. the initial segment [0, k 1] ordered by <, followed by the segment (w, k]
ordered by >. So the linear ordering <A is a well-ordering iff VxA(x) holds.
We now show that we can formally derive VxA(x) from an instance of
transfinite induction on <A within PA, or more precisely
PA -I- TI<, (A, x)l- VxA.
338 Chapter 10. Proof theory of arithmetic
To prove (2), recall that TI<, (A, x) is
Vy(Vx<Ay A(x) A(y)) VxA(x).
It clearly suffices to prove the premise Vy(Vx<Ay A(x) > A(y)). So let y be
given and assume
(3) Vx<Ay A(x).
We have to show A(y). So assume -,A(y). Then k < y for the minimal k
such that -,A(k). Because of the form (1) of the ordering <A we can conclude
that y is in the non-well-founded part of <A, hence y + 1 <A y. Therefore
A(y + 1) by (3), contradicting ---,A(k) and k < y <y + 1.
Note that if A is quantifier-free, then the ordering <A is primitive recursive
(and the above argument may be recast in minimal logic). Now since there
is a true formula Vx(fx = 0) with f primitive recursive that is unprovable in
PA (e.g. the formula expressing the consistency of PA), we have
PROPOSITION. There is a primitive recursive definition <i of the standard or-
dering of IN such that PA does not derive the schema TI< (A, x) of transfinite
induction with respect to <I. El
10.5.2. We now ask ourselves whether PA I- TI<(A, x) for an ordering <
and all arithmetical A implies that < defines a well-ordering of order type
less than ro. The answer is no, in a strong sense: it is not even true that such
a < must be well-founded, even if we require it to be primitive recursive. We
now prove this by means of a counterexample. The idea for this example is
based on the properties of an implicit truth function for arithmetic. As a first
step we need Tarski's classic result on the undefinability of a truth predicate
for arithmetic.
For the rest of this chapter we presuppose some familiarity with Gödel
numberings of arithmetic. We shall assume that a standard numbering for
terms, formulas and formal proofs of classical first-order arithmetic PA has
been given.
We use p for some standard primitive recursive bijective coding of pairs of
natural numbers onto the natural numbers, with inverses po, pi.
Furthermore there is some coding of finite sequences from IN into IN, such
that the primitive recursive extraction function Axy. (x)5 given by
(
xy if y < u,=n)
Y {0 otherwise,
for an n coding the sequence (x0, xl, , xu_i), and a primitive recursive
length function lth such that
lth(n) = u.
For the Gödel number of an expression E we write rE7.
10.5. TI for non-standard orderings 339
10.5.3. THEOREM. (Undafinability of a truth predicate for PA) A truth
predicate for arithmetic is a predicate T such that T(A) A is true for all
arithmetical sentences A. There is no arithmetically definab/e truth predicate
for arithmetic.
PROOF. Let Sub, be the arithmetical operation such that
Sub,(Ft-', FA-1) = FA[z/tr,
where z is a fixed variable, t a term, and [z/t] indicates substitution of t for
the variable z. Assume now T to be arithmetically definable.
S(x,y) := T(Subz(rY7, Y)),
where -a := 0, n + 1 := STE. Then we have
S(rt, FA-1) 44 A[z/T-1].
To see this, note
S(97,,F A-1)4S(n,FA-1)44T(Sub,(FTT,-1, FA-1))44T(FA[z/77]-1)44A[z/rd.
Now a contradiction follows. Let
A := ThS(z, z), and Ti =
Then
S() A-1) A[z = 45(97, T).
10.5.4. Implicit truth function
Let f be the characteristic function of the truth predicate for arithmetical
sentences, i.e. for sentences A:
f(A) = O 44 A.
(For definiteness, we may assume fn to be any value, say 0, on n which are
not the Gödel number of a formula). f is not arithmetically definable, as we
have seen, but in any case it must satisfy a number of conditions with respect
to the logical operators:
f(rsi = s2-1) = O i4 Val(Fsi-1) = Val(r827),
f (c(rA-i, rB1)) =O f (r-A-1\ =) 0 A f (FEr) = 0, where c(FA-1,1-B-1) =
FA A Er',
f (n(F A-1)) = O 4 f(FA) = 1, where n(FA) =
f (FVviA(vi)) = O 44 Vn( f (Sub,, (1- FA-1)) = 0),
where Val is a function computing the value of the closed terms. The con-
ditions (i)(iv) completely determine f on the set Sent of Gödel numbers of
sentences.
340 Chapter 10. Proof theory of arithmetic
LEMMA. f satisfies a II?-condition of the form
Vx]yR(x, y, f),
where R is a primitive recursive predicate.
PROOF. We recast the conditions above. For the components (n)i of n, when
n is viewed as the code of a finite sequence, we write ni in this proof. For
definiteness, we assume that if n E Sent, then no describes the main operator
of a formula given as a Gödel number: no = 0 for rA-1 = n prime, no = 1, 2, 3
for conjunctions, negations, and universal quantifiers respectively. From (i)
(iv) we obtain
VnESent((fn = O ± {(no = O -4 Val(ni) = Val(n2)) A
(no = 1 -4 fni = 0 A fn2 = 0) A
(no = 2 * fni 0) A
(no = 3 -4 Vm(f (Sub(ni, n2, m)) = 0))1) A
(fn O -4 {(no = Val(ni) Val(n2)) A
(no = 1 -4 fni 0 V fn2 0) A
(no = 2 -4 fni = 0) A
(no = 3 Am' (f (Sub(ni , n2, m')) 0))1)).
Here Sub(ni, n2, m) = Sub2 ('Fi n, n1) and if no = 3, n codes f-Vvn2B-1. Note
that Val(ni) = Val(n2) can be written in the form 3kQ(ni, n2, k) with primi-
tive recursive Q. Intuitively, Q(ni, n2, k) says that k codes two terminating
computations yielding the values of the closed terms coded by n1, n2, and
that the values are equal. Similarly, Val(ni) Val(n2) can be written as
3klq(ni, n2, k').
By moving the quantifiers Vm, 3m', 3k, 3k' outwards we obtain a quanti-
fier-free formula R preceded by VnVm3m/3k3e, and the truth of the lemma
is now obvious. N
10.5.4A. * Describe the construction of Q mentioned in the proof.
10.5.5. REMARK. At this point one can conclude easily that Beth's defin-
ability theorem 4.4.2B and hence also the interpolation theorem 4.4.2 cannot
hold for Peano arithmetic PA. To see this, note that as in 10.5.4 one can
give an implicit definition of the truth predicate T for arithmetic (here for
definiteness we assume that Tn is false for n which are not the Gödel number
of a formula), in the form A(P) := Vx3yR(x, y, P) with a unary predicate
symbol P and a primitive recursive predicate R. Clearly P is uniquely deter-
mined by A(P), i.e. A(P) A A(Q) Vx(Px 44 Qx) is derivable in PA. Now
if Beth's theorem would hold, then there would be a formula C not involving
P such that A(P) Vx(C 44 Px) in derivable in PA and hence true in the
standard model. This contradicts Tarski's undefinability theorem 10.5.3.
10.5. TI for non-standard orderings 341
10.5.6. DEFINMON. Let fix := minyR(x, y, f), where f is the characteris-
tic function of the truth predicate, and R is as above.
Note that VxR(x, f'x, f) holds. Let (f', f) be the encoding of f' and f into
a single sequence; this sequence is obviously not arithmetical, but satisfies
the I17-condition just mentioned.
10.5.7. We now want to argue that any pair f', f satisfying VxR(x, fix, f)
is such that f is the characteristic function of the truth predicate for arith-
metical sentences. To see this, observe that from WR(x, f'x, f) we obtain
Vx3yR(x, y, f) and hence the condition given in the proof of the lemma in
10.5.4. But as already noted this determines f on the set Sent of Gödel
numbers of sentences.
10.5.8. Let us now make use of this insight to produce the counterexample
we are aiming at. As a first step we will rewrite VxR(x, f'x, f) in the form
WQ(TEx), or more precisely construct a primitive recursive predicate Q such
that (f', f) I VxR(x, f'x, f) 1 = { a Q(75x) 1.
The first step consists in replacing each subterm ft in R(x, f'x, f) by pi (at)
and f'x by po(ax), yielding the form V xRi(x , a). We now argue that this
can be rewritten as
Vx`91xi . Vxn(xi = ati A A xn = atn R2(X, ,Xn))
where t1,... ,tn are terms without a. This can be proved easily by induc-
tion on the number of nestings of a; e.g. Vx(a(ax) = 0) is rewritten as
VxVxiVx2(xi = ax A x2 = axi -4 x2 = 0). Now this can be further rewritten
as
VyVx, xi, , xn, Yi, , Yn<Y (Yi = ti A Ay = tn A
x1 = ayi A A xn = ay n -+ R2(x, xi, 5 Xn))
Finally ayi can be replaced by (rty)y, and y by lth(rty). This yields the form
VxQ(a-x) with a primitive recursive Q.
10.5.9. DEFINITION. Let a be a variable ranging over functions in 1\1 >
With any 111-sentence Va3x-Q(ax) we associate a tree
TrQ :-= { ax I Vy<x Q(rty) }.
The converse of the partial ordering <1 on TrQ (initial segment ordering of
finite sequences) can be extended to a linear ordering 4* (the Brouwer-Kleene
ordering of Tr(?) by defining the converse
rxx ,3y if either (-6-x <I -igy) or
(Tex = ,T3z and az > ,8z for some z < x, y).
342 Chapter 10. Proof theory of arithmetic
10.5.10. LEMMA. If TrQ is well-founded under the converse of <i, then <I*
is a well-ordering.
PROOF. Consider any infinite sequence within TrQ
dOXO N* alX1 N* TV2X2 N* ' ;
from this we find an increasing sequence in <, within TrQ, that is to say, an
infinite sequence a in TrQ. For a0 we can take (assuming xo > 0)
a0 = hm ai0.
i-+00
This limit is determined, since d1x1 is either a prolongation of(Teoxo, or doz =
and aiz < aoz; so either a00 = a10 or a10 < a00; the value of ai at 0
can go down at most finitely often, then ai0 remains fixed. And so on for
al, a2 etc.
10.5.11. THEOREM. The BrouwerKleene ordering <1* of the HIsentence
Vce3x,Q(Cix), Q as in 10.5.8, is primitive recursive, not well-founded, but
well-founded w.r.t. all arithmetical sequences. It follows that TI.1- (A, x) holds
for any arithmetical formula A(x), i.e.
Vy(Vx<*yA(x) A(y)) VxA(x).
PROOF. If the BrouwerKleene ordering <* were well-founded, it would mean
that there was no truth definition; in other words, the encoding of arithmetical
truth (fi, f) provides an infinite sequence on the BrouwerKleene ordering.
On the other hand, we have observed in 10.5.7 that any a = (fi, f) satis-
fying VxQ(eix) and hence VxR(x, f) is such that f is the characteristic
function of the truth predicate for arithmetical sentences. Hence there is no
arithmetically definable such a, i.e. <* is arithmetically well-founded.
Finally let A(x) be any arithmetical formula and assume that (A, x)
does not hold. Then the premise Vy(Vx<*yA(x) > A(y)) is true but the
conclusion VxA(x) is false, hence --,A(x0) for some xo. From the premise for
xo we obtain an x1 1*xo such that ,A(xi), then an x2<*x1 such that iA(x2),
and so on. If we pick the smallest xo such that ,A(xo), then the smallest
xi <* xo such that --,A(xi) and so on, we obtain an arithmetically definable
sequence xo, x1, x2, . . . such that xi+i <*xi for all i, contradicting our previous
observation.
10.6 Notes
Some important general references on the branch of proof theory generated
by (modifications of) Hilbert's programme (cf. remarks in the preface) are
10. 6. Notes 343
Schötte [1960], Kreisel [1977], Schötte [1977], Takeuti [1987], Girard [1987b],
Pohlers [1989], Buchholz et al. [1981]. Girard [1987b] covers more than just
proof theory in the Hilbert programme tradition. In the appendices to Takeuti
[1987] some leading proof-theorists have given their views on proof theory.
10.6.1. Gentzen's consistency proofs. The proof in Gentzen [1936] starts
from a formalism for arithmetic based on natural deduction. Gentzen defines
a notion of "reduction step" for deductions, which preserves correctness. If
no reduction step is possible, the conclusion must be a sequent the truth of
which is immediately decidable. He then assigns ordinal notations less than e0
to derivations and shows that suitable reduction steps lower the ordinal (no-
tation) assigned to a derivation, ultimately producing a derivation to which
no reduction step is applicable. A fully reduced derivation of 1 = 2 is impos-
sible, and from this it may be concluded that arithmetic is consistent. In fact,
Gentzen's argument uses (A, x) for a quantifier-free A in his consistency
proof.
Originally Gentzen had a different version of the proof, not based on trans-
finite induction, but on a notion of "reduction rule" instead. A reduction rule
is something like a strategy for reducing derivations to correct derivations.
Objections raised to this proof because of a supposed use of Brouwer's fan the-
orem induced Gentzen to shortcircuit this discussion by using transfinite in-
duction instead. On this early version of Gentzen's proof, see Bernays [1970].
Gentzen's first proof is not easy to follow, and in Gentzen [1938] he presents
a second version, based on a "Gentzen system" (as it is called in this book),
which is more perspicuous, even if the formalism of arithmetic itself is some-
what less natural.
Finally, in Gentzen [1943], he proved the initial cases of transfinite induc-
tion along - (10.2.2) and gave a direct proof of the underivability of (P)
for a predicate letter P (10.4.11).
Schötte [1950a] showed that Gentzen's consistency proofs could be made
more perspicuous using an infinitary proof system with w-rule (such as Z in
our exposition), and embedding standard arithmetic in the infinitary system.
Our exposition in section 10.4 takes Gentzen [1943] as point of departure,
but incorporates Schötte's idea of using an infinitary system. Moreover, the
logical basis is an N-system; for a similar exposition based on a Gentzen
system, see Schwichtenberg [1977].
Gentzen's results on transfinite induction provided the first example of a
true, mathematically meaningful statement not provable in first-order arith-
metic, in contrast to the original incompleteness result of Gödel, where the
unprovable statement was entirely motivated by metamathematical consid-
erations. Still, transfinite induction up to ec, might be regarded as esoteric.
The first example of a purely combinatorial statement, of "straightforwardly
mathematical character" was found by Paris [1978]; see also Harrington and
344 Chapter 10. Proof theory of arithmetic
Paris [1977]. After the first result of this type, many more followed; examples
with references may be found in Takeuti [1987, section 12], Buchholz and
Wainer [1987], Gallier [1991], Friedman and Sheard [1995].
10.6.2. Subsystems of Z. Refinements of Gentzen's theorem 10.2.2 on prov-
able and 10.4.11 on unprovable initial cases on TI in Z to corresponding results
for the subsystems Zk were first obtained by Mints [1971] and Parsons [1973].
10.6.3. Continuous cut elimination. An important version of cut elimina-
tion for infinitary systems is continuous cut elimination, due to Mints [1975].
Provided one permits a "repetition rule" (which simply repeats the premise
as the conclusion), cut elimination may be defined as a continuous operation
(in the usual tree topology) on prooftrees.
This technique has been successfully applied in, for example, Gordeev
[1988] and Buchholz [1991]. Buchholz obtains a neat proof of the uniform
reflection principle by this method. The uniform reflection principle may be
stated as
ProofpA(EA(±)7 A(x)) (FV(A) C {x}),
where Proofs is the standard arithmetized proof predicate for system S, and
rA(&)1 is the Gödel number of A(Sx0) as a function of x, i.e. r A(&)7 is
represented by a term containing at most x free.
For continuous normalization of infinite terms, see Schwichtenberg [1998].
10.6.4. TI for non-standard orderings Both counterexamples in the text
are due to Kreisel. The first one, in 10.5.1, was given by Kreisel in lectures
on proof theory at UCLA (Kreisel [1968]). It is also mentioned in Kreisel
[1977]. The second one, leading to theorem 10.5.11, is from Kreisel [1953].
In fact, we can find a primitive recursive ordering which is not well-founded,
but well-founded w.r.t. all hyperarithmetical sequences. This follows from
the characterization of II1-predicates as EHyp-predicates given by Kleene
[1955, Theorem XXVI].
This should be contrasted with the result of Friedman and Scedrov [1986]
showing that matters for intuitionistic first-order arithmetic HA are different.
The remark on the failure of interpolation for arithmetic (10.5.5) we owe
to G.E. Mints, who considers it to be folklore.
Chapter 11
Second-order logic
11.1 Intuit ionist ic second-order logic
There exists a close connection between intuitionistic second-order logic and
the so-called polymorphic lambda calculus A2. A2 is an extension of A,
permitting abstraction over type variables, and under the formulas-as-types
paradigm it may be regarded as isomorphic to the natural deduction system
for intuitionistic second-order propositional logic -4V2Nip2, that is to say,
1\Trilp extended with quantification over propositions. A2 is an important
component of various type systems studied in computer science.
In this chapter we show how strong normalization for intuitionistic second-
order predicate logic may be reduced to normalization for Nmp2, and we
present a proof of strong normalization for --Al2Nip2 (= )2). Next we show
that intuitionistic second-order arithmetic HA2 (formal intuitionistic anal-
ysis) can be represented in intuitionistic second-order logic, and show that
every recursive function which is provably total in HA2 can be represented by
a term of A2. From the formal deduction establishing totality of the function
being considered, one can read off an algorithm, encoded by a term of A2, for
computing the function.
11.1.1. Description of Ni2
To the first-order language, second-order quantifiers VXn, 3.)Cn are added. If
we wish to distinguish the symbols for second-order quantification from those
for first-order quantification, we write V2, 32. The additional quantifier rules
are given by AVXnA
VYnA[Xn/Yn] V2I A[Xn/Axi xn.B] V2E
A[Xn Axi xn..13]
3213Xn A
345
[A[Xn I Yn]]u
3XnA C 32E
346 Chapter 11. Second-order logic
where
in V21 A does not depend on open hypotheses containing Xn free, and
Yn is free for Xn in A;
A[Xn/Axi xn.13] is obtained from A by replacing each occurrence of
a subformula Xnti tn in A by B[xi,...,xn/ti., , tn]
in 32E Yn does not occur free in assumptions on which C depends exept
A[Xn /1/1, nor does Yn occur free in C.
These rules are the same as in 6.6.3, except that the restriction on B has
been dropped.
11.1.2. Restriction to the language with -+, V, V2
There is a good deal of redundancy in the operators of second-order logic,
since we can define 1_, A, V, ], A' from --+, V, V2 as follows. In the definitions
below X° is not free in A, B.
1 :=(VX°) X° ,
A A B := V X° ((A -4 (B -4 X)) -> X),
A V B := VX°((A -> X) -4 ((B X) -> X)),
3yA := VX°(Vy(A -4 X) -4 X),
3YA := VX°CdYn(A -> X) -4 X)).
Under these definitions, the usual introduction and elimination rules for the
defined operators become derived rules in the fragment based on V, V2.
For example, the following deductions show that AI, AEL are derivable.
A-4(B--X°) u A
B.- X° B Au
X° VX° ((A->(B-a) )->X) B --+ A
(A->(B-> X°))-- - a° (A-qB--+ A))- } A A-qB --+ A) -
V X° ((A-4(B--+ X))--+ X) A
and the proof of AER is similar to the proof of AEL. Note that the distinction
between minimal and intuitionistic logic disappears in second-order logic.
Henceforth we shall assume I2 to be formulated with primitives -4, V, V2
only, unless expressly indicated otherwise.
11.1.2A. Derive the rules for the other defined operators.
11.1. Intuitionistic second-order logic 347
11.1.3. Normal deductions and normalization for Ni2
We can formulate notions of conversion, reduction and normal form in the
same way as for Ni. In particular, to the detour conversions of the +V-
fragment of Ni we add V2-detour conversions:
A
VYnA[xn/yn]
A[Xn / A.B]
cont
D[Xn / ..B]
A[Xn / Ai.B]
Since we restrict attention to the *V V2-language, there is no need for con-
sidering permutative conversions and immediate simplifications. But it is
of interest to note that the detour conversions for the operators A, V, _L,], 32
correspond under the definitions to transformations of prooftrees which result
from --*V V2-detour conversions. On the other hand, permutative conversions
correspond after translation under the definitions to transformations not gen-
erated by the V V2-detour conversions.
11.1.4. -PROPOSITION. Strong normalization w.r.t. detour conversions of
Ni2 in the full language is reducible to strong normalization w.r.t. detour
conversions for the *V V2-fragment of Ni2.
11.1.4A. 4 Prove the preceding proposition in detail.
11.1.4B. 4 Give an example of a permutation conversion in the full second-order
language which does not translate into a series of conversions relative to V and
V2
There is no meaningful subformula property for second-order logic. Any
A[Xn1A1..13] ought to count as a subformula of VXnA, but the logical com-
plexity of the subformula may be very much larger than the complexity of
VXnA. This is also the reason why it does not seem to be worthwhile to
strive for normalization relative to the full language, including permutative
conversions.
Nevertheless, some useful conclusions can be drawn from the fact that a
derivation can be brought into normal form.
For one thing, a normal derivation of a first-order formula (i.e. a formula
without V2) does not contain second-order quantifiers. Another example is
given by the following (cf. 6.2.7D):
11.1.5. PROPOSITION. A normal derivation without open assumptions ends
with an introduction.
PROOF. Let 7, be a normal derivation without open assumptions. Assume
that D ends with an elimination rule. Follow a main branch (defined as in
348 Chapter 11. Second-order logic
6.2.5) starting from the conclusion. We pass through eliminations only; at
the top we find a formula which cannot be an open assumption (there are
none, by hypothesis), but also cannot be discharged by --q since there are no
introductions below this formula; contradiction. El
11.1.6. PROPOSITION. Let D be a normal derivation in Ni2 of AV B without
open hypotheses, i.e. D derives VX°((A -- X) -- (B > X) -4 X). Then
Ni2 F- A or Ni2 I- B.
PROOF. First proof. There is an immediate proof from the preceding propo-
sition, if we consider normal deduction w.r.t. the full language, so that V
appears as a primitive.
However, it is instructive to see how we have to argue if V is defined and
we are reasoning about the >V V2-fragment.
Second proof. Let us follow the main branch (defined as in 6.2.5) of D,
going upwards from the conclusion.
If the final rule applied in D is an E-rule, then the main branch passes
through eliminations only and its topmost formula must be an open assump-
tion, which is impossible. So the final rule applied is V2I. The immediate
subdeduction D1 of D therefore terminates with (A-4X) -- (B-->X) -4 X
and has no open assumptions. Again, the final rule of D1 must have been an
introduction, so the premise (B --> X) > X is the conclusion of a subdeduc-
tion D2 from open assumptions of the form A --> X.
Case 1. A -4 X does actually occur as the top formula of the main branch.
Then the first rule applied to A --> X has to be an elimination rule, otherwise
A --> X or VX(A -+ X) would have to occur as a subformula of the conclusion
in the strict sense. We see that this is impossible, if we keep in mind that X
does not occur in A or B. So >E is applied at the top -
D'
A > X A
X
- and then introductions must follow in the main branch. D' may use A -->
X, B > X as open'assumptions. But if in D' we replace the X everywhere by
A V B, these assumptions become derivable and we have found a deduction
for A.
Case 2. If there is no formula A -4 X at the top of the main branch, it must
be the case that the final rule of D2 is an introduction discharging B -4 X
at the top of the main branch and possibly other places. The argument is
similar to the preceding case, and we find a deduction of B. E
11.2. Ip2 and A2 349
11.2 Ip2 and A2
11.2.1. Ni2 and polymorphic lambda calculus
In a more or less routine fashion we can reformulate Ni2 as a calculus of
typed terms. We shall not give here the description for the full calculus,
but only for intuitionistic second-order propositional logic Ip2. In Ip2 only
propositional variables X°, Y°, zo, occur; we drop the superscript O. As in
the full system, 1, A, V, 3, 32 are definable.
The new clauses describing the formation of terms for deductions in propo-
sitional Ni2 are given by
t: A t: (VX)A
AX .t: (V X)A t()- B: A[X I B]
There is an obvious condition to be met in the case of V2I: t may not contain
free individual variables with a type in which X occurs free. We have added
new operators of type abstraction, AX, and type application (application of
a term to a type (= formula). The resulting calculus of typed terms is also
known as the polymorphic lambda calculus or system F (Girard [1971,1972])
or A2.
Henceforth term will be used for first-order terms; for second-order terms
we use type or formula.
The conversions for --> and V2 correspond in term notation to
(ÀaA .tB)(sA) cont t[xA I sA]: B
(AXIA: (V X)B)A cont t[X I A]: B[X IA]
Observe that we do not have application on the level of types: instead of
having ((V X)A)B convert to A[X I B], we simply identify ((V X)A)B with
A[X I B], so that we can in fact dispense with the notation ((V X)A)B.
For this system we shall prove strong normalization and uniqueness of
normal form in the next section. The remainder of this section is devoted to
computational aspects of A2, in preparation for section 11.5.
11.2.2. Computational content
DEFINITION. Let X be a fixed propositional variable in A,. We put
N'x := X -4 ((X --> X) --> X).
This is the type of (variant) natural numbers over X. The so-called (variant)
Church numerals are terms of type Nix in normal form:
filx := Axx fx-+'.f(x) : mx,
350 Chapter 11. Second-order logic
where as before
f0(x) := f"1(x) := f (fri(x))-
We shall drop the subscript X in the sequel, since it will be kept fixed. IE
Of course we can also define it'A and NIA for an arbitrary type A in the same
manner.
NOTATION. In the remainder of this chapter we shall simply write NA, fiA
for N'A, filA respectively. El
11.2.2A. 4 Show that the variant Church numerals of type X are the only terms
in normal form of type N Nx
11.2.2B. 4 All extended polynomials are representable in the variant Church
numerals. Hint. Take as representing terms
F+ := AxNyN zx x x
NyNzXF := Ax X X XZ (Aux .yu f)
Fpk :=
Fc := AxN
fx-+x.Fsg := AxNyx xy(Azx .fy)
NyXfX-a:= Ax .x(fy)(Azx .y).
As we have seen before in 1.2.21, the class of representable functions becomes
larger, if one considers NA for arbitrary A, and permits representing terms
where the types of the input numerals and output numerals may differ.
In A, there is arbitrariness in the choice of the type X in Nx. This
arbitrariness is removed in A2. There we put:
11.2.3. DEFINITION.
N := V X(X ((X > X) > X)),
"ft := AX Axx fx'x fn (x).
The results on representability of extended polynomials carry over to A2,
modulo small adaptations. But as will become clear from the exercises, many
more functions are representable in A2 than are representable in A,. In
particular, the functions representable in A2 are closed under recursion.
11.2.3A. 4 Show that the following operators p, Po, Pi may be taken as pairing
with inverses for types U, V with a defined product type U A V:
p := AUEIVV AXAX(11->X).XUV,U->
Po := Axunv .xu(Ayu zv .y), /31 := Axunv.xv(Avu zv .z).
N.B. These terms encode the deductions exhibited in 11.1.2.
11.3. Strong norrnalization for NIL' 351
11.2.3B. 4 Let S -=7_ AzNAXAxxyx-4x .y(zXxy), It AX.ÀuXfXzN.zXuf.
Show that
It Xux fxrx6 u,
It Xux fx-4x (St) = f (It Xux fx-4xt).
11.2.3C. 4 Define with the help of pairing and the iterator of the preceding
exercise a recursor Rec such that
Rec Xux fx-4(N-006 =ux
Rec Xux fx-4(N--)x)(sn) = f(Recuffi)ft.
11.3 Strong normalization for Ni2
We first show that strong normalization for full second-order logic can be
reduced to strong normalization for propositional Ni2 or A2.
11.3.1. PROPOSITION. Strong normalization for Ni2 is a consequence of
strong normalization for propositional Ni2.
PROOF. We define a mapping from formulas and deductions of Ni2 to
formulas and deductions of propositional Ni2, as follows.
0(xnt1...tn):=x*
where X* is some propositional variable bijectively associated with the rela-
tion variable Xn, and for compound formulas we put
çb(A > B) := çbA -4 OB,
.1)(VXnA) :=VX*0A,
çb(VxA) :=Vx*OA, x* not free in OA.
Here x* is a propositional variable associated to the individual variable x.
Deductions are translated as follows. We write 114 for "0 maps to".
The single-node prooftree "A" is translated into the single-node prooftree
440A,
For prooftrees of depth greater than one, we define inductively
1-4
-41A > B OAB -41
D' OD OTY
A -4 B A _4E
1-4 > OB OA
352 Chapter 11. Second-order logic
D OD
A[Xn]2 0i 0(A[X])
V I V IVYnA[xn/111 çb(VY*A[xn/y1)
D OD
0i V X*0(A)
.0(A)[X* 10B] V E
D ODA[x]0I-4 0(A[x])
VyA[x/y] V/ Vy*O(A[x])
V21
D OD
0
VxA F4 V x* çbA
A[x It]
VE V2EOA
Note that for all individual variables -±' and terms
OA -- - .0 (A[±7n).
Furthermore,
D >.- V' OD 0(D').
11.3.2. In contrast to the situation for A, the propositional variables
in Ni2 cannot simply be regarded as formulas of minimal complexity, since
in the course of the normalization process quite complex formulas may be
substituted for these variables. The notion of computability for A2 has to
reflect this; the idea is to assign "variable computability predicates" to the
propositional variables. A "computability candidate" has to satisfy certain
requirements. A straightforward generalization of 6.8.3 (on which the proof
of strong normalization of A2 in Girard et al. [1988] is based) is obtained by
defining the notion of a computability candidate as follows.
DEFINITION. A term t is called non-introduced if t is not of the form Ax.s or
AX.s. A set of terms X, all of the same type A, is a computability candidate
(a c.c.) (of type A) iff
CC1 If t E X then SN(t);
CC2 If t E X and t e then e E X;
CC3 If t is non-introduced, and Vti--<it(ti E X) then t E X. Z
As a corollary of CC3 we find
CC4 If t : A is non-introduced and normal, then t E X.
Instead of this definition, obtained by transferring the properties C1-3 in 6.8.3
from computability predicates for function types to c.c.'s, we use the slightly
different notion of a saturated set which is convenient for generalizations.
VXnA
A[Xn I Ax.13]
V2E
Z
11.3. Strong normalization for Ni2 353
11.3.3. Saturated sets. To motivate our definition of saturated sets we first
collect some properties of the set SN of strongly normalizable terms. In this
section, e w ill be used for a sequence of first- and second-order terms (types).
We say that 't is in SN, if the first-order terms of t are in SN.
LEMMA.
If e E SN, then for any variable x of the appropriate type xe E SN.
If t E SN, then Ax.t E SN.
If t[x/r]e E SN and r E SN, then ().x.t)re E SN.
If t E SN, then AX.t E SN.
If t[x Bie E SN, then (AX.t)Be E SN.
PROOF. (i) Immediate, since every reduction step must take place in a mem-
ber of e.
(ii), (iv) are treated similarly.
(iii) (cf. lemma 6.8.4) Assume t[x/r]e E SN and r E SN; we have to show
(Ax.t)re E SN. We use induction on fir + hg+ ht, the sum of the sizes of the
reduction trees of r, e and t. If (Ax.t)re>-1 t", then either
t" (Ax.t)riE.' with r r', and by induction hypothesis t" E SN; or
t" (Ax.t)re with ei and by induction hypothesis t" E SN; or
t" (Ax.e)re with t t', and by induction hypothesis t" E SN; or
t" t[x/rV, and t" E SN holds by assumption.
(v) is treated similarly.
Parts (i), (iii) and (IT) yield non-introduced terms. We call a set A of
strongly normalizable terms of type A saturated if it is closed under (i), (iii)
and (v):
DEFINITION. A set A of terms is said to be saturated of type A (notation
A: A) if A consists of terms of type A such that
Sat-1 If t E A, then t E SN.
Sat-2 If e E SN, then for any variable x of the appropriate type xE E A.
Sat-3 If t[x/rV E A and r E SN, then (Ax.t)re E A.
Sat-4 If t[X/EnE'E A, then (AX.t)Ii3f.'E A.
So in particular the set SNA of strongly normalizable terms of type A is
saturated.
354 Chapter II. Second-order logic
11.3.4. DEFINITION. The following definition of a predicate of strong com-
putability "Comp" extends the definition given before for predicate logic.
Let A be a formula with FV(A) C X, and let II B1, . . , Bn be a sequence
of formulas of the same length, and let fi B1, , Bn be a sequence of
saturated sets with Bi: B. We define CompA[g.1,6] (computability under
assignment of to.g.) as follows:
Compxge/ti] :=
CompD,D[ie/] := { tESN : VsECompD[je/](ts E Compc[X/]) 1,
Comp (,,y)c[fe/tij := { tEsN : VDVD: D(tD E Compc DD
(D ranging over types). El
NOTATION. In order to save on notation, we shall use in the remainder of this
section a standard abbreviation: we write Comp*D for CompD[X'/11], where
Bi: Bi are saturated sets (1 <i < m), fixed in each proof. So Comp*D[Y/C]
stands for CompD Y/ti, C] etc. El
11.3.5. LEMMA. Comp*A is a saturated set of type AP- e I I-3].
PROOF. We have to show Sat-1-4 with Comp for A, i.e.
If r E Comp*A then r E SN.
If &E SN then xe E Comp.
If r[xl s]e E Comp;!1 and s E SN, then (Ax.r)se E Comp.
If r[Y1C]e E Comp*A then (AY.r)Ce E Comp.
follows from the definition of Comp*A and the fact that every saturated
set is a subset of SN.
is proved by induction on the depth of A. So assume E.' E SN. Note
that this implies xe E SN, by the properties of SN.
Case (ii)1. A -a X. By Sat-2 for Bi we find xe E Bi, and hence xe E Comp.
Case (ii)2. A m A1 > A2. We have to show xe E ComP*A1-4,42 Assume
s E Comp*Ai; we then have to show xes E Comp%. Since s E SN by (i), we
find that xes E Comp% (using (ii) for A2).
Case (ii)3. Am (VY)Ai. We have to show that xe E COMW(`vymi . So let
C: C be a saturated set, then we must show that xeC E Comp*A, [Y/C]. But
this is a consequence of (ii) for Ai.
is proved by induction on the depth of A. We assume s E SN, r [O]e E
Comp. Note that this implies (Ax.r)sa'E SN, by the properties of SN.
Case (iii)1. A m X. We have to show (Ax.r)se E B. But s E SN, so this
follows from Sat-3.
Case (iii)2. A -m A1 > A2. Let t E Comp%. Then we must show (Ax.r)set E
Comp*A2. By IH for A2 it suffices to show that r[x/s]et E Comp*A2, which
holds by definition of Comp.
11.3. Strong normalization for Ni2 355
Case (iii)3. A (VY)Ai. Let C: C be a saturated set. We must show
(Ax.r)sec E COmp*Ai [Y/C]. By the IH for A1 it suffices to show that r [x/s]eC E
Comp*Ai [Y/C], which holds by definition.
(iv) is again proved by induction on the depth of A. Let r[Y/C]e E Comp.
Note that this implies (AY.r)CeE SN, by the properties of SN.
Cases (iv)1 and (iv)2. Left to the reader.
Case (iv)3. A (VZ)Ai. Let D: D be a saturated set. We must show
(AY.r)CeD E Comp*AJZ/D]. By the IH it suffices to show r[Y/C]rD E
Comp*Ai [Z/D], which is trivial.
11.3.5A. 4 Supply the proofs of the missing cases for (iv) in the proof of the
preceding lemma.
11.3.6. LEMMA. Let 13' be a sequence of saturated sets as before. Then
CompA[ym [XXI] = CompAPZ, Y/ft, compc[X-A.
(The right side is well-defined by the preceding lemma.)
PROOF. By induction on the complexity of A. Let A VZ.B. Then
Comp*NzB)Eym :=
{ tESN : VDVD:D(tD E CoMP*B[Y/C][Z/D])
{ tESN : VDVD:D(tD E Compl[Y, Z/Comp*c, D]) =
Comp:I[Y/Comp*c].
We leave the other cases to the reader.
11.3.6A. 4 Complete the proof of the preceding lemma.
11.3.7. THEOREM. Let t[xi: A1, , An]: C, and assume that the free
second-order variables of {t, A1, , An} are contained in
For 1 < i < m, 1 < j < n let Bi: Bi be saturated sets, si: A1[. /É],
si E CompAi [Xlii]. Then
t[fe /AVM E ComPc[gA.
PROOF. Let us write e for t[5e/P]ri/gl. We prove the statement of the
theorem by induction on t.
Case 1. t xfi. Immediate, since si E Comp*A, by assumption.
Case 2. t rs. By IH, r*, s* are strongly computable, hence so is r*s*.
356 Chapter 11. Second-order logic
Case 3. t r(vz)AC: A[Z/C]. By IH r* E COMp&z)A. By the definition of
Comp*, lemma 11.3.5 and lemma 11.3.6
r*C[je /A] E COMp*A[Z/CoMp*c.] = COM13(vc].
Case 4. t Azcl.rc2. We have to show that Azca/A.r* E COMpc2. So
assume s E Comp'¿.i. Then we have to show (Ax.r*)s E COMp%. By Sat-3 it
suffices to show that rlx/s] E COMp% (for Comp'¿.2 is saturated by lemma
11.3.5). But this follows by IH from
/ .9] = r[.J?". / x / s].
k"vz)Ai
Case 5. t ÀZ.r. t* is of the form AZ.e. We have to show t* E COMp
.
So let C: C. Then we have to show (AZ.r*)C E Comp':41[Z/C]. By Sat-4 we
need only to show r*[Z/C] E Comp*Ai [Z/C], which follows by IH.
COROLLARY. All terms of A2 belong to SN, hence they are strongly normal-
izable.
11.3.8. An auxiliary system
In section 11.5 we should like to map deductions and formulas of second-
order arithmetic to terms and types of A2, in such a way that the notion of
reducibility is preserved, and second-order propositions go to the correspond-
ing type. For this it is necessary that (VX)X is mapped to an inhabited
type of A2; but since the type (VX)X is uninhabited in A2, we introduce the
auxiliary system A2S2. In the next section we shall show that in A2S1 precisely
the same recursive functions are representable as in A2; this is proved by a
suitable encoding of AA/ into A2.
DEFINMON. Let A2S1 be obtained from A2 by adding a constant a VX.X.
There are no conversion rules involving a
THEOREM.
The terms in AA/ are strongly normalizable.
Normal forms in A2 and AA/ are unique.
If we include conjunction as a type-forming operator, strong normaliza-
tion and uniqueness of normal form remain valid for A2 and AZ/.
PROOF. (0 As for A2, adding some cases where necessary.
(ii) By extending the proof of weak confluence in 1.2.11. The rest of the
proof is left to the reader.
11.4. Encoding of A211 into A2 357
11.3.8A. * Supply the missing details in the proof of the preceding theorem.
11.4 Encoding of A212 into A2
11.4.1. PROPOSMON. Let t: N > N be a [closed] term in A21. Then there
is a [closed] term e in A2 such that th fit eft --
PROOF. For the proof we define (1) an encoding ° of types and terms of AA/
into A2, for which it can be proved that if t >-1 t', then t° (e)°, and (2)
maps W, C such that Wh, n°, Cit° ft. From this the e in the statement of
the theorem is obtained as AzN .C(t°(Wz)). Once the right definitions for °, W,
C have been given, the proofs become straightforward inductive arguments,
which are left almost entirely to the reader.
We define the encoding map ° on types by
.X° := X,
(A + B)° := A° > B°,
(V X.A)° := VX (X A°).
It follows that
(A[X/ B])° A°[X /
In order to define the encoding of terms, we assume that there is associated to
each type variable X a "fresh" individual variable x of type X, not occurring
free in the terms to be encoded. The correspondence between the X and the
associated xx is assumed to be one-to-one. Below, in the definition of the
encoding, we shall use the tacit convention that the type variables Xi, X, Y
have xi, x, y associated to them.
For A with FV(A) = {X1, , Xp}, we define a term rA: A° with free
variables xi: ..., xp: Xp, X1, Xp as follows:
rxi := xi: Xi
TB-*C := Ay: B° (y Ø FV(7-c))
TVX.B := AX AXX TB
For closed A, TA : A° is closed. For example,
r(vx)x = AX Axx .x: VX (X X).
We now extend ° to terms, and associate to each t E A, with free variables
X1, , Xp, A1, , yq: Aq a term t°: A° with free variables X1, , Xp,
xl: X1, , xp: Xp, yi: , yq: A°q, as follows:
if A E Ai then
if A E B C then
if A a (VX)B then
if A E B[X/C] then
(y: A)°
(Ay: B.t: C)°
((t: B-4A)(s: B))°
(AX.t:VX.B)°
((t: (V X)B)C)°
110
(t°: B°>A°)(s°: B°);
AX Ax: X.t°: B°;
:= (t°: ((VX)B)°)C°1-c;
358 Chapter 11. Second-order logic
Then one verifies commutativity with substitution:
(t[y: Al s: A])° t° [y: A°/s°:
TA[xig TA[X B°][x: B°ITB: B°], and
(t[X I B])° t° [X I B°][x: B° I TB: B°]
by induction on t, A and t respectively, and uses this in verifying
if t --1 t' then t° -- (e)°.
For example, we have as one step in the induction for (ii):
7-(vy)c[x/B] = AYAYYTc[x/B] =
AYW.(Tc[XIB°][x: B° I TB: 131)
(AnyY.(rc))[XIB°][x: B°/1-B: B°] =
T(vy)c [XIB°][x: B° I TB: B°].
Further, we note that
N° VX(X > (X ((X X) X)))
(71)° AX-Axxyxzx'x.zny.
We can define operators W ("weaken") and C ("contract") such that
>-- Cft° ft;
simply take
W := AuNAXAxx yx zx'x .uXxz,
C := MIN° AX Ayx zx-4x .uXyyz.
For the term t' of the proposition we may now take
:= AzN .C(t° (W z)).
11.4.1A. * Fill in the missing details of this proof.
11.5 Provably recursive functions of HA2
11.5.1. DEFINITION. Intuitionistic second-order arithmetic HA2 (alterna-
tive notation HAS) is obtained taking the language of pure second-order
logic, with a single individual constant 0 (zero), a single function constant S
(successor), and a binary predicate symbol = for equality between individ-
uals, with the axioms and rules of intuitionistic second-order logic, and the
following azdoms for equality and successor:
Vx(x = x),
V XlVxy(x = y A Xx > Xy),
Vxy(Sx = Sy > x = y),
Vx(,Sx = 0), i.e. Vx(Sx = O > (V X°)X),
11.5. Provably recursive functions of HA2 359
and the induction axiom:
VX1(X0 A V x(X x + X (Sx)) VyXy).
Note that the second equality axiom implies
Vxy(x =y±y= x);
Vxyz(x=yAx=z-4y=z);
Vxy(x = y + Sx = Sy).
(For the first, take Xz (z = x), then x = y A Xx Xy yields x = y A
x=x-->y=x, and since x = x holds, x = y > y = x; for the second take
Xx (x -= z); for the third, take Xz (Sx =Sz)).
11.5.2. DEFINITION. A subsystem HA2* based on 12 and equivalent to HA2
is the following. The language consists of 0, S, = as before, but we define a
predicate EV by
x E EV Nx := V X1 (X0 -4 (V x(X x X (Sx)) + X x)).
As axioms we include
Vx(x = x), Vxyz(x = y (x = z y = z)),
Vxy(Sx = Sy -4 x = y), Vxy(x = y Sx = Sy),
Vx(Sx = O --+ (VX°)X).
The standard model of HA2* (and of HA2) has IN and the powersets of INk
as domains of individuals and k-place relations respectively; 0, S, = get their
usual interpretation.
11.5.3. DEFINITION. xn E Ext := ViElNWElN(i = il A X'> Xil), where
E IN stands for xi E , xn E IN etc.
So "X E Ext" means that X behaves as an "extensional predicate" w.r.t.
IN, or, perhaps more appropriately, satisfies replacement w.r.t. elements of
IN. Note that IN E Ext.
11.5.4. DEFINITION. (Interpretation of HA2 in HA2*) Formulas of HA2
can now be interpreted in HA2*, by relativization of all individual variables
to IN, and all relation variables to Ext; so Vx, 2x go to VxElN, 3xElN, and
vxn,3xn to VXnEExt, 3XnEExt; with respect to the other logical operators
the embedding is a homomorphism.
From now on we take as a matter of convenience the language based on
-4, A, V, V2, 3; from the results in 11.1.4 we know that we have strong normal-
ization w.r.t. detour conversions for this language.
360 Chapter 11. Second-order logic
11.5.4A. 4 Verify that the embedding of the definition (call it 0) indeed satisfies
for all closed A of HA2: HA2 I- A HA2* I- 0(A).
11.5.5, DEFINITION. (Normal deduction D[n] of SnO E IN in HA2*) For
7,[0] we take
0E X1
Vy(y EX -+ Sy E X) 0 E X
and for D[n] if n> 0:
[0 E X]2
Vy(y E X -* Sy E X)1 Dn-1
Sn-10 E X -> SnO E X vr' Sn-10 E X
ESnO E X
Vy(y E X Sy E X) -4 SnO E X
0 E X -->Vy(y E X ->Sy E X) ->SnO E X
V2ISnO E IN
where Dn_1 is either 0 E X (for n = 1) or is of the form
[0 E X]
Vy(y E X Sy E X) Dn-2
Sn-20 E X Sn-10 E X VE Sn-20 E X
Sn-10 E X
It is easy to see that D[n] translates under the collapsing map into fl of A2.
11.5.6. LEMMA. D[n] is the unique normal deduction of SnO E IN.
PROOF. Let 7, be a normal deduction of SnO E IN. D cannot end with an
E-rule. For assume D to end with an E-rule; if we follow a main branch
from the conclusion upwards, the branch must start in a purely first-order
axiom, such as Vx(x = x), or in Vx(Sx = O -> (VX°)X). From a purely first-
order axiom we can never arrive at the conclusion alone, passing through
eliminations only. Elimination starting from Vx-iSx = 0 must begin with
Vx(Sx = (V X)X) DI
St = 0 (VX)X St = 0
(VX)X
0 E X > (Vy(y E X > Sy E X) -4 0 E X)
V210 E IN
1E1
11.5. Provably recursive functions of HA2 361
However, no open assumptions of D' can be discharged lower down; so D'
must deduce St = 0 from the axioms. But in the standard model St = 0 is
false (here we rely on the consistency of the system).
Therefore the deduction ends with an introduction, with subdeduction
of the premise O E X (Vy(y E X --+ Sy E X) SnO E X). Again, the
final step of 1,1 must be an introduction, and the premise of the conclusion
of D1 is Vy(y E X Sy E X) + SnO E X, which is the conclusion of
subdeduction D2 from assumptions O E X. D2 cannot end with an E-rule;
for if it did, a main branch of D2 would have to terminate either in O E X or
in an axiom. The axioms are excluded as possibilities for the same reasons
as before (assign IN to the variable X in the "standard model" part of the
argument). To 0 E X no elimination rule is applicable. So the final step of
D2 is an I-rule, and the immediate subdeduction D3 of D2 derives SnO E X
from assumptions 0 E X and Vy(y E X Sy E X). The last rule of D3 must
be an elimination rule, and the main branch must terminate in 0 E X or in
Vy(y E X Sy E X). If it terminates in 0 E X and n = 0, we are done.
Terminating in 0 E X while n 0 is impossible. So assume the main branch
to start in Vy(y E X Sy E X):
Vy(y E X Sy E X) Ty,
tEX+StEX t E X
St E X
but then (St E X) (Sn0 E X) etc.
11.5.7. DEFINITION. We define a collapsing map I from formulas and
deductions of HA2* to formulas and deductions of A212. Let M be a fixed
inhabited type of A20, e.g. M V X(X --> X), containing T AXAx.xx . To
the relation variables Xn we let bijectively correspond propositional (type-)
variables X*. For formulas we take
Observe that
11A[x Itll [[t E iN1 N.
The definition is extended to deductions as follows. We have not before in-
troduced a complete term calculus for HA2*, but the notations below will be
[[t =
1[Xt1
[[AB
1[Vzil]]
113 zit]]
XnAl
4,1
:= M,
:= X*,
:= 1[A] --+ 1113]],
:= 11/11,
:= 11,41,
:= VX*[[.,41.
362 Chapter 11. Second-order logic
self-explanatory. The definition proceeds by induction on construction of de-
duction terms, or what is the same, by induction on the length of deductions.
First the basis case, assumptions and axioms:
Ai 1> xi: [[A,17
Vx(x = T: M,
Vxyz(x = y (x = z y = z)) 1-4 Axmym .Tm:M > M M,
Vxy(Sx = Sy x = y) 1-4 Aym.Tm: M +
Vxy(x = y --+ Sx = Sy) 1-4 Aym.Tm: M M,
Vx(Sx = VX.X) Azm.S2: M (V X)X.
For the rules we put
AxA.0: A + B 1>
tA-+B sA: B 1>
Axi.t:VxA F>
tVyr A[x/y] 8/ A[x s]
(to tiA[x/t0]): 3xA
1-4
Ey3,z (t3xA. s (y zA[Xi] )): C
Then
11.5.7A. * Verify this.
(B-+X) zxy
p(tA78B): A A B 1-4 p(tFAI JsPB11): Pi A Bl,
etc.
PROPOSITION. The collapsing map preserves reductions: if D reduces to D',
then the collapse of D reduces to the collapse of D'.
Axi[A] .[[t][1131:[[A 131,
I[Vx1 All (note 11V xl [[A[x /y11),
(note [[All liVyA[x /O),
[[t11: [[A] (note EA[x/toll =1A1),
(y, zA[2/Y1)][z/ ]: .
For the next two cases observe that [[A[X0d.C]1 11./41[X*/K1].
AXn.tA: VXnA AX*.M : VX*11,417
tVX'A W.B): A[Xn I Ai.B] litivx*IA1[[B]:[[,41[X* /[[B1].
For the A-rules we need on the right hand side defined operators:
pA,B := AxAyBAXAzA'
AttAAB. ,B ttAABUA(AXAyB.X), := A .uB(AxAyB .y).
11.5. Provably recursive functions of HA2 363
11.5.8. THEOREM. The provably total recursive functions of HA2 are rep-
resentable in A2.
PROOF. Let 7, be a deduction in HA2*, with conclusion,
(1) I VxEIN 3yEINA(x, y),
or expanded
Vx(x E IN 3y(y E lN A A(x, y)).
The collapsing map applied to 1, produces a term t such that
t: [[Vx(x E IN 3y(y E IN A A(x, y))A N (N A 1[AD.
Then t* := AxN .po(tx) encodes the recursive function f implicit in the proof
of (1). This is seen as follows. If we specialize the deduction 7, to x = SnO
we obtain a deduction 1, which must end with applications of VE, +E along
the main branch:
Vx(x E IN --+ 3y(y E lN A A(x, y))) D[n]
S'0 E IN 3y(y E ]1\1 A A(SnO, y)) SnO E IN
3y(y E IN A A(SnO, y))
which afteenormalization must end with an introduction:
Sm0 E IN A A(SmO, SnO)
3y(y E lN A A(SnO,y))
Applying AE to Dn" we find a deduction 7,+ of Sm0 E IN; the collapsing map
produces a term which must be equal to eft. By lemma 11.5.6, the deduction
1,+ normalizes to D[m], so t* fi normalizes to fit. Combining this with the
embedding of AM into A2, we have the desired result. Since A(SnO, SmO) is
provable in HA2, it is true in the standard model, so m = f (n).
REMARK. As observed in 11.6.4, the A2-representable functions are in fact
exactly the functions provably total recursive in HA2.
11.5.9. The provably total recursive functions of PA2
The provably total recursive functions of classical second-order arithmetic
PA2 are in fact also provably total in HA2; PA2 is just HA2 with classical
logic. This fact may be proved directly, but can also be obtained from the
characterization of the provably recursive functions of HA2. In outline, the
proof is as follows.
364 Chapter 11. Second-order logic
In HA2 and PA2 we can conservatively extend the language and the
system by adding symbols for all the primitive recursive functions. Then
a provably total recursive function is given by a code number n such that
VxAy(xT(fi, x, y) = 0), where xT is the characteristic function of Kleene's
T-predicate.
The Gödel-Gentzen negative translation g (cf. 2.3) embeds PA2 into
HA2. Hence, if PA2 ]y(xT(fi, x, y) = 0), then HA2 x, y) =
0) (using -,Vx,A 1-2xA).
By a method due to Friedman [1978] and Dragalin [1979] we can show
that HA2 is closed under "Markov's rule" in the form: "if H ,ax(t(x,g') =
0) then H 3x(t(x,g)= 0)" (an exposition of this result is found in Troelstra
and van Dalen [1988, section 5.1]).
As to (a), we use the result on the conservativity of the addition for sym-
bols for definable functions, applied to functions defined by primitive recur-
sion (4.4.12). Therefore we need to show that in HA2 we can define graph
predicates H(±, z) for each primitive recursive function h. The graph PRD
for the predecessor function prd is given by
PRD(x, := (x = 0 A z = 0) V 3y(x = Sy A z = y)
The crucial step in the construction of these H goes as follows. If h is ob-
tained from f and the number m (for notational simplicity we do not consider
additional numerical parameters):
h(0) = m, h(Sz) f (z , h(z))
and we have already constructed F as the graph of f, we obtain the graph H
as
H(z, u) := VX2(A(z, X) -4 X (z , u)),
where
A(z, X2) := V z' < zaz' = O > (X z'v ++ y = m)] A
[z' 0 -4 (X zit)) 3v'z"(PRD(i, z") A X (z", y') A F (z" , y', v))]).
Then one proves by induction on z
X2 A(z, X), and VzI < zA!u(A(z, X) --> X (z', u)).
11.6 Notes
For a general introduction to higher-order logic, see Leivant [1994].
11.6. Notes 365
11.6.1. Takeuti's conjecture. Closure under Cut for second-order classical
logic, known as "Takeuti's Conjecture" , was first proved by Tait [1966] by a
semantical argument, using classical metamathematical reasoning; this was
extended to higher-order logic by Takahashi [1967].
Prawitz [1967] also gave a proof, extended to higher-order logic in Prawitz
[1968], along the same lines as Takahashi's proof. Takahashi [1970] deals with
type theory with extensionality.
Prawitz [1970] uses Beth models to obtain closure under Cut for a cutfree
system of intuitionistic second-order logic (cf. 4.9.1).
11.6.2. Normalization and strong normalization for A2. Girard [1971] was
the first to prove a normalization theorem for a system of terms correspond-
ing to intuitionistic second-order logic in A, >, V, V2, 32, based on his idea of
"reducibility candidates" as a kind of variable computability predicate, as a
method for extending the method of computability predicates of Tait [1967]
to higher-order systems. Martin-Löf [1971b] proves normalization (not strong
normalization) for HA2 with *, V, V2 in the form of deduction trees (not
terms), using Girard's idea. Prawitz [1971], also inspired by Girard [1971],
contains a proof of strong normalization, for intuitionistic first- and second-
order logic, covering also permutation conversions for V, A. (Prawitz [1981]
is a supplement, in particular for classical second-order logic.) Girard [1972]
also proves strong normalization. Girard [1971] is also the first place where
A2 is defined (called system "F" by Girard). Not much later, A2 was redis-
covered by Reynolds [1974]. (Strong) normalization for A2 and the associated
logical systems has been re-proved many times, always in essence by the same
method (for example, Osswald [1973], Tait [1975]). A smooth version is given
in the recent Girard et al. [1988]; but the proof presented here is based on
Matthes [1998], where the result has been generalized considerably.
The method of computability predicates by Tait, with its extension by
Girard, has a semantical flavour; see, for example, Hyland and Ong [1993],
Altenkirch [1993] and Gallier [1995].
As to the significance of cut elimination and normalization for second- and
higher-order logic, see Kreisel and Takeuti [1974], Girard [1976], Päppinghaus
[1983].
11.6.3. A2 as a type theory has been further strengthened, for example
in the "calculus of constructions" of Coquand and Huet [1988], but then the
formulas-as-types parallel cannot any longer be viewed as an isomorphism.
See for this aspect Geuvers [1993,1994]. For some information on extensions
of A2 see Barendregt [1992]. An elegant normalization proof for the calculus
of constructions is found in Geuvers and Nederhof [1991].
The characterization of the provable recursive functions of HA2 as the
functions representable in A2 is due to Girard [1971,1972]; the proof given
366 Chapter II. Second-order logic
here follows Girard et al. [1988].
Leivant [1990] gave a proof of this characterization for classical second-order
arithmetic, by another, more semantically inspired method.
11.6.4. A converse theorem. All A2-representable functions are in fact prov-
ably recursive in HA2. The idea for the proof is based on (1) arithmetizing
the syntax of A2, and (2) observing that the proof of strong normalization
for any given closed term t of A2 can in fact be carried out in HA2 itself, and
in particular that we can prove
HA2 Vn3!mRed(rtitI, rfiC),
where Es 7 is the code of the A2-term s, and Red(t, t') expresses that the
term with code t reduces to the term with code t'. The proof is carried
out in Girard [1972]. For a proof with similar details, see, for example, the
formalization of normalization of Ni2 in Troelstra [1973, section 4.4].
Solutions to selected exercises
2.1.8B.
Aw
-,(A B)u A > 1,
,
_L u
B)
B)v
2.1.8E.
Aw Btu'
-,(A V B)' AV B -,(A V BY' AVBI,
w
A -,B)u
I
v
AV B
AVBv
The other half of the equivalence is easier and holds even intuitionistically.
(A B) Aw
Av A
v
((A > B) A) > A w
367
Bw
B)u A B
368 Solutions to exercises
2.1.8F. Write Px,y for ((X -- Y) > X) X.
A C v
P A,B
C
PC,A (C>A)>Cw
C
(A > C) > C v
(( B) C) (A C) C u.A>
2.1.8G.
A Bu Aw A CI' Aw
B C
B A C
(A -- (B A C)) Awi ABAC.--
A
P A,B (A B) A v
A
PA,C (A > C) A v
A
P wA,BAC
2.1.8H. Proof by induction on the complexity of contexts. We do two cases.
Let G[*] F[*] C.
Ill Vi(A ). B)v
F[A] >. F[B] F[A]w
F[B] C u FEB]
C 9,
F[A] > C -
(F[B] >. C) > F[A] > C u
V g(A > B) > (FEB] > C) >. F[A] >. C v
Let F[*] F--- VyF'[*], then
V y g(A B)u
Ill Vg(A -4 B) VyP[A] v
F' [A] ). FIB] F' [A]
F'[B]
VyF' [B]
VyF'[A] VP[13] v
Vyg(A > B) >. V y F' [A] V F'[B] u
2.2.2A. The prooftree is exhibited with at each node
term: type I Fl/a(term) I FVi(term)
Types of subterms have been omitted.
(A B) > C u
C > Aw C
A
(A B) > Awn
A
A B wn
Solutions to exercises 369
v: Vx(Rx 1=6) Ivi
vx: Rx 14 I v I x, w: Rx w I x
Avu.E,x(u, vxw):Vx(Rx ley) (3xRx .14) 01
2.3.8A. For the equivalence I I- Ag A" let A* be obtained from A by inserting
after each V, so Aq Then prove by induction on the depth of A that
,(A* Ag).
2.4.2D. Let us call the alternative system H', and let us introduce abbreviations
for the axioms mentioned: kA'B (cf. 1.3.6), WA'B (contraction), eA'B'C (permuta-
tion) and tA'B'C (neax-transitivity).
We may prove the equivalence to 41i either directly, by giving a derivation of
the axiom schema s in H', or by paralleling the proof that Ali is equivalent to
g\Ti. For the latter strategy, we have to derive A A, and to show closure under
The first is easy: take (A A A) >..A A as instance of the contraction
axiom, and detach the premise as an instance of k.
To show closure under suppose we have derived in H'
Do y1
A B A
where Do, Di use assumptions from r, C. By the induction hypothesis there are
TY, DI deriving C (A B) and C A respectively from r. We combine these
in a new proof
eC,A,B C B
tA,C-+B,C A C B
(C Y A) Y (C C B) C Y A
C C B
C B
3.1.3C.
A A A,1 B B
A, B B j_ j_
A B jj BAB B,1_ _L
A B 1_ -,(A 13),B 1_ _L
B),-(A _L 13)
Y B)
W'C B
u:3xRx I ul vxw: R1 y I 21, wI x, Y
E(u, vxw): R'y I u, v iv
Au.E!,x(u, vxw): 3xRx > ley I y Y u
370 Solutions to exercises
3.1.3D.
A=B
A, A B
A, A > B
A,3x(A B)
A > 3 x B
B B
A, B B
B A B
B 3 x(A B)
3xB 3 x(A B)
3x(A B)
Ax, Az Az, VyAy
Ax Az, AzAlyAy
Ax Az ,3x(Ax AlyAy)
Ax VyAy, 3 x(Ax >Vy Ay)
AxN y Ay , 3 x(Ax Aty Ay)
3x(Ax--WyAy), 3 x(Ax Afy Ay)
3x(Ax >Vy Ay)
3.2.1A. For the proof of equivalence we have to appeal to closure under Cut for
Gli. The easy direction is
If G1i I- F V A then m-Gli I- I-' - A.
The proof is perfectly straightforward, by an induction on the depth of deductions
in Gli, provided we prove simultaneously
If Gli E- I' then m-Gli I- I' .
In the induction step, it helps to distinguish cases according to whether A contains
zero, one or more formulas. The difficult direction is to show
(*) If m-Gli I- I' A then G1i F- I' V A.
Using closure of Gli under Cut we first establish that
Gli I- (A V B) VCAV (B V C),
Gli I- AV (B V C) (A V B) v C,
Glil-AVBBV A.
This permits us to disregard bracketing and order of the formulas in forming I'
V A. Now the proof proceeds by induction on the depth of deductions in m-Gli.
We treat some crucial cases in the proof of (*).
The last step in the proof in m-Gli was RA:
I' A,A I' A,B
I' A,AAB
Let D be V A. By induction hypothesis we have deductions of
Glil-I' DVA and GliF-PDVB\
Hence we have
Gli I- I' (D V A) A (D v B)
We now prove Gli I- (D VA) A (D V B) D V (A AB), and apply Cut.
Suppose now the last step in the proof in m-G1i was L:
A, B A, B
A B,BA
A>B,BA
Aq 3 , (A B) V (B A)
(AB) V (B -- A), (A q3) V (BA)
(A q3) V (B A)
Solutions to exercises 371
r A,A I',B A
By Ili we have in Gli a proof D' of F -AVD and a proof?'" of I', B D.
We get the required conclusion from the following deduction:
AA BB D"
D D
D' r,D,A_3-D LW F, A, A B D Cut
LVF.DVA F,DVA,A>BD
Cut
LC
3.3.3B. The equivalence between classical G-systems and classical N-systems for
subsets of the operators not containing I.
(a) Applications of _Lc in Nc as on the left may be replaced by applications of
Peirce's rule as on the right:
Conversely, applications of P in Nc' as on the left may be replaced by applications
of _Lc as on the right:
[A B]U
Apu
A '
,Av Au
_L
A >B Bu
A
The equivalence between any two 1-equivalents is easily seen to hold by the
following deduction steps:
A B, A
A, B, A 1', A A, A
I', A B B, A A B, A
Cut 1', A B B, A
By repeated application of these deduction steps, we see that from F, A B B
follows F B, A and vice versa (A > A is short for D1> A where
A EE Di, Dri).
We give a proof by induction on the depth of deductions in G2c. A is said
to be the goal-formula of the 1-equivalent F, A A A of the sequent A, A.
Let us consider a crucial case. Suppose the G2c-deduction ends with
r, A B, A
372 Solutions to exercises
By induction hypothesis we have a deduction D* in Nc' deriving B from AJ1.,
A, r, A B. Let A _== , Dr,. Then
-r (A B) Biu
A > B Av
(1 < i < n) [Di B]u
B
A B -
which shows that in Nc F, A > (A > B) A B. For our goal-formula we
have chosen the principal formula.
Another case is when the deduction in G2c ends with
r, A A B, A
By IH we have natural deductions of A from A > A and of B from A > B. We
construct a new deduction
Di > A AB Diu Di 21AB
A A B A A B
A u
(1 < i < n) [Di > A] - [Di > /3] (1 < i < n)
D1 D2
A
A A B
Here again we have used the principal formula as goal-formula. But in this case
the alternative, choosing a formula of the context as goal-formula, works at least
as well, if not better. Let C be a formula from the context.
Av Bw
AABC. A A B
[A > C.] v
Vi
[B C] W
D2
If on the other hand the context is empty, the case becomes completely straight-
forwaxd.
If the final rule is an RV-
A V B, A
- it is definitely more advantageous to work with a 1-equivalent where A V B is not
the goal-formula. If A is empty, the case is trivial. If A C, A', we construct a
deduction as follows:
Solutions to exercises 373
AV
AVBC A V B
[A v
Here D is a proof given by the induction hypothesis. The treatment of the case
where the final rule is RV is similar to the case of RA; and the case for R3 resembles
the case for RV. The treatment of the cases where the deduction ends with a left
rule is easy, since then the goal-formula is not affected.
3.3.4B. We show that in G2i* + Cut, that is G2i + Cut with sequents with
inhabited succedent, we can define N such that IN (D)I < kIDI, where k can be
taken to be 2 for the full system, and 1 for the system without I.
Axioms in G2i* + Cut are either of the form r, A A or of the form r, J A.
In the first case, the axiom is translated as a prooftree with a single node A, and
IN(D)1 = O < 21DI = 20 = 1. In the second case, the axiom is translated as
Hence IN(D)1 = 1 < 2.211 = 21 = 2. Now we consider the induction step. We
check three typical cases. Let di = IDil, d = IVl, V = N(Di), d = 1D1, =
for i 1, 2.
Case 1. D ends with RA, so D is as on the left, and is translated as on the right:
Vi D2
A r B A B
A A B
Then d' = max(di, 4)+1 < max(k2d1, k2d2 ) +1 = k2max(cl1,d2) +1 < k2max(di,d2)+1
= k2d .
Case 2. D ends with D and D' have respectively the forms
7,1
D2 A B A
A C [B]
Now
< + d2 +1 < k2d1 (k2d2 1) + 1
(using cll. < k2d1, d2 < k2d2 1), hence
ax< k(2d1 2d2) < k2.2m(d1,d2) == k2d .
Case 3. D ends with Cut; then D and D' have the forms
D2
[A]
ri,r
374 Solutions to exercises
and
+ d2 <k(2'' 2d2) k2.2max(d1, d2) = k2d.
3.5.7A. Let B ((PQ)Q)P, A BQ. We first show that A,QP Q is actually
provable:
A,P,(P(2)(2,(P(2)(2 P
A,P,(PQ)Q B P,(PQ)Q,Q Q
A, P,(PQ)Q Q (PQ)Q,PP
A,QP,(PQ)Q P
A,QP B QP,Q
A,QP Q
Now suppose we have a proof of A,QP Q with the restricted version of the rule
Then we can show that all possibilities for constructing a proof bottom-up
fail.
If A was introduced by A,QP Q reduces to QP B and QP,Q Q.
QP B reduces to QP,(PQ)Q P, which, if (PQ)P was introduced by
reduces to
(aa) QP PQ and QP,Q P - breakdown or, if QP was introduced by L>,
to
(ab) P,(PQ)Q P and (PQ)Q Q, the latter in turn reduces to Q Q and
PQ - breakdown.
If QP was introduced by A,QP Q reduces to A,P Q and A Q,
hence to A Q; this reduces to Q Q and B, the latter sequent reduces to
(PQ)Q P which is underivable.
3.5.11A. Let us assume that D proves F- r,vxA A; since r,L consist of
quantifier-free formulas, r, does not contain VxA. D contains instances ai of
VxA, A[x/ti],
VxA,
Let to, ... ,tn_1 be a complete list of the terms involved in these applications. (This
sequence is possibly empty!) Replace in the deduction D the occurrences of VxA by
A[x/to],... ,A[xltn_i]. The result is a correct proof in G3[mic], except that the
ai are transformed into instances of contraction. (Why is the proof correct?) By
closure under contraction of G3[mic], we can successively remove these instances
of contraction. An alternative proof simply uses induction on the depth of D.
The extra result for G3c may be proved similarly, or by reducing it to the pre-
ceding result using the definition of 3xA as `9fx-,A, and the possibility of shifting
formulas from left to right and vice versa in G3c.
4.2.7A Assume G3i Vx(P V Rx) P V VxRx. By inversion, this is equivalent
to having a proof D' of G3i Vx(P V Rx) P V VxRx. In order to show that
this is unprovable, we establish by induction something more general, namely that
Solutions to exercises 375
there is no deduction D" for Vx(P V Rx), Rto, , Rtn_i P V VxRx. This
is proved by induction on the depth of D". Let us abbreviate the antecedent of
the conclusion of V" as Ari. If the last rule applied in 1," is RV, it would mean
that An P or An VxRx ought to be provable; but neither of these is even
classically valid. If the last rule applied in D" is LV, it means that we have a proof
D" of depth less thanID"i showing An, PVRt7, PVVxRx, which by the inversion
lemma means that there is a proof of no greater depth of A,P,Rt7, P V VxRx.
This is impossible by the induction hypothesis.
4.2.7B The only somewhat awkward case is the test for the sequent BQ,QP Q
with B ((PQ)Q)P. (We have dropped in the notation, since the sequent is
purely implicational.) We put A BQ. The application of the algorithm leads
in principle to many branches in the search tree, which all yield failure because of
repetition of sequents. However, after some experimenting with branches, we may
note the following.
Suppose we concentrate in the search tree on the left premises of applications
of and forget about the right premises. Moreover, we always apply in reverse
whenever possible. Then
A, r C yields A, r, (PQ)Q P,
QP,F C yields QP,r Q,
(PQ)Q,r C yields (PQ)Q,r,P Q.
Hence, after repeatedly treating the initial sequent by L>, always followed when
applicable by R>., we always find a sequent r A with A equal to P or Q, and
r as a set a subset of A,(PQ)Q,QP, P.
Modulo contraction, applying (followed by R* when applicable) always
again yields one of these sequents, so all branches produce repetitions. (Actually,
the reader may note that the sequent considered is not even classically provable,
by finding a suitable falsifying valuation.)
4.2.7D. Let Gli[mic]° be the system obtained from Gli[mic] by replacing by
its context-free version (as in Gentzen's original system). Suppose a deduction D
in Gli[micr establisheshn B, A B,r A; then we readily see by induction on
n that there is also a deduction TY establishing 1-n B, A, and D' is restricted
if D is restricted. This suffices to prove the property by induction on the depth of
proofs.
4.2.7F. Let D be a deduction in G3i with IV <n of r C. D cannot be an
axiom. We apply induction on the depth of D. If the final rule in D was a right
rule, the premises are of the form I' C' and the induction hypothesis applies. If
the last rule applied in 1, is an application of (there is no other possibility),
the final step is of the form
C
where r V, A, Bi, and the result follows.
376 Solutions to exercises
4.3.6A. We discuss the last formula of the exercise, abbreviated by not writing
many implication arrows to:
(PR)R > (QR)R 4 (PQ)R R.
Let us write A for (PR)R (Q R)R. We shall always tacitly reduce any problem by
use of the invertible rule R>. As a shortcut we also observe that (for all B, C, D, r)
DB , B, l' C is derivable iff B, r c is derivable. Our initial problem is replaced
by (R-0:
A, (PQ)R 4 R.
First treat in (b) (PQ)R. This reduces with L--> to
A, QR, P 4 PQ and R > R (Axiom)
We then apply L to A and obtain from the first problem:
R (QR)R, PR,QR, P 4 Q and (QR)R,QR 4 R.
We continue with the first and apply LO>:
R(QR)R, P, R,QR 4 Q.
Again with LC1
R,(QR)R, P,QR Q.
This is equivalent to P, R 4 Q which is obviously underivable.
Now treat in (b) first (PQ)R by L:
R).(QR)R,QR, PR, P 4 Q and R>P(QR)R, R,PR R (Axiom).
Apply 1,0 to the first of these formulas, then
R. (QR)R,QR, P, R 4. Q.
Again with 1,0
(QR)R,QR, P, R 4. Q.
which is equivalent to P, R =. which is underivable.
Hence the formula to be tested is underivable.
5.1.13C. The proofs of properties (i) and (ii) are more or less routine and left to
the reader; we concentrate on the proof of (iii). Let us write F-2, for Fi. Assume
we have
r, u: (A*B)>C1 4. t: D.
Solutions to exercises 377
Let the final step in the deduction be an application of with (Aq3)W as
principal formula. Then there are premises:
hn r, u: (Ag3)W so: AB,
r, u: (A>.13)C,w:C to: D.
By the inversion property (ii), the first line yields
r, u: (A ,F3)>C , yo: A si: B,
where so == Ay(,I.si. By the Ill applied to this result, we find
r, z: BC, y: A, yo: A s2: B,
where
s 2 =0 si[ul AxA-4B.z(xy)].
From now on we write a for the substitution [ulAxA'B.z(xy)]. Apply the contrac-
tion property (i):
(*) r, z: B)C, y: A 82 NO /Y1 B.
Put
83 82 [Yo h], 84 81 [WY]
and note that 82[Yo/Y] =0 si[YolY], i.e., 83 840. Also, applying the 1H to the
other premise,
(**) F-n r, z: 1, y: A, w:C t1: D,
where ti too'. Combining (*) and (**) we find
r, z: B>C, y: A ti[w 1 zs3]: D.
Since, with an appeal to the substitution lemma 1.2.4,
ti[wl zso] =,3 tocr[wl zso] Er- to[w/z84]cr,
we can take in this case e to[whs4]. The other cases of the induction step are
easier.
6.8.7C. The proof of Cl and C2 of lemma 6.8.3 for the extra case is easy; only C3
asks some extra attention. Assume
(Vti -<1t)CompAAB(e).
We have to show CompAAB(t), that is to say CompA(pot), CompB(pit); for this
it suffices to show
(Vt"-<1 pot)CompA (t"), (Vi" ipit)CompB (e).
378 Solutions to exercises
Case 1. The term t is not of the form ptoti. Then if t" -<i pot, t" pjt', t' -<i t,
and by hypothesis C0mpAAB(t'), hence CompA(pot'), i.e., CompA(t"); similarly
CompB(t") for all t" -<i p1t.
Case 2. If t is of the form pt0t1, and t" -.< pet, t" is either of the form po(ptti)
with t'0 -< to, or of the form po(ptot'1) with t' -< t1, or is equal to to. In the first
subcase, since by assumption CompAAB(ptt1), also CompA(po(ptti)). In the
second subcase, CompAAB(ptot), hence CompA(po(ptotÇ)). In the third subcase,
we conclude that CompA (to), since as before we have COmPA (PO (ptti)) for all
t'0 -< to, and since C2 holds for A, it also follows that CompA(t). etc. In the same
way we establish in this case (Vt"-<lplt)CompB(t").
But note that a better result may be obtained by strengthening the property
defining COmPAAB, see 8.3.1.
Bibliography
ABRAMSKY, D. M. GABBAY, AND T. S. E. MAIBAUM
[1992] eds., Handbook of Logic in Computer Science, Vol. 1. Background: Math-
ematical Structures, Clarendon Press, Oxford. Editor of the volume
D. M. Gabbay.
P. H. G. ACZEL
[19681 Saturated intuitionistic theories, in Contributions to Mathematical Logic,
H. A. Schmidt, K. Schiitte, and H.-J. Thiele, eds., Studies in Logic and
the Foundations of Mathematics, North-Holland Publ. Co., Amsterdam,
1-11.
ALTENKIRCH
[1993] Constructions, Inductive Types and Strong Normalization, PhD thesis,
The University of Edinburgh, Department of Computer Science, Edin-
burgh.
Y. ANDOU
[1995] A normalization-procedure for the first-order natural deduction with full
logical symbols, Tsukuba Journal of Mathematics, 19, 153-162.
J.-M. ANDREOLI
[1992] Logic programming with focusing proofs in linear logic, Journal of Logic
and Computation, 2, 297-347.
J.-M. ANDREOLI AND R. PARESCHI
[1991] Linear objects: logical processes with built-in inheritance, New Genera-
tign Computing, 9, 445-473.
K. R. APT
[1990] Logic programming, in Handbook of Theoretical Computer Science, Vol-
ume B. Formal Methods and Semantics, J. v. Leeuwen, ed., Elsevier
Publ. Co., 493-574.
A. AVRON
[1991] Hypersequents, logical consequence and intermediate logic for concur-
rency, Annals of Mathematics and Artificial Intelligence, 4, 225-248.
[1996] The method of hypersequents in the proof theory of propositional non-
classical logics, in Logic: from Foundations to Applications. European
Logic Colloquium, Clarendon Press, Oxford, 1-32.
[1998] Two types of multiple-conclusion systems, Logic Journal of the IGPL
Interest Group in Pure and Applied Logics, 6, 695-717.
379
380 Bibliography
F. BAADER AND J. SIEKMANN
[1994] Unification theory, in Gabbay et al. [1994], 41-125.
A. A. BABAEV AND S. V. SOLOVJOV
[1979] A coherence theorem for canonical maps in CCC's (Russian, with En-
glish summary), Zapiski Nauchnykh Seminarov Lenin gradskogo Otde-
leniya Ordena Lenina Matematicheskogo Instituta imeni V. A. Steklova
Akademii Nauk SSSR (LOMI), 88, 3-29. Translation in Journal of So-
viet Mathematics, 20 (1982), 2263-2279.
[1990] On conditions of full coherence in biclosed categories: a new applica-
tion of proof theory, in COLOG-88, P. Martin-Löf and G. E. Mints,
eds., Lecture Notes in Computer Science 417, Springer-Verlag, Berlin,
Heidelberg, New York, 3-8.
H. BACHMANN
[1955] Transfinite Zahlen, Springer-Verlag, Berlin, Heidelberg, New York. 2nd,
revised edition 1967.
H. P. BARENDREGT
[1984] The Lambda Calculus, North-Holland Publ. Co., Amsterdam. 2nd edi-
tion.
[1992] Lambda calculi with types, in Handbook of Logic in Computer Science,
Vol. 2, S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, eds., Oxford
University Press, Oxford, 118-309.
J. BEESON
[1985] Foundations of Constructive Mathematics, Springer-Verlag, Berlin, Hei-
delberg, New York.
D. BELNAP
[1982] Display logic, Journal of Philosophical Logic, 11, 375-417.
[1990] Linear logic displayed, The Notre Dame Journal of Formal Logic, 31,
14-25.
N. BENTON, G. BIERMAN, J. M. E. HYLAND, AND V. C. V. DE PAIVA
[1992] Term assignment for intuitionistic linear logic, Tech. Rep. 262, Computer
Laboratory, University of Cambridge.
P. BERNAYS
[1970] On the original Gentzen consistency proof for number theory, in Myhill
et al. [1970], 409-417.
E. W. BETH
[1953] On Padoa's method in the theory of definition, Indagationes Mathemat-
icae, 15, 330-339.
[1955] Semantic entailment and formal derivability, Mededelingen der Konink-
lijke Nederlandse Akademie van Wetenschappen (Amsterdam), Afdeling
Letterkunde. Nieuwe Reeks, 18, 309-342.
[1956] Semantic construction of intuitionistic logic, Mededelingen der Konink-
lijke Nederlandse Akademie van Wetenschappen (Amsterdam), Afdeling
Letterkunde. Nieuwe Reeks, 19, 357-388.
Bibliography 381
[1959] The Foundations of Mathematics, Studies in Logic and the Foundations
of Mathematics, North-Holland Publ. Co., Amsterdam. 2nd edition,
1965.
[1962a] Formal Methods, D. Reidel Publ. Co., Dordrecht, Netherlands.
[1962b] Umformung einer abgeschlossenen deduktiven oder semantischen Tafel
in eine natiirliche Ableitung auf Grund der derivativen bzw. klassischen
Implikationslogik, in Logik und Logikkalkiil, M. Käsbauer and F. von
Kutschera, eds., Verlag Karl Alber, Freiburg i. Br./Mi.inchen, Germany,
49-55.
M. N. BEZHANISHVILI
[1987] Notes on Wajsberg's proof of the separation theorem, in Initiatives in
Logic, J. Srzednicki, ed., Martinus Nijhoff, Dordrecht, Netherlands, etc.,
116-128.
W. BIBEL AND E. EDER
[1993] Methods and calculi for deduction, in Gabbay et al. 0994 68-182.
T. S. BLYTH
[1986] Categories, Longman, London.
B. R. BoRi616
[1985] On sequence-conclusion natural deduction systems, Journal of Philo-
sophical Logic, 14, 359-377.
BORISAVLJEVI6
[1999] A cut-elimination proof in intuitionistic predicate logic, Annals of Pure
and Applied Logic, 99, 105-136.
G. DE BRUIJN
[1972] Lambda-calculus notation with nameless dummies, a tool for automatic
formula manipulation, Indagationes Mathematicae, 34, 381-392.
W. BUCHHOLZ
[1991] Notation systems for infinitaxy derivations, Archive for Mathematical
Logic, 30, 277-296.
W. BUCHHOLZ, S. FEFERMAN, W. POHLERS, AND W. SIEG
[1981] Iterated Inductive Definitions and Subsystems of Analysis: Recent Proof-
Theoretical Studies, Lecture Notes in Mathematics 897, Springer-Verlag,
Berlin, Heidelberg, New York.
W. BUCHHOLZ AND S. S. WAINER
[1987] Provably computable functions and the fast growing hierarchy, in Logic
and Combinatorics. Proceedings of a Summer Research Conference held
August 4-10, 1985, S. G. Simpson, ed., Contemporary Mathematics 65,
American Mathematical Society, Providence, RI, 179-198.
R. A. BULL AND K. SEGERBERG
[1984] Basic modal logic, in Handbook of Philosophical logic II. Extensions of
Classical Logic, D. Gabbay and F. Guenthner, eds., Reidel, Dordrecht,
Netherlands, 1-88.
382 Bibliography
Buss AND G. E. MINTS
[1999] The complexity of the disjunction and existential properties in intuition-
istic logic, Annals of Pure and Applied Logic, 99, 93-104.
D. H. C.
[1994] From Logic to Logic Programming, MIT Press, Cambridge, MA.
C. CELLUCCI
[1992] Existential instantiation and normalization in sequent natural deduc-
tion, Annals of Pure and Applied Logic, 58, 111-148.
C.-L. CHANG AND R. C.-T. LEE
[1973] Symbolic Logic and Mechanical Theorem Proving, Academic Press, New
York.
A. CHURCH
[1956] Introduction to Mathematical Logic. Part I, Princeton University Press,
Princeton, NJ. 2nd edition.
COQUAND AND G. HUET
[1988] The calculus of constructions, Information and Computation, 76, 95
120.
W. CRAIG
[1957a] Linear reasoning. A new form of the HerbrandGentzen theorem, The
Journal of Symbolic Logic, 22, 250-268.
[1957b] Three uses of the HerbrandGentzen theorem in relating model theory
and proof theory, The Journal of Symbolic Logic, 22, 269-285.
P .-L . CURIEN
[1985] Typed categorical combinatory logic, in Automata, Languages and Pro-
gramming (ICALP 85), W. Brauer, ed., Lecture Notes in Computer
Science 194, Springer-Verlag, Berlin, Heidelberg, New York, 130-139.
[1986] Categorical Combinators, Sequential Algorithms and Functional Pro-
gramming, Pitman, London, and John Wiley and Sons, New York.
H. B. CURRY
[1934] Functionality in combinatory logic, Proceedings of the National Academy
of the U.S.A., 20, 584-590.
[1942] The combinatory foundations of mathematical logic, The Journal of
Symbolic Logic, 7, 49-64.
[1950] A Theory of Formal Deductibility, Notre Dame Mathematical Lectures
6, The University of Notre Dame Press, Notre Dame, IN.
[1952a] The elimination theorem when modality is present, The Journal of Sym-
bolic Logic, 17, 249-265.
[1952b] The permutability of rules in the classical inferential calculus, The Jour-
ntil of Symbolic Logic, 17, 245-248.
[1963] Foundations of Mathematical Logic, McGraw-Hill, New York. Also pub-
lished by Dover, New York 1977.
H. B. CURRY AND R. FEYS
[1958] Combinatory Logic I, Studies in Logic and the Foundations of Mathe-
matics, North-Holland Publ. Co., Amsterdam. 2nd edition 1968.
Bibliography 383
D. VAN DALEN
[1994] Logic and Structure, Springer-Verlag, Berlin, Heidelberg, New York. 3rd
edition.
D. VAN DALEN AND R. STATMAN
[1979] Equality in the presence of apartness, in Essays on Mathematical Logic.
Proceedings of the Fourth Scandinavian Logic Symposium and of the 1st
SovietFinnish Logic Conference, J. Hintikka, I. Niiniluoto, and E. Saari-
nen, eds., Reidel, Dordrecht, Netherlands, 95-116.
V. DANOS
[1990] La logique linéaire appliquée à l'étude de divers processus de normali-
sation (principalernent du ).-calcul), PhD thesis, Université Paris VII,
Juin.
V. DANOS, J.-B. JOINET, AND H. A. J. M. SCHELLINX
[1995] On the linear decoration of intuitionistic derivations, Archive for Math-
ematical Logic, 33, 387-412. Slightly revised and condensed version of a
technical report from 1993 with the same title.
[1997] A new deconstructive logic: classical logic, The Journal of Symbolic
Logic, 62, 755-807.
[1999] Computational isomorphisms in classical logic. To appear in Theoretical
Computer Science.
V. DANOS AND L. REGNIER
[1989] The structure of multiplicatives, Archive for Mathematical Logic, 28,
181-203.
DILLER
[1970] Zur Berechenbarkeit primitiv-rekursiver Funktionale endlicher Typen,
in Contributions to Mathematical Logic, H. A. Schmidt, K. Schiitte, and
H.-J. Thiele, eds., North-Holland Publ. Co., Amsterdam, 109-120.
DO§EN
[1987] A note on Gentzen's decision procedure for intuitionistic propositional
logic, Zeitschrift far Mathematische Logik und Grundlagen der Mathe-
matik, 33, 453-456.
[1993] A historical introduction to substructural logics, in Substructural Logics,
K. Difisen and P. Schroeder-Heister, eds., Clarendon Press, Oxford, 1-30.
A. G. DRAGALIN
[1979] Mathematical Intuitionism. Introduction to Proof Theory (Russian),
Nauka, Moscow. Translated as Volume 67 in the series Translations of
Mathematical Monographs, under the title Mathematical Intuitionism.
American Mathematical Society, Providence, RI, 1988.
M. A. E. DUMMETT
[1959] A propositional calculus with denumerable matrix, The Journal of Sym-
bolic Logic, 24, 97-106.
R. DYCKHOFF
[1992] Contraction-free sequent calculi for intuitionistic logic, The Journal of
Symbolic Logic, 57, 795-807.
384 Bibliography
[1996] Dragalin's proof of cut-admissibility for the intuitionistic sequent cal-
culi G3i and G3r, Tech. Rep. CS-96-9, Computer Science Division,
St Andrews University.
R. DYCKHOFF AND S. NEGRI
[1999] Admissibility of structural rules for contraction-free systems of intuition-
istic logic, The Journal of Symbolic Logic, 64, to appear.
DYCKHOFF AND L. PINTO
[1999] Permutability of proofs in intuitionistic sequent calculi, Theoretical
Computer Science, 212, 141-155.
N. EISINGER AND H. J. OHLBACH
[1993] Deduction systems based on resolution, in Gabbay et al. 0994 184-271.
FEFERMAN
[1968] Lectures on proof theory, in Proceedings of the Summer School in Logic,
M. H. Löb, ed., Lecture Notes in Mathematics 70, Springer-Verlag,
Berlin, Heidelberg, New York, 1-107.
W. FELSCHER
[1975] Kombinatorische Konstruktionen mit Beweisen und Schnittelimination,
in ISILC Proof Theory Syrnposin, Kiel 1974, J. Diller and G. H. Miiller,
eds., Springer-Verlag, Berlin, Heidelberg, New York, 119-151.
[1976] On interpolation when function symbols are present, Archiv für Mathe-
matische Logik und Grundlagenforschung, 17, 145-157.
J. E. FENSTAD
[1971] ed., Proceedings of the Second Scandinavian Logic Symposium, North-
Holland Publ. Co., Amsterdam.
M. D. FITTING
[1969] Intuitionistic Logic, Model Theory and Forcing, North-Holland Publ.
Co., Amsterdam.
[1983] Proof Methods for Modal and Intuitionistic Logics, Reidel, Dordrecht,
Netherlands.
[1988] First-order modal tableaux, Journal of Automated Reasoning, 4, 191
213.
[1993] Basic modal logic, in Gabbay et al. [1993], 365-448.
[1996] First-Order Logic and Automated Theorem Proving, Springer-Verlag,
Berlin, Heidelberg, New York. 2nd edition.
R. C. FLAGG AND H. M. FRIEDMAN
[1986] Epistemic and intuitionistic formal systems, Annals of Pure and Applied
Logic, 32, 53-60.
G. FREGE
[1879] Begriffschrift, eine der arithmetischen nachgebildete Formelsprache des
reinen Denkens, Louis Nebert, Halle. Reprinted in: Ignacio Angelelli
(ed.) Begriffschrift und andere Aufsiitze, Olms, Hildesheim 1964. Trans-
lation in van Heijenoort [1967], 5-82.
Bibliography 385
H. M. FRIEDMAN
[1978] Classically and intuitionistically provable functions, in Higher Set The-
ory, G. H. Willer and D. S. Scott, eds., Lecture Notes in Mathematics,
Springer-Verlag, Berlin, Heidelberg, New York, 21-27.
H. M. FRIEDMAN AND A. SCEDROV
[1986] Intuitionistically provable recursive well-orderings, Annals of Pure and
Applied Logic, 30, 165-171.
H. M. FRIEDMAN AND M. SHEARD
[1995] Elementary descent recursion and proof theory, Annals of Pure and Ap-
plied Logic, 71, 1-45.
T. FUJIWARA
[1978] A generalization of the LyndonKeisler theorem on homomorphism and
its application to interpolation theorem, Journal of the Mathematical
Society of Japan, 30, 278-302.
D. M. GABBAY, C. J. HOGGER, AND J. A. ROBINSON
[1993] eds., Handbook of Logic in Artificial Intelligence and Logic Programming.
Vol. 1, Logical Foundations, Clarendon Press, Oxford.
[1994] eds., Handbook of Logic in Artificial Intelligence and Logic Programming.
Vol. 2, Deduction Methodologies, Clarendon Press, Oxford.
J. GALLIER
[1991] What's so special about Kruskal's theorem and the ordinal -yo? A survey
of some results in proof theory, Annals of Pure and Applied Logic, 53,
199-260.
[1993] Constructive Logics. Part I: a tutorial on proof systems and typed A-
calculi, Theoretical Computer Science, 110, 249-339.
[1995] Proving properties of typed lambda-terms using realizability, covers and
sheaves, Theoretical Computer Science, 142, 299-368.
R. O. GANDY
[1980] An early proof of normalization by A. M. Turing, in Seldin and Hindley
[1980], 453-455.
G. GENTZEN
[1933a] Über das Verhältnis zwischen intuitionistischer und klassischer Logik.
Originally to appear in the Mathematische Annalen, reached the stage
of galley proofs but was withdrawn. It was finally published in Archiv
far Mathematische Logik und Grundlagenforschung, 16 (1974), 119-132.
Translation in Gentzen [1969], 53-67.
[1933b] Ober die Existenz unabhängiger Axiomensysteme zu unendlichen Satz-
systemen, Mathematische Annalen, 107, 329-350.
[1935] Untersuchungen iiber das logische Schliessen I, II, Mathematische Zeit-
schrift, 39, 176-210, 405-431. Translation in Gentzen [1969], 68-131.
[1936] Die Widerspruchsfreiheit der reinen Zahlentheorie, Mathematische An-
nalen, 112, 493-565. Translation in Gentzen [1969], 132-170.
[1938] Neue Fassung des Widerspruchsfreiheitsbeweises fiir die reine Zahlen-
theorie, Forschungen zur Logik und zur Grundlegung der exakten Wis-
senschaften. Neue Reihe, 4, 19-44. Translation in Gentzen [1969], 252
286.
386 Bibliography
[1943] Beweisbaxkeit und Unbeweisbarkeit von Anfangsfällen der transfiniten
Induktion in der reinen Zahlentheorie, Mathematische Annalen, 119,
140-161. Translation in Gentzen [1969], 287-311.
[1969] The Collected Papers of Gerhard Gentzen, North-Holland Publ. Co.,
Amsterdam. English translation of Gentzen's papers, edited and intro-
duced by M. E. Szabo.
H. GEUVERS
[1993] Logics and Type Systems, PhD thesis, Katholieke Universiteit Nijmegen.
[1994] Conservativity between logics and typed A-calculi, in Types for Proofs
and Programs, H. Barendregt and T. Nipkow, eds., Lecture Notes in
Computer Science 806, Springer-Verlag, Berlin, Heidelberg, New York,
79-107.
H. GEUVERS AND M. J. NEDERHOF
[1991] A modular proof of strong normalization for the calculus of construc-
tions, Journal of Functional Programming, 1, 155-189.
J .-Y . GIRARD
[1971] Une extension de l'interprétation de Gödel à l'analyse, et son application
l'élimination des coupures dans l'analyse et la théorie des types, in
Fenstad [1971], 63-92.
[1972] Interprétation fonctionelle et élimination des coupures de l'arithmétique
d'ordre supérieur, PhD thesis, Université Paris VII.
[1976] Three-valued logic and cut elimination: the actual meaning of Takeuti's
conjecture, Dissertationes Mathematicae, 136.
[1987a] Linear logic, Theoretical Computer Science, 50, 1-102.
[198713] Proof Theory and Logical Complexity, Bibliopolis, Napoli.
[1991] Quantifiers in linear logic II, in Nuovi problemi della logica e della
filosofia della scienza, Volume II, G. Corsi and G. Sambin, eds., CLUEB,
Bologna (Italy). Proceedings of the conference with the same name,
Viaxeggio, 8-13 gennaio 1990.
[1993] On the unity of logic, Annals of Pure and Applied Logic, 59, 201-217.
[1996] Proof-nets: the paxallel syntax for proof theory, in Logic and Algebra.
Papers from the International Conference in memory of Roberto Magari,
held in Pontignano, April 26-30, 1994, A. Ursini and P. Aglian6, eds.,
Lecture Notes in Pure and Applied Mathematics 180, Marcel Dekker
Inc., New York, 97-124.
J.-Y. GIRARD, Y. LAFONT, AND P. TAYLOR
[1988] Proofs and Types, Cambridge Tracts in Theoretical Computer Science
7, Cambridge University Press, Cambridge, UK.
V. GLIVENKO
[1929] Sur quelques points de la logique de M. Brouwer, Académie Royale de
Belgi que. Bulletins de la Classe des Sciences, série 5, 15, 183-188.
K. GÖDEL
[1933a] Eine Interpretation des intuitionistischen Aussagenkalküls, Ergebnisse
eines mathematischen Kolloquiums, 4, 39-40. Also, with translation, in
Gödel [1986], 300-303.
Bibliography 387
[1933b] Zur intuitionistischen Arithmetik und Zahlentheorie, Ergebnisse eines
mathernatischen Kolloquiurns, 4, 34-38. Also, with translation, in Gödel
[1986], pp. 286-295.
[1958] Über eine bisher noch nicht beniitzte Erweiterung des finiten Stand-
punktes, Dialectica, 12, 280-287. Also, with translation, in Gödel [1990],
240-251.
[1986] Collected Works, Volume I, Oxford University Press, Oxford.
[1990] Collected Works, Volume II, Oxford University Press, Oxford.
N. D. GOODMAN
[1984] Epistemic arithmetic is a conservative extension of intuitionistic arith-
metic, The Journal of Symbolic Logic, 192-203.
L. GORDEEV
[1987] On Cut elimination in the presence of Peirce rule, Archiv fiir Mathema-
tische Logik und Grundlagenforschung, 26, 147-164.
[1988] Proof-theoretic analysis: weak systems of functions and classes, Annals
of Pure and Applied Logic, 38, 1-121.
R. P. GORÉ
[1992] Cut-free sequent and tableau systems for propositional normal modal
logics, Tech. Rep. 257, Computer Laboratory, University of Cambridge.
C. A. GRABMAYER
[1999] Cut-elimination in the irnplicative fragment ->G3mi of an intuitionis-
tic G3-Gentzen system and its Computational Meaning, Master's thesis,
Institute for Logic, Language and Computation, University of Amster-
dam.
T. HARDIN
[1989] Confluence results for the pure strong categorical logic, Theoretical Com-
puter Science, 65, 291-342.
J. A. HARLAND
[1994] A proof-theoretic analysis of goal-directed provability, Journal of Logic
and Cornputation, 4, 69-88.
L. A. HARRINGTON AND J. B. PARIS
[1977] A mathematical incompleteness in Peano axithmetic, in Handbook of
Mathernatical Logic, J. Barwise, ed., North-Holland Publ. Co., Amster-
dam, 1133-1142.
R. HARROP
[1956] On disjunctions and existential statements in intuitionistic systems of
logic, Mathematische Annalen, 132, 347-361.
[1960] Concerning formulas of the type A -> 13 V C, A -> (Ex)B(x) in intu-
itionistic formal systems, The Journal of Symbolic Logic, 25, 27-32.
J. VAN HEIJENOORT
[1967] ed., From Frege to Gödel. A Source Book in Mathematical Logic 1879-
1931, Harvaxd University Press, Cambridge, MA. Reprinted 1970.
388 Bibliography
L. HEINDORF
[1994] Elementare Beweistheorie, BI-Wissenschaftsverlag, Mannheim, Ger-
many.
H. HERBELIN
[1995] A A-calculus structure isomorphic to Gentzen-style sequent calculus
structure, in Computer Science Logic. 8th Workshop, CSL'94. Kaz-
imierz, Poland, September 1994, L. Pacholski and J. Tiuryn, eds., Lec-
ture Notes in Computer Science 933, Springer-Verlag, Berlin, Heidel-
berg, New York, 61-75.
J. HERBRAND
[1928] Sur la théorie de la démonstration, Académie des Sciences de Paris.
Comptes Rendus Hebdomadaires des Séances, 186, 1274-1276. Also in
Herbrand [1968].
[1930] Recherches sur la théorie de la démonstration, Société des Sciences et des
Leaves de Varsovie. Comptes Rendus des Sciences. Classe III: Sciences
Mathématiques et Physiques, 33. Also in Herbrand [1968].
[1968] Écrits Logiques, Presses Universitaires de France, Paris. Translated as
Logical Writings, Harvard University Press, Cambridge., MA, 1971.
P. HERTZ
[1929] tier Axiomensysteme für beliebige Satzsysteme, Mathematische An-
nalen, 101, 457-514.
A. HEYTING
[1930a] Die formalen Regeln der intuitionistischen Logik, Sitzungsberichte der
Preussischen Akademie von Wissenschaften. Physikalisch-mathemat-
ische Klasse, 42-56.
[1930b] Die formalen Regeln der intuitionistischen Mathematik II, Sitzungs-
berichte der Preussischen Akademie von Wissenschaften. Physikalisch-
mathematische Klasse, 57-71.
D. HILBERT
[1926] Über das Unendliche, Mathematische Annalen, 95, 161-190.
[1928] Die Grundlagen der Mathematik, Abhandlungen aus dem mathematisch-
en Seminar der Hamburgischen Universität, 6, 65-85.
D. HILBERT AND W. ACKERMANN
[1928] Grundziige der theoretischen Logik, Springer-Verlag, Berlin, Heidelberg,
New York.
D. HILBERT AND P. BERNAYS
[1934] Grundlagen der Mathematik, Bd. I, Springer-Verlag, Berlin, Heidelberg,
New York. 2nd edition 1968.
[1939] Grundlagen der Mathematik, Bd. II, Springer-Verlag, Berlin, Heidel-
berg, New York. 2nd edition 1970.
J. R. HINDLEY
[1993] BCK- and BCI-logics, condensed detachment and the 2-property, Notre
Dame Journal of Formal Logic, 34, 231-250.
[1997] Basic Simple Type Theory, Cambridge University Press, Cambridge,
UK.
Bibliography 389
R. HINDLEY AND D. MEREDITH
[1990] Principal type-schemes and condensed detachment, The Journal of Sym-
bolic Logic, 55, 90-105.
J. J. HINTIKKA
[1955] Form and content in quantification theory. Two papers on symbolic logic,
Acta Philosophica Fennica, 8, 7-55.
S. HIROKAWA
[1992] Balanced formulas, BCK-minimal formulas and their proofs, in Logical
Foundations of Computer Science (LFCS'92), A. Nerode and M. Tait-
slin, eds., Lecture Notes in Computer Science 620, Springer-Verlag,
Berlin, Heidelberg, New York, 198-208.
J. HODAS AND D. MILLER
[1994] Logic programming in a fragment of intuitionistic linear logic, Informa-
tion and Computation, 110, 327-365.
W. HODGES
[1993] Logical features of Horn clauses, in Gabbay et al. [1994 449-518.
W. A. HOWARD
[1970] Assignment of ordinals to terms for primitive recursive functionals of
finite type, in Myhill et al. [1970], 443-458.
[1980] The formulae-as-types notion of construction, in Seldin and Hindley
[1980], 480-490. Circulated as preprint since 1969.
J. HUDELMAIER
[1989] Bounds for Cut Elimination in Intuitionistic Propositional Logic, PhD
thesis, Eberhaxd-Karls Universität, Tiibingen, Germany.
[1992] Bounds for cut elimination in intuitionistic propositional logic, Archive
for Mathematical Logic, 31, 331-354.
[1993] An 0(n log n)-space decision procedure for intuitionistic propositional
logic, Journal of Logic and Computation, 3, 63-75.
[1998] Semantische Sequenzenkalkiile, habilitationsschrift, Fakultät fiir Infor-
matik der Eberhard-Kaxls-tniversität Tiibingen, Germany.
G. E. HUGHES AND M. J. CRESSWELL
[1968] An Introduction to Modal Logic, Methuen, London.
J. M. E. HYLAND AND C. L. ONG
[1993] Modified realizability semantics and strong normalization proofs, in
Typed Lambda Calculi and Applications, M. Bezem and J. Groote, eds.,
Springer Lecture Notes in Computer Science 664, 179-194.
G. JÄGER AND R. F. STÄRK
[1994] A proof-theoretic framework for logic programming. Draft for a chapter
in the Handbook of Proof Theory, edited by S. Buss, to be published by
North-Holland Publ. Co.
S. JAgKOWSKI
[1934] On the rules of supposition in formal logic (Polish), Studia Logica (old
series), 1, 5-32. Translation in Polish Logic 1920-39, S. McCall, ed.,
Clarendon Press, Oxford, 1967, 232-258.
390 Bibliography
[1963] Über Tautologieen, in welchen keine Variabele mehr als zweimal vor-
kommt, Zeitschrift fiir Mathematische Logik und Grundlagen der Math-
ernatik, 9, 231-250.
JOACHIMSKI AND R. MATTHES
[1999] Short proofs of nornalization for the simply-typed A-calculus, permuta-
tive conversions and Gödel's T. Submitted.
I. JOHANSSON
[1937] Der Minimalkalkiil, ein reduzierter intuitionistischer Formalismus, Corn-
positio Mathematica, 4, 119-136.
J.-B. JOINET, H. A. J. M. SCHELLINX, AND L. TORTORA DE FALCO
[1998] Linear decorations, simulations and normalization, Tech. Rep. Preprint
nr.1067, Mathematisch Instituut, Universiteit Utrecht. Submitted.
A. JOYAL AND R. STREET
[1991] The geometry of tensor calculus 1, Advances in Mathematics, 88, 55-112.
M. B. KALSBEEK
[1994] Gentzen systems for logic programming styles, Tech. Rep. CT-94-12,
Institute for Logic, Language and Computation, University of Amster-
dam.
[1995] Meta-Logics for Logic Programming, PhD thesis, Universiteit van Ams-
terdam.
S. KANGER
[1957] Provability in Logic, Acta Universitatis Stockholmiensis. Stockholm
Studies in Philosophy, vol. 1, Almqvist and Wiksell, Stockholm.
M. KELLY
[1964] On Mac Lane's conditions for coherence of natural associativities, com-
mutativities etc., Journal of Algebra, 1, 397-402.
[1972a] An abstract approach to coherence, in Mac Lane [1972], 106-147.
[1972b] A cut-elimination theorem, in Mac Lane [1974 196-213.
G. M. KELLY AND S. MAC LANE
[1971] Coherence in closed categories, Journal of Pure and Applied Algebra, 1,
97-140.
O. KETONEN
[1944] Untersuchungen zum Pradikatenkalkiil, Annales Acaderniae Scientiarum
Fennicae, ser. A, I. Mathematica-physica, 23. A detailed review by
P. Bernays is in The Journal of Symbolic Logic, 10 (1945), 127-130.
S. C. KLEENE
[1952a] Introduction to Metamathematics, North-Holland Publ. Co., Amster-
dam.
[1952b] Permutability of inferences in Gentzen's calculi LK and LJ, Memoirs of
the American Mathematical Society, 10, 1-26.
[1955] Hierarchies of number-theoretic predicates, Bulletin of the American
Mathematical Society, 61, 193-213. Additions and corrections in Pro-
ceedings of the American Mathematical Society 8 (1957), p. 1006.
Bibliography 391
[1967] Mathematical Logic, Wiley and Sons, New York.
A. N. KOLMOGOROV
[1925] On the principle of the excluded middle (Russian), Matematicheskij
Sbornik. Akademiya Nauk SS SR i Moskovskoe Matematicheskoe Obshch-
estvo, 32, 646-667. Translation in van Heijenoort [1967], 414-437.
A. KOWALSKI
[1974] Predicate logic as a programming language, in Information Processing
74- Proceedings of the IFIP congress 74, J. L. Rosenfeld, ed., North-
Holland Publ. Co., Amsterdam, 569-574.
G. KREISEL
[1953] A variant to Hilbert's theory of the foundations of arithmetic, British
Journal for the Philosophy of Science, 4, 107-127.
[1958] Elementary completeness properties of intuitionistic logic with a note
on negations of prenex formulae, The Journal of Symbolic Logic, 23,
317-330.
[1968] Notes concerning the elements of proof theory. Course notes of a course
on proof theory at U.C.L.A., 1967-1968.
[1977] Wie die Beweistheorie zu ihren Ordinalzahlen kam und kommt, Jahres-
bericht der Deutschen Mathematiker-Vereinigung, 78, 177-223.
G. KREISEL AND J.-L. KRIVINE
[1972] Modelltheorie, Springer-Verlag, Berlin, Heidelberg, New York.
G. KREISEL AND G. TAKEUTI
[1974] Formally self-referential propositions for cut free classical analysis and
related systems, Dissertationes Mathematicae, 118.
A. KRIPKE
[1963] Semantical analysis of modal logic I, Zeitschrift fiir Mathematische Logik
und Grundlagen der Mathematik, 9, 67-96.
[1965] Semantical analysis of intuitionistic logic I, in Formal Systems and Re-
cursive Functions, J. N. Crossley and M. A. E. Dummett, eds., Studies
in Logic and the Foundations of Mathematics, North-Holland Publ. Co.,
Amsterdam, 92-130.
S. KURODA
[1951] Intuitionistische Untersuchungen der formalistischen Logik, Nagoya
Mathematical Journal, 2, 35-47.
J. LAMBEK
[1958] The mathematics of sentence structure, The American Mathematical
Monthly, 65, 154-170.
[1968] Deductive systems and categories I: syntactic calculi and residuated cat-
egories, Mathematical Systems Theory, 2, 287-318.
[1969] Deductive systems and categories II: standard constructions and closed
categories, in Category Theory, Homology Theory and their Applications,
P. J. Hilton, ed., Lecture Notes in Mathematics 86, Springer-Verlag,
Berlin, Heidelberg, New York, 76-122.
392 Bibliography
[1972] Deductive systems and categories III: cartesian closed categories, intu-
itionist propositional calculus, and combinatory logic, in Toposes, Alge-
braic Geometry and Logic, F. W. Lawvere, ed., Lecture Notes in Math-
ematics 274, Springer-Verlag, Berlin, Heidelberg, New York, 57-82.
[1974] Functional completeness of cartesian categories, Annals of Pure and Ap-
plied Logic, 6, 259-292.
J. LAMBEK AND P. J. SCOTT
[1986] Introduction to Higher-Order Categorical Logic, Cambridge University
Press, Cambridge, UK.
D. LEIVANT
[1979] Assumption classes in natural deduction, Zeitschrift fiir Mathematische
Logik und Grundlagen der Mathematik, 25, 1-4.
[1990] Contracting proofs to programs, in Logic and Computer Science,
P. Odifreddi, ed., Academic Press, New York, 279-327.
[1994] Higher-order logic, in Gabbay et al. [1994], 229-321.
C. I. LEWIS AND C. H. LANGFORD
[1932] Symbolic Logic, Appleton-Century-Crofts, New York. Reprinted Dover
Publications, New York, 1951, 1959.
V. A. LIFSCHITZ
[1989] What is the inverse method?, Journal of Automated Reasoning, 5, 1-23.
P. LINCOLN, J. MITCHELL, A. SCEDROV, AND N. SHANKAR
[1992] Decision problems for propositional linear logic, Annals of Pure and
Applied Logic, 56, 239-311.
J. W. LLOYD
[1987] Foundations of Logic Programming, Springer-Verlag, Berlin, Heidelberg,
New York.
P. LORENZEN
[1950] Konstruktive Begriindung der Mathematik, Mathematische Zeitschrift,
53, 162-202.
H. LUCKHARDT
[1989] Herbrand-Analysen zweier Beweise des Satzes von Roth: Polynomiale
Anzahlschranken, The Journal of Symbolic Logic, 54, 234-263.
C. LYNDON
[1959] An interpolation theorem in the predicate calculus, Pacific Journal of
Mathematics, 9, 129-142.
MAC LANE
[1963] Natural associativity and commutativity, Rice University Studies, 49,
28-46.
[1971] Categories for the Working Mathematician, Springer-Verlag, Berlin, Hei-
delberg, New York.
[1972] ed., Coherence in Categories, Springer-Verlag, Berlin, Heidelberg, New
York.
Bibliography 393
[1976] Topology and logic as a source of algebra, Bulletin of the American
Mathematical Society, 82, 1-40.
[1982] Why commutative diagrams coincide with equivalence proofs, Contem-
porary Mathematics, 13, 387-401.
S. MAEHARA
[1954] Eine Darstellung der intuitionistische Logik in der klassischen, Nagoya
Mathematical Journal, 7, 45-64.
[1960] On the interpolation theorem of Craig (Japanese), Sugaku, 12, 235-237.
Not seen by us.
S. MAEHARA AND G. TAKEUTI
[1961] A formal system of first-order predicate calculus with infinitely long
expressions, Journal of the Mathematical Society of Japan, 13, 357-370.
P. E. MALMNÄS AND D. PRAWITZ
[1969] A survey of some connections between classical, intuitionistic and
minimal logic, in Contributions to Mathematical Logic, H Schmidt,
K. Schtitte, and H. Thiele, eds., North-Holland Publ. Co., Amsterdam,
215-229.
C. R. MANN
[1975] The connection between equivalence of proofs and Cartesian closed cat-
egories, Proceedings of the London Mathematical Society. Third series,
31, 289-310.
A. MARTELLI AND U. MONTANARI
[1982] An efficient unification algorithm, ACM Transactions on Programming
Languages and Systems, 4, 258-282.
P. MARTIN-LÖF
[1971a] Hauptsatz for the intuitionistic theory of iterated inductive definitions,
in Proceedings of the Second Scandinavian Logic Symposium, J. Fenstad,
ed., North-Holland Publ. Co., Amsterdam, 179-216.
[1971b] Hauptsatz for the theory of species, in Proceedings of the Second Scan-
dinavian Logic Symposium, J. Fenstad, ed., North-Holland Publ. Co.,
Amsterdam, 217-233.
S. MARTINI AND A. MASINI
[1993] A computational interpretation of modal proofs, Tech. Rep. TR-27/93,
Dipartimento di Informatica, Università di Pisa.
[1994] A modal view of linear logic, The Journal of Symbolic Logic, 59, 888-899.
A. MASINI
[1992] 2-Sequent calculus: a proof theory of modalities, Annals of Pure and
Applied Logic, 58, 229-246.
[1993] 2-Sequent calculus: intuitionism and natural deduction, Journal of Lan-
guage and Computation, 3, 533-562.
R. MATTHES
[1998] Extensions of System F by Iteration and Primitive Recursion on Mono-
tone Inductive Types, PhD thesis, Mathematisches Institut der Univer-
sit& Miinchen, Germany.
394 Bibliography
J. C. C. MCKINSEY AND A. TARSKI
[1948] Some theorems about the sentential calculi of Lewis and Heyting, The
Journal of Symbolic Logic, 13, 1-15.
C. MCLARTY
[1992] Elementary Categories, Elementary Toposes, Oxford Logic Guides 21,
Clarendon Press, Oxford.
F. METAYER
[1994] Homology of proof nets, Archive for Mathematical Logic, 33, 169-188.
D. MILLER
[1994] A multiple-conclusion meta-logic, in Proceedings. Ninth Annual Sympo-
sium on Logic in Computer Science. July 1994, Paris, S. Abramsky, ed.,
IEEE Computer Society .Press, Los Alamitos, California, 272-281.
D. MILLER, G. NADATHUR, F. PFENNING, AND A. SCEDROV
[1991] Uniform proofs as a foundation for logic programming, Annals of Pure
and Applied Logic, 51, 125-157.
G. E. MINTS
[1971] Exact estimates of the provability of transfinite induction in the ini-
tial segments of arithmetic (Russian), Zapiski Nauchnykh Seminarov
Lenin gradskogo Otdeleniya Ordena Lenina Matematicheskogo Instituta
imeni V. A. Steklova Akademii Nauk SSSR (LOMI), 20, 134-144. Trans-
lation in Journal of Soviet Mathematics, 1 (1973), 85-91.
[1975] Finite investigations of infinite derivations (Russian), Zapiski Nauchnykh
Seminarov Leningradskogo Otdeleniya Ordena Lenina Matematicheskogo
Instituta imeni V. A. Steklova Akademii Nauk SSSR (LOMI), 49, 67
122. Translation in Journal of Soviet Mathematics, 10 (1978), 548-596.
[1977] Closed categories and the theories of proofs(Russian), Zapiski Nauch-
nykh Seminarov Leningradskogo Otdeleniya Ordena Lenina Matematich-
eskogo Instituta imeni V. A. Steklova Akademii Nauk SSSR (LOMI), 68,
83-114. Translation in Journal of Soviet Mathematics, 15 (1981), 45-62;
also revised translation in Mints [1992c], 183-212.
[1978] On Novikov's hypothesis (Russian). Photocopied proceedings. Transla-
tion in Mints [1992c], 147-151.
[1979] A coherence theorem for for cartesian closed categories (abstract), 'The
Journal of Symbolic Logic, 44, 453-454.
[1990] Gentzen-type systems and resolution rules. Paxt I. Propositional logic, in
Colog-88, G. E. Mints and P. Martin-Löf, eds., Lecture Notes in Math-
ematics 417, Springer-Verlag, Berlin, Heidelberg, New York, 198-231.
[1992a] Normalization of natural deduction and the effectivity of classical exis-
tence, in Mints [1992c], 123-146. This is a translation of the Russian
original in Logicheskij Vyvod (Logical Inference). Proceedings of the All-
Union Symposium on the Theory of Logical inference, V. A. Smirnov,
ed., Nauka, Moskva, 1979, 245-265.
[1992b] Proof theory and category theory, in Mints [1992c], Bibliopolis, Napoli,
and North-Holland Publ. Co., Amsterdam, 157-182.
[1992c] Selected Papers in Proof Theory, North-Holland Publ. Co., Amsterdam;
Bibliopolis, Napoli.
Bibliography 395
[1992d] A Short Introduction to Modal Logic, CSLI Lecture Notes 30, Center for
the Study of Language and Information, Stanford, California.
[1992e] A simple proof of the coherence theorem for CCC, in Mints 1.1992q,
Bibliopolis, Napoli, and North-Holland Pub!. Co., Amsterdam, 213-220.
[1993] Resolution calculus for the first order linear logic, Journal of Logic, Lan-
guage and Information, 2, 59-83.
[1994a] Cut-elimination and normal forms of sequent derivations, Tech. Rep.
CSLI-94-193, CSLI, Stanford. Contains: Normal forms for sequent
derivations; Indexed systems of sequents and cut-elimination; Normal-
ization as an epsilon substitution process.
[1994b] Gentzen-type systems and resolution rule. Part II. Predicate Logic, in
Logic Colloquium '90, J. Oikkonen and J. Väänänen, eds., Lecture Notes
in Logic 2, Springer-Verlag, Berlin, Heidelberg, New York, 163-190.
[1994c] Resolution strategies for intuitionistic logic, in Constraint Programming,
B. Mayoh, E. Tyugu, and J. Penjam, eds., Springer-Verlag, Berlin, Hei-
delberg, New York, 289-312.
[1995] Natural deduction in intuitionistic linear logic. Manuscript dated May
19, 1995.
[1996] Normal forms for sequent derivations, in Kreiseliana, P. Odifreddi, ed.,
A.K. Peters, Wellesley, MA., 469-492.
[1997] Indexed systems and cut-elimination, Journal of Philosophical Logic, 26,
671-696.
[1999] Axiomatization of a Skolem function in intuitionistic logic, in Formaliz-
ing the Dynamics of Information, M. Faller, S. Kaufmann, and M. Pauly,
eds., CSLI, Stanford, CA. To appear.
N. MOTOHASHI
[1984a] Approximation theory of uniqueness conditions by existence conditions,
Fundamenta Mathematicae, 120, 127-142.
[1984b] Equality and Lyndon's interpolation theorem, The Journal of Symbolic
Logic, 49, 123-128.
J. MYHILL, A. KINO, AND R. E. VESLEY
[1970] eds., Intuitionism and Proof Theory, North-Holland Publ. Co., Amster-
dam.
NAGASHIMA
[1966] An extension of the CraigSchfitte interpolation theorem, Annals of the
Japan Association for the Philosophy of Science, 3, 12-18.
P. NEDERPELT, J. H. GEUVERS, AND R. C. DE VRIJER
[1994] eds., Selected Papers on Automath, North-Holland Publ. Co., Amster-
dam.
NEGRI
[1999] Sequent calculus proof theory of intuitionistic apartness and order rela-
tions, Archive for Mathematical Logic, 38, 521-547.
S. NEGRI AND J. VON PLATO
[1998] Cut elimination in the presence of axioms, The Bulletin of Symbolic
Logic, 4, 418-435.
396 Bibliography
[1999] Sequent calculus in natural deduction style. Manuscript.
J. VON NEUMANN
[1927] Zur Hilbertschen Beweistheorie, Mathematische Zeitschrift, 26, 1-46.
M. H. A. NEWMAN
[1942] On theories with a combinatorial definition of "equivalence", Annals of
Mathematics, 2nd series, 43, 223-243.
A. OBERSCHELP
[1968] On the CraigLyndon interpolation theorem, The Journal of Symbolic
Logic, 33, 271-274.
H. ONO AND Y. KOMORI
[1985] Logics without the contra,ction rule, The Journal of Symbolic Logic, 50,
169-201.
V. P. OREVKOV
[1979] Lower bounds for the lengthening of proofs after cut-elimination (Rus-
sian), Zapiski Nauchnykh Seminarov Leningradskogo Otdeleniya Ordena
Lenina Matematicheskogo Instituta imeni V. A. Steklova Akademii Nauk
SSSR (LOMI), 88, 137-162, 242-243. Translation Journal of Soviet
Mathematics, 20 (1982), 2337-2350.
[1984] Upper bounds for the lengthening of proofs after cut-elimination (Rus-
sian), Zapiski Nauchnykh Seminarov Leningradskogo Otdeleniya Ordena
Lenina Matematicheskogo Instituta imeni V. A. Steklova Akademiz Nauk
SSSR (LOMA 137, 87-98. Translation Journal of Soviet Mathematics,
34 (1986), 1810-1819.
[1987] Applications of Cut elimination to obtain estimates of proof lengths,
Doklady Akademii Nauk SSSR, 296, 539-542. Translation Soviet Math-
ematics Doklady, 36 (1988), 292-295.
H. OSSWALD
[1973] Ein syntaktischer Beweis fiir die Zuverlässigkeit der Schnittregel im
Kalkill von Schfitte fiir die intuitionistische Typenlogik, Manuscripta
Mathematica, 8, 243-249.
P. PÄPPINGHAUS
[1983] Completeness properties of classical theories of finite type and the nor-
mal form theorem, Dissertationes Mathematicae, 207.
J. B. PARIS
[1978] Some independence results for Peano arithmetic, The Journal of Sym-
bolic Logic, 43, 725-731.
C. PARSONS
[1973] Transfinite induction in subsystems of number theory (abstra,ct), The
Journal of Symbolic Logic, 38, 544-545.
F. PFENNING
[1994] A structural proof of cut elimination and its representation in a logical
framework, Tech. Rep. CMUCS-94-218, School of Computer Science,
Carnegie-Mellon University.
Bibliography 397
A. M. PITTS
[1992] On an interpretation of second-order quantification in first-order intu-
itionistic propositional logic, The Journal of Symbolic Logic, 57, 33-52.
J. VON PLATO
[1998] Structure of derivations in natural deduction. Manuscript.
[1999] A proof of Gentzen's Hauptsatz without multicut. To appear in the
Archive for Mathematical Logic.
W. POHLERS
[1989] Proof Theory. An Introduction, Lecture Notes in Mathematics 1407,
Springer-Verlag, Berlin, Heidelberg, New York.
A. POIGNE
[1992] Basic category theory, in Abramsky et al. [1992], 413-640.
J. C. VAN DE POL AND H. SCHWICHTENBERG
[1995] Strict functionals for termination proofs, in Proceedings of the Second
International Conference on Typed Lambda Calculi and Applications,
Edinburgh, Scotland, M. Dezani-Ciancaglini and G. Plotkin, eds., Lec-
ture Notes in Computer Science 902, Springer-Verlag, Berlin, Heidel-
berg, New York, 350-364.
POTTINGER
[1977] Normalization as a homomorphic image of cut-elimination, Annals of
Mathematical Logic, 12, 323-357.
[1983] Uniform, cut-free formulations of T, 84 and 85, The Journal of Symbolic
Logic, 48, 900.
D. PRAWITZ
[1965] Natural Deduction. A Proof-Theoretical Study, Almquist and Wiksell,
Stockholm.
[1967] Completeness and Hauptsatz for second-order logic, Theoria, 33, 246
253.
[1968] Hauptsatz for higher-order logic, The Journal of Symbolic Logic, 33,
452-457.
[1970] Some results for intuitionistic logic with second-order quantification
rules, in Myhill et al. [1970], 259-269.
[1971] Ideas and results in proof theory, in Proceedings of the Second Scandi-
navian Logic Symposium, J. E. Fenstad, ed., North-Holland Publ. Co.,
Amsterdam, 235-307.
[1981] Validity and normalizability of proofs in 1st and 2nd order classical and
intuitionistic logic, in Atti de Congresso Nazionale di Logica, S. Bernini,
ed., Bibliopolis, Napoli, 11-36.
D. J. PYM AND J. A. HARLAND
[1994] A uniform proof-theoretic investigation of logic programming, Journal
of Logic and Computation, 4, 175-207.
RASIOWA
[1954] Constructive theories, Bulletin de l'Académie Polonaise des Sciences.
Série des Sciences Mathématiques, Astronomiques et Physiques, 2, 121
124.
398 Bibliography
[1955] Algebraic models of axiomatic theories, Fundamentae Mathematicae, 41,
291-310.
H. RASIOWA AND R. SIKORSKI
[1953] Algebraic treatment of the notion of satisfiability, Fundamentae Mathe-
maticae, 40, 62-95.
[1960] On the Gentzen theorem, Fundamentae Mathematicae, 48, 57-69.
[1963] The Mathematics of Metamathematics, PAN, Warszawa.
W. RAUTENBERG
[1983] Modal tableau calculi, Journal of Philosophical Logic, 12, 403-423.
J. C. REYNOLDS
[1974] Towards a theory of type structure, in Programming Symposium, Pro-
ceedings. Colloque sur la Programmation, B. Robinet, ed., Lecture Notes
in Computer Science 19, Springer-Verlag, Berlin, Heidelberg, New York,
408-425.
A. ROBINSON
[1956] A result on consistency and its application to the theory of definition,
Indagationes Mathematicae, 15, 330-339.
J. A. ROBINSON
[1965] A machin.e-oriented logic based on the resolution principle, Journal of
the Association for Computing Machinery, 12, 23-41.
S. RONCHI DELLA ROCCA AND L. ROVERSI
[1994] Lambda-calculus and intuitionistic linear logic, tech. rep., Department
of Computer Science, Università di Torino, Torino, Italy.
D. ROORDA
[1994] Interpolation in fragments of classical linear logic, The Journal of Sym-
bolic Logic, 419-444.
G. F. ROSE
[1953] Propositional calculus and realizability, Transactions of the American
mathematical Society, 175, 1-19.
G. SAMBIN, G. BATTILOTTI, AND C. FAGGIAN
[1997] Basic logic: reflection, symmetry, visibility. To appear.
SAMBIN AND C. FAGGIAN
[1998] From basic logic to quantum logics with cut-elimination, International
Journal of Theoretical Physics, 37, 31-37.
L. E. SANCHIS
[1967] Functionals defined by recursion, The Notre Dame Journal of Formal
Logic, 8, 161-174.
[1971] A generalization of the Gentzen Hauptsatz, The Notre Dame Journal of
Formal Logic, 12, 499-504.
A. J. M. SCHELLINX
[1991] Some syntactical observations on linear logic, Journal of Logic and Com-
putation, 1, 537-559.
Bibliography 399
[1994] The Noble Art of Linear Decorating, PhD thesis, Universiteit van Ams-
terdam.
P. SCHROEDER-HEISTER
[1984] A natural extension of natural deduction, The Journal of Symbolic Logic,
49, 1284-1300.
S CHULTE- MONTING
[1976] Interpolation formulas for predicates and terms which carry their own
history, Archiv fiir Mathematische Logik und Grundlagenforschung, 17,
159-170.
SCHÜTTE
[1950a] Beweistheoretische Erfassung der unendliche Induktion in der Zahlen-
theorie, Mathematische Annalen, 122, 369-389.
[1950b] Schlussweisen-Kalkiile der Prädikatenlogik, Mathematische Annalen,
47-65.
[1951] Die Eliminierbarkeit des bestimmten Artikels, Mathematische Annalen,
166-186.
[1956] Ein System des verkniipfenden Schliessens, Archiv fiir Mathematische
Logik und Grundlagenforschung, 2, 34-67.
[1960] Beweistheorie, Springer-Verlag, Berlin, Heidelberg, New York.
[1962] Der Interpolationssatz der intuitionistischen Prädikatenlogik, Mathema-
tische Annalen, 148, 192-200.
[1977] Proof Theory, Springer-Verlag, Berlin, Heidelberg, New York.
H. S CHWICHTENB ERG
[1976] Definierbare Funktionen im A-Kalkiil mit Typen, Archiv fiir Mathema-
tische Logik und Grundlagenforschung, 17, 113-114.
[1977] Proof theory: some applications of cut-elimination, in Handbook of
Mathematical Logic, J. Barwise, ed., North-Holland Publ. Co., Ams-
terdam, 867-895.
[1991] Normalization, in Logic, Algebra and Computation, F. Brauer, ed.,
Springer-Verlag, Berlin, Heidelberg, New York, 201-235.
[1992] Minimal from classical proofs, in Computer Science Logic. 5th
Workshop, CSL'91. Berne, Switzerland, October 1991. Proceedings,
E. Börger, G. Jager, H. Kleine Biining, and M. Richter, eds., Lecture
Notes in Computer Science 626, Springer-Verlag, Berlin, Heidelberg,
New York, 326-328.
[1998] Finite notations for infinite terms, Annals of Pure and Applied Logic,
94, 201-222.
[1999] Termination of permutative conversions in intuitionistic Gentzen calculi,
Theoretical Computer Science, 212, 247-260.
D. S. S COTT
[1979] Identity and existence in intuitionistic logic, in Applications of Sheaves,
M. P. Fourman, C. J. Mulvey, and D. S. Scott, eds., Lecture Notes in
Mathematics 753, Springer-Verlag, Berlin, Heidelberg, New York, 660
669.
400 Bibliography
J. P. SELDIN AND J. R. HINDLEY
[1980] eds., To H. B. Curry: Essays on Combinatory logic, Lambda Calculus
and Formalism, Academic Press, New York.
D. J. SHOESMITH AND T. J. SMILEY
[1978] Multiple-Conclusion Logic, Cambridge University Press, Cambridge,
UK.
SKOLEM
[1923] Begriindung der elementaren Arithmetik durch die rekurrierende
denkweise ohne Anwendung scheinbarer Veränderlichen mit unendlichen
Ausdehnungsbereich, Videnskaps Selskapet i Kristiania, Skrifter Utgit
(1), 6, 1-38. Translation van Heijenoort [1967], 303-333.
R. M. SMULLYAN
[1965] Analytic natural deduction, The Journal of Symbolic Logic, 30, 123-139.
[1966] Trees and nest structures, The Journal of Symbolic Logic, 31, 303-321.
[1968] First-order Logic, Springer-Verlag, Berlin, Heidelberg, New York.
SOCHER-AMBROSIUS
[1994] Deduktionssysteme, BI-Wissenschaftsverlag, Mannheim, Germany.
V. SOLOVJOV
[1979] Derivation of equivalence of proofs under reduction of formula depth
(Russian, with English summary), Zapiski Nauchnykh Seminarov
Lenin gradskogo Otdeleniya Ordena Lenina Matematicheskogo Instituta
imeni V. A. Steklova Akademii Nauk SSSR (LOMA 88, 197-207. Trans-
lation Journal of Soviet Mathematics, 20 (1982), 2370-2376.
[1997] Proof of a conjecture of S. Mac Lane, Annals of Pure and Applied Logic,
90, 101-162.
C. SPECTOR
[1962] Provably recursive functions of analysis: a consistency proof of analysis
by an extension of principles formulated in current intuitionistic mathe-
matics, in Recursive Function Theory, J. C. E. Dekker, ed., Symposia in
Pure Mathematics V, American Mathematical Society, Providence, RI,
1-27.
G. STILMARCK
[1991] Normalization theorems for full first order classical natural deduction,
The Journal of Symbolic Logic, 56, 129-149.
R. F. STÄRK
[1990] A direct proof for the completeness of SLD-resolution, in Computer
Science Logic, Selected Papers from CSL '89, E. Börger, H. Kleine
Böning, and M. M. Richter, eds., Lecture Notes in Computer Science
440, Springer-Verlag, Berlin, Heidelberg, New York, 382-383.
R. S TATMAN
[1978] Bounds for proof-search and speed-up in the predicate calculus, Annals
of Pure and Applied Logic, 15, 225-287.
Bibliography 401
E. TAHHAN BITTAR
[1999] Strong normalization proofs for cut elimination in Gentzen's sequent
calculi, Banach Center Publications, 46, 179-225. The title of the vol-
ume is Logic, Algebra, and Computer Science, published by the Polish
Academy of Sciences, Warszawa.
W. W. TAIT
[1965] Infinitely long terms of transfinite type, in Formal Systems and Recur-
sive Functions, J. N. Crossley and M. A. E. Dummett, eds., Studies in
Logic and the Foundations of Mathematics, North-Holland Publ. Co.,
Amsterdam, 176-185.
[1966] A nonconstructive proof of Gentzen's Hauptsatz for second-order predi-
cate logic, Bulletin of the American Mathematical Society, 72, 980-988.
[1967] Intensional interpretation of functionals of finite type, I, The Journal of
Symbolic Logic, 32, 198-212.
[1968] Normal derivability in classical logic, in The Syntax and Semantics of
Infinitary Languages, K. J. Barwise, ed., Lecture Notes in Mathematics
72, Springer-Verlag, Berlin, Heidelberg, New York, 204-236.
[1975] A realizability interpretation of the theory of species, in Proceedings of
Logic Colloquium, R. J. Parikh, ed., Lecture Notes in Mathematics 453,
Springer-Verlag, Berlin, Heidelberg, New York, 240-251.
M. TAKAHASHI
[1967] A proof of cut-elimination in simple type theory, Journal of the Mathe-
matical Society of Japan, 19, 399-410.
[1970] A system of simple type theory of Gentzen style with inference on ex-
tensionality and the cut-elimination in it, Commentarii Mathematici
Universitatis Sancti Pauli, 18, 129-147.
G. TAKEUTI
[1978] Two Applications of Logic to Mathematics, Princeton University Press,
Princeton NJ.
[1987] Proof Theory. 2nd edition, North-Holland Publ. Co., Amsterdam.
A. TARSKI
[1956] Logic, Semantics, Metamathematics. Papers from 1923 to 1938, Claren-
don Press, Oxford, UK.
A. S. TROELSTRA
[1973] Metamathematical Investigation of Intuitionistic Arithmetic and Analy-
sis. Chapters 1-4, Lecture Notes in Mathematics 344, Springer-Verlag,
Berlin, Heidelberg, New York.
[1983] Logic in the writings of Brouwer and Heyting, in Atti del Convegno Inter-
nazionale di Storia della Logica, San Gimignano, 4-8 dicembre 1982,
V. M. Abrusci, E. Casan, and M. Mugnai, eds., Cooperativa Libraxia
Universitaria Editrice Bologna, Bologna, Italy, 193-210.
[1986] Strong normalization for typed terms with surjective pairing, The Notre
Dame Journal of Formal Logic, 27, 547-550.
[1990] On the early history of intuitionistic logic, in Mathematical Logic, P. P.
Petkov, ed., Plenum Press, New York, 3-27. Proceedings of the Heyting
'88 Summer School and Conference on Mathematical Logic, September
13-23, 1988 in Chaika, Bulgaria.
402 Bibliography
[1992a] Lectures on Linear Logic, CSLI-Lecture Notes 29, Center for the Study
of Language and Information, Stanford, California.
[1992b] Realizability, Tech. Rep. ML-92-09, Institute for Logic, Language and
Computation, University of Amsterdam. A revised version is to appear
in Handbook of Proof Theory, S. Buss, ed., North-Holland Publ. Co.,
Amsterdam.
[1995] Natural deduction for intuitionistic logic, Annals of Pure and Applied
Logic, 73, 79-108.
[1999] Marginalia on sequent calculi, Studia Logica, 62, 291-303.
A. S. TROELSTRA AND D. VAN DALEN
[1988] Constructivism in Mathematics, Studies in Logic and the Foundations
of Mathematics, North-Holland Publ. Co., Amsterdam. Two vols.
T. UESU
[1984] An axiomatization of the apartness fragment of the theory DLO+ of
dense linear order, in Logic Colloquium '84, Lecture Notes in Mathe-
matics 1104, Springer-Verlag, Berlin, Heidelberg, New York, 453-475.
A. M. UNGAR
[1992] Normalization, Cut-Elimination, and the Theory of Proofs, Center for
the Study of Language and Information, Stanford, California. CSLI-
Lecture Notes 28.
A. URQUHART
[1995] The complexity of propositional proofs, The Bulletin of Symbolic Logic,
1, 425-467.
S. VALENTINI
[1986] A syntactic proof of cut-elimination of GLlin, Zeitschrift far Mathemat-
ische Logik und Grundlagen der Mathematik, 32, 137-144.
R. VESTERGAARD
[1998a] A computational anomaly in the Troelstra-Schwichtenberg G3i(m) sys-
tem. Manuscript.
[1998b] The cut rule and explicit substitutions (author's cut), Tech. Rep. TR-
1998-9, Depaxtment of Computer Science, University of Glasgow.
A. VISSER
[1996] Uniform interpolation and layered bisimulation, in Gödel '96 (Brno,
1996), Lecture Notes in Logic 6, Springer-Verlag, Berlin, Heidelberg,
New York, 139-164.
R. VOREADOU
[1977] Coherence and non-commutative diagrams in closed categories, Memoirs
of the American Mathematical Society, 182.
N. N. VOROB'EV
[1964] A new algorithm for derivability in a constructive propositional calcu-
lus (Russian), Trudy Ordena Matematicheskogo Instituta imeni V. A.
Steklova. Akademiya Nauk SSSR, 72, 195-227. Translation in American
Mathematical Society Translations. Series 2, 94 (1970), 37-71.
Bibliography 403
R. C. DE VRIJER
[1987] Surjective Pairing and Strong Normalization: two Themes in Lambda
Calculus, PhD thesis, University of Amsterdam.
M. WAJSBERG
[1938] Untersuchungen iiber den Aussagenkalkiil von A. Heyting, Wiadomoici
Matematyczne, 46, 45-101. Translation in Wajsberg [1977], 132-171.
[1977] Logical Works, Zaklad Narodowy Imiena Ossoliriskich., Wydawnictwo
Polskiej Akademii Nauk. Wroclaw, Poland. Edited by S. J. Surma.
H. WANSING
[1994] Sequent calculi for normal modal propositional logics, Journal of Logic
and Computation, 4, 125-142.
[1998] Translation of hypersequents into display sequents, Journal of the IGPL
Interest Group in Pure and Applied Logics, 6, 719-733.
J. I. ZUCKER
[1974] The correspondence between cut-elimination and normalization I, II,
Annals of Mathematical Logic, 7, 1-156.
Symbols and notations
Below we list symbols and notations which either appear in the text more
than just locally, or are important for other reasons. The more important
notations and conventions in use throughout the book are found in section
1.1. For conventions on prooftrees, see 1.3.2, 3.1.4, 4.1.2.
Logical operators
A, V, > 2 (primitive propositional operators)
V, 3 2, 345 (quantifiers)
-,, -.>- 3 (defined operators)
_L 2, 294 (falsity)
T 3, 294 (truth)
7 (sequent arrow)
0, 0 284 (necessary, possible)
A, V 3, 7 (iterated conjunction and disjunction)
n, u, *, +, 0, --4 294 (binary linear logic operators)
,--, 0, 1 294 (negation, zero, unit of linear logic)
i
,
7 295 (modalities of linear logic)-
Substitution
E [0] 4, 11 (substitution in expression)
E P.1n 4, 11 (simultaneous substitution)
A [Xn 1AY .,6] 4 (second-order substitution)
A (t) 4 (convention on substitution)
F [*] , F[A] 6 (context, substitution in context)
Measures on trees and formulas
I TI 9 (depth of a tree T)
s(T) 9 (size of a tree T)
ls(T) 9 (leafsize of a tree T)
IAI 10 (depth of a formula A)
s(A) 10 (size of a formula A)
w(A) 113 (weight of a formula A)
404
Symbols and notations 405
lev(A) 217, 323 (level of a formula A)
Turnstile symbols
H, Hs 7 (deducibility)
Hc, Hi, Hm 8 (deducibility in C, I, M)
1n, HI 76 (deducibility with depth < n)
I-5<n; Hrsr<n 76 (deducibility with size < n)
1c 150, 153 (deducibility with 'rank' d and depth < n)
Theories. Theories, i.e. sets of theorems, are characterized by the formalisms
generating them. For general conventions in the designation of theories, see
1.1.7.
AP 136 HA 203 IL 295 PA 322,337
C 39 HA2 358 Ip2 349 PRA 127
CL 295 I 39 M 39 S4 284
EQAP 137 le 200
Formalisms. For general conventions in the designation of formalisms, see
1.1.7.
AP-G3i 136 G4ip 112 Hs 284
G1 [mic] 61 G5i 247 IU 300
m-Gli 68 Gcl 295 N[mic] 35
Gis 286 Gil 295 Ni2 345
G2[mic] 65 GK[mic] 84 Nie, Nie 200
G3[mic] 77 h-GKi 193 Rcp 244
G3[mic]= 134 t-GKi 192 Rip 249
m-G3[mi] 82 GS[123] 86 Z 321
G3s 287 GS5p 243 Zn 323
H [mic] 51
Type systems. Designations of the principal type systems:
A, 15 )01--+AT 264 A2S2 356
)44 15 A2 349 CL, 18
Terms and constants of type formalisms
App 11, 47 (application operator)
tit2 tn 11 (iterated application of t1, t2, .)
Ax 11, 47 (abstraction on variable x)
Au 46 (abstraction on assumption variable u)
Ax1x2 xn.t 11 (iterated lambda-abstraction on t)
k, s 11, 18 (combinators)
406
p(t, s), (t, s)
Po, Pi
1(0, ki
ExV,y
E3y
Rules and axioms. Let t E {A, V, -4, V, 3}, E {A, V, ÷, V, 3, El, 0, W, C}.
tI, tE
DI
Ax,
Rt, Lt
V2I, Y2E, 321, 32E
Cut
Cut
R,Ru
Ind
TI
Reductions and conversions
In chapter 10 >L- are used for orderings of the natural numbers, in
particular for the standard ordering of ordertype 5.
--<
>.-on etc.
:=0
=On
=w
>gß,
Translations and embeddings
49 (GödelGentzen negative translation)
50 (Kolmogorov's negative translation)
50 (Kuroda's negative translation)
288 (modal embeddings)
300 (Girard's embedding)
Symbols and notations
46, 47 (pair of t,$)
46 (unpairing functions, left and right)
46 (injections, left and right)
46 (disjunction elimination operator)
47 (existence elimination operator)
47 (operator corresponding to li)
36-37 (introduction and elimination rules)
37 (absurdity rules)
284 (neccessitation rule)
axioms; see the respective G-systems.
see the respective G-systems.
204, 345 (second-order quantifier-rules)
66,86 (context-free Cut rule)
67 (context-sharing Cut)
236 (resolution, unrestricted resolution)
317 (induction schema)
317 (transfinite induction)
12 (reduction, general)
12 (converse reduction)
320 (in chapter 10: standard well-ordering)
13 (0-reduction, etc.)
15 (0-equality)
15 (077-equality)
19 (weak reduction, equality)
217 (generalized 0-reduction)
Symbols and notations 407
Resolution (chapter 7)
Categorical logic (chapter 8)
f: A B, A B
g o f
AA B, A ÷ B
idA
AB AB
7ro' 71'
(f,g)
trA
Aev B
cur
CCC(PV)
Other notations
-=-
lN
PV
FV
IIrus,rA
Set(r)
hyp(t, t', t")
21, 41,2k, 4k
fiA, NA
N
Comp
(domain and variable-range)
(metavariables for Horn clauses)
(metavariables for programs)
(universal closures)
(empty goal)
(resolution rules)
(unrestricted resolution step)
(resolution step)
(computed answer)
259 (notation for arrows)
259 (composition of f and g)
259 (product and exponent objects)
259 (identity arrow)
259 (projection arrows)
259 (pairing of arrows)
259 (terminal object)
259 (truth arrow)
259 (evaluation arrow)
259 (currying operator)
263 (free category over PV)
263 (isomorphism of objects)
2 (end-of-proof symbol)
2 (literal identity)
2 (natural numbers)
2 (propositional variables)
4, 46 (free variables)
6 (number of elements in multiset)
6 (join of multisets)
7 (set associated with multiset r)
149 (hyperexponentiation)
149 (abbreviations for hyperexponentiation)
20 (Church numerals on basis A)
350 (second-order Church numerals)
210 (computability predicate)
dom, ranv 232
236
P, 236
9_1v7 pv7 236
[1 236
R,Ru 236
r, j9_,u r
237
r 237
r I P 239
Index
abstraction, 11
type, 349
absurdity rule
classical, 37
intuitionistic, 37
active formula, 62, 78
Aczel, 140
Aczel slash, 107, 140
adjacent inferences, 164
admissible rule, 76
dp-, 76
Altenkirch, 365
Andou, 224
Andreoli, 257
answer, 239
computed, 239
correct, 239
antecedent, 62
application, 11
simple, 329
type, 349
approximation theorem, 297
APS, 308
Apt, 255
arithmetic
Heyting, 203
intuitionistic, 203
Peano, 322
primitive recursive, 127-129
arithmetical system, 321
classical, 322
intuitionistic, 322
restricted, 323
arrow, 259
identity, 259
truth, 259
variable, 260
assumption
bound, 38
408
cancelled, 38
closed, 37
discharged, 38
eliminated, 38
open, 37
stability, 50
assumption class, 23, 36
assumption variable, 46
atomic formula, 2
atomic instances of axioms, 66
AUTOMATH, 59
Avron, 91
axiom
b-, c-, w-, 42
k-, s-, 33
4-, 284
K-, 284
normality, 284
T-, 284
axiom link, 305
Baader, 255
Babaev, 281, 282
Bachmann, 318
balanced formula, 274
Barendregt, 3, 10, 16, 365
basic logic, 316
BCK-logic, 292
Beeson, 224
Belnap, 91, 315
Benthem, van, 140
Benton, 316
Bernays, 139, 343
Beth, 89, 90, 139, 141
Beth's definability theorem, 118, 340
Bezhanishvili, 139
BHK-interpretation, 55
Bibel, 87
Blyth, 258
Index 409
Borisavljevie, 139
Borieie, 228
bottom-violation lemma, 167, 175
bound assumption, 38
branch, 9
main, 187
branching
k-, 9
Brouwer, 35
BrouwerHeytingKolmogorov interpre-
tation, 55
BrouwerKleene ordering, 341
Bruijn, de, 3, 59
Buchholz, 176, 343, 344
Bull, 313
Buss, 140, 176
cancelled assumption, 38
candidate
computability, 352
cartesian closed category, 261
category, 261
cartesian closed, 261
free, 262
free cartesian closed, 262
c.c., 352
CCC, 261
free, 262
CDC, 43
Cellucci, 228
Chang, 255
Church, 57
Church numeral, 20, 349
ChurchRosser property, 14
weak, 14
class
predicative, 203
clause, 244
initial, 246
intuitionistic, 248
clause formula, 244
intuitionistic, 248
closed
dp-, 76
closure (under a rule), 76
codomain of an arrow, 259
coherence theorem, 274, 281-282
collapsing map, 361
Colmerauer, 255
combinator, 265
A-, 265
combinatory logic
typed, 18
complete discharge convention, 43
completeness
combinatorial, 20
semantic, 105
completeness for linear resolution, 241
completeness of resolution calculus, 246
complexity theory, 177
composition of arrows, 259
composition of substitutions, 232
comprehension
elementary, 203
computability candidate, 352
computability predicate, 210, 272
conclusion of a link, 305
conclusion of a proof structure, 305,
306
confluent, 14
weakly, 14
conjunction (object), 259
conservative, 8
conservativity of definable functions,
124, 142
consistency (of contexts), 41
constructions
calculus of, 365
context, 6, 41, 62
negative, 5
positive, 5
strictly positive, 6
context-free, 64
context-independent, 64
context-sharing, 64
contraction, 61, 194
dp-admissible, 80
convention
variable, 38
conversion, 12
ß-, 13
ßi-, 14
17-, 13
A-, 180
410 Index
V-, 180
V-perm, 180
-4-, 180
V-, 180
3-, 180
3perm, 181
detour, 180, 347
g0-, 183, 217
generalized 0-, 183, 217
permutation, 180
simplification, 181
conversion equality, 12
conversum, 12
convertible, 12
Coquand, 365
CR, 14
Craig, 141
critical cut, 179
Curen, 282
Curry, 56, 58-59, 89, 90, 140, 176,
177, 224, 313, 315
currying operator, 259
Cut, 66
additive, 67
closure under, 67, 92-102
context-sharing, 67
cut, 66, 179
critical, 179
critical g-, 217
g-, 217
cut elimination, 92-102, 287, 298
continuous, 344
generalizations of, 126
numerical bounds on, 148-157
cut link, 305
cut reduction lemma, 148
Cut rule, 66, 139
cutformula, 66
cutlevel, 93
cutrank, 93, 179, 327
Dalen, van, ix, x, 143
Danos, 139, 312, 316
De Morgan duality, 85, 296
decidability of Ip, 108
deduction, 22
natural, 23
normal, 179
pure-variable, 38, 62
deduction from hypotheses, 7
deduction graph, 259
positive, 259
tci-, 259
deduction theorem, 58
modal, 285
deduction tree, 75
deduction variable, see assumption vari-
able
definability
explicit, 107
definability theorem
Beth's, 118, 340
del-rule, 179
del-rules, 198
depth (of a formula), 10
depth of a tree, 9
dereliction, 194
derivable rule, 76
derivation, 22
convertible, 329
normal, 329
quasi-normal, 331
detachment rule, 58
deviation reduction, 278
Diller, 224
discharged assumption, 38
disjunction property, 106, 107
Doets, 239, 255
domain of an axrow, 259
domain of a substitution, 232
Dokn, 111
Dokn, 315
double negation law, 51
dp-admissible rule, 76
dp-closed, 76
dp-invertible, 77
Dragalin, 68, 88, 139, 364
duality
De Morgan, 85, 296
Dummett, 91
Dyckhoff, 139, 141, 225
E-logic, 199
E-part, 187, 199
Index 411
E-rule, 36
Eisinger, 255
eliminated assumption, 38
elimination
cut, see cut elimination
elimination of empty succedent, 66
elimination part, 187, 199
elimination rule, 36
embedding
Girard, 300
modal, 288, 314
equality
conversion, 12
equivalent substitutions, 233
evaluation (arrow), 259
ex-falso-quodlibet schema, 322
exchange rule, 87
excluded middle
law of, 51
expansion, 205
explicit definability, 107
exponent object, 259
extensions (of G1-systems), 126
extensions (of G3-systems), 130
extensions (of N-systems), 197
fa,ct, 207
faithfulness of modal embedding, 291
Felscher, 142, 176
Fitting, 139, 143, 145, 176, 313, 315
Flagg, 314
f.o,, 6
formula
active, 62, 78
atomic, 2
balanced, 274
cut, 66
goal, 236
Harrop, see Rasiowa-Harrop
hereditary Harrop, see hereditary
Rasiowa-Harrop
hereditary Rasiowa-Harrop, 176
interpolation, 116
main, 62
negative, 48
322
prime, 2
principal, 62, 78
Rasiowa-Harrop, 107, 140
side, 62
formula clause, 244
formula occurrence, 6, 7
negative, 6, 7
positive, 6, 7
strictly positive, 6
formulas-as-types, 25, 58, 365
fragment
negative, 48
free (for a variable), 3
free cartesian closed category, 262
free category, 262
free CCC, 262
Frege, 57
Friedman, 344, 364
Fujiwara, 142
function object, 259
G (rule), 51
g-cut, 217
critical, 217
G-system, 60
multi-succedent, 82
Gallier, 87, 176, 344, 365
Gandy, 224, 225
Generalization rule, 51
Gentzen, ix, 56-58, 60, 87, 89, 90, 111,
139, 177, 318, 321, 343
Gentzen system, 60, 61, 65, 77, 87, 88,
112, 141, 247, 286, 287, 294,
295
Gentzen's method of cut elimination,
101
Gentzen-Schfitte system, 85
Geuvers, 365
Girard, ix, 90, 142, 143, 176, 292, 297,
304, 314-316, 343, 349, 352,
365, 366
Girard emb'edding, 300
Glivenko, 57
goal, 236
goal formula, 236
Gödel, 58, 224, 313, 314
Goodman, 314
Gordeev, 176, 344
412 Index
Goré, 315
Grabmayer, 89, 139
graph
deduction, 259
positive deduction, 259
tci-deduction, 259
H-system, 51
Hardin, 282
Harland, 256
Harrington, 344
Harrop, 140
Harrop formula, see Rasiowa-Harrop
hereditary, see Rasiowa-Harrop
head formula, 194
head-cut, 194
Headcut rule, 301
height of a tree, 9
Heijenoort, van, 177
Heindorf, ix, 139
Herbelin, 89, 226
Herbrand, 58, 177, 255
Herbrand's theorem, 108, 168, 175
Hertz, 139
Heyting, 57, 58
Hilbert, ix, 57, 142
Hilbert system, 51, 57, 284, 297
Hindley, x, 10, 58, 282
Hintikka, 89, 139
Hirokawa, 281
Hodas, 256, 257
Hodges, 255
Horn clause, 236
definite, 236
Horn formula, 207
definite, 207
definite generalized, 207
generalized, 207
Howard, 59, 224, 225
Hudelmaier, 89, 141, 176
Hughes, 313
Hyland, 365
hyperexponential function, 149
hypothesis of a proof structure, 305
I-part, 187, 199
I-rule, 36
idempotent substitution, 234
identity
literal, 2
identity arrow, 259
iff, 2
IH, 2
implication
linear, 294
implication (object), 259
induction
transfinite, 317
instance of a formula, 332
interpolant, 116
interpolation, 116-123, 141-142, 313,
316, 340
interpolation formula, 116
introduction paxt, 187, 199
introduction rule, 36
intuitionistic logic, 57
inversion lemma, 79, 89, 290
inversion principle, 90
inversion-rule strategy, 149-157
invertible, 77
dp-, 77
left, 77
right, 77
IPS, 307
isomorphism (of objects), 263
Jaeger, 255
Jáskowski, 56, 57, 281
Joachimski, 225
Johansson, 57, 87
Joinet, 139, 316
Joyal, 282
K-axiom, 284
Kalsbeek, 255
Kanger, 90, 139, 313
Ketonen, 88, 89, 139, 142
Kleene, ix, 57, 84, 87, 139-142, 177,
344
Kleene's systems, 83
Kolmogorov, 57, 58
Kowalski, 255
Kreisel, 142, 176, 343, 344, 365
Kripke, 139, 315
Index 413
Kuroda, 58
1-rank, 217
L-rule, 61
lambda calculus
extensional simple typed, 15
polymorphic, 349
simple typed, 15
Lambek, 263, 282, 292
Lambek calculus, 292
law of double negation, 51
law of the excluded middle, 51
leaf, 9
leafsize, 9
left rule, 61
Leivant, 225, 364, 366
lemma
bottom-violation, 167, 175
cut reduction, 99, 148
inversion, 79, 89, 290
local permutation, 170, 172
Newman's, 14
substitution, 12
length of a branch, 9
length of a clause (formula), 244
length of a formula, 10
length of a segment, 179
length of a tree, 9
letter
proposition, 2
level
implication, 217
level (of a cut), 93
level of a derivation, 326
level of a formula, 217, 323
level of an ordinal, 318
level-rank, 217
Lewis, 313
Lincoln, 299
linear implication, 294
linear logic, 315
classical, 295
intuitionistic, 295
linear resolution
completeness for, 241
soundness for, 239
link, 305
literal, 246
negative, 85
positive, 85
Lloyd, 255
local permutation lemma, 170, 172
local rule, 75
Lorenzen, 90
Luckhardt, 177
Lyndon, 141
m.g.a., 234
m.g.u., 234
Mac Lane, 258
Maehara, 141, 314
main formula, 62
major premise, 37
Malmnäs, 140
Mann, 282
marker, 36
Martelli, 255
Martin-Löf, 16, 223, 365
Martini, 315
Matthes, 225, 365
maximal segment, 179
McKinsey, 314
McLarty, 258
Metayer, 316
mid-cut, 194
Midcut rule, 301
midsequent theorem, 177
Miller, 256
minimal logic, 57
minimal part, 199
minimum part, 187
minor premise, 37
Mints, 91, 140, 223, 226, 255, 274,
281, 282, 313-316, 344
modal embedding, 288, 314
modal logic, 313
Modus Ponens, 51
most general unifier, 234
Motohashi, 140, 142
MP, 51
multi-succedent G-system, 82
multicut, 101
Multicut rule, 101
414 Irtdex
multiple-conclusion natural deduction,
228
multiset, 6
N-system, 35
Nagashima, 141, 143
natural deduction, 23, 56
multiple-conclusion, 228
term calculus for, 46
natural deduction in sequent style, 41
natural deduction system, 35
necessitation rule, 284
Nederpelt, 59
negative formula, 48
negative fragment, 48
negative literal, 85
negative translation, 48, 58
Gödel-Gentzen, 49
Kolmogorov's, 50
Kuroda's, 50
Negri, 143, 224, 226
Neumann, 57
Newman, 14
Newman's lemma, 14
node, 9
bottom, 9
top, 9
non-introduced, 210, 352
non-sharing, 64
normal, 193, 347
normal deduction, 179
normal form, 12
unique, 274
normality axiom, 284
normalization, 182, 218, 224, 347
bounds on, 215-216, 219-223
strong, 183, 210, 218, 273, 347,
351, 365
normalizing
strongly, 13
numeral, 321
Oberschelp, 142
object, 259
function, 259
one-sided system, 85, 90
Ono, 292
order of a track, 187
order-restriction, 167, 169
ordering theorem, 167, 171, 175
ordinal, 318
ordinal notation, 318
Orevkov, 225
Osswald, 365
Päppinghaus, 365
par, 294
par link, 305
parentheses, 3
Paris, 343
Parsons, 344
part
elimination, 187, 199
introduction, 187, 199
minimal, 199
minimum, 187
strictly positive, 5
partition
admissible, 167, 169, 174
Peano arithmetic, 337
Peano axioms, 321
Peirce rule, 56
Peirce's law, 43
permutable rules, 164, 252
permutation
variable-, 233
permutation conversion, 180
permutation rule, 87
permuting below, 164
Pfenning, 89
Pitts, 141
Plato, von, 139, 143, 226
Pohlers, ix, 343
Poigné, 258
Pol, van de, 225
polymorphic lambda calculus, 349
polynomial, 21
extended, 21
positive deduction graph, 259
positive literal, 85
Pottinger, 91, 225
Prawitz, 13, 56, 57, 89, 90, 112, 140,
189, 223-225, 365
pre-cut formula, 217
Index 415
predecessor, 9
immediate, 9
predicative class, 203
premise
major, 37
minor, 37
premise of a link, 305
prime formula, 2
primitive recursive arithmetic, 127-129
primitive rule, 76
principal formula, 62, 78
product (object), 259
program
definite, 236
progression rule, 331
progressive, 323
proof, 22
proof structure, 305
abstract, 308
inductive, 307
proofnet, 308, 316
prooftree, 22, 75
proper variable, 62
pruning, 193
PS, 305
inductive, 307
pure-variable deduction, 38, 62
Pym, 256
quantum logic, 316
query, 236
R-rule, 61
rank (of a cut), 93
Rasiowa, 90, 140, 314
RasiowaHarrop foimula, 107
hereditary, 176
Rautenberg, 313
recursive functions
provably total, 363
redex, 12, 329
critical, 217
reduction, 12
deviation, 278
generated, 12
one-step, 12
proper, 12
weak, 19
reduction of strong normalization, 212
reduction sequence, 12
reduction tree, 12
redundant, 276
relevant unifier, 234
renaming, 3
Renardel de Lavalette, 224
representable, 20
resolution, 255
resolution calculus, 249, 316
resolution derivation, 239
unrestricted, 238
resolution rule, 237, 244
unrestricted, 236
resolution system, 244
resultant, 237
Reynolds, 365
right rule, 61
Robinson, 141, 255
Ronchi della Rocca, 316
Roorda, 316
root, 9
Rose, 281
rule
admissible, 76
Cut, 66, 139
del-, 179
derivable, 76
detachment, 58
exchange, 87
left, 61
local, 75
Multicut, 101
Peirce, 56
permutation, 87
primitive, 76
progression, 331
right, 61
rule P, 56
Sambin, 316
Sanchis, 142, 224
Schellinx, 314-316
Schroeder-Heister, 226, 229
SchulteMönting, 142
Schatte, 90
416 Index
Schiitte, 90, 139, 141, 142, 343
Schwichtenberg, 21, 176, 225, 255, 343
Schiitte, ix
Scott, 224
second-order arithmetic
intuitionistic, 358
second-order extension
weak, 203
segment, 179
maximal, 179
minimum, 187
semantic tableau, 89, 143-146, 314
separation, 66, 106, 139, 189
sequence
reduction, 12
sequent, 7
2-, 275
sharpened Hauptsatz, 177
Shoesmith, 228
side formula, 62
simple type, 10
simplification conversion, 181
size
leaf-, 9
size of a formula, 10
size of a tree, 9
Skolem, 127
slash
Aczel, 107, 140
SLD-derivation, 239
SLD-resolution
completeness for, 241
soundness for, 239
Smullyan, 57, 143, 224
SN, 13
Socher-Ambrosius, 139
Solovjov, 281, 282
soundness for linear resolution, 239
s.P.P., 5
stability, 50
stability axiom, 71
stability schema, 322
Stälmarck, 224
Stärk, 255
Statman, 176
strictly positive part, 5
strong normalization, 183, 210, 218,
273
reduction of, 212
strongly normalizing, 13
subformula, 4
literal, 4
negative, 5
positive, 5
strictly positive, 5
subformula (segment), 179
subformula property, 66, 105, 188
substitution, 3, 4, 11, 232
idempotent, 234
identical, 232
rule, 57
variable, 232
substitutivity, 15, 16
succedent, 62
successful, 239
unrestrictedly, 239
successor, 9
immediate, 9
sum
Hessenberg, 319
natural, 319
switching, 308
system
60
Gentzen, 60
51
Hilbert, 51, 57
LR-, 75
N-, 35
system F, 349
Szabo, 87
T-axiom, 284
tableau
semantic, 89, 143-146, 314
Tahhan Bittax, 139
Tait, 16, 90, 176, 224, 329, 365
Tait calculus, 90
Takahashi, 365
Takeuti, ix, 141, 176, 224, 343, 344
Takeuti's conjecture, 365
Tarski, 58
tci-deduction graph, 259
Index 417
tensor, 294
tensor link, 305
term calculus for Ni, 46
term-labelled calculus for t-G2i, 73
theorem
approximation, 297
Beth's definability, 118, 340
coherence, 274, 281-282
deduction, 58
Herbrand's, 108, 168, 175
interpolation, 116, 123, 125, 340
midsequent, 177
modal deduction, 285
ordering, 167, 171, 175
separation, 106, 139, 189
track, 185
main, 187
tree, 9
deduction, 22, 75
derivation, 22
labelled, 9
reduction, 12
Troelstra, 1, 35, 55, 58, 127, 128, 140,
224-226, 281, 297, 315, 316,
364, 366
truth arrow, 259
truth function, 339
truth predicate, 339
Turing, 224
type
function, 10
simple, 10
type abstraction, 349
type application, 349
Uesu, 140
Ungax, 228
unification, 235, 255
unifier, 234
most general, 234
relevant, 234
unsuccessful, 239
unrestrictedly, 239
Urquhaxt, 177
Valentini, 315
variable
assumption, 46
free, 4, 11
proper, 38, 62
proposition, 2, 3
type, 10
variable arrow, 260
variable convention, 38, 62
variable substitution, 232
variable-permutation, 233
variant, 233
Vestergaard, 89
Visser, 141
Voreadou, 282
Vorob'ev, 141
Vrijer, de, 281
Wajsberg, 139, 281
Wansing, 91, 315
WCR, 14
weak second-order extension, 203
weakening, 61
depth-preserving, 65
weight, 113
w.l.o.g., 2
Zucker, 225

