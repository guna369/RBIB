Discrete Mathematics 309 (2009) 962–968
www.elsevier.com/locate/disc
Note
On the subgroup distance problem
Christoph Buchheima,∗, Peter J. Cameronb, Taoyang Wuc
a Department of Computer Science, University of Cologne, Germany
b School of Mathematical Sciences, Queen Mary, University of London, UK
c Department of Computer Science & School of Mathematical Sciences, Queen Mary, University of London, UK
Received 2 October 2006; received in revised form 11 October 2007; accepted 21 January 2008
Available online 10 March 2008
Abstract
We investigate the computational complexity of finding an element of a permutation group H ⊆ Sn with minimal distance to a
given pi ∈ Sn , for different metrics on Sn . We assume that H is given by a set of generators. In particular, the size of H might be
exponential in the input size, so that in general the problem cannot be solved in polynomial time by exhaustive enumeration. For the
case of the Cayley Distance, this problem has been shown to be NP-hard, even if H is abelian of exponent two [R.G.E. Pinch, The
distance of a permutation from a subgroup of Sn , in: G. Brightwell, I. Leader, A. Scott, A. Thomason (Eds.), Combinatorics and
Probability, Cambridge University Press, 2007, pp. 473–479]. We present a much simpler proof for this result, which also works
for the Hamming Distance, the l p distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance. Moreover, we give an NP-hardness
proof for the l∞ distance using a different reduction idea. Finally, we discuss the complexity of the corresponding fixed-parameter
and maximization problems.
c© 2008 Elsevier B.V. All rights reserved.
Keywords: Permutation groups; Subgroup distance
1. Introduction
For any given metric d on Sn , the distance of a permutation pi ∈ Sn from a subgroup H of Sn is defined in a natural
way as
d(pi, H) = min
τ∈H d(pi, τ ).
If H is not given explicitly, but by a set of generators, one can still decide in polynomial time whether d(pi, H) = 0,
i.e., whether pi ∈ H [11,6]. However, it is not possible in general to compute the distance d(pi, H) in polynomial time,
unless P = NP. This was shown by Pinch for the Cayley distance [10]. More precisely, he showed that the following
problem is NP-complete in this case:
Problem 1 (Subgroup Distance Problem). Given a permutation pi ∈ Sn , a set of generators of a subgroup H of Sn ,
and an integer K , decide whether d(pi, H) ≤ K .
∗ Corresponding author.
E-mail addresses: buchheim@informatik.uni-koeln.de (C. Buchheim), P.J.Cameron@qmul.ac.uk (P.J. Cameron),
Taoyang.Wu@dcs.qmul.ac.uk (T. Wu).
0012-365X/$ - see front matter c© 2008 Elsevier B.V. All rights reserved.
doi:10.1016/j.disc.2008.01.036
C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968 963
In this paper, we present an alternative proof for this result. Furthermore, we show NP-completeness for several
other well-known metrics on Sn , namely the Hamming Distance, the lp distance, the l∞ distance, Lee’s Distance,
Kendall’s tau, and Ulam’s Distance. We list the corresponding definitions in the following, but recommend [4] for
further information.
• the Hamming Distance between two permutations pi and τ is the number of different entries, i.e., |{i | pi(i) 6= τ(i)}|
• the Cayley Distance is defined as the minimum number of transpositions taking pi to τ
• for p ≥ 1, the lp distance is defined by p
√∑n
i=1(pi(i)− τ(i))p
• the l∞ distance is defined as max1≤i≤n |pi(i)− τ(i)|
• the Lee Distance is ∑ni=1 min(|pi(i)− τ(i)|, n − |pi(i)− τ(i)|)
• Kendall’s tau is defined as |{(i, j) ∈ {1, . . . , n}2 | pi(i) < pi( j), τ (i) > τ( j)}|
• Ulam’s Distance is defined as n minus the length of a longest increasing subsequence in (τpi−1(1), . . . , τpi−1(n))
The subgroup distance problem is related to the weight problem, where one asks for an element τ ∈ H with a given
distance k to the identity. This problem has been investigated by Cameron and Wu, who showed NP-completeness for
all metrics listed above [3]. If the weight problem is restricted to the Hamming distance and to the case k = n, the
resulting problem is to decide whether the group H contains a fixed-point free permutation, which has been shown
to be NP-complete by Buchheim and Ju¨nger [2]. The proof given there is a simple adaption of a proof by Lubiw [8],
showing that it is NP-complete to decide whether a given graph has a fixed-point free automorphism.
2. NP-completeness for the Hamming distance
In this section, we prove that the subgroup distance problem is NP-complete for the Hamming distance.
Theorem 2. The subgroup distance problem for the Hamming distance is NP-complete, even if the permutation group
H is abelian of exponent two.
Proof. For the reduction, we use the decision version of the maximum satisfiability problem with clauses of length
two (MAX-2-SAT), which is well-known to be NP-complete [7]. So consider an instance of MAX-2-SAT, consisting
of an integer K ′, of p variables u1, . . . , u p and of q clauses c1, . . . , cq of length two. It is to decide whether there is
a truth assignment {u1, . . . , u p} → {0, 1} satisfying at least K ′ clauses.
In order to transform this instance to an instance of the subgroup distance problem, first define K = 6q − 4K ′.
Moreover, construct a domain X and a permutation pi as follows: for every variable ui , introduce a set X i with 6q + 2
points. These points are swapped pairwisely by pi . For each clause j , add a set Y j = {a j,1, . . . , a j,6} such that pi
exchanges a j,1 with a j,2, a j,3 with a j,4, and a j,5 with a j,6. The total size of the domain X , defined as the union of all
sets X i and Y j , is p(6q + 2)+ 6q and thus polynomial.
Next we define generators for the group H . For each variable ui , we define two generators pii (t) and pii ( f ). Both
exchange all points in X i in the same way as pi . If ui appears without negation in the first position of a clause c j ,
then pii (t) exchanges a j,1 with a j,2 and a j,3 with a j,4; if it appears without negation in the second position, then it
exchanges a j,1 with a j,2 and a j,5 with a j,6. For a negated appearance, the same is done by pii ( f ) instead of pii (t). All
other points are fixed by pii (t) and pii ( f ).
Let H = 〈pii (t), pii ( f ) | i = 1, . . . , p〉. It remains to show d(pi, H) ≤ K if and only if K ′ clauses from c1, . . . , cq
can be simultaneously satisfied. First, let t : {u1, . . . , u p} → {0, 1} be a truth assignment satisfying at least K ′ clauses.
Consider
τ =
∏
t (ui )=1
pii (t)
∏
t (ui )=0
pii ( f ) ∈ H.
By construction, τ agrees with pi on each X i . Moreover, it is readily verified that on the clause gadget Y j the distance
between τ and pi is 2 if c j is satisfied by t and 6 otherwise. In summary, we have
d(pi, τ ) = 6q − 4 · |{ j | c j is satisfied by t}| ≤ 6q − 4K ′ = K .
Now assume that d(pi, H) ≤ K . Choose τ ∈ H with d(pi, τ ) ≤ K . In the composition of τ , exactly one of the
generators pii (t) or pii ( f ) must appear, for each variable ui . Indeed, as both pii (t) and pii ( f ) are involutions and H is
964 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968
abelian, we can assume that at most one copy of each appears. If for some variable ui both pii (t) and pii ( f ) or neither
one appeared, the distance between τ and pi on X i would be 6q + 2 > K .
We can thus define t : {u1, . . . , u p} → {0, 1} by setting t (ui ) = 1 if and only if pii (t) appears in the composition of
τ . Moreover, this implies that the Hamming distance between τ and pi on all sets X i is zero. Arguing as above, one
can show that t must satisfy at least K ′ clauses. 
3. NP-completeness for the l∞ distance
In this section, we will prove that the subgroup distance problem is NP-complete also for the l∞ distance. For the
weight problem, we know that the l∞ distance behaves differently from all other metrics considered in this paper,
see [3]. The same is true for the subgroup distance problem, as we need a new method to prove its NP-completeness.
The difference between l∞ and other metrics will become even clearer in Sections 5 and 6.
Theorem 3. The subgroup distance problem for the l∞ distance is NP-complete, even if the permutation group H is
abelian of exponent two.
Proof. We construct a polynomial-time reduction from the NAE-3-SAT problem. This problem is NP-complete [9];
it is similar to the well-known 3-SAT problem but requires a truth assignment such that in no clause all three literals
are equal in truth value. More precisely, an instance of the NAE-3-SAT problem is given by p variables u1, . . . , u p
and q clauses c1, . . . , cq of length three. The question is whether there is an assignment {u1, . . . , u p} → {0, 1} such
that no clause has all literals true, or all literals false.
In order to transform this instance into an instance of the subgroup distance problem, firstly define K = 2. Construct
a domain X and a permutation pi as follows: for every variable ui , introduce a set X i containing 6 points. We may
assume that the points in X i are labelled from 1 to 6. Then pi is acting on X i as (1, 4)(2, 5)(3, 6). For each clause c j ,
we use a gadget Y j of size 4. To simplify the notation, assume Y j contains nodes 1, 2, 3, 4. Then pi is acting on Y j as
(1, 4)(2)(3). Now the domain X is the disjoint union of all X i and Y j with suitable adjustments of the labelling.
Next we define generators for the group H . For each variable ui , we define two generators pii (t) and pii ( f ). Both
exchange all points in X i in the same way as pi . If ui appears without negation in the first position of a clause c j , then
the action on Y j is pii (t) = (1, 2)(3, 4), where we assume again that the points in Y j are labelled 1 to 4. If it appears
without negation in the second position then pii (t) = (1, 3)(2, 4); if it appears without negation in the third position
then we have pii (t) = (1, 4)(2, 3). For a negated appearance, the same is done by pii ( f ) instead of pii (t). All other
points are fixed by pii (t) and pii ( f ).
Let H = 〈pii (t), pii ( f ) | i = 1, . . . , p〉. It remains to show that l∞(pi, H) ≤ K if and only if there exists an
assignment such that no clause from c1, . . . , cq has all literals true, or all literals false. First, let t : {u1, . . . , u p} →
{0, 1} be a truth assignment satisfying the requirement of NAE-3-SAT. Consider
τ =
∏
t (ui )=1
pii (t)
∏
t (ui )=0
pii ( f ) ∈ H.
By construction, τ agrees with pi on each X i . Moreover, one can verify that on the clause gadget Y j , the l∞ distance
between τ and pi is 3 if all literals in c j have the same truth value with respect to t . Indeed, in this case the induced
action of τ on Y j is trivial. In all other cases, the distance between τ and pi is either 1 or 2. In summary, we have
l∞(pi, τ ) ≤ 2 if and only if in all clauses either one or two literals are satisfied.
Now assume that l∞(pi, H) ≤ K = 2. Choose τ ∈ H with l∞(pi, τ ) ≤ 2. In the composition of τ , exactly one of
the generators pii (t) or pii ( f ) must appear, for each variable ui . Indeed, as both pii (t) and pii ( f ) are involutions and
H is abelian, we can assume that at most one copy of each appears. If for some variable ui both pii (t) and pii ( f ) or
neither one appeared, the distance between τ and pi on X i would be 3 > K .
We can thus define t : {u1, . . . , u p} → {0, 1} by setting t (ui ) = 1 if and only if pii (t) appears in the composition of
τ . Moreover, this implies that the l∞ distance between τ and pi on all sets X i is zero. Arguing as above, one can show
that t must satisfy the condition that in all clauses either one or two literals are satisfied. 
4. NP-completeness for other distances
We next show that the subgroup distance problem is NP-complete for all other considered metrics, following the
ideas in the proof of Theorem 2. Indeed, we can use exactly the same construction of variable and clause gadgets and
the same definition of pi . We just have to label the points a j,1 to a j,6 consecutively in each clause gadget Y j .
C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968 965
The crucial point in the proof of Theorem 2 is the following: let x1 (x2) denote the action on Y j induced by
a satisfied literal in the first (second) position of a clause. Then d(x1, pi) = d(x2, pi) = d(x1x2, pi) = 2 while
d(pi, e) = 6. Roughly speaking, if for any metric d we have d(x1, pi) = d(x2, pi) = d(x1x2, pi) = a while
d(pi, e) = b for some 0 < a < b, then we can carry over the proof of Theorem 2 with no other change than
redefining K = bq − (b− a)K ′ and making sure that the distance between pi and e on each variable gadget is at least
bq.
It is readily verified that the parameters a and b can be chosen as follows for the remaining distances defined in the
introduction:
Distance a b
Cayley 1 3
l p
p√2 p√6
Lee 2 6
Kendall’s tau 1 3
Ulam 1 3
In summary, we derive
Theorem 4. The subgroup distance problem is NP-complete for the Cayley Distance, the lp distance, Lee’s Distance,
Kendall’s tau, and Ulam’s Distance, even if the permutation group H is abelian of exponent two.
For the case of the Cayley Distance, this result has been proved recently by Pinch [10]. However, the proof given here
is much simpler.
Alternatively, the results of Theorems 2 and 4 could be proven by using the nearest codeword problem:
Problem 5. Given a binary linear code C of length n with basis E and a vector v ∈ {0, 1}n , find some c ∈ C with
minimal Hamming distance to v.
This problem is NP-hard [1]. A reduction to the subgroup distance problem is obtained as follows: for any vector
c ∈ {0, 1}n , define a permutation pic ∈ S2n , exchanging 2i − 1 with 2i if and only if ci = 1, for all i ∈ {1, . . . , n}. By
construction, the Hamming distance between pic and piv is exactly double the Hamming distance between c and v, for
all c ∈ {0, 1}n .
Now consider G = 〈pic | c ∈ E〉. As G = {pic | c ∈ C}, we derive that finding some c ∈ C minimizing the distance
to v is equivalent to finding some pi ∈ G minimizing the distance to piv .
Moreover, it is easily verified that for all pairs of permutations of the form pic with c ∈ {0, 1}n the Cayley distance,
the Lee distance, Kendall’s tau and Ulam’s distance are proportional to the Hamming distance, while lp is always the
pth root of the Hamming distance. This shows that the reduction works for all considered metrics, except for l∞.
5. Fixed parameter K
It is worthwhile to have a look at the variant of the subgroup distance problem where the parameter K is considered
a constant rather than part of the input. Interestingly, the problem then becomes polynomial for most metrics discussed
above. Indeed, as a membership test can be performed in polynomial time [11,6], it suffices to show that the set
X = {τ ∈ Sn | d(τ, e) ≤ K }
can be enumerated in polynomial time. For most metrics considered above, this can easily be seen to hold: for the
Hamming distance, at most K positions may differ between e and any τ ∈ X . This implies
|X | ≤
( n
K
)
nK ∈ O(n2K ).
This bound also holds for the Lee distance, as it is always greater or equal to the Hamming distance. Next observe
that the Cayley distance is always at least half the Hamming distance, while the lp distance is at least the pth root
of the Hamming distance. Thus |X | is bounded polynomially for these distances as well. The same result follows for
Kendall’s tau, which is greater or equal to the Cayley distance by definition. Finally, for Ulam’s distance the set X
contains all permutations τ such that there is an increasing subsequence in (τ−1(1), τ−1(2), . . . , τ−1(n)) of length at
966 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968
least n−K . All these permutations can be constructed by choosing n−K positions, then n−K numbers to be placed
increasingly on these positions, and an arbitrary permutation of the remaining K numbers. Thus we derive
|X | ≤
( n
K
) ( n
K
)
K ! ∈ O(K !n2K ).
To sum up, we have the following theorem:
Theorem 6. The subgroup distance problem is in P for the Hamming Distance, the Cayley Distance, the lp distance,
Lee’s Distance, Kendall’s tau, and Ulam’s Distance when K is fixed.
Note that for all metrics considered in Theorem 6 the parameter K appears in the exponent of the size of X .
One may ask for a stronger result, namely whether the subgroup distance problem is even fixed-parameter tractable,
i.e., whether it can be solved by an algorithm with running time O( f (K )(m + n)c), for a constant c and an arbitrary
function f :N→ N. Here m denotes the number of given generators of H .
The answer is negative. The reduction from the nearest codeword problem discussed above is clearly a
parameterized reduction. The latter problem was shown to be W[1]-hard by Downey et al. [5], hence the same result
follows for the subgroup distance problem, for all metrics considered in Theorem 6. In other words, the subgroup
distance problem is likely to be fixed-parameter intractable in these cases.
For the l∞ distance, the set X actually has exponential size, even for K = 1: assume that n is even and consider
pairs {1, 2}, {3, 4}, . . . , {n − 1, n}. Then each pair can be swapped independently without increasing the distance to e
beyond one, so that X contains at least 2n/2 points. This is in contrast to all other metrics, where these swaps would add
up (in different ways). In fact, the proof of Theorem 3 shows that for the l∞ distance the subgroup distance problem
remains NP-complete even if K is fixed to 2. Using an appropriate relabelling, the same proof shows NP-completeness
for every fixed K ≥ 2. If we drop the restriction that H is of exponent two, we can even show NP-completeness for
K = 1.
Theorem 7. The subgroup distance problem for the l∞ distance is NP-complete for each fixed K ≥ 1, even if the
permutation group H is abelian.
Proof. It remains to prove the theorem for the case K = 1. As in the proof of Theorem 3, we use a reduction
from NAE-3-SAT. The variable gadgets now contain 4 points each such that pi exchanges (1, 3) and (2, 4). The
clause gadgets are defined as follows: for every clause c j , the set Y j consists of three points a j,1, a j,2, a j,3, numbered
consecutively. The permutation pi exchanges a j,1 and a j,3.
If ui appears without negation in any of the three positions of a clause c j , then pii (t) permutes (a j,1, a j,2, a j,3)
cyclically. For a negated appearance, the same is done by pii ( f ) instead of pii (t).
As above, let τ be the permutation corresponding to a truth assignment t . Then the action of τ on Y j is trivial if
and only if either none or all of the literals in c j are satisfied, and it is cyclic otherwise. It is easy to check that the l∞
distance between τ and pi on Y j is 2 in the first case and 1 otherwise. 
6. Maximum subgroup distance
So far we have examined the problem of finding a member of H with minimal distance to the given permutation
pi . Alternatively, one may ask for an element with a maximal distance from pi . The corresponding decision problem is
Problem 8 (Maximum Subgroup Distance Problem). Given pi ∈ Sn , a set of generators of a subgroup H of Sn , and
an integer K , decide whether there is a τ ∈ H with d(pi, τ ) ≥ K .
This problem is not symmetric to the (minimum) subgroup distance problem in general. The complexity status of
the maximization version cannot be derived from the complexity status of the minimization version. In particular, we
will show that the maximum subgroup problem for the l∞ distance can be solved in polynomial time, while we saw
above that the minimum subgroup distance problem is NP-complete for the same metric.
Theorem 9. Given pi, τ1, . . . , τm ∈ Sn , we can find some τ ∈ H = 〈τ1, . . . , τm〉 maximizing l∞(pi, τ ) in polynomial
time.
C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968 967
Proof. We have to find a permutation τ ∈ H such that
max
1≤i≤n
|pi(i)− τ(i)|
is maximized. Since this value is a priori bounded by n, we can iteratively check for k = n, . . . , 1 whether H contains
an element τ such that |pi(i) − τ(i)| = k for some point i . The latter holds if and only if there exists a pair of points
(i, j) with |pi(i)− j | = k and i and j belong to the same orbit of H . The last property can be checked in polynomial
time, and the first found τ mapping i to j can be returned. 
We now argue that the maximum subgroup distance problem is NP-complete for all other metrics considered above.
The idea of the proof for the minimization variant can be carried over with few changes. The variable and clause
gadgets are the same as before. However, the permutation pi is now chosen as the identity e, instead of exchanging
points pairwisely on the variable and clause gadgets. This makes sure that for every variable exactly one of the two
generators pii ( f ) or pii (t) is chosen.
Basically, it remains to prove that with these definitions on the clause gadgets we have d(x1, pi) = d(x2, pi) =
d(x1x2, pi) = a > 0; note that d(pi, e) = 0 on each clause gadget by definition of a metric. The corresponding
numbers are:
Distance a
Hamming 4
Cayley 2
l p
p√4
Lee 4
Kendall’s tau 2
Ulam 2
Theorem 10. The maximum subgroup distance problem is NP-complete for the Hamming Distance, the Cayley
Distance, the lp distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance, even if the permutation group H
is abelian of exponent two.
In contrast to the minimal subgroup distance problem, which is NP-complete for the l∞ distance when K is fixed,
the fixed-parameter version of the maximum subgroup distance problem is in P for all metrics considered in this
paper. Firstly, it is easy to see from the above discussion that this holds for l∞, so consider the remaining metrics.
Following the arguments of Section 5, we know that the following set is of polynomial size for all metrics except l∞:
X = {τ ∈ Sn | d(τ, pi) ≤ K − 1}.
Now to check whether there is an element τ ∈ H with d(τ, pi) ≥ K , we can equivalently check whether H 6⊆ X ,
i.e., whether |H | 6= |H ∩ X |. As X can be enumerated in polynomial time and a membership test for H can be
performed in polynomial time, the size of H ∩ X can be computed in polynomial time for any pi ∈ Sn and any H . On
the other hand, the size of H can be computed in polynomial time as well. That is, we have the following theorem:
Theorem 11. The maximum subgroup distance problem is in P for the Hamming Distance, the Cayley Distance, the
lp distance, the l∞ distance, Lee’s Distance, Kendall’s tau, and Ulam’s Distance when K is fixed.
In fact, the above theorem not only gives us the answer for the decision problem, but also provides us an algorithm
to find a permutation with distance at least K , if one exists. The key observation is that we can associate an order on
the group H via its Cayley graph with respect to the generators. Therefore we can enumerate the elements in H and
compute their distance to pi . We stop at the first one whose distance to pi is at least K . This algorithm will terminate
in polynomial time because the set H ∩ X is of polynomial size.
Acknowledgement
The first author was partially supported by the Marie Curie Research Training Network ADONET 504438 funded
by the European Commission.
968 C. Buchheim et al. / Discrete Mathematics 309 (2009) 962–968
References
[1] E.R. Berlekamp, R.J. McEliece, H.C.A. van Tilborg, On the inherent intractability of certain coding problems, IEEE Transactions on
Information Theory 24 (1978) 384–386.
[2] C. Buchheim, M. Ju¨nger, Linear optimization over permutation groups, Discrete Optimization 2 (4) (2005) 308–319.
[3] P.J. Cameron, T. Wu, The complexity of the weight problem for permutation groups, Electronic Notes in Discrete Mathematics 28 (2007)
109–116.
[4] P. Diaconis, Group Representations in Probability and Statistics, Institute of Mathematical Statistics, 1988.
[5] R. Downey, M.R. Fellows, A. Vardy, G. Whittle, The parameterized complexity of some fundamental problems in coding theory, SIAM
Journal on Computing 29 (2) (1999) 545–570.
[6] M.L. Furst, J. Hopcroft, E.M. Luks, Polynomial time algorithms for permutation groups, in: Proc. 21st IEEE Foundations of Computer
Science, 1980, pp. 36–41.
[7] M.R. Garey, D.S. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, W. H. Freeman, 1979.
[8] A. Lubiw, Some NP-complete problems similar to graph isomorphism, SIAM Journal on Computing 10 (1) (1981) 11–21.
[9] C.H. Papadimitriou, Computational Complexity, Addison-Wesley Publishing Company, 1994.
[10] R.G.E. Pinch, The distance of a permutation from a subgroup of Sn , in: G. Brightwell, I. Leader, A. Scott, A., Thomason (Eds.), Combinatorics
and Probability, Cambridge University Press, 2007, pp. 473–479.
[11] C.C. Sims, Computation with permutation groups, in: S.R. Petrick, editor, Proceedings of the 2nd Symposium on Symbolic and Algebraic
Manipulation, 1971, pp. 23–28.
