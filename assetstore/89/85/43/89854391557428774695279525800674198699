IS
SN
 0
24
9-
63
99
ap por t  

de  r ech er ch e 
INSTITUT NATIONAL DE RECHERCHE EN INFORMATIQUE ET EN AUTOMATIQUE
On Semi-Completeness of Term Rewriting
Systems
Bernhard Gramlich
N Ëš 3327
DeÂ´cembre 1997
TH `EME 2
On Semi-Completeness of Term Rewriting Systems
Bernhard Gramlich
Theme 2 | Genie logiciel
et calcul symbolique
Projet PROTHEO
Rapport de recherche n3327 | Decembre 1997 | 11 pages
Abstract: We investigate the question whether semi-completeness, i.e., weak termination
plus conuence, of term rewriting systems is preserved under the normalization of right-hand
sides. We give a simple counterexample showing that in general this transformation neither
preserves weak termination nor (local) conuence. Moreover we present two conditions
which are sucient for the preservation of semi-completeness. In particular, we show that
(almost) orthogonal systems enjoy this preservation property.
Key-words: Theory of Computation, term rewriting, conuence, termination, semi-
completeness.
(Resume : tsvp)
This work was supported by a Marie Curie Research Fellowship of the European Community under
contract No. ERBFMBICT961235.
UniteÂ´ de recherche INRIA Lorraine
TechnopoË†le de Nancy-Brabois, Campus scientifique,
615 rue de Jardin Botanique, BP 101, 54600 VILLERS L `ES NANCY (France)
TeÂ´leÂ´phone : (33) 83 59 30 30 â€“ TeÂ´leÂ´copie : (33) 83 27 83 19
Antenne de Metz, technopoË†le de Metz 2000, 4 rue Marconi, 55070 METZ
TeÂ´leÂ´phone : (33) 87 20 35 00 â€“ TeÂ´leÂ´copie : (33) 87 76 39 77
Sur la semi-completude de systemes de reecriture
Resume : Nous etudions le probleme de savoir si la semi-completude, c'est-a-dire, la
terminaison faible et la conuence, de systemes de reecriture est preservee par la normalisa-
tion des membres droits. Nous donnons un contre-exemple simple qui montre qu'en general
cette transformation ne preserve ni la terminaison faible, ni la conuence (locale). Puis nous
proposons deux conditions susantes permettant de preserver la semi-completude. En par-
ticulier, nous demontrons que les systemes (presque) orthogonaux possedent cette propriete
de preservation.
Mots-cle : Theorie du calcul, reecriture, conuence, terminaison, semi-completude.
On Semi-Completeness of Term Rewriting Systems 3
1 Introduction
We assume familiarity with the basic no(ta)tions, terminology and theory of term rewriting
(cf. e.g. [DJ90], [Klo92]) but recall some no(ta)tions for the sake of readability. The set of
terms over some given signature F and some (disjoint) countably innite set V of variables
is denoted by T (F ;V). A term rewriting system (TRS) is a pair (F ;R) consisting of a
signature F and a set R of rewrite rules over F , i.e., pairs (l; r) | also denoted by l ! r |
with l; r 2 T (F ;V). Here we require that l is not a variable, and that all variables of r occur
in l. Instead of (F ;R) we also writeR ifF is clear from the context or irrelevant. The rewrite
relation! induced byR (andR itself) is said to be conuent, if

 !

 !



 , locally
conuent if   !  !



 , strongly conuent if   !  !
=


 (!
=
denotes the
reexive closure of!). ! (and R) is (strongly) terminating or strongly normalizing if there
is no innite reduction sequence s
1
! s
2
! s
3
! : : :. It is weakly terminating (or weakly
normalizing) if every term s has a normal form, i.e., if s !

s
0
with s
0
irreducible. A term
s is said to be weakly (R-)terminating if it has an (R-) normal form, and (R-)terminating
if all reduction sequences issuing from s are nite. A TRS is complete or convergent if it is
conuent and terminating, and semi-complete if it is conuent and weakly terminating. If
a term s has a unique R-normal form the latter is denoted by s#
R
. A term is root-reducible
if it is a redex, i.e., an instance l of the left-hand side of some rule l ! r.
1
It is well-known that any complete TRSR can be simplied into an irreducible, complete
TRS R
irr
which induces the same equational theory ([Met83]). For instance, this can be
done by rst normalizing all right-hand sides, and then omitting all rules rules with a left-
hand side that is reducible by the remaining rules (cf. e.g. [Klo92]):
(a) R# := fl ! r#
R
j l ! r 2 Rg (right-normalization).
(b) R
irr
:= fl ! r 2 R# j l is (R#nfl ! rg)-irreducibleg (deletion of left-reducible
rules).
2
If R is complete then R# as well as R
irr
are also complete, and their induced equational
theories coincide: $

R
= $

R#
= $

R
irr
. These properties are usually exploited in typical
Knuth-Bendix like completion procedures for equational specications ([KB70]).
Right-normalization, i.e., step (a) above, is also well-dened for semi-complete TRSs,
because for such systems every term has a unique normal form. Hence, it is quite natural
to ask the following basic questions due to Kahrs ([Kah95]):
(1) Does right-normalization preserve semi-completeness?
(2) Does right-normalization of semi-complete TRSs preserve the equational theory?
As mentioned by Kahrs in [Kah95] it is easy to see that the preservation of weak termination
would be sucient to settle both questions in the positive (see Lemma 2.1 below). Moreover,
1
More formally, a redex (in some term s) can be dened by the pair (p; l! r) indicating that the subterm
s=p = l (for some ) in s is to be rewritten or contracted into r yielding the result s[p r].
2
Note that as usual equality of rewrite rules is interpreted as equality modulo variable renamings!
RR n3327
4 Bernhard Gramlich
if the answer to question (2) is negative, then one could enforce preservation of the equational
theory by `adding the potentially missing part', i.e., by dening
R#
ext
:= R# [ fr ! r#
R
j l ! r 2 R; r 6= r#
R
g :
If R is semi-complete, the equational theories of R and R#
ext
clearly coincide and both
systems have the same sets of normal forms, but the question
(1a) Does semi-completeness of R imply semi-completeness of R#
ext
?
remains non-trivial ([Kah95]). In view of the above discussion about complete systems we
add another question:
(3) Does deletion of left-reducible rules preserve semi-completeness and the equational
theory of right-normalized semi-complete TRSs?
Question (1) is certainly the most interesting one from a computational point of view.
It is closely related to the general question which reduction strategies are normalizing for a
given TRS. In many examples right-normalization of a semi-complete, but non-terminating
TRS yields again a semi-complete or even complete system. Somehow surprisingly, we will
show in Section 2 that in general both weak termination and (even local) conuence may
get lost when right-normalizing semi-complete systems. Yet, in Section 3 we shall identify
two classes of TRSs for which semi-completeness is preserved under right-normalization.
Questions (1a) and (3) will also be settled in the negative. However, (2) remains open. We
shall exhibit necessary properties of potentially existing counterexamples for (2).
2 A Simple Counterexample
Subsequently, we will use the notations introduced above. In particular, R# will always
denote the right-normalized version of a semi-complete TRS R. Let us start with some
simple facts about right-normalization.
Lemma 2.1 Let R be semi-complete. Then the following properties hold:
(1) A term is R-reducible i it is R#-reducible.
(2) If R# is weakly terminating, then R# is conuent (hence semi-complete) and $

R
=
$

R#
.
Proof: Straightforward.
The following answers question (1) in the negative.
Theorem 2.2 There exists a semi-complete TRS R such that R# is neither weakly termi-
nating nor locally conuent.
INRIA
On Semi-Completeness of Term Rewriting Systems 5
h(f(a))
-
h(g(a))
-
c
h(f(b))
?
-
h(g(b))
?

h(f(a))
-
h(g(a))
-
c
h(f(b))
?
-

h(g(b))
?
Figure 1: reductions in R (left) and in R# (right)
Proof: Consider the TRS
R =
8
>
>
<
>
:
a! b
g(b)! f(a)
h(f(x))! h(g(x))
h(g(a))! c
9
>
>
=
>
;
Obviously, right-normalization yields
R# =
8
>
<
>
>
:
a ! b
g(b)! f(b)
h(f(x)) ! h(g(x))
h(g(a))! c
9
>
=
>
>
;
We have to show
(1) R is conuent.
(2) R is weakly terminating.
(3) R# is not locally conuent.
(4) R# is not weakly terminating.
The relevant parts of the reduction graphs of R and R# are displayed in Figure 1.
For (1), it suces to show conuence of!
b
R
for any
b
R with () !
R
 !
b
R
 !

R
. Taking
for instance
b
R := R [ fh(g(b)) ! c; h(f(a)) ! c; h(f(b)) ! cg, we have l !
+
R
r for all
l ! r 2
b
R nR as is easily veried. Hence, () holds for
b
R. Moreover,
b
R is strongly closed
([Hue80]), i.e., for every critical pair hs; ti there exist terms u; v such that s !

u
=
 t and
s !
=
v

 t. Furthermore,
b
R is left-linear and right-linear, hence by [Hue80, Lemma 3.2] it
is (strongly) conuent. This implies conuence of R as desired.
For (2) we show that all terms t are weakly (R-)terminating, by structural induction and
case analysis. In the base case, if t is a variable or a constant (from fa; b; cg), it obviously
has a normal form. In the induction step we have the following cases. If t = f(t
0
) then
RR n3327
6 Bernhard Gramlich
by induction hypothesis t
0
has some normal form
b
t
0
. Since there is no rule in R with f as
left-hand side root symbol, f(
b
t
0
) is a normal form of f(t). If t = g(t
0
) then by induction
hypothesis t
0
has some normal form
b
t
0
. If
b
t
0
= b then t = g(t
0
) reduces to the normal form
f(b). Otherwise, i.e., if
b
t
0
6= b, then g(
b
t
0
) is a normal form of t. Finally, if t = h(t
0
) then
by induction hypothesis t
0
has some normal form
b
t
0
. If
b
t
0
is of the form
b
t
0
= f(
e
t
0
) then, if
e
t
0
= b then t reduces to the normal form c otherwise t reduces to the normal form h(g(
e
t
0
)).
Otherwise, i.e., if
b
t
0
6= f(
e
t
0
) then t reduces to h(
b
t
0
) which is already in normal form (note
that
b
t
0
= g(a) is impossible since
b
t
0
is a normal form).
For (3) we observe that in R# we have h(g(b))  h(g(a)) ! c. Here, c is irreducible and
the only reductions from h(g(b)) are of the form h(g(b))! h(f(b)) ! h(g(b))! : : :. Hence,
R# is not locally conuent. Moreover, (4) holds since for instance h(g(b)) does not have a
normal form in R#.
A slight modication of the above counterexample shows that also for the special case
of string rewriting systems (cf. e.g. [BO93]) semi-completeness is not preserved under right-
normalization. To this end one may simply turn the constants a; b; c in R above into unary
function symbols and add some variable x in the corresponding rules. This yields the system
fa(x)! b(x); g(b(x))! f(a(x)); h(f(x)) ! h(g(x)); h(g(a(x))) ! c(x)g which corresponds
(in the usual way) to the string rewriting system fa! b; gb! fa; hf ! hg; hga! cg.
Notice, that the above counterexample also constitutes a counterexample for (1a), since
R#
ext
= R# [ fr ! r#
R
j l ! r 2 R; r 6= r#
R
g =
8
>
>
<
>
>
>
:
a! b
g(b)! f(b)
h(f(x))! h(g(x))
h(g(a))! c
f(a)! f(b)
9
>
>
=
>
>
>
;
is also neither weakly terminating nor (locally) conuent (for the same reasons as R#).
3 Two Sucient Conditions
It is obvious that right-normalization disables certain reduction steps which are possible in
the original system. One case where this is harmless is the following.
Theorem 3.1 Let R be a semi-complete TRS such that R# satises: () no non-variable
subterm of a right-hand side in R# is uniable with a left-hand side in R#. Then R# is
semi-complete.
Proof: Let R satisfy the above assumptions. By Lemma 2.1(2) it suces to show weak
termination of R#. We show by structural induction that every term t has a normal form
(in R#). First we consider the base case: If t is a variable or irreducible constant then we
already have a normal form. If t is a reducible constant, then t is a left-hand side of R and
of R#. Consequently, t reduces in one R#-step to a normal form. In the induction step t is
INRIA
On Semi-Completeness of Term Rewriting Systems 7
of the form t = f(t
1
; : : : ; t
n
). By induction hypothesis, every t
i
(1  i  n) has some normal
form
b
t
i
in R#, hence t = f(t
1
; : : : ; t
n
)!

R#
f(
b
t
1
; : : : ;
b
t
n
) =:
b
t. If
b
t is irreducible, we are done.
Otherwise, we must have
b
t = l for some rule l ! r 2 R and some irreducible substitution ,
i.e., with (x) irreducible for every x 6= (x) (note that  may be assumed to be irreducible
because all proper subterms of
b
t are irreducible). Hence,
b
t = l !
R#
(r#
R
). The latter
term is irreducible by the assumption () and irreduciblity of . Hence, t = f(t
1
; : : : ; t
n
)
reduces in R# to the normal form (r#
R
) as desired. Hence we are done.
Note that the counterexample in the proof of Theorem 2.2 violates the condition (),
since the non-variable subterm g(x) of the right-hand side h(g(x)) of the R#-rule h(f(x))!
h(g(x)) is uniable with the left-hand side g(b).
Remark 3.2 We observe that for the preservation of weak termination in Theorem 3.1
conuence of R is not really necessary. More precisely, if R is weakly terminating then we
may consider any system R#, which is obtained by replacing in R every right-hand side by
one of its R-normal forms. If R# satises () above, then it is innermost terminating, hence
in particular weakly terminating (this is easily proved by structural induction or minimal
counterexample). Moreover, in such an R# the contractum of an innermost redex in some
term is irreducible. This means that the length of innermost derivations in R# is bounded
by the size of the initial term.
In some sense the condition () in Theorem 3.1 above is not very satisfactory because
it is formulated in terms of the resulting system and not of the original one. Moreover the
class of TRSs to which it applies seems to be rather restricted (cf. Remark 3.2 above).
Another more interesting sucient condition relies on a known result of
O'Donnell about normalization of reduction strategies. More precisely, we shall exploit
the fact that parallel-outermost reduction and | more generally | outermost-fair reduc-
tion are normalizing for almost orthogonal TRSs ([O'D77]). The latter result has recently
been extended to the higher-order case by van Raamsdonk ([Raa96]).
3
First let us explain
some notions needed here and subsequently. Recall that a TRS R is non-overlapping if it
has no critical pairs (note that an overlap of a rule with itself at the root position is not
considered to be critical). A critical pair hs; ti is trivial if s = t, and an overlay if it is obtai-
ned by overlapping two rules at root position. A left-linear TRS R is called orthogonal if it
is non-overlapping, almost orthogonal if all its critical pairs are trivial overlays, and weakly
orthogonal if all its critical pairs are trivial. A reduction strategy is said to be normalizing if
for any term t possessing a normal form reduction (of t) according to the strategy eventually
ends in a normal form. A (possibly innite) reduction sequence (where for every step the re-
dex contracted is specied) is said to be outermost-fair if every outermost redex occurrence
is eventually eliminated. In almost orthogonal TRSs outermost redex occurrences can only
be eliminated and created by contracting redex occurrences which are outermost themselves
(this property does not hold for weakly orthogonal systems).
3
Note that outermost-fair reduction ([Klo92]) is called eventually outermost in [O'D77].
RR n3327
8 Bernhard Gramlich
Theorem 3.3 Let R be an almost orthogonal TRS. If R is semi-complete then R# is semi-
complete, too.
Proof: Let R be semi-complete and almost orthogonal. To show semi-completeness of R#
it suces by Lemma 2.1 to prove that R# is weakly terminating. For an arbitrary term s
we construct the R#-reduction (parallel reduction by contraction of some outermost redexes
is denoted by
o
  k!)
D
0
: s =: s
1
o
  k!
R#
s
2
o
  k!
R#
s
3
o
  k!
R#
: : :
where s
k+1
is obtained from s
k
by the parallel contraction of all (parallel) outermost R#-
redexes in s
k
. If some outermost root-reducible subterm s
k
=p of s
k
is root-reducible by
several distinct rules then we choose an arbitrary applicable one. In any case, the result
of contracting s
k
=p is unique, since R is almost orthogonal. By denition of R#, we have
l !
R
r !

R
r
0
for every l ! r 2 R, l ! r
0
2 R#. Thus we may rene D
0
into an
R-derivation
D : s =: s
1
o
  k!
R
s
0
2
!

R
s
2
o
  k!
R
s
0
3
!

R
s
3
o
  k!
R
: : :
where s
k+1
is obtained from s
k
by the parallel contraction of all (parallel) outermost R-
redexes in s
k
(yielding s
0
k+1
) followed by the R-normalization of the right-hand side patterns
of the applied R-rules,
4
i.e., if s
k
= C[l
1

1
; : : : ; l
n

n
] (with l
i
! r
i
2 R) where all outermost
R-redexes are displayed then
s
k
o
  k!
R
C[r
1

1
; : : : ; r
n

n
] = s
0
k+1
!

R
C[(r
1
#
R
)
1
; : : : ; (r
n
#
R
)
n
] = s
k+1
:
Now, for every k every outermost R-redex of s
k
is eliminated in the step
s
k
o
  k!
R
s
0
k+1
.
5
Hence, D is in particular an outermost-fair R-derivation. Since outermost-
fair reduction is normalizing for almost orthogonal TRSs and R is semi-complete and almost
orthogonal, D must end with an R-normal form s
n
(for some n). By denition of R# we
know that s
n
is also a normal form w.r.t. R#. Consequently, D
0
must also end in the (R-
and R#-) normal form s
n
. Hence,
D
0
: s =: s
1
o
  k!
R#
s
2
o
  k!
R#
: : :
o
  k!
R#
s
n
is a normalizing R#-derivation for s as desired.
We observe that the right-normalized version of a semi-complete orthogonal TRS is not
only semi-complete but by construction also orthogonal. This preservation of orthogonality
does not extend to almost orthogonality, i.e., the right-normalized version of a semi-complete,
almost orthogonal TRS is semi-complete, but need not be almost orthogonal (however, it is
still an overlay system). For instance, right-normalizationof the complete, almost orthogonal
TRS
R =
8
<
:
f(x; g(a))! h(x)
f(g(a); g(x)) ! h(g(x))
h(g(x))! b
9
=
;
4
For unicity one may assume for every rule l! r 2 R one xed normalizingR-derivation r !

R
r#
R
.
5
Note that, for k  2, all outermost redexes of all intermediate terms occurring in s
0
k
!

R
s
k
are
eliminated at the latest in the step s
k
o
  k!
R
s
0
k+1
.
INRIA
On Semi-Completeness of Term Rewriting Systems 9
yields
R# =
8
<
:
f(x; g(a))! h(x)
f(g(a); g(x)) ! b
h(g(x))! b
9
=
;
which is complete, but obviously not almost orthogonal.
A careful inspection of the proof of Theorem 3.3 reveals that the only property which is
really essential for the construction to go through is normalization of outermost-fair reduc-
tion. However, we are not aware of any further results (besides the one mentioned above)
about classes of TRSs for which outermost-fair reduction is normalizing. For instance, it
seems to be open whether outermost-fair reduction is also normalizing for weakly orthogonal
TRSs. Note that weak orthogonality is only slightly more general than almost orthogonality.
Actually, considering the proof of Theorem 3.3 it is obvious that instead of normalization
of outermost-fair reduction hyper normalization
6
of parallel-outermost reduction may also
be used as essential property (this is exactly what is needed in the construction). And
it seems plausible ([Mid97b]) that hyper normalization of parallel-outermost reduction for
weakly orthogonal TRSs can be proved by using ideas of [SR93], [OR94], [Mid97a]. Yet,
this remains to be checked in detail.
4 Discussion
Right-normalization of semi-complete TRSs is a transformation which is incompatible with
the usual (position selection) reduction strategies like (leftmost, parallel) innermost or outer-
most, namely in the following sense. Applying some rule l ! r#
R
2 R# (for some l ! r 2 R)
to a term t = C[l]
p
means to apply l ! r to t=p yielding t
0
= C[r]
p
followed by some
derivation below p where the pattern of r, i.e., r is normalized. If t=p = l is outermost
in t, then a redex which is outermost in r (let's say at position q) need not correspond to
an outermost redex in t
0
= C[r]
p
because some new outermost redex in t
0
above pq may
have been created, via the surrounding context C[:] or via instantiation with . Similarly,
if t=p = l is innermost in t, then a redex which is innermost in r (let's say at position
q) need not correspond to an innermost redex in t
0
= C[r]
p
because some new innermost
redex in t
0
(strictly) below pq may have been created by instantiation. Hence, in general it
seems dicult to predict the eect of right-normalization of some semi-complete TRS on a
previously existing normalizing reduction strategy (for the original system).
We have isolated two conditions under which the right-normalized version of a semi-
complete TRS is again semi-complete (and has the same equational theory). Furthermore we
have shown that in general both weak termination and (local) conuence may be lost under
right-normalizing semi-complete TRSs. However, in the counterexample presented at least
the equational theory is preserved as is easily veried. In fact, we did not succeed in nding
a counterexample for question (2), i.e., a semi-complete TRS for which right-normalization
6
We say that a strategy !
s
(i.e., satisfying !
s
!

) whose normal forms are also !-normal forms is
hyper normalizing if every term that is weakly terminating under! terminates under!

 !
s
 !

.
RR n3327
10 Bernhard Gramlich
does not preserve the equational theory. Let us only mention that any (potentially existing)
counterexample R would have to satisfy the following property: There exists a right-hand
side r in R which is
(a) weakly R-terminating (since R is semi-complete),
(b) not R-terminating,
(c) not weakly R#-terminating, and such that
(d) r 6$

R#
r#
R
.
By denition of R# we have $

R#
 $

R
. Hence, if $

R#
6= $

R
then there exists some
rule l ! r 2 R with (d) r 6$

R#
r#
R
(otherwise, for any l ! r 2 R we would have l !
R#
r#
R
$

R#
r, hence l $

R#
r, and consequently $

R#
= $

R
). Moreover, (b) holds, because
otherwise r would be R#-terminating, hence r !

R
r#
R
, r !

R#
r#
R#
and r#
R
= r#
R#
(by
conuence of R), and thus r $

R#
r#
R
which contradicts (d). Finally, (c) holds, because
otherwise there would exist some R#- (and R-) irreducible r^ with r !

R#
r^, r !

R
r#
R
and
r^ = r#
R
(by !
R#
 !

R
and conuence of R), hence r $

R#
r#
R
again contradicting (d).
To conclude, we present a simple counterexample to question (3) of the introduction,
i.e., a semi-complete, right-normalized TRS where deletion of left-reducible rules destroys
both semi-completeness as well as the equational theory. Consider the TRS
R =
8
<
:
g(a)! f(a)
h(f(x))! h(g(x))
h(g(a))! b
9
=
;
which is easily shown to be semi-complete and which is obviously right-normalized. The
only rule with a reducible left-hand side is the last one, hence we obtain
R#
ext
=

g(a)! f(a)
h(f(x))! h(g(x))

which is neither weakly terminating (for instance, h(f(a)) has no normal form) nor does it
satisfy $

R#
ext
=$

R
(for instance, h(g(a))!
R
b but h(g(a)) 6$

R#
ext
b).
Acknowledgements: I would like to thank Stefan Kahrs, Friedrich Otto and Michael
Rusinowitch for useful hints and comments on a draft version of this paper.
References
[BO93] Ronald V. Book and Friedrich Otto. String Rewriting Systems. Texts and Mono-
graphs in Computer Science. Springer-Verlag, August 1993.
[DJ90] Nachum Dershowitz and Jean-Pierre Jouannaud. Rewrite systems. In J. van
Leeuwen, editor, Formal models and semantics, Handbook of Theoretical Computer
Science, volume B, chapter 6, pages 243{320. Elsevier, 1990.
INRIA
On Semi-Completeness of Term Rewriting Systems 11
[Hue80] Gerard Huet. Conuent reductions: Abstract properties and applications to term
rewriting systems. Journal of the ACM, 27(4):797{821, October 1980.
[Kah95] Stefan Kahrs. Rewriting-list contribution 388: Semi-completeness
and reduced TRSs. ftp://ftp.loria.fr/pub/loria/eureca/rewriting.list
/388 Semi completeness and reduced TRS.gz, May 18, 1995.
[KB70] Donald E. Knuth and P.B. Bendix. Simple word problems in universal algebra. In
J. Leech, editor, Computational Problems in Abstract Algebra, pages 263{297. Per-
gamon Press, Oxford, U. K., 1970. Reprinted 1983 in \Automation of Reasoning
2", Springer, Berlin, pp. 342{376.
[Klo92] Jan Willem Klop. Term rewriting systems. In S. Abramsky, D. Gabbay, and
T. Maibaum, editors, Handbook of Logic in Computer Science, volume 2, chapter 1,
pages 2{117. Clarendon Press, Oxford, 1992.
[Met83] Yves Metivier. About the rewriting systems produced by the Knuth-Bendix com-
pletion algorithm. Information Processing Letters, 16(1):31{34, January 1983.
[Mid97a] Aart Middeldorp. Call by need computations to root-stable form. In Proc. 24th
ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages,
pages 94{105, Paris, 1997.
[Mid97b] Aart Middeldorp. Personal e-mail communication, March 1997.
[O'D77] Michael J. O'Donnell. Computing in Systems Described by Equations, volume 58
of Lecture Notes in Computer Science. Springer-Verlag, 1977.
[OR94] Vincent van Oostrom and Femke van Raamsdonk. Weak orthogonality implies
conuence: The higher-order case. In A. Nerode and Y.V. Matiyasevich, editors,
Proc. 3rd Int. Symp. on Logical Foundations of Computer Science, volume 813 of
Lecture Notes in Computer Science, pages 379{392, St. Petersburg, Russia, July
1994. Springer-Verlag.
[Raa96] Femke van Raamsdonk. Conuence and Normalization for Higher-Order Rewri-
ting. PhD thesis, Vrije Universiteit Amsterdam, 1996.
[SR93] R. C. Sekar and I. V. Ramakrishnan. Programming in equational logic: Beyond
strong sequentiality. Information and Computation, 104(1):78{109, 1993.
RR n3327
UniteÂ´ de recherche INRIA Lorraine, TechnopoË†le de Nancy-Brabois, Campus scientifique,
615 rue du Jardin Botanique, BP 101, 54600 VILLERS L `ES NANCY
UniteÂ´ de recherche INRIA Rennes, Irisa, Campus universitaire de Beaulieu, 35042 RENNES Cedex
UniteÂ´ de recherche INRIA RhoË†ne-Alpes, 655, avenue de lâ€™Europe, 38330 MONTBONNOT ST MARTIN
UniteÂ´ de recherche INRIA Rocquencourt, Domaine de Voluceau, Rocquencourt, BP 105, 78153 LE CHESNAY Cedex
UniteÂ´ de recherche INRIA Sophia-Antipolis, 2004 route des Lucioles, BP 93, 06902 SOPHIA-ANTIPOLIS Cedex
Â´Editeur
INRIA, Domaine de Voluceau, Rocquencourt, BP 105, 78153 LE CHESNAY Cedex (France)
ISSN 0249-6399
