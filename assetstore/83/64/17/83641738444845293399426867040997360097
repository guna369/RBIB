ELSEVIER

Discrete Applied Mathematics 7 1 ( 1996) 137~15I

DISCRETE APPLIED MATHEMATICS

Polynomial-time algorithm for computing translocation distance between genomes
Sridhar Hannenhalli *

Received 24 May 1995; revised 1 May 1996; accepted 20 May 1996

Abstract

-

-

With the advent of large-scale DNA physical mapping and sequencing, studies of genome rearrangements are becoming increasingly important in evolutionary molecular biology. From a computational perspective, the study of evolution based on rearrangements leads to a rearrunyrment distunce problem, i.e., computing the minimum number of rearrangement events required to transform one genome into another. Different types of rearrangement events give rise to a spectrum of interesting combinatorial problems. The complexity of most of these problems is unknown. Multichromosomal genomes frequently evolve by a rearrangement event called translocation which exchanges genetic material between different chromosomes. In this paper we study the translocation distance problem, modeling the evolution of gcnomes evolving by translocations. The translocation distance problem was recently studied for the first time by Kececioglu and Ravi, who gave a 2-approximation algorithm for computing translocation distance. In this paper we prove a duality theorem leading to a polynomial time algorithm for computing translocation distance for the case when the orientations of the genes are known. This leads to an algorithm generating a most parsimonious (shortest) scenario, transforming one genome into another by translocations.

1. Introduction
The first computational attempt to analyze genome rearrangements in mamalian genomes was undertaken by Nadeau and Taylor in 1984 who estimated that just 178 f 39 rearrangement events happened since the separation of lineages leading to human and mice 80 million years ago. This estimate was recently validated by Copeland et al. [4] based on a man-mouse genetic linkage map of much higher resolution compared to the one available 10 years ago. The most common rearrangement events in
* E-mail: hannenhn@hto.psu.edu. This work is supported by NSF Young Investigator Award, NIH grant IROI HG00987 and DOE grant
DE-FG02-94ER6 1919.
0166-2 18X/96/$I5.00 0 1996 Elsevier Science B.V. All rights resewed
SSJIJ Olhh-21Xx(96)00061-3

138 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

x /j
Y

Prefix-prefix translocation
X1 D x2 1
Prefix-suffix translocation

Fig. 1. Examples of translocations. Notice the change in the directions of chromosomal segments, Yl and Y,, after prefix-suffix translocation.
mammalian evolution are translocations, which exchange genetic material between different chromosomes, and reversals, which rearrange genetic material within a chromosome.
A computational approach to evolutionary studies based on rearrangements was pioneered by Sankoff (see [ 12- 141). The study of genomes evolving by rearrangements involves a combinatorial problem of computing the minimum number of rearrangement events transforming one genome into other and finding a shortest (most parsimonious) sequence of rearrangement events transforming one genome into other.
Although translocation is a complicated biological process (see [ 11, 151 for the underlying biology), the following abstraction is adequate for our purpose. A chromosome can be represented as a sequence of genes, where each gene is represented by an integer. A translocation is said to act on chromosomes X and Y when the chromosomes are cleavaged as (X1,X2) and (Yt, Yz), respectively, and the segments of the chromosomes are swapped, thus transforming chromosomes X and Y into two new chromosomes. We study the most common type of translocation, viz., reciprocal translocation where each of the four segments, X1,X2, Yt and Y2, is non-empty. A translocation is a prejixprejix translocation if the prefix of one chromosome is swapped with the prefix of the other chromosome, and a translocation is a prejix-sujix translocation if the prefix of one chromosome is swapped with the suffix of the other chromosome (Fig. 1).
For our purposes, a genome is a set of chromosomes. A translocation on a pair of chromosomes of genome A transforms genome A into another genome. Given two genomes, A and B, the translocation distance between A and B, d(A,B), is the minimum number of translocations required to transform A into B. We refer to any sequence of translocations transforming A into B as evolution of A into B.
Under most of the rearrangement events, the complexity of the rearrangement distance problem is still unknown. The importance of these problems has motivated researchers to develop approximation algorithms for rearrangement distance problems for various types of rearrangements. The first steps towards a combinatorial theory of genome rearrangements have been taken very recently. Kececioglu and Sankoff [9, lo] and Bafna and Pevzner [l] gave approximation algorithms for computing the rearrangement distance for genomes evolving by reversals. (The problem is known as

S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-1.51

139

“sorting signed permutation by reversals”.) Recently, Hannehalli and Pevzner [6, 71 showed that the problem of sorting signed permutations by reversals is in P by proving a duality theorem that gives an efficiently computable characterization of reversal distance. Recently, Kececioglu and Ravi [8] gave a 2-approximation algorithm for the rearrangement distance problem for genomes evolving by translocations and a 1.5approximation algorithm for the rearrangement distance problem for genomes evolving by both translocations and reversals. See Bafna and Pevzner [2] and Hamrenehalli et al. [5] for applications of genome rearrangement algorithms to analyze the evolution of plant organelles, mammalian X chromosomes and herpes viruses. Also, see Bafna and Pevzner [3] for a computational study of genomes evolving by another type of rearrangement event called transposition.
In this paper we prove a duality theorem characterizing the translocation distance for signed data. This leads to a polynomial algorithm which computes the shortest sequence of translocations transforming one genome into another. We restrict our discussion to the case when both prejix-prefix and prefix-@ix reciprocal translocations are allowed. The case when only prefix-prefix translocations are allowed is amenable to similar analysis and will not be discussed in this paper.
All chromosomes contain a centromere which is important for cell division. A translocation is viable if both the resulting chromosomes contain a centromere. This restricts the translocations in the course of evolution. Including centromeres in our model does not present additional difficulty. For simplicity we omit centromeres from our model.
In the following section we present the combinatorial formulation of the problem. In Section 3 we prove a lower bound on the translocation distance. In Section 4 we prove a duality theorem leading to a polynomial algorithm for computing translocation distance. In Section 5 we present an algorithm generating a most parsimonious (shortest) scenario of evolution, transforming one genome into other. And, finally, in Section 6 we briefly discuss the case of unsigned data.

2. Combinatorial formulation

For the purpose of the following discussion, a gene will be represented by a signed

integer, where the sign models the direction of the gene, a chromosome is a se-

quence of genes and a genome is a set of chromosomes. We assume that the given

genomes A =

((al,al2,...,

am, 1, (021, a22,. . . , ~2~~ 1,. . . , (~1, aN2,. . . , aNm,V 1) and

B = ((b11, h2,. . . , h,, >, (b21, b22,. . . , b2,,> 1,. . , (bN1, bN2,. . . , bNnv I>, contain the same
set of genes and that every gene appears in each genome exactly once. For an arbi-
trary sequence S = si,s2,. ,sk of genes, we will denote the reverse ordering of S by -S. i.e., -s = --Sk, -Sk-l,. . . , -sl. A chromosome Y is said to be identical to a chromosome X = (xi, x2, . . ,Xk) iff either Y = X or Y = -X. Genomes A and B are said to be identical (A = B) iff the sets of chromosomes corresponding to A and B are

the same.

140 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

As a convention we illustrate a chromosome horizontally and read it from left

to right. Since we do not distinguish a chromosome from its reverse ordering, any

prefix-suffix translocation acting on X and Y can be visualized as a prefix-prefix

translocation acting on X and -Y. For a pair of chromosomes X = (x1,x2,. . .,x,)

and Y = (YI,Y~,..., y,) denote translocation acting on X and Y as p(X, Y,i,j), 1 < i 6 m, 1 < j < n, where the cleavage occurs in X between Xi-1 and x; and in Y be-

tween yj-i and yj. A prefix-prefix translocation pPP(X, Y,i,j) results into chromosomes:

(XI~..~,Xi-I,Yj,...,

Yn) and (Yl,...,Yj-I,xi,...,

x,). A prefix-suffix translocation pPs

(X, Y,i,j) results into chromosomes: (xi, . . ,x;- I, -yj- 1, . , - ~1 ) and (-x,, ...,-xi,

yJ,...>y,). For a genome A and a translocation p acting on a pair of chromosomes of A, we denote the resulting genome as A . p. If p is a reciprocal translocation then

the number of chromosomes in A and A . p is the same. Moreover, the set of nodal

genes (first and the last gene of all the chromosomes) is the same for A and A p.

Figure 2a shows an example of evolution of A into target genome B. In the following

discussion we assume, w.l.o.g., that a target genome is fixed and refer to the translo-

cation distance between A and the target genome as translocation distance of A, thus,

d(A) = d(A,B). Also, we refer to the problem of finding a shortest sequence of translo-

cations transforming A into the target genome as the problem of sorting A by trans-

locations.

In the following, we introduce cycle graph of a genome, which is the basis of

our analysis of translocation distance. In a chromosome X = (x1,x2,. . . ,&), replace

every positive integer +xi by ordered pair (xf,$) of vertices (t stands for tail and

h stands for head) and replace every negative integer --xi by ordered pair (x:,x:) of

vertices (Fig 2b). We say that vertices u and u are neighbors in X if they are adjacent

in the ordered list constructed in afore mentioned manner. Notice that u and v are

neighbors in X iff u and v are neighbors in -X. We say that vertices u and v are

neighbors in a genome if they are neighbors in some chromosome in this genome.

For gene x, vertices xf and xh are always neighbors and for simplicity, we exclude

them from the definition of “neighbors” in the following discussion. We construct

the bicolored cycle graph GA = GAB(V,E) of a genome A (with respect to a fixed

target genome B) as follows. The vertex set V contains the pair of vertices x’ and xh

for every gene x in A, i.e., V = {u . u is either x’ or xh,x is a gene in A}. The edges

of GA are colored either gray or black. Vertices u and u are connected by a black

(solid) edge iff they are neighbors in A. Vertices u and t’ are connected by a gray

(dotted) edge iff they are neighbors in the target genome (Fig. (2b)). Notice that xt

and xh are not connected for any x and a pair of vertices which are neighbors in both

the genomes are connected by both, a black and a gray edge. See [l, 6, 81 for similar

constructions.

The number of black (equivalently, gray) edges in GA is n-N where n is the number

of genes in A and N is the number of chromosomes. Clearly, each vertex is adjacent

to exactly one black edge and one gray edge. Hence the graph can be uniquely decom-

posed into a number of disjoint cycles. We denote the number of cycles in GA as CA.

Clearly, the number of cycles is maximized when A is identical to the target genome.

S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

141

x: 139
A Y: 78456
/
\1pmKZ.2,3)
X: 111 12 13
Y: 18456 Z: 10239

. ;e

: _“. ‘:,, &

7t : 7h 8t :. 8h 4t

0

‘. &..&

,_..

....

.,......

lot 10h 2t 2Et

& 4h 5t
.....
I?k--%

:... S’h
_.-..
l?ht

$ 1:h

0 .-.. It : lh

...‘. a---m
IIt’\ Ilh 12t

.....
-
12h 13t

0 13h

@i&j_

&&

7t :‘,,.7,h

: :8,~’

8h”..,.4t’,.,, 4h
,.-.,‘..__“,:,.

St
._,

Sh

6t

:

0&

wei*

IOt IOh 2t 2h 3t 3h 9t 9h

X: 1239 Y: 78456 z: 10 11 12 13
pmKY,4.3)
/
X: 123456 B Y: 189
( Z:10111213

l r-‘llie)_,e

11 lh 2t
:...

2h
&.&

3t
../

:.,:3.h.’.:“9t
&.&

9h
fi

St Sh 61 k?

_.‘._
*H-s--
It Ih 2t

.‘.‘.
2h 31

:..,
3h 4t

_..._
4h St

:...
Sh 6t

:

:... ....~ : 7--h St 8h 9t k!

. . .._ 1% l%?t

:... Ifit

..-.. lfit

1:h

(a) (b)
Fig. 2. (a) An example of evolution by translocations, (b) cycle graph corresponding to genomes at every stage of evolution with respect to the fixed target genome B.

Lemma 1. CA= n -N ifSA is identical to the target genome.
For the sake of simplicity, we will refer to all the intermediate genomes in the course of evolution of A as A. Any such sequence of translocations will be re’flected as changes in the associated cycle graph until the graph is left with all cycles of length 2, i.e., CA= n -N (Fig. (2b)).
Let p za p(X, Y,i,j) be a translocation acting on chromosomes X = (x1,x2,. . . ,x,) and Y = (yl, ~2,. . . , yn). Let .f E {_x_,,x~_,} and g E {x:,xh} such that f and g are

142 S Hannt=nhalli/Discrete Applied Mathematics II (1996) 137-151

--.
I I -.
I‘

\\
I

I,, (u~p_.p

:::
,’

‘. ‘.
--___I

,’

Y 1x
proper translocation >
v

*----
,’
:

.\ \
,:
Y

Y

VI
Y1

1x
04
[u

c--
’\ ‘\.
:: I,. I’ Y

Y I x7 improper translocation > V

:‘.a

;v ‘. \,

:._.’ ’

V Y

1u

,........-.---.,.

‘_
-._. . ..___......‘-

‘. __I-

v/

bad translocation >

,:--.._...._
1 x Yyz-(;”
...‘--.._

‘.
I,.*

v]

1 u y .:‘Y

‘....A..-

,:

Fig. 3. Prefix-prefix translocations cutting black edges (U u) and (x y) affect the cycle graph CA. (a) For a proper translocation A(c,) = 1. (b) For an improper translocation A(c,) = 0. (c) For a bad translocation LL(c,+f=) -1.

neighbors in X. Let u E {y$_,, yT_ , } and u E { yj, u,”} such that u and u are neighbors in Y. We say that p cuts black edges (f g) and (u u).
A prefix-prefix translocation cutting black edges (U V) and (f g) (read from the left to the right) is proper if there is a cycle (U u _. . f g . . . u) in GA_ In Fig. 2, the translocation pPP(X,Z,2,3) is proper since the black edges (2h 11’) and (I* 3’) cut by this translocation belong to the cycle (zh 11’ 10h 2’ 1’ 3’ 2h >_ A prefix-suffix translocation cutting black edges (u u) and (f g) (read from the left to the right) is proper if there is a cycle (U zi.. . g f . . . u) in GA. Notice that for every pair of black edges on different chromosomes but belonging to the same cycle in the cycle graph, there is proper translocation (prefix-prefix or prefix-suffix) cutting the two black edges. We call a translocation improper, if it cuts black edges belonging to the same cycle but is not proper. We call a translocation bad if it cuts black edges belonging to different cycles (Fig. 3).
In the following we study the effect of a translocation on the structure of the cycle graph and describe the parameters that play a key role in determining the translocation distance.

S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

143

3. Lower bound on translocation distance

Let $A be a parameter $ associated with genome A (or GA). For a translocation p on A we denote the increase in $ as A($), i.e., A($) -_ h.P - ij&.

Lemma 2. For a translocation p. A(c, ) = 1 ifs p is proper, A(c, ) = 0 $7 p is improper and A(c, ) = - 1 ifs p is bad (Fig. 3).

Lemmas 1 and 2 imply

Theorem 3. For an arbitrary genome A, d(A) > n - N - CA.

As it turns out, there are additional parameters associated with a genome which are important in computing the translocation distance. In particular, if a set of genes occur close together within a chromosome in both the genomes but not in the same order, then reordering them necessitates a translocation that decreases the number of cycles. This leads to the notion of a subpermutation described in the following. Define segment as an interval I = X,,, .x,+I,. . . ,Xj within a chromosome X = x1,x2,. . .,x, in A. Let VI be the set of vertices induced by the genes in I, i.e., V, = {u : u is either xi or xi, i < k 6 j}. We refer to the left vertex corresponding to X, and the right vertex corresponding to xj as LEFT(I) and RIGHT(I), respectively. In Fig. 4, for the interval I = 2,4,3,5, LEFT(Z) = 2’ and RIGHT(I) = 5h. Define IN(I) = V[\{LEFT(Z) U RIGHT(Z)}. An edge (u v) E GA is said to be inside the interval I if u,v E IN(Z). A subpermutation (SP) is an interval Of genes Xi,Xi+l,...,Xj within a chromosome X in genome A such that there exists a segment xi, permutation(xi+i , . . ,xj_ 1),xj within some chromosome Y of target genome B and permutation(xi+l, . . . ,Xi- 1) # xi+ 1, ,xi_ 1. Equivalently, SP is an interval I within some chromosome of A such that (i) there exists no edge (U v) such that u E IN(Z) and v +JIN(I) and (ii) there is at least one long cycle (of size > 2) involving edges inside I. A minimal subpermutation (minSP) is a SP not containing any other SP. The size of a SP is the number of genes in the SP. In Fig. 4 the interval (2 4 3 5) is a minSP of size 4 contained inside the SP (1 2 4 3 5 6) of size 6.
Notice that for an arbitrary partition of a SP into a non-empty prefix segment L and a non-empty suffix segment R, there must be a gray edge (u v) such that u E V,, v E V, (the cycle containing the black edge (RIGHT(L) LEFT(R)) must contain such a gray edge). We refer to such an edge as a connecting gray edge from L to R.
A translocation cuts a segment S iff it cuts a black edge inside S. A translocation p destroys a SP S in A if S is not a SP in A . p. What makes SPs interesting is that in order to destroy a SP we must do a bad translocation since there is atleast one long cycle in a SP and any translocation cutting a black edge inside a SP must cut a black edge belonging to a different cycle. minSPs are specially interesting in this respect since destroying a minSP S destroys all the SPs containing S. We can destroy at most 2 minSPs on different chromosomes in a single bad translocation by choosing

144 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

A 11

1,___.._,-_-_&._;i._:~:_.:_y~____________i+______1_________

;t lh it 2h 4t 4h 3t 3h 5t ?$I ‘__-__________~~sp_______________’
____________________..-.--SP--------------------------I
l ..‘.. r.,1.‘“‘.1
7t 7h 8t 8h 9t 9h

6t

4

Fig. 4. Examples of subpermutations.
a translocation cutting both the minSPs. In the process any SP containing either of the minSPs is also destroyed. However a pair of minSPs on the same chromosome cannot be destroyed simultaneously in a single bad translocation. Whenever we destroy any minSP (1 or 2), the translocation must cut black edges from two different cycles and hence A(c,) = - 1. If sA is the number of minSPs in A then
Lemma 4. For any translocation A(c, - SA) < 1.
This leads to a slightly improved lower bound, d(A) > n - N - cA+ sA, since sA = 0 if A is identical to the target genome. In the following we show that this bound is very tight by proving that d(A) < n - N - cA $ sA + 2. The bound, d(A) > IZ-N - cA $ sA, assumes destroying two minSPs in a single translocation since if we destroy exactly one minSP in a translocation then A(CA - sA) = 0. Sometimes it may be impossible to destroy two minSPs in a single bad translocation and, thus, unavoidable to make a translocation with A(CA - SA) < 0. If the number of minSPs is odd then we cannot avoid such a translocation. Let 0.4 = 1 if the number of minSPs is odd and 0.4 = 0 otherwise. Clearly, A(CA - SA) = 1 implies that A(oA) = 0. One could verify that
Lemma 5. For any trundocution A(CA - SA - OA) 6 1.
Genome A has an even-isolation if (i) all the minSPs of A reside on a single chromosome, (ii) sA is even and
(iii) all the minSPs are contained within a single SP. Notice that if A has an even-isolation, we must perform a translocation with A(CA s,,j - oA ) d - 1. Consider the first translocation p destroying the even-isolation. If A(s,) > 0 (p creates one or two new minSPs) then A(SA + OA) = 2, hence A(CA sA - oA ) < - 1. One could verify that if a translocation p destroys a minSP then there cannot be a new minSP in A . p. Moreover, due to property (iii) in the definition of an

S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137- 151

145

even-isolation there cannot be a proper translocation distributing the minSPs over two chromosomes. Hence, if A(s,) = 0 then p must be a bad translocation distributing the existing minSPs over two chromosomes, thus destroying even-isolation. In this case A(s,) = A(o,) = 0, hence A(CA - sA - 0~) = -1. If A(s,) = -1 (p destroys one minSP) then p must be a bad translocation. In this case A(cA ) = - 1, A(o, ) = 1, hence A(CA - SA - OA) = -1.
Let iA = 1 if A has an even-isolation and in = 0 otherwise. One could verify that
Lemma 6. For any translocation A(c, - sA - oA - 2 . iA) 6 1.

Notice that oA = iA = 0 if A is identical to the target genome. This gives us an improved lower bound.

Theorem 7. For an arbitrary genome A, d(A) > n - N - CA+ sA + oA + 2 . iA.

4. Duality theorem for translocation distance
We call a translocation vulid if A(c, - SA - 0.4 - 2 . iA) = 1. In this section we prove the existence of a valid translocation for arbitrary genome A, implying that d(A) = n - N - CA + sA + oA + 2 . iA. We say that a proper translocation p acts on the gray edge (U v) if it cuts the black edges incident on u and v. In the following, we consider only the proper translocations acting on gray edges. Denote an arbitrary non-empty prefix (suffix) of a segment S by pref(S) (suff(S)). Denote a segment formed by concatenating segments L and R (in that order) as [L R].
Lemma 8. For an arbitrary purtition of a minSP S into prefix segment L and sujix segment R, there exists a gray edge connecting L to R dtrerent from (RIGHT(L) LEFT(R)).
Proof. If (RIGHT(L) LEFT(R)) is the only gray edge connecting L to R, then L (and/or R) will qualify for a SP or S did not have any long cycle inside it, implying that S was not a minSP, a contradiction. 0
Lemma 9. For an arbitrary purtition of a minSP S into prefix segment L, middle segment M and su$ix R where all three of the segments are non-empty, there must be a gray edge g such that g either connects L to M or g connects M to R.
Proof. Since A4 does not contain nodal elements, there must be a vertex u E VM which is a neighbor of some vertex u $ VM in genome B. Clearly, u E V, U V,. 0
Theorem 10. Lf there exists a proper translocation in A then there exists a proper translocation o in A such that A o does not have any new minSP.

146 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151
Proof. Assume that every proper translocation leads to the creation of a new minSP. Let p be the prefix-prefix (w.1.o.g.) translocation creating a smallest such minSP. Notice that p could create at most two new minSPs. Let [L R] be the (smallest) new minSP in the genome A . p where segments L and R belong to different chromosomes in genome A (Fig. (5a)). Our goal is to find an alternative proper translocation in A cutting L and R which either does not create a new minSP or creates a smaller one. Since (RIGHT(L) LEFT(R)) is a gray edge, by Lemma 8, there must be a gray edge (I r) in A . p (hence in A) such that 1 E IN(L), r E IN(R). A proper translocation rr (acting on (1 r)) cuts L and R. Assume that the translocation r~ breaks up L into non-empty segments L1 and L2 and breaks up R into non-empty segments RI and R2 (Fig. 5(b) and (c)).
Case 1: (T is a prejx-prejx translocation (Fig. (5b)). We will now argue that the resulting genome A . a either does not have any new minSP or has a smaller one. We need to concentrate only on the subgraph induced by the pair of chromosomes involved in the translocation since the rest of the graph remains unchanged. Clearly, any new minSP must involve parts of either L or R. A new minSP in A . a cannot be
(i) [suff(P) [Ll R2] pref( V)] since there must be a gray edge (U U) such that
u E v[~l R2], u E V[Rl L2] (Lemma 9). (ii) [suff(U) [Rl L2] pref(Q)] (similar to (i)).
(iii) [snff(P) pref([Ll RWI, since, by Lemma 8, there must be a connecting gray edge between suff(P) and pref([Ll R2]) different from (RIGHT(P) LEFT([Ll R2])) in A . a (and hence in A p), implying that [L R] is not a minSP in A . p, a contradiction.
(iv) [suff([Ll R2]) pref(V)] (similar to (iii)). (v) [suff( U) pref( [Rl L2])] (similar to (iii)). (vi) [suff([Rl L2]) pref(Q)] (similar to (iii)). So any minSP involving parts of either L or R must be within [Ll R2] or [Rl L2], hence smaller than [L R], a contradiction. Case 2: a is a prejx - sufJix translocation (Fig. (5~)). Arguments for this case are very similar to the previous case. Notice that there is a gray edge between LEFT(-L2) (RLGHT(L2)) and RIGHT(-Rl) (LEFT(R1)) (p acts on this edge in A). This prevents the creation of a new minSP [suff(P) [Ll -RI] pref( -U)] or [suff( -Q) [-L2 R2] pref( V)] in A . a. There cannot be any new minSP in A . a involving parts of either L or R by the same arguments as for the previous case. Hence we conclude that any minSP involving parts of either L or R is within [Ll - Rl] or [-L2 R2], hence smaller that [L R], a contradiction to the assumption that p created the smallest minSP. 0
Let St and S2 be two minSPs within chromosome X of A such that St is to the left of S2. A gray edge (u u) separates S1 and S2 if the vertex v belongs to a chromosome different from X and the vertex u is in between the vertices RIGHT(S1) and LEFT(&) on X, i.e., u is to the right of RIGHT(S1) and to the left of LEFT(&) in the ordered

S. HannenhalliIDiscrete Applied Mathematics 71 (1996) 137-151

147

,---,
,’

-.
‘\

u I *:’ R
:

V

\,>> p;i

I‘:

\\ *. -____.__________-I’ ,’

I64
P)

Cb) /I
prefix-prefix translocation
*,

..............j
:
: * connecting gray :

_-------
,’
,I
Iu

-.
‘\ ‘. ‘. ‘\
Rl r ‘\ : :

R

:

.:

I! P Ll :

-,L2

‘\..-__

---______--

: _-_I’

(Cl /-6/-L21R21V]

V prefix-suffix translocation

:
:’ connecting gray edge j .*’

rTpj--+] Q

Fig. 5. (a) Proper prefix-prefix translocation p creates a new minSP. (b),(c) Finding an alternate proper translocation not creating any new minSP.

list of vertices induced by genes of X. A translocation, acting on (u u), separates S1 and S2 if (u v) separates SI and S2.

Theorem 11. If there is a gray edge separating minSPs S1 and S, in genome A, then there exists a valid translocation CTseparating S1 and &.

Proof. By Theorem 10, if a translocation p acting on gray edge (u u) creates a minSP [L R] (proof of Theorem lo), there exists an alternative proper translocation CTconnecting L to R which does not create a minSP (following the arguments in the proof of Theorem 10). Notice that if p separates minSPs S1 and S2 then 0 separates 5’1 and

148 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

S,, implying that A . CTdoes not have an even-isolation. Hence Q is a proper valid translocation separating Si and &. 0

Theorem 12. If there exists a proper translocation in A then there exists a valid translocation in A.

Proof. Notice that any proper translocation cannot destroy any of the existing minSPs. If there exists a proper translocation separating two minSPs , by theorem 11, there exists a proper valid translocation. On the other hand if there is no gray edge separating two minSPs then, by theorem 10, there is a proper translocation not creating any new minSP. Any such proper translocation p cannot create an even-isolation, since an even-isolation in A p implies an even-isolation in A. Hence p is valid. 0

Theorem 13. For every genome there exists a valid translocation.

Proof. If there is a proper translocation in A then, by Theorem 12, there exists a valid

translocation in A. Assume that there is no proper translocation in A. Clearly, in this

situation, there is no gray edge going across two different chromosomes and hence

GA is a collection of SPs distributed over the chromosomes. Let v be the number of

chromosomes containing at least one minSP.

Case 1: v = 1. If sA = 1 then we can destroy the only minSP by choosing a

translocation cutting the minSP and an arbitrary black edge in some other chromosome. In this case A(c, - SA- oA - 2. iA) = (-1 - (-1) - (-1) - 0) = 1.

If sA > 1 then choose a translocation p that destroys the minSP second from the

left using the same technique. Notice that, either two chromosomes in A . p contain

atleast one mi&P or sA.p = 1. In either case A p does not have even-isolation.

If sA is odd, then A(CA -SA -0~ -2’iA) = (-l-(-1)-(-1)-0) (A has even-isolation), then A(c, -SA -oA--~.~A) = (-1 -(-l)-

= 1. If sA is even

1 -2.(-l))

= 1.

Case 2: v = 2. If sA = 2 then choose a translocation p that destroys both of the

minSPs. If sA > 2 then choose a translocation p that destroys the leftmost minSP

within one chromosome and the second minSP within the other chromosome. Since A . p cannot have even-isolation, A(c, - SA- OA- 2 . iA) = (-1 - (-2) - 0 - 0) = 1.

Case 3: v = 3. If sA = 3 then choose a translocation p that destroys any two

minSPs. If sA > 3 then choose a translocation p acting on chromosomes X and Y

where X has atleast two minSPs within it. Since A . p cannot have even-isolation, A(cA-sA-oA-~.~A)=(-~-(-~)-O-O)=~.

Case 4: v 2 4. In this case every translocation p, destroying two minSPs, is valid.

0

Theorems 10, 12 and 13 imply the following duality theorem providing a characterization of translocation distance.

S. Hannenhaliil Discrete Applied Mathematics 71 (1996) 137-151

Theorem 14. For an arbitrary genome A, d(A) = n-N-c,4+s,4+oA+2.iA,

d(A) =

n - N - CA+ sA + 2 if’ A has an even-isolation,

n - N - CA+ sA + 1 if’ A has an odd number oj’minSPs,

n-N-CA+S,q

otherwise.

149
i.e.,

5. Algorithm for sorting by translocations

Theorems 12 and 13 motivate the algorithm Trunslocation_Sort generating a shortest sequence of translocations transforming genome A into the target genome.

Algorithm Translocation_Sort(A) 1. while A is not identical to the target genome 2. if there is a proper translocation in A 3. select a valid proper translocation p (Theorem 4. else select a valid bad translocation p (Theorem 13) 5. A+A.p 6. endwhile

12)

The cycle graph GA can be constructed in O(n) time where n is the number of genes in A. A data structure to maintain the list of gray edges leading to proper translocations and the list of minSPs can be initialized in 0(n3). Clearly, there are at most O(n) iterations. Step 3 may require searching among at most O(n) proper translocations since every alternative choice of a proper translocation reduces the size of the new minSP created (proof of Theorem 10). Checking the validity of any such translocation takes O(n) time. In the absence of any proper translocation Theorem 13 suggests a way to find a valid bad translocation in constant time. Performing the valid translocation in step 5 involves updating the data structures which can be done in at most 0(n2) time. Therefore the overall running time of Translocation_Sort is 0(n3).

6. The case of unsigned data
Physical maps usually do not provide information about directions of genes, thus leading to the problem of computing the rearrangement distance for unsigned data. We can construct the cycle graph for unsigned data by assuming arbitrary direction for each gene, constructing the cycle graph as described earlier and then collapsing the vertices x1 and xh for every gene x. Notice that the resulting graph has an equal number of black and gray edges incident on every vertex, hence the graph can be decomposed into alternating cycles (cycles whose edges alternate colors). Any such decomposition can be viewed as assigning a direction to every gene. W.l.o.g., all genes in the target genome B have positive orientation. An assignment of directions to the genes in the

150 S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151
source genome A dictated by the decomposition of the cycle graph is defined as a spin of A. Let 2 be the set of all spins of A. It is not hard to show that
d(A) = mind(i). XCK
Refer to Hannenhalli and Pevzner [7] for similar arguments. Hence the problem of computing the translocation distance for unsigned data is equivalent to the problem of computing an optimal spin of A, i.e., a spin that minimizes the translocation distance. This equivalent characterization could be used to approximate the translocation distance for unsigned data. It can be shown that any decomposition of the cycle graph that attempts to maximize the number of cycles leads to an approximation of the translocation distance. At this point, the existence of a polynomial algorithm to compute the translocation distance for unsigned data remains an open problem when both prefix-prefix and prefix-suffix reciprocal translocations are allowed.

Acknowledgments
The author is very thankful to Pave1 Pevzner for many helpful suggestions, and for pointing out a few mistakes in the earlier versions of this paper. The author also wishes to thank the referees for their comments.

References

[II V. Bafna and P. Pevzner, Genome rearrangements and sorting by reversals, in: Proceedings of the 34th Annual IEEE Symposium on Foundations of Computer Science (1993) 148-157; SIAM J. Comput.,

to appear.

121 V. Bafna and P. Pevzner, Sorting by reversals: genome rearrangements in plant organelles and
evolutionary history of X chromosome, Mol. Biol. Evol 12 (1995) 239-246.

[31 V. Bafna and P. Pevzner, Sorting by transpositions, in: Proceedings of the 6th Annual ACM-SIAM
Symposium on Discrete Algorithms (1995)614-623.

[41 N.G. Copeland, N.A. Jenkins, D.J. Gilbert, J.T. Eppig, L.J. Maltals, J.C. Miller, W.F. Dietrich, A. Weaver, S.E. Lincoln, R.G. Steen, L.D. Steen, J.H. Nadeau and ES. Lander, A genetic linkage

map of the mouse: current applications and future prospects, Science 262 (1993) 57-65.

[51 S. Hannenhalli, C. Chappey, E. Koonin and P. Pevzner, Genome sequence comparison and scenarios for gene rearrangements: a test case, in: Genomics, Vol. 30 (1995) 299-311.

[61 S. Hannenhalli and P. Pevzner, Transforming cabbage into turnip (polynomial algorithm for sorting signed permutations by reversals), in: Proceedings of the 27th Annual ACM Symposium on the Theory

of Computing (1995) 178-189. [71 S. Hannenhalli and P. Pevzner, Transforming men into mice (polynomial algorithm
distance problem), in: Proceedings of the 36th Annual IEEE Symposium on Foundations

for genomic of Computer

Science (1995) 581-592.

PI J. Kececioglu and R. Ravi, Of mice and men: evolutionary distances between genomes under translocation, in: Proceedings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms

(1995) 604-613.

[91 J. Kececioglu and D. Sankoff, Exact and approximation algorithms for the inversion distance between two permutations, in: Combinatorial Pattern Matching, Proceedings of the 4th Annual Symposium

(CPM’93), Lecture Notes in Computer Science, Vol. 684 (Springer, Berlin, 1993) 87-105; extended

version has appeared in Algorithmica 13 (1995) 180-210.

S. Hannenhallil Discrete Applied Mathematics 71 (1996) 137-151

151

[lo] J. Kececioglu and D. Sankoff, Efficient bounds for oriented chromosome inversion distance, in: Combinatorial Pattern Matching, Proceedings of the 5th Annual Symposium (CPM’94), Lecture Notes in Computer Science, Vol. 807 (Springer, Berlin, 1994) 3077325.
[l I] B. Lewin, Genes V (Oxford Univ. Press, Oxford, 1994). [12] D. Sankoff, Edit distance for genome comparison based on non-local operations, in: Combinatorial
Pattern Matching, Proceedings of the 3rd Annual Symposium (CPM’92) Lecture Notes in Computer Science, Vol. 644 (Springer, Berlin, 1992) 121-135. [13] D. Sankoff, R. Cedergren and Y. Abel, Genomic divergence through gene rearrangement, in: Molecular Evolution: Computer Analysis of Protein and Nucleic Acid Sequences, Ch. 26 (Academic Press, New York, 1990) 428-438. [14] D. Sankoff, G. Leduc, N. Antoine, B. Paquin, B.F. Lang and R. Cedergren, Gene order comparisons for phylogenetic inference: evolution of the mitochondrial genome, Proc. Nat. Acad. Sci. USA 89 (1992) 6575-6579. [15] E. Therman and M. Susman, Human Chromosomes, Structure, Behavior, and Effects (Springer, Berlin, 1993).

