Postponement, Conservation and Preservation of
Strong Normalisation for Generalised Redution
Fairouz Kamareddine

Abstrat
Postponement of 
K
-ontrations and the onservation theorem do not hold for ordinary 
but have been established by de Groote for a mixture of  with another redution relation.
In this paper, de Groote's results are generalised for a single redution relation 
e
whih
generalises . We show morever, that 
e
has the Preservation of Strong Normalisation
property.
Keywords: Generalised -redution, Postponement of K-ontrations, Gener-
alised Conservation, Preservation of Strong Normalisation.
1 The -alulus with generalized redution
In the term ((
x
:
y
:N)P )Q, the abstration starting with 
x
and the argument P
form the redex (
x
:
y
:N)P . When this redex is ontrated, the abstration starting
with 
y
and Q will in turn form a redex. It is important to note that Q (or some
residual of Q) is the only argument that the abstration (or some residual of the
abstration) starting with 
y
an ever have. This fat has been exploited by many
researhers. Redution has been extended so that the impliit redex based on the
mathing 
y
and Q is given the same priority as the intervening redex.
An initial attempt to generalize the notion of redex might be to dene a rule like
the following:
(
x
:
y
:N)PQ! (
x
:N [y:=Q‚ÑÑ)P
It quikly beomes evident that this is not su√Üient as the following example shows:
Example 1 The proposed rule does not allow diretly reduing the binding of y to
Q in the term A  (
z
:(
x
:
y
:N)P )RQ.
We shall exploit the notion of a well balaned segment (sometimes known as a -
hain), whih is the speial ase of one-hole ontexts given by this grammar:
S ::= [‚ÑÑ j (S[
x
:[‚ÑÑ‚ÑÑ)M j S[S‚ÑÑ

Department of Computing and Eletrial Engineering, Heriot-Watt University, Riarton, Edin-
burgh EH14 4AS, Sotland, email: fairouzee.hw.a.uk, fax + 44 141 451 3327.
1
Using balaned segments, generalized redution is then given by this rule:
S[
x
:M ‚ÑÑN ! S[M [x:=N ‚ÑÑ‚ÑÑ
We nd the above denition of well-balaned segments and generalised redution
rather umbersome and believe that a more elegant denition an be given. In order
to do so, we hange from the lassial notation to the item notation. Instead of
writing 
x
:M , we write [x‚ÑÑM and instead ofMN we write (N)M .
1
Item notation has
many advantages as shown in [7, 8‚ÑÑ. Let us illustrate here with term A of Example 1,
whih we write in item notation as in Figure 1. We see immediately that the redexes
(Q) (R) [z‚ÑÑ (P ) [x‚ÑÑ [y‚ÑÑ
N
Figure 1: Redexes in item notation in term A
originate from the ouples (Q)[y‚ÑÑ, (R)[z‚ÑÑ and (P )[x‚ÑÑ. Moreover, (Q)(R)[z‚ÑÑ(P )[x‚ÑÑ[y‚ÑÑ
is a well-balaned segment. This natural mathing was not present in the lassial
notation. We all items of the form (P ) and [x‚ÑÑ, appliation and abstration items
respetively. With item notation, generalised redution is written as:
(M)s[x‚ÑÑN !
g
sfN [x :=M ‚ÑÑgfor s well-balaned:
(Here, f and g are used for grouping purposes so that no onfusion arises.) For
example:
(Q)(R)[z‚ÑÑ(P )[x‚ÑÑ[y‚ÑÑN !
g
(R)[z‚ÑÑ(P )[x‚ÑÑfN [y := Q‚ÑÑg
Surely this is learer than writing (
z
:(
x
:
y
:N)P )RQ!
g
(
z
:(
x
:N [y := Q‚ÑÑP )R.
2 An overview of generalised redution in the liter-
ature
Generalized redution was rst introdued by Nederpelt in 1973 to aid in proving the
strong normalization of AUTOMATH [19‚ÑÑ. Kamareddine and Nederpelt have shown
how generalised redution makes more redexes visible, allowing exibility in reduing
a term [7‚ÑÑ. Bloo, Kamareddine, and Nederpelt show that with generalised redution
one may indeed avoid size explosion without the ost of a longer redution path and
that simultaneously the -alulus an be elegantly extended with denitions whih
result in shorter type derivations [5‚ÑÑ. Generalised redution is strongly normalising [5‚ÑÑ
for all systems of the -ube [3‚ÑÑ.
An alternative approah to generalized redution whih has been followed by many
researhers is to use one of these two loal transformations:
() (
x
:N)PQ! (
x
:NQ)P
() (
x
:
y
:N)P ! 
y
:(
x
:N)P
1
Note that putting the argument before the funtion was rst introdued by de Bruijn in his
Automath projet [20‚ÑÑ and has been used by many researhers sine. For example, Krivine in [17‚ÑÑ
also puts the argument before the funtion.
2
These rules transform terms to make more redexes visible to the ordinary notion of
-redution. For example, both the  and  rules make sure that 
y
and Q in the term
A of Example 1 an form a redex before the redex based on 
x
and P is ontrated.
That is:
(
C
) (
x
:(
y
:N))PQ! (
x
:(
y
:N)Q)P
(
C
) (
x
:
y
:N)PQ! (
y
:(
x
:N)P )Q
Hene both  and  put 
y
next to its mathing argument. The  rule moves the
argument next to its mathing  whereas  moves the  next to its mathing argument.
Obviously,  and  are related to generalised redution. In fat,  and  trans-
form terms in order to make more potential redexes visible and then onventional
-redution an be used to ontrat those newly visible redexes. Generalised redu-
tion on the other hand, performs redution on the potential redexes without having
to bother to make them into lassial redexes. The following example illustrates:
Example 2 Take again the term A  (
z
:(
x
:
y
:N)P )RQ. With generalised redu-
tion we got: (
z
:(
x
:
y
:N)P )RQ !
g
(
z
:(
x
:N [y := Q‚ÑÑ)P )R. We illustrate how 
and  work:
 (
z
:(
x
:
y
:N)P )RQ!

(
z
:(
x
:
y
:N)PQ)R!

(
z
:(
x
:(
y
:N)Q)P )R!

(
z
:(
x
:N [y := Q‚ÑÑ)P )R
 (
z
:(
x
:
y
:N)P )RQ!

(
z
:
y
(
x
:N)P )RQ!

(
y
(
z
:(
x
:N)P )R)Q!

(
z
:(
x
:N [y := Q‚ÑÑ)P )R
Note that in item notation it is easier to desribe  and . We illustrate with .
Example 3 We an reshue (Q)(R)[z‚ÑÑ(P )[x‚ÑÑ[y‚ÑÑN to (R)[z‚ÑÑ(P )[x‚ÑÑ(Q)[y‚ÑÑN in order
to transform the braketing struture ff gf gg into f gf gf g, where all the redexes
orrespond to adjaent `f' and `g'. Figure 1 an be redrawn using the -redution
twie in Figure 2.
(R) [z‚ÑÑ (P ) [x‚ÑÑ (Q) [y‚ÑÑ
N
Figure 2: -normal forms in item notation for term A
The  rule an be applied to both expliitly and impliitly typed systems. However,
the transfer of  to expliitly typed systems is not straightforward, sine in these
systems the type of y in the term A may be aeted by the reduible pair of 
x
and
P . For example, it is ne to write ((
x:
:
y:x
:y)z)u !

(
x:
:(
y:x
:y)u)z but not to
write ((
x:
:
y:x
:y)z)u!

(
y:x
:(
x:
:y)z)u.
2
Loal transformations like  and  began to appear in the literature during the
eighties. (See [15‚ÑÑ for a summary). Regnier [21‚ÑÑ introdues the notion of a premier
redex whih is similar to the redex based on 
y
and Q above (whih we all a gen-
eralised redex). Later, he uses  and  (and alls the ombination ) to show that
2
An alternative is to apply  to the type erasure of the term, whih may be quite ompliated to
express in terms of the type-annotated term.
3
the perpetual redution strategy nds the longest redution path when the term is
Strongly Normalising (SN) [22‚ÑÑ. Vidal also introdues similar redutions [25‚ÑÑ. Kfoury,
Tiuryn, and Urzyzyn use  (and other redutions) to show that typability in ML is
equivalent to ayli semi-uniation [12‚ÑÑ. Sabry and Felleisen desribe a relationship
between a redution similar to  and a partiular style of CPS [23‚ÑÑ. De Groote [6‚ÑÑ
uses  and Kfoury and Wells [14‚ÑÑ use  to redue the problem of -strong normal-
isation to the problem of weak normalisation (WN) for related redutions. Kfoury
and Wells use  and  to redue typability in the rank-2 restrition of system F to
the problem of ayli semi-uniation [13‚ÑÑ. Klop, Srensen, and Xi [16, 26, 24‚ÑÑ use
related redutions to redue SN to WN. Finally, Ariola, Felleisen, Maraist, Odersky
and Wadler use  (alled \let-C") in [1‚ÑÑ, as a part of an analysis of how to represent
sharing in a all-by-need language implementation in a formal alulus.
All the researh mentioned above is a living proof for the importane and useful-
ness of generalised redution (from now on, 
e
). For this reason, properties of this
redution must be studied. Conuene of 
e
is a diret onsequene of the fat that
M =

N ,M =

e
N . Subjet redution for 
e
has been established in [5‚ÑÑ (with the
ondition that expliit denitions must be added for some systems of the ube). And,
as we mentioned earlier, Strong Normalisation of 
e
has been established for the whole
Cube and type derivation paths have been analysed. Other important properties of

e
have however remained unanswered. Those properties are:
1. Preservation of Strong Normalisation PSN. This property is: if M is strongly
normalising for ordinary -redution (written M is -SN), then M remains
strongly normalising for generalised redution 
e
(i.e. M is also 
e
-SN). PSN
makes 
e
a useful extension of . This parallels the work on extending -aluli
with expliit substitutions whih satisfy the PSN property.
2. Conservation of 
e
-redution. This property is: if a term is 
eI
-normalisable
(i.e. 
e
-normalisable reduing only redexes that don't erase their arguments,
so alled I-redexes, or strit redexes), then it is strongly normalisable. This is
interesting in view of the ongoing interest of showing that strong normalisation
an be redued to weak normalisation [16, 24, 26‚ÑÑ.
3. Postponement of K-redution. Generalised redution allows the postponement
of K-redution (whih disards their arguments) after I-redutions (whih use
their arguments in at least one plae). Hene, generalised redution allows
unneessary K-redexes to be bypassed. From the implementation point of view,
this results in exibility in work. Unneessary work an be delayed or even
avoided ompletely.
In this paper, we show these three properties for the generalised redution 
e
. We
use item notation to be able to write generalised redution in a really general way
and to be able to desribe proofs and proof objets elegantly. We believe that if this
paper was written in lassial notation, then the proofs would have been umbersome
to present.
4
3 Contributions of this paper and related work
Beause we still have not introdued all the mahinery of item notation, we shall use
lassial notation in this setion.
Let us reall the three basi redution rules of the -alulus (FV (M) stands for
the free variables of M):
() (
x
:M)N !M [x := N ‚ÑÑ
(
I
) (
x
:M)N !M [x := N ‚ÑÑ if x 2 FV (M)
(
K
) (
x
:M)N !M if x 62 FV (M)
Redexes based on the 
I
rule are alled 
I
- or I-redexes. Similarly, those based on
the 
K
rule are alled 
K
- or K-redexes. For any relation r, we write r
K
and r
I
for
the orresponding K- and I-redutions.
In this paper, we show that the generalised redution 
e
satises PSN, the post-
ponement of K-ontrations and onservation. Of ourse the latter two properties fail
for ordinary  as shown by the following example:
Example 4 (
y
:(
x
:x))MN !

K
(
x
:x)N !

I
N and it is impossible to 
I
-redue
(
y
:(
x
:x))MN . Moreover, ((
x
:
y
:y(
z
:zz))u)
z
:zz is 
I
-normalising but not strongly
-normalising.
Attempts have been made at establishing some redution relations for whih post-
ponement of K-ontrations and onservation hold ([2‚ÑÑ and [6‚ÑÑ). The piture is as
follows (-N stands for normalising and r 2 f
I
; 
K
g where () was dened earlier):
(
K
-postponement for r) If M !

K
N !
r
O then 9P suh that M !
+

I

K
P !

K
O
(Conservation for 
I
) If M is 
I
-N then M is 
I
-SN
(Conservation for  + ) If M is 
I

K
-N then M is -SN
Conservation for 
I
is found in [2‚ÑÑ. Conservation for +  and 
K
-postponement for
r 2 f
I
; 
K
g are established by de Groote in [6‚ÑÑ. However, de Groote does not produe
these results for a single redution relation, but for  in whih another relation () is
used. This paper establishes 
K
-postponement and onservation for a single relation

e
and is hene the rst to do so. Moreover, the relation  is more restritive than
the generalised redution of this paper.
Let us now list the postponement and onservation properties for 
e
:
(
eK
-postponement for 
e
) If M !

eK
N !

eI
O then 9P suh that M !

eI
P !
+

eK
O
(Conservation for 
e
) If M is 
eI
-N then M is 
e
-SN
These two properties are important beause here we have the rst redution relation
whih generalises  (yet M =

N ,M =

e
N) and whih satises them.
Now we ome to the PSN property whih is as follows:
(PSN for 
e
) M is -SN , M is 
e
-SN.
PSN not only means that 
e
does not hange the set of -SN terms, but also that
we an atually use 
e
with expliit substitution. In fat, expliit substitution is an
important topi of researh and PSN is an important property for any -alulus
5
extended with expliit substitution. In fat, lately, muh researh has been arried
out ([4, 9‚ÑÑ) in order to nd systems of expliit substitution whih are both onuent
and have the PSN property (if M is -SN then M is 
s
-SN where 
s
is the lambda
alulus extended with expliit substitution). This is the reason for our interest
in PSN of 
e
(whih is onuent by the way). After all, generalised redutions a
la 
e
have been extensively used as we saw in Setion 2 for both theoretial and
pratial reasons. Furthermore, systems of expliit substitution have been the subjet
of muh reent researh. Both generalised redution and expliit substitution are
of pratial importane and ombining them both in one system may turn out to
be very useful. The main benets of these onepts are similar: both emphasize
exibility in the ordering of operations. In partiular, both generalized redution and
expliit substitution allow the postponement of work, but in dierent, omplementary
ways. On one side, generalized redution always allows unneessary K-redexes to be
bypassed. Expliit substitution will not in general allow this, sine reduing the K-
redex might be neessary to expose an essential I-redex. Similarly, on the other side,
expliit substitution allows bypassing any work inside a subterm that will be disarded
later. However, generalized redution does not provide any means for performing
only those parts of a substitution that will be used later. Thus, we an see that their
benets are omplementary.
We laim that a system with the ombination of generalized redution and expliit
substitution is more advantageous than a system with eah onept separately. Obvi-
ously, if the benets of both are desired simultaneously, it is important to study the
ombination, a task whih this paper performs. Before the ombination an be safely
used, it must be heked that this ombination is sound and safe exatly like it has
been heked that eah of expliit substitutions and generalised redutions separately
are sound and safe.
One PSN is established we an study extending the -alulus with both ex-
pliit substitution and generalised redution. This means that we an ombine the
advantages of the two dierent extensions in one system [10, 11‚ÑÑ.
We had established in [9‚ÑÑ property (1) below, and in [10, 11‚ÑÑ property (2) below
(

e
s
stands for the lambda alulus extended with expliit substitution and gener-
alised redution and for reasons of uniformity, we write -SN for -SN and 

e
-SN
for 
e
-SN):
(1) M is -SN , M is 
s
-SN
(2) M is 
s
-SN , M is 

e
s
-SN
The proofs for (1) and (2) are similar. Now with PSN, we get (3) below and then (4)
omes for free.
(3) M is -SN , M is 

e
-SN
(4) M is 

e
-SN , M is 

e
s
-SN
Hene, one gets: M is -SN , M is 

e
-SN , M is 

e
s
-SN , M is 
s
-SN.
Based on the above disussion, this artile shows 
eK
postponement (Setion 5),
the generalised onservation for 
e
(Setion 6), and the PSN property for 
e
(Se-
tion 7).
6
4 The formal mahinery
We assume the reader familiar with the -alulus whose terms are
 ::= Vj()j(
V
:)
We take terms modulo -onversion and use the variable onvention VC (as in [3‚ÑÑ)
whih avoids any lash of variables. We use x, y, z, x
1
, x
2
, : : : and M , N , P , Q,
A, B, A
1
, : : : to range over V and  respetively. We assume the usual denition of
substitution and use FV (M) for the set of free variables of M . Beause we need to
see redexes (ordinary and generalised) we shall write terms in item notation (see [8‚ÑÑ
or [7‚ÑÑ). In this notation, 
x
is written as [x‚ÑÑ and (MN) is written (N)M (note that
following de Bruijn, we put the argument before the funtion). [x‚ÑÑ and (N) are alled
items. A sequene of items is alled a segment. We use I; I
1
; : : : to range over items
and S; S
1
; S
2
; : : : to range over segments. A well-balaned segment (w.b for short) is
dened as the empty segment or (P )S
1
[x‚ÑÑS
2
where S
1
and S
2
are w.b. Note that the
onatenation of w.b segments is a well-balaned segment.
One partiular advantage of this notation is that redexes are more lear than in
the usual notation. For example, 
C
of Setion 2 beomes:
(
C
) (Q)(P )[x‚ÑÑ[y‚ÑÑN ! (Q)[y‚ÑÑ(P )[x‚ÑÑN
where it is lear that (P ) mathes [x‚ÑÑ and (Q) mathes [y‚ÑÑ. So, an ordinary redex
starts with a ( ) adjaent to [ ‚ÑÑ. A generalised redex starts with ( )S[ ‚ÑÑ where S is w.b.
When S = ;, a generalised redex is an ordinary redex. In (Q)(P )[x‚ÑÑ[y‚ÑÑN , we say that
(P ), [x‚ÑÑ, (Q) and [y‚ÑÑ are partnered, (P ) is the partner of [x‚ÑÑ (or [x‚ÑÑ is the partner of
(P )) and (Q) is the partner of [y‚ÑÑ. (P ) and [x‚ÑÑ are also said to be -partnered whereas
(Q) and [y‚ÑÑ are 
e
-partnered. In general, we say that (P ) (or [x‚ÑÑ) is partnered in M
if:
 M  (P )S[x‚ÑÑN where S is w.b (in this ase (P ) and [x‚ÑÑ are partners), or
 M  [y‚ÑÑN and (P ) (or [x‚ÑÑ ) is partnered in N , or
 M  (N
1
)N
2
and (P ) is either partnered in N
1
or in N
2
.
We may also talk of 
I
-, 
eI
-, 
K
-, 
eK
-partnered items with the obvious meaning.
Note that if S
1
(A)S
2
[x‚ÑÑS
3
is w.b where (A) and [x‚ÑÑ are partnered then S
2
and S
1
S
3
are w.b.
If an item is not partnered in a term we say that it is bahelor (and may talk of -,

eI
-, 
K
-, 
eK
-, 
I
- and 
e
-bahelor items). A segment onsisting of bahelor items
only is alled bahelor. Note that a term will always be written as I
1
I
2
: : : I
n
x. Eah
I
i
is said to be a main-item in M . A main item an of ourse have items inside it but
these will not be main in M . For example, ((y)[x‚ÑÑx)[z‚ÑÑz has the main items ((y)[x‚ÑÑx)
and [z‚ÑÑ. The redex ((y)[x‚ÑÑx)[z‚ÑÑz is said to be a main-redex. The other redex (y)[x‚ÑÑx
is not main. The weight of a segment is dened to be the number of its main items.
We write [x := N ‚ÑÑM instead of M [x := N ‚ÑÑ whih stands for substituting N for the
free ourrenes of x in M .
7
We assume the reader familiar with the basi mahinery of redution ([2‚ÑÑ, p. 50-
59). In partiular, if R is a binary relation    , and (M;N) 2 R, we all M
the R-redex and N the ontratum of M . Given R    , we dene !
R
to be
the least ompatible relation ontaining R, !
R
to be its reexive transitive losure
and =
R
to be its reexive, symmetri and transitive losure. A term M is said to be
in R-normal form (R-nf) i there is no N suh that M !
R
N . M is said to have
a R-nf, i there is N in R-nf suh that M !
R
N . We say M is R-normalising or
is R-N i M has a R-nf. We say that M is strongly R-normalising and write M is
R-SN i there is no innite R-redution path starting at M . We may use M !
+
R
N
to indiate the existene of one or more steps from M to N and M !
n
R
N to mean
that there are n redution steps. Ordinary -, 
I
- and 
K
-redution are dened as
the redution relations generated by the orresponding rules below:
() (N)[x‚ÑÑM ! [x := N ‚ÑÑM
(
I
) (N)[x‚ÑÑM ! [x := N ‚ÑÑM if x 2 FV (M)
(
K
) (N)[x‚ÑÑM !M if x 62 FV (M)
As explained in Example 4, postponement of K-ontrations and onservation do not
hold for . De Groote in [6‚ÑÑ introdues dierent redution relations for whih he
establishes these properties. First, [6‚ÑÑ uses
(
K
) (O)(N)[x‚ÑÑM ! (N)[x‚ÑÑ(O)M if x 62 FV (M)
Note that by VC, in 
K
, x 62 FV (O). Then, de Groote moves (O) to the right of
(N)[x‚ÑÑ so that it an eventually our adjaent to its partner in M if it exists. De
Groote establishes the following two results (r 2 f
I
; 
K
g):
(
K
-postponement for r) If M !

K
N !
r
O then 9P suh that M !
+

I

K
P !

K
O
(Conservation for  + ) If M is 
I

K
-N then M is -SN:
In this paper, we will improve both results. We will dene a 
e
-redution relation
(see Denition 5) whose 
eI
and 
eK
stand for its I and K-redutions. We shall show
that:
(
eK
-postponement for 
e
) If M !

eK
N !

eI
O then 9P suh that M !

eI
P !
+

eK
O
(Conservation for 
e
) If M is 
eI
-N then M is 
e
-SN:
Denition 5 (Generalised -redution 
e
) We generalise , 
I
and 
K
to the redu-
tion relations generated by the orresponding rules of what follows:
(
e
) (N)S[x‚ÑÑM ! S[x := N ‚ÑÑM if S is w.b
(
eI
) (N)S[x‚ÑÑM ! S[x := N ‚ÑÑM if S is w.b and x 2 FV (M)
(
eK
) (N)S[x‚ÑÑM ! SM if S is w.b and x 62 FV (M)
Note that 
e
is more generalised than the redution relation introdued by om-
bining de Groote's  + 
K
. In fat, 
e
is not restrited to K-redexes and one
unique step an do the work of many in Groote's sense. For example, if S 
(A
1
)[x
1
‚ÑÑ(A
2
)[x
2
‚ÑÑ : : : (A
n
)[x
n
‚ÑÑ and all the redexes starting with (A
1
); (A
2
); : : : (A
n
)
are K-redexes in S[x‚ÑÑM , then (N)S[x‚ÑÑM !

e
S[x := N ‚ÑÑM i (N)S[x‚ÑÑM !
n
K
S(N)[x‚ÑÑM !

S[x := N ‚ÑÑM .
Now, here is a basi lemma about terms:
8
Lemma 6
1. Let r 2 f
e
; 
eI
; 
eK
g. If (A) is r-bahelor in (A)M then (B) is also r-bahelor
in (B)(A)M .
2. IfM is in -nf, thenM  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
n
‚ÑÑ(A
1
)(A
2
) : : : (A
m
)z where n  0, m  0
and 8i, 1  i  m) A
i
is in -nf.
3. If A !
r
A
0
then SA !
r
SA
0
for any segment S and any redution relation
r 2 f; 
I
; 
K
; 
e
; 
eI
; 
eK
g.
Proof
1. If (B) was r-partnered, then (B)(A)M  (B)(A)S[x‚ÑÑN where (A)S is w.b (and
hene (A)S  (A)S
1
[y‚ÑÑS
2
where S
1
; S
2
are w.b) ontraditing the fat that (A)
is r-bahelor.
2. By indution on the struture of M .
3. By indution on the weight of S.
In order to show the Preservation of Strong Normalisation for 
e
, we need a redution
strategy where a 
K
-redex (M)[x‚ÑÑN is ontrated only if M is in -nf. This strategy
is atually the perpetual strategy (see [2‚ÑÑ and [22‚ÑÑ):
Denition 7 We dene the perpetual strategy F as follows:
F ([x‚ÑÑM) = F (M)
F ((M)N) = F (N) if N 6 [x‚ÑÑP and N is not in -nf
F ((M)N) = F (M) if N 6 [x‚ÑÑP and N is in -nf
F ((M)[x‚ÑÑN) = (M)[x‚ÑÑN if x 2 FV (N) or M is in -nf
F ((M)[x‚ÑÑN) = F (M) if x 62 FV (N) and M is not in -nf
We all perpetual redution the redution assoiated with this strategy. When M
-redues to N by ontrating F (M), we write, M !
F
N . This strategy has been
shown in [22‚ÑÑ to give the longest path for a SN term. It was moreover, shown in [2‚ÑÑ
that M is -SN i its perpetual redution terminates. With the result of this paper,
it will also be the ase that M is 
e
-SN i its perpetual path terminates.
The following lemma is informative about where F -redution takes plae in a term
in the ase of K-redexes:
Lemma 8 If M !
F
N where F (M) is a 
K
-redex, then one of the following holds:
1. M  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)[x‚ÑÑP and
N  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)P
where x 62 FV (P ), A is in -nf, n  0 and m  0.
2. M  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)[x‚ÑÑP and
N  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A
0
)[x‚ÑÑP
where x 62 FV (P ), A is not in -nf, A!
F
A
0
, n  0 and m  0.
9
3. M  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)(B
1
)(B
2
) : : : (B
r
)z and
N  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A
0
)(B
1
)(B
2
) : : : (B
r
)z and
A is not in -nf, A !
F
A
0
, n  0, m  0 and r  0 and 8i; 1  i  r; B
i
is in
-nf.
Proof By indution on M !
F
N where F (M) is a 
K
-redex.
5 Postponement of 
eK
-redution
In this setion, we establish in lemma 10 the postponement of 
eK
-redution. The
proof of postponement is similar to that of de Groote. For us, however, we an get
away with only one step 
eI
redution in the postponement lemma (Lemma 10). De
Groote, had to have many steps in order to aommodate the slow proess of moving
an item () next to its mathing [ ‚ÑÑ (see for example his proof of Lemma 11, () ii). We
ould also in Lemma 10, replae 
eK
with ordinary 
K
in P !
+

eK
O but we won't
bother doing so in this paper as it is not needed.
The following lemma establishes that substitution preserves 
eK
-redution.
Lemma 9 If M !

eK
N then the following hold:
1. [x :=M ‚ÑÑP !

eK
[x := N ‚ÑÑP .
2. If x 2 FV (P ) then [x :=M ‚ÑÑP !
+

eK
[x := N ‚ÑÑP .
3. [x := P ‚ÑÑM !

eK
[x := P ‚ÑÑN .
Proof Use indution on the struture of P for 1 and 2, and on the derivation of
M !

eK
N for 3.
Now we ome to the postponement lemma. Note that in this lemma, P !
+

eK
O and
not P !

eK
O nor P !

eK
O. This is due to Lemma 9.
Lemma 10 If M !

eK
N !

eI
O then 9P suh that M !

eI
P !
+

eK
O.
Proof By indution on the derivation of M !

eK
N .
 Case (A)S[x‚ÑÑB !

eK
SB, S w.b, x 62 FV (B), hek where in SB the 
eI
-redex
appears (note that if S
1
S
2
S
3
and S
2
are w.b, then S
1
S
3
is w.b).
We only treat the ase where S  S
1
(A
1
)S
2
[y‚ÑÑS
3
with S
2
w.b and
S
1
(A
1
)S
2
[y‚ÑÑS
3
B !

eI
S
1
S
2
f[y := A
1
‚ÑÑS
3
g[y := A
1
‚ÑÑB.
Then (A)S
1
(A
1
)S
2
[y‚ÑÑS
3
[x‚ÑÑB !

eI
(A)S
1
S
2
f[y := A
1
‚ÑÑS
3
g[x‚ÑÑf[y := A
1
‚ÑÑBg !

eK
S
1
S
2
f[y := A
1
‚ÑÑS
3
gf[y := A
1
‚ÑÑBg as x 62 FV ([y := A
1
‚ÑÑB) due to VC.
 Case [x‚ÑÑM !

eK
[x‚ÑÑN !

eI
O, then O  [x‚ÑÑQ. Use IH on M !

eK
N !

eI
Q.
 Case (A)B !

eK
(A
0
)B !

eI
O, investigate how (A
0
)B !

eI
O. We only treat
the ase where (A
0
)B  (A
0
)S[x‚ÑÑB
1
!

eI
S[x := A
0
‚ÑÑB
1
. Then
(A)B  (A)S[x‚ÑÑB
1
!

eI
S[x := A‚ÑÑB
1
!
+

eK
S[x := A
0
‚ÑÑB
1
by Lemma 9.
10
 Case (A)B !

eK
(A)B
0
!

eI
O, we only treat the ase where B
0
 S[x‚ÑÑC, S
is w.b, and O  S[x := A‚ÑÑC. I.e. (A)B !

eK
(A)S[x‚ÑÑC !

eI
S[x := A‚ÑÑC (note
that it annot our that B  (Q)S[x‚ÑÑ[y‚ÑÑC !

eK
S[x‚ÑÑ([y := Q‚ÑÑC)). Then one
of the following holds:
{ Case B  S[x‚ÑÑC
1
and C
1
!

eK
C, then
(A)S[x‚ÑÑC
1
!

eI
S[x := A‚ÑÑC
1
!

eK
S[x := A‚ÑÑC by Lemma 9, ase 3.
{ Case B  S
1
[x‚ÑÑC and the 
eK
-redex is in S
1
, i.e.
(A)S
1
[x‚ÑÑC !

eK
(A)S[x‚ÑÑC !

eI
S[x := A‚ÑÑC, then
(A)S
1
[x‚ÑÑC !

eI
S
1
[x := A‚ÑÑC !

eK
S[x := A‚ÑÑC by VC.
6 The generalised onservation for 
e
In this setion, we establish in Theorem 28, the generalised onservation for 
e
, the
same relation for whih we established in the previous setion, the postponement
of its K-redution. This is an extension of de Groote's work whih established the
postponement and onservation properties for two dierent relations. We start by
dening the set of labelled terms whih will help us in establishing the generalised
onservation. Labels will used as ounters to reord the number of ontrated redexes
when reduing a term.
Denition 11 The set
IN
 of labelled -terms is indutively dened as follows:
1. n 2 IN; x 2 V )
n
x 2
IN
.
2. n 2 IN; x 2 V ;M 2
IN
)
n
[x‚ÑÑM 2
IN
.
3. n 2 IN;M;N 2
IN
)
n
(M)N 2
IN

We take M;N;O;A;B; : : : to range over labelled -terms. We use
n
M to stress that
the outermost label of a -term M is n. Hene, M and
n
M stand for the same
labelled -term. We write
+m
M for the labelled -term obtained by adding m to the
outermost label of a labelled -term M . Hene if the outermost label of M is n then
+m
M denotes
n+m
M .
ForM 2
IN
, we write jM j for the (unlabelled) -term in  obtained by erasing all
labels in M . Moreover, if M 2 , we identify M with M
0
in
IN
 suh that jM
0
j M
and all labels in M
0
are 0. Hene,  
IN
.
We use in this setion, the notations and tehniques of de Groote adapted however
to our generalised redution. Basially the idea is as follows:
1. Churh Rosser CR: We introdue a labelled redution relation !

+
eI
whih
we prove Churh Rosser. !

+
eI
is shown CR by showing that a related redution
relation !
1
is CR. Hene, if a labelled term M has a 
+
eI
-nf, it must be unique.
2. Inreasing property In: We then introdue the weight of a term M , [M ‚ÑÑ,
whih is used to limit the length of 
+
eI
-redutions starting at normalising terms.
That is, the length of any sequene of 
+
eI
-redutions starting at a normalising
term M is bounded by [M
0
‚ÑÑ   [M ‚ÑÑ where M
0
is the (unique) 
+
eI
-nf of M .
This implies that any 
+
eI
-N term is 
+
eI
-SN. This will be extended to 
eI
by
showing that any 
eI
-N term is 
eI
-SN.
11
3. Weak Normalisation ) Strong Normalisation (WN ) SN) Next we
show that if M is 
eI
-N then it is 
e
-SN by using the fat that M is 
eI
-SN,
postponement and that there an only be a nite 
eK
-redexes. This establishes
the generalised onservation.
Note that the struture of our proof an be seen as: CR+In+WN ) SN. This is
as we said a generalisation of the proof of de Groote. One ould however use Corollary
5.19 in Klop's thesis [16‚ÑÑ whih states that WCR+In+WN) SN & CR where WCR
is Weak Churh Rosser. We leave this alternative to the reader to establish.
Here is the denition of substitution on labelled terms:
Denition 12 Let M;N 2
IN
. [x := N ‚ÑÑM is dened as follows:
[x :=
n
N ‚ÑÑ
m
x 
n+m
N
[x :=
n
N ‚ÑÑ
m
y 
m
y if x 6 y
[x :=
n
N ‚ÑÑ
m
(P )Q 
m
([x :=
n
N ‚ÑÑP )[x :=
n
N ‚ÑÑQ
[x :=
n
N ‚ÑÑ
m
[y‚ÑÑM 
m
[y‚ÑÑ[x :=
n
N ‚ÑÑM
Now we dene !

+
eI
whih will be used to show onservation.
Denition 13 M !

+
eI
N is dened indutively as follows:
1.
n
(
i
N)S
o
[x‚ÑÑ
j
M !

+
eI
+n+o+1
S[x :=
i
N ‚ÑÑ
j
M if x 2 FV (M); S, w.b.
2. If M !

+
eI
N then
n
[x‚ÑÑM !

+
eI
n
[x‚ÑÑN ,
n
(M)P !

+
eI
n
(N)P and
n
(P )M !

+
eI
n
(P )N
!

+
eI
is dened as the transitive reexive losure of !

+
eI
.
We dene !
1
for whih CR is easier to show than for !

+
eI
.
Denition 14 M !
1
N is dened indutively as follows:
1. M !
1
M
2. If M !
1
N then
n
[x‚ÑÑM !
1
n
[x‚ÑÑN
3. If M !
1
O and N !
1
P then
n
(M)N !
1
n
(O)P
4. If S
p
[x‚ÑÑM !
1
S
0q
[x‚ÑÑO, N !
1
P , S; S
0
w.b, and x 2 FV (M) then
n
(N)S
p
[x‚ÑÑM !
1
+n+q+1
S
0
[x := P ‚ÑÑO.
!
1
is dened as the transitive reexive losure of !
1
.
The following lemma shows that labels an be inreased for both !
1
and !

+
eI
.
Lemma 15 Let M;N 2
IN
 and r 2 f1; 
+
eI
g. If M !
r
N then
+n
M !
r
+n
N .
Proof By indution on the derivation M !
r
N .
The following lemma shows that !
1
and !

+
eI
are losed under substitution.
12
Lemma 16 Let M;N;P;O 2
IN
. The following hold:
1. If M !
1
N , then [x :=M ‚ÑÑ
m
O !
1
[x := N ‚ÑÑ
m
O.
2. If M !

+
eI
N , then [x :=M ‚ÑÑ
m
O !

+
eI
[x := N ‚ÑÑ
m
O.
3. If M !
1
N and O !
1
P then [x := O‚ÑÑM !
1
[x := P ‚ÑÑN .
4. If M !

+
eI
N and O !

+
eI
P then [x := O‚ÑÑM !

+
eI
[x := P ‚ÑÑN .
Proof 1 and 2 are similar and are by indution on the struture of O. 3 and 4 are
by indution on the derivation M !
r
N where r is the orresponding redution.
Here is the relationship between !
1
and !

+
eI
:
Lemma 17 M !
1
N i M !

+
eI
N .
Proof )) By indution on the derivation of M !
1
N show that:
M !
1
N ) M !

+
eI
N .
() By indution on the derivation M !

+
eI
N , show that M !

+
eI
N )M !
1
N .
The following two lemmas enable us to establish that !
1
is CR.
Lemma 18 If S; S
0
w.b, none of the binding variables of S[x‚ÑÑ ours free in N , none
of the binding variables of S
0
[x‚ÑÑ ours free in P , none of the binding variables of N
are free inM and none of the binding variables of P are free in O, S
p
[x‚ÑÑM !
1
S
0q
[x‚ÑÑO
and N !
1
P then
+p
S[x := N ‚ÑÑM !
1
+q
S
0
[x := P ‚ÑÑO.
Proof Note that if weight(S) = weight(S
0
) then p = q, M !
1
O and if (A
i
) and
(A
0
i
) are the ith main appliation items of S and S
0
respetively, then A
i
!
1
A
0
i
.
Hene the result is shown by Lemmas 15 and 16 and the def. of !
1
.
If weight(S) > weight(S
0
), then we prove the lemma by indution on weight(S).
Lemma 19 Let M;N;O 2
IN
 suh that M !
1
N and M !
1
O then 9P 2
IN

suh that N !
1
P and O !
1
P .
Proof By indution on the derivation of M !
1
N .
Now we have the Churh Rosser property for !
1
:
Corollary 20 (Churh Rosser of !
1
) Let M;N;O 2
IN
 suh that M !
1
N
and M !
1
O then 9P 2
IN
 suh that N !
1
P and O !
1
P .
Hene, the rst part of this setion (CR of !

+
eI
) is done:
Lemma 21 (Churh Rosser of !

+
eI
) Let M;N;O 2
IN
 suh that M !

+
eI
N
and M !

+
eI
O then 9P 2
IN
 suh that N !

+
eI
P and O !

+
eI
P .
Proof By Corollary 20 and Lemma 17.
In order to show Lemma 25, we introdue the following denition:
13
Denition 22 The weight [M ‚ÑÑ of a labelled -term M is dened as follows:
[
n
x‚ÑÑ = n
[
n
[y‚ÑÑM ‚ÑÑ = n+[M ‚ÑÑ
[
n
(M)N ‚ÑÑ = n+[M ‚ÑÑ + [N ‚ÑÑ
The following two lemmas enable us to establish that the weight as we dened will
help us to measure terminating redutions:
Lemma 23 If x 2 FV (M) then [[x := N ‚ÑÑM ‚ÑÑ  [M ‚ÑÑ + [N ‚ÑÑ.
Proof By indution on the struture ofM showing rst that [
+m
M ‚ÑÑ = m+[M ‚ÑÑ.
Lemma 24 Let M;N 2
IN
 and M !
+

+
eI
N then [M ‚ÑÑ < [N ‚ÑÑ.
Proof By indution on the derivation M !
+

+
eI
N using Lemma 23.
Now, 
+
eI
-N and 
+
eI
-SN are the same:
Lemma 25 If M is 
+
eI
-N then M is 
+
eI
-SN.
Proof Sine M is 
+
eI
-N, and sine 
+
eI
is Churh Rosser by Lemma 21, then M
has a unique 
+
eI
-nf M
0
. Aording to Lemma 24, the length of any sequene of

+
eI
-redution starting at M is bounded by [M
0
‚ÑÑ [M ‚ÑÑ.
Here is the relationship between !

eI
and !

+
eI
:
Lemma 26 Let M;N 2  suh that M !

eI
N , then there exist M
0
; N
0
2
IN
 suh
that jM
0
j M; jN
0
j  N and M
0
!

+
eI
N
0
. Furthermore, if N is in 
eI
-nf then N
0
is
in 
+
eI
-nf.
Proof Easy. Put the right labels onM and N obtainingM
0
; N
0
whereM
0
!

+
eI
N
0
.
Now, we generalise Lemma 25 to !

eI
.
Theorem 27 If M is 
eI
-N then M is 
eI
-SN.
Proof M 
eI
-N)
Lemma 26
M
+
eI
-N)
Lemma 25
M
+
eI
-SN)M
eI
-SN (otherwise
there exists an innite 
+
eI
-path).
Finally, from the above theorem and postponement of K-ontrations, we an estab-
lish onservation:
Theorem 28 (Conservation) If M is 
eI
-N then M is 
e
-SN.
Proof If M is not 
e
-SN then there is an innite 
e
-path starting at M . But by
postponement of 
eK
redexes, and by the fat that there an only be a nite 
eK
-
ontrations, there must be an innite 
eI
-path. But M is 
eI
-N and so it is 
eI
-SN
by Theorem 27. Contradition.
14
7 Preservation of Strong Normalisation
To show PSN, we show that ifM !
F
N (using the perpetual strategy of Denition 7)
and if N is 
eI
-N then M is 
eI
-N. Now, we takeM whih is -SN, and its perpetual
path to its normal formN . AsN is 
eI
-N, thenM is 
eI
-N and hene by onservation,
M is 
e
-SN. It is possible however to show PSN in many dierent ways and without
using onservation. For example, one may use a result of Regnier in [22‚ÑÑ whih states
that the length of the longest redution of a term is invariant by -equivalene noting
that the -redution modulo -equivalene is isomorphi to the 
e
-redution.
3
In this setion, we will use the already available onservation theorem and following
Theorem 27, we interhange 
eI
-SN and 
eI
-N at liberty. We shall show PSN of 
e
.
Note that the derivation:
M -SN ) M -N ) M 
eI
-N ) M 
e
-SN
is inorret beause M -N 6) M 
eI
-N. For example, (
x
:y)
 is -N but not 
eI
-N
for 
  (
z
:zz)(
z
:zz). To show PSN, we takeM that is -SN. ThenM !
F
N where
N is the -nf ofM and!
F
is the perpetual strategy. As N is in -nf, then N is 
eI
-
N. But the inverse of !
F
preserves 
eI
-N. Hene, M is 
eI
-N and by onservation,
M is 
e
-SN.
In order to establish that the inverse of !
F
preserves 
eI
-normalisation (Theo-
rem 33), we need the following three lemmas whih will be ombined with the three
forms of perpetual redution for K-redexes as in Lemma 8.
Lemma 29 If (A
1
) : : : (A
n
)(A)[x‚ÑÑP has 
eI
-nf, x 62 FV (P ), then its 
eI
-nf is of the
form (B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ where A
0
is the 
eI
-nf of A, 0  j  n, B
j
is the 
eI
-nf of
some A
i
for 1  i  n. Moreover, (A
1
) : : : (A
n
)P has (B
1
) : : : (B
j
)Q as its 
eI
-nf.
Proof By indution on n  0.
 n = 0, the 
eI
-nf is (A
0
)[x‚ÑÑQ where Q is the 
eI
-nf of P .
 Assume the property holds for n  0.
As (A
1
) : : : (A
n
)(A
n+1
)(A)[x‚ÑÑP has 
eI
-nf, then it is 
eI
-SN and so
(A
2
) : : : (A
n
)(A
n+1
)(A)[x‚ÑÑP and A
1
have 
eI
-nf. Call the 
eI
-nf of A
1
, A
0
1
.
Now, by IH, (B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ is the 
eI
-nf of (A
2
) : : : (A
n
)(A
n+1
)(A)[x‚ÑÑP
and (B
1
) : : : (B
j
)Q is the 
eI
-nf of (A
2
) : : : (A
n
)(A
n+1
)P .
{ If (A
0
1
) is 
eI
-bahelor in (A
0
1
)(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ (and hene it is bah-
elor in (A
0
1
)(B
1
) : : : (B
j
)Q), then:
(A
0
1
)(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ and (A
0
1
)(B
1
) : : : (B
j
)Q are the 
eI
-nfs required.
{ If (A
0
1
) is 
eI
-partnered in (A
0
1
)(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ then all (B
1
); : : : (B
j
)
start 
eK
-redexes and Q  [x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR. Now, for B the 
eI
-nf of
[y := A
0
1
‚ÑÑR we have:
(A
1
) : : : (A
n
)(A
n+1
)(A)[x‚ÑÑP !

eI
(A
0
1
)(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR!

eI
(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y := A
0
1
‚ÑÑR!

eI
3
Thanks for an anonymous referee who drew my attention to this point.
15
(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑB.
Moreover, (A
1
) : : : (A
n
)(A
n+1
)P !

eI
(A
0
1
)(B
1
) : : : (B
j
)[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR!

eI
(B
1
) : : : (B
j
)[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y := A
0
1
‚ÑÑR !

eI
(B
1
) : : : (B
j
)[x
j
‚ÑÑ : : : [x
1
‚ÑÑB. Now,
we are done (note that B
1
; : : : B
j
start 
eK
-redexes).
Lemma 30 If (A
1
) : : : (A
n
)P and A have 
eI
-nf, x 62 FV ((A
1
) : : : (A
n
)(A)P ), then:
(A
1
) : : : (A
n
)(A)[x‚ÑÑP has 
eI
-nf.
Proof By indution on n  0.
 Case n = 0, P and A have P
0
and A
0
as 
eI
-nfs, then (A)[x‚ÑÑP has (A
0
)[x‚ÑÑP
0
as

eI
-nf.
 Assume the property holds for n  0. Let (A
1
) : : : (A
n
)(A
n+1
)P have 
eI
-nf,
hene it is 
eI
-SN and so (A
2
) : : : (A
n+1
)P has 
eI
-nf and A
1
has A
0
1
as 
eI
-
nf. By IH, (A
2
) : : : (A
n+1
)(A)[x‚ÑÑP has 
eI
-nf whih is by Lemma 29, M 
(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑQ and (A
2
) : : : (A
n+1
)P has (B
1
) : : : (B
j
)Q as its 
eI
-nf.
{ If (A
0
1
) is 
eI
-bahelor in (A
0
1
)M then
(A
0
1
)M is the 
eI
-nf of (A
1
) : : : (A
n+1
)(A)[x‚ÑÑP .
{ If (A
0
1
) is 
eI
-partnered in (A
0
1
)M then Q  [x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR. Now,
(A
1
) : : : (A
n
)(A
n+1
)P !

eI
(A
0
1
)(B
1
) : : : (B
j
)[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR!

eI
(B
1
) : : : (B
j
)[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y := A
0
1
‚ÑÑR.
Hene [y := A
0
1
‚ÑÑR is 
eI
-SN as (A
1
) : : : (A
n+1
)P is.
Let B be the 
eI
-nf of [y := A
0
1
‚ÑÑR. Now,
(A
1
) : : : (A
n+1
)(A)[x‚ÑÑP !

eI
(A
0
1
)(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y‚ÑÑR!

eI
(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑ[y := A
0
1
‚ÑÑR!

eI
(B
1
) : : : (B
j
)(A
0
)[x‚ÑÑ[x
j
‚ÑÑ : : : [x
1
‚ÑÑB whih is in 
eI
-nf.
Lemma 31 If A
i
!

K
B
i
, (A
1
) : : : (A
i 1
)(B
i
)(A
i+1
) : : : (A
n
)z and A
i
have 
eI
-nf
then (A
1
) : : : (A
i 1
)(A
i
)(A
i+1
) : : : (A
n
)z has 
eI
-nf.
Proof A
1
; : : : A
i 1
; A
i
; A
i+1
; : : : A
n
all have 
eI
-nf, A
0
1
; : : : A
0
i 1
; A
0
i
; A
0
i+1
; : : : A
0
n
.
Hene, (A
1
) : : : (A
i 1
)(A
i
)(A
i+1
) : : : (A
n
)z !

eI
(A
0
1
) : : : (A
0
i 1
)(A
0
i
)(A
0
i+1
) : : : (A
0
n
)z
whih is in 
eI
-nf.
Lemma 32 If M !
F
N using a 
K
-redex, and N has a 
eI
-nf, then M has 
eI
-nf.
Proof By indution on the depth of the F -redex (following Lemma 8).
 If M  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)[x‚ÑÑP , where x 62 FV (P ), A is in
-nf and m  0, and if N  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)P where n  0,
use Lemma 30 (A in -nf ) A in 
eI
-nf).
 Let S  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
). If M  S(A)[x‚ÑÑP , N  S(A
0
)[x‚ÑÑP
where x 62 FV (P ), A is not in -nf, A!
F
A
0
, n  0 and m  0. Use IH to de-
due thatA has 
eI
-nf. AsN has 
eI
-nf, then [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)P
has 
eI
-nf by Lemma 29. Hene, [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)[x‚ÑÑP has

eI
-nf by Lemma 30.
16
 If M  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A)(B
1
)(B
2
) : : : (B
r
)z,
N  [x
1
‚ÑÑ[x
2
‚ÑÑ : : : [x
m
‚ÑÑ(A
1
)(A
2
) : : : (A
n
)(A
0
)(B
1
)(B
2
) : : : (B
r
)z where
A is not in -nf, A !
F
A
0
, n  0, m  0 and r  0 and 8i; 1  i  r; B
i
is in
-nf. As N has 
eI
-nf, so does A
0
and by IH, so does A. By Lemma 31, M has

eI
-nf.
Now, here is the key theorem to PSN:
Theorem 33 (The inverse of !
F
preserves 
eI
-N)
If M !
F
N and N is 
eI
-N, then M is 
eI
-N.
Proof We show it for M !
F
N . Note that if M !
F
N and F (M) is a 
I
-redex,
then the theorem is obvious as a 
I
-redex is a 
eI
-redex. Hene, we only need to
prove the theorem for the ase when F (M) is a 
K
-redex. But this is already done
in Lemma 32.
Finally, here is the PSN result.
Corollary 34 (Preservation of Strong Normalisation)
If M is -SN then M is 
e
-SN.
Proof AsM is -SN, the perpetual strategy ofM terminates. LetM !
F
N where
N is in -nf. As N has no -redexes, N is 
eI
-N. Hene, by Theorem 33, M is 
eI
-N.
So, by Theorem 28 M is 
e
-SN.
8 Conlusion
In this paper, we established that there is indeed a redution relation whih satises
both postponement of K-ontrations and onservation. This redution relation is
a generalisation of the ordinary -redution and has been extensively used sine '73
for theoretial and pratial reasons (see Setion 2). We showed moreover that this
generalised redution (alled 
e
) is indeed a desirable generalisation of -redution
by showing that 
e
preserves strong normalisation in the sense that if M is -SN
then M is 
e
-SN. Preservation of Strong Normalisation (PSN) is a property that has
to be established for any extension of a redution relation in the sense that: if a
term is strongly normalising for a redution relation, then it must remain strongly
normalising for its extension. For example, a lot of researh has been arried out
lately to establish PSN for -redution extended with expliit substitution (see [4‚ÑÑ,
[9‚ÑÑ and [18‚ÑÑ). The results of this paper establish that 
e
is indeed a safe extension of
.
It is worth noting that we used item notation in this paper in order to reah the
results desired. There is a reason for this. In the usual notation, generalised redexes
are not easily visible whereas they are in item notation (see [8‚ÑÑ). For example, in
( )( )[ ‚ÑÑ( )[ ‚ÑÑ[ ‚ÑÑ, we an learly see that the leftmost ( ) mathes the rightmost[ ‚ÑÑ. Using
item notation enables us to write the proofs learly. Compare with [6‚ÑÑ who used a
more restrited generalised redution but it was still hard to disuss where generalised
redexes ours in a term. For more information on the simpliity and usefulness of
item notation, the reader is referred to [8‚ÑÑ. It should be noted moreover, that using
17
item notation is not restritive and that the results of this paper would still hold if
we used the lassial notation. Only the proofs will be umbersome to write as the
lassial notation annot easily enable us to express generalised redexes.
The following is an itemised summary of this paper:
1. Postponement and onservation are shown for the same redution relation 
e
.
2. This redution relation is a generalisation of that presented in de Groote's artile
and of many of the existing generalisations of -redution. Beause of this, it
enables greater exibility in the ordering of evaluation.
3. The fat that this redution relation preserves strong normalisation and en-
ables the postponement of some work allowing unneessary K-redexes to be
bypassed, means that one an investigate a programming language evaluation
strategy based on this redution together with expliit substitutions (whih al-
low bypassing any work inside a subterm that will be disarded later). This
means that one an ombine the advantages of the omplementary ways of
postponing work due to both expliit substitutions and generalised redution.
Hene, one an ahieve an even greater exibility in the order of redution and
evaluation, something very welome in the implementation and ompilation of
programming languages.
4. The syntax of this paper may well be the answer to the existene of a syntax
that realises Regnier's -redution. We leave this for future explorations.
5. It is our belief that automating proofs written in this fashion may be more
e√Üient than automating the proofs written using -equivalene (whih was
said to need a good syntax to desribe it in [22‚ÑÑ).
Aknowledgements
I am grateful to Joe Wells and the anonymous referees for for their omments on the
paper. This work is supported by EPSRC grants number GR/L15685 and GR/L36963.
Anonymous referees provided useful omments for whih I am grateful.
Referenes
[1‚ÑÑ Z.M. Ariola, M. Felleisen, J. Maraist, M. Odersky and P. Wadler. A all by need
lambda alulus. ACM Symposium on Priniples of Programming Languages,
1995.
[2‚ÑÑ H. Barendregt. Lambda Calulus: its Syntax and Semantis. North-Holland,
1984.
[3‚ÑÑ H. Barendregt. Lambda aluli with types. Handbook of Logi in Computer
Siene, volume II, ed. Abramsky S., Gabbay D.M., Maibaum T.S.E., Oxford
University Press, 1992.
18
[4‚ÑÑ Z. Benaissa, D. Briaud, P. Lesanne and J. Rouyer-Degli. T , a alulus of
expliit substitutions whih preserves strong normalisation. Funtional Program-
ming, 6(5):699-722, September 1996.
[5‚ÑÑ R. Bloo, F. Kamareddine and R. Nederpelt. The Barendregt Cube with Deni-
tions and Generalised Redution. Information and Computation 126(2), 123-143,
1996.
[6‚ÑÑ P. de Groote. The onservation theorem revisited. International Conferene
on Typed Lambda Caluli and Appliations. Leture Notes in Computer Siene
LNCS 664, 163-178, Springer-Verlag, 1993.
[7‚ÑÑ F. Kamareddine and R.P. Nederpelt. Generalising redution in the -alulus.
Journal of Funtional Programming 5 (4), 637-651, 1995.
[8‚ÑÑ F. Kamareddine and R.P. Nederpelt. A useful -notation. Theoretial Computer
Siene 155, 85-109, 1996.
[9‚ÑÑ F. Kamareddine and A. Ros, -alulus a la de Bruijn & expliit substitution.
Leture Notes in Computer Siene 982, 7th international symposium on Pro-
gramming Languages: Implementations, Logis and Programs, PLILP '95, 45-62,
Springer-Verlag, 1995.
[10‚ÑÑ F. Kamareddine and A. Ros, Generalised 
e
-redution and expliit substitu-
tion. Leture Notes in Computer Siene 1140, 8th international symposium on
Programming Languages: Implementations, Logis and Programs, PLILP '96,
378-392, Springer-Verlag, 1996.
[11‚ÑÑ F. Kamareddine, A. Ros, and J.B. Wells. Caluli of Generalised -Redution
and Expliit Substitutions: The Type free and Simply Typed Versions. Journal
of Funtional and Logi Programming, Volume 1998, ISSN 1080-5230, MIT Press
[12‚ÑÑ A.J. Kfoury, J. Tiuryn and P. Urzyzyn. An analysis of ML typability. Journal
of the ACM 41(2), 368-398, 1994.
[13‚ÑÑ A.J. Kfoury and J.B. Wells. A diret algorithm for type inferene in the rank-2
fragment of the seond order -alulus. Proeedings of the 1994 ACM Conferene
on LISP in Funtional Programming, 1994.
[14‚ÑÑ A.J. Kfoury and J.B. Wells. New notions of redutions and non-semanti proofs
of -strong normalisation in typed -aluli. IEEE Logi In Computer Siene,
1995.
[15‚ÑÑ A.J. Kfoury and J.B. Wells. Addendum to new notions of redution and non-
semanti proofs of -strong normalisation in typed -aluli. Tehnial report,
Boston University.
[16‚ÑÑ J.W. Klop. Combinatory Redution Systems. Number 127 in Mathematial
Centre Trats. Mathematish Centrum, Amsterdam, 1980.
[17‚ÑÑ J.L. Krivine. Lambda-alul, types et modeles. Masson, 1990.
19
[18‚ÑÑ C. Mu~noz. Conuene and preservation of strong normalisation in an expliit
substitution alulus. Rapport de Reherhe No 2762, INRIA.
[19‚ÑÑ R.P. Nederpelt. Strong normalisation in a typed lambda alulus with lambda
strutured types. Ph.D. thesis, Eindhoven University of Tehnology, Department
of Mathematis and Computer Siene, 1973. Also appears in [20‚ÑÑ.
[20‚ÑÑ R.P. Nederpelt, J.H. Geuvers and R.C. de Vrijer, eds., Seleted Papers on Au-
tomath. North Holland, 1994.
[21‚ÑÑ L. Regnier. Lambda alul et reseaux. These de dotorat de l'universite Paris 7,
1992.
[22‚ÑÑ L. Regnier. Une equivalene sur les lambda termes. Theoretial Computer Siene
126, 281-292, 1994.
[23‚ÑÑ A. Sabry, and M. Felleisen. Reasoning about programs in ontinuation-passing
style. Pro. 1992 ACM Conf. LISP Funt. Program., 288-298, 1992.
[24‚ÑÑ M.H. Srensen. Strong normalization from weak normalization in typed -aluli.
Journal of Information and Comuptation 133(1), 35-71, 1997.
[25‚ÑÑ D. Vidal. Nouvelles notions de redution en lambda alul. These de dotorat,
Universite de Nany 1, 1989.
[26‚ÑÑ H. Xi. On weak and strong normalizations. Tehnial Report 96-187, Carnegie
Mellon University, 1996.
20
