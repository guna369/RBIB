Takustraße 7
D-14195 Berlin-Dahlem
Germany
Konrad-Zuse-Zentrum
fu¨r Informationstechnik Berlin
AMIN COJA-OGHLAN SVEN O. KRUMKE TILL NIERHOFF
Average Case Analysis of a Hard Dial-a-Ride Problem
ZIB-Report 03-12 (May 2003)
Average Case Analysis of a Hard Dial-a-Ride Problem
Amin Coja-Oghlan∗ Sven O. Krumke† Till Nierhoff‡
13th May 2003
Abstract
In the dial-a-ride-problem (DARP) objects have to be
moved between given sources and destinations in a trans-
portation network by means of a server. The goal is to
find a shortest transportation for the server. We study the
DARP when the underlying transportation network forms
a caterpillar. This special case is strongly NP-hard in the
worst case. We prove that in a probabilistic setting there
exists a polynomial time algorithm which almost surely
finds an optimal solution. Moreover, with high probabil-
ity the optimality of the solution found can be certified
efficiently. We also examine the complexity of the DARP
in a semi-random setting and in the unweighted case.
Keywords: dial-a-ride-problem, average case
analysis, MST-heuristic, Steiner trees
∗Humboldt-Universita¨t zu Berlin, Institut fu¨r Informatik,
Unter den Linden 6, 10099 Berlin, Germany. Email:
coja@informatik.hu-berlin.de. Research supported by the
German Science Foundation (DFG, grant FOR 413/1-1)
†Konrad-Zuse-Zentrum fu¨r Informationstechnik Berlin, De-
partment Optimization, Takustr. 7, D-14195 Berlin-Dahlem,
Germany. Email: krumke@zib.de. Research supported by the
German Science Foundation (DFG, grant Gr 883/10)
‡Humboldt-Universita¨t zu Berlin, Institut fu¨r Informatik,
Unter den Linden 6, 10099 Berlin, Germany. Email:
nierhoff@informatik.hu-berlin.de. Research supported by
the German Science Foundation (DFG, grant PR 296/6-3)
1 Introduction
In the dial-a-ride problem (DARP) we are given a
number of transportation requests which have to be
handled by means of a server. The server can han-
dle at most one request at a time and moves within a
specified transportation network. The aim is to find a
shortest (closed) tour for the server which serves all
requests. The DARP comprises many transportation
and routing problems in combinatorial optimization
such as the traveling salesman problem.
One of the applications that can be put within the
DARP framework is elevator scheduling [2, 18, 21].
This corresponds to the special case of the DARP
where the underlying transportation network forms
a caterpillar (cf. Figure 1). Here, the vertices on the
backbone correspond to the floors and the edges be-
tween vertices on the backbone and the feet can be
used to model start- and stopping delays of the ele-
vator. This special case is NP-hard, as has already
been shown in [21].
In reality, the task of scheduling an elevator is in
fact an online problem: transportation requests are
unknown until their respective release times and an
online algorithm must decide how to handle requests
without knowledge of the future. Practice is even
more demanding. An online algorithm is indeed re-
quired to deliver the next piece of the solution within
a very tight time bound. Thus, one is interested in
online algorithms which do not only deliver good so-
1
lutions but which also react in real-time.
A standard way to measure quality of online al-
gorithms is via competitive analysis [7]. All known
competitive algorithms for minimizing the total com-
pletion time (makespan) in online dial-a-ride prob-
lems have to solve instances of the (offline-) DARP
during their run [2, 4, 12]. It is shown in [2] that an
offline approximation algorithm for the DARP with
approximation ratio ρ implies a c(ρ)-competitive
algorithm for the online version, where c(ρ) =
1
4
(
4ρ+ 1 +
√
1 + 8ρ
)
. Moreover, as shown in [19,
20] even for the case of minimizing the maximum
or average waiting time online, an offline algorithm
for the DARP which optimizes the length of a tour
proves to be helpful, since it can be used to derive
online performance guarantees.
We conclude that there is a need to solve the
(offline-) DARP in real-time, although it is an NP-
hard problem.
Our Contribution In this paper we address the
complexity of the DARP on caterpillars in a prob-
abilistic setting. We show that the so-called MST-
heuristic, a fast and simple algorithm (see Sec-
tion 1.2), in most cases solves the problem exactly
if the transportation requests are chosen uniformly at
random. We expect this result to be of use in view
of the real-time issue for online algorithms as men-
tioned above.
Note that our result is also interesting in the con-
text of the algorithmic theory of random graphs [16]:
the DARP constitutes another combinatorial opti-
mization problem which is hard in the worst-case
and easy on average. The proof that the problem is
easy on average relies mainly on an analysis of the
so-called “balancing operation”. Although this oper-
ation has no effect in the worst case, it turns out that
in the average case balancing glues all non-Eulerian
connected components of requests together. More-
over, Eulerian components are rare. The analysis of
balancing causes considerable technical challenges.
The key is an appropriate description of the random
model, namely as a direct product of a random walk
and the choice of a random permutation.
We complement our algorithmic result with a
hardness result about the solvability of the DARP in a
semi-random setting, which, as a byproduct, implies
NP-hardness in the unweighted case.
Related Work The DARP is also known as the
Stacker-Crane-Problem. In [21] it is shown that the
problem is NP-hard even on caterpillars (with ap-
propriate edge lengths). An earlier NP-hardness re-
sult for the DARP on trees is contained in [14]. In
[15] the authors present a 9/5-approximation algo-
rithm for the DARP on general graphs. An improved
algorithm for trees with performance 5/4 is given
in [14]. On paths, the DARP can be solved in poly-
nomial time [3]. The paper [21] considers the DARP
when additional precedence constraints between the
requests are specified.
Organisation of the Paper In the rest of this in-
troduction we give a formal problem statement and
a synopsis of the results of the paper. The synopsis
has pointers to the proof sketches, which are con-
tained in the other sections. After some concluding
remarks and the bibliography, there is an appendix
containing detailed proofs.
1.1 Problem Statement
In the dial-a-ride problem DARP we are given an
edge-weighted undirected graph G = (V,E) and
a list of transportation requests L between the ver-
tices of G. The goal is to find a shortest (closed)
tour which serves all the requests in L. This task can
be viewed as adding new arcs A (empty moves) to
2
the directed graph (V, L) such that the resulting di-
rected multi-graph (V, L ∪A) is Eulerian [3,14,21].
We thus state DARP formally in the graph theoretic
framework as follows:
Definition 1 (Dial-a-Ride Problem DARP) An in-
stance of the dial-a-ride problem DARP consists of
an undirected graph G = (V,E) with edge-lengths
c : E → R+0 and a list L of pairs of vertices, called
requests. A solution is a multi-set A of pairs (u, v)
where {u, v} ∈ E such that the directed multi-graph
(V, L ∪ A) is Eulerian. The cost of A is the total
length of an Euler tour in (V, L ∪ A), where the
length of arc (u, v) equals the length of a shortest
path between u and v in G with respect to c.
As mentioned before, in this paper we consider
the situation where the undirected graph G in the
DARP is a caterpillar. The caterpillar Catn (see Fig-
ure 1) consists of a path on n vertices p1, . . . , pn
and n leaves l1, . . . , ln where li is attached to pi,
i = 1, . . . , n. The edges hi := {pi, li} are called
hairs, the leaves li are called feet, the edges bi :=
{pi, pi+1} are called backbone edges. Obviously,
Catn is a tree on 2n vertices.
hair
ln
foot
pn
backbone
p2p1
h1
l1 l2
b1 bn−1
Figure 1: The caterpillar graph Catn.
We further assume that the requests extend be-
tween feet of the caterpillar. This is not a restriction
of generality, as, instead of G = Catn, we could
consider G′ = Cat2n, where every second back-
bone edge and every second hair had length 0. Then,
introducing a request in G′ for every request in G
by replacing pi with l′2i and li with l2i−1, results in
an equivalent problem obeying the stated restriction.
Note that the application background suggests that
other requests than between feet in fact do not occur.
Any instance of this problem can be preprocessed
by adding to the list L of requests a set B of “arti-
ficial” requests such that the value of an optimal so-
lution does not increase. The set B is determined as
follows. Removing an edge e = {u, v} from G gives
a graph G− e that consists of two connected compo-
nents C1 3 u and C2 3 v. If the number of requests
starting in C2 and ending in C1 exceeds the number
of requests starting in C1 and ending in C2 by d, then
add d copies of the request (u, v) to B. This opera-
tion is performed for all edges e ∈ E. After this pro-
cedure, which we call balancing in the sequel, the
number of requests starting at any vertex v equals
the number of requests ending at v. Moreover, every
weakly connected component of (V, L) becomes a
strongly connected component of (V, L∪B) [3,21].
Therefore, the graph (V,L ∪ B) decomposes into
several Eulerian components, and the remaining task
is to connect these components at the least possible
cost.
1.2 Results
Before we describe our results, we introduce the ran-
dom model considered in this paper. Let [n] =
{1, . . . , n}.
Definition 2 The uniform model for the DARP, is a
list L = Ln,m of requests (ik, jk) ∈ [n] × [n], k =
1, . . . ,m. Each request (ik, jk) is chosen uniformly
at random and independently of all others from [n]2.
This is obviously equivalent to choosing L from
[n]2m uniformly at random.
3
A list L = Ln,m is interpreted as an instance of
the DARP where G = (V,E) is a caterpillar Catn,
and L is the list of requests {(li, lj) | (i, j) ∈ L}.
Balancing the instance yields an additional set B of
artificial requests. It is convenient to consider the
directed multigraphs D(L) = (V, L) and DB(L) =
(V, L∪B). To facilitate the analysis of the balancing
operation, we give an equivalent formulation of the
uniform model for the DARP in Section 2. We use
the notion of connectedness in the digraphs D(L)
and DB(L) in a non-standard way: a component of
D(L) or DB(L) is a maximal connected subgraph
which contains at least one arc. This extends to both
weak and strong connectivity. The reason behind this
concept is that for a solution of the problem isolated
vertices need not be incorporated into the desired Eu-
ler tour.
The following lemma summarizes relevant state-
ments about the components of D(L) that follow
from the theory of random graphs. See Section 4
for the nuts and bolts of the proof.
Lemma 3 Let L = Ln,m be chosen according to the
uniform model.
(i) If m ≥ 10n lnn, then D(L) is weakly con-
nected with probability 1 − o(1) as m → ∞
as has no isolated vertices.
(ii) If m ∼ γn for some fixed γ > 0, then the num-
ber of components ofD(L) that are directed cy-
cles of length k has asymptotically Poisson dis-
tribution with parameter 1k
(
γ
exp(2γ)
)k
(iii) If m ¿ n or m À n, then D(L) has no Eu-
lerian component with probability 1 − o(1) as
m→∞.
If DB(L) has only one component, then any Eu-
ler tour in DB(L) already is an optimal solution.
However, matters are not that simple in general: by
Lemma 3, part (ii), D(L) may contain several Eule-
rian components each of which remains a component
of DB(L).
If DB(L) has more than one component then, as
mentioned in the introduction, the DARP reduces to
connecting the components at the least possible cost.
The MST-heuristic for this task works as follows:
first, the shortest distance of every pair of compo-
nents is computed. According to the distances, a
minimum spanning tree T on the components is de-
termined. Finally, each edge of T connecting two
components is replaced by a circuit of twice the
edge length, connecting the same components. The
MST-heuristic is a 2-approximation algorithm for the
DARP on trees [14]. It can be shown that it is optimal
in case of the DARP on paths [3].
The main result of this paper is the following the-
orem. The proof is sketched in Section 4.
Theorem 4 Let L = Ln,m be chosen according to
the uniform model. The MST-heuristic finds an opti-
mal solution with probability 1 − o(1) as m → ∞.
Moreover, optimality can be certified efficiently.
The basis of this result is the following key techni-
cal lemma, which states essentially that it is unlikely
for DB(L) to have more than one component, be-
sides those that result from Eulerian components like
in Lemma 3, part (ii):
Lemma 5 Let L = Ln,m be chosen according to the
uniform model. With probability 1 − o(1) as m →
∞, all non-Eulerian components ofD(L) are part of
one single component of DB(L).
Thus, in almost every case the balancing operation
connects all components of D(L) except the Eule-
rian ones. The proof of Lemma 5 is sketched in Sec-
tion 3.
4
We complement our positive results about the
solvability of the DARP in the average case by a hard-
ness result in a semi-random setting, thereby improv-
ing upon the hardness results given in [13, 14, 21].
The following semi-random model for constructing
instances of the DARP is inspired by a threshold re-
sult of Feige and Kilian on the complexity of the
semi-random independent set problem [10]. First,
a list L = Ln,m of m requests is chosen accord-
ing to the uniform model. Then, an adversary adds
further requests, thereby producing a list L′ ⊃ L.
Note that the requests added by the adversary are not
randomly chosen. We shall say that a polynomial
time algorithm solves the semirandom (n,m)-DARP
if with probability 1 − o(1) as n → ∞ for any ex-
tension L′ of the randomly chosen part L = Ln,m on
input L′ the algorithm outputs an optimal solution of
DARP; clearly, probability is taken over the choice of
Ln,m. Obviously, ifmÀ n lnn, then the MST algo-
rithm solves the semirandom (n,m)-DARP, because
by Lemma 3 with high probability the graph D(L)
is connected and has no isolated vertices. Conse-
quently D(L′) ⊃ D(L) is connected. We obtain the
following theorem.
Theorem 6 Let L = Ln,m be chosen according to
the uniform model. If m À n lnn, then the MST-
heuristic solves the semirandom (n,m)-DARP.
Conversely, assume that the caterpillar Catn has
uniform edge lengths. Ifm¿ n lnn, then there is no
polynomial time randomized algorithm that solves
the semirandom (n,m)-DARP, unless RP = NP.
Note that the case m = 0 also gives a strong NP-
hardness result for the plain worst case, as the edge
lengths of the caterpillar are uniform. The proof of
Theorem 6 is sketched in Section 5.
2 Random Walks and the Uniform
Model
Given L = Ln,m, by di(L) we denote the number
of occurences of i in L. Clearly, d1(L) + · · · +
dn(L) = 2m. Now let di ∈ {0, 1, 2, 3, . . .} for
i = 1, . . . , n. Let Ln,m(d1, . . . , dn) denote the
event that di(L) = di for all i. In order to study
the effect of the balancing operation on the directed
multigraph D(Ln,m(d1, . . . , dn)), we shall describe
a simple random experiment that induces the same
probability distribution as does the map
Ln,m(d1, . . . , dn) 3 L 7→ D(L). (1)
Let
Wm = {(x1, . . . , x2m)|
2m∑
i=1
xi = 0, xi ∈ {−1,+1}}
be the set of all ±1-sequences of length 2m contain-
ing as many +1’s as −1’s. Note that the sequence
x1, . . . , x2m is an unbiased Random Walk [11], con-
ditional on
∑2m
i=1 xi = 0. Then
#Wm =
(
2m
m
)
.
Let x = (x1, . . . , x2m) ∈Wm and j ∈ {1, . . . , 2m}.
We let
Ix(j) = #{i ≤ j|xi = xj},
that is, xj is the Ix(j)th occurrence of the value
of xj .
Now let Ω =Wm×Sm, where Sm is the symmet-
ric group of order m!. We equip Ω with the uniform
distribution. For each element (x, σ) ∈ Ω, we con-
struct a directed bipartite graph H(x, σ) on the ver-
tex set {a1, . . . , a2m} as follows. The arc (ai, aj)
is present if and only if xi = 1, xj = −1, and
σIx(i) = Ix(j). Thus, the graph H(x, σ) consists
5
of precisely m directed arcs. Finally, contracting the
vertex sets
{a1, . . . , ad1}, {ad1+1, . . . , ad1+d2},
. . . , {ad1+···+dn−1+1, . . . , a2m}
gives a directed multigraph D(x, σ) of order n (see
Figure 2 for an illustration).
−−+−+−+(xj)2mj=1
Catn
σ
Figure 2: Illustration of the reformulated random
model.
Lemma 7 The distribution induced by (1) coincides
with the distribution induced by the map Ω 3
(x, σ) 7→ D(x, σ). 2
3 Non-Eulerian Components
Lemma 5 is equivalent to the statement that the arti-
ficial requests added by the balancing operation con-
nect all non-Eulerian components of D(L). Note
that Lemma 5 vacuously follows from Lemma 3 if
m ≥ 10n lnn. We therefore assume for the rest of
the section that m¿ n lnn.
To prove Lemma 5, the alternative formulation of
the uniform model introduced in Section 2 turns out
to be adequate. Let d1, . . . , dn be fixed. Then the set
B of balancing requests depends only on the choice
of x ∈ Wm. The first part of the proof is to bound
the number of components of B. The second part is
to show that with high probability the components of
B and the non-Eulerian components of D(L) glue
together to form one large component. In fact, the
probability that both parts hold turns out to be inde-
pendent of the choice of d1, . . . , dn. Thus, Lemma 5
follows from Lemma 7.
We begin collecting a bit of notation and some
simple observations. The set B contains only re-
quests along edges of G = Catn. Let
EB =
{
e ∈ E(G) : there exists a request
along e in B
}
.
Note that two components of D(x, σ) are connected
by B if and only if they are connected by EB . Thus,
the rest of analysis may be focused on the set EB .
Let us call a maximal set S = {bi, bi+1, . . . , bi+l} ⊂
EB of consecutive backbone edges in EB a back-
bone segment.
Lemma 8 With high probability, there are at most
O(m3/4) backbone segments.
Sketch of proof. Let i ∈ {1, . . . , n − 1}. Observe
that, unless
x1+. . .+xd1+...+di = xd1+...+di+1+. . .+x2m = 0,
balancing yields a request along bi and hence bi ∈
EB . Then, the number of gaps between backbone
segments is bounded by the number Zm of passages
through zero of the random walk x1, . . . , x2m, i.e.,
by the number of indices j where x1+ · · ·+xj = 0.
One can show that the expectation of zm, divided
by
√
m, converges to
√
pi as m → ∞. Therefore,
Lemma 8 follows by applying Markov’s inequality.
2
Consider the auxiliary directed bipartite graph
H(x, σ) from Section 2. A vertex aj of H belongs
to the vertex li of D(x, σ), where i = i(j) is cho-
sen such that d1 + . . . + di−1 < j ≤ d1 + . . . + di.
6
It is called active, if hi(j) ∈ EB , and inactive other-
wise. Observe that the active aj are those that belong
to vertices li of D(x, σ) with different indegree and
outdegree. As there are only requests between feet of
G, hi ∈ EB only if bi ∈ EB or bi−1 ∈ EB . There-
fore, every hair hi in EB is incident to a backbone
segment S, and thus each active aj that belongs to li
can be assigned to S. The purpose of this assignment
is, that if (aj , aj′) is an edge of H(x, σ) and both
aj and aj′ are active, then the backbone segments
that aj and aj′ are assigned to are connected through
the hairs hi(j),hi(j′) and the request (li(j), li(j′)). As
every non-Eulerian component of D(x, σ) contains
a vertex with different indegree and outdegree, it is
connected to a backbone segment. Thus, to com-
plete the proof of Lemma 5 it suffices to show that
all backbone segments are connected in the way just
described. First we show that the number of active
vertices of H(x, σ) is large:
Lemma 9 With probability 1− o(1) as m→∞, we
have #{j | aj is active} ≥ m/2.
Sketch of proof. The vertex aj can only become
inactive if di(j) is even. The probability attains its
maximum of 1/2 + o(1) if di(j) = 2. Therefore,
the expected number of active vertices is at least
2m(1/2 − o(1)). Based on the assumption that
m ¿ n lnn, one can verify that the variance is
dominated by the square of the expectation, and by
Chebychev’s inequality the lemma follows. 2
Next, we reduce H to the active vertices in the fol-
lowing way: for each inactive aj with xj = −1 let
τj be such that xτj = 1, and i(τj) = i(j). This is a
perfect matching of the inactive vertices. If (aj , aj′)
is an edge of H where aj is active and aj′ is inactive,
then H contains another edge (aτj′ , aj′′). Replace
these two edges with the edge (aj , aj′′) and proceed
until all edges are incident to active vertices. We call
the resulting graph H ′. Note that, by the construc-
tion, the backbone segments S and S′ are connected
through hairs in EB and requests if (aj , aj′) is an
edge of H ′, aj is assigned to S, and aj′ is assigned
to S′.
For each backbone segment S let
m+(S) = {j | aj assigned to S and xj = +1}
and
m−(S) = {j | aj assigned to S and xj = −1}.
Clearly, for each backbone segment S,
∑{xj |
aj assigned to S} = 0 and hence #m+(S) =
#m−(S). As the choice of τ only depends on x,
a simple counting argument shows that H ′ is a uni-
formly distributed matching of m+ =
⋃
Sm
+(S)
with m− =
⋃
Sm
−(S).
Then the proof of the theorem is complete with the
following
Lemma 10 With probability 1 − o(1) as m → ∞,
all backbone segments are in the same component of
DB(L).
Sketch of proof. Assume that there is a collection
S1, . . . , Sk of backbone components that are not in
the same component of DB(L) as the others. We
may assume that l =
∑k
i=1#m
+(Si) ≤ m′/2,
where m′ ≥ m/2 is the number of active vertices,
since otherwise we consider the collection of the re-
maining backbone segments. As m+(S) ≥ 1 for
every backbone segment, l ≥ k. The probability,
taken over the distribution of H ′, that no edge of
H ′ connects one of the Si with a backbone compo-
nent not in S1, . . . , Sk is l!(m
′−l)!
m′! ≤ 1/
(
m′
k
)
. Thus,
the expected number of such collections is at most∑
k
(
m3/4
k
)
/
(
m′
k
)
. As
(
m3/4
k
)
/
(
m′
k
)
= O((em−1/4)k)
the lemma follows. 2
4 Eulerian Components
In this section, we first sketch the proof of Lemma 3.
Then we estimate the number of vertices on Eulerian
7
components of D(Ln,m). Both results rely on results
on the global structure of the random graph Gn,m;
see [6] for a detailed exposition. Finally we sketch
the proof of Theorem 4.
Given L = Ln,m, we obtain a simple graph S(L)
on {1, . . . , n} that consists of all edges {v, w}, v 6=
w, such that (v, w) ∈ L (or (w, v) ∈ L). Note that
the connected components of S(L) are in one-to-one
correspondence with the connected components of
the directed multigraph D(L). Since the expected
number of loops in D(L) is m/n, and the expected
number of multiple edges is ≤ m3/n4, the number
of edges of D(L) is at least m/2, with high proba-
bility.
Suppose that m ≥ 10n lnn. Then with high prob-
ability S(L) has at least 5n lnn edges. Hence the
first part of Lemma 3 follows from the fact that with
high probability the random graph Gn,5n lnn is con-
nected.
As for the proof of the second part of Lemma 3,
denote by Xk the number of connected components
of D(L) that are directed k-cycles. Then a straight-
forward computation yields
E(Xk) ∼ 1
k
·
(
γ
exp(2γ)
)k
,
where γ = m/n. Moreover, for the rth factorial
moment of Xk we have
Er(Xk)
E(Xk)r
∼ 1.
Thus, [6, p. 25] entails that the distribution of Xk is
asymptotically Poisson. Finally, a somewhat tedious
computation proves part (iii).
Lemma 11 Let L = Ln,m be chosen according to
the uniform model. Then with probability 1 − o(1)
as m→∞ the number of vertices on Eulerian com-
ponents of D(L) is at most m1/8.
Sketch of proof. If m ≥ 10n lnn, then with high
probability D(L) is connected, by Lemma 3. Conse-
quently, with high probability there are no Eulerian
components at all. Now let us assume that 3n/4 ≤
m ≤ 10n lnn. Then results on the global structure
of the random graph imply that with high probability
S(L) has no component of order at least 100 lnn and
at most n2/3. Moreover, there is precisely one com-
ponent of order ≥ n2/3, the so-called giant compo-
nent. A simple counting argument proves that With
high probability the component ofD(L) correspond-
ing to the giant component of S(L) is not Eulerian.
A lengthy computation shows that in the casem ≥
3n/4 the graph D(L) has no Eulerian component of
order at most n1/4 that contains more edges than ver-
tices. In addition, the number of vertices on compo-
nents of D(L) that are directed cycles is O(1). Fi-
nally, in the case m ≤ 3n/4 the expected number of
vertices on Eulerian components is O(1) with high
probability. Thus, applying the Markov inequality
completes the proof of Lemma 11. 2
As for the proof of Theorem 4, note that by
Lemma 5 with high probability there is only one
component CB in DB(L) in addition to the Eulerian
components of D(L). We may assume that
√
n ≤
m ≤ 10n lnn, as otherwise, by Lemma 3, D(L) has
no Eulerian components. Hence by Lemma 11, the
number of vertices in the Eulerian components is at
most m1/8. Thus with high probability DB(L) has
the
Property 12 Between any two feet li and lj , i < j,
that belong to Eulerian components of D(L), there
is a foot lk, i < k < j, that belongs to CB .
As a consequence the distance graph on the compo-
nents corresponds to a star metric where the center
is CB . Therefore, the MST heuristic finds an opti-
mal tour. Observe that Property 12 can be checked in
polynomial time. Hence it provides the desired cer-
tificate for the optimality of the solution produced by
8
the MST-heuristic, thereby proving Theorem 4.
5 A Hardness Result
As for the proof of Theorem 6, note that in the case
m À n lnn the graph D(Ln,m) is connected with
high probability. Consequently, the MST-heuristic
finds an optimal solution of the semirandom prob-
lem.
Now suppose m ¿ n lnn. Consider an instance
(S, T,E) of the bipartite Steiner tree problem, where
S denotes the set of Steiner vertices, T the set of ter-
minals, and E is the edge set. The bipartite Steiner
tree problem is NP-hard even in the case d(s) = 4
for all s ∈ S [1, 5]. We shall prove that a polyno-
mial time algorithm that solves the semirandom dial-
a-ride-problem optimally yields a randomized algo-
rithm for the bipartite Steiner tree problem, implying
that NP = RP .
Let L = Ln,m. We shall show how the adversary
can include the instance (S, T,E) of the Steiner tree
problem into the graph D(L) such that an optimal
solution of the dial-a-ride-problem gives an optimal
Steiner tree. With high probability there are at least
n23/24 vertices in {l1, . . . , ln} that are not incident
with any edge in D(L). Partition the set {l1, . . . , ln}
into
√
n pieces
{l1, . . . , l√n}, {l√n+1, . . . , l2√n},
. . . , {ln−√n+1, . . . , ln}
With high probability there are at least N = n1/8
pieces, which we denote by B1, . . . , BN , starting
with six vertices not incident with arcs inD(L) each.
Let Ij denote the set of the first six vertices of Bj ,
j = 1, . . . , N and let I be the union of the sets Ij .
We may assume that #S = N/(4!).
First, for each request (ui, vi) in L, i = 1, . . . ,m,
the adversary adds a request (vi, ui). Then, for each
vertex v ∈ {l1, . . . , ln} \ I the adversary adds the
requests (v, ln), (ln, v). Let L′ denote the resulting
list of requests. Then D(L′) has one large Eulerian
component on the vertex set {l1, . . . , ln} \ I .
For each Steiner vertex s and each permuta-
tion σ ∈ S4 the adversary picks a set Iσ(s) ∈
{I1, . . . , IN} such that each Ij is used precisely
once. Assume that Iσ(s) consists of the vertices
v6, . . . , v1, from left to right and let t1, t2, t3, t4 be
the neighbors of s. The adversary labels v2 with
tσ(1), v3 with tσ(2), v4 with tσ(3), and v5 with tσ(4).
The vertices v1 and v6 are not labeled. Finally, for
each t ∈ T the adversary adds to L′ a directed cycle
connecting all vertices that are labeled with t. Let L′′
denote the resulting list of requests.
In summary, the DARP instance constructed by the
adversary consists of disjoint cycles, one for each
terminal, and one giant component Cr containing
all randomly chosen requests. Every Steiner vertex
is represented by 4! gadgets, each consisting of six
hairs where the first and the last foot of each gadget
are isolated; each of the four feet in the middle lies
on a cycle corresponding to the terminal the foot is
labeled with.
t1t2t3t4
Figure 3: InM the Steiner vertex s is connected with
the terminals t1, t2, and t3.
Let M be a Steiner tree in (S, T,E) of cost cM .
The following tour in the DARP instance correspond-
ing to D(L′′) has cost 2cM + 2#T + 4 plus the to-
tal length of the requests in L′′: For every s ∈ S
9
with dM (s) = k > 0 let the neighbors of s in M be
t1, . . . , tk. Let σ ∈ S4 be such that vi+1 is labeled
with ti, i = 1, . . . , k, in Iσ(s) = {v1, . . . , v6}. Con-
nect v2, . . . , vk+1 with a total of 4k − 2 requests of
length 1 as indicated in Figure 3. Then the cycles
corresponding to the terminals are connected since
the terminals are connected by M . Finally, connect
Cr with the cycles using 6 requests of length 1. The
total length of the added requests is
6 +
∑
s∈S
dM (s)>0
4dM (s)− 2
= 6 + 4cM − 2#{s ∈ S | dM (s) > 0}
= 6 + 4cM − 2cM + 2#T − 2
= 2cM + 2#T + 4,
where we have made use of the fact that
cM = #T +#{s ∈ S | dM (s) > 0} − 1.
Conversely, given a solution of the DARP which
is by c longer than the total length of the requests in
L′′, one can compute in polynomial time a Steiner
tree in (S, T,E) of length at most c/2 − 2 − #T .
This Steiner tree can be found changing the given
solution to a solution of at most the same length that
results from the desired Steiner tree by applying the
procedure described in the previous paragraph.
6 Conclusions and Open Problems
We have shown that the DARP on caterpillars, while
NP-hard in the worst-case, is solvable efficiently on
average. In view of the online setting described in the
introduction, this can be regarded as a first step to-
wards an investigation of the online dial-a-ride prob-
lem in the average case.
On the other hand, the (offline-) DARP is inter-
esting in its own right. In this respect it would be
interesting to investigate whether our methods carry
over to more general transportation networks such as
arbitrary trees.
Another potential extension concerns the distribu-
tion of the requests. This distribution might be bi-
ased according to given weights 0 ≤ p1, . . . , pn,
where
∑
i pi = 1. Then the probability that a ran-
dom request is (li, lj) equals pipj . Note that the uni-
form distribution corresponds to the case pi ≡ 1/n.
We expect that our methods extend to this biased ran-
dom model, though the calculations seem to become
considerably more complicated.
References
[1] P. ALIMONTI AND V. KANN, Hardness of approxi-
mating problems on cubic graphs, in Proceedings of
the 3rd Italian Conference on Algorithms and Com-
plexity, vol. 1203 of Lecture Notes in Computer Sci-
ence, Springer, 1997, pp. 288–298.
[2] N. ASCHEUER, S. O. KRUMKE, AND J. RAM-
BAU, Online dial-a-ride problems: Minimizing the
completion time, in Proceedings of the 17th Interna-
tional Symposium on Theoretical Aspects of Com-
puter Science, vol. 1770 of Lecture Notes in Com-
puter Science, Springer, 2000, pp. 639–650.
[3] M. J. ATALLAH AND S. R. KOSARAJU, Efficient
solutions to some transportation problems with ap-
plications to minimizing robot arm travel, SIAM
Journal on Computing, 17 (1988), pp. 849–869.
[4] G. AUSIELLO, E. FEUERSTEIN, S. LEONARDI,
L. STOUGIE, AND M. TALAMO, Algorithms for
the on-line traveling salesman, Algorithmica, 29
(2001), pp. 560–581.
[5] M. BERN AND P. PLASSMANN, The Steiner prob-
lem with edge lengths 1 and 2, Information Process-
ing Letters, 32 (1989), pp. 171–176.
[6] B. BOLLOBA´S, Random graphs, Cambridge Uni-
versity Press, Cambridge, UK, 2 ed., 2001.
10
[7] A. BORODIN AND R. EL-YANIV, Online Computa-
tion and Competitive Analysis, Cambridge Univer-
sity Press, 1998.
[8] E. G. COFFMAN, C. A. COURCOUBETIS, M. R.
GAREY, D. S. JOHNSON, L. A. MCGEOCH, P. W.
SHOR, R. R. WEBER, AND M. YANNAKAKIS,
Fundamental discrepancies between average-case
analyses under discrete and continuous distribu-
tions - a bin packing case study, in Proceedings of
the 23th Annual ACM Symposium on the Theory of
Computing, 1991, pp. 230–240.
[9] E. G. COFFMAN AND G. S. LUEKER, Probabilis-
tic analysis of Packing and Partitioning Algorithms,
John Wiley, New York, 1991.
[10] U. FEIGE AND J. KILIAN, Heuristics for semiran-
dom graph problems, Journal of Computer and Sys-
tem Sciences, 63 (2001), pp. 639–671.
[11] W. FELLER, An Introduction to Probability Theory
and Its Applications, vol. 1, John Wiley & Sons,
Inc., 3 ed., 1968.
[12] E. FEUERSTEIN AND L. STOUGIE, On-line single
server dial-a-ride problems, Theoretical Computer
Science, (2001). To appear.
[13] G. N. FREDERICKSON, A note on the complexity of
a simple transportation problem, SIAM Journal on
Computing, 22 (1993), pp. 57–61.
[14] G. N. FREDERICKSON AND D. J. GUAN, Nonpre-
emptive ensemble motion planning on a tree, Journal
of Algorithms, 15 (1993), pp. 29–60.
[15] G. N. FREDERICKSON, M. S. HECHT, AND C. E.
KIM, Approximation algorithms for some routing
problems, SIAM Journal on Computing, 7 (1978),
pp. 178–193.
[16] A. FRIEZE AND C. MCDIARMID, Algorithmic the-
ory of random graphs, Random Structures and Al-
gorithms, 10 (1997), pp. 5–42.
[17] G. R. GRIMMETT AND D. R. STIRZAKER, Prob-
ability and Random Processes, Oxford University
Press, New York, 1992.
[18] M. GRO¨TSCHEL, S. O. KRUMKE, AND J. RAM-
BAU, eds., Online Optimization of Large Scale Sys-
tems, Springer, Berlin Heidelberg New York, 2001.
[19] D. HAUPTMEIER, S. O. KRUMKE, AND J. RAM-
BAU, The online dial-a-ride problem under reason-
able load, in Proceedings of the 4th Italian Confer-
ence on Algorithms and Complexity, vol. 1767 of
Lecture Notes in Computer Science, Springer, 2000,
pp. 125–136.
[20] , The online dial-a-ride problem under reason-
able load, Theoretical Computer Science, (2002). A
preliminary version appeared in the Proceedings of
the 4th Italian Conference on Algorithms and Com-
plexity, 2000, vol. 1767 of Lecture Notes in Com-
puter Science.
[21] D. HAUPTMEIER, S. O. KRUMKE, J. RAMBAU,
AND H.-C. WIRTH, Euler is standing in line, Dis-
crete Applied Mathematics, 113 (2001), pp. 87–
107. A preliminary version appeared in the Proceed-
ings of the 25th International Workshop on Graph-
Theoretic Concepts in Computer Science, 2000, vol.
1665 of Lecture Notes in Computer Science.
11
Appendix
A Proof of Lemma 7
Fix d = (d1, . . . , dn). Let Dn,m denote the set of all directed multigraphs on the vertex set {1, . . . , n} with
precisely m edges. Further, let Dn,m(d1, . . . , dn) denote the set of all D ∈ Dn.m such that the vertex i
is incident with precisely di arcs for all i (a loop contributes 2 incidences). Let ϕ : Ln,m(d) → Dn,m(d)
denote the map (1). Finally, let ψ :Wm × Sm → Dn,m(d) denote the map (x, σ) 7→ D(x, σ). Then we are
to prove that the distributions Pϕ and Pψ coincide, where both Ln,m(d) and Wm × Sm are equipped with
the uniform distribution.
Thus, let G ∈ Dn,m(d). We have to show that
#ψ−1(G)
#Wm × Sm =
#ϕ−1(G)
#Ln,m(d)
.
Suppose that G has precisely vi arcs of multiplicity i, i = 1, 2, . . ., and that v0 is the number of loops of G.
Indeed, let
Ei = {e(i)1 , . . . , e(i)vi }
be the set of all arcs of multiplicity i. Then we can count the inverse images of G under the map ϕ as
follows:
• Choose one of the m positions in the list m for e(1)1 .
• Choose one of the remaining m− 1 positions for e(1)2 .
• · · ·
• Choose a set of i remaining positions for e(i)j .
• · · ·
Thus,
#ϕ−1(G) =
∞∏
i=1
vi−1∏
j=0
(
m− ij −∑i−1k=1 kvk
i
)
=
m!∏∞
i=1 i!vi
In order to determine #ψ−1(G), let A(i) denote the set of all arcs that are incident with vertex i. Let us
first count the number of maps
σi : {1, . . . , di} → E(i)
such that #σ−1i (e) equals the multiplicity V (e) of e for all e ∈ E(i). Let E(i) = {e1, . . . , ed1}. Obviously,
the number of such maps is
di∏
j=1
(
di −
∑j−1
k=1 V (ek)
V (ej)
)
=
di!∏di
j=1 V (ej)!
12
Therefore, the number of tuples σ = (σ1, . . . , σn) is
d1! · · · dn!∏
e∈E(1) V (e)! · · ·
∏
e∈E(n) V (e)!
=
d1! · · · dn!∏∞
i=1 i!2vi
.
Note that each tuple σ = (σ1, . . . , σn) gives precisely
∏∞
i=1 i!
vi inverse images of G under the map ψ,
because for each arc of multiplicity i from vertex x to vertex y there are precisely i! ways to map the
corresponding +1s to the corresponding −1s. Moreover, each element of ψ−1(G) is counted precisely
once.
Finally, observe that
#Wm × Sm =
(
2m
m
)
m! =
(2m)!
m!
and that
#Ln,m(d) =
(
2m
d1
)(
2m− d1
d2
)
· · ·
(
2m− d1 − · · · − dn−1
dn
)
=
(2m)!
d1! · · · dn! .
We conclude that
#ψ−1(G)
#Wm × Sm =
d1! · · · dn!m!
(2m)!
=
#ϕ−1(G)
#Ln,m(G)
,
thereby proving the lemma.
B Proofs for Section 3
In this section we give full proofs of Lemma 8 and of Lemma 9. Let sj := x1 + . . . + xj and Di :=
d1 + . . .+ di.
Lemma 8 The missing detail in the sketch of the proof of Lemma 8 is the statement that E[zm] =
√
pim.
This can be deduced from the so-called arc sine law for the unbiased random walk. Let X1, X2, . . . be i.i.d.
with P (Xi = 1) = P (Xi = −1) = 1/2 and let Si =
∑
j≤iXj . Define T2m to be the largest index 2i ≤ 2m
with S2i = 0. The arc sine law for last visit to origin [17, p.80] states that
P (T2m = 2i) = P (S2i = 0) P (S2m−2i = 0) .
Note that P (x1 + . . .+ x2j = 0) = P (S2j = 0 | S2m = 0) and that
P (S2m = 0 | S2j = 0) = P (S2m−2j = 0) .
13
Therefore
E[zm] =
∑
j≤m
P (x1 + . . .+ x2j = 0)
=
∑
j≤m
P (S2j = 0 | S2m = 0)
=
∑
j≤m
P (S2j = 0)
P (S2m = 0)
P (S2m = 0 | S2j = 0)
=
∑
j≤m
P (S2j = 0)
P (S2m = 0)
P (S2m−2j = 0)
=
1
P (S2m = 0)
∑
j≤m
P (T2m = 2j)
=
1
P (S2m = 0)
,
where P (S2m = 0) ∼ 1/
√
pim.
Lemma 9 The following lemma implies that, by the assumption that m ¿ n lnn, we can assume that
maxi di ≤ n1/2.
Lemma 13 Suppose that m ≤ n5/4. Then with high probability there is no vertex of degree ≥ n1/2 in
D(Ln,m).
Proof. The probability that a fixed vertex v has degree d is(
m
d
)
(2n− 1)d(n− 1)2(m−d)n−2m ≤
(
2em
dn
)d
.
Consequently, the expected number of vertices of degree ≥ d is
≤ n
∞∑
j=d
(
2em
jn
)j
≤ n
(
2em
dn
)d dn
dn− 2em.
By our assumption m ≤ n5/4, in the case d = n1/2 the right hand side is o(1), whence with high probability
there are no vertices of degree ≥ n1/2. 2
Assume that di = 2k. A vertex aj in H(x, σ) where i(j) = i is inactive iff the indegree of li in D(x, σ)
equals its outdegree, i.e. sDi − sDi−1 = 0. The probability of this event is the same as the probability that
sdi = 0, which is
f(k) :=
(
2k
k
)(2(m−k)
m−k
)(
2m
m
)
14
To bound this probability we may assume by symmetry that k ≤ m/2. We first observe that
f(k + 1)
f(k)
=
2j + 1
j + 1
m− j
2m− 2j − 1 = (2−
1
j + 1
)(
1
2
+
1
4m− 4j − 2) ≤ 1−
1
2j + 2
+
1
2m− 2j − 1 .
The last term is less than 1 if k ≤ m/2− 1, thus f(k) is maximal for k = 1:
f(k) ≤ f(1) =
(
2
1
)(
2(m−1)
m−1
)(
2m
m
) = m
2m− 1 = 1/2 + o(1). (2)
Let the random variable Y be the number of active vertices and Y¯ = 2m − Y be the number of
inactive vertices. Denote by vi the event that sDi − sDi−1 6= 0. Then, by the previous computa-
tion, E (Y ) =
∑n
i=1 P (vi) di ≥ m − O(1). Therefore, by Chebychev’s inequality, P (Y ≤ m/2) ≤
(4 + o(1))Var (Y ) /E (Y )2. To bound this further, let
Var (Y ) = Var
(
Y¯
)
= E
(
Y¯ 2
)− E (Y¯ )2 = A+B,
where
A =
∑
i6=j
didj(P (v¯i ∧ v¯j)− P (v¯i)P (v¯j))
and
B =
∑
i≤n
d2i (P (v¯i)− P (v¯i)2).
We compute
A/E
(
Y¯
)2 ≤ ∑i6=j didj(2didi )(2djdj )(2mm )−2
[(
2m
m
)(2(m−di−dj)
m−di−dj
)− (2(m−di)m−di )(2(m−dj)m−dj )]∑
i 6=j didj
(
2di
di
)(2dj
dj
)(
2m
m
)−2(2(m−di)
m−di
)(2(m−dj)
m−dj
)
≤ max
i 6=j
(
2m
m
)(2(m−di−dj)
m−di−dj
)
(2(m−di)
m−di
)(2(m−dj)
m−dj
) − 1
= O
(
1/
√
pi2m(m− di − dj)
1/
√
pi2(m− di)(m− dj)
− 1
)
,
where the last equality follows from Stirling’s formula. By the assumption that maxi≤n di ≤ m1/2, we get
that
max
i6=j
√
(m− di)(m− dj)
m(m− di − dj) − 1 = maxi6=j
√
1 +
didj
m(m− di − dj) − 1 ≤
√
1 +
2
m
− 1 ≤ 1/m
15
and, with (2), A/E (Y )2 ≤ A/E (Y¯ )2 = O(1/m). For B, we simply note that
B/E (Y )2 =
∑
i≤n d
2
i P (vi)P (v¯i)∑
i≤n diP (vi)E (Y )
≤ max
i≤n
diP (v¯i)
E (Y )
≤ 1/√m.
We conclude that Var (Y ) /E (Y )2 = O(1/
√
m) and thus Y ≥ m/2 with high probability.
C Proofs for Section 4
In this section, we shall prove Lemma 3 and the assertions made in section 4. Though the proofs turn out to
be quite technical and rather lengthy, we give all arguments in full detail. The first part of Lemma 3 follows
from Lemma 16. The second part of Lemma 3 is Lemma 28 below. The third part follows from the proofs
of Lemma 23 and Lemma 25. Lemma 11 summarizes the results of this section up to Lemma 22 (the case
of so-called complex components) and Lemmas 23, 24, and 25 (the case of directed cycles). The fact that
Property 13 is valid almost surely is a consequence of Corollary 27.
Let L = Ln,m. We call I ⊂ {1, . . . ,m} a k-fold edge if #I = k and the following conditions hold.
(i) For all i, j ∈ I the ith entry (xi, yi) and the jth entry (xj , yj) of L coincide up to the direction, i.e.
{xi, yi} = {xj , yj}.
(ii) There is no proper superset J ⊃ I that satisfies 1.
Let vk(L) denote the number of k-fold edges of L.
A loop of L is an index i such that for the ith entry (xi, yi) of L we have xi = yi. By v0(L) we denote
the number of loops of L. Furthermore, we put
v(L) = (v0(L), v1(L), v2(L), . . .).
Conversely, if v = (vk)k=0,1,2,..., then Lv denotes the set of all L ∈ Ln,m such that v(L) = v. Put
m(v) =
∞∑
k=1
v(k).
Lemma 14 Given a sequence v, the map S|Lv : Lv → Gn,m(v) maps the uniform distribution on Lv onto
the uniform distribution on the space Gn,m(v) of all simple graphs with n vertices and m(v) edges.
Proof. First observe that the map
S1 :
 (a1, b1)..
.
(am, bm)
 7→
 {a1, b1}..
.
{am, bm}

16
maps the uniform distribution on Lv onto the uniform distribution on its image S1(Lv) For any element of
S1(Lv) has precisely 2m−v0 inverse images.
Further, we claim that the map
S2 :
 e1..
.
em
 7→ {e1, . . . , em}
maps the uniform distribution on S1(Lv) onto the uniform distribution on Gn,m(v). First observe that S2
is well-defined, because #S2(S1(L)) = m(v) for all L ∈ Lv. Now let E be a set of m(v) edges. Then
there are m(v)! tuples (e1, . . . , em(v)) such that E = {e1, . . . , em(v)}. Each such tuple gives an element of
S−12 (E) by writing down one copy of each of the first v1 entries of (e1, . . . , em(v)), 2 copies of each of the
following v(2) entries, and so on. Finally, insert loops into the remaining s places. Thus, each tuple gives
rise to
ns
∞∏
j=1
vj−1∏
i=0
(
m− ij −∑j−1r=1 rv(r)
j
)
=
ns(m)m−s∏∞
j=1 j!
vj
inverse images in the above manner. Since two tuples (e1, . . . , em(v)) and (e′1, . . . , e′m(v)) give rise to the
same inverse images if and only if the tuples coincide up to the order in that the edges that become k-fold
edges occur, each set E has precisely
ns(m)m−sm(v)!∏∞
j=1 v(j)!j!
vj
(3)
inverse images. Because the quantity (3) does not depend on the particular choice of E, we have shown
that S2 maps the uniform distribution onto the uniform distribution. Finally, observe that the map S|Lv is
simply the composite of S1 and S2. 2
Lemma 15 The expected number of loops in Ln.m is m/n. The expected number of k-fold edges, k ≥ 3, is
≤ m3/n4, provided m¿ n2.
Proof. The probability that the ith entry of L = Ln,m is a loop is
nn2(m−1)
n2m
= 1/n.
Thus, the expected number of loops is m/n.
Let I ⊂ {1, . . . ,m} be a set of cardinality k. Then the probability that I is a k-fold edges is
n2n2(m−k)
n2m
= n−2(k−1).
Thus, the expected number of k-fold edges is(
m
k
)
n−2(k−1) ≤ m
k
k!n2(k−1)
.
17
Thus, the expected number of k-fold edges, k ≥ 3, is
≤
∞∑
k=3
mk
k!n2(k−1)
≤ m
3
6n4
∞∑
k=0
mk
n2k
≤ m
3
n4
.
2
Lemma 16 Suppose that m ≥ 10n lnn. Then with high probability the graph D(Ln,m) is connected.
Proof. Let us first assume that m = 10n lnn. Then, by the lemma before, with high probability the number
of loops in Ln,m is at most m/100. Moreover, with high probability Ln,m has no ≥ 3-fold edges. The
expected number of double edges is at most m2/(2n2) ≤ m/100. Thus, with high probability we have
m(v(Ln,m)) ≥ m/2 ≥ 5n lnn.
Consequently, S(Ln,m) is connected with high probability, whence D(Ln,m) is connected with high prob-
ability.
If m ≥ 10n lnn, then decompose Ln,m into pieces of size 10n lnn. With high probability at least one of
these pieces connects all vertices of D(Ln,m). 2
Lemma 17 There exists a function f(n) = o(1) such that in the casem ≥ 3n/4with probability≥ 1−f(n)
the graph D(Ln,m) has no (weak) component of order > 100 lnn and < n2/3.
Proof. By the pervious lemma, we may assume that m ≤ 10n lnn. Then almost all L = Ln,m satisfy
m(v(L)) ≥ 5n/8. Thus, the assertion follows from [6, p. 137]. 2
Lemma 18 There exists a function f(n) = o(1) such that for all m ≥ 3n/4 with probability ≥ 1 − f(n)
the graph D(Ln,m) has precisely one component of order ≥ n2/3 (the so called “giant component”).
Proof. Again, we may assume that m ≤ 10n lnn. Then the assertion follows from [6, p. 142]. 2
Lemma 19 Suppose that 3n/4 ≤ m ≤ 10n lnn. There exists a function f(n) = o(1) such that with
probability 1− f(n) the giant component of D(Ln,m) is not Eulerian.
Proof. Let C be the giant component of D(L), L = Ln,m. Then C is of order ≥ n2/3 almost surely. With
high probability, the number of edges of multiplicity > 1 in D(Ln,m) is ≤ n1/2. Consequently, C has
Ω(n2/3) edge of multiplicity 1. Assume that C is Eulerian. Then changing the direction of precisely one
edge of multiplicity 1 in L that is mapped into C gives a new list L′ ∈ Ln,m such that the giant component
of L′ is not Eulerian. Conversely, given L′, it is obvious how to recover L. Therefore, each L with Eulerian
giant component C gives Ω(n2/3) elements of Ln,m with non-Eulerian giant components. 2
Lemma 20 Suppose that m ≥ n. Then with high probability the graph D(Ln,m) has no Eulerian compo-
nent of order ≤ n1/4 that contains more arcs than vertices.
18
Proof. If m ≥ 10n lnn, then with high probability D(Ln,m) is connected. Thus, let us assume that
m < 10n lnn. Put γ = m/n. Given l ≥ 1, we can bound the expected number of Eulerian components of
order k ≤ n1/4 and size k + l as follows:
n1/4∑
k=1
(
n
k
)
(m)k+lkk+l(n− k)2(m−l−l)n−2m
≤ (2pi)−1/2
n1/4∑
k=1
(n
k
)k ( n
n− k
)n−k
(
n
k(n− k)
)1/2
γk+lkk
(
k
n
)l (n− k
n
)2(m−k−l)
n−k
≤ (2pi)−1/2
n1/4∑
k=1
γk
(
γk
n
)l( n
k(n− k)
)1/2(n− k
n
)2(m−k−l)( n
n− k
)n−k
≤ 2
(2pi)1/2
n1/4∑
k=1
γk
(
10k lnn
n
)l ( n
n− k
)2l(n− k
n
)2(m−k)−(n−k)
≤
n1/4∑
k=1
(
10kn lnn
(n− k)2
)l (k +m− k
n
)k (n− k
n
)m−k
≤
(
20n5/4 lnn
n2
)l n1/4∑
k=1
exp(k(m− k)/n)
(
1− k
n
)m−k
≤
(
20 lnn
n3/4
)l n1/4∑
k=1
exp(k(m− k)/n− k(m− k)/n) ≤
(
20 lnn
n3/4
)l
n1/4.
Summing over l = 1, . . . ,m gives the estimate
m∑
l=1
(
20 lnn
n3/4
)
n1/4 ≤ n1/4
∞∑
l=1
(
20 lnn
n3/4
)l
≤ 20 lnn
n1/4
∞∑
l=0
(
20 lnn
n3/4
)l
≤ 40 lnn
n1/4
¿ 1,
which proves the lemma. 2
Lemma 21 Suppose that 3n/4 ≤ m ≤ n. Then with high probability D(Ln,m) has no Eulerian component
of order ≤ n1/4 that consists of more arcs than vertices.
19
Proof. We use the same notations as in the pervious lemma. We have 1 ≥ γ ≥ 3/4, whence 2m−n ≥ n/2.
Thus,
n1/4∑
k=1
(
n
k
)
(m)k+lkk+l(n− k)2(m−k−l)n−2m
≤ (2pi)−1/2
n1/4∑
k=1
(n
k
)k ( n
n− k
)n−k ( n
k(n− k)
)1/2
γk+lkk+l
(
n− k
n
)2(m−k−l)
n−(k+l)
≤ (2pi)−1/2
n1/4∑
k=1
2
(
n− k
n
)(n/2)−k ( n
n− k
)2l (k
n
)l
≤
n1/4∑
k=1
(
kn
(n− k)2
)l
≤ n1/4
(
2
n3/4
)l
.
Thus, summing over l, we can bound the expected number of Eulerian components as in the lemma by
4/n1/4. 2
Lemma 22 Suppose that m ≤ 3n/4. Then the expected number of vertices in Eulerian components of
D(Ln,m) is at most 3.
Proof. Given k, there are ≤ nk(m)k/k possibilities for a Eulerian component containing precisely k arcs.
If the component has order l ≤ k, then there are (n− l)2(m−k) possibilities for the remaining graph. Thus,
the expected number of vertices in Eulerian components is
≤
m−1∑
k=1
k
k
nk(m)kn−2k ≤
m−1∑
k=1
(m
n
)k ≤ 3,
as stated. 2
In summary, we have shown the following: There is a function f(m) = o(1) such that the probability
that ≥ m1/8 vertices belong to such Eulerian components of D(Ln,m) that contain more arcs than vertices
is ≤ f(m). The remaining task is to estimate the number of vertices that lie on isolated directed cycles.
Lemma 23 Suppose that m ≥ n. Then the expected number of vertices that lie on isolated directed cycles
is O(1).
20
Proof. Put γ = m/n. Then the expected number of vertices on isolated directed cycles can be bounded as
follows:
n−1∑
k=1
k(n)k(m)k(n− k)2(m−k)k−1n−2m ≤
n−1∑
k=1
γk
(
1− k
n
)2(m−k)
=
n−1∑
k=1
(
k
n
+
m− k
n
)k (
1− k
n
)2(m−k)
≤
n−1∑
k=1
(
1 +
m− k
n
)k
exp(−2(m− k)k/n)
≤
n−1∑
k=1
exp((m− k)k/n− 2(m− k)k/n) =
n−1∑
k=1
exp(−k(m− k)/n)
≤ 2
bn/2c∑
k=1
exp(−k(m− k)/n) ≤ 2
bn/2c∑
k=1
exp(−k(n− k)/n)
≤ 2
bn/2c∑
k=1
exp(−k(n− n/2)/n) = 2
bn/2c∑
k=1
exp(−k/2) = O(1).
Note that in the case mÀ n it drops out that the above expectation is ¿ 1. 2
Lemma 24 Suppose that n/2 ≤ m ≤ n. Then the expected number of vertices on isolated directed cycles
is O(1).
Proof. The expectation is
m−1∑
k=1
k(n)k(m)k(n− k)2(m−k)k−1n−2m
≤
m−1∑
k=1
(m
n
)k (
1− k
n
)2(m−k)
≤
m−1∑
k=1
exp(−2(m− k)k/n)
≤ 2
bm/2c∑
k=1
exp(−2k(m− k)/n) ≤ 2
m−1∑
k=1
exp(−2km/(2n))
≤ 2
bm/2c∑
k=1
exp(−k/4) = O(1).
2
21
Lemma 25 Suppose that m ≤ n/2. Then the expected number of vertices on isolated directed cycles is
O(1).
Proof. Put γ = m/n ≤ 1/2. Then the expectation is
m−1∑
k=1
k(n)k(m)k(n− k)2(m−k)k−1n−2m ≤
m−1∑
k=1
γk
(
1− k
n
)2(m−k)
≤
m−1∑
k=1
γk = O(1).
Note that in the case γ ¿ 1 the last sum is ¿ 1. 2
If L = Ln,m and σ ∈ Sn is a permutation, then we define σL ∈ Ln,m in the natural way. We equip
the space Ln,m × Sn with the uniform distribution. Obviously, the map (L, σ) 7→ σL maps the uniform
distribution onto the uniform distribution.
Lemma 26 There exists a function f(m) = o(1) such that in the space Ln,m × Sn the following event has
probability ≤ f(m): There is k ∈ {1, . . . , n} such that in D(σL) the vertices k and k + 1 both belong to
Eulerian components.
Proof. Let X be the number of vertices in Eulerian components of D(σL). Let the random variable Xk
take value 1 if k belongs to an Eulerian component of D(σL) and 0 otherwise. Let Y =
∑n−1
k=1 XkXk+1.
Conditioning on X ≤ x, we obtain
P (XkXk+1 = 1) ≤ x(x− 1)(n− 2)!
n!
≤ x
2
n(n− 1) .
Consequently, E(Y ) ≤ x2/n. Therefore, if x ≤ n1/4, then Y = 0 with high probability. However, the
event X ≤ n1/4 occurs with high probability, as seen above. 2
Corollary 27 There is a function f(m) = o(1) such that the following event has probability ≤ f(m):
There is k ∈ {1, . . . , n − 1} such that the vertices k and k + 1 both belong to Eulerian components of
D(Ln,m).
Let us examine the number of small Eulerian components in the case m = Θ(n) more closely.
Lemma 28 Let L = Ln,m, where m = γ/n for some fixed γ > 0. Then the number of isolated directed
cycles of length k converges in law to the Poisson distribution P (λ), λ = 1k
( γ
e2γ
)k
.
Proof. Let X be the number of directed isolated k-cycles in D(Ln,m). Then
E(X) =
(n)k(m)k(n− k)2(m−k)
kn2m
.
22
Furthermore, the rth factorial moment of X is
Er(X) =
(n)kr(m)kr(n− kr)2(m−kr)
krn2m
.
Consequently,
Er(X)
E(X)r
=
(n)kr
(n)rk
· (m)kr
(m)rk
· (n− kr)
2(m−kr)n2mr
(n− k)2(m−k)rn2m
=
(n)kr
(n)rk
· (m)kr
(m)rk
· (n− kr)
2m
n2m
· n
2mr
(n− k)2mr ·
(n− k)2kr
(n− kr)2kr .
Since k, r are fixed, we have
1 ≥ (n)kr
(n)rk
≥
(
n− kr + 1
n
)kr
=
(
1− kr + 1
n
)kr
→ 1 as n→∞.
Similarly, (m)kr/(m)rk → 1 and
(
n−k
n−kr
)2kr → 1 as n→∞ Moreover, for any fixed ε > 0
exp(−2(1 + ε)krγ) ≤
(
n− kr
n
)2m
≤ exp(−2krγ)
for large n. Similarly, because
n
n− k =
1
1− kn
≤ 1
exp(−2(1 + ε)k) = exp(2(1 + ε)k),
we have
exp(2krγ) ≤
(
n− k
n
)−2mr
=
(
n
n− k
)2mr
≤ exp(2(1 + ε)krγ).
Consequently,
exp(−2krγε) ≤
(
n− kr
n
)2m( n
n− k
)2mr
≤ exp(2krγε),
whence limn→∞Er(X)/E(X)r = 1. Finally, we note that
E(X) =
1
k
· (n)k
nk
· (m)k
mk
·
(
n− k
n
)2(m−k)
,
where lim (n)k
nk
= 1, lim (m)k
mk
= γk, and(
n− k
n
)2(m−k)
=
(
1− k
n
)2γn(
1− k
n
)−2k
→ exp(−2kγ) as n→∞.
Thus,
E(X)→ 1
k
·
(
γ
exp(2γ)
)k
= λ as n→∞.
From [6, p. 23] our assertion follows. 2
23
D Proofs for Section 5
In Section 5 we claimed that there should be 4! · #S pieces out of √n of length √n that start with six
isolated feet and are otherwise biconnected with ln. This follows from Lemma 30, assuming that N =
n1/8 ≥ 4! ·#S, and connecting superfluous isolated vertices to ln:
Lemma 29 Suppose that m ¿ n lnn. Let ε > 0. Then with high probability there are at least n1−ε
isolated feet in D(Ln,m).
Proof. Let X denote the number of isolated vertices of D(Ln,m). The probability that a given foot v is
isolated is (
n− 1
n
)2m
=
(
1− 1
n
)2m
≥ exp
(
−2m
n
− 2m
n2
)
.
Similarly, the probability that two given feet v 6= w are isolated is(
n− 2
n
)2m
=
(
1− 2
n
)2m
≤ exp
(
−4m
n
)
.
Thus,
E(X) = n ·
(
1− 1
n
)2m
≥ n · exp
(
−2m
n
(1 + 1/n)
)
and
Var(X) =
∑
v 6=w
P (both v, w are isolated)− P (v isolated)P (w isolated)
+
∑
v
P (v isolated)− P (v isolated)2
≤
∑
v 6=w
{
exp
(
−4m
n
)
− exp
(
−4m
n
(1 + 1/n)
)}
+
∑
v
P (v isolated)
≤ n2 exp
(
−4m
n
)(
1− exp
(
−4m
n2
))
+ n exp(−2m/n),
where v, w range over the feet of the caterpillar. Consequently,
Var(X)
E(X)2
≤ n
2 exp
(−4mn ) (1− exp (−4mn2 ))+ n exp (−2mn )
n2 exp
(−4mn ) exp (−4mn2 )
= exp
(
4m
n2
)
− 1 + 2 exp(2m/n)/n¿ 1.
24
Thus, by Chebyshev’s inequality with high probability we have
X ≥ E(X)/2 ≥ n1−ε,
where ε > 0 is arbitrary. 2
Lemma 30 Suppose that m¿ n lnn. Then with high probability D(Ln,m) contains at least n1/8 pieces of
length n1/2 starting with 6 consecutive isolated feet.
Proof. Split the backbone of the caterpillar into l pieces of equal length. Note that the operation of the
symmetric group Sn leaves the distribution onLn,m invariant. Let us for a moment work under the condition
that the number of isolated feet in L = Ln,m is N ≥ n1−ε. Then the probability that L has isolated vertices
at K given positions after applying σ ∈ Sn is precisely
(N)K
(n)K
=
K−1∏
j=0
N − j
n− j ∼
(
N
n
)K
,
provided K is constant. Thus, the expected number of pieces that start with K isolated vertices is
∼ l
(
N
n
)K
.
In order to estimate the variance, we let Xi take value 1 if the ith piece starts with K isolated vertices and 0
otherwise, i = 1, . . . , l. Let X =
∑
Xi. Then
E(X2) =
l(l − 1)(N)2K
(n)2K
+ E(X),
and
E(X)2 =
l(l − 1)(N)2K
(n)2K
+
l(N)2K
(n)2K
≥ l(l − 1)(N)
2
K
(n)2K
.
Thus,
Var(X)
E(X)2
≤
l(l − 1)
(
(N)2K
(n)2K
− (N)2K
(n)2K
)
+ E(X)
E(X)2
≤ (N)2K(n)
2
K
(N)2K(n)2K
− 1 + 1
E(X)
=
1
E(X)
+ o(1).
Now put K = 6 and l = n1/2, ε = 1/100. Then E(X) ≥ n2/5. Thus, with high probability X ≥ n1/8,
provided that the number of isolated vertices is≥ N . Taking into account the previous lemma, our assertion
follows. 2
The last claim in Section 5 is that any solution to the DARP instance constructed in Section 5 can be
transformed to a solution of at most the same cost which has certain properties (normalized solution).
25
Lemma 31 Let L′′ be the instance of the DARP on Catn that has been constructed in Section 5. Let D
be the edges of a solution other than requests. Then D consists of Eulerian components C1, . . . , Ci, . . .
induced on the feet and the following assumptions on D can be ensured without increasing the cost of the
solution:
(i) Each Ci visits only feet of a single Ij and, possibly, neighboring feet of V \ I
(ii) For each Steiner vertex s at most one of the Iσ(s), σ ∈ Sn, is visited by a Ci. If Ci visits a labeled foot
lk ∈ Ij then it also visits the labeled feet l` ∈ Ij where ` > k
(iii) There is only one Ci that visits a foot of V \ I
Proof. The fact that D consists of Eulerian components follows directly from the fact that L′′ and D ∪ L′′
are Eulerian. Observe that balancing does not yield any additional request and that all arcs ofD are between
feet, because all of L′′ are. Note that all vertices outside I =
⋃
j Ij make up one large Eulerian component
M . As a consequence, if a Ci visits M twice, this can safely be short cut to one visit.
If an Euler tour of a Ci crosses all of Bj \ Ij for some j, then this crossing must be both ways. It can
therefore be split and short cut to the first and the last foot of Bj \ Ij . As the distance between these two
feet is almost
√
n this shortens the total length of D dramatically. This proves assertion (i) of the lemma.
Let s ∈ S and assume that C1 connects k feet of Iσ(s) while C2 connects ` feet of Iσ′(s) (σ, σ′ ∈ Sn)
and these sets of feet share a label. Then the length of C1 is at least 4k − 2 and the length of C2 is at least
4`−2. On the other hand, there is τ ∈ Sn such that the set of labels of the feet in C1 and C2 are contained in
the labels of v2, . . . , v`+k, where Iτ (s) = {v6, . . . , v1}. Thus C1 and C2 can be replaced with a component
C ′ on Iτ with length 4`+ 4k − 6, short cutting D. Observe that this procedure also works if C1 or C2 visit
additionally a foot of V \ I and that it can be achieved that this foot lies to the right.
If C1 and C2 visit feet with disjoint labels then we may assume that a foot in C1, say with label t1, has a
neighboring foot with label t2 of C2, possibly changing σ appropriately. Then, increasing the length of C1
by 4, label t2 can also be visited by C1. On the other hand, in D there is already another path between labels
t1 and t2. Say, the next label on this path is t3 and the connection between label t1 and t3 is in component
C3. Again we may assume, that the labels t1 and t3 are neighboring in C3, and t1 is leftmost. Then the
connection can be split, saving a length of 4 in C3. This proves assertion (ii) of the lemma.
Assume that there are two components C1 and C2 that both visit a foot in V \I , and let t1 and t2 be labels
visited by C1 and C2, respectively. Split off C1 from V \ I , saving a length of 6 (Note that the labeled feet
are separated from V \ I by an unlabeled foot). If this splits D into two connected components, then let T1
and T2 be the sets of labels reachable from t1 and t2, respectively. As (S, T,E) is connected there must be
t′1 ∈ T1 and t′2 ∈ T2 that share a neighbor s ∈ S. With an appropriate σ, t′1 and t′2 are the two rightmost
labels in Iσ(s) and can thus be connected at a cost of 6. This proves assertion (iii) of the lemma. 2
The solution as provided by Lemma 31 can be turned into a Steiner tree in (S, T,E) by connecting t ∈ T
to s ∈ S iff label t is visited in a component on Iσ(s) for some σ.
26
