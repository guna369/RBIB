J. Symbolic Computation (1998) 25, 527{569
A Semantic Approach to Order-sorted Rewriting
ANDREAS WERNERy
ILKD, University of Karlsruhe, D-76128 Karlsruhe, Germany
Order-sorted rewriting builds a nice framework to handle partially dened functions and
subtypes. To be able to prove a critical-pair lemma and Birkhoâ€™s completeness theorem,
order-sorted rewriting was restricted to sort decreasing term rewriting systems. However,
natural examples show that this approach is too restrictive.
To solve this problem, we generalize well-sorted terms to semantically well-sorted
terms and well-sorted substitutions to a restricted form of semantically well-sorted sub-
stitutions. Semantically well-sorted terms with respect to a set of equations E are terms
that denote well-dened elements in every algebra satisfying E.
We prove a critical-pair lemma and Birkhoâ€™s completeness theorem for so-called
range-unique signatures and arbitrary order-sorted rewriting systems. A transformation
is given which allows us to obtain an equivalent range-unique signature from each non-
range-unique one. We also show decidability and undecidability results.
cÂ© 1998 Academic Press Limited
1. Introduction
Order-sorted rewriting builds a nice framework to handle partially dened functions
and subtypes. For instance, one can use Pascal-similar function declarations such as
+(Integer; Integer) : Integer where Integer is a subtype of Real. See Smolka et al.
(1989) for more details.
Problems arise from equations where the left-hand side and the right-hand side belong
to dierent sorts. In the sequel we explain why these equations make it dicult to obtain
completeness results and a critical pair lemma for order-sorted rewriting. However, such
equations have to be considered, since they occur in natural examples, as we soon will
see in Example 1.3.
Diering from many-sorted rewriting, Birkhoâ€™s completeness theorem does not hold
for order-sorted rewriting which is illustrated by the following example:
Example 1.1. A < B: a; a0 : A; b : B; f(A) : A: R : a! b b! a0.
Hence, we have a $ a0, but not f(a) $ f(a0), since f(b) is ill-formed (because f expects
its argument to be of sort A, but b is of sort B). On the other hand, f(a) = f(a0) holds
in every model of R. To overcome this problem we consider f(b) as a semantically well-
sorted term since a and b are equal in each model of R. For example no mathematician
would reject (4âˆ’ 3)! because it is ill-formed, since he knows that 4âˆ’ 3 and 1 are equal.
Using these kinds of terms allows us to prove Birkhoâ€™s completeness theorem without
y E-mail: werner@ira.uka.de or werner@inline.de
0747{7171/98/040527 + 43 $25.00/0 sy970188 cÂ© 1998 Academic Press Limited
528 A. Werner
the additional assumption in Smolka et al. (1989) that the given rewriting system is
confluent (cf. With (1992)). This view also allows us to handle meaningful but ill-formed
terms without using retracts (Goguen et al., 1985).
For many-sorted rewriting the critical-pair lemma holds: ! is locally confluent i
all critical pairs converge. If we want to prove a critical-pair lemma for order-sorted
rewriting, there are two problems. First, rewriting is not monotone with respect to the
term structure:
Example 1.2.
a; a1; a2 : A; f : A! A; b : B; A < B:
Rules:
a1
% &
a b
& %
a2
Although the critical pair ha1; a2i converges to b, the terms f(a1) and f(a2) do not
converge to f(b) if we do not consider ill-formed terms such as f(b). The usage of seman-
tically well-sorted terms also solves this problem.
Second, there are problems with variable overlaps (cf. Smolka et al., 1989, Example 5):
Example 1.3. Sorts: Nat < Int.
Function symbols: 0 : Nat
s : Nat ! Nat
sq : Int ! Nat
j j: Int ! Nat
 : Int; Int ! Int
Rules: 1 : j xNat j ! xNat 2 : sq(yInt) ! yInt  yInt
jsn(sq(yInt))j
. &
1 2
sn(sq(yInt)) jsn(yInt  yInt)j
& j.
2 1
sn(yInt  yInt)
Sincey sn(yIntyInt) is not a (syntactically) well-sorted term of sort Nat we are not able
to reduce jsn(yIntyInt)j to sn(yIntyInt) using rule 1. Thus, the terms sn(sq(yInt)) and
jsn(yInt yInt)j do not converge (for all n 2N). In order to decide the local confluence of
!, we are looking for a nite set CP of pairs of terms such that ! is locally confluent
y sn(t) is an abbreviation: s0(t) := t and sn+1(t) := sn(s(t)).
A Semantic Approach to Order-sorted Rewriting 529
i every pair of CP converges. Obviously, there does not exist such a set CP for the last
example. Note that the same happens if we only consider well-sorted terms but add the
declaration s : Int! Int.
In Smolka et al. (1989), therefore, a critical-pair lemma is proved for sort-decreasing
rules. However, this approach is too restrictive: we are not able to express that yInt yInt
is a well-sorted term of sort Nat by function declarations, hence sq(yInt)! yInt  yInt is
not sort decreasing.
The problem discussed in Example 1.3 originates in the fact that sn(yInt  yInt) is not
a well-sorted term of sort Nat; therefore, it is not possible to substitute sn(yInt yInt) for
xNat and rule 1 cannot be applied to jsn(yIntyInt)j. But sn(yIntyInt) is a semantically
well-sorted term of sort Nat, since it is equivalent to sn(sq(yInt)). Hence, we can solve
the problem if substitutions are based on semantical sorts instead of syntactical sorts. In
order to keep rewriting decidable, we only allow substitution of a term t for a variable
x if the range sort of the top symbol of t is less than or equal to the sort of x. These
substitutions are called T -substitutions. To avoid ambiguity we require that each function
symbol has a unique range sort. For example, it is possible to substitute sn(yInt  yInt)
for xNat if n > 0 since the range sort of s is Nat. Hence, in this case jsn(yInt  yInt)j can
be reduced to sn(yInt  yInt) and the terms sn(sq(yInt)) and jsn(yInt  yInt)j converge. If
n = 0 then in the example above the terms still do not converge. Therefore, in some cases
we also consider terms obtained by overlapping rules at variable positions (but not below
them) as critical pairs. This allows us to prove a critical-pair lemma without assuming
the rules to be sort decreasing.
We show that each non-range-unique signature can be transformed into an equivalent
range-unique one. For each function symbol f and every range sort s of f in the original
signature we obtain a function symbol fs in the range-unique signature. We use equations
to describe the relations between function symbols in the range-unique signature that
correspond to the same symbol in the original signature. Hence the assumption that each
function symbol has a unique range is no restriction.
The paper is organized as follows. Section 2 contains basic notations for terms and
their semantics. After that we extend notations and results for equations and their se-
mantics. We introduce semantically well-sorted terms with respect to a set of equations
E and show that they are well-dened elements in each algebra satisfying E. In Sec-
tion 4, we demonstrate the benets of semantically well-sorted terms for sort-decreasing
rules. Especially, we give criteria for the decidability of semantically well-sorted terms.
In Sections 5 and 6, we show how the requirement of sort decreasingness can be dropped.
Section 7 contains undecidability results for semantically well-sorted terms. We further
explain how to overcome the resulting problems. This leads us to another criterion for
semantical well sortedness. Finally, we compare our approach with related work.
2. Terms and Their Semantics
In this section, we give a short overview on signatures, terms, substitutions and alge-
bras. More details can be found in Smolka et al. (1989) and Waldmann (1992).
2.1. well-sorted terms
A binary relation  is called partial order if it is reflexive, antisymmetric and transitive.
Let  be a partial order on a set S and S0  S. s0 2 S0 is a maximal element in S0 if
530 A. Werner
s0  s00 implies s0 = s00 for every s00 2 S0. s0 2 S0 is a greatest element in S0, if s00  s0
holds for every s00 2 S0. s 2 S is an upper bound of S0 if s0  s for all s0 2 S0. In the
same way, we dene minimal and least elements and lower bounds of a set.
An order-sorted signature  is a triple (S;;F), where S is a set of sorts,  is a
partial order on S, and F := Sw;s Fw;s for some (not necessarily disjoint) sets of function
symbols Fw;s with w 2 S and s 2 S. We call f(w) : s or f : w ! s function declaration
and use it as an abbreviation for f 2 Fw;s. If w is the empty word, we write f : s and
call f a constant. In both cases s is the range sort of f .
A set of variables V for an order-sorted signature  is a union of pairwise disjoint,
innite, but decidable sets Vs with s 2 S and Vs \ F = ;. We assume that xs; ys; : : :
denote variables of sort s (i.e., xs; ys; : : : 2 Vs), s is the range sort of xs; ys; : : :.
We dene the set T(V)s of all -terms (well-sorted terms) of sort s as follows:
(i) if s  s and xs 2 Vs, then xs 2 T(V)s,
(ii) if f(s1; : : : ; sn) : s; ti 2 T(V)si for i = 1; : : : ; n and s  s, then f(t1; : : : ; tn) inT(V)s.
The set T(V) of all -terms is dened by T(V) :=
S
s2S T(V)s. For a -term t,
fs j t 2 T(V)sg denotes the set of its (syntactical) sorts. A signature  is said to be
regular if every term t 2 T(V) has a least sort.
If we neglect the sort constraints, we get the set of extended terms ET(V) introduced
by Waldmann (1992):
(i) V  ET(V),
(ii) if f(s1; : : : ; sn) : s; ti 2 ET(V) for i = 1; : : : ; n then f(t1; : : : ; tn) 2 ET(V).
Note that T(V)  ET(V). We call t ill-formed, if t 2 ET(V) n T(V).
Occ(t) denotes the set of all occurrences of the (extended) term t. t=u is the subterm
of t at occurrence u, t[u  t0] the term obtained from t by replacing the subterm t=u
by t0. Note that for well-sorted terms t, t0 and an occurrence u 2 Occ(t), t[u t0] is not
necessarily well sorted. Var(t) denotes the set of all variables of t.
A term t 2 ET(V) is called ground if it contains no variables: Var(t) = ;. T denotes
the set of all ground -terms.
2.2. substitutions
An extended substitution is a mapping  : V ! ET(V) such that Dom() :=
fx j (x) 6= xg is nite. We extend an extended substitution  by (f(t1; : : : ; tn))
= f((t1); : : : ; (tn)) to a mapping on ET(V).
The composition of extended substitutions  and  , denoted    , is the extended
substitution dened by (  )(x) = ((x)) for all variables x 2 V. The set Im() =S
x2Dom() Var((x)) denotes the set of variables introduced by .
Let the set of S-substitutions be an arbitrary subset of the set of extended substitutions.y
An S-substitution  is called an S-unier of t and t0 if (t) = (t0). A set of S-uniers
CSUS(t; t0) of t and t0 is said to be a complete set of S-uniers of t and t0 on a set of
y For example, we dene below -substitutions, (;R)-substitutions, and T -substitutions.
A Semantic Approach to Order-sorted Rewriting 531
variables V with Var(t) [ Var(t0)  V  V if for every S-unier  of t and t0 there is a
 2 CSUS(t; t0) and a S-substitution  such that (x) = ((x)) for all x 2 V .
A -substitution is an extended substitution such that if xs is a variable of sort s then
(xs) is a -term of sort s.
Proposition 2.1.
(i) If t 2 T(V)s for some sort s and  is a -substitution, then (t) 2 T(V)s.
(ii) If  and  are -substitutions then    is also a -substitution.
2.3. -algebras
In this paper, we use the non-overloaded semantics (Smolka et al., 1989) where each
function symbol represents a single function. Note that a function symbol may still have
more than one declaration.
Definition 2.2. Let  = (S;;F) be an order-sorted signature. A  -algebra A consists
of a family of sets fAs j s 2 Sg and a function fA : DAf ! CA for each f 2 F such that:
(i) As  As0 if s  s0,
(ii) DAf  (CA), where CA =
S
s2S As,
(iii) if f 2 Fw;s, then Aw  DAf and fA(Aw)  As.
As1:::sn is an abbreviation for As1  : : :Asn . A denotes some singleton set.
For example, it is not dicult to make T or T(V) to a -algebra.
Definition 2.3. Let  be an order-sorted signature, and let A and B be two -algebras.
A homomorphism h : A ! B is mapping h : CA ! CB such that
(i) h(As)  Bs for all s 2 S,
(ii) h(DAf )  DBf and h(fA(a1; : : : ; an)) = fB(h(a1); : : : ; h(an)) for all f 2 F and
(a1; : : : ; an) 2 DAf .
A homomorphism h : A ! B is called an isomorphism if there is a homomorphism
hâˆ’1 : B ! A such thaty h  hâˆ’1 = idCB and hâˆ’1  h = idCA .
Definition 2.4. Let  be an order-sorted signature and V be a set of variables for .
An assignment into a -algebra A is a mapping  : V ! CA such that if xs is a variable
of sort s then (xs) 2 As.
T is initial in the class of all -algebras (i.e., for every -algebra A there is a unique
homomorphism h : T ! A) and T(V) is the free -algebra generated by V (i.e., for
every -algebra A and every assignment  into A there is a unique homomorphism
 : T(V)! CA that extends ).
y Given a set S, idS denotes the identity mapping on S.
532 A. Werner
3. Equations and Their Semantics
In the following we extend notations and results for equations, equational deduction,
rewriting and quotient algebras of Smolka et al. (1989) and Waldmann (1992). Further-
more, we introduce semantically well-sorted terms.
3.1. equations
Definition 3.1. An equation is a pair s := t of terms s, t 2 ET(V). If s; t 2 T(V)
then s := t is a -equation. A pair (; E) where  is an order-sorted signature and E is
a set of equations is called a specication.
As reasoned in the introduction, besides -terms we also need to consider ill-formed
terms. Therefore, the terms of an equation are not necessarily -terms. But we will
regard an equation only to be valid in a -algebra, if both terms are well-dened in it.
Definition 3.2. Let A be a -algebra and t 2 ET(V). Then t is well-dened in A if
(i) t is a variable or
(ii) t is a constant or
(iii) (a) t = f(t1; : : : ; tn) with n  1,
(b) t1; : : : ; tn are well-dened in A, and
(c) ((t1); : : : ; (tn)) 2 DAf for all assignments  into A,
where each assignment  into A is extended to the set of well-dened terms by
(t) :=
8<: c
A if c = t is a constant,
(x) if x = t is a variable,
fA((t1); : : : ; (tn)) in the third case above.
We call t 2 ET(V) well-dened of sort s in A if t is well-dened in A and (t) 2 As
for all assignments  into A.
Remark 3.3. By induction on the term structure we obtain:
(i) Each t 2 T(V)s is well-dened of sort s in each -algebra.
(ii) If t 2 ET(V) is well-dened in a -algebra A, then all subterms of t are also
well-dened in A.
Proposition 3.4. If t 2 ET(V) is well-dened (of sort s) in a -algebra A and if 
is a -substitution, then (t) is well-dened (of sort s) in A.
Proof.
(i) The proposition trivially holds if t is a constant.
(ii) If t is a variable of sort s then (t) is well-dened of sort s by Remark 3.3 (i).
(iii) Finally, let t = f(t1; : : : ; tn) with n  1. Hence, (t) = f((t1); : : : ; (tn)).
Since t is well-dened in A by assumption, t1; : : : ; tn are also well-dened in A
by Denition 3.2 (b). By induction hypothesis (t1); : : : ; (tn) are well-dened in
A too.
A Semantic Approach to Order-sorted Rewriting 533
Let  be an assignment into A. We show (((t1)); : : : ; ((tn)) 2 DAf . By Deni-
tion 3.2 (c), we have ((t1); : : : ; (tn)) 2 DAf for each assignment  into A. Hence,
 : V ! A dened by (x) = ((x)) is an assignment into A by Remark 3.3 (i). Thus
(((t1)); : : : ; ((tn))) = ((t1); : : : ; (tn)) 2 DAf and ((t)) = (t). Therefore, if t is
well-dened (of sort s) in A then (t) is well-dened (of sort s) in A. 2
Definition 3.5. Let t, t0 be extended terms in ET(V).
(i) An equation t := t0 is valid in a -algebra A if t and t0 are well-dened in A, and
(t) = (t0) for all assignment  into A.
(ii) A -algebra A satises (; E) if all equations of E are valid in A.
(iii) We write t =E t0 if t
:= t0 is valid in all -algebras that satisfy (; E).
Since t, t0 2 T(V) are well-dened in each -algebra by Remark 3.3, this denition
extends the ones given in Smolka et al. (1989) and Waldmann (1992). To avoid anomalies,
we assume that for every sort s there is at least one ground term ts of sort s.
3.2. rewriting
Throughout this paper we use the standard terminology for binary relations as it
can be found for example in Huet (1980), Huet and Oppen (1980), and Dershowitz and
Jouannaud (1990). We summarize some basic results: ! has the Church{Rosser property
i it is confluent. A noetherian binary relation ! is confluent i it is locally confluent.
If ! is noetherian and confluent then every t has a unique normal form t# and t $ t0
holds i t#= t0# .
A term rewriting system R is a set of rules l! r with l; r 2 ET(V), Var(r)  Var(l)
and l 62 V. A rewriting system R is called a -rewriting system if l, r 2 T(V) for all
l! r 2 R.
All rewriting relations used in this paper will be dened using the following one. They
will only dier in the set of terms where they are dened and in the used substitutions.
Definition 3.6 ()ExtR ). Given a rewriting system R and an extended term t, we write
t)ExtR [l! r;u;] t0 (possibly omitting indices) if there is a rule l! r 2 R, an occurrence
u 2 Occ(t) and an extended substitution  such that t=u = (l) and t0 = t[u (r)].
Note that t0 always is an extended term. In this paper, for all relations dened on
extended terms, we use the symbol ) (see Table 3). The superscript will always in-
dicate which kind of substitution is used, for example )ExtR is dened using extended
substitutions.
In order to use all notations for sets of equations for rewriting systems, we associate
with each rule l! r the equation l := r. Conversely, given a set of equations E, ,ExtE is
the symmetric closure of )ExtR where R := fl! r j l
:= r 2 E or r := l 2 Eg (neglecting
the conditions on rewriting rules). In the same way all other rewriting relations used in
this paper will be extended to equations.
We will use the following rewriting relation below to dene the set of semantically
well-sorted terms.
Definition 3.7 ()R ). We write t)R t0 if t)ExtR [] t0 for some -substitution .
534 A. Werner
Table 1. The sets of terms used in this paper
Symbol Terms Description Denition
T(V) -terms Terms built in accordance with the signature 2.1
(synt. well-sorted)
T;R(V) (;R)-terms Terms that are equivalent to a -term 3.10
(sem. well-sorted)
ET(V) Extended terms Terms obtained by neglecting the sort constraints 2.1
Table 2. The substitutions used in this paper
Name Signature Description of  Denition
-substitution Arbitrary (xs) is a -term of sort s 2.2
T -substitution Range unique (xs) is a (;R)-term and 6.2
frange sort of top symbol of (xs)g  s
(;R)-substitution Arbitrary (xs) is a (;R)-term of sort s 5.1
extended substitution Arbitrary (xs) is an extended term 2.2
Table 3. The relations used in this paper
Symbol Terms Substitutions Signature Rules Denition
)ExtR Extended Extended Arbitrary Extended terms 3.6
)R Extended -substitutions Arbitrary Extended terms 3.7
!R (;R)-terms -substitutions Arbitrary -terms 4.1
!;RR (;R)-terms (;R)-substitutions Arbitrary R stems f. a -TRS 5.4
!TR (;R)-terms T -substitutions Range unique R stems f. a -TRS 6.8
! R -terms -substitutions Arbitrary -terms 4.9
Note that in contrast to the classical order-sorted rewriting relation (Smolka et al., 1989)
)R is dened on extended terms.
Remark 3.8. LetR be a -rewriting system. Then t)R[u] t0 implies t=u, t0=u 2 T(V).
Proposition 3.9. Let t, t0, t00 2 ET(V), u 2 Occ(t) and  be a -substitution.
(Stability) t )R t0 implies (t)
)R (t0).
(Monotonicity) t0 )R t00 implies t[u t0]
)R t[u t00].
3.3. semantically well-sorted terms
As mentioned in the introduction, we need to extend order-sorted rewriting to ill-
formed terms. It is not necessary to extend it to all extended terms. We will show that
it is sucient to extend it to those terms that are obtained by rewriting -terms.
A Semantic Approach to Order-sorted Rewriting 535
....
....
....
....
....
....
....
.....
.....
.....
.....
....
....
....
....
....
.....
........
..........
..............
..............................................................................................................................................................................................................................................................................................
...........
.........
......
.....
....
....
....
....
....
.....
.....
.....
.....
....
....
....
....
....
....
....
....
....
.....
.....
....
....
....
......
...........
.......................................................................................................................................................
........
....
....
....
.....
.....
....
....
....
....
....
.....
....
.........
...............................................................................
....
....
.....
....
..
. ..
. .. .
. .. .
. .. .
. .. .
. .. .
. ..
. ..
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
..
. ..
. .. .
. .. .
. .. .
. .. .
. .. .
. ..
. ..
.
T(V)
T;E(V)
ET(V)
Figure 1. The sets of terms used in this paper.
Definition 3.10. T;E(V)s is the set of all (; E)-terms (semantically well-sorted terms)
of sort s:
t 2 T;E(V)s i t 2 ET(V) and there exists a t0 2 T(V)s with t
,E t0:
T;E(V) denotes the set of all (; E)-terms: T;E(V) :=
S
s2S T;E(V)s.
Intuitively, the set T;E(V)s contains all the terms that are connected by rewriting with
a term in T(V)s. Later, when we investigate rewriting in more detail, a rewriting system
R will take over the position of E.
In Schmidt-Schau (1989) (; E)-terms were introduced as quasi terms, in Chen and
Hsiang (1991) they are called I-terms. With (1993) denes these terms in a semantical
way using all -algebras that satisfy (; E). We dened them by the property we need.
Later we will show that they are well-dened in each -algebra satisfying (; E). In
general, T;E(V) does not satisfy (; E),  and E are only used to determine the sorts
of a term.
For instance, f(b) is a (; E)-term of sort A in Example 1.1. Since T(V)s  T;E(V)s
holds for all sorts s, (; E)-terms generalize -terms. Note that T;E(V)s  T;E(V)s0 if
s  s0.
Remark 3.11. If E and E0 are two sets of equations such that ,E =
, E0 thenT;E(V)s = T;E0(V)s for all sorts s and T;E(V) = T;E0(V).
For all relations dened on (; E)-terms, we will use the symbol ! . The superscript
will always indicate which kind of substitution is used.
Proposition 3.12. If t 2 T;E(V)s and  is a -substitution, then (t) 2 T;E(V)s.
Proof. Since t 2 T;E(V)s there exists a ts 2 T(V)s with t
,E ts by Denition 3.10.
Hence, (t) ,E (ts) by Proposition 3.9. Since (ts) 2 T(V)s by Proposition 2.1, it
follows (t) 2 T;E(V)s. 2
536 A. Werner
Given an arbitrary set of equations E, the subterms of a (; E)-term need not to be
(; E)-terms. This may happen especially if there is an equation in E where one side is
a -term whereas the other is not a -term.
Definition 3.13. Given two sets of equations E and E0, we say that E stems from E0
if ,E =
, E0 and l; r 2 T;E0(V) for all equations l
:= r 2 E.
By the rst condition, E and E0 dene the same equivalence relation , on ET(V).
The second condition ensures that each term in E is equivalent to a -term. For example,
if E is obtained by rewriting a set of -equations E0, then E stems from E0.
It will turn out later that it suces to consider sets E that stem from sets of -
equations. If we start Knuth{Bendix-completion with a set of -equations then we always
obtain such a set E. We will later also observe that if we use non-sort-decreasing rules
then E may contain equations that are not -equations.
At the end of this section we will show that every subterm of a (; E)-term is a
(; E)-term, if E stems from a set of -equations.
Proposition 3.14. t is a ground (; E)-term of sort s i t is a ground extended term
and there exists a ground -term ts of sort s such that t
,E ts.
Note that the proposition does not hold if there is not at least one ground -term for
each sort.
Proposition 3.15. If f : s1; : : : ; sn ! s and t1 2 T;E(V)s1 , : : : ; tn 2 T;E(V)sn then
f(t1; : : : ; tn) 2 T;E(V)s.
Proof. Since ti 2 T;E(V)si there exists a t0i 2 T(V)si with ti
,E t0i for i = 1; : : : ; n.
Hence, f(t01; : : : ; t
0
n) 2 T(V)s and f(t1; : : : ; tn) ,E f(t01; : : : ; t0n). Thus, f(t1; : : : ; tn) inT;E(V)s. 2
This proposition allows us to make T;E(V) (and analogously the set of all ground (; E)-
terms T;E) to a -algebra T by dening Ts := T;E(V)s and DTf :=
S
f :!!s T! and
fT (t1; : : : ; tn) = f(t1; : : : ; tn) for (t1; : : : ; tn) 2 DTf for all f 2 F .
In general, T;E is not initial in the class of all -algebras. To see this, consider the
sorts A and B, the constants a : A and b : B, and E = fa := bg. Hence, there is no
homomorphism h0 : T;E ! T (cf. Smolka et al., 1989, Example 1).
Finally, we show that every (; E)-term is well-dened in every -algebra satisfying
(; E).
Proposition 3.16. If t 2 ET(V) is well-dened (of sort s) in a -algebra A, l := r is
valid in A, and t,E[l :=r;u;] t0 then t0 is well-dened (of sort s) in A and t
:= t0 is valid
in A.
Proof. We show this proposition by induction on the length of u. If u =  then the
proposition trivially holds. Let u = nu0 where n is a natural number. By assumption, t
is well-dened (of sort s) in A and t=m = t0=m for all numbers m 6= n. By Denition 3.2,
A Semantic Approach to Order-sorted Rewriting 537
t=n is well-dened in A. By induction hypothesis, t0=n is well-dened in A and t=n = t0=n
is valid in A. Hence, t0 is well-dened (of sort s) in A and t := t0 is valid in A. 2
Theorem 3.17. Each (; E)-term t of sort s is well-dened of sort s in each -algebra
A satisfying (; E).
Proof. Since t 2 T;E(V)s there exists a t 2 T(V)s and a number n with t
n,E t. We
show the theorem by induction on n using Proposition 3.16.
If n = 0 then t 2 T(V)s and t is well-dened of sort s in A by Remark 3.3 (i).
Let t,E t0
n,E t with t0 2 ET(V). Since t0 2 T;E(V)s by Denition 3.10, t0 is well-
dened of sort s in each -algebra A satisfying (; E) by induction hypothesis. Hence, t
is well-dened (of sort s) in A by Proposition 3.16. 2
3.4. quotient algebra
Definition 3.18. The -algebra T;E(V)=E (abbreviated Q) is dened as follows:
Qs := f[t] j t 2 T;E(V)sg
where [t] := ft0 2 T;E(V) j t ,E t0g denotes the equivalence class of t. For f 2 F we
dene DQf and f
Q by
DQf :=
[
f :!!s
Q!
and
fQ :
DQf ! CQ;
([t1]; : : : ; [tn]) 7! [f(t1; : : : ; tn)]
if ti 2 T;E(V)si for i = 1; : : : ; n and f : s1; : : : ; sn ! s. Analogously, we dene T;E=E.
Note that [t] = ft0 2 ET(V) j t ,E t0g for all t 2 T;E(V) by Denition 3.10. Further-
more, ti 2 T;E(V)si i there is a representative of [ti] in T(V)si . Next we show thatT;E(V)=E and T;E=E are really -algebras.
Proposition 3.19. T;E(V)=E and T;E=E are -algebras.
Proof. We have to show that the denition of fQ is independent
of the choice of the representatives. Let ti; t0i 2 T;E(V)si and [ti] = [t0i]
for i = 1; : : : ; n. Hence, ti
,E t0i. Thus, f(t1; : : : ; tn)
,E f(t01; : : : ; t0n). Furthermore,
f(t1; : : : ; tn); f(t01; : : : ; t
0
n) 2 T;E(V). 2
In the same way T(V)=E and T=E are dened and proved to be -algebras. Since
for each t 2 T;E(V) there is a t0 2 T(V) with [t] = [t0] (Denition 3.10), it can be
shown that there is an isomorphism between T(V)=E and T;E(V)=E (T=E and T;E=E
respectively).
Finally, we prove that every (; E)-term is well-dened in the quotient algebra, if the
set of equations stems from a set of -equations. The proof is nearly the same as the one
538 A. Werner
of Theorem 3.17. Whereas in Theorem 3.17 we already know that the considered algebra
satises (; E) we use the following one later to show that the quotient algebra satises
(; E).
Proposition 3.20. Let E stem from a set of -equations E. Each t 2 T;E(V)s is
well-dened of sort s in T;E(V)=E.
Proof. By Remark 3.11, it suces to show that t 2 T;E(V)s is well-dened of sort s
in T;E(V)=E . By Denition 3.10, there exists a t 2 T(V)s and a natural number n
such that t n, E t. We prove the well-denedness of t by induction on n using Proposition
3.16.
If n = 0 then t 2 T(V)s and t is well-dened of sort s in T;E(V)=E by Remark 3.3,
since the quotient algebra is a -algebra.
Let t, E t0
n, E t with t0 2 ET(V). Since t0 2 T;E(V)s by Denition 3.10, t0 is
well-dened of sort s in the quotient algebra by the induction hypothesis. Let l := r
be the equation used in the rst step. Since l, r 2 T(V), the terms (l) and (r) are
well-dened in the quotient algebra by Proposition 2.1, Remark 3.3 (i) and Proposition
3.19. Furthermore, (l), E (r) by Proposition 3.9. Hence, (l)
:= (r) is valid in
the quotient algebra. By Proposition 3.16, t is well-dened of sort s in the quotient
algebra. 2
Proposition 3.21. If t 2 ET(V) is well-dened in T;E(V)=E (of sort s) then t is a
(; E)-term (of sort s).
Proof. Let t 2 ET(V) be well-dened in T;E(V)=E . If t is a variable or constant
then t is trivially a (; E)-term. Let t = f(t1; : : : ; tn). By induction hypothesis, ti is a
(; E)-term for i = 1; : : : ; n. Since (t1; : : : ; tn) 2 DTf , t is a (; E)-term by Proposition
3.15.
Let t be well-dened in T;E(V)=E of sort s. If we choose the assignment (x) = [x]
for all x 2 V we get [t] = (t) 2 Qs by denition. Hence, there is a t0 2 T(V)s such that
t
,E t0 by Denition 3.10. Thus, t 2 T;E(V)s. 2
3.5. inference rules
Given a signature  and a set of equations E, we derive new equations using the
inference rules given in Figure 2. If an equation t := t0 can be derived from E using the
inference rules above, we write E â€˜ t := t0.
The inference rules mainly dier from others in the following points. In Smolka et al.
(1989) and Waldmann (1992) only -equations are considered. Using the inference rules
of With (1993) it is also possible to derive equations of semantically well-sorted terms,
but the initial set E has to be a set of -equations. It will turn out that the inference
rules of With (1993) are incomplete if E contains ill-formed terms. The inference rules
given in Figure 2 are complete and sound for all sets of equations that stem from a set of
-equations. A proof can be found in the next section. The results given below will also
show that in our framework, it suces to consider -substitutions in the substitutivity
rule to obtain completeness. The deduction rules of G-algebra (Megrelis, 1990) use more
powerful substitutions (i.e., (; E)-substitutions).
A Semantic Approach to Order-sorted Rewriting 539
ER Reflexivity â€˜ t := t
if t 2 T(V).
ES Symmetry t
:
= t0 â€˜ t0 := t
ET Transitivity t
:
= t0; t0 := t00 â€˜ t := t00
EC Congruence t1
:
= t01; : : : ; tn
:
= t0n; t
:
= t0 â€˜ f(t1; : : : ; tn) := f(t01; : : : t0n)
if f(t1; : : : ; tn) is a subterm of t.
EI Substitutivity â€˜ (t) := (t0)
if t
:
= t0 is an element of the initial set of
equations E and if  is a -substitution.
Figure 2. Inference rules for order-sorted deduction.
3.6. soundness and completeness
Theorem 3.22. (Soundness and completeness) Let E stem from a set of -equa-
tions. Then the following properties are equivalent for t; t0 2 ET(V):
(1) E â€˜ t := t0.
(2) t =E t0.
(3) t := t0 is valid in T;E(V)=E.
(4) t ,E t0 and t 2 T;E(V).
Proof.
(1) y (2) â€˜Soundness of deductionâ€™. We prove this part by induction on the length k of
the derivation. If k = 0 then the equation is in E and it trivially holds. Assume
we derive an equation from E in step k+ 1. First we show that both terms of
the equation are well-dened in each -algebra A satisfying E.
ER: This is a consequence of Remark 3.3 (i).
ES, ET: This is an immediate consequence of the induction hypothesis.
EC: t1 =E t01, : : :, tn =E t
0
n; t
:= t0 by induction hypothesis, and t1; : : : ; tn,
t01; : : : t
0
n, t; t
0 are well-dened in each -algebra A satisfying E by Def-
inition 3.5. By Remark 3.3(ii), f(t1; : : : ; tn) is well-dened in A. Hence,
f(t01; : : : ; t
0
n) is well-dened in A.
EI: This is a consequence of Denition 3.5 and Proposition 3.4.
Let t := t0 be the equation derived in step k+1. The proof that (t) = (t0)
for each -algebraA satisfying E and each assignment  intoA is identical
to the one for the inference rules given in Waldmann (1992).
(2) y (3) â€˜Quotient algebra satises (; E)â€™. In order to prove this part it suces to
show that T;E(V)=E satises (; E). Given an equation t
:= t0 2 E, we have
to show that it is valid in T;E(V)=E .
By Proposition 3.20, t and t0 are well-dened in T;E(V)=E .
Given an assignment  into T;E(V)=E , we have to show that (t) = (t0)
in T;E(V)=E . Since t and t0 are well-dened in T;E(V)=E , t; t0 2 T;E(V)
by Proposition 3.21. Hence, t := t0 implies t ,E t0. By Denition 3.18 and
Denition 3.10, (x) = [(x)] for some -substitution . By Proposition
3.12 and Proposition 3.9, (t) 2 T;E(V) and (t) ,E (t0). Hence, (t) =
(t0) in T;E(V)=E .
540 A. Werner
(3) y (4) â€˜Completeness of rewritingâ€™. Assume, T;E(V)=E satises t
:= t0. Hence, for
all assignments  into T;E(V)=E , (t) = (t0) in T;E(V)=E . If we dene
(x) = [x] for all x 2 V, we get [t] = (t) = (t0) = [t0]. Hence, t ,E t0 by
denition. By Proposition 3.21, t 2 T;E(V).
(4) y (1) â€˜Rewriting implies deductionâ€™. Assume, t ,E t0 and t 2 T;E(V). By Denition
3.10, there is a t 2 T(V) with t ,E t. Thus, t0
,E t. Since the set of inference
rules contains a symmetry and a transitivity rule, it suces to show that t n,E bt
with t 2 T(V) implies E â€˜ t := bt by induction on n.
If n = 0 then (t := bt) = (t := t) with t 2 T(V). Hence, we obtain t := t
by inference rule ER. Assume t n,E _t,E[l :=r;u;] bt. By induction hypothesis,
E â€˜ t := _t. If l := r 2 E then we obtain E â€˜ (l) := (r) by inference rule EI.
Otherwise r := l 2 E and we obtain E â€˜ (l) := (r) by ES and EI. In both
cases we get E â€˜ _t := bt by EC. Hence, E â€˜ t := bt. 2
Corollary 3.23. Let E stem from a set of -equations. Then all subterms of a (; E)-
term are also (; E)-terms.
Proof. Let t 2 T;E(V) and u 2 Occ(t). Hence, E â€˜ t := t by Theorem 3.22 ((4) y (1)).
Using inference rule EC, we get E â€˜ t=u := t=u which can be shown by induction on the
term structure of t=u. Thus, t=u 2 T;E(V) by Theorem 3.22 ((1) y (4)) . 2
From Proposition 3.21 and the Theorems 3.22 and 3.17 we conclude:
Proposition 3.24. Let E stem from a set of -equations. A term t 2 ET(V) is well-
dened (of sort s) in each -algebra satisfying (; E) i t is a (; E)-term (of sort s).
Let us add some remarks on the proof of Theorem 3.22.
(i) If E is an arbitrary set of equations then the quotient algebra T;E(V)=E not nec-
essarily satises (; E) since l and r of an equation l := r 2 E are not necessarily
well-dened in it. Since not every subterm of a (; E)-term is necessarily a (; E)-
term the theorem does not hold for arbitrary sets of equations.
(ii) Rule EC allows us to derive f(t1; : : : ; tn)
:= f(t01; : : : ; t
0
n) from t1
:= t01; : : : ; tn
:= t0n if
f(t1; : : : ; tn) is a subterm (and hence a (; E)-term) of a term in an equation which
we already derived. We do not allow derivation of equations for arbitrary (; E)-
terms f(t1; : : : ; tn) in order to keep the conditions of the inference rules decidable.
If we replace rule EC by
EC Congruence t1
:= t01; : : : ; tn
:= t0n â€˜ f(t1; : : : ; tn) := f(t01; : : : t0n)
if f(t1; : : : ; tn) 2 T(V).
then the inference rules are complete if E is a set of -equations, but they are not
necessarily complete even if E stems from a set of -equations.
The following example illustrates this. Consider the sorts Nat and Bool with the
function declarations
âˆ’ : Nat! Nat 0 : Nat false : Bool falsch : Bool
A Semantic Approach to Order-sorted Rewriting 541
and the sets of equations
E = fâˆ’false = 0; âˆ’falsch = false; falsch = falseg
E0 = fâˆ’0 = 0; false = 0; falsch = 0g
E stems from E0 and E0 is a set of -equations. If we replace EC by EC in the
inference rules, then we are able to derive E0 â€˜ t := t0 for all t := t0 2 E. But it is not
possible to derive E â€˜ false := 0 since we are not able to derive âˆ’false = âˆ’falsch
from falsch = false. The critical point is that âˆ’false is one side of an equation
in E0.
(iii) The condition that E stems from a set of -equations ensures that every term
occurring in E is a (; E)-term.
(iv) In the introduction we have seen that if we restrict rewriting to -terms then the
corresponding equivalence relation is not a congruence and therefore the quotient
is not a -algebra (See also Smolka et al., 1989).
(v) The conditions of the theorem above are no restrictions for us, since all rewriting
systems that we consider later stem from a -rewriting system.
The following two results can be obtained in the same way as in the many-sorted case
(e.g. Ehrig and Mahr, 1985):
Theorem 3.25. Let E stem from a set of -equations. T;E(V)=E is the free -algebra
satisfying (; E) generated by V, i.e., for every -algebra A satisfying (; E) and every
assignment  into A there is a unique homomorphism  : T;E(V)=E ! A such that
(x) = ([x]) for all x 2 V.
Corollary 3.26. Let E stem from a set of -equations. T;E=E is initial in the class
of all -algebras satisfying (; E).
Now we consider rewriting rules instead of equations. We have shown that rewriting
with )R is complete. In the next sections, we investigate dierent rewriting relations
! on T;R(V) with the property t $ t0 i t ,R t0 for all t; t0 2 T;R(V).
4. Using -Substitutions
In this section, we extend rewriting with sort-decreasing rules to semantically well-
sorted terms and show the advantages of this extension. In the whole section, we assume
R to be a -rewriting system.
Definition 4.1 (!R ). We write t!R t0 if t, t0 2 T;R(V) and t)ExtR [] t0 for some
-substitution .
Note that !R is the restriction of )R to (;R)-terms: t!R t0 i t)R t0 and t; t0
in T;R(V). Furthermore, if t or t0 is in T;R(V) and t)R t0 then both terms belong to
T;R(V) (by Denition 3.10) and t!R t0.
Definition 4.2. A rewriting rule l! r is called sort decreasing, if for all sorts s 2 S
and all -substitutions , (l) 2 T(V)s implies (r) 2 T(V)s. We call a rewriting
system R (or !R ) sort decreasing if all its rules are sort decreasing.
542 A. Werner
For instance, rule 1 in Example 1.3 is sort decreasing, whereas rule 2 of the same
example is not sort decreasing.
Definition 4.3. Let l1! r1; l2! r2 2 R be two variable disjoint rules, u in Occ(l1)
an occurrence such that l1=u is not a variable, and CSUS(l1=u; l2) a complete set of S-
uniers of l1=u and l2 on Var(l1) [ Var(l2). Then the pairs h(r1) ; (l1[u r2])i with
 2 CSUS(l1=u; l2) are called S-overlaps (of R).
If the signature  is nite and regular, then -unication is decidable and for each pair
of -terms t, t0 there exists a nite, computable, complete set of -uniers (Schmidt-
Schau, 1985).
Proposition 4.4. Let t, t0, t00, t[u  t0] 2 T;R(V), u 2 Occ(t) and  be a -
substitution.
(Stability) t !R t0 implies (t)
!R (t0).
(Monotonicity) t0 !R t00 implies t[u t0]
!R t[u t00].
Theorem 4.5 (critical-pair lemma for sort-decreasing rules). Let R be sort
decreasing. Then !R is locally confluent i all -overlaps of R converge.
Proof. The proof is essentially the same as the unsorted one of Lemma 3.1 in Huet
(1980). Two additional facts are needed in the proof: The sort decreasingness ensures
that t 2 T(V)s and t!R t0 implies t0 2 T(V)s for all s 2 S. Moreover, t!R [u] t0
implies t=u 2 T(V) by Remark 3.8. 2
Note that the lemma diers from the lemma in Smolka et al. (1989) in the fact that we
do not restrict rewriting to -terms. !R is called weakly sort decreasing, if t 2 T(V)s
and t!R t0 implies there exists a ts 2 T(V)s such that t0
!R ts. The theorem remains
true, if we replace sort decreasing by weakly sort decreasing (With, 1993).
Definition 4.6. A -substitution  is called a specialization, if it is injective and if it
maps every variable xs to a variable (of the same or of a smaller sort).
Proposition 4.7. Let  be a nite and regular signature and let R be a nite rewriting
system such that !R is noetherian. Then it is decidable whether !R is weakly sort
decreasing.
Proof. First we show that !R is weakly sort decreasing i for each rules l! r 2 R,
for each specialization  , and for the least sort s of (l) there is a tr;s; 2 T(V)s such
that (r) !R tr;s; .
Assume !R is weakly sort decreasing and (l) 2 T(V)s for some rule l! r 2 R,
specialization  and sort s. Hence, (l)!R (r) implies there exists a tr;s; 2 T(V)s
such that (r) !R tr;s; .
Assume for each rules l! r 2 R, for each specializations  , and for the least sort
s of (l) there is a tr;s; 2 T(V)s such that (r) !R tr;s; and let t!R [l! r;u;] t0
A Semantic Approach to Order-sorted Rewriting 543
for some t 2 T(V)s0 . Since  is regular, (l) has a least sort s. Obviously, it suces
to show there exists a t00 2 T(V)s such that (r) !R t00. Since (l) 2 T(V)s there
obviously exists a specialization  and a -substitution 0 such that (l) 2 T(V)s
and (l) = 0((l)). Hence, there exists a tr;s; 2 T(V)s such that (r) !R tr;s; . Thus,
(l) = 0((l)) !R 0(tr;s; ) and 0(tr;s; ) 2 T(V)s. Therefore, we choose t00 = 0(tr;s; ).
We conclude that it suces to check for nite number of pairs (l); (r) whether there
is a tr;s;T(V)s such that (r) !R tr;s; where s is the least sort of (l). Since !R is
noetherian and Var(r)  Var(l) for all rules in R, there is only a nite number of term
tr such that (r)
!R tr. 2
Definition 4.8. The depth of a term t 2 ET(V) is dened by depth(t) = 0 if t 2 V[F
and depth(f(t1; : : : ; tn)) = 1 +maxfdepth(ti) j 1  i  ng if t = f(t1; : : : ; tn) and n  1.
Theorem 4.9.
(i) )R is locally confluent i !R is locally confluent.
(ii) )R is noetherian i !R is noetherian.
Let t! R t0 if t; t0 2 T(V) and t!R t0. Moreover, let R be sort decreasing.
(iii) ! R is locally confluent i !R is locally confluent.
(iv) ! R is noetherian i !R is noetherian.
Proof. We give a proof for (i) and (ii). (iii) and (iv) can be shown in the same way.
(i): By a slight modication of the proof of Theorem 4.5 we obtain the result that )R
is locally confluent i all -overlaps converge. Since all -overlaps are pairs of -terms
they converge with respect to )R i they converge with respect to !R .
(ii): Since !R  )R , !R is noetherian if )R is noetherian. Assume !R is
noetherian but )R is not. Hence, there is an innite sequence t1)R[u1] t2)

R[u2] : : :.
We may assume this sequence contains a term ti whose depth is the minimal depth of all
terms occurring in any innite sequence. If there is a j with uj =  then tj 2 T(V) and
tj!R [uj ] tj+1!

R [uj+1] : : : is an innite sequence in contradiction to the assumption.
If uj 6=  for all j then there is a number m such that t1=m )R t2=m
)R : : : where
tj=m )R tj+1=m for innite many j. Thus, the depth of ti=m is less than the depth ti
in contradiction to the assumption that the depth of ti is minimal. 2
(iii) and (iv) show that the extension of rewriting to semantically well-sorted terms
does not influence local confluence and the noetherian property. (i) and (ii) will be useful
for the computation of the semantical sorts of a term which will be explained in the
sequel.
In Example 1.3, we have seen that (weak) sort decreasingness is needed for a critical-
pair lemma if we use !R . One advantage of using !R on T;R(V) instead of T(V)
is that Birkhoâ€™s completeness theorem always holds which will be shown in the next
section. On the other hand, T;R(V) allows us to handle meaningful but ill-formed terms.
This was an open problem for the semantics we use (Goguen and Diaconescu, 1992).
544 A. Werner
Theorem 4.10. Let !R be sort decreasing and confluent. For all t 2 ET(V) and for
all s 2 S: t 2 T;R(V)s i there is a t0 2 T(V)s with t
)R t0.
Proof. If there is a t0 2 T(V)s with t )R t0 then t 2 T;R(V)s by Denition 3.10.
Conversely, if t 2 T;R(V)s then there is a t 2 T;R(V) with t
,R t. Hence, t
$R t.
Since !R is confluent, it has the Church{Rosser property. Thus, there exists a t0 with
t
!R t0 and t
!R t0. Hence, t0 2 T(V)s. 2
The theorem does not hold anymore, if we replace sort decreasing by weakly sort decreas-
ing:
Example 4.11. Consider the sorts A and B.
Function symbols: a : A b : B b0 : B f : A! A f : B ! B
Rules: 1 : a! f(b) 2 : b! a 3 : f(xB)! b0
Let t 2 ET(V). If t has the form fn(xA) for a variable xA of sort A and n  0, or if
t is a variable of sort A or B, then t is in normal form and there does not exist any t0
with t0!R t. Otherwise, t has the form fn(a), fn(b), fn(b0) or fn+1(xB) for a variable
xB of sort B and n  0. Then t !R b0. Hence, !R is confluent.
Since b!R a!R f(b) and a!R f(b)!R f(a), !R is weakly sort decreasing.
But there does not exists a t0 2 T(V)A with b0 !R t0, although b0 2 T;R(V)A since
a!R f(b)!R b0.
The critical point is the following one: !R is weakly sort decreasing, that is, if
t 2 T(V)s and t!R t0 then there exists a ts 2 T(V)s such that t0
!R ts. But we
are not able to prove that t 2 T(V)s and t !R t0 implies there exists a ts 2 T(V)s
such that t0 !R ts. For example, a 2 T(V)A and a
!R b0, but there is no tA 2 T(V)A
with b0 !R tA. But the proof of Theorem 4.12 shows that this does not happen if !R
is noetherian (and locally confluent). Note the similarity to the relation between local
confluence and confluence.
Theorem 4.12. Let !R be (weakly) sort decreasing, locally confluent and noetherian.
Then for all t 2 ET(V) and for all s 2 S : t 2 T;R(V)s i t+R 2 T(V)s.
Proof. If t+R 2 T(V)s, then t 2 T;R(V)s by Denition 3.10. Conversely, if t in
T;R(V)s then there exists a ts 2 T(V)s such that t
,R ts. Hence, t
$R ts. Since !R
is locally confluent and noetherian, we have ts
!R t#R. We prove that ts 2 T(V)s implies
t#R 2 T(V)s by noetherian induction. If ts is in normal form, then t#R = ts 2 T(V)s.
Otherwise we have ts
+!R t0s for some t0s 2 T(V)s, since !R is weakly sort decreasing.
By induction hypothesis, we have t#R = t0s#R 2 T(V)s. Thus, t+R = t#R 2 T(V)s. 2
Therefore, under the conditions of Theorem 4.12, a given expression is a (;R)-term
if its normal form with respect to )R is a -term. By the remark on Denition 4.1,
A Semantic Approach to Order-sorted Rewriting 545
for each (;R)-term the normal form with respect to )R and the normal form with
respect to !R coincide.
Example 4.13 (Goguen and Diaconescu, 1992).
Sorts: Nat: NEStack < Stack.
Function symbols: empty : Stack
push : Nat; Stack ! NEStack
top : NEStack ! Nat
pop : NEStack ! Stack
Rules: top(push(nNat; sStack)) ! nNat pop(push(nNat; sStack)) ! sStack
For example, top(pop(push(2; push(1; empty)))) is not a -term. But it can be reduced
to a -term: top(pop(push(2; push(1; empty)))) )R 1. Hence, it is a meaningful expres-
sion and a (;R)-term by denition. By the remarks on the denition of !R , we can
replace )R by
!R . On the other hand, we have pop(pop(push(1; empty)))
)R pop
(empty), hence the rst term is neither a meaningful expression nor a (;R)-term.
In Goguen et al. (1985), the same problem is solved by introducing new function
symbols ru;s : u ! s called retracts and equations ru;s(xs) = xs. Retracts are in-
serted whenever the sorts of a subterm are not suitable for the sort constraints dened
by the signature. Note, that Goguen et al. (1985) is based on the overloaded seman-
tics whereas we use the non-overloaded one. Retracts are non-strict in the following
sense: top(push(1; pop(r(pop(push(1; empty))))))! 1 where r : Stack ! NEStack, al-
though pop(pop(push(1; empty))) is not a meaningful expression. By way of contrast,
top(push(1; pop(pop(push(1; empty))))) is not reducible to 1 with respect to )R in our
approach.
5. Using (;R)-Substitutions
Now, we explain how a critical-pair lemma that does not require the rules to be
sort decreasing can be obtained. The problem in Example 1.3 arises from the fact that
sn(sq(yInt)) belongs to the set of -terms of sort Nat, but if we apply rule 2 to it then
the result sn(yIntyInt) does not belong to this set. Since both terms are equivalent, both
are (;R)-terms of sort Nat. Hence, we can solve the problem if we use more suitable
substitutions:
Definition 5.1. A (;R)-substitution is an extended substitution such that if xs is a
variable of sort s then (xs) is a (;R)-term of sort s.
Remark 5.2. For every (;R)-substitution  there exists a -substitution  such that
(t) ,R (t) for all t 2 ET(V).
Proposition 5.3.
(i) If t 2 T;R(V)s for some sort s and  is a (;R)-substitution, then (t) 2 T;R(V)s.
(ii) If  and  are (;R)-substitutions then    is also a (;R)-substitution.
Proof.
546 A. Werner
(i) By Remark 5.2 there is a -substitution  such that (t) ,R (t). By Deni-
tion 3.10, there is a ts 2 T(V)s with t ,R ts. Hence, (t)
,R (t)
,R (ts) and
(ts) 2 T(V)s.
(ii) The second part of the theorem is an immediate consequence of the rst part. 2
In Section 6.4, we will show that the rewriting systems obtained by completion of
a non-sort-decreasing rewriting system may contain terms not belonging to the set of
-terms. Therefore, in this section, we more generally assume from now on that the
rewriting sytem R stems from a -rewriting system R. We will explain this in more
detail in Section 6.4. Thus, T;R(V)s = T;R(V)s for all s 2 S and T;R(V) = T;R(V).
Definition 5.4 (!;RR ). We write t!;RR t0 if t, t0 2 T;R(V) and t)ExtR [] t0 for some
(;R)-substitution .
Note that !R  !;RR . The next theorem ensures that all rewriting relations used
in this paper are sound and complete.
Theorem 5.5. Given t, t0 ,t00 2 T;R(V), u 2 Occ(t) and a binary relation !A such
that !R  !A  !;RR , the following holds:
(Completeness) t0 $A t00 i t0 ,R t00 i t0
:=R t00
(Strong compat.) t0!A t00 implies (t[u t0] 2 T;R(V) i t[u t00] 2 T;R(V) )
Proof. (Completeness). Let t0 ,R t00 for t0, t00 2 T;R(V). By the remark on Deni-
tion 4.1, we have t0 $R t00. Since !R  !A , we conclude t0
$A t00.
Let t0 $A t00 for t0, t00 2 T;R(V). Since !A  !;RR , t0
$;RR t00. All we have to do
is to show that t1!;RR t2 implies t1
,R t2 for all t1; t2 2 T;R(V). Let t1!;RR t2. By
Remark 5.2, there is a -substitution  such that (te)
,R (te) for all te 2 ET(V).
Hence, t1 = t1[u (l)] ,R t1[u (l)] )R t1[u (r)]
,R t1[u (r)] = t2:
By Theorem 3.22, t0 =R t00 i t0
,R t00 for t0, t00 2 T;R(V).
(Strong compatiblitity). Let t[u  t0] 2 T;R(V) and t0!A t00. Hence, there exists a
t 2 T(V) such that t[u t0] ,R t by Denition 3.10. By the rst part of the theorem,
we have t0 ,R t00. Thus, t[u t0]
,R t[u t00]. Hence, t[u t00]
,R t, where t 2 T(V).
Therefore, t[u t00] 2 T;R(V) by Denition 3.10.
Completely analogously, we get t[u  t0] 2 T;R(V) if t[u  t00] 2 T;R(V) and
t0!A t00. 2
The strong compatibility of !A implies we do not need to check that both terms
in the denition of !R , !;RR (and !TR later) belong to T;R(V); it suces to
perform the check on one of them. This will be used to conclude from the semantical
well-sortedness of one term the semantical well-sortness of the other term in a rewriting
step or derivation. From the completeness it follows that rewriting using !R or !;RR
is complete (Birkhoâ€™s completeness theorem). Furthermore, all relations !A induce
the same congruence relation on (;R)-terms.
A Semantic Approach to Order-sorted Rewriting 547
Corollary 5.6. Let !A be a binary relation such that !A  !;RR . Then t in
T;R(V)s and t
$A t0 implies t0 2 T;R(V)s.
Similar to the unsorted critical-pair lemma in Huet (1980) it can be shown that !;RR
is locally confluent i all (;R)-overlaps ofR converge. However, there are two remaining
problems:
(i) In general, there need not to be a nite complete set of (;R)-uniers for two
(;R)-uniable terms. See Example 5.7.
(ii) In general, it is not decidable whether a given mapping is a (;R)-substitution. This
will be shown in Theorem 7.1. Therefore, rewriting is not decidable and overlaps
are not computable.
The following example shows that (;R)-unication is innitary:
Example 5.7. Pos < Nat: s(Nat) : Pos; 0 : Nat; mod2(Nat) : Nat:
Rules:
1 : mod2(0) ! 0;
2 : mod2(s(0)) ! s(0);
3 : mod2(s(s(xNat))) ! mod2(xNat):
Consider the following unication problem: yPos
:= mod2(zNat).
For each each natural number n, fyPos 7! mod2(s2n+1(0)); zNat 7! s2n+1(0)g is a
(;R)-unier since mod2(s2n+1(0)) !R s(0) implies mod2(s2n+1(0)) 2 T;R(V)Pos. On
the other side, mod2(t) 2 T;R(V)Pos only if t is a ground term. This implies that
(yPos) is a ground term for each (;R)-unier  of the given equation. Especially,
fyPos 7! mod2(zNat)g is not a (;R)-unier since mod2(zNat) 62 T;R(V)Pos.
6. Using T -Substitutions
6.1. T -substitutions
The problem of unifying two (;R)-terms with (;R)-substitutions is closely related
to E-unication. Therefore, we now dene substitutions which are of a more syntactical
nature.
The idea is to use the range sort of the top symbol of a term to decide whether it may
be assigned to a variable. Consider Example 1.3 again. If n > 0 then the range sort of
the top symbol of sn(yInt  yInt) is Nat. Hence, using this idea jsn(yInt  yInt)j can be
reduced to sn(yInt  yInt). In the remaining case n = 0, we add h sq(yInt); jyInt  yIntj i
to the set of critical pairs.
Assume  has two dierent range sorts:  : Nat;Nat ! Nat and  : Int; Int ! Int.
To ensure the soundness of substitutions, we have to take into account the semantical
sorts of the arguments of . These sorts will be proved to be undecidable in Theorem
7.1. It can also be shown that unication is innitary due to the dierent range sorts.
Therefore, we require that every function symbol has a uniquely determined range sort
for each arity n:
548 A. Werner
Definition 6.1. An order-sorted signature  is called range-unique if f(s1; : : : ; sn) : s
and f(s01; : : : ; s
0
n) : s
0 implies s = s0.
In Section 6.5, we will show how to transform arbitrary signatures into range-unique
ones. Note that every range-unique signature is regular. In the whole section except its
last subsection 6.5 we assume  to be range-unique.
Definition 6.2. A T -substitution is an extended substitution  : V ! T;R(V) such
that:
(xs)=f(t1; : : : ; tn) implies there are s1; : : : ; sn; s0 with f(s1; : : : ; sn) : s0 and s0  s,
(xs)=ys0 implies s0  s:
For instance, in Example 1.3 fxNat 7! sn+1(yInt  yInt)g is a T -substitution, whereas
fxNat 7! yInt  yIntg is not a T -substitution.
Lemma 6.3. Let R stem from a -rewriting system R. Every T -substitution is a
(;R)-substitution.
Proof. If (xs) is a variable, then the lemma trivially holds. Therefore, let t = (xs) =
f(t1; : : : ; tn), and let s0 be the range sort of f (for arity n). We have to show t 2 T;R(V)s.
By assumption t 2 T;R(V). Hence, there is a t 2 T(V) and a number m such that
t
m, R t (cf. remark above of Denition 5). We show by induction onm that t 2 T;R(V)s.
If m = 0 then t 2 T(V) and t = f(t1; : : : ; tn) 2 T(V)s, since  is range-unique.
Assume t, R t0
m, R t for some t0 2 ET(V). If t 2 T(V) then again we immediately
obtain t 2 T(V)s by the range-uniqueness. If t 62 T(V) then the reduction step t) R t0
or t0) R t respectively takes place at an occurrence u 6=  by Remark 3.8. Thus, t0 has
the form f(t01; : : : ; t
0
n). Since t
0 2 T;R(V) by Denition 3.10, t0 2 T;R(V)s by induction
hypothesis. Hence, t 2 T;R(V)s. 2
Proposition 6.4. Let R stem from a -rewriting system.
(i) If t 2 T;R(V)s for some sort s and  is a T -substitution, then (t) 2 T;R(V)s.
(ii) If  and  are T -substitutions then    is also a T -substitution.
Proof. The rst part is an immediate consequence of Lemma 6.3 and Proposition 5.3.
By Lemma 6.3 and Proposition 5.3,    is a (;R)-substitution. It remains to check
the condition on the range sorts of the top symbols. Let xs 2 Dom(  ). If (xs) is a
variable then the condition is fullled since  is a T -substitution, otherwise the condition
is fullled since  is a T -substitution. 2
6.2. T -unification
In this subsection, we study T -unication in range-unique signatures. It will be shown
that T -unication of (;R)-terms is decidable and nitary in nite, range-unique sig-
natures if R stems from a -rewriting system. Although the set of -substitutions is a
subset of the set of T -substitutions, it will turn out that T -unication of (;R)-terms
A Semantic Approach to Order-sorted Rewriting 549
Decompose Î“ [ ff(t1; : : : ; tn) := f(t01; : : : ; t0n)g â€˜ Î“ [ ft1
:
= t01; : : : ; tn
:
= t0ng
Merge Î“ [ fx := t; x := t0g â€˜ Î“ [ fx := t; t := t0g
if depth(t)  depth(t0) and value(t) < value(x)
Commutate Î“ [ ft := xg â€˜ Î“ [ fx := tg
if value(t) < value(x)
Delete Î“ [ ft := tg â€˜ Î“
Figure 3. T -unication: Decompose, Merge, Commutate and Delete.
and -unication of -terms are essentially the same in range-unique signatures. Our
methods and proofs are adjusted to the ones in Waldmann (1989). Since there are no
essential necessary modications we omit or sketch the proofs.
Assume, we have to nd a complete set of T -uniers of the (;R)-terms t and t0 on a
set of variables V . At rst, we transform Î“0 := ft := t0g into a set of equations Î“n using
the inference system in Figure 3. For that purpose, let X := fx1; x2; : : :g be the set of
variables occurring in t and t0. Using this denotation, we dene the function value by
value(xi) := i and value(t) = 0 for t 62 X.
Lemma 6.5. Let Î“ be a set of equations and let Î“0 be one obtained from Î“ by applying
one of the inference rules.
(i)  is T -unier of Î“ i  is T -unier of Î“0, for all T -substitutions .
(ii) If R stems from a -rewriting system and if Î“ is a set of equations between
(;R)-terms then Î“0 is also a set of equations between (;R)-terms.
If we start with the set of equations Î“0 and successively use one of the inference rules,
then after a nite number of steps none of the rules can be applied.
Let Î“n be the set of equations obtained from Î“0 by successively using inference rules
till no one is applicable. Then there are three possible cases:
(i) There exists an equation in Î“n which does not have the form of variable
:= term.
Thus, there is an equation f(t1; : : : tk) = g(t01; : : : ; t
0
l) such that f 6= g or k 6= l in
Î“n. Otherwise, rule Decompose would be applicable. Therefore, the set of T -uniers
of t and t0 is empty.
(ii) All equations of Î“n have the form variable
:= term. But it is not possible to order
the equations such that Î“n = fy1 := t1; : : : ; ym := tmg, where the variable yi does
not occur in tj for i  j. Similar to Theorem 8.4 in Waldmann (1989), it can be
shown that there is no T -unier of t and t0, since there exists a variable x that has
to be unied with a term containing x (that is, the occur check fails).
(iii) Î“n can be ordered such that Î“n = fy1 := t1; : : : ; ym := tmg, where the variable yi
does not occur in tj for i  j. Since none of the inference rules is applicable to Î“n,
we further have yi 6= yj for i 6= j. Then we can continue computing a complete set
of uniers.
Let Î“n = fy1 := t1; : : : ; ym := tmg be a set of equations between (;R)-terms such
that yi 6= yj for i 6= j and the variable yi does not occur in tj for i  j. Then we dene
sets of T -substitutions by U0 := fidVg and Ui := f   j  2 Uiâˆ’1;  2 W(yi);(ti)g for
1  i  m where
550 A. Werner
W(yi);(ti) :=
8>>>>>>>>>>>>>>>><>>>>>>>>>>>>>>>>:
ff(yi) 7! (ti)gg if f(yi) 7! (ti)g is a
T -substitution
ff(ti) 7! (yi)gg if f(yi) 7! (ti)g is not a
T -substitution,
but f(ti) 7! (yi)g is a
T -substitution,
(yi) 7! zs
(ti) 7! zs
 s 2Max(yi);(ti)
if both f(yi) 7! (ti)g and
f(ti) 7! (yi)g are not
T -substitutions, both (yi)
and (ti) are variables
; otherwise
where Max(yi);(ti) denotes the set of maximal lower bounds of the (least) sorts of (yi)
and (ti), and where zs is a new variable of sort s (i.e., zs 62 V and all new variables are
distinct).
Lemma 6.6. Let Î“n = fy1 := t1; : : : ; ym := tmg be a set of equations of (;R)-terms such
that yi 6= yj for i 6= j and the variable yi does not occur in tj for i  j. Um is a complete
set of T -uniers of t and t0 on V n fzsjâ€˜zs is a new variableâ€™g.
In the rst two steps of the computation of a complete set of T -uniers the sorts did
not have to be considered. Now, in the last step we have to take them into account. The
main idea of the last step is that all equations that (successively) have to be solved have
the form variable1
:= variable2 or variable
:= term:
(i) Consider xA
:= xB for some variables xA of sort A and xB of sort B, and let C be
the set of maximal lower bounds of A and B. Then ffxA 7! zC ; yB 7! zCg j C 2 Cg
is a complete set of T -uniers of xA and yB on V n fzC j C 2 Cg (see the third case
in the denition of W(yi);(ti)). If B  A (and analogously A  B) then we do
not need to introduce a new variable zc since it suces to consider the substitution
fxA 7! xBg (see the rst and second case of W(yi);(ti)).
(ii) On the other side, given xs
:= t where xs is a variable and t is a non-variable
(;R)-term, then
(a) either fxs 7! tg is a T -unier on V (see the rst case of W(yi);(ti))
(b) or there does not exist a T -unier of xs and t since  is range-unique (see the
last case of W(yi);(ti)).
Although the set of -substitutions is a subset of the set of T -substitutions, the problems
of -unication of -terms and T -unication of (;R)-terms are essentially the same.
To prove the lemma one shows by induction on i:
(i) For all 0 2 Ui, the restriction 0jV nfy1;:::;yig of 0 is a injective function from
V n fy1; : : : yig to V.
(ii) All 0 2 Ui are T -uniers of all equations in fy1 := t1; : : : ; yi := tig.
(iii) Ui is a complete set of T -uniers of fy1 := t1; : : : ; yi := tig on Y := V n fzs j â€˜zs is a
new variableâ€™g.
(iv) Dom(0) \ Im(0) = ; for 0 2 Ui.
A Semantic Approach to Order-sorted Rewriting 551
If we consider the denition of W(yi);(ti) then (i) ensures that (yi) is a variable that
does not occur in (ti). This is used in the main part of the proof of the lemma: (ii) and
(iii). (iv) implies that all substitutions in Um are idempotent.
Theorem 6.7. Let R stem from a -rewriting system, let t and t0 be (;R)-terms and
let V be a nite set of variables such that Var(t) [ Var(t0)  V  V. Then there exists
a complete set of T -uniers CSUT (t; t0) on V .
If furthermore  is nite then it is decidable whether there exists a T -unier of t and
t0, and CSUT (t; t0) is computable and nite.
6.3. rewriting and critical-pair lemmas
Definition 6.8 (!TR ). We write t!TR t0 if t, t0 2 T;R(V) and t)ExtR [] t0 for some
T -substitution .
For the same reasons as in Section 5 we assume in the whole subsection that R stems
from a -rewriting system. Note that !R  !TR  !;RR . By Theorem 5.5, Birkhoâ€™s
completeness theorem holds for rewriting with !TR .
Proposition 6.9. Let t, t0, t00, t[u  t0] 2 T;R(V), u 2 Occ(t) and  be a T -
substitution:
(Stability) t !TR t0 implies (t)
!TR (t0).
(Monotonicity) t0 !TR t00 implies t[u t0]
!TR t[u t00].
Definition 6.10. Let l1! r1; l2! r2 2 R be two variable disjoint rules, u in Occ(l1)
an occurrence such that l1=u is a variable,  := fl1=u 7! l2g is a T -substitution, but
fl1=u 7! r2g is not a T -substitution. Then the pair h(r1) ; (l1[u  r2])i is called T -
contact (of R).
Note, if R is sort decreasing then there is no T -contact of R.
Theorem 6.11 (Critical-pair lemma for !TR ). !TR is locally confluent i all T -overlaps
and all T -contacts of R converge.
Proof. We consider the non-trivial if case. Let t !TR [l1! r1;u1;1] t1 := t[u1  1(r1)]
and t !TR [l2! r2;u2;2] t2 := t[u2  2(r2)].
Case 1: u1 and u2 are disjoint occurrences. Similar to the unsorted critical-pair lemma,
t0 := (t[u1  1(r1)])[u2  2(r2)] = (t[u2  2(r2)])[u1  1(r1)] implies that t1 and
t2 converge to t0.
Case 2: Without loss of generality u2 = u1v. We show that the terms t1=u1 and t2=u1
converge to a term t0. By Proposition 6.9, this implies that t1 = t[u1  t1=u] and
t2 = t[u1  t2=u1] converge to t[u1  t0].
Case 2a: v 2 Occ(l1) and l1=v is not a variable. In this case, to show the convergence
552 A. Werner
of t1 and t2 one uses the convergence of the T -overlaps of R in the same way as in the
unsorted lemma. We have:
t=u2 = (t=u1)=v = 1(l1)=v = 1(l1=v) and t=u2 = 2(l2)
Hence, 1(l1=v) = 2(l2) holds. Since w.l.o.g. l1! r1 and l2! r2 are variable disjoint,
we dene
(x) =

1(x) if x 2 Var(l1)
2(x) otherwise
and get (l1=v) = (l2). Hence, there is a  2 CSUT (l1=u; l2) and a T -substitution  such
that (x) = ((x)) for all x 2 Var(l1) [ Var(l2). Since all T -overlaps converge, there is
a t with
(r1)
!TR t and (l1[v  r2])
!TR t:
Thus, t1=u1 = ((r1)) and t2=u1 = ((l1))[v  ((r2))] = ((l1[v  r2])) converge
to (t) by Proposition 6.9.
Case 2b: u2 = u1v1v2 and x0 := l1=v1 is a variable. As usual, we dene
1(y) :=

1(x0)[v2  2(r2)] if y = x0;
1(y) if y 6= x0:
Since 1(x0)=v2 = t=u1v1v2 = 2(l2) and 1(x0)=v2 = 2(r2), we have 1(x0)!TR 1(x0)
and 1(x0) 2 T;R(V) by Theorem 5.5. In the unsorted lemma it can be shown that t1
and t2 converge without using the convergence of the overlaps of R. In this lemma, 1 is
not necessarily a T -substitution. We have to distinguish three cases:
(i) First case: v2 6= . Thus, 1(x0) and 1(x0) have the same top symbol. Hence, 1
is a T -substitution.
(ii) Second case: v2 =  and fl1=v1 7! r2g is a T -substitution. Since 1(x0) =
1(x0)[v2  2(r2)] = 2(r2); 1 is a T -substitution by Proposition 6.4.
Hence, by Proposition 6.9, in both cases t1 and t2 converge in the same way as in the
unsorted lemma:
t1=u1 = 1(r1)
! 1(r1)
t2=u1 = 1(l1)[v  2(r2)] ! 1(l1)![l1! r1;;1] 1(r1)
(iii) Third case: v2 =  and fl1=v1 7! r2g is not a T -substitution. We will use (in
the same way as in Case 2a) the convergence of the T -contacts of R to prove the
convergence of t1 and t2.
Since l2 62 V by denition, 2(l2) and l2 have the same top symbol. Thus, 1(x0) =
t=u1v1v2 = 2(l2) and l2 2 T;R(V) implies that  dened by
(y) :=

l2 if y = x0;
y if y 6= x0;
is a T -substitution. We dene
(y) :=
8<: 1(y)qquad if y 2 Var(l1) n fx0g;x0 if y = x0;
2(y) otherwise.
A Semantic Approach to Order-sorted Rewriting 553
Since w.l.o.g. l1! r1 and l2! r2 are variable disjoint, we get ((x0)) = 2(l2) =
t=u1v1v2 = 1(l1=v1) = 1(x0). Hence, ((y)) = 1(y) for all y 2 Var(l1) and
((y)) = 2(y) for all y 2 Var(l2) for the same reasons.
Since all T -contacts converge, there is a t with
(r1)
!TR t and (l1[v1  r2])
!TR t:
Thus, the terms t1=u1 = ((r1)) and t2=u1 = ((l1))[v1v2  ((r2))] =
((l1[v1  r2])) converge to (t) by Proposition 6.9. 2
6.4. completion
If !TR is not locally confluent, we can try to transform it into a locally confluent
relation by adding critical pairs. In this section we discuss the particularities of completion
procedures for rewriting with the relation !TR and the dierences to classical completion
(Knuth and Bendix, 1970; Bachmair it et al., 1986).
We start with a set of equations E0 (for example E0 = ;) and a rewriting system
R0 both containing only -terms. In the following and in Section 7 we will see why we
use this assumption. As usual, we orient deduced equations to rewriting rules using a
reduction ordering:
Definition 6.12. A strict ordering on T;E0[R0(V) is a reduction ordering if
(i)  is noetherian
(ii) t1  t2 implies (t1) (t2) for all t1; t2 2 T;E0[R0(V) and for all T -substitutions
.
(iii) Given terms t1; t2 2 T;E0[R0(V) such that u is an occurrence in t 2 ET(V) and
t[u t1]; t[u t2] 2 T;E0[R0(V), t1  t2 implies t[u t1] t[u t2].
We require l r for each rule l! r 2 R0. The relation !TR is noetherian i there is
a reduction ordering  such that t!TR t0 implies t t0.
Figure 4 shows inference rules for completion. For the present we neglect the indices
of the equations and rules. As usual we disregard the orientation of an equation and
apply KO and KSE to both t1
:= t2 and t2
:= t1. Both kinds of critical pairs, T -overlaps
and T -contacts, are added as equational consequences by inference rule KA. As usual we
write (E;R) â€˜ (E0;R0) if we obtain (E0;R0) from (E;R) by applying one of the inference
rules.
In the following the soundness of the inference rules will be discussed. For semantically
well-sorted terms and other notions based on equations we want to incorporate the whole
equational theory, equations as well as rewriting rules. For the reason of simplicity, given
a set of equations Ei and a rewriting sytem Ri, we therefore consider Ei [Ri to be a set
of equations.
First we observe that the terms obtained by completion may contain ill-formed terms.
Therefore, we also considered in the above sections rules and equations containing ill-
formed terms.
Example 6.13. Nat < Int:  : Int; Int ! Int; sq; jj: Int ! Nat; sqrt : Nat !
Nat:
Rules: sqrt(sq(xInt))! j xInt j sq(xInt)!xInt  xInt.
554 A. Werner
KO: Orienting an equation
(E [ ft1 :=M t2g; R)
(E; R[ ft1!M t2g) if t1 > t2 and Var(t2)  Var(t1).
KA: Adding a critical pair
(E; R)
(E [ ft1 :=N t2g; R) if ht1; t2i is a T -overlap or a T -contact of R.
KSE: Simplifying an equation by !TR
(E [ ft1 :=M t2g; R)
(E [ ft01 :=M t2g; R) if t1!
T
R t
0
1.
KD: Deleting an equation
(E [ ft :=M tg; R)
(E; R):
KSR: Simplifying the right-hand side of a rule by !TR
(E; R[ ft1!N t2g)
(E; R[ ft1!N t02g) if t2!
T
R t
0
2.
KSL: Simplifying the left-hand side of a rule by !TR
(E; R[ ft1!N t2g)
(E [ ft01 :=N t2g; R)
if t1!TR [l! r;u] t01 where u 6=  or l and t1
are not equal up to variable renaming (i.e.,
there are no -substitutions  and 0 such that
(l) = t1 and 
0(t1) = l).
Figure 4. Inference rules for completion.
Hence, by completion we obtain the equation sqrt(xInt xInt) :=j xInt j. sqrt(xInt xInt)
is not a -term, but it is a semantically well-sorted term. This example shows that we
have to be very carefully, since T -substitutions are dened using semantically well-sorted
terms and therefore depend on the rewriting relation. For the present, the T -substitutions
used in the inference step from (Ei;Ri) to (Ei+1;Ri+1) are always T -substitutions with
respect to Ei [ Ri. We will show that both semantically well-sorted terms and $ TE[R
are invariable. The simplest way to do this is to show that , E[R is invariable and to
use Theorem 5.5.
First we observe that completion of the relation !;RR is unsound due to the simpli-
cation rules:
Example 6.14. Let Nat < Int and jj: Int ! Nat, 0 : Int. If we apply simplication to
E = fj 0 j := 0g and R = fj xNat j !xNatg we get E0 = f0 := 0g and R0 = R. We have
j 0 j âˆ’!;E[RR 0 since 0 2 T;E[R(V)Nat due to E, but we have neither j 0 j âˆ’!;E
0[R0
E0[R0 0
nor j 0 j  !;E0[R0E0[R0 0.
A Semantic Approach to Order-sorted Rewriting 555
....
.....
....
.......
....................................................................
....
.....
....A
 a
....
.....
....
.......
....................................................................
....
.....
....B .
....
.....
....
...........
...............................................................
....
.....
....Q
 q
Y
s
....
....
..............................
?h
f , k
g
.......
........
............
........................................................
................................................................
.........
.......
....
Figure 5. The signature of Example 6.15.
In this example, we completely lose the information that 0 is a semantically well-sorted
term of sort Nat due to simplication. This does not happen if rewriting and completion
is based on T -substitutions instead of (;R)-substitutions. Then it mainly depends on
the range sort of the top symbol of a term whether it may be assigned to a variable.
The range sort of a symbol only depends on the signature and is independent from the
equations and rules. However, it may happen that after a completion step a semantically
well-sorted term is not semantically well-sorted any more.
Example 6.15. Consider the sorts A, B and Q and the function declarations
a : A; f; k : B ! A; g : A! B; h : A! A; q : Q
(cf. Figure 5). If we start with
E0 = fa := f(g(h(a)))g; R0 = fh(a)! q; h(f(xB))! k(xB)g
we obtain by KSE-
E1 = fa := f(g(q))g; R1 = R0;
by KO and KSL-
E3 = fh(f(g(q))) := qg; R3 = fa! f(g(q)); h(f(xB))! k(xB)g;
and by KSE-T
E4 = fk(g(q)) := qg; R4 = R3
for a suitable reduction ordering. Finally, we may orient the equation in E4 into the rule
k(g(q))! q and completion terminates since none of the inference rules is applicable.
Unfortunately, the completion step from (E3;R3) to (E4;R4) is unsound. In the fol-
lowing we show:
(i) the step from (E3;R3) to (E4;R4) is really possible and $ TE4[R4 
$ TE3[R3 ,
(ii) $ TE4[R4 6=
$ TE3[R3 .
(i). We have h(f(g(q))) := q 2 E3. By applying the rule h(f(xB))! k(xB) to the left-
hand side of it we obtain k(g(q)) := q 2 E4. This is possible since fxB 7! g(q)g is a
T -substitution due to the function declaration g : A! B, and
g(q)$ E3[R3 g(h(f(g(q))))$

E3[R3 g(h(a))
and g(h(a)) 2 T(V). Note that we used the equation h(f(g(q))) := q 2 E3 itself.
(ii). In order to obtain h(f(g(q))) $ TE4[R4 q we have to show that the following steps
556 A. Werner
are possible: h(f(g(q)))! TE4[R4 k(g(q))
$ TE4[R4 q. This means that we have to apply the
rule h(f(xB))! k(xB) to h(f(g(q))). Therefore, fxB 7! g(q)g has to be a T -substitution.
First, we observe that the condition on the range sort of g is still fullled due to the
function declaration g : A! B. Furthermore, we have
g(q)$ E4[R4 g(k(g(q))) and g(h(f(g(q))))$

E4[R4 g(h(a)):
Hence, to get k(g(q)) $ TE4[R4 h(f(g(q))) we need k(g(q))
$ TE4[R4 h(f(g(q))) itself and
to get h(f(g(q))) $ TE4[R4 q we need h(f(g(q)))
$ TE4[R4 q itself.
The reason for the problems in the examples above is that we implicitly need an equation
itself to reduce a subterm of it. Obviously it is in general not decidable whether an
equation is needed to show that a subterm of it is semantically well sorted. The problem
can be solved by restricting the application of the simplication rules. We split E into
EN and EI , and R into RN and RI . Intuitively, EI and RI contain the descendants
of equations and rule of the initial set of equations and rules, EN and RN contain all
other equations and rules. If t1
:= t2 2 EI we write t1 :=I t2. Analogously we mark the
equations in EN and the rules in RI and RN . M is an arbitrary mark in fI;Ng. Figure
4 shows the inference rules. Only the rules in RI are excluded from simplication. We
show that for all other rules and equations, for any subterm t there is a -term t0 such
that t , RI t0.
Theorem 6.16 (Soundness of completion). Let (E0;R0) â€˜ (E1;R1) â€˜ : : : â€˜
(Em;Rm) where
(i) Ei = EI;i [ EN;i for i = 0; : : :m,
(ii) Ri = RI;i [RN;i for i = 0; : : :m,
(iii) E0 is a set of -equations and R0 is a -rewriting system, and
(iv) EN;0 = ; and RN;0 = ;.
Then ,E0[R0 =
,Ei[Ri and Ei [Ri stems from E0 [R0 for i = 0; : : : ;m.
Proof. For the reason of simplicity, we assume that all T -uniers are computed by the
algorithm given in Section 6.2. We prove by induction on i = 0; : : : ;m:
(i) ,E0[R0 =
,Ei[Ri ,
(ii) if t is a subterm of a term in Ei [Ri and s is the range sort of the top symbol of t
then there is a term t0 2 T(V)s such that t , EN;i[Ri t0,
(iii) , EN;i[Ri 
,RI;i .
Since E0 is a set of -equations, R0 is a -rewriting system, EN;0 = ;, RN;0 = ;; and 
is range-unique, (i), (ii) and (iii) are obviously true for i = 0. Assume that (i), (ii) and
(iii) hold for i.
KO: (i) and (ii) are immediate consequences of the induction hypothesis. If t1
:= t2 in
EI;i then t1! t2 2 RI;i. Otherwise t1 := t2 2 EN;i and (iii) holds by induction
hypothesis.
A Semantic Approach to Order-sorted Rewriting 557
KA: (ii) By the denition of T -overlaps and T -contacts respectively and the induction
hypothesis there are l1; l2 2 T;EN;i[Ri(V), an occurrence u 2 Occ(l1), and a
T -substitution  such that  is T -unier of l1=u and l2, (l1)! TRi [] t1 and
(l1)! TRi [0] t2. In the following we show that if s is the range sort of the
top symbol of a subterm t of (l1) then there is a term t0 2 T(V)s such
that t ,EN;i+1[Ri+1 t0. Then by a simple case analysis on the occurrence of the
subterm we get the same property for t1 and t2 in place of (l1) due to (ii).
Obviously, it is unimportant for the computation of a complete set of T -uniers
of l1=u and l2 whether EI;i = ; or EI;i 6= ;. For the reason of simplicity
we assume w.l.o.g. EI;i = ; for the present.y Therefore, l1 2 T;EN;i[Ri(V),
EN;i[Ri stems from E0[R0 and  is a (; E0[R0)-substitution. Hence, (l1)
in T;EN;i[Ri(V). Since EN;i [ Ri stems from a set of -equations, (l1)=u in
T;EN;i[Ri(V) for each occurrence u 2 Occ((l1)). For the same reasons Lemma
6.3 implies that if s is the range sort of the top symbol of a subterm t of (l1)
then there is a term t0 2 T(V)s such that t , EN;i+1[Ri+1 t0.
(iii) From the proof of (ii) we conclude that there are -substitutions  and 0 such
that (te)
, EN;i[Ri (te) and 0(te)
, EN;i[Ri 0(te) for all te 2 ET(V).
Thus,
t1 = (l1)[ (r1)] , EN;i[Ri (l1)[ (r1)]
(Ri (l1)[ (l1)], EN;i[Ri (l1)
, EN;i[Ri (l1)[u 0(l2)]) Ri (l1)[u 0(r2)]
, EN;i[Ri (l1)[u 0(r2)] = t2:
Using the induction hypothesis we get t1
,RI;i t2. Since RI;i+1 = RI;i we get
t1
,RI;i+1 t2.
(i) Finally, from (iii) we conclude that (i) is true.
KSE: (i) Since t1
:= t2 2 Ei and t01 := t2 2 Ei+1, it suces to show t1 ,Ei[Ri t01
and t1
, Ei+1[Ri+1 t01. From t1!
T
Ri [l! r;u;] t01 we conclude t1=u = (l) and
t01=u = (r). By induction hypothesis there is a -substitution  such that
(t) ,RI;i (t) for all t 2 ET(V). Hence, we have
t1
,RI;i t1[u (l)]!

Ri [l! r;u;] t1[u (r)]
,RI;i t01:
Thus t1
,Ei[Ri t01. We also obtain
t1
,RI;i+1 t1[u (l)]!

Ri+1 [l! r;u;] t1[u (r)]
,RI;i+1 t01
since RI;i+1 = RI;i.
(ii) We have ,RI;i =
,RI;i+1 . The term t01 is the result of an application of
a rule l! r in Ri to t1. Moreover, l ,RI;i r and (ii) holds for l, r and t1 by
induction hypothesis. Thus, we conclude (ii) holds for t01.
(iii) We have ,RI;i =
, RI;i+1 . If t1
:= t2 2 EI;i then t1 := t2 2 EI;i+1 and (iii)
holds by induction hypothesis. Otherwise t1
:= t2 2 EN;i and we have to show
y Otherwise we may construct a derivation (E00;R0) â€˜ : : : â€˜ (EN;i;Ri) where E00  E0.
558 A. Werner
t01
,RI;i+1 t2. t01 is the result of an application of a rule l! r 2 Ri to t1. By
induction hypothesis, t1
,RI;i t2 and l
,RI;i r. Since t01
,RI;i+1[fl! rg t1 by
the proof of (i), we conclude t01
,RI;i+1 t2.
KD: Since all relations , are reflexive, (i), (ii) and (iii) are immediate consequences of
the induction hypothesis.
KSR, KSL: The proofs are analogous to the ones for KSE. Recall that both inference
rules are not applied to the rules in RI;i. 2
Corollary 6.17. Consider the sequence of completion steps given in Theorem 6.16.
For i = 0; : : : ; n:
(i) for all t 2 ET(V): t 2 T;E0[R0(V) i t 2 T;Ei[Ri(V).
(ii) for all t; t0 2 T;E0[R0(V): t $E0[R0 t0 i t
$Ei[Ri t0.
(iii) for all t; t0 2 T;E0[R0(V): t $ TE0[R0 t0 i t
$TEi[Ri t0.
As an immediate consequence the inference system for basic completion consisting of
the inference rules KO, KA, KSE and KD is sound. Further possibilities to ensure the
soundness of completion are discussed in Werner (1993).
In the following we give results about the completeness of completion. Since the proofs
are similar to the ones for unsorted completion in Bachmair it et al. (1986) and order-
sorted completion with sort-decreasing rules in Waldmann (1992) we omit them.
Definition 6.18. A proof of an equation t := t0 (in Ei [ Ri) is a sequence P =
(t0; : : : ; tn) such that t = t0, t0 = tn and tjâˆ’1$ TEi tj, tjâˆ’1!
T
Ri tj or tjâˆ’1 
T
Ri tj for j =
1; : : : ; n. P is called rewrite proof if t0! TRi t1!
T
Ri : : : !
T
Ri tk 
T
Ri : : :  
T
Ri tnâˆ’1 
T
Ri tn
for some k with 0  k  n.
Trivially, t $ TEi[Ri t0 i there is a proof of t
:= t0 in Ei [ Ri. In Bachmair (1991) it was
shown for unsorted completion that each application of the inference rules is reflected by
transformations of proofs. We use the same ordering >C as in Bachmair et al. (1986) to
compare proofs.
Definition 6.19. A (nite or innite) derivation (E1; R1) â€˜ (E2; R2) â€˜ : : : is said to
be fair if E1 = ; and CP1 
S
iEi where E1 :=
S
i
T
jiEj and R1 :=
S
i
T
jiRj
denote the set of persisting equations and rules, CP1 denotes the set of all T -overlaps
and T -contacts of R1.
Lemma 6.20. Let (E0; R0) â€˜ (E1; R1) â€˜ : : : be a fair derivation and let P be a proof of
t
:= t0 in Ei [ Ri. If P is not a rewrite proof, then there is a j  i and a proof P 0 of
t
:= t0 in Ej [Rj such that P >C P 0.
Theorem 6.21. Let (E1; R1) â€˜ (E2; R2) â€˜ : : : be a fair derivation. For every proof of
t
:= t0 in Ei [Ri there is a j  i such that there is a rewriting proof of t := t0 in Ej [Rj.
Given an arbitrary pair (E0; R0) a fair derivation does not need to exist or backtracking
may be necessary to obtain one (Dershowitz et al., 1988).
A Semantic Approach to Order-sorted Rewriting 559
As a consequence of Theorem 6.21 we get:
Corollary 6.22. If (E1; R1) â€˜ (E2; R2) â€˜ : : : is a fair derivation then ! TR1 is noethe-
rian and confluent.
Example 6.23. Consider Example 1.3 again. We have
jsn+1(xInt  xInt)j!TR sn+1(xInt  xInt):
Furthermore, h sq(xInt) ; jxInt  xIntj i is a T -contact of R. If we add the rule
jxInt  xIntj ! xInt  xInt
to R then !TR is noetherian and confluent.
6.5. how to transform signatures into range-unique ones
In the preceding sections we needed the restriction that the signature is range unique.
Therefore, we show how an arbitrary signature can be transformed into an equivalent
range-unique one.
Our transformation of a signature  := (S;;F) into a range unique one ru :=
(Sru;ru;Fru) consists of three steps. First, we transform the signature into a regular
one by the method given in With (1992) and Schmidt-Schau (1987). Since this method
only works for signatures where S is nite, we assume in this whole subsection S to be
nite. In the second step we ensure that there is a greatest sort in the set of sorts. We also
achieve that for every function symbols f and each arity n there is a greatest range sort
sf=n. The kernel of the transformation is the third step. For each function symbol f and
for each range sort s we introduce a new function symbol fs. Furthermore, we have to add
rules to the given rewriting system which describes the relations of the function symbols.
Step 1: If  is regular then let re := , otherwise we transform  into the regular
signature re by the method given in With (1992) (where function declarations are
added on intersection sorts).
Step 2: If there is a greatest sort â„¦ 2 Sre, then let â„¦ := re, otherwise let â„¦ be the
signature obtained by adding the sort â„¦ 62 Sre to Sre with s â„¦ â„¦ for all sorts s.
In both cases, if for f 2 Fre and arity n there is no sf=n 2 Sre such that for all decla-
rations f(s1; : : : ; sn) : s there exists a declaration f(s01; : : : ; s
0
n) : sf=n with s1 â„¦ s01,
: : :, sn â„¦ s0n, and s â„¦ sf=n then we add for each declaration f(s1; : : : ; sn) : s the
declaration f(s1; : : : ; sn) : â„¦.
Step 3: Let ru be obtained by replacing the function declaration f(s1; : : : ; sn) : s by
fs(s1; : : : ; sn) : s for each function symbol f 2 Fâ„¦.
We dene T by T (x) = x for x 2 V and T (f(t1; : : : ; tn)) = fs(T (t1); : : : ; T (tn))
where s is the least sort of f(t1; : : : ; tn) and Tâˆ’1 by Tâˆ’1(x) = x for x 2 V and
Tâˆ’1(fs(t1; : : : ; tn)) = f(Tâˆ’1(t1); : : : ; Tâˆ’1(tn)).
We dene T (R) := fT (l)!T (r) j l! r 2 Rg.RF denotes the following set of rules:
If f 2 Fâ„¦ is a function symbol with declarations f(s1; : : : ; sn) : s and f(s01; : : : ; s0n) :
s0 such that
(i) s0 â„¦ s but s0 6= s,
560 A. Werner
(ii) for i = 1; : : : ; n, s00i is a maximal lower bound of si and s
0
i with respect to â„¦,
then RF contains fs(xs001 ; : : : ; xs00n)! fs0(xs001 ; : : : ; xs00n). Let Rru := T (R) [RF .
Example 6.24. The signature  dened by S = fNat; Intg with Nat < Int and the
function declarations
j j: Int ! Nat  : Int; Int ! Int;  : Nat; Nat ! Nat
and the rule jxNatj ! xNat are transformed into the signature ru dened by
Sru = fNat; Intg with Nat <ru Int and the function declarations
j jNat: Int ! Nat Int : Int; Int ! Int; Nat : Nat; Nat ! Nat
and the rules jxNatjNat ! xNat and xNat Int yNat ! xNat Nat yNat.
Note that jxNat  yNatj !R xNat  yNat but not jxInt  yIntj !R xInt  yInt and
jxNat Int yNatjNat !
ru
Rru xNat Nat yNat but not jxInt Int yIntjNat
!ruRru xInt Int yInt.
Let us add some remarks on the transformation:
(i) Vru contains besides the variables of V variables for the sorts introduced by the
transformation. Since these variables are only needed in some rules of RF , we
neglect them.
(ii) T assigns to each term t 2 T(V) a term consisting of the same function symbols
at the same occurrences that are labeled by the least sort of the corresponding
subterm. Tâˆ’1 removes these indices.
(iii) Usually, a -term may belong to dierent sorts. Hence, one term t 2 T(V) is
represented by dierent terms in Tru(V). These representatives are equal with
respect to $ruRF . !
ru
RF just replaces the sort labels by smaller ones. Since every
well-sorted term has a least sort, !ruRF is noetherian and confluent. The normal
form of a term t 2 Tru(V) is the term where the labels are the least sorts.
(iv) If S is innite, then the method in With (1992) used in Step 1 does not work.
Then we just skip Step 1 and modify the denition of T : T (x) = x if x 2 V and
T (f(t1; : : : ; tn)) = fsf=n(T (t1); : : : ; T (tn)) where sf=n is dened as above in Step
2. This allows us to obtain soundness and completeness results similar to the ones
given below. However, !ruRF does neither need to be noetherian (if t 2 T(V)
belongs to an innite descending sequence of sorts) nor confluent (if t 2 T(V)
belongs to two incomparable sorts, but to none of their subsorts).
(v) Some properties of the obtained rewriting system (see Werner (1993) for details):
(a) If !R is noetherian then !
ru
Rru is noetherian.
(b) !ruRF is sort decreasing, noetherian and confluent. Hence, rules of RF are
never the second rule of a T -contact (but they may be the rst one).
(c) If !R is sort decreasing then !
ru
Rru is sort decreasing.
(d) Confluence of !R does not imply confluence of !
ru
Rru . But if !R is sort
decreasing and confluent then it is possible to obtain a confluent (and sort
decreasing) rewriting system by adding some rules to Rru.
(vi) With the second step we avoid that we have to use the overloaded semantics which
will be explained in the next example.
A Semantic Approach to Order-sorted Rewriting 561
Example 6.25. Given the sorts A, B with function declarations f(A) : A, f(B) : B,
a : A, b : B and the rule a! b, we obtain by transformation A  â„¦ and B  â„¦ with
function declarations fA(A) : A, fB(B) : B, fâ„¦(â„¦) : â„¦, aA : A, bB : B and the rules
aA! bB fâ„¦(xA)! fA(xA) fâ„¦(xB)! fB(xB)
We have f(a)!R f(b). Due to the introduction of â„¦ and the function declarations to
â„¦, it also holds fA(aA)$
ru
Rru fâ„¦(aA)$
ru
Rru fâ„¦(bB)$
ru
Rru fB(bB).
Proposition 6.26. If there is at least one ground term ts 2 T(V)s for every sort s 2 S
then there is at least one ground term trus 2 Tru(V)s for every s 2 Sru.
Proof
(1) By construction, for each s 2 Sre there is at least one ground term t in Tre(V)s:
non-regular signatures are transformed into regular ones by adding function dec-
larations f(s1; : : : ; sn) : s where s1; : : : ; sn and s are possibly new. However, by
construction for each si there is at least one ground term ti in Tre(V)si . Hence,
f(t1; : : : ; tn) is of sort s. Thus, for every s 2 Sre there is at least one ground term
in Tre(V)s.
(2) For the second step, it suces therefore to show that there is a ground term of sort
â„¦. If S = ; then we may assume Sâ„¦ = ;. Otherwise there is at least one ground
term t 2 Tâ„¦(V)â„¦ by (1).
(3) If t 2 Tâ„¦(V)s then T (t) 2 Tru(V)s for all s 2 Sru. Hence, the proposition is a
consequence of (2).2
Proposition 6.27.
(i) If s 2 S and t 2 T(V)s then T (t) 2 Tru(V)s.
(ii) Tâˆ’1(T (t)) = t for all t 2 T(V).
(iii) If s 2 S and tru 2 Tru(V)s, then Tâˆ’1(tru) 2 T(V)s.
Proof. By induction on the term structure. To prove (iii) we use that T(V)s = Tre(V)s
for all s 2 S by construction. 2
Proposition 6.28. tru
!ruRF T (Tâˆ’1(tru)) for all tru 2 Tru(V).
Proof. We show it by induction on the term structure. If x 2 V then T (Tâˆ’1(x)) = x. Let
tru = fs(tru1 ; : : : ; t
ru
n ). By induction hypothesis, t
ru
i
!ruRF T (Tâˆ’1(trui )) for i = 1; : : : ; n.
Hence, tru !ruRF fs(T (Tâˆ’1(tru1 )); : : : ; T (Tâˆ’1(trun ))). Let sls be the least sort of the term
Tâˆ’1(tru) 2 Tre(V). By construction of RF , fs(T (Tâˆ’1(tru1 )); : : : ; T (Tâˆ’1(trun ))) !
ru
RF
fsls(T (T
âˆ’1(tru1 )); : : : ; T (T
âˆ’1(trun ))) = T (T
âˆ’1(tru)). 2
Next, we show the soundness and completeness of our transformation by proving that
it allows us to transform the word problem in (;R) to (ru;Rru) and vice versa.
Theorem 6.29. Let R be a -rewriting system.
562 A. Werner
(i) Let t1, t2 2 T(V) and let tru1 , tru2 2 Tru(V) such that Tâˆ’1(tru1 ) = t1 and
Tâˆ’1(tru2 ) = t2. If t1
$R t2 then tru1
$ruRru tru2 .
(ii) Let tru1 , t
ru
2 2 Tru(V). If tru1 $
ru
Rru t
ru
2 then T
âˆ’1(tru1 )
$R Tâˆ’1(tru2 ).
Especially, t1
$R t2 i T (t1)
$ruRru T (t2) for all t1, t2 2 T(V).
Proof In With (1992) it was shown that (re; R) is a conservative extension of (;R).
Obviously, the second step has no influence on rewriting. Hence, we may assume â„¦ = .
(i) We just have to add the sort indices and rewriting steps with !ruRF where they are
needed. We need an additional notation: If t 2 T;R(V) then we write t [0;1] !R t. If
t1
[n;m] !R t, t$R[u] t2, and m0 is the minimum of m and the length of the occurrence
u then we write t1
[n+1;m0] ! R t2. Thus, the rst gure denotes the number of rewriting
steps, the second one the minimal distance of a rewriting occurrence to the root .
Obviously, t1
$R t2 i there are n and m such that t1
[n;m] !R t2. We prove the rst
part of the theorem by noetherian induction using the following ordering: we write
t11
[n1;m1] ! R t12 > t21
[n2;m2] ! R t22 or [n1;m1] > [n2;m2] if n1 > n2 or both n1 = n2
and m1 > m2.
Let t1, t2 2 T(V), let tru1 , tru2 2 Tru(V) such that Tâˆ’1(tru1 ) = t1 and Tâˆ’1(tru2 ) = t2,
and let t1
[n;m] !R t2.
(a) If n = 0 then Tâˆ’1(tru1 ) = t1 = t2 = T
âˆ’1(tru2 ). Hence, t
ru
1
!ruRru T (t1) and
tru2
!ruRru T (t2) by Proposition 6.28.
(b) If n > 0 and m = 0 then t1
[n1;m1] ! R t3$R[l! r;;] t4
[n2;m2] ! R t2. By Remark
3.8, t3, t4 2 T(V). Thus, T (t3), T (t4) 2 Tru(V) and Tâˆ’1(T (t3)) = t3 and
Tâˆ’1(T (t4)) = t4. Hence, tru1
$ruRru T (t3) and T (t4)
$ruRru tru2 by induction hy-
pothesis. ru dened by ru(x) = T ((x)) for x 2 V is a ru-substitution.
ru(T (l)) !ruRF T (t3) and ru(T (r))
!ruRF T (t4) by Proposition 6.28. More-
over, we have ru(T (l))! ruT (R) [T (l)! T (r);;ru] ru(T (r)). Thus, tru1
$ruRru tru2 .
(c) If n > 0 and m > 0 then t1 = f(t11; : : : ; t1k), t2 = f(t21; : : : ; t2k), tru1 =
fs1(t
ru
11 ; : : : ; t
ru
1k), t
ru
2 = fs2(t
ru
21 ; : : : ; t
ru
2k), T
âˆ’1(truij ) = tij for i = 1; 2, j =
1; : : : ; k, and t1j
[nj ;mj ] ! R t2j withy [n;m] > [nj ;mj ] for j = 1; : : : ; k. By in-
duction hypothesis, tru1j
$ruRru tru2j for j = 1; : : : ; n. By construction of RF ,
there is a sort sf=n such that both fsf=n(t
ru
11 ; : : : ; t
ru
1k)
!ruRF fs1(tru11 ; : : : ; tru1k)
and fsf=n(t
ru
21 ; : : : ; t
ru
sk)
!ruRF fs2(tru21 ; : : : ; tru2k). Hence,
fs1(t
ru
11 ; : : : ; t
ru
1k)
$ruRru fsf=n(tru11 ; : : : ; tru1k)$ruRru fsf=n(tru21 ; : : : ; tru2k)
$ruRru fs2(tru21 ; : : : ; tru2k):
(ii) We just have to remove the sort indices and the rewriting steps with !ruRF . We
y Either there is only one j with nj = n > 0 (and mj = mâˆ’ 1) or nj < n for all j.
A Semantic Approach to Order-sorted Rewriting 563
show that tru1
n,ruRru tru2 for tru1 , tru2 2 ETru(V) implies Tâˆ’1(tru1 )
,R Tâˆ’1(tru2 ).
Thus, (ii) is true since tru 2 Tru(V) implies Tâˆ’1(tru) 2 T(V).
If n = 0 then Tâˆ’1(tru1 ) = T
âˆ’1(tru2 ). Let t
ru
1
n,ruRru tru,
ru
Rru[l! r] tru2 . By induc-
tion hypothesis, Tâˆ’1(tru1 )
,R Tâˆ’1(tru). If l! r 2 RF then Tâˆ’1(tru) = Tâˆ’1(tru2 ).
Otherwise, we have Tâˆ’1(tru),R[Tâˆ’1(l)! Tâˆ’1(r)] Tâˆ’1(tru2 ).2
Finally, we extend these results to semantically well-sorted terms.
Proposition 6.30. Let R be a -rewriting system.
(i) Let P be dened by P (x) = x for all variables x 2 V and P (f(t1; : : : ; tn)) =
fsf=n(P (t1); : : : ; P (tn)) where sf=n is dened in Step 2 of the transformation.
If t 2 T;R(V)s then
(a) P (t) 2 Tru;ru(V)s and
(b) Tâˆ’1(P (t)) = t.
(ii) If tru 2 Tru;ru(V)s then Tâˆ’1(tru) 2 T;R(V)s.
Proof. (i). (b): Tâˆ’1(P (t)) = t is trivially true.
(a): Let t 2 T(V)s. We show by induction on the term structure that P (t) )
ru
RF T (t)
and therefore P (t) 2 Tru;ru(V)s by Proposition 6.27. If t is a constant or a variable then
this is trivially true. Assume t = f(t1; : : : ; tn). Hence, P (t) = fsf=n(P (t1); : : : ; P (tn)). By
induction hypothesis, P (ti)
)ruRF T (ti) for i = 1; : : : ; n. Let s; s1; : : : ; sn be the least sorts
of t; t1; : : : ; tn 2 Tre(V). Hence, there is a declaration f : s01; : : : ; s0n : s such that si  s0i
for i = 1; : : : ; n. By construction of RF and Proposition 6.27 we get
P (t) = fsf=n(P (t1); : : : ; P (tn))
)ruRF fsf=n(T (t1); : : : ; T (tn)))ruRF fs(T (t1); : : : ; T (tn)) = T (t):
If t 2 T;R(V)s then there exist a ts 2 T(V)s and a number n such that t
n,R ts
by Denition 3.10. By Proposition 6.27, T (ts) 2 Tru(V)s. We show by induction on
n that P (t) ,ruRru T (ts). If n = 0 then t = ts 2 T(V)s and thus P (t)
)ruRF T (t).
Suppose we have t,R[l! r;u;] t1
n,R ts for n  0. By induction hypothesis, we get
P (t1)
,ruRru T (ts). By Proposition 3.8, t=u; t1=u 2 T(V). Thus, by Theorem 6.29 we
have T (t=u) ,ruRru T (t1=u). By the rst part of the proof, we get P (t1=u)
)ruRF T (t1=u)
and P (t=u) )ruRF T (t=u). Hence, P (t)
,ruRru P (t1)
,ruRru T (ts).
(ii). The second part is an immediate consequence of the proof of Theorem 6.29 (ii),
Proposition 6.27 and Denition 3.10. 2
Theorem 6.31. Let R be a -rewriting system.
(i) Let t1, t2 2 T;R(V) and let tru1 , tru2 2 Tru;ru(V) such that Tâˆ’1(tru1 ) = t1 and
Tâˆ’1(tru2 ) = t2. If t1
$R t2 then tru1
$ruRru tru2 .
(ii) Let tru1 , t
ru
2 2 Tru;Rru(V). If tru1 $
ru
Rru t
ru
2 then T
âˆ’1(tru1 )
$R Tâˆ’1(tru2 ).
564 A. Werner
Proof. (i). Let t1, t2 2 T;R(V) such that t1 $R t2. Moreover, let tru1 , tru2 2 Tru;ru(V)
such that Tâˆ’1(tru1 ) = t1 and T
âˆ’1(tru2 ) = t2.
Since tru1 , t
ru
2 2 Tru;ru(V), there is a trui0 2 Tru(V) such that trui ,
ru
Rru t
ru
i0 for
i = 1; 2. By the proof of Theorem 6.29 (ii), ti = Tâˆ’1(trui )
,R Tâˆ’1(trui0 ) for i = 1; 2. Since
t1
$R t2, this implies Tâˆ’1(tru10 )
,R Tâˆ’1(tru20 ). By Proposition 6.27, Tâˆ’1(trui0 ) 2 T(V) for
i = 1; 2. Hence, tru10
$ruRru tru20 by Theorem 6.29. Thus, we get trui
$ruRru trui0 for i = 1; 2,
and tru1
$ruRru tru2 .
(ii). The second part is an immediate consequence of the proof of Theorem 6.29 (ii)
and Proposition 6.30. 2
In Ganzinger (1991) and Goguen et al. (1985) similar techniques are used to transform
order-sorted signatures and rewriting systems into many-sorted ones. Note that neither
ru norRru are many-sorted. The transformation presented above can be used if the non-
overloaded semantics is considered, whereas the other ones are based on the overloaded
semantics (cf. Waldmann (1992)). In Section 8, we will discuss the dierences between
our approach and related work.
7. Undecidability Results
In Section 4, we have seen that it is decidable whether a given expression belongs to
T;R(V) if !R is sort decreasing, locally confluent and noetherian, and for example S
and R are nite and the sets T(V)s are decidable. However, in general, the set T;R(V)
is undecidable:
Theorem 7.1. There is no algorithm which, when presented
(i) a (nite) signature  (such that every function symbol only has one declaration)
(ii) a rewriting system R (such that the equational theory dened by R is decidable)
(iii) t 2 ET(V) and s, s0 2 S
that can decide whether a given statement of the following ones is true:
(1) t 2 T;R(V)s,
(2) t 2 T;R(V),
(3) T;R(V)s \ T;R(V)s0 = ;.
Proof. The idea is the same as the one used in Bockmayr (1987) to show that unication
and matching are undecidable for canonical theories. Consider the sorts R, Zero and Int:
R  Int and Zero  Int. We use the following function symbols:
0 : Zero  : Int; Int! Int
su : Int! Int + : Int; Int! Int
pr : Int! Int âˆ’ : Int! Int
f : R! Int py : Int; : : : ; Int! R
Let R contain the 24 rules for integer arithmetic in Rety et al. (1985) and the rule
py(x1; : : : ; xn)!Px1;:::;xn
A Semantic Approach to Order-sorted Rewriting 565
where Px1;:::;xn denotes an arbitrary multivariate integer polynomial.
!TR is locally confluent (by Theorem 6.11) and noetherian. Hence,
$TR is decidable.
P has a zero in t1; : : : ; tn i py(t1; : : : ; tn)
!TR 0. On the other hand, it is undecidable
whether a multivariate integer polynomial has a zero (Hilbertâ€™s tenth problem). Hence the
theorem is valid, since 0 2 T;R(V)R, f(0) 2 T;R(V) and T;R(V)R \ T;R(V)Zero 6= ;
i there are t1; : : : ; tn with py(t1; : : : ; tn)
!TR 0. 2
In the following we discuss how the problems that arise from these undecidability
results for rewriting with !TR can be solved. First we observe that starting from (;R)-
terms, e.g. -terms, all terms obtained by rewriting and completion are also (;R)-terms
by Theorem 5.5 and Theorem 6.16. In the previous sections, we furthermore showed that
if we assume that all given expressions are (;R)-terms then rewriting and computation
of critical pairs are essentially the same as if we use sort-decreasing rules and -terms.
Consequently, the undecidability results do not have any influence on completion itself
since we always start it with -terms. Moreover for a large class of terms including all -
terms|the set of terms we started from at the beginning of the paper|it is no problem
to check whether they are semantically well-sorted. Rewriting a semantically well-sorted
term always yields a semantically well-sorted term.
So it remains the problem that it may be desirable to have a method to check whether
an arbitrary given expression is semantically well sorted. As shown in Section 4 one
possibility is to restrict rewriting to weakly sort-decreasing rules. In this case the exten-
sion of rewriting from !R to !TR is superfluous. In the sequel we show how to solve
the problem if rewriting is based on !TR and not necessarily all rules are weakly sort
decreasing. The main idea is to extend the signature by an error supersort and lifted
declarations (cf. Smolka et al. (1989)), and to add rules to the rewriting system that
allow us to rewrite terms with respect to the extended signature to terms with respect
to the original signature. We show that an extended term is semantically well sorted i
its corresponding lifted term can be rewritten to an extended term with respect to the
original signature.
Definition 7.2. Given an order-sorted signature  = (S;;F) we obtain the order-
sorted signature > = (S>;>;F>) in the following way:
(i) S> := S [ f>g where > 62 S,
(ii) s>s0 i s  s0 or s0 = > for all sorts s; s0 2 S>, and
(iii) F> is obtained from F by adding the declaration f>(>; : : : ;>) : > for each function
declaration f(s1; : : : ; sn) : s.
If t 2 ET(V) then the corresponding lifted term L(t) 2 T>(V) is dened by
L(t) :=

t if t 2 V
f>(L(t1); : : : ; L(tn)) if t = f(t1; : : : ; tn)
Given a rewriting system R we then obtain R> by
R> := R[ ff>(xs1 ; : : : ; xsn)! f(xs1 ; : : : ; xsn) j f 2 F and f(s1; : : : ; sn) : sg
First we show some properties of these extensions:
566 A. Werner
Proposition 7.3.
(i) > is range-unique i  range-unique.
(ii) R> n R is sort decreasing.
(iii) (a) If R is a -rewriting system then R> is a >-rewriting system.
(b) If R stems from a -rewriting system R0 then R> stems from the >-rewriting
system R0>.
(c) If ,R =
, R0 then
, R> =
, >R0>
(iv) Let  be range-unique and let R stem from a  rewriting system.
(a) t ,R t0 i t
,>R> t0 for all t; t0 2 ET(V).
(b) t $TR t0 i t
$ TR> t0 for all t; t0 2 T;R(V).
Proof. (i), (ii) and (iii) are immediate consequences of the denition of > and R>.
(iv) (a): If t ,R t0 then trivially t
,>R> t0. We show t
n,>R> t0 implies t
,R t0 by in-
duction on n. The case n = 0 is trivial. Let t,>R> [;u;] t00
n,>R> t0. If  2 R then t00
in ET(V), t,R t00, and t00
,R t0 by induction hypothesis. Let  62 R. We may assume
that t ,>R> t0 has the form t,
>
R> [;u;] t
00 m,>R> t3,
>
R [;u;0] t4
k,>R> t0 where m < n,
k < n since  has the form f>(xs1 ; : : : ; xsl)! f(xs1 ; : : : ; xsl) and since as long as f>
has not been replaced by applying  none of the above rewriting steps of it are possible.
Thus, we conclude t00=u  i m,>R> [;u;] t3=u  i for i = 1; : : : ; l. By induction hypothesis we
get t00=u  i ,R t3=u  i for i = 1; : : : ; l. Thus, t
,R t4 and (again by induction hypothesis)
t4
,R t0.
(iv) (b) is an immediate consequence of (iv) (a) and Theorem 5.5. 2
Next we show that a term is semantically well sorted i its corresponding lifted term
is equivalent to a term in ET(V).
Theorem 7.4. Let  be range-unique and let R stem from a  rewriting system R0
and let t 2 ET(V). Then t 2 T;R(V) i there is a t0 2 ET(V) such that L(t) $ TR> t0.
Proof. â€˜yâ€™. Let t 2 T;R(V). Since R stems from the  rewriting system R0, t in
T;R(V) implies there is a number n and a t0 2 T(V) such that t n, R0 t0 by Denition
3.10. We use induction on n. Note that $ TR> =
$>R> =
$ >R0> . If n = 0 then t in
T(V) and L(t) ) 
>
R0> t (bottom up). Assume t, R0 [l! r;u;] t0
n, R0 t00. Since (l); (r) in
T(V) we have L((l)) ) 
>
R0> (l)) 
>
R0> (r)
(>R0 L((r)) and thus L(t)
$ >R0> L(t0). By
induction hypothesis there is a t3 2 ET(V) such that L(t0) , 
>
R0> t3. Thus, L(t)
, >R0> t3
and L(t) $ TR0> t3.
â€˜xâ€™. Let L(t) $ TR> t0 for some t0 2 ET(V). Since R> stems from the >-rewriting
system R0> we have L(t) $ TR> t0 implies there is an n such that L(t)
n,>R> t0. Again we
use induction on n. If n = 0 then t is a variable and trivially semantically well sorted.
Let n > 0 and L(t) n,>R> t0 where t0 2 ET(V). If L(t) is a variable again nothing has
to be shown. Otherwise L(t) = f>(t>1 ; : : : ; t
>
l ) and a step at occurrence  is the only
possibility to get rid of f>. Furthermore, l! r = f>(xs1 ; : : : ; xsl)! f(xs1 ; : : : ; xsl) in
A Semantic Approach to Order-sorted Rewriting 567
R> and (l))>R> [l! r] (r) implies (r) 2 T(V). Therefore, L(t)
n,>R> t0 has the form
L(t),>R>[ui] : : : ,
>
R>[uk] t
00,>R>[;] t
m,>R> t0 where ui 6=  for i = 1; : : : ; k, 0  k <
n and m < n. Hence,  : f>(xs1 ; : : : ; xsl)! f(xs1 ; : : : ; xsl) and t = f(t1; : : : ; tl) and
L(t)=i = L(ti)
k,>R> t00=i where t00=i 2 T(V)si for i = 1; : : : ; l. By induction hypothesis
ti 2 T;R(V) and by Proposition 7.3 and Denition 3.10 ti 2 T;R(V)si for i = 1; : : : ; l.
Hence, t = f(t1; : : : ; tn) 2 T;R(V) by Proposition 3.15. 2
Note that L(t) is a >-term and thus due to the observation described above it is not
necessary to check any term occurring in a rewrite sequence for semantic well sortedness.
Now the question arises of what we have gained so far since the â€˜proofâ€™ in the theorem
looks very similar to the one in Denition 3.10. The answer is that the additional rules
have a special form that allows us to transform L(t) $ TR> t0 into L(t)
! TR>1 t
0 using
completion:
Proposition 7.5. Let  be a range-unique signature and let  be a reduction ordering
such that f> 2 F> n F , t, t1; : : : ; tn 2 ET(V) impliesy f>(t1; : : : ; tn)  t and let
(E00;R00) â€˜ (E01;R01) â€˜ : : : (E0m;R0m) where E00 := E0 and R00 := R0> for some set of
-equations E0 and -rewriting system R0. Then for all equations and rules l := r in
E0m [R0m:
(i) l, r 2 ET(V) or
(ii) l = f>(t1; : : : ; tn) where f> 2 F> n F and t1; : : : ; tn 2 ET(V), and r 2 ET(V).
Proof. By induction on the number of completion steps m. 2
So, assuming fairness the proof L(t) $ TR> t0 in Theorem 7.4 will be transformed nally
into a rewrite proof L(t) ! TR>1 t
00  TR>1 t
0 where t00 2 ET(V) due to t0 2 ET(V) and
Proposition 7.5.
By the proof of Theorem 7.4 each semantically well-sorted term is equivalent to its
corresponding lifted term. Hence it is possible to perform checking for well sortedness
and proving (or normalization) at once.
As an immediate consequence of Theorem 7.1 we obtain that even if !TR is confluent
and noetherian, we do not necessarily get a nite, confluent and noetherian system by
completion of R> with respect to ! TR> .
8. Related Work
In Chen and Hsiang (1991), new function symbols and function declarations are added
to the given signature in order to get weakly sort-decreasing rules. In With (1992), term
declarations are used to obtain a weakly sort-decreasing rewriting system. Each rewriting
system of the class of rewriting systems used in the proof of Theorem 7.1 is noetherian
y For example, any recursive path ordering where each symbol in F> n F is greater than any symbol
in F with respect to the used precedence satises this condition. More generally, given any reduction
ordering  the lexicographic ordering (>l;) where >l compares the number of symbols in F> n F
occurring in the terms also satises the condition. Note that (>l;) is stable under substitution since
 is and since we do not use any variables x 2 V>.
568 A. Werner
and locally confluent due to critical-pair Lemma 6.10. But it is not possible to transform
all of them equivalently into a weakly sort-decreasing one by Theorem 4.12 and Theorem
7.1 (note that $R =
$TR by Theorem 5.5).
Hintermeier et al. (1993) presents a dierent approach. To each term a type expression
is associated containing the types of the term which already have been deduced during
computation. In this framework, a property called sort inheritance is necessary to ensure
the completeness of unication. A procedure to check this property is given. But in
general sort inheritance is undecidable (Theorem 7.1). Similar to above it can be shown
that, for some of the rewriting systems given in Theorems 7.1, there does not exist an
equivalent confluent and noetherian one.
In Comon (1991), sort constraints based on a fragment of second-order logic are used in
order to get a critical-pair lemma. From the termination of completion point of view there
is no possible inclusion between Comonâ€™s approach and the approach presented in Section
6. For example, Comonâ€™s completion procedure does not terminate when we consider
the sorts Nat < Int < Real with the function declarations 0 : Nat, ! : Nat ! Nat,
sq : Int ! Nat,  : Int; Int ! Int and the rule sq(xInt)!xInt  xInt due to the fact
that overlaps below of variable occurrences are also critical. On the other hand, Comonâ€™s
approach allows the schematization of terms which may be used to solve divergence
problems of completion.
In Ganzinger (1991), order-sorted term rewriting systems are translated into many-
sorted ones. The rewriting system of Example 1.2 is locally confluent in our approach
but it is not locally confluent if we transform it to a many-sorted one.
As the main advantage of our approach presented in Section 6 we consider its simplicity.
It is not dicult to implement it. T -substitutions allow a very ecient implementation of
matching and unication: we do not have to compute the sorts of a term, it suces to look
at the range sort of its top symbol to decide whether it may be substituted for a variable.
9. Conclusions
We demonstrated the benets of (;R)-terms: Birkhoâ€™s completeness theorem always
holds. Meaningful but ill-formed terms are contained in the set of (;R)-terms. We
showed some decidability and undecidability results and demonstrated how to overcome
the resulting problems.
Basically, it is advisable to use sort-decreasing rewriting systems (and semantically
well-sorted terms) as far as possible. Natural examples, however, show the necessity to
generalize the critical-pair lemma to non-sort-decreasing rewriting systems. Alternatively,
the relation !TR can be used.
The dierence between our approach and other ones was shown in the last section. In
Werner (1991), we carried over the completeness results for many narrowing strategies
from the unsorted to the order-sorted case for both approaches.
Acknowledgements
I am grateful to Christoph Brzoska, Hubert Comon, Claus Hintermeier, Uwe Wald-
mann and Lars With for discussion and comments. I thank Michael Gollner for reading
earlier versions of this paper. This work was supported by the Deutsche Forschungsge-
meinschaft as part of the SFB 314.
A Semantic Approach to Order-sorted Rewriting 569
References
|Bachmair, L. (1991). Canonical Equational Proofs. BirkhaÂ¨user.
|Bachmair, L., Dershowitz N., Hsiang, J. (1986). Orderings for equational proofs. In Proc. IEEE Symposium
Logic in Computer Science, Cambridge, MA, pp. 346{357.
|Bockmayr, A. (1987). A note on a canonical theory with undecidable unication and matching problem.
J. Automated Reasoning 3, 379{381.
|Chen, H., Hsiang, J. (1991). Order-Sorted Specication and Completion, Technical Report, Department
of Computer Science, SUNY at Stony Brook.
|Comon, H. (1991). Completion of Rewrite Systems with Membership Constraints. Research Report. CNRS
& LRI, Paris.
|Dershowitz, N., Jouannaud J.P. (1990). Rewrite systems. In Handbook of Theoretical Computer Science,
volume B, chapter 6, pp. 244{320, Elsevier Science Publishers North-Holland.
|Dershowitz, N., Marcus, L., Tarlecki, A. (1988). Existence, uniqueness, and construction of rewrite systems.
SIAM J. Comput. 17, 629-639.
|Ehrig, M., Mahr, B. (1985). Fundamentals of Algebraic Specication I: Equations and Initial Semantics,
Springer-Verlag, Berlin, Heidelberg.
|Ganzinger, H. (1991). Order-sorted completion: the many-sorted way, Theoret. Comput. Sci. 89, 3{32.
|Goguen, J.A., Diaconescu, R. (1992). A short survey of order sorted algebra, ETACS Bull. 49, pages
121{133.
|Goguen, J.A, Jouannaud, J.P., Meseguer, J. (1985). Operational semantics for order-sorted algebra, Proc.
12th ICALP , LNCS 194, pp. 221{231, Springer-Verlag, Berlin, Heidelberg.
|Hintermeier, C., Kirchner, C., Kirchner, H. (1993). Dynamically-Typed Computations for Order-Sorted
Equational Presentations. Technical Report CRIN 93-R-309. INRIA-Lorraine & CRIN, Nancy.
Extended Abstract in Proc. 21st ICALP, 1994, LNCS 820, pp. 450{461, Springer-Verlag, Berlin,
Heidelberg.
|Huet, G. (1980). Confluent reductions: Abstract Properties and application to term rewrite systems,
J. ACM 27, 797{821.
|Huet, G., Oppen, D.C. (1980). Equations and rewrite rules: A survey. In Book, R., (ed), Formal Languages:
Perspectives and Open Problems, pages 349{405, Academic Press, London.
|Kfoury, A.J., Moll, R.N., Arbib, M.A. (1982). A Programming Approach to Computability, Springer-
Verlag, Berlin, Heidelberg.
|Kirchner, C., Kirchner, H. (1992). Order-Sorted Rewriting Computation in G-algebra. Technical Report.
INRIA-Lorraine & CRIN, Nancy.
|Knuth, D., Bendix, P. (1970). Simple word problems in universal algebras. In: Leech J. (ed.) Computional
Problems In Abstract Algebras, pp. 263{297, Pergamon Press, Oxford.
|Megrelis, A. (1990). Algebre galactique|Un procede de calcul formel, relatif aux semi-fonctions, a
lâ€™inclusion et a lâ€™egalite. These de Doctorat dâ€™Universite, Universite de Nancy I, 1990.
|Rety, P., Kirchner, C.,Kirchner, H., Lescanne, P. (1985). NARROWER: A New Algorithm for Unication
and its Application to Logic Programming, Proc. 1st RTA, LNCS 202, pp. 141{157, Springer-Verlag,
Berlin, Heidelberg.
|Schmidt-Schau, M. (1985). A many-sorted calculus with polymorphic functions based on resolution and
paramodulation, Proc. 9th Int. Joint Conference on AI , pp. 1162{1168, W. Kaufmann, Inc., Los
Angeles, CA.
|Schmidt-Schau, M. (1987). Computational Aspects of an Order-Sorted Logic with Term Declarations,
PhD thesis, UniversitaÂ¨t Kaiserslautern, 1987.
|Schmidt-Schau, M. (1989). Computational Aspects of an Order-Sorted Logic with Term Declarations,
LNAI 395, Springer-Verlag, Berlin, Heidelberg.
|Smolka, G., Nutt, W., Goguen, J.A., Meseguer, J. (1989). Order-sorted equational computation. In: Ait-
Kaci H., Nivat, M. (eds) Resolution Of Equations In Algebraic Structure, volume 2, pp. 297{367,
Academic Press.
|Waldmann, U. (1989). Unication in Order-Sorted Signatures, Forschungsbericht Nr. 298, UniversitaÂ¨t
Dortmund.
|Waldmann, U. (1992). Semantics in order-sorted specications, Theoret. Comput. Sci. 94, 1{33.
|Werner, A. (1991). Termersetzung und Narrowing mit geordneten Sorten, Diplomarbeit, FakultaÂ¨t fuÂ¨r
Informatik, UniversitaÂ¨t Karlsruhe.
|Werner, A. (1993). A semantic approach to order-sorted rewriting. Proc. of 5th RTA, Montreal, Canada,
LNCS 690, pp. 47{61, Springer-Verlag, Berlin, Heidelberg. Full version: Interner Bericht 5/93, Fak-
tultaÂ¨t fuÂ¨r Informatik, UniversitaÂ¨t Karlruhe.
|With, L. (1992). Completeness and confluence of order-sorted term rewriting, Proc. of 3rd CTRS , LNCS
656, pp. 393{407, Springer-Verlag, Berlin, Heidelberg.
|With, L. (1993). Order-Sorted Equational Computation, Technical Report, TU Berlin.
Originally received July 1993
Accepted 31 March 1995
