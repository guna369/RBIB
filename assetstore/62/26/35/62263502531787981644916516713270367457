Algorithmic Problems for Metrics on Permutation
Groups
V. Arvind and Pushkar S. Joglekar
Institute of Mathematical Sciences
C.I.T Campus,Chennai 600 113, India
{arvind,pushkar}@imsc.res.in
Abstract. Given a permutation group G ≤ Sn by a generating set, we explore
MWP (the minimum weight problem) and SDP (the subgroup distance problem)
for some natural metrics on permutations. These problems are know to be NP-
hard. We study both exact and approximation versions of these problems.
Analogous questions for codes and lattices have been intensively studied in recent
years. Since lattices and codes are basically abelian groups, our primary motiva-
tion is to see how the techniques applied to lattice problems can be extended to
permutation groups (which are nonabelian in general). We summarize our main
results:
– For our upper bound results we focus on the Hamming and the l∞ permu-
tation metrics. For the l∞ metric, we give a randomized 2O(n) time algo-
rithm for finding an optimal solution to MWP. Interestingly, this algorithm
adapts ideas from the Ajtai-Kumar-Sivakumar algorithm for the shortest vec-
tor problem in lattices [AKS01]. For the Hamming metric, we again give a
2O(n) time algorithm for finding an optimal solution to MWP. This algo-
rithm is based on the classical Schrier-Sims algorithm for finding pointwise
stabilizer subgroups of permutation groups.
– It is known that SDP is NP-hard([BCW06]) and it easily follows that SDP is
hard to approximate within a factor of logO(1) n unless P = NP. In contrast,
we show that SDP for approximation factor more than n/ logn is not NP-
hard unless there is an unlikely containment of complexity classes.
– For several permutation metrics, we show that the minimum weight problem
is polynomial-time reducible to the subgroup distance problem for solvable
permutation groups.
1 Introduction
We investigate the computational complexity of two natural problems for metrics on
permutation groups given by generating sets. Given a permutation group G = 〈A〉 ≤
Sn by a generating setA of permutations, we are interested in theminimumweight prob-
lem (denoted MWP) and the subgroup distance problem (denoted SDP) for natural per-
mutation metrics. These problems were studied by Cameron et al in [BCW06,CW06]
and shown to be NP-hard for several natural permutation metrics.
These problems are analogous to the shortest vector problem and the closest vector
problem for integer lattices, and to the minimum Hamming weight problem and nearest
codeword problem for linear codes. The corresponding problems for lattices and codes
are also NP-hard, and their approximability is a subject of current intensive study (see
e.g. [MG02]). Our primary motivation stems from the fact that lattices and codes are
abelian groups, and it is interesting to ask if the upper and lower bound techniques
and results for approximability can be extended to arbitrary (nonabelian) permutation
groups. Several permutation metrics are in the literature and have been studied from
a statistical perspective. Deza [DH98] examines permutation metrics from a coding
theory perspective by considering subgroups of Sn as codes.
Our main results: We give 2O(n) time algorithms for the minimum weight problem
for both the Hamming and the l∞ permutation metrics. Notice that a naive brute-force
search algorithm can take n! steps since G ≤ Sn can have up to n! elements. In the
case of Hamming metric, it turns out that we can design a deterministic 2O(n) time
algorithm which is group theoretic in nature. The algorithm is based on the classi-
cal Schrier-Sims algorithm for finding pointwise stabilizer subgroups of permutation
groups (see e.g. [Lu93]). However, the problem for l∞ metric does not appear amenable
to a group-theoretic approach. Our 2O(n) time randomized algorithm for the problem
is more geometric. Interestingly, for this algorithm we are able to adapt ideas from the
Ajtai-Kumar-Sivakumar algorithm for the shortest vector problem in lattices [AKS01].
A function d : Sn × Sn 7→ R is a metric on the permutation group Sn if for all
pi, τ, ψ ∈ Sn d(pi, τ) = d(τ, pi) ≥ 0 and d(pi, τ) = 0 iff pi = τ . Furthermore, the
triangle inequality holds: d(pi, τ) ≤ d(pi, ψ) + d(ψ, τ).
Let e ∈ Sn denote the identity permutation. For τ ∈ Sn, d(e, τ) is the norm
of τ for metric d, and is denoted by ‖τ‖. A right-invariant metric d on Sn satisfies
d(pi, τ) = d(piψ, τψ) for all pi, τ, ψ ∈ Sn. A left invariant metric is similarly defined.
For a detailed discussion regarding metrics on Sn we refer to [DH98]. We recall the
definitions of permutation metrics studied in this paper.
Hamming distance: d(τ, pi) = |{i|τ(i) 6= pi(i)}|.
lp distance: for p ≥ 1, d(τ, pi) = (Σni=1|τ(i)− pi(i)|p)1/p.
l∞ distance: d(τ, pi) = max1≤i≤n|τ(i)− pi(i)|.
Cayley Distance: d(τ, pi) = minimum number of transpositions taking τ to pi.
These metrics are right invariant. The Hamming and the Cayley metric are also left
invariant.
For S ⊆ Sn and τ ∈ Sn let d(τ, S) = minψ∈Sd(τ, ψ). For τ ∈ Sn, r ∈ R+
let Bn(τ, r, d) = {pi ∈ Sn|d(pi, τ) ≤ r} be the ball of radius r centred at τ for a
metric d. Analogous to the geometric setting, we define the volume Vol(S) of a subset
S ⊆ Sn as its size |S|. For right invariant metric d we have, for all τ ∈ Sn, r ≥ 0,
Vol(Bn(e, r, d)) = V ol(Bn(τ, r, d)). Next we define Subgroup Distance Problem and
Minimum Weight Problem with respect to a metric d.
Definition 1. [CW06,BCW06]
Subgroup Distance Problem (SDP): Input instances are (G, τ, k), where G ≤ Sn is
given by a generating set, τ ∈ Sn, and k > 0. Is d(τ,G) ≤ k?
Minimum Weight Problem (MWP): Input instances are (G, k), G ≤ Sn given by a
generating set and k > 0. Is there a τ ∈ G \ {e} with ‖τ‖ ≤ k?
We are also interested in approximate solutions to MWP and SDP. For MWP, given
γ > 1 the problem is to find a pi ∈ G, pi 6= e such that ‖pi‖ is bounded by γ times the
2
optimal value. Likewise for SDP. As usual, we can define promise decision versions of
SDP and MWP that capture this notion of approximation.
For any permutation metric d, the promise problem GapSDPγ where γ is a function
of n, is defined as follows: inputs are the SDP inputs (G, τ, k). An instance (G, τ, k)
is a YES instance if there exist ψ ∈ G such that d(ψ, τ) ≤ k. And (G, τ, k) is a NO
instance if for all ψ ∈ G, d(ψ, τ) > γk. The problem GapMWPγ is similarly defined.
An algorithm solves the promise problem if it decides correctly on the YES and NO
instances.
2 A 2O(n) algorithm for MWP over l∞ metric
We consider the search version ofMWP: givenG ≤ Sn, the goal is to find a permutation
τ ∈ G \ {e} with minimum norm with respect to a metric d. We refer to such a τ ∈ G
as a shortest permutation in G w.r.t. the metric d. First we consider the l∞ metric and
give a 2O(n) time randomized algorithm for finding a shortest permutation for G ≤
Sn given by generating set. The algorithm uses the framework developed in [AKS01]
for the shortest vector problem for integer lattices. Regev’s notes [Re] contains a nice
exposition.
The basic idea is to first pick N elements of G independently and uniformly at
random, where N is 2c·n (where the constant c will be appropriately chosen). Each of
these elements is multiplied by a random permutation of relatively smaller norm to get
a new set of N elements. On this set of permutations a sieving procedure is applied in
several rounds. The crucial property of the sieving is that after each stage the remaining
permutations have the property that the maximum norm is halved and in the process at
most 2c
′·n elements are sieved out for a small constant c′.
Thus, repeated sieving reduces the maximum norm until it becomes a constant mul-
tiple of norm of shortest permutation ofG. Then we can argue that for some pi1, pi2 from
the final set of permutations, pi1pi−12 will be a shortest permutation with high probability.
First we prove certain volume bound for l∞ metric ball, which is crucially used in
the algorithm, next we give a procedure to sample permutations from an l∞ metric ball
uniformly.
Lemma 1. For 1 ≤ r ≤ n − 1 we have, rn/e2n ≤ Vol(Bn(e, r, l∞)) ≤ (2r + 1)n.
Consequently, for any constant α < 1, Vol(Bn(e, r, l∞))/Vol(Bn(e, αr, l∞)) ≤ 2c1·n,
where c1 = log2(3e2/α).
Proof. Let τ ∈ Bn(e, r, l∞). So, |τ(i) − i| ≤ r for all i. Thus, for each i there are at
most 2r + 1 choices for τ(i). This implies Vol(Bn(e, r, l∞)) ≤ (2r + 1)n. Although
better bounds can be shown, this simple bound suffices for the lemma. Nowwe show the
claimed lower bound. Let n = kr + t, 0 ≤ t ≤ r − 1. For jr + 1 ≤ i ≤ (j + 1)r, 0 ≤
j ≤ k − 1, τ(i) can take any value in {jr + 1, jr + 2, . . . , (j + 1)r}. Hence we
have Vol(Bn(e, r, l∞)) ≥ r!kt! ≥ (rr/er)kt! ≥ rn−ttt/en. Using some calculus it is
easily seen that the function y = rn−ttt is minimum at t = r/e. Hence rn−ttt/en ≥
rn/en+r/e ≥ rn/e2n. This proves the first part of lemma. The second part is immediate.
3
We now explain an almost uniform random sampling procedure from Bn(e, r, l∞).
First, we randomly generate a function τ ∈ [n][n] by successively assigning values to
τ(i) for i ∈ [n] as follows. For each i ∈ [n] we have the list Li = {j|1 ≤ j ≤
n, i − r ≤ j ≤ i + r} of candidate values for τ(i). Thus we have at most (2r + 1)n
functions from which we uniformly sample τ . Of course, τ defined this way need not
be a permutation, but if it is a permutation then clearly τ ∈ Bn(e, r, l∞). Our sampling
procedure outputs τ if it is a permutation and outputs “fail” otherwise. By Lemma 1 the
probability that τ is a permutation is Prob[τ ∈ Bn(e, r, l∞)] ≥ rne2n(2r+1)n > 124n >
2−5n. Thus, if we repeat above procedure sufficiently many times ( say 210n times )
then the sampling procedure will fail with negligible probability, and when it succeeds
it uniformly samples from Bn(e, r, l∞). In summary we have the following lemma.
Lemma 2. There exists a randomized procedure which runs in time 2O(n) and produces
an almost uniform random sample from Bn(e, r, l∞).
Now we describe the sieving procedure used in the algorithm. Hereafter we denote
Bn(ψ, r, l∞) by Bn(ψ, r) for simplicity.
Lemma 3. [Sieving Procedure] Let r > 0 and {τ1, τ2, τ3, . . . , τN} ⊆ Bn(e, r) be a
subset of permutations. Then in NO(1) time we can find S ⊂ [N ] of size atmost 2c1n
for a constant c1 such that for each i ∈ [N ] there is a j ∈ S with l∞(τi, τj) ≤ r/2.
Proof. We construct S using a greedy algorithm. Start with S = ∅ and run the following
step for all elements τi, 1 ≤ i ≤ N . At the ith step we consider τi. If l∞(τi, τj) > r/2
for all j ∈ S include i in set S and increment i. After completion, for all i ∈ [N ]
there is a j ∈ S such that l∞(τi, τj) ≤ r/2. To argue that |S| < 2c1n for constant
c1 we use the volume bound of Lemma 1. The construction of S implies for distinct
indices j, k ∈ S that l∞(τj , τk) > r/2. Hence the metric balls Bn(τj , r/4) for j ∈ S
are all pairwise disjoint. The right invariance of l∞ metric implies Vol(Bn(τj , r/4)) =
V ol(Bn(e, r/4)). As τj ∈ Bn(e, r), by triangle inequality we have Bn(τj , r/4) ⊆
Bn(e, r + r/4) for j ∈ S. Hence |S| < V ol(Bn(e,5r/4))V ol(Bn(e,r/4)) ≤ 2c1n by Lemma 1, which
also gives the constant c1. This completes the proof of the lemma.
Now we describe our algorithm to find a shortest permutation in G using Lemma 3.
Let t denote the norm of a shortest permutation inG. The following claim gives an easy
2O(n) time algorithm when t ≥ n/10.
Lemma 4. If the norm t of a shortest permutation in G is greater than n/10 then in
time 2O(n) we can find a shortest permutation in G.
Proof. Consider Bn(τ, t/2) for τ ∈ G. By triangle inequality, all Bn(τ, t/2) are dis-
joint. Also, by Lemma 1 we have Vol(Bn(τ, t/2)) ≥ (t/2)n · e−2n ≥ nnβ−n for some
constant β > 1. Since |G| ≤ |Sn|/Vol(Bn(τ, t/2)), it follows that |G| ≤ βn. As we
can do a brute-force enumeration ofG in time polynomial in |G|, we can find a shortest
permutation in 2O(n) time.
Now we consider the case when t < n/10. We run the algorithm below for 1 ≤ t <
n/10 (the possible values of t) and output a shortest permutation in G produced by the
algorithm.
4
1. Let N = 2cn. For 1 ≤ i ≤ N , pick ρi independently and uniformly at random
from G, and pick τi almost uniformly at random from Bn(e, 2t).
2. Let ψi = τiρi, 1 ≤ i ≤ N . Let Z = {(ψ1, τ1), (ψ2, τ2), . . . , (ψN , τN )}, and let
R = maxi‖ψi‖.
3. Set T = [N ].
4. While R > 6 ∗ t do the following steps:
(a) Apply the “sieving procedure” of Lemma 3 to {ψi | i ∈ T}. Let set S ⊆ T be
the output of sieving procedure.
(b) for all i ∈ S remove tuple (ψi, τi) from Z.
(c) for all i /∈ S replace tuple (ψi, τi) ∈ Z by (ψiψ−1j τj , τi), where j ∈ S and
d(ψj , ψi) ≤ R/2.
(d) set R = R/2 + 2t.
(e) T := T \ S.
5. For all (ϕi, τi), (ϕj , τj) ∈ Z, let ϕi,j = (τ−1j ϕj)(τ−1i ϕi)−1 (which is in G). Out-
put a ϕi,j with smallest nonzero norm.
In Step 1 of the algorithm, an almost uniform random sampling procedure from l∞
metric ball is given by Lemma 2. For G ≤ Sn, uniform sampling from G can be done
in polynomial time by using a strong generating set for G (see e.g. [Lu93]). A random
element is obtained by picking a coset representative at each level from the pointwise
stabilizer tower of subgroups and multiplying them out. Thus Step 1 of the algorithm
takes 2O(n) time. Clearly, the while loop takes 2O(n) time.
In order to prove the correctness, we examine the invariant maintained during each
iteration of the while loop.
Proposition 1. Before each iteration of the while loop, the following invariant is main-
tained. For all i ∈ T we have (ϕi, τi) ∈ Z, τ−1i ϕi ∈ G and ‖ϕi‖ ≤ R.
Proof. Clearly, the invariant holds before the first iteration. Inductively, suppose that
at the beginning of an arbitrary iteration the set Z is of the form Z = {(ϕi, τi) |
i ∈ T} such that τ−1i ϕi ∈ G and ‖ϕi‖ ≤ R. During this iteration, in Z we replace
(ϕi, τi) by (ϕiϕ−1j τj , τi), where j ∈ S and l∞(ϕi, ϕj) ≤ R/2. By right invariance
of the l∞ metric, we have l∞(ϕi, ϕj) = ‖ϕiϕ−1j ‖ ≤ R/2. Triangle inequality implies
‖ϕiϕ−1j τj‖ ≤ ‖τ−1j ‖ + ‖ϕiϕ−1j ‖ = ‖τj‖ + ‖ϕiϕ−1j ‖ ≤ 2t + R/2 which equals the
value ofR set in Step 4(d). Hence, ‖ϕi‖ ≤ R at the beginning of next iteration. Clearly,
τ−1i ϕiϕ
−1
j τj is in G since τ
−1
i ϕi and τ
−1
j ϕj are in G.
By Proposition 1 when the algorithm stops (after Step 5) we have τ−1i ϕi ∈ G and
‖τ−1i ϕi‖ ≤ 8t for all (ϕi, τi) ∈ Z. We want to argue that one of th ϕi,j is equal to a
shortest permutation inGwith high probability. In Step 1 we pick τi almost uniformly at
random fromBn(e, 2t). As in the Regev’s analysis of AKS algorithm in [Re], we define
a new random procedure which also uniformly samples from Bn(e, 2t) and has some
properties which enable us to conveniently argue the correctness of the algorithm. In the
lattice setting, the euclidean metric makes it easier to define a modified sampling from
Bn(e, 2t). However, for the l∞ metric over Sn, the modified sampling from Bn(e, 2t)
is more involved.
5
Let τ ∈ G be an element with shortest nonzero norm t. We introduce some notation.
LetCτ = Bn(e, 2t)∩Bn(τ, 2t),Cτ−1 = Bn(e, 2t)∩Bn(τ−1, 2t) andC = Cτ ∩Cτ−1 .
The following claim is obvious.
Lemma 5. Consider a map φ1 : Cτ −→ Cτ−1 defined as φ1(σ) = στ−1. Then φ1 is a
bijection from Cτ onto Cτ−1 .
Let φ′1 : Cτ−1 −→ Cτ denote the inverse of φ1.
We now define a randomized procedure Sample which on input a random permuta-
tion σ ∈ Bn(e, 2t) returns a new random permutation Sample(σ) ∈ Bn(e, 2t).
(i) If σ /∈ Cτ ∪ Cτ−1 then Sample(σ) = σ with probability 1.
(ii) If σ ∈ Cτ \ C then
(a) if φ1(σ) ∈ C then randomly set Sample(σ) to either σ with probability 3/4 or
to φ1(σ) with probability 1/4.
(b) if φ1(σ) /∈ C then randomly set Sample(σ) to σ or φ1(σ) with probability 1/2
each.
(iii) If σ ∈ Cτ−1 \C then define Sample(σ) analogously as in Step (ii) above, using φ′1
instead of φ1.
(iv) If σ ∈ C, then randomly set Sample(σ) to either σ with probability 1/2, or to
φ1(σ) with probability 1/4, or to φ′1(σ) with probability 1/4.
The following lemma essentially states that the random variables Sample(σ) and σ
are identically distributed.
Lemma 6. If σ is uniformly distributed in Bn(e, 2t) then Sample(σ) is also uniformly
distributed in Bn(e, 2t).
Proof. Let V = Vol(Bn(e, 2t)). We claim Sample(σ) is uniformly distributed over
Bn(e, 2t). For each pi ∈ Bn(e, 2t) we have
Prob[Sample(σ) = pi] =
∑
δ∈Bn(e,2t)
Prob[σ = δ] · Prob[Sample(δ) = pi].
We need to show that
∑
δ∈Bn(e,2t) Prob[σ = δ] · Prob[Sample(δ) = pi] = 1/V . As
σ is uniformly distributed, it is equivalent to showing
∑
δ∈Bn(e,2t) Prob[Sample(δ) =
pi] = 1. If pi /∈ Cτ ∪ Cτ−1 it is true directly from the definition of Sample. Con-
sider pi ∈ C, since maps φ1 and φ′1 are bijective, there are unique σ1 6= σ2 such
that φ1(σ1) = φ′1(σ2) = pi. By definition of Sample we have Prob[Sample(σ1) =
pi] = Prob[Sample(σ2) = pi] = 14 and Prob[Sample(pi) = pi] =
1
2 . Summing up
we get Σδ∈Bn(e,2t)Prob[Sample(δ) = pi] = 1 as desired. Now suppose pi ∈ Cτ \ C.
If φ1(pi) = ψ ∈ C then clearly φ′1(ψ) = pi. The definition of Sample implies that∑
δ∈Bn(e,2t) Prob[Sample(δ) = pi] = Prob[Sample(ψ) = pi]+Prob[Sample(pi) = pi] =
1
4 +
3
4 = 1. If φ1(pi) = ψ /∈ C, we have
∑
δ∈Bn(e,2t) Prob[φ(δ) = pi] =
1
2 +
1
2 = 1.
The case when pi ∈ Cτ−1 \ C is similar. This proves the lemma.
It follows from the definition of Sample that replacing τi by Sample(τi) does not af-
fect the distribution of ψi in Step 2. In fact, Sample(τi) and τi are identically distributed
6
by Lemma 6. In Step 1 we pick each τi almost uniformly at random from Bn(e, 2t).
Now, in our analysis we replace this by Sample(τi). The crucial point of the argument
is that it suffices to replace τi by Sample(τi) after Step 2, as the τi is only used to de-
fine ψi and it will not affect the distribution of ψi if we replace τi by Sample(τi). Note
that τi is used during sieving step in the while loop only if i lies in the sieved set S.
The remaining τi are replaced by Sample(τi) in Step 5. Clearly, this modification does
not change the probability of computing a shortest permutation as the distributions in
the two cases are the same. Note that Sample(τi) is introduced for analysis. We cannot
implement the procedure Sample efficiently as we do not know τ .
In Step 1 of the algorithm we pick each τi almost uniformly at random from
Bn(e, 2t). The initial set is {τi | i ∈ [N ]}. The while loop iterates for at most 2 log n
steps and in each step we remove a set S of size at most 2c1n, where c1 is given by
Lemma 1. Thus, at the end of the while loop we still haveN − 2 log n · 2c1n many τi in
the remaining set T . Thus, as argued earlier for the purpose of analysis we can replace
τi by Sample(τi) for all i ∈ T and it still doesn’t affect the working of the algorithm.
The triangle inequality implies Bn(e, t) ⊆ Cτ . Thus Vol(Cτ ) ≥ V ol(Bn(e, t)) ≥
tn · e−2n by Lemma 1. Also, Vol(Bn(e, 2t)) ≤ (5t)n. Hence, V ol(Cτ∪Cτ−1 )V ol(Bn(e,2t)) ≥ 2−c2n,
for some constant c2 (which depends on c1). Thus a random pi ∈ Bn(e, 2t) lies in
Cτ ∪ Cτ−1 with probability at least 2−c2n.
Given a constant c3 > 0, we can choose a suitably large N = 2cn for a constant c
so that at least 2c3n many τi for i ∈ T at the end of the while loop will lie in Cτ ∪Cτ−1 .
Thus, with probability 1−2−O(n) we can guarantee that at least 2c3n many τi for i ∈ T
are such that τi ∈ Cτ ∪ Cτ−1 and (ϕi, τi) ∈ Z at the beginning of Step 5.
Furthermore, at the beginning of Step 5 each (ϕi, τi) ∈ Z satisfies ‖τ−1i ϕi‖ ≤ 8t
and τ−1i ϕi ∈ G. Now we argue using the pigeon-hole principle that there is some
pi ∈ G such that pi = τ−1i ϕi, (ϕi, τi) ∈ Z for at least 2n indices i ∈ T .
Claim. |G ∩Bn(e, 8t)| < 2c4n for some constant c4.
Proof. Note that l∞(pi1, pi2) ≥ t for distinct pi1, pi2 ∈ G. Thus, metric balls of radius t/2
around each element inG∩Bn(e, 8t) are all pairwise disjoint. By triangle inequality, all
these t/2 radius metric balls are contained inBn(e, 8t+ t/2). Hence |G∩Bn(e, 8t)| <
V ol(Bn(e, 17t/2))/V ol(Bn(e, t/2)) < 2c4n, by Lemma 1. This proves the claim.
Let c3 = c4 + 1. Then with probability 1 − 2−O(n) we have pi ∈ G such that
pi = τ−1i ϕi, (ϕi, τi) ∈ Z for at least 2c3n/2c4n = 2n indices i ∈ T . Call this set of
indices T0.
Recall that in our analysis we can replace τi by Sample(τi) for each i ∈ T0. By
the definition of Sample(τi), Prob[Sample(τi) = τi ∀ i ∈ T0] ≤ (3/4)2n . Similarly,
Prob[Sample(τi) 6= τi ∀ i ∈ T0] ≤ (1/2)2n . Hence with probability 1 − 2−O(n)
there are indices i, j ∈ T0 such that (ϕi, τi), (ϕj , τj) ∈ Z and Sample(τi) = τi
Sample(τj) 6= τj . Clearly, Sample(τj) = τjτ or Sample(τj) = τjτ−1. Without loss of
generality, assume Sample(τj) = τjτ . Then, after Step 5 we have with high probability
ϕi,j = ((τjτ)−1ϕj)(τ−1i ϕi)
−1 = τ−1pipi−1 = τ−1. In other words, with probability
1− 2−O(n) one of the 2O(n) output permutations is a “shortest” permutation in G. We
have shown the following theorem.
7
Theorem 1. Given a permutation group G ≤ Sn as input, we can find a permutation
in G \ {e} with smallest possible norm with respect to l∞ metric in 2O(n) randomized
time.
3 Weight Problems for Hamming metric
We first give an easy 2O(n) time deterministic algorithm for MinimumWeight Problem
in the case of Hamming metric. It turns out we can use a well-known algorithm from
permutation groups. Suppose G ≤ Sn is given by a generator set. The problem is to
find a shortest permutation in G for the Hamming metric. For every S ⊆ [n] consider
the pointwise stabilizer subgroup GS ≤ G defined as GS = {g ∈ G| ∀ i ∈ S : g(i) =
i}. Using the Schrier-Sims algorithm in polynomial time [Lu93] we can compute a
generating set for GS . Thus, in 2O(n) time we can compute GS for all S ⊆ [n] and find
the largest t < n for which there is S ⊆ [n] such that |S| = t and GS is a nontrivial
subgroup. Clearly, any τ 6= e ∈ GS is a shortest permutation with respect to Hamming
metric.
Finally, we also consider the problem of finding an element inG ≤ Sn of maximum
norm w.r.t. Hamming metric. We first consider the problem of deciding if G ≤ Sn has
a fixpoint free permutation. In general it is known that this problem is NP-complete
[CW06]. Using Inclusion-Exclusion Principle we give a 2O(n) time deterministic al-
gorithm for the search version of the problem as follows. As before, let GS be the
subgroup of G that pointwise fixes S ⊆ [n]. Let F ⊆ G denote the set of fixpoint free
elements. Clearly, F ∩ GS = ∅ for each nonempty S. Also, F ∪
⋃
S 6=∅GS = G. In
2O(n) time we can compute generating sets for all GS .
For the algorithm, inductively assume that we have already computed a cosetHk−1
of G[k−1] in G, where for all τ ∈ Hk−1 we have τ(i) = αi, αi ∈ [n] for 1 ≤ i ≤ k− 1
and Hk−1 contains a fixpoint free permutation in G.
We now show how to compute a point αk ∈ [n] which will fix the coset Hk of
G[k] in 2O(n) time such that for all τ ∈ Hk, τ(i) = αi for i = 1 to k and Hk con-
tains a fixpoint free element in G. By repeating this successively we can find a fixpoint
free permutation. First, from the orbit of k we pick a candidate point αk distinct from
α1, · · · , αk−1 and k. Let Hk = {τ ∈ G|τ(i) = αi, 1 ≤ i ≤ k}.
Let Ai = Hk ∩ G{i} for i = k + 1 to n. It is clear that intersection of any sub-
collection of these Ai ’s is of the form Hk ∩ GS for S ⊆ [n]. We can compute GS in
polynomial time for any S ⊆ [n] using the Schreier-Sims algorithm [Lu93]. Further-
more, the coset intersection problem Hk ∩ GS can also be solved in 2O(n) time using
the machinery of Babai and Luks [BL83,Lu93]. Thus, in time 2O(n) we can compute
|⋂i∈S Ai| for all subsets S ⊆ [n − k]. In 2O(n) further steps, by using the Inclusion-
Exclusion formula, we can compute |Ak+1 ∪ Ak+2 ∪ . . . ∪ An| = m. Clearly, Hk
contains a fixpoint free element ofG iffm < |Hk|. Ifm = |Hk|, we try the next candi-
date value for αk from the orbit of k. This procedure clearly succeeds assuming Hk−1
has a fixpoint free element of G. This gives 2O(n) time algorithm to find a fixpoint
free permutation. With minor changes to this algorithm, we can compute an element
of maximum norm in G with respect to Hamming norm in 2O(n) time. We summarize
these observations in the following theorem.
8
Theorem 2. Given a permutation group G ≤ Sn by a generating set, in 2O(n) time we
can find τ ∈ G\{e} with smallest possible norm and ψ ∈ G with largest possible norm
with respect to Hamming metric.
4 MWP is reducible to SDP for solvable permutation groups
For integer lattices, SVP (shortest vector problem) is polynomial-time reducible to CVP
(closest vector problem) [GMSS99]. A similar result for linear codes is also proved
there. We show an analogous result for solvable permutation groups. In fact we give a
polynomial-time Turing reduction from MWP to SDP, which works for the gap version
of the problem for any right invariant metric d. We do not know if this reduction can be
extended to nonsolvable permutation groups. Finally we make an observation about the
hardness of approximation of SDP and MWP.
LetG ≤ Sn be input instance for MWP. The idea is to make different queries of the
form (H, τ) to SDP, for suitable subgroups H ≤ G and τ /∈ H .
Let d be a right invariant metric on Sn. We want to find a shortest permutation
τ ∈ Gw.r.t. metric d. It is well-known in algorithmic permutation group theory (e.g. see
[Lu93]) that for solvable permutation groups G ≤ Sn we can compute in deterministic
polynomial time a composition seriesG = GkGk−1 . . .G1G0 = {e}, k ≤ n.
In other words, Gi−1 is a normal subgroup of Gi for each i. Furthermore, since G is
solvable, each quotient groupGi/Gi−1 has prime order, say pi (where the pi’s need not
be distinct). Notice that for any τi ∈ Gi \ Gi−1, the coset Gi−1τi generates the cyclic
quotient group Gi/Gi−1. It is easily seen that these elements τi form a generating set
for G with the following standard property. We omit proof due to lack of space.
Proposition 2. For each i, 1 ≤ i ≤ k, every τ ∈ Gi \Gi−1 can be uniquely expressed
as τ = τα11 τ
α2
2 . . . τ
αi
i , 0 ≤ αj < pj , 1 ≤ j ≤ i and αi 6= 0.
Theorem 3. For any right invariant metric d on Sn, and for solvable groups,
GapMWPγ is polynomial time Turing reducible to GapSDPγ .
Proof. Let (G,m) be an input instance of GapMWPγ . We compute τ1, . . . τk for
the group G as described above. Then we query the oracle of GapSDPγ for instances
(Gi−1, τ−ri ,m), for 1 ≤ i ≤ k, 1 ≤ r < pi. The reduction outputs “YES” if at least one
of the queries answers “YES” otherwise it outputs “NO”. Clearly, the reduction makes
at most O(n2) oracle queries and runs in polynomial time. We prove its correctness.
Suppose (G,m) is a “YES” instance of GapMWPγ . We show that at least one
of the queries (Gi−1, τ−ri ,m), 1 ≤ i ≤ k, 1 ≤ r < pi will return “YES”. Let
τ ∈ G = Gk such that ‖τ‖ ≤ m. Let i be the smallest such that τ /∈ Gi−1,
τ ∈ Gi. From Proposition 2 it follows that τ can be uniquely expressed as
∏i
j=1 τ
αj
j ,
where 0 ≤ αj < pj , 1 ≤ j ≤ i and αi 6= 0. As
∏i−1
j=1 τ
αj
j ∈ Gi−1,
we have d(τ−αii , Gi−1) ≤ d(τ−αii ,
∏i−1
j=1 τ
αj
j ). The right invariance of d implies
d(τ−αii , Gi−1) ≤ d(e,
∏i
j=1 τ
αj
j ) = ‖τ‖ ≤ m. Hence (Gi−1, τ−αii ,m) is a “YES”
instance of GapSDPγ .
9
Now suppose (Gi−1, τ−ri ,m), 1 ≤ i ≤ k,1 ≤ r ≤ pi − 1 is not a “NO” instance of
GapSDPγ . Then there is some τ ∈ Gi−1 such that d(τ, τ−ri ) ≤ γm, i.e. ‖ττ ri ‖ ≤ γm.
As τi ∈ Gi \Gi−1, τ ti /∈ Gi−1 for 1 ≤ t ≤ pi − 1. Thus τ ri /∈ Gi−1 implying ττ ri 6= e.
Hence (G,m) is not a “NO” instance of GapMWPγ . This completes the proof.
Cameron et al [BCW06,CW06] have shown that SDP and MWP are NP-hard for
several permutation metrics. It follows from [ABSS97] that SDP for linear codes is NP-
hard to approximate within a factor of (log n)c, where n is the block length of the input
code and c is an arbitrary constant. Furthermore, Dumer et al [DMS99] have shown that
constant-factor approximation is NP-hard for MWP restricted to binary linear codes.
Given a binary linear code C of block length n, we can easily construct an abelian 2-
group G ≤ S2n isomorphic to C. An easy consequence of this constuction and known
hardness results for binary linear codes directly yields the following hardness results
for GapSDPγ and GapMWPγ for different metrics.
Theorem 4. For Hamming, Cayley, and the lp metrics, GapSDPγ is NP-hard for γ =
O((log n)c) and GapMWPγ is NP-hard under randomized reduction for any constant
γ.
5 Limits of hardness
Since GapSDPγ is NP-hard for γ ≤ (log n)c, a natural question is to explore its com-
plexity for larger gaps. For the GapCVP problem on lattices, Goldreich and Goldwasser
[GG00] have shown a constant round IP protocol forO(
√
n/ log n) gap in the case of l2
norm. Consequently, for this gap GapCVP is not NP-hard unless polynomial hierarchy
collapses. We adapt similar ideas to the permutation group setting. For the Hamming
and Cayley metric we give a constant round IP protocol for the complement problem of
GapSDPγ for γ ≥ n/ log n, such that the protocol rejects “YES” instances of GapSDPγ
with probability at least n− logn, and always accepts the “NO” instances. For designing
the IP protocols we require uniform random sampling procedures from metric balls for
the Hamming and Cayley metrics.
We first consider the Cayley metric. Recall that the Cayley distance between τ and
e is the least number of transpositions required to take τ to e. Let k be the number of
cycles in τ . Each transposition multiplied to τ increases or decreases the number of
cycles by 1. Since τ is transformed to e with the fewest transpositions if we always
multiply by a transposition that increments the number of cycles, we have d(e, τ) =
n − k. Thus, a Cayley metric ball of radius r contains τ ∈ Sn such that τ has at
least n − r cycles. The number c(n, k) of permutation in Sn with exactly k cycles
is a Stirling number of the first kind and it satisfies the recurrence relation c(n, k) =
(n− 1)c(n− 1, k) + c(n− 1, k− 1). We can compute c(m, l), 0 ≤ m ≤ n, 0 ≤ l ≤ k
using the recurrence for c(n, k).
Proposition 3. Let S ⊆ Sn be the set of permutations with k cycles. Let N = |S| =
c(n, k). Then there exists a polynomial (in n) time computable bijective function fn,k :
[N ] 7→ S.
10
Proof. If n = k = 1, clearly such function exists, f1,1(1) is simply defined as identity
element of S1. We use induction on n+k. Assume that such functions exist for n+k ≤
t. Now consider n, k such that n + k = t + 1. We define the function fn,k(i), for
1 ≤ i ≤ N :
1. If i > (n − 1)c(n − 1, k), let pi = fn−1,k−1(i − (n − 1)c(n − 1, k)) and τ be
obtained by appending a 1-cycle (n) to pi. Define fn,k(i) = τ .
2. If i ≤ (n−1)c(n−1, k) then find j such that (j−1)c(n−1, k) < i ≤ jc(n−1, k).
Let pi = fn−1,k(i− (j − 1)c(n− 1, k)), write pi as product of disjoint cycles. Let
τ ∈ Sn be obtained by inserting n in the jth position of the cyclic decomposition
of pi. Define fn,k(i) = τ .
Clearly, fn,k is polynomial time computable. We show fn,k is bijective by induc-
tion. Suppose fn−1,k−1 and fn−1,k are bijective. Each τ ∈ Sn with k cycles can be
uniquely obtained either by inserting element n in cyclic decomposition of a pi ∈ Sn−1
with k cycles (which can be done in n− 1 ways) or by attaching a 1-cycle with element
n to some pi ∈ Sn−1 with k − 1 cycles. It follows that fn,k is bijective.
To uniformly sample τ ∈ Sn with k cycles, we pick m ∈ {1, 2, . . . , c(n, k)} uni-
formly at random and let τ = fn,k(m).
Lemma 7. There is a randomized procedure which runs in time poly(n) and samples
from Bn(e, r, d) almost uniformly, where d denotes Cayley metric.
Now consider the Hamming Metric. The Hamming ball of radius r contains all
τ ∈ Sn such that τ(i) 6= i for at most r many points i. Hence, Vol(Bn(e, r, d)) =
Σri=0
(
n
i
)
Di, where Di denotes the number of derangements on i points. We can easily
enumerate all i-element subsets of [n]. The number Di of derangements on i points
satisfies the recurrence Di = (i − 1)(Di−1 + Di−2). With similar ideas as used for
sampling for Cayley metric balls we can do almost uniform random sampling from
Hamming metric balls in polynomial time.
Lemma 8. For r > 0, there exists a randomized procedure which runs in time poly(n)
and samples almost uniformly at random from the Hamming balls of radius r around e
(Bn(e, r, d)).
We now describe the simple 2-round IP protocol for the Hamming metric. Let
(G, τ, r) be input instance of GapSDPγ for γ ≥ n/ log n, and d is the Hamming metric.
1. Verifier: picks σ ∈ {0, 1}, ψ ∈ G, β ∈ Bn(e, γr/2, d) almost uniformly at ran-
dom. The verifier sends to the prover the permutation pi = βψ if σ = 0, and
pi = βτψ if σ = 1.
2. Prover: The prover sends b = 0 if d(pi,G) < d(pi, τG) and b = 1 otherwise.
3. Verifier: Accepts iff b = σ.
For the protocol we need polynomial time random sampling from a permutation group
which is quite standard [Lu93]. We also need uniform sampling from Hamming metric
balls which is given by Lemma 8.
We omit the proof of correctness of the next lemma due to lack of space.
11
Lemma 9. The verifier always accepts if (G, τ, r) is “NO” instance of GapSDPγ .
Furthermore, the verifier rejects with probability at least n− logn if (G, τ, r) is a “YES”
instance of GapSDPγ .
This shows correctness of the protocol for Hamming metric. For the Cayley metric
too a similar IP protocol can be designed. As an immediate consequence we have the
following.
Corollary 1. For the Hamming and Cayley metrics, GapSDPγ for γ ≥ n/ log n is
not NP-hard unless coNP has constant round interactive protocols with constant error
probability with the verifier allowed nO(logn) running time.
Recall that GapMWPγ is Turing reducible to GapSDPγ for solvable groups by The-
orem 3 and the Turing reduction makes queries with the same gap. Hence, by the above
corollary it follows that GapMWPγ w.r.t. solvable groups for γ > n/ log n is also un-
likely to be NP-hard for Hamming and Cayley metrics.
References
[ABSS97] S. ARORA, L. BABAI, J. STERN, E.Z. SWEEDYK, The hardness of approximate
optima in lattices, codes, and system of linear equations. Journal of Computer and System
Sciences, 54(2):317-331. Preliminary version in FOCS’93.
[AKS01] M. AJTAI, R. KUMAR, D. SIVAKUMAR, A sieve algorithm for the shortest lattice
vector. In Proceedings of the 30th Annual ACM Symposium on Theory of Computing, 266-
275, 2001.
[BL83] L. BABAI, E.M. LUKS, Canonical labeling of graphs. Proceedings of the Fifteenth An-
nual ACM Symposium on Theory of Computing, pages 171–183, 1983.
[BCW06] C. BUCHHEIM, P.J. CAMERON, T. WU, On the Subgroup Distance Problem ECCC,
TR06-146, 2006.
[CW06] P.J. CAMERON, T. WU, The complexity of theWeight Problem for permutation groups.
Electronic Notes in Discrete Mathematics, 2006.
[DH98] M. DEZA, T. HUANG, Metrics on Permutations, a Survey.J. Combin. Inform. System
Sci. 23,173-185,1998.
[DMS99] I. DUMER, D. MICCIANCIO, M. SUDAN, Hardness of approximating minimum dis-
tance of a linear code. 40th Annual Symposium on Foundations of Computer Science, 475-484,
1999.
[GG00] O. GOLDREICH, S. GOLDWASSER, On the limits of nonapproximability of lattice prob-
lems. Journal of Computer and System Sciences, 60(3):540-563, 2000.
[GMSS99] O. GOLDREICH, D. MICCIANCIO, S. SAFRA, J. P. SEIFERT, Approximating short-
est lattice vector is not harder than approximating closest lattice vectors. Information Process-
ing Letters, 71(2):55-61, 1999.
[Lu93] E.M. LUKS, Permutation groups and polynomial time computations. DIMACS Series in
Discrete Mathematics and Theoretical Computer Science, 11:139–175, 1993.
[MG02] D. MICCIANCIO, S. GOLDWASSER, Complexity of Lattice Problems. A Cryptographic
Perspective, Kluwer Academic Publishers, 2002.
[Re] O. REGEV, Lecture Notes - Lattices in Computer Science,
http://www.cs.tau.ac.il/ odedr/teaching/lattices fall 2004/index.html.
12
