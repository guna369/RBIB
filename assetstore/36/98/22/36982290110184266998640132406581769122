Characterising Strong Normalisation
for Explicit Substitutions
(LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002)
Steffen van Bakel1 and Mariangiola Dezani-Ciancaglini 2
1 Department of Computing, Imperial College,
180 Queen’s Gate, London SW7 2BZ, UK,
2 Dipartimento di Informatica, Universita` di Torino,
Corso Svizzera 185, 10149 Torino, Italy,
dezani@di.unito.it
Abstract
We characterise the strongly normalising terms of a composition-free calculus of explicit
substitutions (with or without garbage collection) by means of an intersection type assign-
ment system. The main novelty is a new cut-rule which allows to forget the context of the
minor premise when the context of the main premise does not have an assumption for the
cut variable.
Introduction
Intersection types disciplines originated in [7] to overcome the limitations of Curry’s type as-
signment system and to provide a characterisation of strongly normalising terms of the λ-
calculus [21]. Since then, intersection types disciplines were used in a series of papers for
characterising evaluation properties of λ-terms [17, 16, 3, 13, 2, 12, 9].
We are interested here in considering calculi of explicit substitutions, Λx, originated in [1] for
improving λ-calculus implementations. In the literature there are many different proposals
for explicit substitution calculi [6, 5, 15, 22], that are powerful tools for enlightening the
relations between abstraction and application, as they decompose the evaluation rule of
the λ-calculus into elementary steps. For this reason, it is really crucial to characterise the
computational behaviour of substitution calculi.
In a seminal paper [11], Dougherty and Lescanne show that intersection type systems can
characterise normalising and head-normalising terms of a composition-free calculus of ex-
plicit substitutions (with or without garbage collection). Allowing composition between sub-
stitutions leads to the (unexpected) failure of termination of simply typed terms, as proved
by Mellie`s in [18]. Therefore, the choice of [11] and of the present paper is to consider calculi
that are composition-free.
Characterisation of strongly normalising Λx-terms using intersection types has up to now
been an open problem. In part, this problem has been addressed in [11], where the type
assignment systemD has the property that all typeable terms in Λx are strongly normalising,
but the converse of this property fails. The aim of the present paper is to recover from this
failure with a very simple move: we add a new cut-rule to the systemD. This rule essentially
takes into account that by putting a term of the shape M〈x = N〉, where x does not occur
free in M, in an arbitrary context the free variables of N will never be replaced. Therefore,
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 2
we can discharge the assumptions used to type N when we derive a type for M〈x= N〉. Our
main result is then:
a term in Λx is typeable if and only if it is strongly normalising.
In order to prove one side of this result we devise an inductive characterisation of the set
of strongly normalising terms in Λx inspired by that for pure λ-terms of [23]. This allows
us to show that all strongly normalising terms have a type. Notice that only typeability (not
types!) is preserved by subject expansions which do not loose strong normalisation.
In order to prove the other side we use the set-theoretic semantics of intersection types
and saturated sets, which is referred to as the reducibility method. This is a generally accepted
method for proving the strong normalisation property of various type systems such as the
simply typed lambda calculus in Tait [24], the polymorphic lambda calculus in Tait [25] and
Girard [14]. All the above mentioned papers characterising evaluation properties of λ-terms
and of terms in Λx by means of intersection types apply variants of this method.
1 The Calculus
Following [11], we consider the set of terms Λx which uses names rather than De Bruijn
indices.
Definition 1.1 (Set of Terms Λx) The set of terms Λx is defined by the grammar:
M,N ::= x | (λx.M) | (MN) | (M 〈x :=N〉 )
As usual we consider terms modulo renaming of bound variables.
In writing terms, we will use the standard conventions for removing brackets, and use the
following abbreviations:
M = M1, . . . ,Mn (n ≥ 0)
MM = MM1 · · ·Mn (n ≥ 0)
M 〈x :=N〉 = M 〈x1 :=N1〉 · · · 〈xn :=Nn〉 (n ≥ 0)
|M| = n, where n is the number of terms appearing in M.
Apart from defining the notion of free variables of a term, we need to single out the free
variables which occur in a term without considering some explicit substitution pairs.
Definition 1.2 The set pfv(M) of proper free variables of M is inductively defined by:
pfv(x) = {x}
pfv(λx.M) = pfv(M)\ x
pfv(MN) = pfv(M) ∪ pfv(N)
pfv(M 〈x :=N〉 ) =
{
pfv(M)\x ∪ pfv(N) if x ∈ pfv(M)
pfv(M) otherwise.
For example, pfv(z 〈y := xx〉 〈z := t〉 ) = {t}, while fv(z 〈y := xx〉 〈z := t〉 ) = {x, t}.
Notice that the set fv(M) of free variables of M can be defined in the same way, but for the
last clause which then states
fv(M 〈x :=N〉 ) = fv(M)\x ∪ fv(N).
Clearly we get pfv(M)⊆ fv(M) for all tems M.
We use the reduction relation λxgc on Λx as defined in [6].
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 3
Definition 1.3 (Reduction Relation) The reduction rules of λxgc are:
(B) : (λx.M)N → M 〈x :=N〉
(App) : (MP) 〈x :=N〉 → (M 〈x :=N〉 )(P 〈x :=N〉 )
(Abs) : (λy.M) 〈x :=N〉 → λy.(M 〈x :=N〉 )
(VarI) : x 〈x :=N〉 → N
(gc) : M 〈x :=N〉 → M, if x ∈ fv(M)
As usual, the reduction relation we consider in this paper is the contextual, transitive closure
of the relation generated by these rules, and we will write M → N if M reduces to N using
this relation.
Inside Λx we are interested in the set of strongly normalisable terms.
Definition 1.4 (SN ) We define SN = {M ∈Λx | M is strongly normalisable}.
As proved in [11], the set SN coincides with the set of strongly normalisable terms using
the reduction relation obtained by removing the rule (gc) and by adding the following rule:
(VarK) : y 〈x :=N〉 → y
To simplify the following proofs, it is useful to consider a stronger version of the reduction
rule (gc), which uses proper free variables instead of free variables, and the corresponding
set of strongly normalisable terms.
Definition 1.5 ((gcp), →p and SNsetp) The reduction relation →p is obtained by remov-
ing rule (gc) and adding the following rule:
(gcp) M 〈x :=N〉 →M if x ∈ pfv(N)
The set SNsetp is the set of strongly normalising terms with respect to →p .
Notice that
M → N ⇒ M →p N
SNsetp ⊆ SN
but M →p N ⇒ M → N does not hold. Instead we will prove that SNsetp = SN by means
of inductive characterisations of the sets SN and SNsetp. The correctness of SN character-
isation follows from Lemma 5 of [11]. It is easy to verify that the proof of Lemma 5 of [11]
easily adapts to the set SNsetp and so we get the correctness of SNsetp characterisation.
Lemma 1.6 i) The set SN can be defined inductively through rules (1), (2),(3), (4), (5), (6), where
A is SN , and (7) of Figure 1.
ii) The set SNsetp can be defined inductively through rules (1), (2),(3), (4), (5), (6), where A is
SNsetp, and (8) of Figure 1.
iii) SN = SNsetp.
Proof: (i) and (ii) : The first seven rules with A = SN generate only terms in SN : for the
first two rules it is trivial and for the remaining ones it is proved in Lemma 5 of [11].
Since we can show Lemma 5 of [11] for SNsetp (after repalcing rule (8) to rule (7)) we
can similarly get that the first six rules with A = SNsetp and rule (8) generate only
terms in SNsetp.
To see that these rules generate all the strongly normalising terms, first notice that the
terms in the conclusions of the given rules cover all possible shapes of terms in Λx, as
observed also in [11] (Lemma 1). Moreover if the term in the conclusion is strongly
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 4
M ∈ A
λx.M ∈ A
(1)
M ∈ A
xM ∈ A
(2)
M 〈x :=N〉 P ∈ A
(λx.M)NP ∈ A
(3)
(U 〈x :=N〉 )(V 〈x :=N〉 ) 〈z :=Q〉 P ∈ A
(UV) 〈x :=N〉 〈z :=Q〉 P ∈ A
(4)
(λy.M 〈x :=N〉 ) 〈z :=Q〉 P ∈ A
(y ∈ fv(M))
(λy.M) 〈x :=N〉 〈z :=Q〉 P ∈ A
(5)
N 〈z :=Q〉 P ∈ A
x 〈x :=N〉 〈z :=Q〉 P ∈ A
(6)
M 〈z :=Q〉 P,N ∈ SN
(x ∈ fv(M))
M 〈x :=N〉 〈z :=Q〉 P ∈ SN
(7)
M 〈z :=Q〉 P,N ∈ SNsetp
(x ∈ pfv(M))
M 〈x :=N〉 〈z :=Q〉 P ∈ SNsetp
(8)
Figure 1: Rules generating SN and SNsetp
normalising, then also the terms in the premise must be strongly normalising: this can
be proved by a double induction on the length of the longest derivation to normal form
(using respectively → and →p ) and on the structure of terms.
(iii) : Immediate from (i) and (ii) taking into account that x ∈ fv(M) implies x ∈ pfv(M) and
that SNsetp ⊆ SN .
Always from Lemma 5 of [11] we get that distribution of substitution preserves strong
normalisation:
Lemma 1.7 If (P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )M ∈ SN then ((P 〈y :=Q〉 ) 〈x :=N〉 )M∈ SN .
2 The Type Assignment
We will consider intersection types as first defined in [7] with a preorder which takes into
account the idempotence, commutativity and associativity of the intersection type construc-
tor.
Definition 2.1 (Types) i) The set of types considered in this paper is the set T of intersec-
tion types, defined by the following grammar:
σ,τ ::= ϕ | (σ→τ) | (σ∩τ)
where ϕ ranges over a denumerable set of type atoms.
ii) On T the type inclusion relation ≤ is inductively defined by: σ ≤ σ, σ∩τ ≤ σ, σ∩τ ≤ τ,
σ ≤ τ & σ ≤ ρ ⇒ σ ≤ τ∩ρ, and σ ≤ τ ≤ ρ ⇒ σ ≤ ρ.
iii) σ ∼ τ ⇐⇒ σ ≤ τ ≤ σ.
In the notation of types, as usual, right-most outer-most brackets will be omitted, and, since
the type constructor ∩ is associative and commutative, we will write σ∩τ∩ρ rather than
(σ∩τ)∩ρ, and we will denote σ1∩· · ·∩σn by ∩nσi, where n = {1, . . . ,n}1.
Before presenting the type assignment system we need a last definition.
1 We allow n = 1 as an abus de langage.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 5
Definition 2.2 (Statements and Contexts) i) A statement is an expression of the form
M :σ, where M is the subject and σ is the predicate of M :σ.
ii) A context Γ is a partial mapping from variables to types, and it can be seen as a set of
statements with (distinct) variables as subjects.
iii) The relations ≤ and ∼ are extended to contexts by:
Γ ≤ Γ′ ⇐⇒ ∀ x:σ′ ∈ Γ′ ∃ x:σ ∈ Γ [σ ≤ σ′]
Γ ∼ Γ′ ⇐⇒ Γ ≤ Γ′ ≤ Γ.
We introduce the following notational conventions:
Γ ∩∆ = {x:σ ∩ τ | x:σ ∈ Γ & x:τ ∈ ∆} ∪ {x:σ | x:σ ∈ Γ & x ∈ ∆} ∪ {x:τ | x ∈ Γ & x:τ ∈ ∆}
∩nΓi = Γ1∩· · ·∩Γn
Γ,x:σ = Γ\x ∪ {x:σ}.
For example {x:σ} ∩ {x:τ} denotes {x:σ ∩ τ}, while {x:σ},x:τ denotes {x:τ}.
As discussed in the introduction, the key of our type assignment is a cut-rule (cutK) which
allows to forget the context of the minor premise. We will call the standard cut-rule (cutI).
Definition 2.3 (Type Assignment Rules) Type assignment for terms in Λx and derivations are
defined by the following natural deduction system:
(Ax) : (x:σ ∈ Γ)
Γ  x :σ
(→I) : Γ,x:σ  M :τ
Γ  λx.M :σ→τ
(→E) : Γ  M :σ→τ Γ  N :σ
Γ  MN :τ
(∩I) : Γ  M :σ Γ  M :τ
Γ  M :σ∩τ
(∩E) : Γ  M :σ1∩σ2 (i ∈ 2)
Γ  M :σi
(cutI) :
Γ,x:σ  M :τ Γ  N :σ
Γ  M 〈x :=N〉 :τ (cutK) :
Γ  M :τ ∆  N :σ
(x ∈ Γ)
Γ  M 〈x :=N〉 :τ
We write Γ  M :σ if there exists a derivation that has this as its conclusion.
The following example explains in detail the difference between the system of [11] and
that of this paper, and shows that the counter example to the characterisation of strongly
normalisabilty of that paper is dealt with successfully here.
Example 2.4 Let D ≡ λa.aa and M ≡ (λx.(λy.z)(xx))D. Then
{a:(σ→τ)∩σ}  a : (σ→τ)∩σ
{a:(σ→τ)∩σ}  a :σ→τ
{a:(σ→τ)∩σ}  a : (σ→τ)∩σ
{a:(σ→τ)∩σ}  a :σ
{a:(σ→τ)∩σ}  aa :τ
∅  λa.aa : ((σ→τ)∩σ)→τ
Notice that M → z 〈y :=DD〉 → z 〈y :=DD〉 → · · ·, so M is not strongly normalisable. Also
M → (λx.z 〈y := xx〉 )D →M′ ≡ z 〈y := xx〉 〈x :=D〉 →M′′ ≡ z 〈x :=D〉 . Then both M′ and
M′′ are strongly normalisable, but only the latter is typeable in the system of [11]. Instead,
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 6
in the system presented here, M′ is typeable2 (where D is the derivation given above):
{z:µ}  z :µ
{x:(ρ→ν)∩ρ}  x : (ρ→ν)∩ρ
{x:(ρ→ν)∩ρ}  x :ρ→ν
{x:(ρ→ν)∩ρ}  x : (ρ→ν)∩ρ
{x:(ρ→ν)∩ρ}  x :ρ
{x:(ρ→ν)∩ρ}  xx : ν
{z:µ}  z 〈y :=xx〉 :µ
D
∅  λa.aa : (σ→τ)∩σ→τ
{z:µ}  z 〈y :=xx〉 〈x :=λa.aa〉 :µ
This implies, of course, that, in contrast to the system of [11], the terms (λx.M)N and
M 〈x :=N〉 no longer have the same typing behaviour. In fact, when typing (λx.M)N, the
type used for x in the sub-derivation for Γ  λx.M :σ has to be a type for N, even if x does
not appear in M, whereas rule (cutK) only needs that N is typeable, not that is has the
type assumed for x; actually, in rule (cutK), no type is assumed for x. This then solves the
problem of [11], in that the type used for x to type xx has no relation at all to the type
derived for λa.aa.
As usual for type assignment systems, we have a Generation Lemma and a Subject Reduc-
tion Theorem. First, we formulate some general properties of our system.
Lemma 2.5 i) If Γ  M :τ and Γ′ ≤ Γ and τ ≤ τ′, then Γ′  M :τ′.
ii) If Γ  M :σ→τ and ∆  N :σ, then Γ∩∆  MN :τ.
iii) If Γ  M :σ and x ∈ Γ, then x ∈ pfv(M).
iv) Let Γ  M :σ, and Γ′ = {x:τ ∈ Γ | x ∈ pfv(M)}, then Γ′  M :σ.
Proof: All proofs are by induction on deductions. The only interesting case is point (i) when
the last applied rule is (cutK)
Γ  M :τ ∆  N :σ
(x ∈ Γ)
Γ  M 〈x :=N〉 :τ
and Γ′ = Γ,x:ρ. If y is a fresh variable we can derive by induction Γ′  M[y/x] :τ′ and
conclude using (cutK)
Γ′  M[y/x] :τ′ ∆  N :σ
(y ∈ Γ)
Γ′  M[y/x] 〈x :=N〉 :τ′
Lemma 2.6 (Generation Lemma)
i) If Γ  x :σ, then there exists x:τ ∈ Γ such that τ ≤ σ.
ii) If Γ  MN :σ, then there exist n,σi,ρi (i ∈ n) such that σ = ∩nσi, and Γ  M :ρi→σi and
Γ  N :ρi, for all i ∈ n.
iii) If Γ  λy.M :σ, then there exist n,ρi,µi (i ∈ n) such that σ = ∩n(ρi→µi) and, for all i ∈ n,
Γ,y:ρi  M :µi.
iv) If Γ  M 〈x :=N〉 :σ, then either
a) there exists τ such that Γ,x:τ  M :σ and Γ  N :τ, or
b) Γ\ x  M :σ and there exist ∆,τ such that ∆  N :τ.
Proof: Easy, using Lemma 2.5(i) and rule (∩I) for part (iv).
2 By Subject Reduction (Theorem 2.7) M′′ is typeable too.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 7
A minimal requirement of our system is that it satisfies the subject reduction property
(SR). We show SR for the reduction →p : this gives us for free SR for → .
Theorem 2.7 (Subject Reduction Theorem) If M →p N, and Γ  M :σ, then Γ  N :σ.
Proof: By induction on the definition of the reduction relation, ‘ → ’. We only show the base
cases.
(B) : Then Γ  (λx.M)N :σ, and, by Lemma 2.6(ii), there exist n,σi,ρi (i ∈ n) such that
σ = ∩nσi, and, for all i ∈ n, Γ  λx.M :ρi→σi and Γ  N :ρi. We can assume none of the
σi to be an intersection, so, by Lemma 2.6(iii), for i ∈ n, Γ,x:ρi  M :σi, and therefore, by
rule (cutI), Γ  M 〈x :=N〉 :σi. So, by rule (∩I), Γ  M 〈x :=N〉 :σ.
(App) : Then Γ  (MN) 〈x :=P〉 :σ. Let σ = ∩nσi where none of the σi is an intersection. By
Lemma 2.6(iv), we have two cases:
a) there exists τ such that Γ,x:τ  MN :σ and Γ  P :τ. Then, by Lemma 2.6(ii), for
every i ∈ n, there exists ρi such that Γ,x:τ  M :ρi→σi and Γ,x:τ  N :ρi. Then, by
rule (cutI), Γ  M 〈x :=P〉 :ρi→σi and Γ  N 〈x :=P〉 :ρi.
b) Γ\ x  MN :σ and there exist ∆,τ such that ∆  P :τ. As above, by Lemma 2.6(ii),
there exists ρi such that Γ\x  M :ρi→σi and Γ\ x  N :ρi. Then, by rule (cutK)
and Lemma 2.5(i), Γ  M 〈x :=P〉 :ρi→σi and Γ  N 〈x :=P〉 :ρi.
In both cases, for i ∈ n, by rule (→E), also Γ  (M 〈x :=P〉 )(N 〈x :=P〉 ) :σi, so by rule
(∩I), Γ  (M 〈x :=P〉 )(N 〈x :=P〉 ) :σ.
(Abs) : Then Γ  (λy.M) 〈x :=N〉 :σ. Let σ = ∩nσi where none of the σi is an intersection. By
Lemma 2.6(iv), we have two cases:
a) Γ,x:τ  (λy.M) :σ and there exists τ such that Γ  N :τ. By Lemma 2.6(iii), for
i ∈ n, there exist ρi,µi such that σi = ρi→µi and Γ,x:τ,y:ρi  M :µi. Then, by rule
(cutI), Γ,y:ρi  M 〈x :=N〉 :µi.
b) Γ\ x  (λy.M) :σ and there exist ∆,τ such that ∆  N :τ. As above, there exist ρi,µi
such that σi = ρi→µi and Γ\ x,y:ρi  M :µi. Then, by rule (cutK) and Lemma 2.5(i),
Γ,y:ρi  M 〈x :=N〉 :µi.
In both cases, by rule (→I), Γ  λy.(M 〈x :=N〉 ) :σi, and, by rule (∩I),
Γ  λy.(M 〈x :=N〉 ) :σ.
(VarI) : Then Γ  x 〈x :=N〉 :σ, and, by Lemma 2.6(iv) and (i), there exists τ such that
Γ,x:τ  x :σ. and Γ  N :τ. Then, by Lemma 2.6(i), τ ≤ σ, and, by Lemma 2.5(i),
Γ  N :σ.
(gcp) : Then Γ  M 〈x :=N〉 :σ and x ∈ pfv(M). Then, by Lemma 2.6(iv),
a) either there exists τ such that Γ,x:τ  M :σ, and, by Lemma 2.5(iv), Γ  M :σ.
b) or Γ\ x  M :σ.
In both cases we get Γ  M :σ.
3 All Strongly Normalisable Terms are Typeable
The main result of this paper, that our system types exactly the strongly normalisable terms,
comes in two parts. First we show that all terms in SN are typeable in our system (Theorem
3.3), and then that all typeable terms are in SN (Theorem 4.5).
First we show two technical lemmas which are useful for the proof of Theorem 3.3.
Lemma 3.1 i) If Γ  M 〈x :=N〉 :τ, then there exists Γ′ ≤ Γ such that Γ′  (λx.M)N :τ.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 8
ii) If Γ  (U 〈x :=N〉 )(V 〈x :=N〉 ) :τ then Γ  (UV) 〈x :=N〉 :τ.
iii) If Γ  λy.M 〈x :=N〉 :τ and y ∈ fv(N), then Γ  (λy.M) 〈x :=N〉 :τ.
iv) If Γ  M :τ, ∆  N :σ and x ∈ pfv(M), then Γ  M 〈x :=N〉 :τ.
Proof: i) By Lemma 2.6(iv), if Γ  M 〈x :=N〉 :τ then:
a) either there is ρ such that Γ,x:ρ  M :τ, and Γ  N :ρ. But then, by rules (→I), and
(→E) , we get Γ  (λx.M)N :τ.
b) or Γ\ x  M :τ and there are ∆,ρ such that ∆  N :ρ. But then, by Lemma 2.5(i),
Γ,x:ρ  M :τ so, by rule (→I) and using Lemma 2.5(ii), Γ∩∆  (λx.M)N :τ. Notice
that Γ∩∆≤ Γ.
ii) By Lemma 2.6(ii), if Γ  (U 〈x :=N〉 )(V 〈x :=N〉 ) :τ there are n,ρi,τi (i ∈ n) such that
τ = ∩nτi, Γ  U 〈x :=N〉 :ρi→τi and Γ  V 〈x :=N〉 :ρi. By Lemma 2.6(iv), for each i ∈ n
we can have four different cases:
a) there are µi,νi such that Γ,x:µi  U :ρi→τi, Γ  N :µi, Γ,x:νi  V :ρi, and Γ  N :νi.
But then, by Lemma 2.5(ii) and rule (∩I):
Γ,x:µi∩νi  UV :τi, and Γ  N :µi∩νi
so we get Γ  (UV) 〈x :=N〉 :τi, using rule (cutI).
b) Γ\ x  V :ρi, and there are µi,∆ i,νi such that Γ,x:µi  U :ρi→τi, Γ  N :µi,
∆ i  N :νi. But then, by Lemma 2.5(ii)
Γ,x:µi  UV :τi, and Γ  N :µi
so we get Γ  (UV) 〈x :=N〉 :τi, using rule (cutI).
c) Γ\ x  U :ρi→τi, and there are µi,∆ i,νi such that ∆ i  N :µi, Γ,x:νi  V :ρi,
Γ  N :νi. The proof in this case is similar to that of the previous one.
d) Γ\ x  U :ρi→τi, and there are ∆ i,µi,∆′i,νi such that ∆ i  N :µi, Γ\ x  V :ρi,
∆′i  N :νi. But then, by rule (→E):
Γ\ x  UV :τi, and ∆ i  N :µi
so we get Γ  (UV) 〈x :=N〉 :τi, using rule (cutK) and Lemma 2.5(i).
Finally, using rule (∩I) we conclude Γ  (UV) 〈x :=N〉 :τ.
iii) By Lemma 2.6(iii), if Γ  λy.M 〈x :=N〉 :τ then there are n,µi,νi (i ∈ n) such that
Γ,y:µi  M 〈x :=N〉 :νi, and τ = ∩nνi. By Lemma 2.6(iv) , for each i ∈ n, either:
a) there is ρi such that Γ,y:µi,x:ρi  M :νi and Γ,y:µi  N :ρi. Then, by rule (→I), we
get Γ,x:ρi  λy.M :µi→νi.
b) or Γ\ x,y:µi  M :νi and there are ∆ i,ρi such that ∆ i  N :ρi. Then, by rule (→I),
we get Γ\x  λy.M :µi→νi.
Let m be the subset of n which match the first alternative. If m is not empty then by
Lemma 2.5(i) (notice that by hypothesis y ∈ fv(N)) and rule (∩I):
Γ,x:∩mρi  λy.M :∩n(µi→νi) and Γ  N :∩mρi.
We conclude, using rule (cutI):
Γ  (λy.M) 〈x :=N〉 :τ.
Otherwise if m is empty then, by Lemma 2.5(i) and rule (∩I):
Γ\ x  λy.M :∩n(µi→νi) and ∆ i  N :ρi.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 9
We conclude, choosing an arbitrary ∆ j  N :ρj and using rule (cutK) and Lemma 2.5(i):
Γ  (λy.M) 〈x :=N〉 :τ.
iv) If Γ  M :τ and x ∈ pfv(M), then, by Lemma 2.5(iv), Γ\x  M :τ. We conclude using
rule (cutK) and Lemma 2.5(i).
Lemma 3.2 i) Assume, for all Γ, that Γ  M :σ implies Γ  M′ :σ. Then, for all ∆,N,τ: ∆  M 〈x :=N〉 :τ
implies ∆  M′ 〈x :=N〉 :τ;
ii) Assume, for all Γ, that Γ  M :σ implies there exists Γ′ ≤ Γ such that Γ′  M′ :σ. Then, for all
∆,N,τ: ∆  MN :τ implies that there exists ∆′ ≤∆ such that ∆′  M′N :τ. Moreover, we get
∆′ = ∆ whenever Γ = Γ′.
Proof: i) By Lemma 2.6(iv), ∆  M 〈x :=N〉 :τ implies that either there is ρ such that
∆,x:ρ  M :τ and ∆  N :ρ, or ∆\x  M :τ and there are ∆′,ρ such that ∆′  N :ρ. In
both cases the conclusion easily follows from the assumption.
ii) Similar but simpler.
The characterisation of SN given in Lemma 1.6(i) is crucial to prove that all strongly
normalisable terms are typeable.
Theorem 3.3 If M ∈ SN then Γ  M :σ for some Γ,σ.
Proof: By induction on the rules generating SN (Lemma 1.6(i)) using the Generation
Lemma (Lemma 2.6).
(1) : By induction, Γ  M :σ. We distinguish two cases:
a) If x:τ ∈ Γ, so, by rule (→I), Γ\ x  λx.M :τ→σ.
b) If x ∈ Γ then, by Lemma 2.5(i), Γ,x:τ  M :σ, so, by rule (→I), Γ  λx.M :τ→σ.
(2) : Let |M| = n, then, by induction, there are Γi,σi (i ∈ n) such that Γi  Mi :σi, for i ∈ n.
Then ∩nΓi,{x:σ1→·· ·→σn→τ}  xM :τ.
(3) : By induction, Γ  M 〈x :=N〉 P :σ, and, by Lemma 3.1(i) and 3.2(ii), there exists Γ′ ≤ Γ
such that Γ′  (λx.M)NP :σ.
(4) : By induction, Γ  (U 〈x :=N〉 )(V 〈x :=N〉 ) 〈z :=Q〉 P :σ, and, by Lemma 3.1(ii) and
3.2, Γ  (UV) 〈x :=N〉 〈z :=Q〉 P :σ.
(5) : By induction, Γ  (λy.M 〈x :=N〉 ) 〈z :=Q〉 P :σ, and, by Lemma 3.1(iii) and 3.2,
Γ  (λy.M) 〈x :=N〉 〈z :=Q〉 P :σ.
(6) : This case follows immediately from Lemma 3.2 and rule (cutI).
(7) : If x ∈ fv(M), then x ∈ pfv(M). By induction, Γ  M 〈z :=Q〉 P :σ and ∆  N :τ, and, by
Lemma 3.1(iv) and 3.2, Γ  M 〈x :=N〉 〈z :=Q〉 P :σ.
Notice that, since subject expansions preserving strong normalisation do not preserve
types, we can only assure that the expanded term is always typeable by the theorem above.
For example we can derive
 λy.(λz.z) 〈x := yy〉 : ϕ→σ→σ
where ϕ is an atom, but we cannot derive
 λy.(λxz.z)(yy) : ϕ→σ→σ.
A typing for the last term is for example:
 λy.(λxz.z)(yy) :τ∩(τ→ρ)→σ→σ.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 10
4 All Typeable Terms are Strongly Normalisable
The general idea of the reducibility method is to interpret types by suitable sets (saturated
and stable sets in Tait [24] and Krivine [16] and admissible relations in Mitchell [19] and [20])
of terms (reducible terms) which satisfy the required property (e.g. strong normalisation) and
then to develop semantics in order to obtain the soundness of the type assignment. A
consequence of soundness, the fact that every term typeable by a type in the type system
belongs to the interpretations of that type, leads to the fact that terms typeable in the type
system satisfy the required property, since the type interpretations are built up in that way.
In order to develop the reducibility method we consider the applicative structure whose
domain are terms in Λx and where the application is just the application of terms.
Definition 4.1 (Reducible terms) i) We define the collection of set of terms Rρ induc-
tively over types by:
Rϕ = SN
Rσ→τ = {M | ∀N [N ∈Rσ ⇒ MN ∈Rτ ]}
Rσ∩τ = Rσ ∩Rτ .
ii) We define the set R of reducible terms by: R = {M | ∃ ρ [M ∈Rρ]} = ⋃ρ∈T Rρ.
Notice that, if M ∈Rσ, not necessarily there exists a Γ such that Γ  M :σ. For example,
if ϕ, ϕ′ are two different type variables, then λx.x ∈Rϕ→ϕ′ , since (λx.x)M ∈ SN whenever
M ∈ SN . But we cannot derive  λx.x : ϕ→ϕ′. Moreover, since λx.x ∈ SN , λx.x ∈Rϕ, but
we cannot derive  λx.x : ϕ.
We now show that reducibility implies strongly normalisability and that all term-variables
are reducible. For the latter, we need to show that all typeable strongly normalisable terms
that start with a term variable are reducible.
Lemma 4.2 i) R⊆ SN .
ii) xN ∈ SN ⇒ ∀ ρ [xN ∈Rρ].
Proof: By simultaneous induction on the structure of types.
i) (ϕ) : By Definition 4.1.
(σ→τ) : M ∈Rσ→τ ⇒ (4.1 & IH(ii)) Mx∈Rτ ⇒ (IH(i)) Mx ∈ SN ⇒ M ∈ SN .
(σ∩τ) : M ∈Rσ∩τ ⇒ (4.1) M ∈Rσ & M ∈Rτ ⇒ (IH(i)) M ∈ SN .
ii) (ϕ) : xN ∈ SN ⇒ (4.1) xN ∈Rϕ.
(σ→τ) : We show that for an arbitrary M ∈Rσ we get xNM ∈Rτ . We conclude
xN ∈Rσ→τ by Definition 4.1.
M ∈Rσ ⇒ (IH(i)) M ∈ SN .
xN ∈ SN & M ∈ SN ⇒ (1.6(i)(2)) xNM ∈ SN ⇒ (IH(ii)) xNM ∈Rτ.
(σ∩τ) : xN ∈ SN ⇒ (IH(ii)) xN ∈Rσ & xN ∈Rτ ⇒ (4.1) xN ∈Rσ∩τ.
We will now show that the reducibility predicate is closed for subject expansion, preserv-
ing strong normalisation, with respect to the reduction rules (B), (App), (Abs), (VarI), (gcp)
and with respect to distribution of substitution. These results are needed in the proof of
Theorem 4.5.
Lemma 4.3 i) If M 〈x :=N〉Q ∈Rµ, then (λx.M)NQ ∈Rµ.
ii) If (M1 〈x :=N〉 )(M2 〈x :=N〉 )Q ∈Rµ, then (M1M2) 〈x :=N〉 Q∈Rµ.
iii) If (λy.M′ 〈x :=N〉 ) P∈Rµ and y ∈ fv(N), then (λy.M′) 〈x :=N〉 P∈Rµ.
iv) If N 〈z :=Q〉 P∈Rµ, then x 〈x :=N〉 〈z :=Q〉 P∈Rµ.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 11
v) If M 〈z :=Q〉 P ∈Rµ, N ∈Rρ and x ∈ pfv(M), then M 〈x :=N〉 〈z :=Q〉 P∈Rµ.
vi) If (P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )M ∈Rµ, then ((P 〈y :=Q〉 ) 〈x :=N〉 )M ∈Rµ.
Proof: By induction on the structure of types.
(ϕ) : The proofs of these properties are all very similar, using Lemma 1.6(i) for the first four
partes, Lemma 1.6(ii)(8) and (iii) for part (v), and Lemma 1.7 for part (vi). So it sufficies
to show this last case. (P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )M ∈Rϕ ⇒ (4.1)
(P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )M ∈ SN ⇒ ( Lemma 1.7)
((P 〈y :=Q〉 ) 〈x :=N〉 )M ∈ SN ⇒ (4.1)
((P 〈y :=Q〉 ) 〈x :=N〉 )M ∈Rϕ.
(σ→τ) : We consider again part (vi), the other parts being similar. Let R ∈Rσ be arbitrary.
(P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )M ∈Rσ→τ ⇒ (4.1)
(P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 )MR∈Rτ ⇒ (IH)
((P 〈y :=Q〉 ) 〈x :=N〉 )MR∈Rτ ⇒ (4.1)
((P 〈y :=Q〉 ) 〈x :=N〉 )M ∈Rσ→τ.
(σ∩τ) : For all properties this case is immediate by Definition 4.1 and induction.
We shall prove our strong normalisation result by showing that every typeable term is
reducible. For this, we need to prove a stronger property: we will show that if we substitute
term variables by reducible terms in a typeable term, then we obtain a reducible term. This
gives the soundness of our type interpretation.
Theorem 4.4 (Soundness) If {x1:µ1, . . . ,xn:µn}  M :σ, and, for 1≤ i≤n, Ni ∈Rµi , such that
xi ∈ fv(Nj), for all 1≤ i, j≤ n, then M 〈x :=N〉 ∈Rσ.
Proof: By induction on the structure of derivations. Let Γ = {x1:µ1, . . . ,xn:µn}.
(Ax) : Then M ≡ xj, and µj = σ, for some 1≤ j≤n. Since Nj ∈Rµ j , Nj ∈Rσ. Then, by
Lemma 4.3(iv) and (v), xj 〈x :=N〉 ∈Rσ.
(→I) : Then M ≡ λy.M′, σ = ρ→τ, and B,y:ρ  M′ :τ. Let N ∈Rρ, then, by induction,
M′ 〈x :=N〉 〈y :=N〉 ∈Rτ . So, by Lemma 4.3(i), (λy.M′ 〈x :=N〉 )N ∈Rτ , and, by
Definition 4.1, λy.M′ 〈x :=N〉 ∈Rρ→τ . We can assume y ∈ fv(N), so, by Lemma 4.3(iii),
(λy.M′) 〈x :=N〉 ∈Rρ→τ.
(→E) : Then M ≡ M1M2 and there exists τ such that Γ  M1 :τ→σ and Γ  M2 :τ. By
induction, M1 〈x :=N〉 ∈Rτ→σ and M2 〈x :=N〉 ∈Rτ . But then, by Definition 4.1,
M1 〈x :=N〉M2 〈x :=N〉 ∈Rσ, so, by Lemma 4.3(ii), (M1M2) 〈x :=N〉 ∈Rσ.
(∩I) : Then σ ≡ σ1∩σ2 and, for i ∈ 2, Γ  M :σi. So, by induction, M 〈x :=N〉 ∈Rσ1 and
M 〈x :=N〉 ∈Rσ2 , so, by Definition 4.1, M 〈x :=N〉 ∈Rσ.
(∩E) : Then there exists τ such that Γ  M :σ∩τ, and, by induction, M 〈x :=N〉 ∈Rσ∩τ .
Then, by Definition 4.1, M 〈x :=N〉 ∈Rσ.
(cutI) : Then M ≡ P 〈y :=Q〉 , and there exists τ such that Γ,y:τ  P :σ and Γ  Q :τ. Then,
by induction, Q 〈x :=N〉 ∈Rτ , so, again by induction,
P 〈x :=N〉 〈y :=Q 〈x :=N〉 〉 ∈Rσ. So, by Lemma 4.3(vi), (P 〈y :=Q〉 ) 〈x :=N〉 ∈Rσ.
(cutK) : Then M ≡ P 〈y :=Q〉 , Γ  P :σ, y ∈ Γ and there exist ∆,τ such that ∆  Q :τ. Let
∆ = {z1:µ1, . . . ,zm:µm}. By Lemma 4.2(ii), for all j∈m, zj ∈Rρj , and therefore, by
induction, Q∈Rτ . By Lemma 2.5(iii), y ∈ pfv(P). So, by Lemma 4.3(v),
(P 〈y :=Q〉 ) 〈x :=N〉 ∈Rσ.
Theorem 4.5 If Γ  M :σ for some Γ,σ then M ∈ SN .
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 12
Proof: By Lemma 4.2(ii), all term variables are reducible for any type, so, by Theorem 4.4,
for all M, M 〈x := x〉 is reducible. Strong normalisation of M 〈x := x〉 then follows from
Lemma 4.2(i). Since M 〈x := x〉 →M, also M ∈ SN .
5 Final Remarks
Only after writing the first version of the present paper we realized that Dougherty, Lengrand
and Lescanne solved the same problem in [10] with a similar type assignment system. The
only difference is the formulation of rule (cutK) which becomes:
Γ  M :τ ∆  N :σ
(x ∈ pfv(M))
Γ  M 〈x :=N〉 :τ
Lemma 2.5(iii) and (iv) the two systems deduce the same types for the same terms. Deeper
relations between the two systems will be object of further investigations.
If we add an universal type Ω with the axiom (Ω) [8]:
Γ  M :Ω
then in the so obtained system, rule (cutK) becomes admissible. But using axiom (Ω) we
can type trivially all terms, and we can also type terms which are not strongly normalising
with types different from Ω. An example is y:ϕ  (λx.y)((λz.zz)(λz.zz)) : ϕ. So we cannot
obtain a characterisation of the set SN .
In the line of [9], we plan to characterise by means of intersection types disciplines other
compositional properties of calculi of explicit substitutions, like that of reducing to a closed
term or of being a weak head-normalising term.
Finally we will explore the possibility of building suitable type intersection assignment
systems for showing that some calculi of explicit substitutions enjoy the weak or strong
normalisation property.
References
[1] M. Abadi, L. Cardelli, P.-L. Curien, and J.-J. Le´vy. Explicit substitutions. Journal of Functional
Programming, 1(4):375–416, 1991.
[2] R. M. Amadio and P.-L. Curien. Domains and lambda-calculi. Cambridge University Press, Cam-
bridge, 1998.
[3] S. van Bakel. Complete restrictions of the intersection type discipline. Theoret. Comput. Sci.,
102(1):135–163, 1992.
[4] S. van Bakel. Intersection type assignment systems. Theoret. Comput. Sci., 151(2):385–435, 1995.
Thirteenth Conference on Foundations of Software Technology and Theoretical Computer Science
(Bombay, 1993).
[5] Z. Benaissa, D. Briaud, P. Lescanne, and J. Rouyer-Degli. λv, a calculus of explicit substitutions
which preserves strong normalization. Journal of Functional Programming, 6(5):699–722, 1996.
[6] R. Bloo and K. Rose. Preservation of strong normalization in named lambda calculi with ex-
plicit substitution and garbage collection. In Computer Science in the Netherlands, pages 62–72.
Koninklijke Jaarbeurs, 1995.
[7] M. Coppo and M. Dezani-Ciancaglini. An extension of the basic functionality theory for the
λ-calculus. Notre Dame J. Formal Logic, 21(4):685–693, 1980.
[8] M. Coppo, M. Dezani-Ciancaglini, and B. Venneri. Principal type schemes and λ-calculus seman-
tics. In To H. B. Curry: essays on combinatory logic, lambda calculus and formalism, pages 535–560.
Academic Press, London, 1980.
LATIN’02, Cancun, Mexico, LNCS 2286, pp. 356-370, 2002 13
[9] M. Dezani-Ciancaglini, F. Honsell, and Y. Motohama. Compositional characterization of λ-terms
using intersection types. In Mathematical Foundations of Computer Science 2000, volume 1893 of
Lecture Notes in Computer Science, pages 304–313. Springer, 2000.
[10] D. Dougherty, S. Lengrand, and P. Lescanne. Types and explicit substitutions. to appear, 2001.
[11] D. Dougherty and P. Lescanne. Reductions, intersection types and explicit substitutions. In Typed
Lambda Calculi and Applications 2001, volume 2044 of Lecture Notes in Computer Science, pages 121–
135. Springer, 2001.
[12] J. Gallier. Typing untyped λ-terms, or reducibility strikes again! Ann. Pure Appl. Logic, 91:231–
270, 1998.
[13] S. Ghilezan. Strong normalization and typability with intersection types. Notre Dame J. Formal
Logic, 37(1):44–52, 1996.
[14] J.-Y. Girard. Une extension de l’interpre´tation de Go¨del a` l’analyse, et son application a`
l’elimination des coupures dans l’analyse et la the´orie des types. In 2nd Scandinavian Logic Sym-
posium, pages 63–92. North-Holland, 1971.
[15] F. Kmamareddine and A. Rios. Extending a λ-calculus with explicit substitutions which preserves
strong normalization into a colfluent calculus of open terms. Journal of Functional Programming,
7(4):395–420, 1997.
[16] J.-L. Krivine. Lambda-calcul Types et mode`les. Masson, Paris, 1990.
[17] D. Leivant. Typing and computational properties of lambda expressions. Theoret. Comput. Sci.,
44(1):51–68, 1986.
[18] P.-A. Mellie`s. Typed λ-calculi with explicit substitution may not terminate. In Typed Lambda
Calculi and Applications 2001, volume 902 of Lecture Notes in Computer Science, pages 328–334.
Springer, 1995.
[19] J. C. Mitchell. Type systems for programming languages. In J. van Leeuwen, editor, Handbook of
Theoretical Computer Science, volume B, pages 415–431. Elsevire, Amsterdam, 1990.
[20] J. C. Mitchell. Foundation for Programmimg Languages. MIT Press, 1996.
[21] G. Pottinger. A type assignment for the strongly normalizable λ-terms. In To H. B. Curry: essays
on combinatory logic, lambda calculus and formalism, pages 561–577. Academic Press, London, 1980.
[22] E. Ritter. Characterizing explicit substitutions which preserve termination. In Typed Lambda
Calculi and Applications 1999, volume 1581 of Lecture Notes in Computer Science, pages 325–339.
Springer, 1999.
[23] P. Severi. Normalisation in lambda calculus and its relation to type inference. PhD thesis, Eindhoven
University of Technology, 1996.
[24] W. W. Tait. Intensional interpretations of functionals of finite type I. Journal of Symbolic Logic,
32:198–212, 1967.
[25] W. W. Tait. A realizability interpretation of the theory of species. In Logic Colloquium, volume 453
of Lecture Notes in Mathematics, pages 240–251. Springer, 1975.
