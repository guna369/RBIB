JOURNAL OF COMPUTER AND SYSTEM SCIENCES 16, 158-167 (1978)

Linear Unification M. S. PATERSON*
University of Warwick, Coventry, England CV4 7AL AND
M. N. WEGMAN
IBM Thomas J. Watson Research Center, Yorktown Heights, New York 10598 Received September 29, 1976

A unification algorithm is described which tests a set of expressions for unifiability and which requires time and space which are only linear in the size of the input.

1. INTRODUCTION
The problem of unification arises in work on theorem proving and has been extensively treated in the literature [l]. From the set U of finite terms over a set of function symbols (including constants) and a countable set of variable symbols {x1 , X, ,...}, there is given a finite set of pairs of terms ((ui , ui) / i ~1). The unification problem is to determine the existence of a substitution (T= {(xj -+ ti) j tj E U, j > 0} such that u(z+) = u(q) for i E.Z. The substitution is to be carried out simultaneously on all variable occurrences. Less formally and less generally, unification is accomplished by substituting expressions for variables in such a way as to make two expressions identical. Such a substitution 0 is a un$er and for any unifiable set of pairs there is a most general u;Jier (mgu) which is unique to within a permutation of variables, and from which any other unifier can be produced by a further substitution.
EXAMPLE 1.

is unifiable with mgu x1 -+ G(G(x,)), X, + G(x~), xj + Xj for j > 2.

EXAMPLE 2.

{(xl> G(x&l

* The first author was partially supported by the CNR of Italy at the IAC, Rome

and by the NSF (Grant MCS72-03752

AO3), the ONR (NOOO14-76-C-0330),

Corporation while at Stanford University in 1976.

0022~OOOO/78/0162-O158$02OO/O
Copyright 0 1978 by Academic Press, Inc. All rights of reproduction in any form reserved.

158

in March 1974; and the IBM

LINEAR UNIFICATION

159

is not unifiable. With a somewhat different framework we might wish to regard this as unifiable with the ix-&mitesubstitution x1-+ G (G(..., and we shall return to this briefly in a later section.

EXAMPLE 3.

is unifiable but the image of x, in the mgu is a term with 2+l occurrences of x, . It is undesirable and fortunately unnecessary to represent substitutions in explicit form. In this case we may write just

x, -+ F(x,.q , X,-l), X,-l + J&a-,

, %-2)~-v

x2 - JTXl 9 4

where these replacements are to be carried out sequentially from the left, i.e., all occurrences of x, are replaced and then all (old and new) occurrences of x,-r , etc. In this form the mgu for Example 1 is x1 + G(xz), x2 + G(xJ. In our algorithm we shall always produce a substitution as such a sequence

xi, -+ t, , xi, + t, ,...

where for eachj > 0, tj contains no xi, with k < j.

2. REPRESENTATION
Terms from U are naturally representable as directed trees with nodes labeled with function and variable symbols. However, we have seen already that the size of trees we may wish to consider may grow exponentially asa result of a unification. Wewill therefore adopt initially a more economical representation using directed acyclic graphs (dags) in which common subexpressions are represented by a single subgraph. Example 1 and its unification are illustrated in Fig. 1. A node labeled with a k-ary function symbol (k > 0) has outdegree k and for k > 1 the outgoing arcs are distinguished so that we may refer to the first son, second son, etc. A node labeled with a variable symbol has outdegree 0 and there is only one such node for each distinct variable. We shall refer to these asfunction nodes (even when k = 0 for constants) and variable nodes. Any node with indegree 0 is a root.
FF

FIGURE 1

x3

160 PATERSON AND WEGMAN
To simplify the discussion we shall consider problems in which only one pair of terms is to be unified. Any set of pairs can be combined so that corresponding terms occupy corresponding subterms in a pair of constructed terms; for example, {(x1 , G(x.J), (F(x, , x2), x3)} would be replaced by {(F(x, , F(x, , ~a)),E;(G(x,), x3))}. This transformation involves only a linear increase in the length of input, the result is unifiable if and only if the original set is unifiable, and moreover the mgu’s are the same. Thus the input to our algorithm is to be a dag with a pair of distinguished nodes which are to be unified. Two such nodes are said to be unifiable if the expressions they represent are unifiable. If one of these nodes is an ancestor of the other then they are not unifiable and it should be evident that any ancestor nodes of the distinguished pair are irrelevant and could be deleted. Therefore we may as well assume that they are both roots of the dag.
Our aim is to be economical in our use of machine capabilities; for example, we shall not require features such as table look-up, hashing functions, or random accessing. We shall use only operations which manipulate pointers and compare labels. Since we are considering substitutions which are applied uniformly to all occurrences of the same variable, it is natural to assume that all pointers to a given variable are pointers to the same location.
3. PRELIMINARY RESULTS AND SIMPLE ALGORITHMS
An equivalence relation on the nodes of a dag is valid if it has the following properties:
(i) if two function nodes are equivalent then their corresponding sons are equivalent in pairs;
(ii) each equivalence classis homogeneous,that is it does not contain two nodes with distinct function symbols;
(iii) the equivalence classesmay be partially ordered by the partial order on the dag.
Properties (i) and (ii) ensure that if each equivalence classis coalesced to a single node then the resulting reduced graph may be consistently labeled with symbols and have arcs appropriate to the arities. Property (iii) is the condition that this reduced graph is acyclic.
LEMMA 1. Nodes u, v are uni~able ;f and only if there is a valid equivalence relation with u = v. In the afirmative case there is a unique minimal valid equivalence relation.
Proof. If (u, v) is unifiable then let u be a unifier. Define a relation .Z on nodes by ~2’s if the images under u of the terms represented by r and s are equal. Property (iii) holds, since the equivalence classescan be aptly labeled with the common term represented by its nodes after applying u and the reduced graph gives just the subexpression relation among a set of finite terms and so is acyclic. It is easily verified that ~2% and Z is a valid equivalence relation.
On the other hand suppose 2 is a valid equivalence relation and ~2%. From the (homogeneous) equivalence classes containing each of the variable nodes, a unifying substitution is immediately derivable.

LINEAR UNIFICATION

161

Finally, if u and z, are unifiable then consider the equivalence relation developed from u z= v by combining equivalence classes only when required by condition (i). The resulting equivalence relation is contained in any valid equivalence relation for which u G v and so is itself valid. It is certainly uniquely minimal. 1
We shall initially describe algorithms from the point of view of an intelligent human with a blackboard and chalk. The following naive algorithm implements the procedure of the final part of the above proof. Some representation of an equivalence relation I‘=” is maintained. Initially the relation is empty and then it is progressively augmented by “setting” certain pairs of elements to be equivalent, i.e., coalescing their two equivalence classes.

ALGORITHM

A.

Comment: tests the pair of nodes u, v for unifiability. Begin
Set u = v. While (there is a pair of nodes Y, s with r = s but with the relation r’ = s’ unknown
for a pair of corresponding sons Y’, s’), set r’ = s’. Test the relation “=” for conditions (ii) and (iii) of validity. If “=” valid, print (“UNIFIABLE”)
else print (“UNUNIFIABLE”) and halt.

End of Algorithm A.

In view of the crudity of the algorithm we shall not bother to describe the output of an mgu. A potential source of inefficiency in Algorithm A is that within some equivalence class of size K a number of pairs nonlinear in k may be checked or set equivalent in the “while” loop, even if care is taken that no pair is set equivalent twice. Even with the best published equivalence-handling algorithm known, a nonlinear amount of time would be required. Huet and Kahn [2], and Robinson [3] have shown that similar techniques give an algorithm for obtaining an mgu in O(n . I) time, where 01is the functional inverse of Ackerman’s function. They use the well-known UNION-FIND algorithm to test and set equivalence [4]. A variant of this technique can be used to test equivalence of finite automata [5]. Setting sons equivalent when their fathers are equivalent, as is done in the “while” loop above, will be referred to as propagation. To achieve a linear algorithm we must propagate the equivalence relation in a carefully ordered way, taking one completed equivalence class at a time.
An equivalence class of dag nodes containing only roots will be called a root cZuss.The crucial property of root classesis that no root class can be further extended by later propagation of the equivalence relation since propagation is only from fathers to sons. An important observation is the following.

LEMMA 2. Any nonempty equivalence relation satisfying condition (iii) of validity has a root class.

162 PATERSON AND WEGMAN
Proof. Any maximal (i.e., nearest the roots) equivalence class in any partial order guaranteed by (iii) must be a root class. 1
Algorithm A may be improved as follows.

ALGORITHM B.

Begin

Set 21= v.

While there exists a root class R do

begin

If R is not homogeneous, print (“UNUNIFIABLE”) and halt.

Suppose R = {r, ,..., rk) where if R contains a function node, rr is a function node.

For i = 2 step 1 until K do

begin

If ri is a variable node then print (ri , “+“, rJ.

If ri is a function node then

for j = 1 step 1 until (outdegree (rr)) do

set jth son(ri) z jth son(r,).

end.

Delete nodes of R and their outgoing arcs.

end. If any nodes remain, print (“UNUNIFIABLE”)

else print (“UNIFIED”).

End of Algorithm B.

Note that in the equivalence class R we propagate just K - 1 pairs, (rI = ri) for i = 2,..., k. Since “z” is treated as an equivalence relation this set is certainly adequate. If unification succeeds then in the final equivalence relation no further nodes are added
to such a classR, because R is a root class. Thus R may indeed be correctly deleted after processing. The mgu is output in the form of a sequence of substitutions “r --+ s” where
in each case r is a variable node and s is another node. This is a convenient form for future processing and construction of dags.
Algorithm B checks complete equivalence classesfor homogeneity before processing, but never needs to check the acyclicity condition, (iii). Suppose the minimal equivalence relation satisfying “u zz v” and conditions (i) and (ii) indeed had a cycle in its reduced graph. Then no class of the cycle could ever become a root class in the algorithm and so the algorithm could never terminate successfully.
We hope the reader needs no further persuasion as to the correctness of Algorithm B.

4. A LINEAR ALGORITHM
It remains to give an efficient procedure for finding a root class and to provide more details throughout.

LINEAR UNIFICATION

163

ALGORITHM C

Comment: to test (u, V) for unifiability

Begin

Create undirected edge (u, o).

While there is a function node Y, Finish (T).

While there is a variable node r, Finish (r).

Print (“UNIFIED”)

and halt.

Procedure Finish (Y)

Begin

If pointer(r) defined then print (“FAIL : LOOP”) and halt

else pointer(r) := r

Create new pushdown stack with operations Push(*) and Pop.

Push(r).

While stack nonempty do

begin

s := Pop

If r, s have different function symbols then print (“FAIL : CLASH”)

While s has some father t do Finish(t).

While there is an undirected edge (s, t) do

begin

If pointer(t) undefined then pointer(t) := r

If pointer(t) # t then print (“FAIL : LOOP”) and halt.

Delete undirected edge (s, t).

Push(t).

end.

Ifs # r then

begin

If s is variable node, print (s, “+“, r).

If s is a function node with outdegree q > 0

then create undirected edges {jth son(r), jth son(s)) 1 1 < j <

Delete s and directed arcs out of s

end.

end.

Delete node r and all directed arcs out of r.

End of Finish.

and q}

halt.

End of Algorithm C.

An important feature of the procedure Finish is that it does not begin to look at the equivalence edges at a node s until all fathers of s have been deleted and s has become a root of the current graph. The recursive structure of Finish ensures that if work is begun on a nonroot class this is suspended when a nonroot is encountered and that each equivalence class which is completed is a root class. The total effect is therefore similar to Algorithm B in which a root class was “found” whenever needed. It may be seen that Finish can recognize a node which has been met in a previous invocation of Finish by

164 PATERSON AND WEGMAN
inspecting its pointer. Such a node proves nonunifiability. The argument of Finish will always be a function node of the dag unless the dag has been reduced already to a set of isolated leaves.
To verify the linearity of Algorithm C given a reasonable data structure, we can partition the running time into segments of bounded size and assign these segments either to nodes of the dag, arcs of the dag, or edges of the equivalence relation. It is easy to do this so that each is assigned only a bounded number of segments, noting only that iterations of the second “while” loop of Finish should be assigned to the father t, rather than the son s. Now we observe that the total number of equivalence edges is bounded above by the number of arcs of the dag, hence the total running time is linear in the “nodes - edges” of the dag and thus presumably linear in the length of the input representation. For a pointer machine of the kind we are considering, the space required cannot exceed the running time.

5. DATA STRUCTURES

We will review here the basic capabilities required for a linear implementation of Algorithm C. It seems to be easier to mark nodes as “nonexistent” instead of actually deleting them.
For the global structure we need, in order to

(I) find a new function node or variable node, a list of pointers to all nodes, with function nodes preceding variable nodes, though a careful traversal of the dag structure itself would suffice
(II) manage recursion and local pushdown stacks, a pushdown stack.

For each node, s, of the dag we need, in order to

(i) determine the existence and symbol of s, a label which may take as its value “DELETED,” function symbol,
(ii) determine if s is a root, a list of pointers to fathers of s,
(iii) enumerate sons of s, a list of pointers to sons
(iv) represent equivalence edges, a list of edges (s, t) incident with s
(v) to indicate Pointer (s), a pointer.

“VARIABLE,”

or any

The fathers list of each node is used as follows. A pointer is moved along the list from “left” to “right” and whenever another father is sought the pointer is moved to the next father which is not marked “DELETED.” Thus the total number of pointer moves

LINEAR UNIFICATION

165

made is just the number of fathers of the node in the original dag. This method obviates the need for backward pointers to a linked list. A similar procedure is used on the edge lists.

6. CONCLUSION
Returning to Algorithm C one can see that the acyclicity condition is no longer an extra check at the end but is an integral part of the correctness and efficiency of the algorithm. Indeed we know of no linear algorithm for unification with infinite expressions. The current best published algorithm, the above-mentioned one of Huet and Kahn, and Robinson, maintains an “on-line” equivalence relation using the well-known UNIONFIND algorithm. This version of unification has applications to solving the equivalence problem for finite automata or to unification in a structure like the h-calculus in which there is a fixed-point operator.
Martelli and Montanari [6] have used similar techniques and independently obtained a linear algorithm, which they have implemented in PASCAL.
Though our concern for linearity is primarily of theoretical importance we believe that our algorithm is sufficiently simple and economical to implement, compared with others which have been proposed, that it may have a useful future in the practical domain.

APPENDIX: A WORKED EXAMPLE
We will attempt to give some of the intuition behind the linear algorithm, by working an example, and highlighting the important steps. We will leave out certain operations, which are needed by the algorithm, because either in our example they are unnecessary or they obscure the example.
The question is, is
unifiable ? First we make a dag and add an undirected edge between the two roots. An undirected
arc will be represented pictorially as a wide line with no arrowheads (Fig. 2).

FIGURE 2

166 PATERSON AND WEGMAN Suppose D(x, y) is the first function node we encounter. We will define its pointer as
being to itself. We will represent this pictorially by adding a number 1 to label the node. We then explore its father C, by recursively invoking Finish. C’s pointer is labeled with a 2 and we again recursively explore A, C’s father, labeling A with a 3. (We leave it to the reader to understand which C node or A node we mean. We chose numbers for pointers because they are unique.) As there are no fathers of this A, we travel across the undirected arc to the other A and label it with a 3. Undirected arcs are drawn between corresponding sons of the A nodes, and the A nodes and associated arcs are deleted. We will pictorially denote a delete arc by a dashed line, and a deleted node by a slash through it.
The picture now looks like Fig. 3.
FIGURE 3 Since we are finished with the call Finish(A), we return to processing the equivalence classthat will eventually be marked with a 2. We travel across to the other C node, draw arcs between corresponding sons, and delete the C nodes and their associated arcs (Fig. 4).
FIGURE 4
We now return to D. We travel across to v, but before we delete v, we must visit its father. This step is necessary in the algorithm, otherwise we would miss the fact that D and v must be unified with i and w. The classwith B in it is finished (Fig. 5).

LINEAR UNIFICATION

167

Finally, the first classwe started with is finished, and the classescontaining x and y are finished, and so are:we (Fig. 6).

ACKNOWLEDGMENTS

We have had useful conversations

with and comments on this work from Larry Carter, Marisa

Venturi&Zilli,

Bob Tarjan, Don Knuth, Paul Gilmore, and Alan Robinson.

REFERENCES

1. J. A. ROBINSON, Computational

logic: the unification computation, Machine Intelligence 6 (1971).

63-72.

2. G. Hmrr AND G. KAHN, private communication,

April 1974.

3. J. A. ROBINSON, private communication,

October 1975.

4. R. E. TARJAN, Efficiency of a good but not linear set union algorithm, J. Assoc. Cornput. Much.

22 (1975), 215-225.

5. A. V. AHo, J. E. HOPCRO~, AND J. D. ULLMAN, “The Design and Analysis of Computer

Algorithms,”

p. 144, Addison-Wesley,

Reading, Mass., 1974.

6. A. MARTELLI ANI) U. MONTANARI, Unification in Linear Time and Space: A Structured Presenta-

tion, Internal Report B 76-16, Istituto di Elaborazione della Informazione,

Pisa, Italy, July 1976.

